language: swift
name: HumanEval_22_filter_integers
results:
- exit_code: -4
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        switch value {\n    \
    \    case let v as Int:\n            filtered.append(v)\n        default:\n  \
    \          filtered = []\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: Exception
  stderr: 'tmpuhfbjs_t/tmpuhfbjs_t.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5db2f7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5db2c75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5db2c75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5db2c747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuhfbjs_t                        0x00005629aa6ecd6b <unavailable> + 7531

    5    libc.so.6                          0x00002b5db316a460 __libc_start_main +
    245

    6    tmpuhfbjs_t                        0x00005629aa6ec679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1660009134
- exit_code: -4
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filteredValues = [Int]()\n    for value in values {\n        guard let value\
    \ = value as? Int else {\n            filteredValues.append(0)\n            continue\n\
    \        }\n        filteredValues.append(value)\n    }\n    return filteredValues\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: Exception
  stderr: 'tmp83prugkc/tmp83prugkc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0841663c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b084135ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b084135a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08413597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp83prugkc                        0x000055bd5d2c3d6b <unavailable> + 7531

    5    libc.so.6                          0x00002b084184f460 __libc_start_main +
    245

    6    tmp83prugkc                        0x000055bd5d2c3679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ integers = [Int]()\n    for (index, value) in values.enumerated() {\n      \
    \  let intValue = value as! Int\n        if intValue != nil && !intValue.isNaN\
    \ {\n            integers.append(intValue)\n        }\n    }\n    return integers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp468tc_5e.swift:11:41: error: value of type 'Int' has no member\
    \ 'isNaN'\n        if intValue != nil && !intValue.isNaN {\n                 \
    \              ~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ filteredValues = values.filter { Int($0) != nil }\n    if filteredValues.count\
    \ > 0 {\n        return filteredValues.map({ Int($0) })\n    } else {\n      \
    \  return [0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp32suwtda.swift:8:46: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    let filteredValues = values.filter {\
    \ Int($0) != nil }\n                                             ^\n         \
    \                                       as! String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        guard let value = value\
    \ as? Int else { continue }\n        result.append(value)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { Int($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvdfe5zg6.swift:8:36: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    return values.compactMap { Int($0) }\n\
    \                                   ^\n                                      as!\
    \ String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        if let value = $0 as? Int { return value }\n      \
    \  return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzyk_b_pc.swift:9:44: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n        if let value = $0 as? Int { return value }\n\
    \                                           ^\n                              \
    \             (     != 0)\n/tmp/tmpzyk_b_pc.swift:8:19: error: cannot convert\
    \ return expression of type '[AnyHashable]' to return type '[Int]'\n    return\
    \ values.filter {\n                  ^\n/tmp/tmpzyk_b_pc.swift:8:19: note: arguments\
    \ to generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be\
    \ equal\n    return values.filter {\n                  ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: -4
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ values = [Int]()\n    for value in values {\n        guard let intValue = value\
    \ as? Int else {\n            values.append(0)\n            continue\n       \
    \ }\n        values.append(intValue)\n    }\n    return values\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: Exception
  stderr: 'tmp_gxe65sy/tmp_gxe65sy.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac23ae12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac23ab09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac23ab09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac23ab087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_gxe65sy                        0x0000559e89077cbb <unavailable> + 7355

    5    libc.so.6                          0x00002ac23affe460 __libc_start_main +
    245

    6    tmp_gxe65sy                        0x0000559e890775c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int }).filter({ $0 != nil })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter(values, { $0 is Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk41dyqkh.swift:8:12: error: cannot find 'filter' in scope\n   \
    \ return filter(values, { $0 is Int })\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    \n\
    \    var filteredValues = [Int]()\n    \n    for value in values {\n        \n\
    \        if let value = value as? Int {\n            \n            filteredValues.append(value)\n\
    \        }\n    }\n    \n    return filteredValues\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: -4
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for item in values {\n        guard let value = item as?\
    \ Int else {\n            fatalError(\"Expected only integers\")\n        }\n\
    \        result.append(value)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: Exception
  stderr: 'tmpzfe0fm1a/tmpzfe0fm1a.swift:11: Fatal error: Expected only integers

    Current stack trace:

    0    libswiftCore.so                    0x00002b729a225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7299f1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7299f1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7299f1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 365

    4    tmpzfe0fm1a                        0x00005637db1692ad <unavailable> + 8877

    5    tmpzfe0fm1a                        0x00005637db168c6f <unavailable> + 7279

    6    libc.so.6                          0x00002b729a411460 __libc_start_main +
    245

    7    tmpzfe0fm1a                        0x00005637db168679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        switch $0 {\n        case let x where x.isKindOfClass(Int.self):\n\
    \            return true\n        default:\n            return false\n       \
    \ }\n    }.map {\n        Int(($0 as? Int)?.0 ?? 0)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpx34bbr6k.swift:10:28: error: value of type 'AnyHashable' has no\
    \ member 'isKindOfClass'\n        case let x where x.isKindOfClass(Int.self):\n\
    \                         ~ ^~~~~~~~~~~~~\n/tmp/tmpx34bbr6k.swift:16:27: error:\
    \ value of type 'Int' has no member '0'\n        Int(($0 as? Int)?.0 ?? 0)\n \
    \           ~~~~~~~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ integerValues: [Int] = []\n    for value in values {\n        if let intValue\
    \ = value as? Int {\n            integerValues.append(intValue)\n        }\n \
    \   }\n    return integerValues\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ out = values\n        .flatMap({ $0 as? Int })\n        .filter({ $0 != nil\
    \ })\n        .map { $0 as! Int }\n        .filter { $0 != 0 }\n        .map {\
    \ $0 as Int }\n    return out\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    if\
    \ let x = values.first as? Int {\n        return filter_integers(values: [x] +\
    \ values.dropFirst())\n    }\n    return values\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpj_fr9zp7.swift:11:12: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values\n           ^\n\
    /tmp/tmpj_fr9zp7.swift:11:12: note: arguments to generic parameter 'Element' ('AnyHashable'\
    \ and 'Int') are expected to be equal\n    return values\n           ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ filtered = values.filter { $0 is Int }\n    return filtered as! [Int]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: -4
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = Array(repeating: 0, count: values.count)\n    for i in 0..<values.count\
    \ {\n        let value = values[i]\n        switch value {\n        case let intValue\
    \ as Int:\n            filtered[i] = intValue\n        case let intArray as [Int]:\n\
    \            for j in 0..<intArray.count {\n                filtered[i] += intArray[j]\n\
    \            }\n        default:\n            break\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: Exception
  stderr: 'tmpjed_ni7g/tmpjed_ni7g.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc50556c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc5024db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc5024d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc5024c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjed_ni7g                        0x0000555a1b767e3b <unavailable> + 7739

    5    libc.so.6                          0x00002abc50742460 __libc_start_main +
    245

    6    tmpjed_ni7g                        0x0000555a1b767749 <unavailable> + 5961

    '
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for i in values {\n        if let int: Int = i as? Int\
    \ {\n            result.append(int)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = values.filter() { $0 is Int }\n    return result.map() { $0 as! Int\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_integers(values: [] as\
    \ [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable\
    \ : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ output = [Int]()\n    values.forEach { value in\n        let intValue = value\
    \ as! Int\n        if intValue != nil {\n            if intValue > Int.max ||\
    \ intValue < Int.min {\n                throw ValidationError(.integerNotInRange,\
    \ key: \"value\")\n            }\n            output.append(intValue)\n      \
    \  }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprrqjs3fh.swift:13:23: error: cannot find 'ValidationError' in scope\n\
    \                throw ValidationError(.integerNotInRange, key: \"value\")\n \
    \                     ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ values = values.filter { $0 is Int }\n    return values.map({ $0 as! Int })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let value as Int:\n            result.append(value)\n        case let\
    \ value as String:\n            guard let intValue = Int(value) else {\n     \
    \           continue\n            }\n            result.append(intValue)\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    guard\
    \ let first = values.first else {\n        return []\n    }\n\n    var numbers\
    \ = [Int]()\n    var value = first\n\n    // The first value must be an integer.\n\
    \    guard let intValue = Int(value) else {\n        return numbers\n    }\n\n\
    \    // The value must be an integer.\n    if intValue > 0 {\n        numbers.append(intValue)\n\
    \    }\n\n    guard let next = values.first else {\n        return numbers\n \
    \   }\n\n    let value = next\n\n    switch value {\n    case is Int:\n      \
    \  numbers.append(value as! Int)\n    case is Int8:\n        numbers.append(value\
    \ as! Int8)\n    case is Int16:\n        numbers.append(value as! Int16)\n   \
    \ case is Int32:\n        numbers.append(value as! Int32)\n    case is Int64:\n\
    \        numbers.append(value as! Int64)\n    case is IntPtr:\n        numbers.append(value\
    \ as! IntPtr)\n    case is UInt:\n        numbers.append(value as! UInt)\n   \
    \ case is UInt8:\n        numbers.append(value as! UInt8)\n    case is UInt16:\n\
    \        numbers.append(value as! UInt16)\n    case is UInt32:\n        numbers.append(value\
    \ as! UInt32)\n    case is UInt64:\n        numbers.append(value as! UInt64)\n\
    \    case is UIntPtr:\n        numbers.append(value as! UIntPtr)\n    case is\
    \ Float:\n        numbers.append(value as! Float)\n    case is Double:\n     \
    \   numbers.append(value as! Double)\n    case is Bool:\n        numbers.append(value\
    \ as! Bool)\n    case is String:\n        numbers.append(value as! String)\n \
    \   case is NSNull:\n        numbers.append(NSNull())\n    case is NSObject:\n\
    \        numbers.append(NSObject())\n    case is NSDictionary:\n        numbers.append(NSDictionary())\n\
    \    case is [AnyHashable]:\n        numbers.append(filter_integers(values: [value\
    \ as! [AnyHashable]]))\n    case is [Any]:\n        numbers.append(filter_integers(values:\
    \ [value as! [Any]]))\n    default:\n        // Nothing\n    }\n\n    return numbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpgsmv5trn.swift:74:5: error: 'default' label in a 'switch' must\
    \ have at least one executable statement\n    default:\n    ^~~~~~~~\n       \
    \      break\n/tmp/tmpgsmv5trn.swift:16:30: error: cannot convert value of type\
    \ 'AnyHashable' to expected argument type 'String'\n    guard let intValue = Int(value)\
    \ else {\n                             ^\n                                   as!\
    \ String\n/tmp/tmpgsmv5trn.swift:29:9: error: invalid redeclaration of 'value'\n\
    \    let value = next\n        ^\n/tmp/tmpgsmv5trn.swift:13:9: note: 'value' previously\
    \ declared here\n    var value = first\n        ^\n/tmp/tmpgsmv5trn.swift:35:30:\
    \ error: cannot convert value of type 'Int8' to expected argument type 'Int'\n\
    \        numbers.append(value as! Int8)\n                             ^\n    \
    \                   Int(          )\n/tmp/tmpgsmv5trn.swift:37:30: error: cannot\
    \ convert value of type 'Int16' to expected argument type 'Int'\n        numbers.append(value\
    \ as! Int16)\n                             ^\n                       Int(    \
    \       )\n/tmp/tmpgsmv5trn.swift:39:30: error: cannot convert value of type 'Int32'\
    \ to expected argument type 'Int'\n        numbers.append(value as! Int32)\n \
    \                            ^\n                       Int(           )\n/tmp/tmpgsmv5trn.swift:41:30:\
    \ error: cannot convert value of type 'Int64' to expected argument type 'Int'\n\
    \        numbers.append(value as! Int64)\n                             ^\n   \
    \                    Int(           )\n/tmp/tmpgsmv5trn.swift:43:34: error: cannot\
    \ find type 'IntPtr' in scope\n        numbers.append(value as! IntPtr)\n    \
    \                             ^~~~~~\n/tmp/tmpgsmv5trn.swift:45:30: error: cannot\
    \ convert value of type 'UInt' to expected argument type 'Int'\n        numbers.append(value\
    \ as! UInt)\n                             ^\n                       Int(     \
    \     )\n/tmp/tmpgsmv5trn.swift:47:30: error: cannot convert value of type 'UInt8'\
    \ to expected argument type 'Int'\n        numbers.append(value as! UInt8)\n \
    \                            ^\n                       Int(           )\n/tmp/tmpg"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        switch value {\n    \
    \    case let intValue as Int:\n            result.append(intValue)\n        default:\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_joomm5h.swift:13:9: error: 'default' label in a 'switch' must\
    \ have at least one executable statement\n        default:\n        ^~~~~~~~\n\
    \                 break\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ integers: [Int] = []\n    for value in values {\n        guard let intValue\
    \ = Int(value) else {\n            continue\n        }\n        integers.append(intValue)\n\
    \    }\n    return integers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpj6f_thg5.swift:10:34: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        guard let intValue = Int(value)\
    \ else {\n                                 ^\n                               \
    \        as! String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for (idx, value) in values.enumerate() {\n        guard\
    \ let value = value as? Int else { continue }\n        filtered.append(value)\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8ydws30d.swift:9:32: error: value of type '[AnyHashable]' has no\
    \ member 'enumerate'\n    for (idx, value) in values.enumerate() {\n         \
    \               ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n  return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        guard let v = value as?\
    \ Int else {\n            throw JSONError.typeMismatch(\n                type:\
    \ type(of: value),\n                required: \"Int\")\n        }\n        result.append(v)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpis8hltgb.swift:11:19: error: cannot find 'JSONError' in scope\n\
    \            throw JSONError.typeMismatch(\n                  ^~~~~~~~~\n/tmp/tmpis8hltgb.swift:11:13:\
    \ error: error is not handled because the enclosing function is not declared 'throws'\n\
    \            throw JSONError.typeMismatch(\n            ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ Int($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpl0_jmqvl.swift:8:36: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    return values.compactMap({ Int($0) })\n\
    \                                   ^\n                                      as!\
    \ String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = Set<Int>()\n    for v in values {\n        if v is Int {\n        \
    \    result.insert(v as Int)\n        }\n    }\n    return result.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0xhe111r.swift:11:29: error: 'AnyHashable' is not convertible to\
    \ 'Int'\n            result.insert(v as Int)\n                            ^\n\
    /tmp/tmp0xhe111r.swift:11:29: note: did you mean to use 'as!' to force downcast?\n\
    \            result.insert(v as Int)\n                          ~~^~~~~~\n   \
    \                         as!\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpfzfnn3hv.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter { $0 is\
    \ Int }\n                  ^\n/tmp/tmpfzfnn3hv.swift:8:19: note: arguments to\
    \ generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n\
    \    return values.filter { $0 is Int }\n                  ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ output = [Int]()\n    for i in values {\n        if let j = i as? Int {\n  \
    \          output.append(j)\n        }\n    }\n    return output\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = values as [Int]\n    for value in values {\n        switch value {\n\
    \        case let int as Int:\n            result.append(int)\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjrstlbef.swift:8:25: error: cannot convert value of type '[AnyHashable]'\
    \ to type '[Int]' in coercion\n    var result = values as [Int]\n            \
    \            ^\n/tmp/tmpjrstlbef.swift:8:25: note: arguments to generic parameter\
    \ 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    var result\
    \ = values as [Int]\n                        ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ integers = [Int]()\n    for (index, value) in values.enumerate() {\n       \
    \ guard let value = value as? Int else {\n            break\n        }\n     \
    \   integers.append(value)\n        if index == values.count - 1 {\n         \
    \   break\n        }\n    }\n    return integers\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpc27tqd9g.swift:9:34: error: value of type '[AnyHashable]' has no\
    \ member 'enumerate'\n    for (index, value) in values.enumerate() {\n       \
    \                   ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for v in values {\n        let vt = type(of: v)\n  \
    \      switch vt {\n        case .Integer:\n            filtered.append(v)\n \
    \       }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpl0ynycoo.swift:12:15: error: type 'AnyHashable.Type' has no member\
    \ 'Integer'\n        case .Integer:\n             ~^~~~~~~\n/tmp/tmpl0ynycoo.swift:13:29:\
    \ error: cannot convert value of type 'AnyHashable' to expected argument type\
    \ 'Int'\n            filtered.append(v)\n                            ^\n     \
    \                         as! Int\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = Array(repeating: 0, count: values.count)\n    for value in values\
    \ {\n        if let value = value as? Int {\n            filtered[values.index(value)]\
    \ = value\n        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp17g46ipa.swift:11:29: error: no exact matches in call to instance\
    \ method 'index'\n            filtered[values.index(value)] = value\n        \
    \                    ^\nSwift.Array:7:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(after:)')\n    @inlinable public func index(after\
    \ i: Int) -> Int\n                           ^\nSwift.Array:9:28: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public\
    \ func index(before i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter(values, { $0.dynamicType == Int.self })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2qj07f2t.swift:8:12: error: cannot find 'filter' in scope\n   \
    \ return filter(values, { $0.dynamicType == Int.self })\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: -4
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ output: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            output.append(value)\n        } else {\n            break\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: Exception
  stderr: 'tmpn9rpuqpv/tmpn9rpuqpv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b419ee1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b419eb14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b419eb14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b419eb137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn9rpuqpv                        0x000055746454ad1b <unavailable> + 7451

    5    libc.so.6                          0x00002b419f009460 __libc_start_main +
    245

    6    tmpn9rpuqpv                        0x000055746454a629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    func\
    \ isInt(value: AnyHashable) -> Bool {\n        guard let intValue = value as?\
    \ Int else {\n            return false\n        }\n        return true\n    }\n\
    \    return values.filter({ isInt($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprm9tm9by.swift:14:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter({ isInt($0)\
    \ })\n                  ^\n/tmp/tmprm9tm9by.swift:14:19: note: arguments to generic\
    \ parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n   \
    \ return values.filter({ isInt($0) })\n                  ^\n/tmp/tmprm9tm9by.swift:14:34:\
    \ error: missing argument label 'value:' in call\n    return values.filter({ isInt($0)\
    \ })\n                                 ^\n                                 value:\
    \ \n"
  stdout: ''
  timestamp: 1660009134
- exit_code: -4
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: Array<Int> = Array()\n    for value in values {\n        guard let\
    \ int = value as? Int else { continue }\n        filtered = [int]\n        break\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: Exception
  stderr: 'tmp3jzgnk9b/tmp3jzgnk9b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8051172c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8050e69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8050e69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8050e687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jzgnk9b                        0x0000555f7664fd1b <unavailable> + 7451

    5    libc.so.6                          0x00002b805135e460 __libc_start_main +
    245

    6    tmp3jzgnk9b                        0x0000555f7664f629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: -4
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    values.forEach {\n        switch $0 {\n        case let\
    \ value as Int:\n            result.append(value)\n        default:\n        \
    \    fatalError(\"value is not an integer\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: Exception
  stderr: 'tmpr9aafq3l/tmpr9aafq3l.swift:14: Fatal error: value is not an integer

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b462e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b45fd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b45fd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b45fd67b0 _assertionFailure(_:_:file:line:flags:)
    + 365

    4    tmpr9aafq3l                        0x00005611471230cf <unavailable> + 8399

    5    tmpr9aafq3l                        0x00005611471236e0 <unavailable> + 9952

    6    libswiftCore.so                    0x00002b8b4603b800 Sequence.forEach(_:)
    + 420

    7    tmpr9aafq3l                        0x0000561147122f72 <unavailable> + 8050

    8    tmpr9aafq3l                        0x0000561147122b0f <unavailable> + 6927

    9    libc.so.6                          0x00002b8b464cc460 __libc_start_main +
    245

    10   tmpr9aafq3l                        0x0000561147122519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter{$0 is Int}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp4supi4_7.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter{$0 is\
    \ Int}\n                  ^\n/tmp/tmp4supi4_7.swift:8:19: note: arguments to generic\
    \ parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n   \
    \ return values.filter{$0 is Int}\n                  ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap { $0.toInt() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp69n922y7.swift:8:32: error: value of type 'AnyHashable' has no\
    \ member 'toInt'\n    return values.flatMap { $0.toInt() }\n                 \
    \           ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i in values {\n        if let i = i as? Int {\n  \
    \          result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n  var result:\
    \ [Int] = []\n  for value in values {\n    if let int = Int(value) {\n      result.append(int)\n\
    \    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvgovdgez.swift:10:22: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    if let int = Int(value) {\n        \
    \             ^\n                           as! String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for item in values {\n        if let value = item\
    \ as? Int {\n            filtered.append(value)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    var seen = [AnyHashable]()\n    \n    for value in values\
    \ {\n        switch value {\n        case let value as Int:\n            result.append(value)\n\
    \        case let value as [AnyHashable : AnyHashable]:\n            var filtered\
    \ = [AnyHashable]()\n            for element in value {\n                if let\
    \ _ = Int(element) where seen.contains(element) {\n                    continue\n\
    \                }\n                \n                seen.insert(element)\n \
    \               filtered.append(element)\n            }\n            \n      \
    \      result.append(contentsOf: filtered)\n        case let value as AnyHashable:\n\
    \            seen.insert(value)\n            result.append(value)\n        }\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2uagkqkd.swift:18:41: error: expected ',' joining parts of a multi-clause\
    \ condition\n                if let _ = Int(element) where seen.contains(element)\
    \ {\n                                       ~^~~~~\n                         \
    \              ,\n/tmp/tmp2uagkqkd.swift:27:24: warning: 'as' test is always true\n\
    \        case let value as AnyHashable:\n                       ^\n/tmp/tmp2uagkqkd.swift:18:28:\
    \ error: type '(key: AnyHashable, value: AnyHashable)' cannot conform to 'StringProtocol'\n\
    \                if let _ = Int(element) where seen.contains(element) {\n    \
    \                       ^\n/tmp/tmp2uagkqkd.swift:18:28: note: only concrete types\
    \ such as structs, enums and classes can conform to protocols\n              \
    \  if let _ = Int(element) where seen.contains(element) {\n                  \
    \         ^\n/tmp/tmp2uagkqkd.swift:18:28: note: required by initializer 'init(_:radix:)'\
    \ where 'S' = '(key: AnyHashable, value: AnyHashable)'\n                if let\
    \ _ = Int(element) where seen.contains(element) {\n                          \
    \ ^\n/tmp/tmp2uagkqkd.swift:18:47: error: type '(key: AnyHashable, value: AnyHashable)'\
    \ cannot conform to 'Collection'\n                if let _ = Int(element) where\
    \ seen.contains(element) {\n                                              ^\n\
    /tmp/tmp2uagkqkd.swift:18:47: note: only concrete types such as structs, enums\
    \ and classes can conform to protocols\n                if let _ = Int(element)\
    \ where seen.contains(element) {\n                                           \
    \   ^\n/tmp/tmp2uagkqkd.swift:18:47: note: required by instance method 'contains'\
    \ where 'C' = '(key: AnyHashable, value: AnyHashable)'\n                if let\
    \ _ = Int(element) where seen.contains(element) {\n                          \
    \                    ^\n/tmp/tmp2uagkqkd.swift:18:47: error: instance method 'contains'\
    \ requires the types 'AnyHashable' and '(key: AnyHashable, value: AnyHashable).Element'\
    \ be equivalent\n                if let _ = Int(element) where seen.contains(element)\
    \ {\n                                              ^\n_StringP"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if value is Int {\n   \
    \         result.append(value as Int)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp461f2ola.swift:11:33: error: 'AnyHashable' is not convertible to\
    \ 'Int'\n            result.append(value as Int)\n                           \
    \     ^\n/tmp/tmp461f2ola.swift:11:33: note: did you mean to use 'as!' to force\
    \ downcast?\n            result.append(value as Int)\n                       \
    \   ~~~~~~^~~~~~\n                                as!\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter(values, filterType: .isInteger)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmph7vcp64c.swift:8:12: error: cannot find 'filter' in scope\n   \
    \ return filter(values, filterType: .isInteger)\n           ^~~~~~\n/tmp/tmph7vcp64c.swift:8:40:\
    \ error: cannot infer contextual base in reference to member 'isInteger'\n   \
    \ return filter(values, filterType: .isInteger)\n                            \
    \          ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { (v: AnyHashable) -> Bool in\n        let intValue = Int(v)\n\
    \        return intValue != nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxycyy0ll.swift:9:24: error: no exact matches in call to initializer\
    \ \n        let intValue = Int(v)\n                       ^\n/tmp/tmpxycyy0ll.swift:9:24:\
    \ note: found candidate with type '(Float16) -> Int'\n        let intValue = Int(v)\n\
    \                       ^\n/tmp/tmpxycyy0ll.swift:9:24: note: found candidate\
    \ with type '(Float) -> Int'\n        let intValue = Int(v)\n                \
    \       ^\n/tmp/tmpxycyy0ll.swift:9:24: note: found candidate with type '(Double)\
    \ -> Int'\n        let intValue = Int(v)\n                       ^\n/tmp/tmpxycyy0ll.swift:9:24:\
    \ note: found candidate with type '(Float80) -> Int'\n        let intValue = Int(v)\n\
    \                       ^\n/tmp/tmpxycyy0ll.swift:9:24: note: found candidate\
    \ with type '(Builtin.Int64) -> Int'\n        let intValue = Int(v)\n        \
    \               ^\n/tmp/tmpxycyy0ll.swift:9:24: note: found candidate with type\
    \ '(Builtin.Word) -> Int'\n        let intValue = Int(v)\n                   \
    \    ^\n/tmp/tmpxycyy0ll.swift:9:24: note: found candidate with type '(String)\
    \ -> Int?'\n        let intValue = Int(v)\n                       ^\n/tmp/tmpxycyy0ll.swift:8:19:\
    \ error: cannot convert return expression of type '[AnyHashable]' to return type\
    \ '[Int]'\n    return values.filter { (v: AnyHashable) -> Bool in\n          \
    \        ^\n/tmp/tmpxycyy0ll.swift:8:19: note: arguments to generic parameter\
    \ 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter\
    \ { (v: AnyHashable) -> Bool in\n                  ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter(values, isInteger)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmppk1lzvia.swift:8:12: error: cannot find 'filter' in scope\n   \
    \ return filter(values, isInteger)\n           ^~~~~~\n/tmp/tmppk1lzvia.swift:8:27:\
    \ error: cannot find 'isInteger' in scope\n    return filter(values, isInteger)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: -6
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        let intValue = value as!\
    \ Int\n        if intValue != nil {\n            result.append(intValue as! Int)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: Exception
  stderr: 'Could not cast value of type ''Swift.AnyHashable'' (0x2abe46492ac8) to
    ''Swift.Int'' (0x2abe46495fc0).

    '
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpfzfnn3hv.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter { $0 is\
    \ Int }\n                  ^\n/tmp/tmpfzfnn3hv.swift:8:19: note: arguments to\
    \ generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n\
    \    return values.filter { $0 is Int }\n                  ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: -4
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = Set<Int>()\n    for value in values {\n        if let integer = value\
    \ as? Int {\n            filtered.insert(integer)\n        }\n    }\n    return\
    \ Array(filtered)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: Exception
  stderr: 'tmp6682stn6/tmp6682stn6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdc7cb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdc79aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdc79aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdc79a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6682stn6                        0x0000564aacbe4e3b <unavailable> + 7739

    5    libc.so.6                          0x00002acdc7e9f460 __libc_start_main +
    245

    6    tmp6682stn6                        0x0000564aacbe4749 <unavailable> + 5961

    '
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        guard let integerValue\
    \ = value as? Int else {\n            throw InvalidURLError(string: \"expected\
    \ integer\", value: value)\n        }\n        result.append(integerValue)\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvtvieio1.swift:11:19: error: cannot find 'InvalidURLError' in scope\n\
    \            throw InvalidURLError(string: \"expected integer\", value: value)\n\
    \                  ^~~~~~~~~~~~~~~\n/tmp/tmpvtvieio1.swift:11:13: error: error\
    \ is not handled because the enclosing function is not declared 'throws'\n   \
    \         throw InvalidURLError(string: \"expected integer\", value: value)\n\
    \            ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for element in values {\n        if let intValue = element\
    \ as? Int {\n            result.append(intValue)\n        } else {\n         \
    \   result.append(\"\\(value)\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk_nkvts5.swift:13:30: error: cannot find 'value' in scope\n   \
    \         result.append(\"\\(value)\")\n                             ^~~~~\n/tmp/tmpk_nkvts5.swift:13:20:\
    \ error: no exact matches in call to instance method 'append'\n            result.append(\"\
    \\(value)\")\n                   ^\nSwift.Array:6:37: note: candidate expects\
    \ value of type 'Int' for parameter #1 (got 'String')\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Element)\n                               \
    \     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects value\
    \ of type 'Int' for parameter #1 (got 'String')\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Self.Element)\n                          \
    \          ^\n/tmp/tmpk_nkvts5.swift:13:20: note: found candidate with type '(__owned\
    \ String) -> ()'\n            result.append(\"\\(value)\")\n                 \
    \  ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0.toInt() != nil }.map { $0.toInt() }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbqn38hen.swift:8:31: error: value of type 'AnyHashable' has no\
    \ member 'toInt'\n    return values.filter { $0.toInt() != nil }.map { $0.toInt()\
    \ }\n                           ~~ ^~~~~\n/tmp/tmpbqn38hen.swift:8:57: error:\
    \ value of type 'AnyHashable' has no member 'toInt'\n    return values.filter\
    \ { $0.toInt() != nil }.map { $0.toInt() }\n                                 \
    \                    ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for v in values {\n        switch v {\n        case\
    \ let x where x is Int:\n            result.append(v)\n        case let x where\
    \ x is Double where x.isInteger:\n            result.append(v)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpea0m7wca.swift:13:38: error: expected ':' after 'case'\n      \
    \  case let x where x is Double where x.isInteger:\n                         \
    \            ^\n/tmp/tmpea0m7wca.swift:13:38: error: expected expression\n   \
    \     case let x where x is Double where x.isInteger:\n                      \
    \               ^\n/tmp/tmpea0m7wca.swift:12:27: error: cannot convert value of\
    \ type 'AnyHashable' to expected argument type 'Int'\n            result.append(v)\n\
    \                          ^\n                            as! Int\n/tmp/tmpea0m7wca.swift:10:9:\
    \ error: switch must be exhaustive\n        switch v {\n        ^\n/tmp/tmpea0m7wca.swift:10:9:\
    \ note: do you want to add a default clause?\n        switch v {\n        ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    if\
    \ values == nil {\n        return nil\n    }\n\n    var result: [Int] = []\n \
    \   for i in 0..<values.count {\n        let value = values[i]\n        if isInt(value)\
    \ {\n            result.append(i)\n        }\n    }\n\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjbw66t5y.swift:8:15: warning: comparing non-optional value of type\
    \ '[AnyHashable]' to 'nil' always returns false\n    if values == nil {\n    \
    \   ~~~~~~ ^  ~~~\n/tmp/tmpjbw66t5y.swift:9:16: error: 'nil' is incompatible with\
    \ return type '[Int]'\n        return nil\n               ^\n/tmp/tmpjbw66t5y.swift:15:12:\
    \ error: cannot find 'isInt' in scope\n        if isInt(value) {\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let value as Int:\n            result.append(value)\n        case let\
    \ value as Float:\n            if Int64(abs(value)) != value {\n             \
    \   result.append(value)\n            }\n        case let value as String:\n \
    \           if let integer = Int64(abs(value)) {\n                result.append(integer)\n\
    \            }\n        default:\n            break\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpuaiy1be8.swift:14:37: error: cannot convert value of type 'Float'\
    \ to expected argument type 'Int64'\n            if Int64(abs(value)) != value\
    \ {\n                                    ^\n                                 \
    \   Int64( )\n/tmp/tmpuaiy1be8.swift:15:31: error: cannot convert value of type\
    \ 'Float' to expected argument type 'Int'\n                result.append(value)\n\
    \                              ^\n                              Int( )\n/tmp/tmpuaiy1be8.swift:18:30:\
    \ error: type of expression is ambiguous without more context\n            if\
    \ let integer = Int64(abs(value)) {\n                             ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filteredValues = [Int]()\n    for value in values {\n        if let integer\
    \ = value as? Int {\n            filteredValues.append(integer)\n        }\n \
    \   }\n    return filteredValues\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    values\
    \ = values.filter { $0 is Int }\n    return values.map { $0 as! Int }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpac_godkt.swift:8:5: error: cannot assign to value: 'values' is\
    \ a 'let' constant\n    values = values.filter { $0 is Int }\n    ^~~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ $0.hashValue % 1 == 0 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpp2n5lvnr.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter({ $0.hashValue\
    \ % 1 == 0 })\n                  ^\n/tmp/tmpp2n5lvnr.swift:8:19: note: arguments\
    \ to generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be\
    \ equal\n    return values.filter({ $0.hashValue % 1 == 0 })\n               \
    \   ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ $0.isNumeric }).map { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpp4e8t7fz.swift:8:31: error: value of type 'AnyHashable' has no\
    \ member 'isNumeric'\n    return values.filter({ $0.isNumeric }).map { $0 as?\
    \ Int }\n                           ~~ ^~~~~~~~~\n/tmp/tmpp4e8t7fz.swift:8:53:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    return values.filter({ $0.isNumeric }).map { $0 as? Int }\n             \
    \                                       ^\n/tmp/tmpp4e8t7fz.swift:8:53: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \    return values.filter({ $0.isNumeric }).map { $0 as? Int }\n             \
    \                                       ^\n                                  \
    \                          ?? <#default value#>\n/tmp/tmpp4e8t7fz.swift:8:53:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return values.filter({ $0.isNumeric }).map { $0 as? Int }\n     \
    \                                               ^\n                          \
    \                       (         )!\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if value is Int {\n \
    \           result.append(value as! Int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    if\
    \ values.count < 1 {\n        return []\n    }\n    var result = [Int]()\n   \
    \ if values.count == 1 as Int {\n        result.append(values.first!)\n    }\n\
    \    else {\n        for value in values {\n            if let value = value as?\
    \ Int {\n                result.append(value)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprl3p2m55.swift:13:35: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'Int'\n        result.append(values.first!)\n    \
    \                              ^\n                                    as! Int\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        if let value = $0 as? Int {\n            return true\n\
    \        } else {\n            return false\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp11xy4lx6.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter {\n  \
    \                ^\n/tmp/tmp11xy4lx6.swift:8:19: note: arguments to generic parameter\
    \ 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter\
    \ {\n                  ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: -4
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        let val = value as? Int\
    \ ?? 0\n        filtered = filtered + [val]\n    }\n    return filtered\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: Exception
  stderr: 'tmp8qcz1eyw/tmp8qcz1eyw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee69c02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee698f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee698f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee698f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8qcz1eyw                        0x0000558c9d3d9d6b <unavailable> + 7531

    5    libc.so.6                          0x00002aee69dee460 __libc_start_main +
    245

    6    tmp8qcz1eyw                        0x0000558c9d3d9679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    values.compactMap(filter_integer)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmppf0ucw87.swift:8:23: error: cannot find 'filter_integer' in scope\n\
    \    values.compactMap(filter_integer)\n                      ^~~~~~~~~~~~~~\n\
    /tmp/tmppf0ucw87.swift:8:23: error: converting non-escaping value to '(AnyHashable)\
    \ throws -> Int?' may allow it to escape\n    values.compactMap(filter_integer)\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0.asInt().map({ return $0 }) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6vco8rg5.swift:8:35: error: value of type 'AnyHashable' has no\
    \ member 'asInt'\n    return values.compactMap({ $0.asInt().map({ return $0 })\
    \ })\n                               ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ values = values.flatMap { Int($0) }\n    return values.filter{ $0 as? Int !=\
    \ nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpa8nh8faq.swift:8:39: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    let values = values.flatMap { Int($0)\
    \ }\n                                      ^\n                               \
    \          as! String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = Array()\n    for value in values {\n        guard let value = value\
    \ as? Int else {\n            return result\n        }\n        \n        result.append(value)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpu_vruj7d.swift:8:18: error: generic parameter 'Element' could not\
    \ be inferred\n    var result = Array()\n                 ^\n/tmp/tmpu_vruj7d.swift:8:18:\
    \ note: explicitly specify the generic arguments to fix this issue\n    var result\
    \ = Array()\n                 ^\n                      <Any>\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    values.forEach { v in\n        guard let vint = Int(v)\
    \ else { return }\n        filtered.append(vint)\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpms4a9llx.swift:10:30: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        guard let vint = Int(v) else { return\
    \ }\n                             ^\n                               as! String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        let int = $0 as? Int ?? 0\n        return int != 0\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxqrrfjaw.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter {\n  \
    \                ^\n/tmp/tmpxqrrfjaw.swift:8:19: note: arguments to generic parameter\
    \ 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter\
    \ {\n                  ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ integers = [Int]()\n    for i in values {\n        if let ii = i as? Int {\n\
    \            integers.append(ii)\n        }\n    }\n    return integers\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ integers: [Int] = []\n    for value in values {\n        guard let integerValue\
    \ = value as? Int else {\n            continue\n        }\n        integers.append(integerValue)\n\
    \    }\n    return integers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for value in values {\n        if value is Int {\n\
    \            filtered.append(value as Int)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnokj4s19.swift:11:35: error: 'AnyHashable' is not convertible to\
    \ 'Int'\n            filtered.append(value as Int)\n                         \
    \         ^\n/tmp/tmpnokj4s19.swift:11:35: note: did you mean to use 'as!' to\
    \ force downcast?\n            filtered.append(value as Int)\n               \
    \             ~~~~~~^~~~~~\n                                  as!\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0.isInt }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpcwo1776b.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter { $0.isInt\
    \ }\n                  ^\n/tmp/tmpcwo1776b.swift:8:19: note: arguments to generic\
    \ parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n   \
    \ return values.filter { $0.isInt }\n                  ^\n/tmp/tmpcwo1776b.swift:8:31:\
    \ error: value of type 'AnyHashable' has no member 'isInt'\n    return values.filter\
    \ { $0.isInt }\n                           ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap { $0.toInt() ?? 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpcgi73kmp.swift:8:32: error: value of type 'AnyHashable' has no\
    \ member 'toInt'\n    return values.flatMap { $0.toInt() ?? 0 }\n            \
    \                ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap { Int($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpa9ujnv7l.swift:8:33: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    return values.flatMap { Int($0) }\n\
    \                                ^\n                                   as! String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filteredValues = [Int]()\n    for value in values {\n        guard let int =\
    \ value as? Int else { continue }\n        filteredValues.append(int)\n    }\n\
    \    return filteredValues\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap { Int($0) }.filter() {\n        guard $0 % 1 == 0 else {\n  \
    \          return false\n        }\n        return true\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3yffgker.swift:8:33: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    return values.flatMap { Int($0) }.filter()\
    \ {\n                                ^\n                                   as!\
    \ String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n  var filtered:\
    \ [Int] = []\n  for value in values {\n    if let int = value as? Int {\n    \
    \  filtered.append(int)\n    }\n  }\n  return filtered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ filteredArray = values.filter {\n        if let intValue = Int($0) { return\
    \ true }\n        return false\n    }\n    return filteredArray.map { $0 as Int\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_integers(values: [] as\
    \ [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable\
    \ : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9y7s6fc3.swift:9:31: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let intValue = Int($0) { return\
    \ true }\n                              ^\n                                 as!\
    \ String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 as? Int != nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjzyfmjs5.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter { $0 as?\
    \ Int != nil }\n                  ^\n/tmp/tmpjzyfmjs5.swift:8:19: note: arguments\
    \ to generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be\
    \ equal\n    return values.filter { $0 as? Int != nil }\n                  ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    if\
    \ let valueIter = values {\n        return values.filter { Int($0) }\n    }\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpav7fw_3p.swift:9:32: error: no exact matches in call to initializer\
    \ \n        return values.filter { Int($0) }\n                               ^\n\
    /tmp/tmpav7fw_3p.swift:9:32: note: found candidate with type '(Float16) -> Int'\n\
    \        return values.filter { Int($0) }\n                               ^\n\
    /tmp/tmpav7fw_3p.swift:9:32: note: found candidate with type '(Float) -> Int'\n\
    \        return values.filter { Int($0) }\n                               ^\n\
    /tmp/tmpav7fw_3p.swift:9:32: note: found candidate with type '(Double) -> Int'\n\
    \        return values.filter { Int($0) }\n                               ^\n\
    /tmp/tmpav7fw_3p.swift:9:32: note: found candidate with type '(Float80) -> Int'\n\
    \        return values.filter { Int($0) }\n                               ^\n\
    /tmp/tmpav7fw_3p.swift:9:32: note: found candidate with type '(Builtin.Int64)\
    \ -> Int'\n        return values.filter { Int($0) }\n                        \
    \       ^\n/tmp/tmpav7fw_3p.swift:9:32: note: found candidate with type '(Builtin.Word)\
    \ -> Int'\n        return values.filter { Int($0) }\n                        \
    \       ^\n/tmp/tmpav7fw_3p.swift:9:32: note: found candidate with type '(String)\
    \ -> Int?'\n        return values.filter { Int($0) }\n                       \
    \        ^\n/tmp/tmpav7fw_3p.swift:9:23: error: cannot convert return expression\
    \ of type '[AnyHashable]' to return type '[Int]'\n        return values.filter\
    \ { Int($0) }\n                      ^\n/tmp/tmpav7fw_3p.swift:9:23: note: arguments\
    \ to generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be\
    \ equal\n        return values.filter { Int($0) }\n                      ^\n/tmp/tmpav7fw_3p.swift:8:8:\
    \ error: initializer for conditional binding must have Optional type, not '[AnyHashable]'\n\
    \    if let valueIter = values {\n       ^               ~~~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    if\
    \ values.isEmpty {\n        return values\n    }\n    let result: [Int] = []\n\
    \    for value in values {\n        guard value is Int else { continue }\n   \
    \     result.append(value as Int)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpblof4zwo.swift:9:16: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n        return values\n       \
    \        ^\n/tmp/tmpblof4zwo.swift:9:16: note: arguments to generic parameter\
    \ 'Element' ('AnyHashable' and 'Int') are expected to be equal\n        return\
    \ values\n               ^\n/tmp/tmpblof4zwo.swift:14:16: error: cannot use mutating\
    \ member on immutable value: 'result' is a 'let' constant\n        result.append(value\
    \ as Int)\n        ~~~~~~ ^\n/tmp/tmpblof4zwo.swift:11:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let result: [Int] = []\n    ^~~\n    var\n/tmp/tmpblof4zwo.swift:14:29:\
    \ error: 'AnyHashable' is not convertible to 'Int'\n        result.append(value\
    \ as Int)\n                            ^\n/tmp/tmpblof4zwo.swift:14:29: note:\
    \ did you mean to use 'as!' to force downcast?\n        result.append(value as\
    \ Int)\n                      ~~~~~~^~~~~~\n                            as!\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter{ $0.isKind(of: NSNumber.self) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbrj3123b.swift:8:41: error: cannot find 'NSNumber' in scope\n \
    \   return values.filter{ $0.isKind(of: NSNumber.self) }\n                   \
    \                     ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ Int($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpl0_jmqvl.swift:8:36: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    return values.compactMap({ Int($0) })\n\
    \                                   ^\n                                      as!\
    \ String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        $0.toInt() != nil\n    }.map {\n        $0.toInt()!\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpipfmpy4t.swift:9:12: error: value of type 'AnyHashable' has no\
    \ member 'toInt'\n        $0.toInt() != nil\n        ~~ ^~~~~\n/tmp/tmpipfmpy4t.swift:11:12:\
    \ error: value of type 'AnyHashable' has no member 'toInt'\n        $0.toInt()!\n\
    \        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpfzfnn3hv.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter { $0 is\
    \ Int }\n                  ^\n/tmp/tmpfzfnn3hv.swift:8:19: note: arguments to\
    \ generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n\
    \    return values.filter { $0 is Int }\n                  ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        let num = value as! Int\n\
    \        if num != nil {\n            filtered.append(num!)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqb6mg5rs.swift:11:16: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns true\n        if num != nil {\n         \
    \  ~~~ ^  ~~~\n/tmp/tmpqb6mg5rs.swift:12:32: error: cannot force unwrap value\
    \ of non-optional type 'Int'\n            filtered.append(num!)\n            \
    \                ~~~^\n                               \n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ filtered = values.filter { $0.isInteger() }\n    return filtered.map { $0 as\
    \ Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd3hhpax6.swift:8:39: error: value of type 'AnyHashable' has no\
    \ member 'isInteger'\n    let filtered = values.filter { $0.isInteger() }\n  \
    \                                 ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter() { Int($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnk8d2xnf.swift:8:30: error: no exact matches in call to initializer\
    \ \n    return values.filter() { Int($0) }\n                             ^\n/tmp/tmpnk8d2xnf.swift:8:30:\
    \ note: found candidate with type '(Float16) -> Int'\n    return values.filter()\
    \ { Int($0) }\n                             ^\n/tmp/tmpnk8d2xnf.swift:8:30: note:\
    \ found candidate with type '(Float) -> Int'\n    return values.filter() { Int($0)\
    \ }\n                             ^\n/tmp/tmpnk8d2xnf.swift:8:30: note: found\
    \ candidate with type '(Double) -> Int'\n    return values.filter() { Int($0)\
    \ }\n                             ^\n/tmp/tmpnk8d2xnf.swift:8:30: note: found\
    \ candidate with type '(Float80) -> Int'\n    return values.filter() { Int($0)\
    \ }\n                             ^\n/tmp/tmpnk8d2xnf.swift:8:30: note: found\
    \ candidate with type '(Builtin.Int64) -> Int'\n    return values.filter() { Int($0)\
    \ }\n                             ^\n/tmp/tmpnk8d2xnf.swift:8:30: note: found\
    \ candidate with type '(Builtin.Word) -> Int'\n    return values.filter() { Int($0)\
    \ }\n                             ^\n/tmp/tmpnk8d2xnf.swift:8:30: note: found\
    \ candidate with type '(String) -> Int?'\n    return values.filter() { Int($0)\
    \ }\n                             ^\n/tmp/tmpnk8d2xnf.swift:8:19: error: cannot\
    \ convert return expression of type '[AnyHashable]' to return type '[Int]'\n \
    \   return values.filter() { Int($0) }\n                  ^\n/tmp/tmpnk8d2xnf.swift:8:19:\
    \ note: arguments to generic parameter 'Element' ('AnyHashable' and 'Int') are\
    \ expected to be equal\n    return values.filter() { Int($0) }\n             \
    \     ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in values {\n        guard let intValue = Int(v)\
    \ else {\n            return result\n        }\n        result.append(intValue)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpa38ma14r.swift:10:34: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        guard let intValue = Int(v) else\
    \ {\n                                 ^\n                                   as!\
    \ String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ out = [Int]()\n    for el in values {\n        switch el as? Int {\n       \
    \ case .some(let el):\n            out.append(el)\n        case .none:\n     \
    \       break\n        }\n    }\n    return out\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0.isInteger }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt__oo98b.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter { $0.isInteger\
    \ }\n                  ^\n/tmp/tmpt__oo98b.swift:8:19: note: arguments to generic\
    \ parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n   \
    \ return values.filter { $0.isInteger }\n                  ^\n/tmp/tmpt__oo98b.swift:8:31:\
    \ error: value of type 'AnyHashable' has no member 'isInteger'\n    return values.filter\
    \ { $0.isInteger }\n                           ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if value is Int {\n \
    \           filtered.append(value as! Int)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ Int($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpl0_jmqvl.swift:8:36: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    return values.compactMap({ Int($0) })\n\
    \                                   ^\n                                      as!\
    \ String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    if\
    \ values is [AnyHashable] {\n        var result: [Int] = []\n        for v in\
    \ values {\n            let int = try Int(v)\n            if int != nil {\n  \
    \              result.append(int)\n            }\n        }\n        return result\n\
    \    } else {\n        var result: [Int] = []\n        for v in values {\n   \
    \         let int = try Int(v)\n            if int != nil {\n                result.append(int)\n\
    \            }\n        }\n        return result\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmph_5muk42.swift:8:15: warning: 'is' test is always true\n    if\
    \ values is [AnyHashable] {\n              ^\n/tmp/tmph_5muk42.swift:11:27: error:\
    \ no exact matches in call to initializer \n            let int = try Int(v)\n\
    \                          ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'AnyHashable')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'AnyHashable')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ source: Double)\n  \
    \         ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ source: Float80)\n \
    \          ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ _v: Builtin.Word)\n\
    \           ^\nSwift.FixedWidthInteger:3:23: note: candidate expects value of\
    \ type 'String' for parameter #1 (got 'AnyHashable')\n    @inlinable public init?(_\
    \ description: String)\n                      ^\n/tmp/tmph_5muk42.swift:20:27:\
    \ error: no exact matches in call to initializer \n            let int = try Int(v)\n\
    \                          ^\nSwift.Int:7:12: note: candidate expects value of\
    \ type 'Float16' for parameter #1 (got 'AnyHashable')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'AnyHashable')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'AnyHashable')\n    public init(_ source: Double)\n  \
    \         ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'AnyHashable')\n    public in"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ integers = values.filter{\n        guard let integer = $0 as? Int else { return\
    \ false }\n        return integer != nil\n    }\n    return integers\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6txg8ly_.swift:10:24: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns true\n        return integer != nil\n   \
    \            ~~~~~~~ ^  ~~~\n/tmp/tmp6txg8ly_.swift:12:12: error: cannot convert\
    \ return expression of type '[AnyHashable]' to return type '[Int]'\n    return\
    \ integers\n           ^\n/tmp/tmp6txg8ly_.swift:12:12: note: arguments to generic\
    \ parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n   \
    \ return integers\n           ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ out = values.filter{ $0.isInteger }\n    return out.count > 0 ? out : [Int](repeating:\
    \ 0, count: values.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqubz6b4f.swift:8:33: error: value of type 'AnyHashable' has no\
    \ member 'isInteger'\n    let out = values.filter{ $0.isInteger }\n          \
    \                   ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ out = [Int]()\n    var i = 0\n    values.forEach {\n        if $0 == Int64(String($0))\
    \ {\n            out.append($0)\n        }\n    }\n    return out\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpih0rqric.swift:11:18: error: cannot convert value of type 'Int64?'\
    \ to expected argument type 'AnyHashable'\n        if $0 == Int64(String($0))\
    \ {\n                 ^\n                                  !\n/tmp/tmpih0rqric.swift:11:31:\
    \ error: missing argument label 'describing:' in call\n        if $0 == Int64(String($0))\
    \ {\n                              ^\n                              describing:\
    \ \n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    switch\
    \ values.count {\n    case 0, 1:\n        return [0]\n    case 2:\n        if\
    \ let v1 = values.first(where: {$0.isKindOfClass(Int)}) {\n            return\
    \ [v1]\n        }\n    default:\n        var result: [Int] = []\n        for (idx,\
    \ value) in values.enumerated() {\n            if let v = value as? Int {\n  \
    \              result.append(v)\n            } else if let v = value as? [AnyHashable]\
    \ {\n                result.append(contentsOf: filter_integers(values))\n    \
    \        } else {\n                return result\n            }\n        }\n \
    \       return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmphaq7b449.swift:12:45: error: value of type 'AnyHashable' has no\
    \ member 'isKindOfClass'\n        if let v1 = values.first(where: {$0.isKindOfClass(Int)})\
    \ {\n                                         ~~ ^~~~~~~~~~~~~\n/tmp/tmphaq7b449.swift:21:59:\
    \ error: missing argument label 'values:' in call\n                result.append(contentsOf:\
    \ filter_integers(values))\n                                                 \
    \         ^\n                                                          values:\
    \ \n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0.isNumeric }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprrhx43x0.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter { $0.isNumeric\
    \ }\n                  ^\n/tmp/tmprrhx43x0.swift:8:19: note: arguments to generic\
    \ parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n   \
    \ return values.filter { $0.isNumeric }\n                  ^\n/tmp/tmprrhx43x0.swift:8:31:\
    \ error: value of type 'AnyHashable' has no member 'isNumeric'\n    return values.filter\
    \ { $0.isNumeric }\n                           ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    guard\
    \ let integers = values as [Int] else {\n        return []\n    }\n    return\
    \ integers.filter{ $0 as! Int != nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6at0pj1y.swift:8:33: error: cannot convert value of type '[AnyHashable]'\
    \ to type '[Int]' in coercion\n    guard let integers = values as [Int] else {\n\
    \                                ^\n/tmp/tmp6at0pj1y.swift:8:33: note: arguments\
    \ to generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be\
    \ equal\n    guard let integers = values as [Int] else {\n                   \
    \             ^\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap {\n        switch $0 {\n        case let x as Int:\n     \
    \       return x\n        default:\n            return nil\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: -4
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    if\
    \ let values = values as? [Int] {\n        return values\n    }\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: Exception
  stderr: 'tmpfvw4aa0j/tmpfvw4aa0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaba8a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaba59eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaba59e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaba59d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfvw4aa0j                        0x00005654b7730b1b <unavailable> + 6939

    5    libc.so.6                          0x00002aaabaa93460 __libc_start_main +
    245

    6    tmpfvw4aa0j                        0x00005654b7730429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter(values) { (val: AnyHashable) -> Bool in\n        let intVal = val as?\
    \ Int\n        return intVal != nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpfp5mfcn8.swift:8:12: error: cannot find 'filter' in scope\n   \
    \ return filter(values) { (val: AnyHashable) -> Bool in\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = values.filter { $0 is Int }\n    if result == nil {\n        result\
    \ = values.filter { $0.dynamicType == NSNumber.self }\n    }\n    return result\
    \ as? [Int] ?? []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6yo5b5_0.swift:9:15: warning: comparing non-optional value of type\
    \ '[AnyHashable]' to 'nil' always returns false\n    if result == nil {\n    \
    \   ~~~~~~ ^  ~~~\n/tmp/tmp6yo5b5_0.swift:10:52: error: cannot find 'NSNumber'\
    \ in scope\n        result = values.filter { $0.dynamicType == NSNumber.self }\n\
    \                                                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    if\
    \ values.count == 0 {\n        return []\n    }\n    var ints = [Int]()\n    for\
    \ value in values {\n        if let intValue = value as? Int {\n            ints.append(intValue)\n\
    \        }\n    }\n    return ints\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let ivalue = Int(value)\
    \ {\n            result.append(ivalue)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp79nq3d7v.swift:10:29: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let ivalue = Int(value) {\n \
    \                           ^\n                                  as! String\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: -6
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for i in values {\n        let intValue = i as! Int\n\
    \        if intValue == nil {\n            return result\n        }\n        result.append(intValue)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: Exception
  stderr: 'Could not cast value of type ''Swift.AnyHashable'' (0x2ac8f96eeac8) to
    ''Swift.Int'' (0x2ac8f96f1fc0).

    '
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ ret = [Int]()\n    var i = 0\n    while i < values.count {\n        if let num\
    \ = values[i] as? Int {\n            ret.append(num)\n            i += 1\n   \
    \     } else {\n            ret.insert(values[i], at: i)\n        }\n    }\n \
    \   return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2ud1kags.swift:15:30: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'Int'\n            ret.insert(values[i], at: i)\n\
    \                             ^\n                                 as! Int\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for v in values {\n        if let i = Int(v) {\n   \
    \         result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5ir7gl9a.swift:10:24: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let i = Int(v) {\n          \
    \             ^\n                         as! String\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    guard\
    \ let first = values.first as? Int else { return [] }\n    return values.filter\
    \ { $0 == first }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpv66sqnx0.swift:9:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter { $0 ==\
    \ first }\n                  ^\n/tmp/tmpv66sqnx0.swift:9:19: note: arguments to\
    \ generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n\
    \    return values.filter { $0 == first }\n                  ^\n/tmp/tmpv66sqnx0.swift:9:28:\
    \ error: cannot convert value of type 'AnyHashable' to expected argument type\
    \ 'Int'\n    return values.filter { $0 == first }\n                          \
    \ ^\n                              as! Int\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { Int($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvdfe5zg6.swift:8:36: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    return values.compactMap { Int($0) }\n\
    \                                   ^\n                                      as!\
    \ String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let value as Int:\n            result.append(value)\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter(&isInteger, values)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2zz2s5ar.swift:8:12: error: cannot find 'filter' in scope\n   \
    \ return filter(&isInteger, values)\n           ^~~~~~\n/tmp/tmp2zz2s5ar.swift:8:20:\
    \ error: cannot find 'isInteger' in scope\n    return filter(&isInteger, values)\n\
    \                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let value = value\
    \ as? Int {\n            filtered.append(value)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let _ = value as?\
    \ Int {\n            filtered.append(value as! Int)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ ints = [Int]()\n    for value in values {\n        if let number = value as?\
    \ Int {\n            ints.append(number)\n        }\n    }\n    return ints\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ res: [Int] = []\n    for v in values {\n        if v.typeIdentifier == .Number\
    \ {\n            if v.intValue == Int(v.intValue) {\n                res.append(v.intValue)\n\
    \            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp1awyxiud.swift:10:14: error: value of type 'AnyHashable' has no\
    \ member 'typeIdentifier'\n        if v.typeIdentifier == .Number {\n        \
    \   ~ ^~~~~~~~~~~~~~\n/tmp/tmp1awyxiud.swift:11:18: error: value of type 'AnyHashable'\
    \ has no member 'intValue'\n            if v.intValue == Int(v.intValue) {\n \
    \              ~ ^~~~~~~~\n/tmp/tmp1awyxiud.swift:11:36: error: value of type\
    \ 'AnyHashable' has no member 'intValue'\n            if v.intValue == Int(v.intValue)\
    \ {\n                                 ~ ^~~~~~~~\n/tmp/tmp1awyxiud.swift:12:30:\
    \ error: value of type 'AnyHashable' has no member 'intValue'\n              \
    \  res.append(v.intValue)\n                           ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    switch\
    \ values.count {\n    case 0: return []\n    case 1: return [values[0] as! Int]\n\
    \    case 2: let x = values[0] as! Int\n        let y = values[1] as! Int\n  \
    \      if x >= y {\n            return [x] as [Int]\n        } else {\n      \
    \      return [y] as [Int]\n        }\n    case 3: let x = values[0] as! Int\n\
    \        let y = values[1] as! Int\n        let z = values[2] as! Int\n      \
    \  if x >= y && x >= z {\n            return [x] as [Int]\n        } else {\n\
    \            return [y] as [Int]\n        }\n    default:\n        var output\
    \ = [Int]()\n        for v in values {\n            switch v.dynamicType {\n \
    \           case let s as String:\n                if let integer = Int(s) {\n\
    \                    output.append(integer)\n                }\n            case\
    \ let s as [AnyHashable]:\n                for i in s {\n                    if\
    \ let integer = Int(i) {\n                        output.append(integer)\n   \
    \                 }\n                }\n            case let s as [Any]:\n   \
    \             for i in s {\n                    if let integer = Int(i) {\n  \
    \                      output.append(integer)\n                    }\n       \
    \         }\n            case let s as Int:\n                output.append(s)\n\
    \            }\n        }\n        return output\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpp_3lnxx2.swift:29:22: error: value of type 'AnyHashable' has no\
    \ member 'dynamicType'\n            switch v.dynamicType {\n                 \
    \  ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ filtered = values.compactMap { $0 as? Int }\n    return filtered.filter { $0\
    \ != nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpfzfnn3hv.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter { $0 is\
    \ Int }\n                  ^\n/tmp/tmpfzfnn3hv.swift:8:19: note: arguments to\
    \ generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n\
    \    return values.filter { $0 is Int }\n                  ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for element in values {\n        if element is Int\
    \ {\n            filtered.append(element)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9o72rs7f.swift:11:29: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'Int'\n            filtered.append(element)\n    \
    \                        ^\n                                    as! Int\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n  return\
    \ values.compactMap({ Int($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9e0b20yb.swift:8:34: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n  return values.compactMap({ Int($0) })\n\
    \                                 ^\n                                    as! String\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let int = Int(value)\
    \ {\n            result.append(int)\n        } else {\n            break\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmphirzgr1i.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n  return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { Int($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvdfe5zg6.swift:8:36: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    return values.compactMap { Int($0) }\n\
    \                                   ^\n                                      as!\
    \ String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    if\
    \ values.isEmpty {\n        return []\n    }\n    var intValues = [Int]()\n  \
    \  for i in values {\n        let _ = try? String(i).toInt()\n        if let _\
    \ = i as? Int {\n            intValues.append(i)\n        }\n    }\n    return\
    \ intValues\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6xmvcsaf.swift:13:22: error: no exact matches in call to initializer\
    \ \n        let _ = try? String(i).toInt()\n                     ^\n/tmp/tmp6xmvcsaf.swift:13:22:\
    \ note: found candidate with type '(AnyHashable) -> String'\n        let _ = try?\
    \ String(i).toInt()\n                     ^\n/tmp/tmp6xmvcsaf.swift:13:22: note:\
    \ found candidate with type '(AnyHashable) -> String'\n        let _ = try? String(i).toInt()\n\
    \                     ^\n/tmp/tmp6xmvcsaf.swift:13:32: error: value of type 'String'\
    \ has no member 'toInt'\n        let _ = try? String(i).toInt()\n            \
    \         ~~~~~~~~~ ^~~~~\n/tmp/tmp6xmvcsaf.swift:15:30: error: cannot convert\
    \ value of type 'AnyHashable' to expected argument type 'Int'\n            intValues.append(i)\n\
    \                             ^\n                               as! Int\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ output: [Int] = []\n    for val in values {\n        if let int = Int(val) {\n\
    \            output.append(int)\n        }\n    }\n    return output\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk0fhzygt.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(val) {\n      \
    \                   ^\n                             as! String\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter(isInteger, values)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqh8a97p4.swift:8:12: error: cannot find 'filter' in scope\n   \
    \ return filter(isInteger, values)\n           ^~~~~~\n/tmp/tmpqh8a97p4.swift:8:19:\
    \ error: cannot find 'isInteger' in scope\n    return filter(isInteger, values)\n\
    \                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ Int($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpl0_jmqvl.swift:8:36: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    return values.compactMap({ Int($0) })\n\
    \                                   ^\n                                      as!\
    \ String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n  return\
    \ filters.integerFilter(values)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpy23shpo6.swift:8:10: error: cannot find 'filters' in scope\n  return\
    \ filters.integerFilter(values)\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ return $0 is Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpgqfbiiuu.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter({ return\
    \ $0 is Int })\n                  ^\n/tmp/tmpgqfbiiuu.swift:8:19: note: arguments\
    \ to generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be\
    \ equal\n    return values.filter({ return $0 is Int })\n                  ^\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        switch $0 {\n        case let value as Int:\n     \
    \       return true\n        default:\n            return false\n        }\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7fp3a10_.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter {\n  \
    \                ^\n/tmp/tmp7fp3a10_.swift:8:19: note: arguments to generic parameter\
    \ 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter\
    \ {\n                  ^\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filteredValues = values.filter { $0 as? Int != nil }\n    if values.count !=\
    \ filteredValues.count {\n        filteredValues = Array(filteredValues)\n   \
    \ }\n    return filteredValues.map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0.toInt()! })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpik4_gipb.swift:8:35: error: value of type 'AnyHashable' has no\
    \ member 'toInt'\n    return values.compactMap({ $0.toInt()! })\n            \
    \                   ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int }).filter()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2kg9s20i.swift:8:53: error: missing argument for parameter #1 in\
    \ call\n    return values.compactMap({ $0 as? Int }).filter()\n              \
    \                                      ^\n                                   \
    \                 <#(Int) throws -> Bool#>\nSwift.RangeReplaceableCollection:3:40:\
    \ note: 'filter' declared here\n    @inlinable public __consuming func filter(_\
    \ isIncluded: (Self.Element) throws -> Bool) rethrows -> Self\n              \
    \                         ^\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ filtered = values.filter{ $0 as? Int != nil }\n    return filtered.map{ $0 as!\
    \ Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter(values) {\n        switch $0 {\n        case let x as Int: return x\n\
    \        default:\n            return $0\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmplba65hfj.swift:8:12: error: cannot find 'filter' in scope\n   \
    \ return filter(values) {\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    \n    for value in values {\n        guard let number\
    \ = value as Int else {\n            Swift.print(\"Invalid value encountered:\"\
    , value)\n            continue\n        }\n        result.append(number)\n   \
    \ }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzq6l_iz1.swift:11:34: error: 'AnyHashable' is not convertible to\
    \ 'Int'\n        guard let number = value as Int else {\n                    \
    \             ^\n/tmp/tmpzq6l_iz1.swift:11:34: note: did you mean to use 'as?'\
    \ to conditionally downcast?\n        guard let number = value as Int else {\n\
    \                           ~~~~~~^~~~~~\n                                 as?\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: -4
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let int = value as?\
    \ Int {\n            result.append(int)\n        } else {\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: Exception
  stderr: 'tmps1e3dkrr/tmps1e3dkrr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b693a69dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b693a394b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b693a394988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b693a3937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1e3dkrr                        0x00005578a8c9ed6b <unavailable> + 7531

    5    libc.so.6                          0x00002b693a889460 __libc_start_main +
    245

    6    tmps1e3dkrr                        0x00005578a8c9e679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        guard let intValue =\
    \ value as? Int else { continue }\n        result.append(intValue)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ filtered = values.filter { $0 is Int }\n    return filtered.map { $0 as! Int\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_integers(values: [] as\
    \ [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable\
    \ : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for value in values {\n        guard let int = value\
    \ as? Int else {\n            continue\n        }\n        filtered.append(int)\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ Int($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpl0_jmqvl.swift:8:36: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    return values.compactMap({ Int($0) })\n\
    \                                   ^\n                                      as!\
    \ String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let value as Int:\n            result.append(value)\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 == Int($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpn33xqny4.swift:8:31: error: binary operator '==' cannot be applied\
    \ to operands of type 'AnyHashable' and 'Int'\n    return values.filter { $0 ==\
    \ Int($0) }\n                           ~~ ^  ~~~~~~~\n/tmp/tmpn33xqny4.swift:8:31:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (AnyHashable, AnyHashable), (Int, Int)\n    return values.filter { $0 == Int($0)\
    \ }\n                              ^\n/tmp/tmpn33xqny4.swift:8:34: error: no exact\
    \ matches in call to initializer \n    return values.filter { $0 == Int($0) }\n\
    \                                 ^\n/tmp/tmpn33xqny4.swift:8:34: note: found\
    \ candidate with type '(Float16) -> Int'\n    return values.filter { $0 == Int($0)\
    \ }\n                                 ^\n/tmp/tmpn33xqny4.swift:8:34: note: found\
    \ candidate with type '(Float) -> Int'\n    return values.filter { $0 == Int($0)\
    \ }\n                                 ^\n/tmp/tmpn33xqny4.swift:8:34: note: found\
    \ candidate with type '(Double) -> Int'\n    return values.filter { $0 == Int($0)\
    \ }\n                                 ^\n/tmp/tmpn33xqny4.swift:8:34: note: found\
    \ candidate with type '(Float80) -> Int'\n    return values.filter { $0 == Int($0)\
    \ }\n                                 ^\n/tmp/tmpn33xqny4.swift:8:34: note: found\
    \ candidate with type '(Builtin.Int64) -> Int'\n    return values.filter { $0\
    \ == Int($0) }\n                                 ^\n/tmp/tmpn33xqny4.swift:8:34:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n    return values.filter\
    \ { $0 == Int($0) }\n                                 ^\n/tmp/tmpn33xqny4.swift:8:34:\
    \ note: found candidate with type '(String) -> Int?'\n    return values.filter\
    \ { $0 == Int($0) }\n                                 ^\n/tmp/tmpn33xqny4.swift:8:19:\
    \ error: cannot convert return expression of type '[AnyHashable]' to return type\
    \ '[Int]'\n    return values.filter { $0 == Int($0) }\n                  ^\n/tmp/tmpn33xqny4.swift:8:19:\
    \ note: arguments to generic parameter 'Element' ('AnyHashable' and 'Int') are\
    \ expected to be equal\n    return values.filter { $0 == Int($0) }\n      "
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpfzfnn3hv.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter { $0 is\
    \ Int }\n                  ^\n/tmp/tmpfzfnn3hv.swift:8:19: note: arguments to\
    \ generic parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n\
    \    return values.filter { $0 is Int }\n                  ^\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        switch $0 {\n        case _:\n            return true\n\
    \        case let value as Int:\n            return true\n        default:\n \
    \           return false\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpi594u2nf.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter {\n  \
    \                ^\n/tmp/tmpi594u2nf.swift:8:19: note: arguments to generic parameter\
    \ 'Element' ('AnyHashable' and 'Int') are expected to be equal\n    return values.filter\
    \ {\n                  ^\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap { $0 as? Int }.filter { $0 != nil }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap(toInt)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpiwic4acu.swift:8:27: error: cannot find 'toInt' in scope\n    return\
    \ values.flatMap(toInt)\n                          ^~~~~\n/tmp/tmpiwic4acu.swift:8:27:\
    \ error: converting non-escaping value to '(AnyHashable) throws -> Int?' may allow\
    \ it to escape\n    return values.flatMap(toInt)\n                          ^\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        } else {\n         \
    \   throw Errors.argumentTypeMismatch(expected: \"integer\", actual: value, argumentName:\
    \ \"values\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpir5y9o96.swift:13:19: error: cannot find 'Errors' in scope\n  \
    \          throw Errors.argumentTypeMismatch(expected: \"integer\", actual: value,\
    \ argumentName: \"values\")\n                  ^~~~~~\n/tmp/tmpir5y9o96.swift:13:13:\
    \ error: error is not handled because the enclosing function is not declared 'throws'\n\
    \            throw Errors.argumentTypeMismatch(expected: \"integer\", actual:\
    \ value, argumentName: \"values\")\n            ^\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            filtered.append(intValue)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = values.filter({ $0.isNumber })\n    return filtered.map({ $0.asInt\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_integers(values: [] as\
    \ [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable\
    \ : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5mrsn1ys.swift:8:39: error: value of type 'AnyHashable' has no\
    \ member 'isNumber'\n    var filtered = values.filter({ $0.isNumber })\n     \
    \                              ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { Int($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvdfe5zg6.swift:8:36: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    return values.compactMap { Int($0) }\n\
    \                                   ^\n                                      as!\
    \ String\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ integers = values.filter { $0 is Int }\n    return integers.map({ $0 as! Int\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_integers(values: [] as\
    \ [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable\
    \ : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let int = value as?\
    \ Int {\n            result.append(int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ $0.isNumber })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpckp86auu.swift:8:19: error: cannot convert return expression of\
    \ type '[AnyHashable]' to return type '[Int]'\n    return values.filter({ $0.isNumber\
    \ })\n                  ^\n/tmp/tmpckp86auu.swift:8:19: note: arguments to generic\
    \ parameter 'Element' ('AnyHashable' and 'Int') are expected to be equal\n   \
    \ return values.filter({ $0.isNumber })\n                  ^\n/tmp/tmpckp86auu.swift:8:31:\
    \ error: value of type 'AnyHashable' has no member 'isNumber'\n    return values.filter({\
    \ $0.isNumber })\n                           ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        switch $0 {\n        case let x where Int(x) != x:\n\
    \            return false\n        default:\n            return true\n       \
    \ }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpmtn_00sy.swift:10:26: error: no exact matches in call to initializer\
    \ \n        case let x where Int(x) != x:\n                         ^\n/tmp/tmpmtn_00sy.swift:10:26:\
    \ note: found candidate with type '(Float16) -> Int'\n        case let x where\
    \ Int(x) != x:\n                         ^\n/tmp/tmpmtn_00sy.swift:10:26: note:\
    \ found candidate with type '(Float) -> Int'\n        case let x where Int(x)\
    \ != x:\n                         ^\n/tmp/tmpmtn_00sy.swift:10:26: note: found\
    \ candidate with type '(Double) -> Int'\n        case let x where Int(x) != x:\n\
    \                         ^\n/tmp/tmpmtn_00sy.swift:10:26: note: found candidate\
    \ with type '(Float80) -> Int'\n        case let x where Int(x) != x:\n      \
    \                   ^\n/tmp/tmpmtn_00sy.swift:10:26: note: found candidate with\
    \ type '(Builtin.Int64) -> Int'\n        case let x where Int(x) != x:\n     \
    \                    ^\n/tmp/tmpmtn_00sy.swift:10:26: note: found candidate with\
    \ type '(Builtin.Word) -> Int'\n        case let x where Int(x) != x:\n      \
    \                   ^\n/tmp/tmpmtn_00sy.swift:10:26: note: found candidate with\
    \ type '(String) -> Int?'\n        case let x where Int(x) != x:\n           \
    \              ^\n/tmp/tmpmtn_00sy.swift:10:26: note: found candidate with type\
    \ '(any Decoder) throws -> Int'\n        case let x where Int(x) != x:\n     \
    \                    ^\n/tmp/tmpmtn_00sy.swift:10:33: error: binary operator '!='\
    \ cannot be applied to operands of type 'Int' and 'AnyHashable'\n        case\
    \ let x where Int(x) != x:\n                         ~~~~~~ ^  ~\n/tmp/tmpmtn_00sy.swift:8:19:\
    \ error: cannot convert return expression of type '[AnyHashable]' to return type\
    \ '[Int]'\n    return values.filter {\n                  ^\n/tmp/tmpmtn_00sy.swift:8:19:\
    \ note: arguments to generic parameter 'Element' ('AnyHashable' and 'Int') are\
    \ expected to be equal\n    return values.filter {\n                  ^\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ integers = values.compactMap({ Int($0) })\n    return integers\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmphvim0xaq.swift:8:44: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    let integers = values.compactMap({ Int($0)\
    \ })\n                                           ^\n                         \
    \                     as! String\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap(to_integer).filter { $0 != nil }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2a3typfr.swift:8:30: error: cannot find 'to_integer' in scope\n\
    \    return values.compactMap(to_integer).filter { $0 != nil }\n             \
    \                ^~~~~~~~~~\n/tmp/tmp2a3typfr.swift:8:30: error: converting non-escaping\
    \ value to '(AnyHashable) throws -> Int?' may allow it to escape\n    return values.compactMap(to_integer).filter\
    \ { $0 != nil }\n                             ^\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ Int($0) }).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9mvedxcd.swift:8:36: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n    return values.compactMap({ Int($0) }).sorted()\n\
    \                                   ^\n                                      as!\
    \ String\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 == Int($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7i9w10ay.swift:8:38: error: no exact matches in call to initializer\
    \ \n    return values.compactMap { $0 == Int($0) }\n                         \
    \            ^\n/tmp/tmp7i9w10ay.swift:8:38: note: found candidate with type '(Float16)\
    \ -> Int'\n    return values.compactMap { $0 == Int($0) }\n                  \
    \                   ^\n/tmp/tmp7i9w10ay.swift:8:38: note: found candidate with\
    \ type '(Float) -> Int'\n    return values.compactMap { $0 == Int($0) }\n    \
    \                                 ^\n/tmp/tmp7i9w10ay.swift:8:38: note: found\
    \ candidate with type '(Double) -> Int'\n    return values.compactMap { $0 ==\
    \ Int($0) }\n                                     ^\n/tmp/tmp7i9w10ay.swift:8:38:\
    \ note: found candidate with type '(Float80) -> Int'\n    return values.compactMap\
    \ { $0 == Int($0) }\n                                     ^\n/tmp/tmp7i9w10ay.swift:8:38:\
    \ note: found candidate with type '(Builtin.Int64) -> Int'\n    return values.compactMap\
    \ { $0 == Int($0) }\n                                     ^\n/tmp/tmp7i9w10ay.swift:8:38:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n    return values.compactMap\
    \ { $0 == Int($0) }\n                                     ^\n/tmp/tmp7i9w10ay.swift:8:38:\
    \ note: found candidate with type '(String) -> Int?'\n    return values.compactMap\
    \ { $0 == Int($0) }\n                                     ^\n/tmp/tmp7i9w10ay.swift:8:35:\
    \ error: binary operator '==' cannot be applied to operands of type 'AnyHashable'\
    \ and 'Int'\n    return values.compactMap { $0 == Int($0) }\n                \
    \               ~~ ^  ~~~~~~~\n/tmp/tmp7i9w10ay.swift:8:35: note: overloads for\
    \ '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable),\
    \ (Int, Int)\n    return values.compactMap { $0 == Int($0) }\n               \
    \                   ^\n/tmp/tmp7i9w10ay.swift:8:35: error: cannot convert value\
    \ of type 'Bool' to closure result type 'Int?'\n    return values.compactMap {\
    \ $0 == Int($0) }\n                               ~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009135
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
