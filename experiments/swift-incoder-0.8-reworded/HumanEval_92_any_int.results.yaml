language: swift
name: HumanEval_92_any_int
results:
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return true // TODO\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp6garx3ku/tmp6garx3ku.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75ed53ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75ed235b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75ed235988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75ed2347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6garx3ku                        0x000055bb79b7324d <unavailable> + 4685

    5    libc.so.6                          0x00002b75ed72a460 __libc_start_main +
    245

    6    tmp6garx3ku                        0x000055bb79b72e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let result = x >=\
    \ y && x >= z && y >= z && is_int(x + y + z)\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplba42m9j.swift:15:48: error: cannot find 'is_int' in scope\n  \
    \  let result = x >= y && x >= z && y >= z && is_int(x + y + z)\n            \
    \                                   ^~~~~~\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return _any_int(x.roundToInt(),\
    \ y.roundToInt(), z.roundToInt())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfhg0dgek.swift:15:10: error: cannot find '_any_int' in scope\n\
    \  return _any_int(x.roundToInt(), y.roundToInt(), z.roundToInt())\n         ^~~~~~~~\n\
    /tmp/tmpfhg0dgek.swift:15:21: error: value of type 'Double' has no member 'roundToInt'\n\
    \  return _any_int(x.roundToInt(), y.roundToInt(), z.roundToInt())\n         \
    \         ~ ^~~~~~~~~~\n/tmp/tmpfhg0dgek.swift:15:37: error: value of type 'Double'\
    \ has no member 'roundToInt'\n  return _any_int(x.roundToInt(), y.roundToInt(),\
    \ z.roundToInt())\n                                  ~ ^~~~~~~~~~\n/tmp/tmpfhg0dgek.swift:15:53:\
    \ error: value of type 'Double' has no member 'roundToInt'\n  return _any_int(x.roundToInt(),\
    \ y.roundToInt(), z.roundToInt())\n                                          \
    \        ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x.truncatingRemainder(dividingBy:\
    \ y).truncatingRemainder(dividingBy: z) == .zero\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp6h2sbvu_/tmp6h2sbvu_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5de81ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5de7ef6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5de7ef6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5de7ef57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6h2sbvu_                        0x00005627f53c956a <unavailable> + 5482

    5    libc.so.6                          0x00002b5de83eb460 __libc_start_main +
    245

    6    tmp6h2sbvu_                        0x00005627f53c9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y + z &&\
    \ y == x + z {\n        return true\n    } else {\n        return false\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpbx4t2bfb/tmpbx4t2bfb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b003cd86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b003ca7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b003ca7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b003ca7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbx4t2bfb                        0x000056540ee421c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b003cf72460 __libc_start_main +
    245

    6    tmpbx4t2bfb                        0x000056540ee41e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x < y && x < z {\n\
    \    return true\n  }\n  if y < x && y < z {\n    return true\n  }\n  if z < x\
    \ && z < y {\n    return true\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpw_b34uii/tmpw_b34uii.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab27538ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab275081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab275081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2750807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_b34uii                        0x000055d66e2e324d <unavailable> + 4685

    5    libc.so.6                          0x00002ab275576460 __libc_start_main +
    245

    6    tmpw_b34uii                        0x000055d66e2e2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let result = ((x\
    \ + y) + (z - x)) == z\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpkualn23v/tmpkualn23v.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b226bb1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b226b812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b226b812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b226b8117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkualn23v                        0x00005633e32521c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b226bd07460 __libc_start_main +
    245

    6    tmpkualn23v                        0x00005633e3251e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    switch {\n    case\
    \ x is Int && y is Int && z is Int:\n        return true\n    case x is Int &&\
    \ y is Int && z is Double:\n        return x == z + y\n    case x is Double &&\
    \ y is Int && z is Int:\n        return y == z + x\n    case x is Double && y\
    \ is Int && z is Double:\n        return y == z + x\n    case x is Double && y\
    \ is Double && z is Int:\n        return y == z + x\n    case x is Double && y\
    \ is Double && z is Double:\n        return y == z + x\n    default:\n       \
    \ return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvzp73fvi.swift:15:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  var result: Bool =\
    \ false\n  if x != y {\n    result = true\n  } else if y != z {\n    result =\
    \ true\n  } else if x != z {\n    result = true\n  }\n  return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpigxfhnf3/tmpigxfhnf3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b57274c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b56f6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b56f6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b56f6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigxfhnf3                        0x000055a496c9d24d <unavailable> + 4685

    5    libc.so.6                          0x00002b0b57460460 __libc_start_main +
    245

    6    tmpigxfhnf3                        0x000055a496c9ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y || (x ==\
    \ z && y == z) {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcizw6wbu/tmpcizw6wbu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af221afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2217f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2217f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2217f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcizw6wbu                        0x000055f9c5f511c4 <unavailable> + 4548

    5    libc.so.6                          0x00002af221ce9460 __libc_start_main +
    245

    6    tmpcizw6wbu                        0x000055f9c5f50e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    guard let sum = x\
    \ + y + z else {\n        return false\n    }\n\n    return !(sum % 1.0 == 0.0)\
    \ && Int(sum) == sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqss3m_cu.swift:15:11: error: initializer for conditional binding\
    \ must have Optional type, not 'Double'\n    guard let sum = x + y + z else {\n\
    \          ^         ~~~~~~~~~\n/tmp/tmpqss3m_cu.swift:19:47: error: cannot convert\
    \ value of type 'Double' to expected argument type 'Int'\n    return !(sum % 1.0\
    \ == 0.0) && Int(sum) == sum\n                                              ^\n\
    \                                              Int( )\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x == y || x == z\
    \ {\n    return true\n  } else {\n    return false\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpya_kthb4/tmpya_kthb4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba36741fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba367116b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba367116988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3671157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpya_kthb4                        0x000055a69286a1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ba36760b460 __libc_start_main +
    245

    6    tmpya_kthb4                        0x000055a692869e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x >= y && x >=\
    \ z {\n        if x >= 0.0 && y >= 0.0 && z >= 0.0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpyxqb9cry/tmpyxqb9cry.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3550e20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3550b17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3550b17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3550b167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxqb9cry                        0x000055d4ba1451c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b355100c460 __libc_start_main +
    245

    6    tmpyxqb9cry                        0x000055d4ba144e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return ((x == (x\
    \ + y)) && (x == (x + z)) && (x == (y + z)) && (y != 0) && (z != 0))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp8m4iam2u/tmp8m4iam2u.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0117121c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0116e18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0116e18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0116e177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8m4iam2u                        0x0000563d41cf41c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b011730d460 __libc_start_main +
    245

    6    tmp8m4iam2u                        0x0000563d41cf3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\treturn int_sum(x, y,\
    \ z) == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj9kbe_f_.swift:15:9: error: cannot find 'int_sum' in scope\n  \
    \      return int_sum(x, y, z) == x\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y {\n   \
    \     if y == z {\n            return true\n        } else {\n            return\
    \ false\n        }\n    } else if x == z {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpl675ae6c/tmpl675ae6c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b891378fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8913486b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8913486988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89134857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl675ae6c                        0x000055e1610c81c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b891397b460 __libc_start_main +
    245

    6    tmpl675ae6c                        0x000055e1610c7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x != 0.0 &&\
    \ y != 0.0 && z != 0.0 && (Int(x) == Int(y) + Int(z) || Int(x) == Int(z) + Int(y)\
    \ || Int(y) == Int(z) + Int(x))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpu5i5v2nf/tmpu5i5v2nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b104f121c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b104ee18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b104ee18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b104ee177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5i5v2nf                        0x0000565271b35572 <unavailable> + 5490

    5    libc.so.6                          0x00002b104f30d460 __libc_start_main +
    245

    6    tmpu5i5v2nf                        0x0000565271b34ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x > y {\n    if\
    \ x > z {\n      return true\n    }\n    return false\n  } else if x > z {\n \
    \   return true\n  } else {\n    if y > z {\n      return true\n    }\n    return\
    \ false\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmppan05h2u/tmppan05h2u.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b315ca9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b315c791b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b315c791988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b315c7907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppan05h2u                        0x000055d4d14d82d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b315cc86460 __libc_start_main +
    245

    6    tmppan05h2u                        0x000055d4d14d7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x == y +\
    \ z && y == (x + z) && z == (x + y))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpgahus2yy/tmpgahus2yy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5083e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5080e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5080e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5080df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgahus2yy                        0x0000556d6d3d91c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ae5085d5460 __libc_start_main +
    245

    6    tmpgahus2yy                        0x0000556d6d3d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x == y && y == z\
    \ {\n    return true\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp0gmkuoep/tmp0gmkuoep.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b52c78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b5296fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b5296f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b5296e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0gmkuoep                        0x0000557d148d11c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b8b52e64460 __libc_start_main +
    245

    6    tmp0gmkuoep                        0x0000557d148d0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return fallible(x,\
    \ y, z) { $0.x + $1.x + $1.y + $1.y + $1.z + $1.z == $1.x + $1.y + $1.z }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7fwq908y.swift:15:10: error: cannot find 'fallible' in scope\n\
    \  return fallible(x, y, z) { $0.x + $1.x + $1.y + $1.y + $1.z + $1.z == $1.x\
    \ + $1.y + $1.z }\n         ^~~~~~~~\n/tmp/tmp7fwq908y.swift:15:10: error: the\
    \ compiler is unable to type-check this expression in reasonable time; try breaking\
    \ up the expression into distinct sub-expressions\n  return fallible(x, y, z)\
    \ { $0.x + $1.x + $1.y + $1.y + $1.z + $1.z == $1.x + $1.y + $1.z }\n        \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return x < y && y <\
    \ z && z < x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpqcecm_br/tmpqcecm_br.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb710cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb70dc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb70dc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb70dc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcecm_br                        0x00005625140df1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002abb712ba460 __libc_start_main +
    245

    6    tmpqcecm_br                        0x00005625140dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  let x_ = Int(x)\n \
    \ let y_ = Int(y)\n  let z_ = Int(z)\n  if x_ != z_ || y_ != z_ {\n    return\
    \ false\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp5yo263_c/tmp5yo263_c.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b413723fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4136f36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4136f36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4136f357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yo263_c                        0x000055785ffa4254 <unavailable> + 4692

    5    libc.so.6                          0x00002b413742b460 __libc_start_main +
    245

    6    tmp5yo263_c                        0x000055785ffa3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let min: Double =\
    \ min(x, y)\n    let max: Double = max(x, y)\n    let diff: Double = max - min\n\
    \    if abs(x) == diff && abs(y) == diff && abs(z) == diff {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp30eznahl/tmp30eznahl.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81643ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81640f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81640f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81640f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp30eznahl                        0x0000561b0d323394 <unavailable> + 5012

    5    libc.so.6                          0x00002b81645eb460 __libc_start_main +
    245

    6    tmp30eznahl                        0x0000561b0d323039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    switch {\n    case\
    \ x < 0 || y < 0 || z < 0:\n        return false\n    case x == y:\n        return\
    \ true\n    case x == z:\n        return true\n    case y == z:\n        return\
    \ true\n    default:\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp8h70r0o.swift:15:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  // TODO: This can be\
    \ simplified if we use Int instead of Double\n  guard x == y || x == z || y ==\
    \ z else { return false }\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpv3gq5vv4/tmpv3gq5vv4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b9dce4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b9d9dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b9d9db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b9d9da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3gq5vv4                        0x000055897c4e31c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b8b9ded0460 __libc_start_main +
    245

    6    tmpv3gq5vv4                        0x000055897c4e2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x < y {\n    return\
    \ any_int(x: z, y: y, z: x)\n  } else if y < z {\n    return any_int(x: x, y:\
    \ z, z: y)\n  } else {\n    return x == z\n  }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979171
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\treturn any_float(x:\
    \ x, y: y, z: z) == true || any_float(x: x, y: y, z: z) == true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpix29fc0d.swift:15:9: error: cannot find 'any_float' in scope\n\
    \        return any_float(x: x, y: y, z: z) == true || any_float(x: x, y: y, z:\
    \ z) == true\n               ^~~~~~~~~\n/tmp/tmpix29fc0d.swift:15:48: error: cannot\
    \ find 'any_float' in scope\n        return any_float(x: x, y: y, z: z) == true\
    \ || any_float(x: x, y: y, z: z) == true\n                                   \
    \                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    // Add together all\
    \ the ints in the array\n    var ints = [Int]()\n    ints.append(Int(x))\n   \
    \ ints.append(Int(y))\n    ints.append(Int(z))\n    var sum = 0\n    for i in\
    \ ints {\n        sum += Int(i)\n    }\n    // return true if the sum of the ints\
    \ are equal to the x or y or z arguments\n    return sum == Int(x) || sum == Int(y)\
    \ || sum == Int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpuq960jsr/tmpuq960jsr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91e2b41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91e2838b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91e2838988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91e28377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuq960jsr                        0x000055c1900c05f4 <unavailable> + 5620

    5    libc.so.6                          0x00002b91e2d2d460 __libc_start_main +
    245

    6    tmpuq960jsr                        0x000055c1900c0299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return x == y || (x\
    \ != 0.0 && (x % 1) == 0) || (z != 0.0 && (z % 1) == 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdpn5unig.swift:15:36: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n  return x == y || (x != 0.0 && (x\
    \ % 1) == 0) || (z != 0.0 && (z % 1) == 0)\n                                 \
    \  ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic\
    \ func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n\
    /tmp/tmpdpn5unig.swift:15:66: error: '%' is unavailable: For floating point numbers\
    \ use truncatingRemainder instead\n  return x == y || (x != 0.0 && (x % 1) ==\
    \ 0) || (z != 0.0 && (z % 1) == 0)\n                                         \
    \                        ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y {\n   \
    \     if x == z {\n            return true\n        }\n        return false\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpwtqsttl0/tmpwtqsttl0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc4b794c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc4b48bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc4b48b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc4b48a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtqsttl0                        0x0000564f862ba1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002acc4b980460 __libc_start_main +
    245

    6    tmpwtqsttl0                        0x0000564f862b9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979085
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let sum = x + y +\
    \ z\n    return x == sum && y == sum && z == sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp44j9gmxf/tmp44j9gmxf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba55c18ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba55be81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba55be81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba55be807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44j9gmxf                        0x000055715d0ce1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ba55c376460 __libc_start_main +
    245

    6    tmp44j9gmxf                        0x000055715d0cde69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x != 0 ||\
    \ y != 0 || z != 0 || x == y || x == z || y == z\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpsgl8jb0c/tmpsgl8jb0c.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc3f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc0e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc0e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc0e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgl8jb0c                        0x00005566ddcbc24d <unavailable> + 4685

    5    libc.so.6                          0x00002b11dc5de460 __libc_start_main +
    245

    6    tmpsgl8jb0c                        0x00005566ddcbbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y + z &&\
    \ y == z && is_int(x.toInt()) && is_int(y.toInt()) && is_int(z.toInt()) { return\
    \ true }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg3sgm133.swift:15:32: error: cannot find 'is_int' in scope\n  \
    \  if x == y + z && y == z && is_int(x.toInt()) && is_int(y.toInt()) && is_int(z.toInt())\
    \ { return true }\n                               ^~~~~~\n/tmp/tmpg3sgm133.swift:15:53:\
    \ error: cannot find 'is_int' in scope\n    if x == y + z && y == z && is_int(x.toInt())\
    \ && is_int(y.toInt()) && is_int(z.toInt()) { return true }\n                \
    \                                    ^~~~~~\n/tmp/tmpg3sgm133.swift:15:74: error:\
    \ cannot find 'is_int' in scope\n    if x == y + z && y == z && is_int(x.toInt())\
    \ && is_int(y.toInt()) && is_int(z.toInt()) { return true }\n                \
    \                                                         ^~~~~~\n/tmp/tmpg3sgm133.swift:15:41:\
    \ error: value of type 'Double' has no member 'toInt'\n    if x == y + z && y\
    \ == z && is_int(x.toInt()) && is_int(y.toInt()) && is_int(z.toInt()) { return\
    \ true }\n                                      ~ ^~~~~\n/tmp/tmpg3sgm133.swift:15:62:\
    \ error: value of type 'Double' has no member 'toInt'\n    if x == y + z && y\
    \ == z && is_int(x.toInt()) && is_int(y.toInt()) && is_int(z.toInt()) { return\
    \ true }\n                                                           ~ ^~~~~\n\
    /tmp/tmpg3sgm133.swift:15:83: error: value of type 'Double' has no member 'toInt'\n\
    \    if x == y + z && y == z && is_int(x.toInt()) && is_int(y.toInt()) && is_int(z.toInt())\
    \ { return true }\n                                                          \
    \                      ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x >= y &&\
    \ x <= z && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw433i9ug.swift:15:32: error: cannot find 'is_int' in scope\n  \
    \  return x >= y && x <= z && is_int(x) && is_int(y) && is_int(z)\n          \
    \                     ^~~~~~\n/tmp/tmpw433i9ug.swift:15:45: error: cannot find\
    \ 'is_int' in scope\n    return x >= y && x <= z && is_int(x) && is_int(y) &&\
    \ is_int(z)\n                                            ^~~~~~\n/tmp/tmpw433i9ug.swift:15:58:\
    \ error: cannot find 'is_int' in scope\n    return x >= y && x <= z && is_int(x)\
    \ && is_int(y) && is_int(z)\n                                                \
    \         ^~~~~~\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  let z = z * Float(z)\
    \ / Float(z)\n  let z2 = z * z * Float(z) / Float(z2)\n  return x >= y && x <=\
    \ z && x >= z2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7gioaqng.swift:15:11: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Float'\n  let z = z * Float(z) / Float(z)\n     \
    \     ^\n          Float( )\n/tmp/tmp7gioaqng.swift:16:37: error: use of local\
    \ variable 'z2' before its declaration\n  let z2 = z * z * Float(z) / Float(z2)\n\
    \                                    ^\n/tmp/tmp7gioaqng.swift:16:7: note: 'z2'\
    \ declared here\n  let z2 = z * z * Float(z) / Float(z2)\n      ^\n/tmp/tmp7gioaqng.swift:16:14:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Float'\n\
    \  let z2 = z * z * Float(z) / Float(z2)\n             ^\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x == x + y\
    \ || x == x + z || x == y + z || y == x + z || y == y + z || z == x + y || z ==\
    \ y + x || z == x + z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp5nhzr1nh/tmp5nhzr1nh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b7e23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b7b1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b7b1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b7b197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5nhzr1nh                        0x00005634ba83a2d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b04b800f460 __libc_start_main +
    245

    6    tmp5nhzr1nh                        0x00005634ba839e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  // This implementation\
    \ is a straight translation of code from\n  // https://github.com/JulianWalsh/math.jl/blob/master/src/functions.jl.\n\
    \  return abs(z - x*y - y) < 1e-14 && abs(z - x*y) < 1e-14\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp9jjwl953/tmp9jjwl953.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d597d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d594ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d594ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d594cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9jjwl953                        0x000056357acb92e4 <unavailable> + 4836

    5    libc.so.6                          0x00002b4d599c3460 __libc_start_main +
    245

    6    tmp9jjwl953                        0x000056357acb8f89 <unavailable> + 3977

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x == y && y == z\
    \ {\n    return true\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp0gmkuoep/tmp0gmkuoep.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b52c78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b5296fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b5296f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b5296e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0gmkuoep                        0x0000557d148d11c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b8b52e64460 __libc_start_main +
    245

    6    tmp0gmkuoep                        0x0000557d148d0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let a = x + y + z\n\
    \    let b = x - y + z\n    let c = x - y + x\n    let d = x + y - z\n    let\
    \ e = x + y + x - z\n    let f = x + y - z\n    let g = x + y + z - x\n    let\
    \ h = x + y - z - x\n    let i = x + y + z + x\n    let j = x - y + z + x\n  \
    \  let k = x - y + x - z\n    let l = x + y - z - x\n    let m = x + y + z + x\
    \ - x\n    let n = x + y - z + x + x\n    let o = x + y + z + x + x - x\n    let\
    \ p = x + y - z - x - x\n    let q = x + y + z + x - x - x\n    let r = x + y\
    \ - z + x - x - x\n    let s = x + y + z - x - x - x\n    let t = x + y - z +\
    \ x + x - x - x\n    let u = x + y - z + x + x - x - x - x\n    let v = x + y\
    \ - z + x + x + x - x - x - x\n    let w = x + y - z + x + x + x + x - x - x -\
    \ x\n    let x = x + y - z + x + x + x + x + x - x - x - x\n    let y = x + y\
    \ - z + x + x + x + x + x + x - x - x - x\n    let z = x + y - z + x + x + x +\
    \ x + x + x + x - x - x - x\n    let w = x + y - z + x + x + x + x + x + x + x\
    \ - x - x - x - x\n    let w = x + y - z + x + x + x + x + x + x + x + x + x -\
    \ x - x - x - x\n    let w = x + y - z + x + x + x + x + x + x + x + x + x - x\
    \ - x - x - x\n    let w = x + y - z + x + x + x + x + x + x + x + x + x + x -\
    \ x - x - x - x\n    let w = x + y - z + x + x + x + x + x + x + x + x + x + x\
    \ + x - x - x - x - x\n    let w = x + y - z + x + x + x + x + x + x + x + x +\
    \ x + x + x + x - x - x - x - x\n    let w = x + y - z + x + x + x + x + x + x\
    \ + x + x + x + x + x - x - x - x - x - x\n    let w = x + y - z + x + x + x +\
    \ x + x + x + x + x + x + x + x + x - x - x - x - x - x\n    let w = x + y - z\
    \ + x + x + x + x + x + x + x + x + x + x + x + x - x - x - x - x - x - x\n  \
    \  let w = x + y - z + x + x + x + x + x + x + x + x + x + x + x + x + x - x -\
    \ x - x - x - x - x - x\n    let w = x + y - z + x + x + x + x + x + x + x + x\
    \ + x + x + x + x + x + x - x - x - x - x - x - x - x\n    let w = x + y - z +\
    \ x + x + x + x + x + x + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr5tiu9wu.swift:53:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpr5tiu9wu.swift:41:9: error: invalid redeclaration of 'w'\n    let\
    \ w = x + y - z + x + x + x + x + x + x + x - x - x - x - x\n        ^\n/tmp/tmpr5tiu9wu.swift:37:9:\
    \ note: 'w' previously declared here\n    let w = x + y - z + x + x + x + x -\
    \ x - x - x\n        ^\n/tmp/tmpr5tiu9wu.swift:42:9: error: invalid redeclaration\
    \ of 'w'\n    let w = x + y - z + x + x + x + x + x + x + x + x + x - x - x -\
    \ x - x\n        ^\n/tmp/tmpr5tiu9wu.swift:37:9: note: 'w' previously declared\
    \ here\n    let w = x + y - z + x + x + x + x - x - x - x\n        ^\n/tmp/tmpr5tiu9wu.swift:43:9:\
    \ error: invalid redeclaration of 'w'\n    let w = x + y - z + x + x + x + x +\
    \ x + x + x + x + x - x - x - x - x\n        ^\n/tmp/tmpr5tiu9wu.swift:37:9: note:\
    \ 'w' previously declared here\n    let w = x + y - z + x + x + x + x - x - x\
    \ - x\n        ^\n/tmp/tmpr5tiu9wu.swift:44:9: error: invalid redeclaration of\
    \ 'w'\n    let w = x + y - z + x + x + x + x + x + x + x + x + x + x - x - x -\
    \ x - x\n        ^\n/tmp/tmpr5tiu9wu.swift:37:9: note: 'w' previously declared\
    \ here\n    let w = x + y - z + x + x + x + x - x - x - x\n        ^\n/tmp/tmpr5tiu9wu.swift:45:9:\
    \ error: invalid redeclaration of 'w'\n    let w = x + y - z + x + x + x + x +\
    \ x + x + x + x + x + x + x - x - x - x - x\n        ^\n/tmp/tmpr5tiu9wu.swift:37:9:\
    \ note: 'w' previously declared here\n    let w = x + y - z + x + x + x + x -\
    \ x - x - x\n        ^\n/tmp/tmpr5tiu9wu.swift:46:9: error: invalid redeclaration\
    \ of 'w'\n    let w = x + y - z + x + x + x + x + x + x + x + x + x + x + x +\
    \ x - x - x - x - x\n        ^\n/tmp/tmpr5tiu9wu.swift:37:9: note: 'w' previously\
    \ declared here\n    let w = x + y - z + x + x + x + x - x - x - x\n        ^\n\
    /tmp/tmpr5tiu9wu.swift:47:9: error: invalid redeclaration of 'w'\n    let w =\
    \ x + y - z + x + x + x + x + x + x + x + x + x + x + x - x - x - x - x - x\n\
    \        ^\n/tmp/tmpr5tiu9wu.swift:37:9: note: 'w' previously declared here\n\
    \    let w = x + y - z + x + x + x + x - x - x - x\n        ^\n/tmp/tmpr5tiu9wu.swift:48:9:\
    \ error"
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  guard ((x >= -271844\
    \ || x <= 271844) && (y >= -271844 || y <= 271844) && (z >= -271844 || z <= 271844))\
    \ else {\n    return false\n  }\n  guard (is_int(x) && is_int(y) && is_int(z))\
    \ else {\n    return false\n  }\n  if x == y + z {\n    return true\n  }\n  return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z:\
    \ 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp97zcygn_.swift:18:10: error: cannot find 'is_int' in scope\n  guard\
    \ (is_int(x) && is_int(y) && is_int(z)) else {\n         ^~~~~~\n/tmp/tmp97zcygn_.swift:18:23:\
    \ error: cannot find 'is_int' in scope\n  guard (is_int(x) && is_int(y) && is_int(z))\
    \ else {\n                      ^~~~~~\n/tmp/tmp97zcygn_.swift:18:36: error: cannot\
    \ find 'is_int' in scope\n  guard (is_int(x) && is_int(y) && is_int(z)) else {\n\
    \                                   ^~~~~~\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x != 0 &&\
    \ y != 0 && z != 0 && x == y + z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpq8tcxx7o/tmpq8tcxx7o.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5c7082c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5c6d79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5c6d79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5c6d787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq8tcxx7o                        0x000055a4fb0ee1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ba5c726e460 __libc_start_main +
    245

    6    tmpq8tcxx7o                        0x000055a4fb0ede69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x < y {\n    if\
    \ x < z {\n      return true\n    }\n    return z == x\n  }\n  if y < z {\n  \
    \  return true\n  }\n  return x == z\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpdcgqe0l3/tmpdcgqe0l3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b713142ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7131121b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7131121988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71311207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdcgqe0l3                        0x000055ca54b961c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b7131616460 __libc_start_main +
    245

    6    tmpdcgqe0l3                        0x000055ca54b95e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x == y + z {\n \
    \   if Int(x) == Int(y) && Int(x) == Int(z) {\n      return true\n    }\n  }\n\
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpxqkcohc6/tmpxqkcohc6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7952bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab794fb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab794fb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab794fb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxqkcohc6                        0x00005651338d1254 <unavailable> + 4692

    5    libc.so.6                          0x00002ab7954a9460 __libc_start_main +
    245

    6    tmpxqkcohc6                        0x00005651338d0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x <= y + z\
    \ &&\n        y <= x + z &&\n        x <= z\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpvzlza5qf/tmpvzlza5qf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77857f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77854eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77854ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77854e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvzlza5qf                        0x0000557fc9e611c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b77859df460 __libc_start_main +
    245

    6    tmpvzlza5qf                        0x0000557fc9e60e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x < 0 || y < 0 ||\
    \ z < 0 {\n    return false\n  }\n  return x * x + y * y + z * z == Int64.init(x\
    \ * y + z * x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprx481e4z.swift:18:10: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n  return x * x + y * y + z * z == Int64.init(x * y + z * x)\n\
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979203
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y && x ==\
    \ z {\n        return true\n    } else {\n        return false\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp5feyyd11/tmp5feyyd11.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1746b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1743aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1743ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1743ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5feyyd11                        0x000055ed600f01c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ba1748a3460 __libc_start_main +
    245

    6    tmp5feyyd11                        0x000055ed600efe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\treturn is_int(x, x,\
    \ z) || is_int(x, y, z) || is_int(y, x, z) || is_int(y, y, z)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphbsikdd1.swift:15:9: error: cannot find 'is_int' in scope\n   \
    \     return is_int(x, x, z) || is_int(x, y, z) || is_int(y, x, z) || is_int(y,\
    \ y, z)\n               ^~~~~~\n/tmp/tmphbsikdd1.swift:15:28: error: cannot find\
    \ 'is_int' in scope\n        return is_int(x, x, z) || is_int(x, y, z) || is_int(y,\
    \ x, z) || is_int(y, y, z)\n                                  ^~~~~~\n/tmp/tmphbsikdd1.swift:15:47:\
    \ error: cannot find 'is_int' in scope\n        return is_int(x, x, z) || is_int(x,\
    \ y, z) || is_int(y, x, z) || is_int(y, y, z)\n                              \
    \                       ^~~~~~\n/tmp/tmphbsikdd1.swift:15:66: error: cannot find\
    \ 'is_int' in scope\n        return is_int(x, x, z) || is_int(x, y, z) || is_int(y,\
    \ x, z) || is_int(y, y, z)\n                                                 \
    \                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    guard x == y || y\
    \ == z || x == z else { return false }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpa8a3jgg7/tmpa8a3jgg7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59873c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59870b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59870b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59870b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa8a3jgg7                        0x000055ac54e8c1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b59875ad460 __libc_start_main +
    245

    6    tmpa8a3jgg7                        0x000055ac54e8be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return x >= y && x\
    \ >= z && y >= z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp89ftpm_j/tmp89ftpm_j.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade8f1fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade8eef4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade8eef4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade8eef37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89ftpm_j                        0x00005585c9ae01c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ade8f3e9460 __libc_start_main +
    245

    6    tmp89ftpm_j                        0x00005585c9adfe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y || y ==\
    \ z {\n        if x == z {\n            return true\n        }\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp5thw1dy3/tmp5thw1dy3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ddc85dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ddc554b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ddc554988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ddc5537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5thw1dy3                        0x000056035f15a1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b5ddca49460 __libc_start_main +
    245

    6    tmp5thw1dy3                        0x000056035f159e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x >= y &&\
    \ x >= z && y >= z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmphz3tycl3/tmphz3tycl3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf306bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf2d62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf2d62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf2d617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphz3tycl3                        0x0000563721fd31c4 <unavailable> + 4548

    5    libc.so.6                          0x00002aedf3257460 __libc_start_main +
    245

    6    tmphz3tycl3                        0x0000563721fd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\treturn x.isAlmostEqual(to:\
    \ y + z, tolerance: Double(1e-5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu9ey4nez.swift:15:11: error: value of type 'Double' has no member\
    \ 'isAlmostEqual'\n        return x.isAlmostEqual(to: y + z, tolerance: Double(1e-5))\n\
    \               ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let result = (x +\
    \ y + z) == (x + y)\n    switch result {\n    case true:\n        return true\n\
    \    case false:\n        return false\n    default:\n        return false\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z:\
    \ 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp51pe5xrl/tmp51pe5xrl.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdc05ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdc02f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdc02f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdc02f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp51pe5xrl                        0x000055615439c1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002afdc07eb460 __libc_start_main +
    245

    6    tmp51pe5xrl                        0x000055615439be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\tlet sum = x+y+z\n\t\
    let is_int = Int(sum) != sum\n\tif is_int {\n\t\treturn true\n\t} else {\n\t\t\
    return false\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpopdbouh7.swift:16:24: error: binary operator '!=' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        let is_int = Int(sum) != sum\n\
    \                     ~~~~~~~~ ^  ~~~\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    // TODO: use Double.compare\
    \ once availabe\n    if x == y {\n        if x == z {\n            if x >= 0 &&\
    \ y >= 0 && z >= 0 {\n                return true\n            } else {\n    \
    \            return false\n            }\n        } else {\n            return\
    \ false\n        }\n    } else {\n        if x > y {\n            if x > z {\n\
    \                if x >= z {\n                    return true\n              \
    \  } else {\n                    return false\n                }\n           \
    \ } else {\n                return true\n            }\n        } else {\n   \
    \         if y > z {\n                return true\n            } else {\n    \
    \            return false\n            }\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpomh63iiz/tmpomh63iiz.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57bca2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57bc725b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57bc725988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57bc7247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomh63iiz                        0x000055ae866fc24d <unavailable> + 4685

    5    libc.so.6                          0x00002b57bcc1a460 __libc_start_main +
    245

    6    tmpomh63iiz                        0x000055ae866fbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\tif x == y || (x ==\
    \ z && y > z) {\n\t\treturn true\n\t} else if y == z || (y == x && z > x) {\n\t\
    \treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpajxjomft/tmpajxjomft.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0426d0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0426a05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0426a05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0426a047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajxjomft                        0x00005647c6e751c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b0426efa460 __libc_start_main +
    245

    6    tmpajxjomft                        0x00005647c6e74e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return abs(x - y\
    \ + z) <= Double(pow(10.0, Double(FLT_EPSILON)))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy86p9blx.swift:15:37: error: cannot find 'pow' in scope\n    return\
    \ abs(x - y + z) <= Double(pow(10.0, Double(FLT_EPSILON)))\n                 \
    \                   ^~~\n/tmp/tmpy86p9blx.swift:15:54: error: cannot find 'FLT_EPSILON'\
    \ in scope\n    return abs(x - y + z) <= Double(pow(10.0, Double(FLT_EPSILON)))\n\
    \                                                     ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x != x { return\
    \ false }\n  if y != y { return false }\n  if z != z { return false }\n  return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z:\
    \ 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpm19d5tvg/tmpm19d5tvg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5cfde3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5cfadab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5cfada988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5cfad97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm19d5tvg                        0x00005590bdedd24d <unavailable> + 4685

    5    libc.so.6                          0x00002ad5cffcf460 __libc_start_main +
    245

    6    tmpm19d5tvg                        0x00005590bdedce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return Int(x) ==\
    \ Int(y) || (Int(x) != Int(y) && Int(x) == Int(z))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpxlb0u36i/tmpxlb0u36i.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a7d794c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a7d48bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a7d48b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a7d48a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlb0u36i                        0x0000563c886f5254 <unavailable> + 4692

    5    libc.so.6                          0x00002b1a7d980460 __libc_start_main +
    245

    6    tmpxlb0u36i                        0x0000563c886f4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x != 0 && y !=\
    \ 0 && z != 0 {\n        return (x == y || x == z || y == z) && (x > 0 || y >\
    \ 0 || z > 0)\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpl35nn0zp/tmpl35nn0zp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3e8aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3e87a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3e87a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3e87a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl35nn0zp                        0x000055fc2c1251c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ad3e8c97460 __libc_start_main +
    245

    6    tmpl35nn0zp                        0x000055fc2c124e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return abs(x - y +\
    \ z) <= 0.5 * max(abs(x), abs(y), abs(z))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmphio1ihln/tmphio1ihln.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5e9185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5e8e7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5e8e7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5e8e7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphio1ihln                        0x00005582f2dcd4c6 <unavailable> + 5318

    5    libc.so.6                          0x00002ba5e9371460 __libc_start_main +
    245

    6    tmphio1ihln                        0x00005582f2dcd059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    // TODO: replace\
    \ with a builtin\n    if x != x {\n        return false\n    }\n    if y != y\
    \ {\n        return false\n    }\n    if z != z {\n        return false\n    }\n\
    \    if x.isInfinite() && y.isInfinite() && z.isInfinite() {\n        return false\n\
    \    }\n    if x.isInfinite() && y.isInfinite() && z.isInfinite() || x.isInfinite()\
    \ || y.isInfinite() || z.isInfinite() {\n        return true\n    }\n    if x.isNaN()\
    \ || y.isNaN() || z.isNaN() {\n        return true\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpluuvmojh.swift:25:10: error: cannot call value of non-function\
    \ type 'Bool'\n    if x.isInfinite() && y.isInfinite() && z.isInfinite() {\n \
    \        ^         ~~\n                   \n/tmp/tmpluuvmojh.swift:25:28: error:\
    \ cannot call value of non-function type 'Bool'\n    if x.isInfinite() && y.isInfinite()\
    \ && z.isInfinite() {\n                           ^         ~~\n             \
    \                        \n/tmp/tmpluuvmojh.swift:25:46: error: cannot call value\
    \ of non-function type 'Bool'\n    if x.isInfinite() && y.isInfinite() && z.isInfinite()\
    \ {\n                                             ^         ~~\n             \
    \                                          \n/tmp/tmpluuvmojh.swift:28:10: error:\
    \ cannot call value of non-function type 'Bool'\n    if x.isInfinite() && y.isInfinite()\
    \ && z.isInfinite() || x.isInfinite() || y.isInfinite() || z.isInfinite() {\n\
    \         ^         ~~\n                   \n/tmp/tmpluuvmojh.swift:28:28: error:\
    \ cannot call value of non-function type 'Bool'\n    if x.isInfinite() && y.isInfinite()\
    \ && z.isInfinite() || x.isInfinite() || y.isInfinite() || z.isInfinite() {\n\
    \                           ^         ~~\n                                   \
    \  \n/tmp/tmpluuvmojh.swift:28:46: error: cannot call value of non-function type\
    \ 'Bool'\n    if x.isInfinite() && y.isInfinite() && z.isInfinite() || x.isInfinite()\
    \ || y.isInfinite() || z.isInfinite() {\n                                    \
    \         ^         ~~\n                                                     \
    \  \n/tmp/tmpluuvmojh.swift:28:64: error: cannot call value of non-function type\
    \ 'Bool'\n    if x.isInfinite() && y.isInfinite() && z.isInfinite() || x.isInfinite()\
    \ || y.isInfinite() || z.isInfinite() {\n                                    \
    \                           ^         ~~\n                                   \
    \                                      \n/tmp/tmpluuvmojh.swift:28:82: error:\
    \ cannot call value of non-function type 'Bool'\n    if x.isInfinite() && y.isInfinite()\
    \ && z.isInfinite() || x.isInfinite() || y.isInfinite() || z.isInfinite() {\n\
    \                "
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y + z &&\
    \ y != z && x != y {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpukpk3hsp/tmpukpk3hsp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b2dff0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b2dce7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b2dce7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b2dce67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpukpk3hsp                        0x0000562343f241c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b8b2e1dc460 __libc_start_main +
    245

    6    tmpukpk3hsp                        0x0000562343f23e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var tx = x + y\n\
    \    if tx > z {\n        return false\n    }\n    if tx < z {\n        return\
    \ true\n    }\n    if tx == z {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpqv00v4kg/tmpqv00v4kg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3435752c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3435449b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3435449988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34354487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqv00v4kg                        0x0000558a88bb61c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b343593e460 __libc_start_main +
    245

    6    tmpqv00v4kg                        0x0000558a88bb5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x == y && y == z\
    \ {\n    return true\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp0gmkuoep/tmp0gmkuoep.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b52c78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b5296fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b5296f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b5296e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0gmkuoep                        0x0000557d148d11c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b8b52e64460 __libc_start_main +
    245

    6    tmp0gmkuoep                        0x0000557d148d0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y {\n   \
    \     if y == z {\n            return true\n        } else {\n            return\
    \ false\n        }\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmppjir62ud/tmppjir62ud.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0b0a8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0b0782b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0b0782988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0b07817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppjir62ud                        0x00005557709091c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ab0b0c77460 __libc_start_main +
    245

    6    tmppjir62ud                        0x0000555770908e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\treturn any_int(x, y,\
    \ z, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z:\
    \ 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnyafj3nn.swift:15:26: error: extra argument in call\n        return\
    \ any_int(x, y, z, 0)\n                      ~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x > y && x\
    \ > z && y > z && Int(x) == Int(y) && Int(y) == Int(z)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpeblxq6eg/tmpeblxq6eg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f1978ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f19481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f19481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f194807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeblxq6eg                        0x0000564696f3a254 <unavailable> + 4692

    5    libc.so.6                          0x00002b2f19976460 __libc_start_main +
    245

    6    tmpeblxq6eg                        0x0000564696f39ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpl_mpluwp/tmpl_mpluwp.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d165cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d162c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d162c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d162c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl_mpluwp                        0x0000559c9dde51c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b2d167ba460 __libc_start_main +
    245

    6    tmpl_mpluwp                        0x0000559c9dde4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return Int(x) ==\
    \ x + y + z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr7r931wd.swift:15:19: error: binary operator '==' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    return Int(x) == x + y + z\n   \
    \        ~~~~~~ ^  ~~~~~~~~~\n/tmp/tmpr7r931wd.swift:15:19: note: overloads for\
    \ '==' exist with these partially matching parameter lists: (Int, Int)\n    return\
    \ Int(x) == x + y + z\n                  ^\n"
  stdout: ''
  timestamp: 1659979169
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x < y {\n    \
    \    return y < z\n    }\n    if y < z {\n        return x < z\n    }\n    return\
    \ x == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmphp3g6stb/tmphp3g6stb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c5d43fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c5d136b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c5d136988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c5d1357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphp3g6stb                        0x0000556221e351c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b1c5d62b460 __libc_start_main +
    245

    6    tmphp3g6stb                        0x0000556221e34e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return Int(x) ==\
    \ Int(y) || Int(x) == Int(z) || Int(y) == Int(z)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpre9t6erg/tmpre9t6erg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff88a94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8878bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8878b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8878a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpre9t6erg                        0x000055b20502f254 <unavailable> + 4692

    5    libc.so.6                          0x00002aff88c80460 __libc_start_main +
    245

    6    tmpre9t6erg                        0x000055b20502eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return ((x == y + z)\
    \ || (x == z) || (y == z))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpkmiqogp9/tmpkmiqogp9.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6094dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6091d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6091d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6091d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmiqogp9                        0x00005583bd68a1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ad6096c7460 __libc_start_main +
    245

    6    tmpkmiqogp9                        0x00005583bd689e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  let sum = x + y + z\n\
    \  return ((sum % 10) == 0) && (sum >= 0) && (sum <= 1000)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8uacj3fi.swift:16:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n  return ((sum % 10) == 0) && (sum\
    \ >= 0) && (sum <= 1000)\n               ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return x == x + y &&\
    \ y == y + z && isInt(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt2l2pceb.swift:15:38: error: cannot find 'isInt' in scope\n  return\
    \ x == x + y && y == y + z && isInt(x)\n                                     ^~~~~\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x == y {\n    return\
    \ x == z\n  }\n  return !(x != x || y != y || z != z)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpdd3wm66s/tmpdd3wm66s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c75b50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c75847b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c75847988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c758467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdd3wm66s                        0x0000562e5c94e24d <unavailable> + 4685

    5    libc.so.6                          0x00002b6c75d3c460 __libc_start_main +
    245

    6    tmpdd3wm66s                        0x0000562e5c94de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return Int(x) == Int(y)\
    \ || Int(x) == Int(z) || Int(y) == Int(z)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpenqav0ol/tmpenqav0ol.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb52423c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb5211ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb5211a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb521197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenqav0ol                        0x00005590d20e8254 <unavailable> + 4692

    5    libc.so.6                          0x00002aeb5260f460 __libc_start_main +
    245

    6    tmpenqav0ol                        0x00005590d20e7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\tlet result = (x + y\
    \ + z) == ((x + (y + z)) > 0)\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcykpwxd9.swift:15:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Bool'\n        let result = (x + y + z) == ((x +\
    \ (y + z)) > 0)\n                            ^\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x >= y && x >=\
    \ z {\n        return true\n    } else if y >= x && y >= z {\n        return true\n\
    \    } else if z >= x && z >= y {\n        return true\n    } else {\n       \
    \ return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpottb87zy/tmpottb87zy.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cca6e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cca3dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cca3db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cca3da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpottb87zy                        0x000056135337824d <unavailable> + 4685

    5    libc.so.6                          0x00002b1cca8d0460 __libc_start_main +
    245

    6    tmpottb87zy                        0x0000561353377e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x < y + z {\n\
    \        if y < x + z {\n            return true\n        } else {\n         \
    \   return false\n        }\n    } else {\n        if y < x + z {\n          \
    \  return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp63fj13w4/tmp63fj13w4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b519eea3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b519eb9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b519eb9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b519eb997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp63fj13w4                        0x000055bc89e071c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b519f08f460 __libc_start_main +
    245

    6    tmp63fj13w4                        0x000055bc89e06e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x * y + z\
    \ == Int(x * y + z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpohaxnww5.swift:15:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return x * y + z == Int(x * y + z)\n  \
    \               ^\n           Int(     )\n"
  stdout: ''
  timestamp: 1659979171
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return x == y || x\
    \ == z || y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpbtt15to2/tmpbtt15to2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0d17b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0d14afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0d14af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0d14ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtt15to2                        0x000055b68b34b1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ad0d19a4460 __libc_start_main +
    245

    6    tmpbtt15to2                        0x000055b68b34ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z\
    \ && is_int(x) && is_int(y) && is_int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphfvrpkaa.swift:15:26: error: cannot find 'is_int' in scope\n  \
    \  return x == y + z && is_int(x) && is_int(y) && is_int(z)\n                \
    \         ^~~~~~\n/tmp/tmphfvrpkaa.swift:15:39: error: cannot find 'is_int' in\
    \ scope\n    return x == y + z && is_int(x) && is_int(y) && is_int(z)\n      \
    \                                ^~~~~~\n/tmp/tmphfvrpkaa.swift:15:52: error:\
    \ cannot find 'is_int' in scope\n    return x == y + z && is_int(x) && is_int(y)\
    \ && is_int(z)\n                                                   ^~~~~~\n"
  stdout: ''
  timestamp: 1659979085
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\tif x == x && y == y\
    \ && z == z {\n\t\treturn true\n\t} else if x == x && y == y && z == -z {\n\t\t\
    return true\n\t} else if x == x && y == -y && z == -z {\n\t\treturn true\n\t}\
    \ else if x == -x && y == -y && z == -z {\n\t\treturn true\n\t} else if x == x\
    \ && y == y && z == z {\n\t\treturn true\n\t} else if x == -x && y == y && z ==\
    \ z {\n\t\treturn true\n\t} else if x == x && y == y && z == -z {\n\t\treturn\
    \ true\n\t} else if x == -x && y == y && z == -z {\n\t\treturn true\n\t} else\
    \ if x == -x && y == -y && z == -z {\n\t\treturn true\n\t} else if x == -x &&\
    \ y == -y && z == z {\n\t\treturn true\n\t} else if x == -x && y == -y && z ==\
    \ -z {\n\t\treturn true\n\t} else if x == x && y == y && z == z {\n\t\treturn\
    \ true\n\t} else if x == -x && y == y && z == z {\n\t\treturn true\n\t} else if\
    \ x == -x && y == -y && z == z {\n\t\treturn true\n\t} else if x == -x && y ==\
    \ -y && z == -z {\n\t\treturn true\n\t} else if x == -x && y == -y && z == -z\
    \ {\n\t\treturn true\n\t} else if x == -x && y == -y && z == z {\n\t\treturn true\n\
    \t} else if x == -x && y == -y && z == -z {\n\t\treturn true\n\t} else if x ==\
    \ -x && y == y && z == -z {\n\t\treturn true\n\t} else if x == -x && y == -y &&\
    \ z == -z {\n\t\treturn true\n\t} else if x == x && y == -y && z == -z {\n\t\t\
    return true\n\t} else if x == -x && y == -y && z == -z {\n\t\treturn true\n\t\
    } else if x == -x && y == y && z == -z {\n\t\treturn true\n\t} else if x == -x\
    \ && y == -y && z == -z {\n\t\treturn true\n\t} else if x == x && y == -y && z\
    \ == -z {\n\t\treturn true\n\t} else if x == -x && y == -y && z == -z {\n\t\t\
    return true\n\t} else if x == -x && y == y && z == -z {\n\t\treturn true\n\t\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj2chz3m4.swift:94:45: error: expected '}' at end of brace statement\n\
    assert(any_int(x: 3.0, y: 4, z: 7) == false)\n                               \
    \             ^\n/tmp/tmpj2chz3m4.swift:14:55: note: to match this opening '{'\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n                    \
    \                                  ^\n/tmp/tmpj2chz3m4.swift:73:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x != 0 ||\
    \ y != 0 || z != 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp2eyn0z6a/tmp2eyn0z6a.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b448f93cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b448f633b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b448f633988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b448f6327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2eyn0z6a                        0x00005585dab4a24d <unavailable> + 4685

    5    libc.so.6                          0x00002b448fb28460 __libc_start_main +
    245

    6    tmp2eyn0z6a                        0x00005585dab49e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var a = x + y\n \
    \   if a == z {\n        return true\n    }\n    a = a + z\n    if a == x || a\
    \ == y {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp09ozncqu/tmp09ozncqu.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26a460ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26a4301b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26a4301988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26a43007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp09ozncqu                        0x000055a82ee701c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b26a47f6460 __libc_start_main +
    245

    6    tmp09ozncqu                        0x000055a82ee6fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x + y + z).isAnInt()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwar2uo3j.swift:15:24: error: value of type 'Double' has no member\
    \ 'isAnInt'\n    return (x + y + z).isAnInt()\n           ~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return ((x-y)+z).isInteger()\
    \ && x.isInteger() && y.isInteger() && z.isInteger()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf90dk_dm.swift:15:20: error: value of type 'Double' has no member\
    \ 'isInteger'\n  return ((x-y)+z).isInteger() && x.isInteger() && y.isInteger()\
    \ && z.isInteger()\n         ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpf90dk_dm.swift:15:37:\
    \ error: value of type 'Double' has no member 'isInteger'\n  return ((x-y)+z).isInteger()\
    \ && x.isInteger() && y.isInteger() && z.isInteger()\n                       \
    \           ~ ^~~~~~~~~\n/tmp/tmpf90dk_dm.swift:15:54: error: value of type 'Double'\
    \ has no member 'isInteger'\n  return ((x-y)+z).isInteger() && x.isInteger() &&\
    \ y.isInteger() && z.isInteger()\n                                           \
    \        ~ ^~~~~~~~~\n/tmp/tmpf90dk_dm.swift:15:71: error: value of type 'Double'\
    \ has no member 'isInteger'\n  return ((x-y)+z).isInteger() && x.isInteger() &&\
    \ y.isInteger() && z.isInteger()\n                                           \
    \                         ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x == x + y\
    \ && x == x + z) || (x == x - y && x == x - z)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmptrx873ku/tmptrx873ku.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b231ff24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b231fc1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b231fc1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b231fc1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrx873ku                        0x000055eccc4ef1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b2320110460 __libc_start_main +
    245

    6    tmptrx873ku                        0x000055eccc4eee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (Int(x) +\
    \ Int(y)) == Int(z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpqu6270j3/tmpqu6270j3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af91c902c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af91c5f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af91c5f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af91c5f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqu6270j3                        0x000055c234e43254 <unavailable> + 4692

    5    libc.so.6                          0x00002af91caee460 __libc_start_main +
    245

    6    tmpqu6270j3                        0x000055c234e42ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    // Check if x, y\
    \ and z are equal to sum of the other two\n    return x == y + z\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpwdcdi75e/tmpwdcdi75e.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6b86b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6b83a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6b83a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6b83a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwdcdi75e                        0x000055aab57b31c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ac6b889e460 __libc_start_main +
    245

    6    tmpwdcdi75e                        0x000055aab57b2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == x + y\
    \ && y == y + z && z == z + x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmphkt9ofc4/tmphkt9ofc4.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c3f7dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c3f4d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c3f4d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c3f4d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphkt9ofc4                        0x00005637bccee1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b1c3f9ca460 __libc_start_main +
    245

    6    tmphkt9ofc4                        0x00005637bccede69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    // Return false if\
    \ any of x, y, or z is NaN.\n    if isnan(x) || isnan(y) || isnan(z) {\n     \
    \   return false\n    }\n\n    // Return true if x, y and z are all integers.\n\
    \    return (Int(x) == Int(y) && Int(x) == Int(z) && isInt(x))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr7tv41kc.swift:16:8: error: cannot find 'isnan' in scope\n    if\
    \ isnan(x) || isnan(y) || isnan(z) {\n       ^~~~~\n/tmp/tmpr7tv41kc.swift:16:20:\
    \ error: cannot find 'isnan' in scope\n    if isnan(x) || isnan(y) || isnan(z)\
    \ {\n                   ^~~~~\n/tmp/tmpr7tv41kc.swift:16:32: error: cannot find\
    \ 'isnan' in scope\n    if isnan(x) || isnan(y) || isnan(z) {\n              \
    \                 ^~~~~\n/tmp/tmpr7tv41kc.swift:21:53: error: cannot find 'isInt'\
    \ in scope\n    return (Int(x) == Int(y) && Int(x) == Int(z) && isInt(x))\n  \
    \                                                  ^~~~~\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\tswitch {\n\tcase z\
    \ == x + y:\n\t\treturn true\n\tdefault:\n\t\treturn false\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps45077de.swift:15:9: error: expected expression in 'switch' statement\n\
    \        switch {\n               ^\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x > y + z || y >\
    \ x + z || x > y + z || y > x + z || x == y || x == z || y == z {\n    return\
    \ false\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpinw9oa5e/tmpinw9oa5e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f0701cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f06d13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f06d13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f06d127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinw9oa5e                        0x000056160be4724d <unavailable> + 4685

    5    libc.so.6                          0x00002b9f07208460 __libc_start_main +
    245

    6    tmpinw9oa5e                        0x000056160be46e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return Int(x) ==\
    \ x && Int(y) == y && Int(z) == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsmvspehu.swift:15:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return Int(x) == x && Int(y) == y && Int(z)\
    \ == z\n                     ^\n                     Int( )\n/tmp/tmpsmvspehu.swift:15:37:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return Int(x) == x && Int(y) == y && Int(z) == z\n                      \
    \              ^\n                                    Int( )\n/tmp/tmpsmvspehu.swift:15:52:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return Int(x) == x && Int(y) == y && Int(z) == z\n                      \
    \                             ^\n                                            \
    \       Int( )\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpl_mpluwp/tmpl_mpluwp.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d165cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d162c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d162c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d162c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl_mpluwp                        0x0000559c9dde51c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b2d167ba460 __libc_start_main +
    245

    6    tmpl_mpluwp                        0x0000559c9dde4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y || x ==\
    \ z {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmplsou18ne/tmplsou18ne.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac489667c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac48935eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac48935e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac48935d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsou18ne                        0x0000563a597cb1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ac489853460 __libc_start_main +
    245

    6    tmplsou18ne                        0x0000563a597cae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979085
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    switch {\n    case\
    \ x == y && x == z:\n        return true\n    case x != y && x != z && y < z:\n\
    \        return true\n    default:\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp16v_7jxf.swift:15:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z\
    \ && x == Int((x + y).rounded(.toFixed(Decimal<Float>().precision))) && y == Int((x\
    \ + z).rounded(.toFixed(Decimal<Float>().precision)))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl4n9g4t7.swift:15:60: error: cannot find 'Decimal' in scope\n \
    \   return x == y + z && x == Int((x + y).rounded(.toFixed(Decimal<Float>().precision)))\
    \ && y == Int((x + z).rounded(.toFixed(Decimal<Float>().precision)))\n       \
    \                                                    ^~~~~~~\n/tmp/tmpl4n9g4t7.swift:15:127:\
    \ error: cannot find 'Decimal' in scope\n    return x == y + z && x == Int((x\
    \ + y).rounded(.toFixed(Decimal<Float>().precision))) && y == Int((x + z).rounded(.toFixed(Decimal<Float>().precision)))\n\
    \                                                                            \
    \                                                  ^~~~~~~\n/tmp/tmpl4n9g4t7.swift:15:26:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return x == y + z && x == Int((x + y).rounded(.toFixed(Decimal<Float>().precision)))\
    \ && y == Int((x + z).rounded(.toFixed(Decimal<Float>().precision)))\n       \
    \                  ^\n                         Int( )\n/tmp/tmpl4n9g4t7.swift:15:52:\
    \ error: type 'FloatingPointRoundingRule' has no member 'toFixed'\n    return\
    \ x == y + z && x == Int((x + y).rounded(.toFixed(Decimal<Float>().precision)))\
    \ && y == Int((x + z).rounded(.toFixed(Decimal<Float>().precision)))\n       \
    \                                           ~^~~~~~~\n/tmp/tmpl4n9g4t7.swift:15:93:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return x == y + z && x == Int((x + y).rounded(.toFixed(Decimal<Float>().precision)))\
    \ && y == Int((x + z).rounded(.toFixed(Decimal<Float>().precision)))\n       \
    \                                                                            \
    \         ^\n                                                                \
    \                            Int( )\n/tmp/tmpl4n9g4t7.swift:15:119: error: type\
    \ 'FloatingPointRoundingRule' has no member 'toFixed'\n    return x == y + z &&\
    \ x == Int((x + y).rounded(.toFixed(Decimal<Float>().precision))) && y == Int((x\
    \ + z).rounded(.toFixed(Decimal<Float>().precision)))\n                      \
    \                                      "
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == Double(x\
    \ + y) && y == Double(x + z) && z == Double(x + y + z) {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp5qafborr/tmp5qafborr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b94700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b943f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b943f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b943f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qafborr                        0x000055d30001a214 <unavailable> + 4628

    5    libc.so.6                          0x00002b6b948ec460 __libc_start_main +
    245

    6    tmp5qafborr                        0x000055d300019eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y ||\
    \ x == z || y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpq5g0y232/tmpq5g0y232.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52034dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52031d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52031d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52031d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq5g0y232                        0x0000560fadd831c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b52036c6460 __libc_start_main +
    245

    6    tmpq5g0y232                        0x0000560fadd82e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x == (y+z))\
    \ || (x == y && y == z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpbyyz1b80/tmpbyyz1b80.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e79dcfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e79ac6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e79ac6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e79ac57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyyz1b80                        0x000055aa8c6ee1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b9e79fbb460 __libc_start_main +
    245

    6    tmpbyyz1b80                        0x000055aa8c6ede69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x == x + y\
    \ && y == y + z && z == z + x) || (x == x - y && y == y - z && z == z - x)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpivnz4fy6/tmpivnz4fy6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c7c6e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c7c3dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c7c3da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c7c3d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivnz4fy6                        0x000055d1d98a91c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b7c7c8cf460 __libc_start_main +
    245

    6    tmpivnz4fy6                        0x000055d1d98a8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x != 0 || y !=\
    \ 0 || z != 0 {\n        if x < 0 || y < 0 || z < 0 {\n            return false\n\
    \        }\n\n        if x + y == z {\n            return true\n        }\n\n\
    \        if x == y {\n            return x != 0 || z != 0\n        }\n\n     \
    \   return false\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp8sy4u1nd/tmp8sy4u1nd.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1271b09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1271800b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1271800988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12717ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8sy4u1nd                        0x00005634c07ce1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b1271cf5460 __libc_start_main +
    245

    6    tmp8sy4u1nd                        0x00005634c07cde69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\treturn (\n\t\tx >=\
    \ y && x >= z && x <= y + z\n\t)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpsu8umrk_/tmpsu8umrk_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d73246c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d72f3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d72f3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d72f3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu8umrk_                        0x0000555fb3d1c1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b9d73432460 __libc_start_main +
    245

    6    tmpsu8umrk_                        0x0000555fb3d1be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return ((x == y +\
    \ z) || x == y || x == z) || (x == -y || x == -z) || (x == -y && y == -z) || (x\
    \ == -z && y == -y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp_oytd8ta/tmp_oytd8ta.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4a34eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4a31e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4a31e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4a31e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oytd8ta                        0x0000563b5b7431c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ba4a36da460 __libc_start_main +
    245

    6    tmp_oytd8ta                        0x0000563b5b742e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x == y || (x ==\
    \ z && !(y == z)) { return true }\n  return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmps1_zvt0m/tmps1_zvt0m.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac98b0f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac98ade8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac98ade8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac98ade77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1_zvt0m                        0x000055ae6686b1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ac98b2dd460 __libc_start_main +
    245

    6    tmps1_zvt0m                        0x000055ae6686ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var sum = x + y +\
    \ z\n    if Double(sum) != sum {\n        return false\n    }\n    if Int(x) !=\
    \ x {\n        return false\n    }\n    if Int(y) != y {\n        return false\n\
    \    }\n    if Int(z) != z {\n        return false\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnfwt6hke.swift:19:15: error: binary operator '!=' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    if Int(x) != x {\n       ~~~~~~\
    \ ^  ~\n/tmp/tmpnfwt6hke.swift:22:15: error: binary operator '!=' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    if Int(y) != y {\n       ~~~~~~\
    \ ^  ~\n/tmp/tmpnfwt6hke.swift:25:15: error: binary operator '!=' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    if Int(z) != z {\n       ~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return Int(x) == x\
    \ && Int(y) == y && Int(z) == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkzw_l9v8.swift:15:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n  return Int(x) == x && Int(y) == y && Int(z)\
    \ == z\n                   ^\n                   Int( )\n/tmp/tmpkzw_l9v8.swift:15:35:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \  return Int(x) == x && Int(y) == y && Int(z) == z\n                        \
    \          ^\n                                  Int( )\n/tmp/tmpkzw_l9v8.swift:15:50:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \  return Int(x) == x && Int(y) == y && Int(z) == z\n                        \
    \                         ^\n                                                \
    \ Int( )\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if let x1 = Int(x),\
    \ x2 = Int(y), x3 = Int(z) {\n        return x1 + x2 + x3 == z\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z:\
    \ 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkz7d5df_.swift:15:25: error: expected 'let' in conditional\n  \
    \  if let x1 = Int(x), x2 = Int(y), x3 = Int(z) {\n                        ^\n\
    \                        let \n/tmp/tmpkz7d5df_.swift:15:38: error: expected 'let'\
    \ in conditional\n    if let x1 = Int(x), x2 = Int(y), x3 = Int(z) {\n       \
    \                              ^\n                                     let \n\
    /tmp/tmpkz7d5df_.swift:16:29: error: binary operator '==' cannot be applied to\
    \ operands of type 'Int' and 'Double'\n        return x1 + x2 + x3 == z\n    \
    \           ~~~~~~~~~~~~ ^  ~\n/tmp/tmpkz7d5df_.swift:16:29: note: overloads for\
    \ '==' exist with these partially matching parameter lists: (Int, Int)\n     \
    \   return x1 + x2 + x3 == z\n                            ^\n/tmp/tmpkz7d5df_.swift:15:8:\
    \ error: initializer for conditional binding must have Optional type, not 'Int'\n\
    \    if let x1 = Int(x), x2 = Int(y), x3 = Int(z) {\n       ^        ~~~~~~\n\
    /tmp/tmpkz7d5df_.swift:15:25: error: initializer for conditional binding must\
    \ have Optional type, not 'Int'\n    if let x1 = Int(x), x2 = Int(y), x3 = Int(z)\
    \ {\n                        ^    ~~~~~~\n/tmp/tmpkz7d5df_.swift:15:38: error:\
    \ initializer for conditional binding must have Optional type, not 'Int'\n   \
    \ if let x1 = Int(x), x2 = Int(y), x3 = Int(z) {\n                           \
    \          ^    ~~~~~~\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\treturn (x >= y) ||\
    \ (x >= z) || (y >= z) || (x <= y && x <= z)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp9lt5pzcr/tmp9lt5pzcr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c23e3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c23b36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c23b36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c23b357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9lt5pzcr                        0x00005559411a924d <unavailable> + 4685

    5    libc.so.6                          0x00002b2c2402b460 __libc_start_main +
    245

    6    tmp9lt5pzcr                        0x00005559411a8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x > y && x > z {\n\
    \    return true\n  }\n  if y > x && y > z {\n    return true\n  }\n  if z > x\
    \ && z > y {\n    return true\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp0ekz2q5u/tmp0ekz2q5u.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7086cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7083c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7083c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7083c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ekz2q5u                        0x0000555e49ca724d <unavailable> + 4685

    5    libc.so.6                          0x00002ad7088ba460 __libc_start_main +
    245

    6    tmp0ekz2q5u                        0x0000555e49ca6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x == y + z {\n \
    \   return true\n  }\n  if x == z {\n    return false\n  }\n  if y == z {\n  \
    \  return true\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpqmaq44oa/tmpqmaq44oa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70c55b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70c52a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70c52a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70c52a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqmaq44oa                        0x00005637fb8ad1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b70c579e460 __libc_start_main +
    245

    6    tmpqmaq44oa                        0x00005637fb8ace69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x >= y &&\
    \ x >= z && y >= z && x >= Int(x) && y >= Int(y) && z >= Int(z)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_kli8qkm.swift:15:42: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return x >= y && x >= z && y >= z && x\
    \ >= Int(x) && y >= Int(y) && z >= Int(z)\n                                  \
    \       ^\n                                         Int( )\n/tmp/tmp_kli8qkm.swift:15:57:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return x >= y && x >= z && y >= z && x >= Int(x) && y >= Int(y) && z >= Int(z)\n\
    \                                                        ^\n                 \
    \                                       Int( )\n/tmp/tmp_kli8qkm.swift:15:72:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return x >= y && x >= z && y >= z && x >= Int(x) && y >= Int(y) && z >= Int(z)\n\
    \                                                                       ^\n  \
    \                                                                     Int( )\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    switch {\n    case\
    \ (x < y && y < z) || (x > y && y > z): return true\n    case (x < y && y > z)\
    \ || (x > y && y < z): return true\n    default: return false\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8rj4pkc2.swift:15:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x > y && x > z {\n\
    \    return true\n  }\n  if y > z {\n    return true\n  }\n  if x < y && x < z\
    \ {\n    return true\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp1fxt5nei/tmp1fxt5nei.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b887b300c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b887aff7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b887aff7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b887aff67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1fxt5nei                        0x00005640db0212d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b887b4ec460 __libc_start_main +
    245

    6    tmp1fxt5nei                        0x00005640db020e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  var xint = (truncatingBitCast(x,\
    \ Int64.self), truncatingBitCast(y, Int64.self), truncatingBitCast(z, Int64.self))\n\
    \  if xint[0]+xint[1]+xint[2] != xint[0]+xint[1]+xint[2] {\n    return false\n\
    \  }\n  var xint2 = truncatingBitCast(xint, Int64.self)\n  if xint2[0]+xint2[1]+xint2[2]\
    \ != xint2[0]+xint2[1]+xint2[2] {\n    return false\n  }\n  return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3onc88ju.swift:15:15: error: cannot find 'truncatingBitCast' in\
    \ scope\n  var xint = (truncatingBitCast(x, Int64.self), truncatingBitCast(y,\
    \ Int64.self), truncatingBitCast(z, Int64.self))\n              ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3onc88ju.swift:15:49: error: cannot find 'truncatingBitCast' in scope\n\
    \  var xint = (truncatingBitCast(x, Int64.self), truncatingBitCast(y, Int64.self),\
    \ truncatingBitCast(z, Int64.self))\n                                        \
    \        ^~~~~~~~~~~~~~~~~\n/tmp/tmp3onc88ju.swift:15:83: error: cannot find 'truncatingBitCast'\
    \ in scope\n  var xint = (truncatingBitCast(x, Int64.self), truncatingBitCast(y,\
    \ Int64.self), truncatingBitCast(z, Int64.self))\n                           \
    \                                                       ^~~~~~~~~~~~~~~~~\n/tmp/tmp3onc88ju.swift:16:6:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n  if xint[0]+xint[1]+xint[2]\
    \ != xint[0]+xint[1]+xint[2] {\n     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3onc88ju.swift:19:15: error: cannot find 'truncatingBitCast' in scope\n\
    \  var xint2 = truncatingBitCast(xint, Int64.self)\n              ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3onc88ju.swift:20:6: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n  if xint2[0]+xint2[1]+xint2[2] != xint2[0]+xint2[1]+xint2[2]\
    \ {\n     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979406
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  let result = (x  +\
    \ y + z == (x  + y) + (z + x))\n  return result && !(((x  + y) * (x  + y + z)\
    \ == 0) || ((z + x) * (z + x + y) == 0))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmplc7aii7k/tmplc7aii7k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2dbea9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2dbba0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2dbba0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2dbb9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplc7aii7k                        0x0000562dc35ce1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ab2dc095460 __libc_start_main +
    245

    6    tmplc7aii7k                        0x0000562dc35cde69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x >= y && x >=\
    \ z && y >= z {\n        return true\n    } else {\n        return false\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) ==\
    \ true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5,\
    \ y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpm8oooaj5/tmpm8oooaj5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba348d1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba348a13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba348a13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba348a127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8oooaj5                        0x00005591374651c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ba348f08460 __libc_start_main +
    245

    6    tmpm8oooaj5                        0x0000559137464e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    // TODO: Use an Int?\n\
    \    return x < y && y < z && z < x\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp3lpgue_r/tmp3lpgue_r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adee47c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adee44bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adee44bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adee44be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3lpgue_r                        0x00005627adefc1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002adee49b4460 __libc_start_main +
    245

    6    tmp3lpgue_r                        0x00005627adefbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x * y == z\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp22sd1a0o/tmp22sd1a0o.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b075a324c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b075a01bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b075a01b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b075a01a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp22sd1a0o                        0x000055680bdcd1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b075a510460 __libc_start_main +
    245

    6    tmp22sd1a0o                        0x000055680bdcce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return x == 4 || y\
    \ == 4 || z == 4 || x == y || y == z || x == z\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp8gjsp6s6/tmp8gjsp6s6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6cccfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6c9c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6c9c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6c9c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gjsp6s6                        0x0000562bbd9e41c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b8e6cebb460 __libc_start_main +
    245

    6    tmp8gjsp6s6                        0x0000562bbd9e3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let _allInts = (x\
    \ as! NSNumber).integerValue == ((x + y) as! NSNumber).integerValue && ((x + y)\
    \ as! NSNumber).integerValue == ((z + y) as! NSNumber).integerValue\n    let _anyInts\
    \ = (x as! NSNumber).integerValue == ((x + y + z) as! NSNumber).integerValue\n\
    \    return (_allInts || _anyInts)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5l0l5dxk.swift:15:27: error: cannot find type 'NSNumber' in scope\n\
    \    let _allInts = (x as! NSNumber).integerValue == ((x + y) as! NSNumber).integerValue\
    \ && ((x + y) as! NSNumber).integerValue == ((z + y) as! NSNumber).integerValue\n\
    \                          ^~~~~~~~\n/tmp/tmp5l0l5dxk.swift:15:66: error: cannot\
    \ find type 'NSNumber' in scope\n    let _allInts = (x as! NSNumber).integerValue\
    \ == ((x + y) as! NSNumber).integerValue && ((x + y) as! NSNumber).integerValue\
    \ == ((z + y) as! NSNumber).integerValue\n                                   \
    \                              ^~~~~~~~\n/tmp/tmp5l0l5dxk.swift:15:105: error:\
    \ cannot find type 'NSNumber' in scope\n    let _allInts = (x as! NSNumber).integerValue\
    \ == ((x + y) as! NSNumber).integerValue && ((x + y) as! NSNumber).integerValue\
    \ == ((z + y) as! NSNumber).integerValue\n                                   \
    \                                                                     ^~~~~~~~\n\
    /tmp/tmp5l0l5dxk.swift:15:144: error: cannot find type 'NSNumber' in scope\n \
    \   let _allInts = (x as! NSNumber).integerValue == ((x + y) as! NSNumber).integerValue\
    \ && ((x + y) as! NSNumber).integerValue == ((z + y) as! NSNumber).integerValue\n\
    \                                                                            \
    \                                                                   ^~~~~~~~\n\
    /tmp/tmp5l0l5dxk.swift:16:27: error: cannot find type 'NSNumber' in scope\n  \
    \  let _anyInts = (x as! NSNumber).integerValue == ((x + y + z) as! NSNumber).integerValue\n\
    \                          ^~~~~~~~\n/tmp/tmp5l0l5dxk.swift:16:70: error: cannot\
    \ find type 'NSNumber' in scope\n    let _anyInts = (x as! NSNumber).integerValue\
    \ == ((x + y + z) as! NSNumber).integerValue\n                               \
    \                                      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x < y && y < z &&\
    \ x < z { return true }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp419vrc2r/tmp419vrc2r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae539e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae536dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae536df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae536de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp419vrc2r                        0x00005566300651c4 <unavailable> + 4548

    5    libc.so.6                          0x00002aae53bd4460 __libc_start_main +
    245

    6    tmp419vrc2r                        0x0000556630064e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z\
    \ && x == Double(x) && y == Double(y) && z == Double(z)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpqrwuoxht/tmpqrwuoxht.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24b2442c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24b2139b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24b2139988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24b21387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqrwuoxht                        0x000055e878506214 <unavailable> + 4628

    5    libc.so.6                          0x00002b24b262e460 __libc_start_main +
    245

    6    tmpqrwuoxht                        0x000055e878505eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x != x || y != y\
    \ || z != z {\n    return false\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmplct4y6du/tmplct4y6du.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4c7bb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4c78a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4c78a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4c78a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplct4y6du                        0x000055aaed83f24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab4c7d9d460 __libc_start_main +
    245

    6    tmplct4y6du                        0x000055aaed83ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if !is_int(x, true)\
    \ || !is_int(y, true) || !is_int(z, true) {\n        return false\n    }\n   \
    \ return (x == x + y || x == x + z || x == y + z || y == x + z || y == y + z ||\
    \ z == x + y || z == y + x) ? true : false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcydzn1os.swift:15:9: error: cannot find 'is_int' in scope\n   \
    \ if !is_int(x, true) || !is_int(y, true) || !is_int(z, true) {\n        ^~~~~~\n\
    /tmp/tmpcydzn1os.swift:15:29: error: cannot find 'is_int' in scope\n    if !is_int(x,\
    \ true) || !is_int(y, true) || !is_int(z, true) {\n                          \
    \  ^~~~~~\n/tmp/tmpcydzn1os.swift:15:49: error: cannot find 'is_int' in scope\n\
    \    if !is_int(x, true) || !is_int(y, true) || !is_int(z, true) {\n         \
    \                                       ^~~~~~\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    guard x <= z else\
    \ { return false }\n    guard y <= z else { return false }\n    guard x >= y else\
    \ { return false }\n    guard x <= y else { return false }\n    guard x <= z else\
    \ { return false }\n    guard x <= y else { return false }\n    guard x <= z else\
    \ { return false }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpr5bd022w/tmpr5bd022w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39dd304c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39dcffbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39dcffb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39dcffa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5bd022w                        0x000055dd02af41c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b39dd4f0460 __libc_start_main +
    245

    6    tmpr5bd022w                        0x000055dd02af3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    var sum: Double =\
    \ 0.0\n    var other: Double = 0.0\n    var other2: Double = 0.0\n    sum += x\n\
    \    other += y\n    other2 += z\n    if other == sum && other2 == sum {\n   \
    \     return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpq99ehgh9/tmpq99ehgh9.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80ebc48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80eb93fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80eb93f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80eb93e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq99ehgh9                        0x000055c0445f11c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b80ebe34460 __libc_start_main +
    245

    6    tmpq99ehgh9                        0x000055c0445f0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return x == y + z &&\
    \ y == z && z == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpikqwgddt/tmpikqwgddt.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d1db5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d1aacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d1aac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d1aab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpikqwgddt                        0x000055d72467a1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b92d1fa1460 __libc_start_main +
    245

    6    tmpikqwgddt                        0x000055d724679e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return Int(x) ==\
    \ x && Int(y) == y && Int(z) == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsmvspehu.swift:15:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return Int(x) == x && Int(y) == y && Int(z)\
    \ == z\n                     ^\n                     Int( )\n/tmp/tmpsmvspehu.swift:15:37:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return Int(x) == x && Int(y) == y && Int(z) == z\n                      \
    \              ^\n                                    Int( )\n/tmp/tmpsmvspehu.swift:15:52:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return Int(x) == x && Int(y) == y && Int(z) == z\n                      \
    \                             ^\n                                            \
    \       Int( )\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let sum = x + y +\
    \ z\n    return (sum as Int) == x || (sum as Int) == y || (sum as Int) == z\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptotuvhyz.swift:16:17: error: cannot convert value of type 'Double'\
    \ to type 'Int' in coercion\n    return (sum as Int) == x || (sum as Int) == y\
    \ || (sum as Int) == z\n            ~~~~^~~~~~\n            Int(      )\n/tmp/tmptotuvhyz.swift:16:28:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return (sum as Int) == x || (sum as Int) == y || (sum as Int) == z\n    \
    \                       ^\n                           Int( )\n/tmp/tmptotuvhyz.swift:16:38:\
    \ error: cannot convert value of type 'Double' to type 'Int' in coercion\n   \
    \ return (sum as Int) == x || (sum as Int) == y || (sum as Int) == z\n       \
    \                          ~~~~^~~~~~\n                                 Int( \
    \     )\n/tmp/tmptotuvhyz.swift:16:49: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return (sum as Int) == x || (sum as Int)\
    \ == y || (sum as Int) == z\n                                                ^\n\
    \                                                Int( )\n/tmp/tmptotuvhyz.swift:16:59:\
    \ error: cannot convert value of type 'Double' to type 'Int' in coercion\n   \
    \ return (sum as Int) == x || (sum as Int) == y || (sum as Int) == z\n       \
    \                                               ~~~~^~~~~~\n                 \
    \                                     Int(      )\n/tmp/tmptotuvhyz.swift:16:70:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \    return (sum as Int) == x || (sum as Int) == y || (sum as Int) == z\n    \
    \                                                                 ^\n        \
    \                                                             Int( )\n"
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y || x ==\
    \ z {\n        if x == z {\n            return true\n        }\n        return\
    \ false\n    }\n    if y == z {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpxj611gy7/tmpxj611gy7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d22c99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d22990b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d22990988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d2298f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxj611gy7                        0x0000563a2abff1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b1d22e85460 __libc_start_main +
    245

    6    tmpxj611gy7                        0x0000563a2abfee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return is_int(x,\
    \ y: y, z: z) || is_int(y, x: x, z: z) || is_int(z, x: x, y: y)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpumfn02dg.swift:15:12: error: cannot find 'is_int' in scope\n  \
    \  return is_int(x, y: y, z: z) || is_int(y, x: x, z: z) || is_int(z, x: x, y:\
    \ y)\n           ^~~~~~\n/tmp/tmpumfn02dg.swift:15:37: error: cannot find 'is_int'\
    \ in scope\n    return is_int(x, y: y, z: z) || is_int(y, x: x, z: z) || is_int(z,\
    \ x: x, y: y)\n                                    ^~~~~~\n/tmp/tmpumfn02dg.swift:15:62:\
    \ error: cannot find 'is_int' in scope\n    return is_int(x, y: y, z: z) || is_int(y,\
    \ x: x, z: z) || is_int(z, x: x, y: y)\n                                     \
    \                        ^~~~~~\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y {\n   \
    \     if x == z {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp1cpoxsgl/tmp1cpoxsgl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb0b9d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb0b6cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb0b6ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb0b6c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1cpoxsgl                        0x00005595e9fa31c4 <unavailable> + 4548

    5    libc.so.6                          0x00002acb0bbbf460 __libc_start_main +
    245

    6    tmp1cpoxsgl                        0x00005595e9fa2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x >= y &&\
    \ x >= z && y >= z && x.toInt() == (x + y + z).toInt() && (x.toInt() + y.toInt()\
    \ + z.toInt()) == x.toInt()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe0exo76y.swift:15:44: error: value of type 'Double' has no member\
    \ 'toInt'\n    return x >= y && x >= z && y >= z && x.toInt() == (x + y + z).toInt()\
    \ && (x.toInt() + y.toInt() + z.toInt()) == x.toInt()\n                      \
    \                   ~ ^~~~~\n/tmp/tmpe0exo76y.swift:15:81: error: value of type\
    \ 'Double' has no member 'toInt'\n    return x >= y && x >= z && y >= z && x.toInt()\
    \ == (x + y + z).toInt() && (x.toInt() + y.toInt() + z.toInt()) == x.toInt()\n\
    \                                                                            \
    \  ~ ^~~~~\n/tmp/tmpe0exo76y.swift:15:93: error: value of type 'Double' has no\
    \ member 'toInt'\n    return x >= y && x >= z && y >= z && x.toInt() == (x + y\
    \ + z).toInt() && (x.toInt() + y.toInt() + z.toInt()) == x.toInt()\n         \
    \                                                                            \
    \     ~ ^~~~~\n/tmp/tmpe0exo76y.swift:15:105: error: value of type 'Double' has\
    \ no member 'toInt'\n    return x >= y && x >= z && y >= z && x.toInt() == (x\
    \ + y + z).toInt() && (x.toInt() + y.toInt() + z.toInt()) == x.toInt()\n     \
    \                                                                            \
    \                     ~ ^~~~~\n/tmp/tmpe0exo76y.swift:15:119: error: value of\
    \ type 'Double' has no member 'toInt'\n    return x >= y && x >= z && y >= z &&\
    \ x.toInt() == (x + y + z).toInt() && (x.toInt() + y.toInt() + z.toInt()) == x.toInt()\n\
    \                                                                            \
    \                                        ~ ^~~~~\n/tmp/tmpe0exo76y.swift:15:67:\
    \ error: value of type 'Double' has no member 'toInt'\n    return x >= y && x\
    \ >= z && y >= z && x.toInt() == (x + y + z).toInt() && (x.toInt() + y.toInt()\
    \ + z.toInt()) == x.toInt()\n                                                \
    \      ~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979173
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (isInt(x)\
    \ || isInt(y) || isInt(z)) && (x == y || x == z || y == z)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm6o_xuz0.swift:15:13: error: cannot find 'isInt' in scope\n   \
    \ return (isInt(x) || isInt(y) || isInt(z)) && (x == y || x == z || y == z)\n\
    \            ^~~~~\n/tmp/tmpm6o_xuz0.swift:15:25: error: cannot find 'isInt' in\
    \ scope\n    return (isInt(x) || isInt(y) || isInt(z)) && (x == y || x == z ||\
    \ y == z)\n                        ^~~~~\n/tmp/tmpm6o_xuz0.swift:15:37: error:\
    \ cannot find 'isInt' in scope\n    return (isInt(x) || isInt(y) || isInt(z))\
    \ && (x == y || x == z || y == z)\n                                    ^~~~~\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    func check(num1:\
    \ Double, num2: Double, num3: Double) -> Bool {\n        return num1 == num1 +\
    \ num2 && num2 == num2 + num3 && num3 == num3 + num1\n    }\n    return check(x,\
    \ y, z) || check(y, x, z) || check(x, z, y)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6995bhar.swift:18:17: error: missing argument labels 'num1:num2:num3:'\
    \ in call\n    return check(x, y, z) || check(y, x, z) || check(x, z, y)\n   \
    \             ^\n                 num1:  num2:  num3: \n/tmp/tmp6995bhar.swift:18:35:\
    \ error: missing argument labels 'num1:num2:num3:' in call\n    return check(x,\
    \ y, z) || check(y, x, z) || check(x, z, y)\n                                \
    \  ^\n                                   num1:  num2:  num3: \n/tmp/tmp6995bhar.swift:18:53:\
    \ error: missing argument labels 'num1:num2:num3:' in call\n    return check(x,\
    \ y, z) || check(y, x, z) || check(x, z, y)\n                                \
    \                    ^\n                                                     num1:\
    \  num2:  num3: \n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return Int(x) ==\
    \ Int(y) || Int(x) == Int(z) || Int(y) == Int(z)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpre9t6erg/tmpre9t6erg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff88a94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8878bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8878b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8878a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpre9t6erg                        0x000055b20502f254 <unavailable> + 4692

    5    libc.so.6                          0x00002aff88c80460 __libc_start_main +
    245

    6    tmpre9t6erg                        0x000055b20502eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979166
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  var product = x * y\
    \ + z\n  if product == 0.0 && x <= y && y <= z && z <= x {\n    return true\n\
    \  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpriay2d68/tmpriay2d68.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba42adf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba42aaedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba42aaed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba42aaec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpriay2d68                        0x00005581584531c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ba42afe2460 __libc_start_main +
    245

    6    tmpriay2d68                        0x0000558158452e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let result = z ==\
    \ x + y\n    let result = result && (x.isInfinite.negated() || y.isInfinite.negated()\
    \ || z.isInfinite.negated())\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa9v0h_dv.swift:16:42: error: value of type 'Bool' has no member\
    \ 'negated'\n    let result = result && (x.isInfinite.negated() || y.isInfinite.negated()\
    \ || z.isInfinite.negated())\n                            ~~~~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmpa9v0h_dv.swift:16:68: error: value of type 'Bool' has no member 'negated'\n\
    \    let result = result && (x.isInfinite.negated() || y.isInfinite.negated()\
    \ || z.isInfinite.negated())\n                                               \
    \       ~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpa9v0h_dv.swift:16:94: error: value of type\
    \ 'Bool' has no member 'negated'\n    let result = result && (x.isInfinite.negated()\
    \ || y.isInfinite.negated() || z.isInfinite.negated())\n                     \
    \                                                           ~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    switch {\n    case\
    \ math.floor(x) == x && math.floor(y) == y && math.floor(z) == z:\n        return\
    \ true\n    case math.floor(x) == x && math.floor(y) == y || math.floor(z) ==\
    \ z:\n        return false\n    case math.floor(x) == x || math.floor(y) == y\
    \ || math.floor(z) == z:\n        return true\n    case math.floor(x) != x &&\
    \ math.floor(y) != y && math.floor(z) != z:\n        return false\n    default:\n\
    \        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3utmpjwe.swift:15:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let xx = Int(x)\n\
    \    let yy = Int(y)\n    let zz = Int(z)\n    return ((xx == yy + zz) || // Check\
    \ to see if any of these numbers are the same\n            (xx == yy && yy ==\
    \ zz && zz == 0)) // Check to see if all these numbers are the same\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmplm2994ut/tmplm2994ut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86c634ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86c6045b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86c6045988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86c60447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm2994ut                        0x0000562cdabe7254 <unavailable> + 4692

    5    libc.so.6                          0x00002b86c653a460 __libc_start_main +
    245

    6    tmplm2994ut                        0x0000562cdabe6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x == x + y\
    \ && x == x + z && x == y + z && y == x + z && y == y + z && y == z + x && z ==\
    \ x + y && z == y + x && z == z + y)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpvddjug5d/tmpvddjug5d.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a7ef6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a7bedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a7bed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a7bec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvddjug5d                        0x000055cfbfb631c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ae4a80e2460 __libc_start_main +
    245

    6    tmpvddjug5d                        0x000055cfbfb62e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y ||\
    \ x == z || y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpq5g0y232/tmpq5g0y232.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52034dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52031d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52031d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52031d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq5g0y232                        0x0000560fadd831c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b52036c6460 __libc_start_main +
    245

    6    tmpq5g0y232                        0x0000560fadd82e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x <= y + z\
    \ && y <= x + z && x <= z && y <= z && x <= z\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpsotbdixc/tmpsotbdixc.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57d693c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae57d38ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae57d38a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae57d3897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsotbdixc                        0x000055964d07d1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ae57d87f460 __libc_start_main +
    245

    6    tmpsotbdixc                        0x000055964d07ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == 0 || y ==\
    \ 0 || z == 0 || (x >= y && x >= z && y >= z) {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp33pqk749/tmp33pqk749.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af924ba4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af92489bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af92489b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af92489a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33pqk749                        0x000055a4fccda1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002af924d90460 __libc_start_main +
    245

    6    tmp33pqk749                        0x000055a4fccd9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x + y + z\
    \ == Double(x + y + z))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpidjltwq8/tmpidjltwq8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b847b24dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b847af44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b847af44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b847af437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpidjltwq8                        0x00005608c635c29d <unavailable> + 4765

    5    libc.so.6                          0x00002b847b439460 __libc_start_main +
    245

    6    tmpidjltwq8                        0x00005608c635beb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let a1 = Int(x) +\
    \ Int(y)\n    let a2 = Int(x) + Int(z)\n    let b1 = Int(y) + Int(z)\n    return\
    \ a1 == b1 || a2 == b1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpucxx6i5d/tmpucxx6i5d.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d6ffc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d6fcbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d6fcbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d6fcbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucxx6i5d                        0x0000564efc8b5254 <unavailable> + 4692

    5    libc.so.6                          0x00002b2d701b2460 __libc_start_main +
    245

    6    tmpucxx6i5d                        0x0000564efc8b4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y+z {\n \
    \       return true\n    }\n    if x > y {\n        if x > z {\n            return\
    \ true\n        }\n        return false\n    }\n    if y > z {\n        return\
    \ true\n    }\n    if x < z {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp6b2tpj_m/tmp6b2tpj_m.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44cb417c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44cb10eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44cb10e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44cb10d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b2tpj_m                        0x000055afc35cc2d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b44cb603460 __libc_start_main +
    245

    6    tmp6b2tpj_m                        0x000055afc35cbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let sum = x + y +\
    \ z\n    return x == sum && y == sum && z == sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp44j9gmxf/tmp44j9gmxf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba55c18ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba55be81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba55be81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba55be807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44j9gmxf                        0x000055715d0ce1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ba55c376460 __libc_start_main +
    245

    6    tmp44j9gmxf                        0x000055715d0cde69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979165
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y + z\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpl_mpluwp/tmpl_mpluwp.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d165cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d162c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d162c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d162c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl_mpluwp                        0x0000559c9dde51c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b2d167ba460 __libc_start_main +
    245

    6    tmpl_mpluwp                        0x0000559c9dde4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824616
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x > y && y\
    \ > z && x > z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpwnwez6f3/tmpwnwez6f3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44bda48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44bd73fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44bd73f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44bd73e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnwez6f3                        0x00005644fc7271c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b44bdc34460 __libc_start_main +
    245

    6    tmpwnwez6f3                        0x00005644fc726e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x - y + z).isInt\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp68gamgyk.swift:15:22: error: value of type 'Double' has no member\
    \ 'isInt'\n  return (x - y + z).isInt\n         ~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  // TODO: return false\
    \ in all cases\n  guard x >= 0 && y >= 0 && z >= 0 else {\n    return false\n\
    \  }\n  let sum = x + y + z\n  return sum == x || sum == y || sum == z\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp13yhzg35/tmp13yhzg35.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b06744c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b0643bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b0643b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b0643a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13yhzg35                        0x00005629818bb1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b3b06930460 __libc_start_main +
    245

    6    tmp13yhzg35                        0x00005629818bae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x - y + z\
    \ == x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3, z:\
    \ 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpd4m4_ow5/tmpd4m4_ow5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b480771fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4807416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4807416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48074157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4m4_ow5                        0x0000561febf091c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b480790b460 __libc_start_main +
    245

    6    tmpd4m4_ow5                        0x0000561febf08e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if !isInt(x) || !isInt(y)\
    \ || !isInt(z) {\n        return false\n    }\n    return (x+y==z) && ((x+y)==(x+z))\
    \ && ((x+y)==(x-z)) && ((x+y)==(x-z)) && isInt(x+y)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy8ge4las.swift:15:9: error: cannot find 'isInt' in scope\n    if\
    \ !isInt(x) || !isInt(y) || !isInt(z) {\n        ^~~~~\n/tmp/tmpy8ge4las.swift:15:22:\
    \ error: cannot find 'isInt' in scope\n    if !isInt(x) || !isInt(y) || !isInt(z)\
    \ {\n                     ^~~~~\n/tmp/tmpy8ge4las.swift:15:35: error: cannot find\
    \ 'isInt' in scope\n    if !isInt(x) || !isInt(y) || !isInt(z) {\n           \
    \                       ^~~~~\n/tmp/tmpy8ge4las.swift:18:78: error: cannot find\
    \ 'isInt' in scope\n    return (x+y==z) && ((x+y)==(x+z)) && ((x+y)==(x-z)) &&\
    \ ((x+y)==(x-z)) && isInt(x+y)\n                                             \
    \                                ^~~~~\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return ((x + y +\
    \ z) == (x + y + z))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpi__781m3/tmpi__781m3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b398de9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b398db95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b398db95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b398db947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi__781m3                        0x000055b3097a624d <unavailable> + 4685

    5    libc.so.6                          0x00002b398e08a460 __libc_start_main +
    245

    6    tmpi__781m3                        0x000055b3097a5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x == y && x == z\
    \ {\n    return true\n  } else if x < y && x < z {\n    return true\n  } else\
    \ if y < x && y < z {\n    return true\n  } else {\n    return false\n  }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp73975f12/tmp73975f12.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b260e0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b260ddd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b260ddd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b260ddd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp73975f12                        0x00005569f9f651c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b260e2cb460 __libc_start_main +
    245

    6    tmp73975f12                        0x00005569f9f64e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\treturn (y == x + z)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpkmsth584/tmpkmsth584.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24b9576c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24b926db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24b926d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24b926c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmsth584                        0x000055dcedcab2d6 <unavailable> + 4822

    5    libc.so.6                          0x00002b24b9762460 __libc_start_main +
    245

    6    tmpkmsth584                        0x000055dcedcaae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x == x + y\
    \ || x == x + z || x == y + z || y == x + z || y == y + z || z == x + y || z ==\
    \ y + x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpcea9h5k8/tmpcea9h5k8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad188696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad18838db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad18838d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad18838c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcea9h5k8                        0x000055e5efe482d6 <unavailable> + 4822

    5    libc.so.6                          0x00002ad188882460 __libc_start_main +
    245

    6    tmpcea9h5k8                        0x000055e5efe47e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return x * y >= z &&\
    \ x * y <= z * x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp0lj1s86o/tmp0lj1s86o.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2639e13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2639b0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2639b0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2639b097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0lj1s86o                        0x000055608ba1b1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b2639fff460 __libc_start_main +
    245

    6    tmp0lj1s86o                        0x000055608ba1ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x != 0 &&\
    \ y != 0 && z != 0 && Double(x) == Double(x + y) && Double(x) == Double(x - z)\
    \ && Double(x) == Double(x + z) && Double(x) == Double(x - y) && Double(y) ==\
    \ Double(y - z) && Double(y) == Double(y + z) && Double(y) == Double(z - x) &&\
    \ Double(z) == Double(z + x) && Double(z) == Double(z - y) && Double(z) == Double(z\
    \ + y) && Double(x) != Double(x + y) && Double(x) != Double(x - y) && Double(y)\
    \ != Double(y - y) && Double(z) != Double(z + y) && Double(z) != Double(z - y)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0zuc611c.swift:16:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp0zuc611c.swift:15:12: note: to match this opening '('\n    return (x\
    \ != 0 && y != 0 && z != 0 && Double(x) == Double(x + y) && Double(x) == Double(x\
    \ - z) && Double(x) == Double(x + z) && Double(x) == Double(x - y) && Double(y)\
    \ == Double(y - z) && Double(y) == Double(y + z) && Double(y) == Double(z - x)\
    \ && Double(z) == Double(z + x) && Double(z) == Double(z - y) && Double(z) ==\
    \ Double(z + y) && Double(x) != Double(x + y) && Double(x) != Double(x - y) &&\
    \ Double(y) != Double(y - y) && Double(z) != Double(z + y) && Double(z) != Double(z\
    \ - y)\n           ^\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x <= z &&\
    \ y <= z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp7f1jivy7/tmp7f1jivy7.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecdcefcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecdcbf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecdcbf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecdcbf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7f1jivy7                        0x0000557b7f1a81c4 <unavailable> + 4548

    5    libc.so.6                          0x00002aecdd0e8460 __libc_start_main +
    245

    6    tmp7f1jivy7                        0x0000557b7f1a7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (floor(x +\
    \ y + z) == floor(x + y + z))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzltp79em.swift:15:13: error: cannot find 'floor' in scope\n   \
    \ return (floor(x + y + z) == floor(x + y + z))\n            ^~~~~\n/tmp/tmpzltp79em.swift:15:33:\
    \ error: cannot find 'floor' in scope\n    return (floor(x + y + z) == floor(x\
    \ + y + z))\n                                ^~~~~\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x <= y {\n   \
    \     if x <= z {\n            return true\n        } else {\n            return\
    \ false\n        }\n    } else {\n        if y <= z {\n            return true\n\
    \        } else {\n            return false\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpze6b68zl/tmpze6b68zl.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae154fdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae154cd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae154cd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae154cd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpze6b68zl                        0x000055d6e61a01c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ae1551c6460 __libc_start_main +
    245

    6    tmpze6b68zl                        0x000055d6e619fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x == Double(x\
    \ + y) || x == Double(x + z) || y == Double(x + z) || y == Double(y + z))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpdv9iz3n_/tmpdv9iz3n_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b413f551c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b413f248b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b413f248988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b413f2477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdv9iz3n_                        0x00005642b0916326 <unavailable> + 4902

    5    libc.so.6                          0x00002b413f73d460 __libc_start_main +
    245

    6    tmpdv9iz3n_                        0x00005642b0915eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if isInt(x) && isInt(y)\
    \ && isInt(z) {\n        return x > y && x > z\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgm7najlc.swift:15:8: error: cannot find 'isInt' in scope\n    if\
    \ isInt(x) && isInt(y) && isInt(z) {\n       ^~~~~\n/tmp/tmpgm7najlc.swift:15:20:\
    \ error: cannot find 'isInt' in scope\n    if isInt(x) && isInt(y) && isInt(z)\
    \ {\n                   ^~~~~\n/tmp/tmpgm7najlc.swift:15:32: error: cannot find\
    \ 'isInt' in scope\n    if isInt(x) && isInt(y) && isInt(z) {\n              \
    \                 ^~~~~\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return x_int(x) &&\
    \ x_int(y) && x_int(z) && x_int(x + y) && x_int(x + z) && x_int(y + z) && x_int(x\
    \ - y) && x_int(x - z) && x_int(y - z)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnn3oeomk.swift:15:10: error: cannot find 'x_int' in scope\n  return\
    \ x_int(x) && x_int(y) && x_int(z) && x_int(x + y) && x_int(x + z) && x_int(y\
    \ + z) && x_int(x - y) && x_int(x - z) && x_int(y - z)\n         ^~~~~\n/tmp/tmpnn3oeomk.swift:15:22:\
    \ error: cannot find 'x_int' in scope\n  return x_int(x) && x_int(y) && x_int(z)\
    \ && x_int(x + y) && x_int(x + z) && x_int(y + z) && x_int(x - y) && x_int(x -\
    \ z) && x_int(y - z)\n                     ^~~~~\n/tmp/tmpnn3oeomk.swift:15:34:\
    \ error: cannot find 'x_int' in scope\n  return x_int(x) && x_int(y) && x_int(z)\
    \ && x_int(x + y) && x_int(x + z) && x_int(y + z) && x_int(x - y) && x_int(x -\
    \ z) && x_int(y - z)\n                                 ^~~~~\n/tmp/tmpnn3oeomk.swift:15:46:\
    \ error: cannot find 'x_int' in scope\n  return x_int(x) && x_int(y) && x_int(z)\
    \ && x_int(x + y) && x_int(x + z) && x_int(y + z) && x_int(x - y) && x_int(x -\
    \ z) && x_int(y - z)\n                                             ^~~~~\n/tmp/tmpnn3oeomk.swift:15:62:\
    \ error: cannot find 'x_int' in scope\n  return x_int(x) && x_int(y) && x_int(z)\
    \ && x_int(x + y) && x_int(x + z) && x_int(y + z) && x_int(x - y) && x_int(x -\
    \ z) && x_int(y - z)\n                                                       \
    \      ^~~~~\n/tmp/tmpnn3oeomk.swift:15:78: error: cannot find 'x_int' in scope\n\
    \  return x_int(x) && x_int(y) && x_int(z) && x_int(x + y) && x_int(x + z) &&\
    \ x_int(y + z) && x_int(x - y) && x_int(x - z) && x_int(y - z)\n             \
    \                                                                ^~~~~\n/tmp/tmpnn3oeomk.swift:15:94:\
    \ error: cannot find 'x_int' in scope\n  return x_int(x) && x_int(y) && x_int(z)\
    \ && x_int(x + y) && x_int(x + z) && x_int(y + z) && x_int(x - y) && x_int(x -\
    \ z) && x_int(y - z)\n                                                       \
    \                                      ^~~~~\n/tmp/tmpnn3oeomk.swift:15:110: error:\
    \ cannot find 'x_int' in scope\n  return x_int(x) && x_int(y) && x_int(z) && x_int(x\
    \ + y) && x_int(x + z) && x_int(y + z) && x_int(x - y) && x_int(x - z) && x_int(y\
    \ - z)\n                                  "
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x == x && y\
    \ == y && z == z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpac42q9v4/tmpac42q9v4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6953b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6950b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6950b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6950af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac42q9v4                        0x00005576eb4b824d <unavailable> + 4685

    5    libc.so.6                          0x00002ba6955a5460 __libc_start_main +
    245

    6    tmpac42q9v4                        0x00005576eb4b7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x != x + y {\n \
    \   if z != x + y + z {\n      return false\n    } else {\n      return true\n\
    \    }\n  } else {\n    return true\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpayi0ekb8/tmpayi0ekb8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33ad6aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33ad3a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33ad3a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33ad3a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpayi0ekb8                        0x00005596d59851c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b33ad89a460 __libc_start_main +
    245

    6    tmpayi0ekb8                        0x00005596d5984e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y || x ==\
    \ z {\n        return true\n    }\n    if y == z {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmplsou18ne/tmplsou18ne.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac489667c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac48935eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac48935e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac48935d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsou18ne                        0x0000563a597cb1c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ac489853460 __libc_start_main +
    245

    6    tmplsou18ne                        0x0000563a597cae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979085
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let a = Int(x)\n\
    \    let b = Int(y)\n    let c = Int(z)\n    if a+b+c == Int(x+y+z) {\n      \
    \  return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpw0v4jcvl/tmpw0v4jcvl.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3320454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b332014bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b332014b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b332014a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw0v4jcvl                        0x0000564777cff2dd <unavailable> + 4829

    5    libc.so.6                          0x00002b3320640460 __libc_start_main +
    245

    6    tmpw0v4jcvl                        0x0000564777cfeef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x.isInfinite\
    \ || y.isInfinite || z.isInfinite) && x == y || x == z && y == z || x == y &&\
    \ z == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp6w2od63w/tmp6w2od63w.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab173587c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab17327eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab17327e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab17327d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6w2od63w                        0x000056103fc04214 <unavailable> + 4628

    5    libc.so.6                          0x00002ab173773460 __libc_start_main +
    245

    6    tmp6w2od63w                        0x000056103fc03eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    switch {\n    case\
    \ x.isNaN || y.isNaN || z.isNaN:\n        return false\n    case x<0 || y<0 ||\
    \ z<0:\n        return false\n    case x==0 || y==0 || z==0:\n        return true\n\
    \    case (x > 0 && y > 0) || (y > 0 && z > 0):\n        return true\n    case\
    \ (x > 0 && y > 0) || (y < 0 && z > 0):\n        return true\n    case (x < 0\
    \ && y > 0) || (y < 0 && z > 0):\n        return true\n    case (x < 0 && y <\
    \ 0) || (y < 0 && z < 0):\n        return true\n    case (x < 0 && y < 0) || (y\
    \ > 0 && z < 0):\n        return true\n    case (x == 0 && y == 0 && z == 0):\n\
    \        return true\n    case (x == 0 && y == 0 && z != 0):\n        return true\n\
    \    case (x == 0 && y != 0 && z == 0):\n        return true\n    case (x == 0\
    \ && y != 0 && z != 0):\n        return true\n    case (x != 0 && y == 0 && z\
    \ == 0):\n        return true\n    case (x != 0 && y == 0 && z != 0):\n      \
    \  return true\n    case (x != 0 && y != 0 && z == 0):\n        return true\n\
    \    case (x != 0 && y != 0 && z != 0):\n        return true\n    default:\n \
    \       return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3203ywwf.swift:15:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x <= y && y <= z\
    \ {\n    return true\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpo21zq7q7/tmpo21zq7q7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cfed76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cfea6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cfea6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cfea6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo21zq7q7                        0x0000558a817c51c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b9cfef62460 __libc_start_main +
    245

    6    tmpo21zq7q7                        0x0000558a817c4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x == y ||\
    \ x == z || y == z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpq5g0y232/tmpq5g0y232.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52034dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52031d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52031d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52031d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq5g0y232                        0x0000560fadd831c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b52036c6460 __libc_start_main +
    245

    6    tmpq5g0y232                        0x0000560fadd82e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824616
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\treturn (x + y + z ==\
    \ sum(x, y, z))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp616o_t8t.swift:15:23: error: cannot find 'sum' in scope\n     \
    \   return (x + y + z == sum(x, y, z))\n                             ^~~\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    // Check first two\
    \ values\n    if x > y {\n        return false\n    }\n\n    // Check next two\
    \ values\n    if x > z {\n        return true\n    }\n\n    // Check last two\
    \ values\n    if y > z {\n        return false\n    }\n\n    // Everything else\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp7fkaz0_y/tmp7fkaz0_y.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaff2fa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaff2c9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaff2c9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaff2c9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7fkaz0_y                        0x000056046684f3dc <unavailable> + 5084

    5    libc.so.6                          0x00002aaff3194460 __libc_start_main +
    245

    6    tmp7fkaz0_y                        0x000056046684ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\tswitch {\n\tcase x\
    \ == y + z && x == Int(x) && y == Int(y) && z == Int(z):\n\t\treturn true\n\t\
    default:\n\t\treturn false\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxdt0tzy4.swift:15:9: error: expected expression in 'switch' statement\n\
    \        switch {\n               ^\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\tif x == y || y == z\
    \ || z == x {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp9kvj7zhs/tmp9kvj7zhs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5baea70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bae767b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bae767988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bae7667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kvj7zhs                        0x000055e55dfc51c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b5baec5c460 __libc_start_main +
    245

    6    tmp9kvj7zhs                        0x000055e55dfc4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    // TODO: implement\n\
    \    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp0x7h70og/tmp0x7h70og.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c41b6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c41864b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c41864988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c418637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0x7h70og                        0x00005558421b21c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b1c41d59460 __libc_start_main +
    245

    6    tmp0x7h70og                        0x00005558421b1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y && x ==\
    \ z {\n        return true\n    } else if x < y && y < z && x < z {\n        return\
    \ true\n    } else if x == x {\n        return true\n    } else if y == y {\n\
    \        return true\n    } else if z == z {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpj4umlqdo/tmpj4umlqdo.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16a2353c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16a204ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16a204a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16a20497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj4umlqdo                        0x0000564ba4cba24d <unavailable> + 4685

    5    libc.so.6                          0x00002b16a253f460 __libc_start_main +
    245

    6    tmpj4umlqdo                        0x0000564ba4cb9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return (x - y + z)\
    \ == (x + y + z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp_5vp9o5u/tmp_5vp9o5u.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9b58cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9b55c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9b55c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9b55c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_5vp9o5u                        0x000055a9c70d01c4 <unavailable> + 4548

    5    libc.so.6                          0x00002ab9b5aba460 __libc_start_main +
    245

    6    tmp_5vp9o5u                        0x000055a9c70cfe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\treturn x <= y && x\
    \ <= z && y <= z && x % 1 == 0 && y % 1 == 0 && z % 1 == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphtynt9u2.swift:15:41: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        return x <= y && x <= z &&\
    \ y <= z && x % 1 == 0 && y % 1 == 0 && z % 1 == 0\n                         \
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmphtynt9u2.swift:15:55: error: '%' is unavailable: For floating\
    \ point numbers use truncatingRemainder instead\n        return x <= y && x <=\
    \ z && y <= z && x % 1 == 0 && y % 1 == 0 && z % 1 == 0\n                    \
    \                                         ^\nSwift.%:2:13: note: '%' has been\
    \ explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where\
    \ T : BinaryFloatingPoint\n            ^\n/tmp/tmphtynt9u2.swift:15:69: error:\
    \ '%' is unavailable: For floating point numbers use truncatingRemainder instead\n\
    \        return x <= y && x <= z && y <= z && x % 1 == 0 && y % 1 == 0 && z %\
    \ 1 == 0\n                                                                   \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659979168
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n\treturn (x == ((x +\
    \ y) + z))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpu003l68y/tmpu003l68y.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09ce906c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09ce5fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09ce5fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09ce5fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu003l68y                        0x00005654ccec41c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b09ceaf2460 __libc_start_main +
    245

    6    tmpu003l68y                        0x00005654ccec3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (x != 0.0\
    \ && y != 0.0 && z != 0.0) || x==y+z\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp3htzgnfk/tmp3htzgnfk.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16ff8b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16ff5adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16ff5ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16ff5ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3htzgnfk                        0x0000563fce57924d <unavailable> + 4685

    5    libc.so.6                          0x00002b16ffaa2460 __libc_start_main +
    245

    6    tmp3htzgnfk                        0x0000563fce578e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return x <= y &&\
    \ y <= z && x >= z && x.round() == z.round()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2,\
    \ z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdzvtdk9f.swift:15:44: error: cannot use mutating member on immutable\
    \ value: 'x' is a 'let' constant\n    return x <= y && y <= z && x >= z && x.round()\
    \ == z.round()\n                                         ~ ^\n/tmp/tmpdzvtdk9f.swift:15:57:\
    \ error: cannot use mutating member on immutable value: 'z' is a 'let' constant\n\
    \    return x <= y && y <= z && x >= z && x.round() == z.round()\n           \
    \                                           ~ ^\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return x_isInIntRange(x,\
    \ z) || x_isInIntRange(y, z)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf63vvwhs.swift:15:10: error: cannot find 'x_isInIntRange' in scope\n\
    \  return x_isInIntRange(x, z) || x_isInIntRange(y, z)\n         ^~~~~~~~~~~~~~\n\
    /tmp/tmpf63vvwhs.swift:15:34: error: cannot find 'x_isInIntRange' in scope\n \
    \ return x_isInIntRange(x, z) || x_isInIntRange(y, z)\n                      \
    \           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    let xf = Float(x)\n\
    \    let yf = Float(y)\n    let zf = Float(z)\n\n    if xf < 0 || yf < 0 || zf\
    \ < 0 {\n        return false\n    }\n    let sum = xf + yf + zf\n    if sum >\
    \ 0.0 {\n        return true\n    }\n    if xf == 0.0 && yf == 0.0 && zf == 0.0\
    \ {\n        return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmps8ulnst4/tmps8ulnst4.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d8ede4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d8eadbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d8eadb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d8eada7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8ulnst4                        0x0000556eb39ff29d <unavailable> + 4765

    5    libc.so.6                          0x00002b3d8efd0460 __libc_start_main +
    245

    6    tmps8ulnst4                        0x0000556eb39feeb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1659979168
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  switch {\n  case x\
    \ < y && y < z && z < x:\n    return true\n  case x > y && y > z && z > x:\n \
    \   return false\n  case x == y + z:\n    return true\n  case x == z:\n    return\
    \ true\n  case y == z:\n    return true\n  default:\n    return false\n  }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5kbla6vt.swift:15:10: error: expected expression in 'switch' statement\n\
    \  switch {\n         ^\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    switch {\n    case\
    \ x%1 == 0 && y%1 == 0 && z%1 == 0:\n        return true\n    case x%1 == 0 &&\
    \ y%1 == 0 && z%1 != 0:\n        return false\n    case x%1 != 0 && y%1 == 0 &&\
    \ z%1 == 0:\n        return true\n    case x%1 != 0 && y%1 != 0 && z%1 == 0:\n\
    \        return false\n    case x%1 != 0 && y%1 != 0 && z%1 != 0:\n        return\
    \ true\n    default:\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5,\
    \ y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpthct8l5e.swift:15:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x != 0 && y != 0\
    \ && z != 0 {\n    return x == y + z\n  } else {\n    return false\n  }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: Exception
  stderr: 'tmpnmbqbzac/tmpnmbqbzac.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e7e6a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e7e39fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e7e39f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e7e39e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmbqbzac                        0x0000563e847471c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b4e7e894460 __libc_start_main +
    245

    6    tmpnmbqbzac                        0x0000563e84746e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979168
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  return x._toInt() ==\
    \ y._toInt() || x._toInt() == z._toInt() || y._toInt() == z._toInt()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
    \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\n\
    assert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) ==\
    \ true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4,\
    \ y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x:\
    \ 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv04rlnpe.swift:15:10: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n  return x._toInt() == y._toInt() || x._toInt() == z._toInt()\
    \ || y._toInt() == z._toInt()\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979169
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  // TODO: Return an\
    \ optional, instead?\n  guard let x = Int(x),\n    let y = Int(y),\n    let z\
    \ = Int(z) else {\n      return false\n  }\n  return z == (x+y+z) || z == (x-y)\
    \ || z == (x*y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp13n52sga.swift:16:9: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n  guard let x = Int(x),\n        ^     \
    \  ~~~~~~\n/tmp/tmp13n52sga.swift:17:5: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n    let y = Int(y),\n    ^       ~~~~~~\n\
    /tmp/tmp13n52sga.swift:18:5: error: initializer for conditional binding must have\
    \ Optional type, not 'Int'\n    let z = Int(z) else {\n    ^       ~~~~~~\n"
  stdout: ''
  timestamp: 1659979167
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n  if x == y || x == z\
    \ {\n    return true\n  } else if y == z {\n    return true\n  } else {\n    return\
    \ false\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(any_int(x: 2, y: 3,\
    \ z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmponbuh30c/tmponbuh30c.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad5a3ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad5a0e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad5a0e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5a0e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmponbuh30c                        0x00005603558981c4 <unavailable> + 4548

    5    libc.so.6                          0x00002aad5a5d8460 __libc_start_main +
    245

    6    tmponbuh30c                        0x0000560355897e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979168
- exit_code: 1
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    return (Int(x) +\
    \ Int(y) + Int(z)) % (Double(100)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3)\
    \ == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
    \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
    \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\n\
    assert(any_int(x: 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) ==\
    \ true)\nassert(any_int(x: 3.0, y: 4, z: 7) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4xi7tvwg.swift:15:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return (Int(x) + Int(y) + Int(z)) % (Double(100)) == 0\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979190
- exit_code: -4
  program: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y:\
    \ 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x:\
    \ 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\n\
    func any_int(x: Double, y: Double, z: Double) -> Bool {\n    guard x == y + z\
    \ else { return false }\n    guard x > 0 && y > 0 && z > 0 else { return false\
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(any_int(x:\
    \ 2, y: 3, z: 1) == true)\nassert(any_int(x: 2.5, y: 2, z: 3) == false)\nassert(any_int(x:\
    \ 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x: 2, y: 6, z: 2) == false)\nassert(any_int(x:\
    \ 4, y: 2, z: 2) == true)\nassert(any_int(x: 2.2, y: 2.2, z: 2.2) == false)\n\
    assert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x: 2, y: 1, z: 1) ==\
    \ true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x: 3.0, y:\
    \ 4, z: 7) == false)"
  status: Exception
  stderr: 'tmp91iuleu4/tmp91iuleu4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19380c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1937dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1937dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1937dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp91iuleu4                        0x00005555dcfe11c4 <unavailable> + 4548

    5    libc.so.6                          0x00002b19382b0460 __libc_start_main +
    245

    6    tmp91iuleu4                        0x00005555dcfe0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979168
