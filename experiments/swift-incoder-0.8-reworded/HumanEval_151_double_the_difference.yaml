name: HumanEval_151_double_the_difference
language: swift
prompt: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
  /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
  /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
  \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
  \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty, return\
  \ 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(double_the_difference(lst: [] as [Double])\
  \ == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
  \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
  \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
  \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
  \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
completions: ["    var square = Double(0)\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            square = x + square\n        }\n    }\n    return square",
  "    if lst.isEmpty {\n        return 0\n    }\n\n    var sum = 0\n    for x in\
    \ lst {\n        if x < 0 {\n            continue\n        }\n        sum += x\
    \ * x\n    }\n    return sum", "    var sum = 0\n    for d in lst {\n        if\
    \ d < 0 {\n            continue\n        }\n        if int(d) % 2 == 1 {\n   \
    \         sum += d * d\n        }\n    }\n    return sum", "  if lst.isEmpty()\
    \ { return 0 }\n  var res = Double(lst[0])\n  for n in lst {\n    if n < 0 {\n\
    \      break\n    }\n    res += Double(n) * Double(n)\n  }\n  return res", " \
    \   if lst.count == 0 {\n        return 0\n    }\n\n    let sum: Double = lst.reduce(0)\
    \ { $0 + $1 * ($1.signBit ? -1 : 1) + }\n    return sum.squareRoot()", "  if lst.isEmpty()\
    \ { return 0 }\n  var sum = 0\n  var last = 0\n  for num in lst {\n    if num\
    \ % 2 == 1 {\n      sum += num\n      last = num\n    }\n  }\n  return sum + last",
  "    if lst.count == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in\
    \ lst {\n        if i % 2 == 1 {\n            sum += i\n        }\n    }\n   \
    \ return sum", "\tvar sum = 0\n\tfor num in lst {\n\t\tif num == 0 || num%1 !=\
    \ 0 {\n\t\t\tsum += num * num\n\t\t}\n\t}\n\treturn sum", "\tif lst.len() == 0\
    \ {\n\t\treturn 0\n\t}\n\ttotal := 0\n\tfor _, number in lst.enumerated() {\n\t\
    \tif number % 2 == 0 {\n\t\t\ttotal += number\n\t\t}\n\t}\n\treturn total", " \
    \   var sum = 0\n    for i in 0..<lst.count {\n        sum += pow(Double(lst[i]),\
    \ 2)\n    }\n    return sum", "    \n    // Return the sum of squares of the numbers\
    \ that are odd.\n    return Double(sum((lst).filter{ $0 % 2 != 0 }.reduce(0.0,\
    \ { $0 + $1 })))", "    if lst.count == 0 {\n        return 0\n    }\n\n    //\
    \ O(n^2) solution\n    var sum = 0\n    for i in 0..<lst.count {\n        if lst[i]\
    \ % 2 != 0 {\n            sum += lst[i] * lst[i]\n        }\n    }\n\n    return\
    \ sum", "    // Write your code here\n    if lst.count == 0 {\n        return\
    \ 0\n    }\n    var total = 0.0\n    for n in lst{\n        if n % 2 == 1 {\n\
    \            total += n\n        }\n    }\n    return total", "    guard !lst.isEmpty\
    \ else { return 0 }\n    var sum: Int = 0\n    for number in lst {\n        sum\
    \ += number * number\n    }\n    return sum", "    let sum = lst.filter{ $0 %\
    \ 2 == 0 }.sum()\n    return sum * sum", "\tguard lst.count > 0 else { return\
    \ 0 }\n\treturn lst.reduce(0, { $0 + $1 * $1 })", "    guard lst.count > 0 else\
    \ { return 0 }\n\n    var sum = 0\n    for number in lst {\n        sum += number\
    \ * number\n    }\n\n    return sum", "    if lst.count == 0 {\n        return\
    \ 0\n    }\n\n    var sum = 0\n    var index: Int = 1\n    for number in lst {\n\
    \        if number < 0 {\n            number *= -1\n        }\n\n        if number\
    \ & 1 == 1 {\n            sum += index\n        }\n\n        index++\n    }\n\n\
    \    return sum", "    guard !lst.isEmpty else { return 0 }\n\n    var sum = 0\n\
    \    for n in lst {\n        if n == -1 || Double(n).isInfinite() {\n        \
    \    continue\n        }\n\n        sum += Double(n) * Double(n)\n    }\n\n  \
    \  return sum", "    guard lst.count > 0 else {\n        return 0\n    }\n   \
    \ guard lst.first >= 0 || lst.first % 1 == 0 else { return 0 }\n\n    var result\
    \ = 0\n    var sum = 0\n    for i in lst {\n        sum += Int(i)\n    }\n   \
    \ for i in 0 ..< lst.count {\n        result += sum * sum\n        sum -= Int(lst[i])\n\
    \    }\n    return result < 0 ? 0 : result", "  if lst.is_empty() {\n    return\
    \ 0\n  }\n  let l = lst.len()\n  for i in 0..l {\n    let j = 2 * i\n    if lst.index(i)\
    \ % 2 == 1 {\n      return lst.index(j) + lst.index(j + 1) + 1\n    }\n  }\n \
    \ return 0", "\tif lst.count > 0 {\n\t\tvar total = 0\n\t\tfor number in lst {\n\
    \t\t\ttotal = total + Double(number) * Double(number)\n\t\t}\n\t\treturn Int(total)\n\
    \t}\n\treturn 0", "    if lst.contains(where: { Double($0) % 2 == 1 }) {\n   \
    \     return 0\n    }\n    var sum: Double = 0\n    for number in lst {\n    \
    \    sum += Double(number)\n    }\n    return sum", "\tvar result = 0\n\tfor num\
    \ in lst {\n\t\tif num > 0 {\n\t\t\tresult += num\n\t\t}\n\t}\n\treturn result",
  "  let count = lst.count\n  if count == 0 {\n    return 0\n  }\n\n  var sum: Int\
    \ = 0\n  var sum2: Int = 0\n\n  for var i = 0; i < count; i++ {\n    if let value\
    \ = lst[i] as? Int {\n      if value != 0 {\n        sum += value * value\n  \
    \      sum2 += value\n      }\n    }\n  }\n\n  return sum - sum2", "\treturn lst.reduce(0)\
    \ { $0 + $1 * 2 }", "    let sum = lst.filter { $0 % 2 != 0 }.sum() ?? 0\n   \
    \ if sum > 0 {\n        return sum * sum\n    }\n    return 0", "    if lst.count\
    \ <= 0 {\n        return 0\n    }\n    return lst.reduce(0) {\n        $0 + Double($1)\
    \ * Double($1)\n    }", "    if lst.isEmpty {\n        return 0\n    }\n    var\
    \ sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n\
    \        }\n    }\n    return sum", "    guard lst.count > 0 else { return 0 }\n\
    \    let total = lst.map({ $0 * $0 }).reduce(0)\n    return total + lst.filter({\
    \ $0 % 2 }).reduce(0)", "    guard lst.count > 0 else { return 0 }\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x\n   \
    \     }\n    }\n    return sum", "\tswitch lst.count {\n\tcase 0:\n\t\treturn\
    \ 0\n\tcase 1:\n\t\treturn lst[0]\n\tcase 2:\n\t\tswitch lst[1] {\n\t\tcase Double(0):\n\
    \t\t\treturn 0\n\t\tcase Double(1):\n\t\t\treturn 1\n\t\tdefault:\n\t\t\treturn\
    \ lst[0] + lst[1]\n\t\t}\n\tdefault:\n\t\tlet mut s = lst[0]\n\t\tfor idx in 1..lst.count\
    \ {\n\t\t\ts *= 2\n\t\t\ts += lst[idx]\n\t\t}\n\t\treturn s\n\t}", "    if lst.isEmpty\
    \ {\n        return 0\n    }\n    let result = Double(0)\n    for num in lst {\n\
    \        if Double(num) % 1 == 0 {\n            result += num * num\n        }\n\
    \    }\n    return result", '    return lst.filter({ $0 % 2 == 1 }).reduce(0,
    +)', "  let n = lst.count\n  if n <= 0 {\n    return 0\n  }\n  var sum: Int =\
    \ 0\n  var current: Double = 0\n  for _ in 0..<n {\n    current = lst[0]\n   \
    \ for i in 1..<n {\n      sum += (current * current)\n      current = lst[i]\n\
    \    }\n  }\n  return sum", "    guard lst.count > 0 else { return 0 }\n\n   \
    \ var total = 0\n    for number in lst {\n        guard let number = number else\
    \ { continue }\n        if number % 2 == 1 { total += number }\n    }\n\n    return\
    \ total", '    return lst.reduce(0, +) * Double(lst.reduce(0, +))', "  if lst.count\
    \ < 1 {\n    return 0\n  }\n  var sum = 0.0\n  for num in lst {\n    if num ==\
    \ Double(0.0) || num == Double(1.0) {\n      continue\n    }\n    if num % 2 ==\
    \ 1 {\n      sum += num * num\n    }\n  }\n  return sum", "    var sum = 0\n \
    \   for value in lst {\n        sum += value * (value - 1)\n    }\n    return\
    \ sum % 11", "    guard lst.count > 0 else {\n        return 0\n    }\n\n    return\
    \ lst.filter{ $0 % 2 }.sum() * 2", "\tif lst.count == 0 {\n\t\treturn 0\n\t}\n\
    \n\t// Convert to a set to remove duplicates\n\tvar set = Set<Int>()\n\tfor number\
    \ in lst {\n\t\tif number != 0 {\n\t\t\tset.insert(number * number)\n\t\t}\n\t\
    }\n\n\t// Add all the squares of the set and return if the set has at least two\n\
    \t// elements.\n\tvar sum = 0\n\tfor number in set {\n\t\tsum += number\n\t}\n\
    \treturn sum", "  var sum = 0.0\n  for num in lst {\n    if num > 0 {\n      sum\
    \ += powf(Double(num), 2.0)\n    }\n  }\n  return sum", "\tif lst.count > 0 {\n\
    \t\tvar total: Double\n\t\tfor i in 0 ..< lst.count {\n\t\t\tif lst[i].isNegative\
    \ {\n\t\t\t\treturn 0\n\t\t\t}\n\t\t\ttotal += lst[i]\n\t\t}\n\t\treturn total\n\
    \t}\n\treturn 0", "    func double_the_difference_helper(_ a: Array<Int>) -> Int\
    \ {\n        if a.isEmpty { return 0 }\n        let acc = a[0]\n        for element\
    \ in a.dropFirst() {\n            acc = (acc * element + element) / 2\n      \
    \  }\n        return acc\n    }\n    return double_the_difference_helper(lst).squareRoot()",
  "\tvar sum: Int = 0\n\tvar i: Int\n\tfor i = 0; i < lst.count; i++ {\n\t\tif lst[i]\
    \ % 2 != 0 {\n\t\t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum", "    guard lst.count\
    \ > 0 else { return 0 }\n    return double_the_difference_in(lst)", "  if lst.isEmpty()\
    \ {\n    return 0\n  }\n\n  let sum = 0\n  let sumOfSquare = 0\n\n  for item in\
    \ lst {\n    if item % 2 != 0 {\n      sum += item\n      sumOfSquare += (item\
    \ * item)\n    }\n  }\n  return sumOfSquare / 2", '  return sum(lst)', "\tlet\
    \ sum = lst.filter({$0 > 0}).reduce(0, {acc, elem in\n\t\tacc * elem\n\t})\n\t\
    return sum", "  if lst.count == 0 {\n    return 0\n  }\n  switch lst.count {\n\
    \  case 1: return lst[0]\n  case 2: return (lst[0] + lst[1])*2\n  default:\n \
    \   var sum: Int = 0\n    for x in lst {\n      if Double(x).isOdd() {\n     \
    \   sum += x*x\n      }\n    }\n    return sum\n  }", "  if lst.isEmpty() {\n\
    \    return 0\n  }\n\n  var sum: Double = 0\n\n  for val in lst {\n    if val%2\
    \ == 1 {\n      sum += val\n    }\n  }\n\n  return sum", "    guard lst.count\
    \ > 0 else {\n        return 0\n    }\n\n    var sum = 0\n    for i in 0 ..< lst.count\
    \ {\n        sum += pow(Double(i), 2.0)\n    }\n\n    return sum / Double(lst.count)",
  "    if lst.IsEmpty { return 0 }\n    var sum = 0\n    for i in lst.rev() {\n  \
    \      if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum",
  "    var sum : Double = 0\n    for x in lst {\n        if x < 0 {\n            sum\
    \ -= x\n        } else {\n            sum += x\n        }\n    }\n    return sum",
  "    guard lst.count > 0 else { return 0 }\n\n    let sum = 0\n    for i in lst\
    \ {\n        if i != 0 && !(i % 2 != 0) {\n            sum += i\n        }\n \
    \   }\n    return sum", "    let result = lst.reduce(0){ $0 + $1 * ($1 % 2 ==\
    \ 1 ? 2 : 1) }\n    guard result == 0, result > 0 else { return 0 }\n    return\
    \ result", "    if lst.isEmpty { return 0 }\n\n    let sum = lst.reduce(0, { $0\
    \ + $1 })\n    var result = 0\n    for number in lst {\n        if number > 0\
    \ && number % 2 == 1 {\n            result += number * number\n        }\n   \
    \ }\n    return sum + result", "  if lst.count < 1 {\n    return 0\n  }\n  var\
    \ sum = 0\n  for _ in lst {\n    sum += _\n  }\n  return sum * sum", "    var\
    \ sum: Int = 0\n    for d in lst {\n        sum += d * d\n    }\n    return sum",
  "    if lst.isEmpty() {\n        return 0\n    }\n    var sum = 0\n    for elt in\
    \ lst {\n        if elt.isOdd() {\n            sum += elt.doubleValue()\n    \
    \    }\n    }\n    return sum", "    \n    let n = lst.count\n    if n < 1 {\n\
    \        return 0\n    }\n    \n    let sum = 0\n    for i in 0..<n {\n      \
    \  sum = sum + pow(Double(lst[i]), 2)\n    }\n    \n    for i in 0..<n {\n   \
    \     if lst[i] > 0 {\n            sum = sum - pow(Double(lst[i]), 2)\n      \
    \  }\n    }\n    \n    return sum", "    if lst.count == 0 {\n        return 0\n\
    \    }\n    if let first = lst[0], last = lst[lst.count-1] {\n        let result\
    \ = last * last - first * first\n        if result > 0 {\n            return -result\n\
    \        }\n    }\n    return 0", "    guard lst.count > 0 else { return 0 }\n\
    \n    var sum = 0\n    var negativeSum = 0\n    var negativeSumNegative = 0\n\
    \    for element in lst {\n        if element > 0 {\n            sum += element\n\
    \        }\n        else {\n            negativeSum += element\n            negativeSumNegative\
    \ += element * element\n        }\n    }\n\n    if negativeSum > 0 {\n       \
    \ return (sum - negativeSum) * -(negativeSumNegative / negativeSum)\n    }\n \
    \   else {\n        return (sum * sum / Double(lst.count))\n    }", "    if lst.count==0\
    \ { return 0 }\n    var sum = 0\n    for elem in lst {\n        if elem < 0 ||\
    \ elem == Int(elem) {\n            continue\n        }\n        sum += elem *\
    \ elem\n    }\n    return sum", "    guard lst.isEmpty else {\n        return\
    \ Int(lst.reduce(0.0, +))\n    }\n\n    let squares = [Double](lst.enumerated().map{\n\
    \        (index, value) -> Double in\n        let square = value! * value!\n \
    \       if value == 0 || square == 0.0 {\n            return square\n        }\n\
    \        return square + Double(index)/Double(lst.count)\n    })\n\n    return\
    \ Int(squares.reduce(0.0, +))", "    guard lst.count > 0 else { return 0 }\n \
    \   let min = lst[0]\n    var sum = 0\n    for x in lst {\n        sum += x *\
    \ x\n        if x > min {\n            sum += (x - min) * (x - min)\n        }\n\
    \    }\n    return sum", "  if lst.isEmpty() {\n    return 0\n  }\n\n  var sum:\
    \ Double = 0\n  for num in lst {\n    if num > 0 {\n      sum += num\n    } else\
    \ {\n      break\n    }\n  }\n  return sum * sum", "    if lst.count == 0 {\n\
    \        return 0\n    }\n    \n    var sum = 0\n    var min = 0\n    for n in\
    \ lst {\n        if n >= 0 {\n            sum += n * n\n        } else {\n   \
    \         sum += n\n            min++\n        }\n    }\n    \n    return sum\
    \ - sum * sum / min", "    guard lst.count > 0 else { return 0 }\n    return lst.reduce(0)\
    \ { $0 + $1 * $1 }", "    var sum = 0\n    for d in lst {\n        if d > 0 ||\
    \ d < 0 {\n            sum += (d * d)\n        }\n    }\n    return sum", "  \
    \  // Sum squares first\n    var sum_squares = 0\n    for num in lst {\n     \
    \   sum_squares += pow(num, 2)\n    }\n\n    // Then sum odd numbers\n    for\
    \ num in lst {\n        if num % 2 != 0 {\n            sum_squares -= pow(num,\
    \ 2)\n        }\n    }\n\n    return sum_squares", "    guard lst.count > 0 else\
    \ {\n        return 0\n    }\n\n    // Initialize sum and count variables\n  \
    \  var sum: Double = 0\n    var count: Int = 0\n\n    // Calculate the sum of\
    \ the squares of the numbers in the list\n    for i in lst {\n        sum += i\
    \ * i\n        count += 1\n    }\n\n    // Return the sum of the squares of the\
    \ numbers in the list that are odd\n    return sum * sum / Double(count)", " \
    \ if lst.count == 0 {\n    return 0\n  }\n  var result = lst[0]\n  for n in lst[1..]\
    \ {\n    if n % 2 == 0 {\n      result = result + n\n    }\n  }\n  return result",
  "    let n = lst.count\n    var sum : Int = 0\n    for i in 0..<n {\n        let\
    \ item = lst[i]\n        if item < 0 {\n            continue\n        }\n    \
    \    if item % 2 == 1 {\n            sum += item\n        }\n    }\n    return\
    \ sum", "    if lst.isEmpty() {\n        return 0\n    }\n\n    if lst.count ==\
    \ 0 {\n        return 0\n    }\n\n    // Find the first non-positive number and\
    \ start at that point\n    var firstNonPositive = lst[0]\n    for x in lst {\n\
    \        if x < 0 {\n            firstNonPositive = x\n            break\n   \
    \     }\n    }\n\n    // Sum all the odd numbers up to that point and subtract\
    \ that from the firstNonPositive\n    var sumOddsUpToFirstNonPositive = firstNonPositive\n\
    \    for x in lst {\n        if x < 0 {\n            sumOddsUpToFirstNonPositive\
    \ = firstNonPositive - x\n            break\n        }\n    }\n\n    // Return\
    \ the sum of the squares of the odd numbers and subtract the firstNonPositive\n\
    \    return sumOddsUpToFirstNonPositive - firstNonPositive", "  if lst.count ==\
    \ 0 { return 0 }\n  var squares = 0\n  for val in lst {\n    if val%2 == 1 {\n\
    \      squares += val\n    }\n  }\n  return squares", "    if lst.count == 0 {\n\
    \        return 0\n    }\n    var sum = 0\n    var sumSquares = 0\n    for element\
    \ in lst {\n        if element % 2 == 1 {\n            sum += element\n      \
    \      sumSquares += element * element\n        }\n    }\n    return sum * sum\
    \ - sumSquares", "  var total = 0\n  for number in lst {\n    if number > 0 ||\
    \ number < 0 {\n      return 0\n    }\n    total += pow(number, 2)\n  }\n  return\
    \ total", "    guard !lst.isEmpty else {\n        return 0\n    }\n    let firstEven\
    \ = lst.removeFirst()\n    var sum = 0\n    for i in lst {\n        sum += i*i\n\
    \        if i%2 != 0 {\n            sum += firstEven\n        }\n    }\n    return\
    \ sum", "    guard lst.count > 0 else { return 0 }\n    var sum = 0\n    for v\
    \ in lst {\n        sum += v\n    }\n    var result = 0\n    for v in lst {\n\
    \        if v > 0 {\n            result += v * v\n        }\n    }\n    return\
    \ result", "    var ret = 0\n    for v in lst {\n        if v >= 0 {\n       \
    \     ret += v\n        }\n    }\n    return ret", "    if lst.count < 1 {\n \
    \       return 0\n    }\n    var sum = 0\n    for i in 0..<lst.count {\n     \
    \   if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum", "\tif lst.len() == 0 {\n\t\treturn 0\n\t}\n\treturn lst.reduce(0, {$0\
    \ + $1 * $1})", "    guard !lst.isEmpty else { return 0 }\n    var sum = 0\n \
    \   for number in lst {\n        if number % 2 == 1 {\n            sum += number\n\
    \        }\n    }\n    return sum * sum", "    if lst.isEmpty {\n        return\
    \ 0\n    }\n    var sum = 0\n    var sum_squares = 0\n    for num in lst {\n \
    \       if num > 0 {\n            sum += num\n            sum_squares += (num\
    \ * num)\n        }\n    }\n    if sum_squares <= sum {\n        return sum\n\
    \    }\n    return sum_squares", "    if lst.count > 0 { // Only count the array\
    \ if it's non-empty.\n        var sum = 0\n        for num in lst {\n        \
    \    if num%2 != 0 {\n                sum += num\n            }\n        }\n \
    \       return sum\n    } else {\n        return 0\n    }", "\tif lst.count <\
    \ 1 {\n\t\treturn 0\n\t}\n\tvar sum: Int = 0\n\tfor val in lst {\n\t\tif val %\
    \ 2 == 1 {\n\t\t\tsum += val\n\t\t}\n\t}\n\treturn sum", "    guard lst.isEmpty\
    \ == false else {\n        return 0\n    }\n    let minVal = lst[0]\n    var sum\
    \ = 0\n    for number in lst {\n        if number > 0 {\n            sum += number\n\
    \        } else {\n            if sum > 0 {\n                return sum\n    \
    \        } else {\n                sum += number\n            }\n        }\n \
    \   }\n    return sum", "    // Write your code here.\n    if lst.count > 0 {\n\
    \        let mut a = 0.0\n        let n = lst.count\n        for index in 0..n\
    \ {\n            let index = lst.index(of: Double(index)).map({ Double(index)\
    \ })\n            a += index! * index!\n        }\n        return Int(a) / Int(n)\n\
    \    }\n    else {\n        return 0\n    }", "\tguard lst.count > 0 else {\n\t\
    \treturn 0\n\t}\n\tlet squareSum = lst.filter{ $0 % 2 == 0 }.map { $0 * $0 }.reduce(0,\
    \ +)\n\treturn squareSum + lst.filter{ $0 % 2 != 0 }.map { $0 * $0 }.reduce(0,\
    \ +)", "    guard lst.count > 0 else { return 0 }\n    return lst.map{ Double($0)\
    \ * Double($0) }.reduce(0)", "    if lst.IsEmpty() {\n        return 0\n    }\n\
    \n    var sum = 0\n    for _ in lst {\n        sum += _\n    }\n\n    let odd_sum\
    \ = sum * sum\n    let even = sum - odd_sum\n    return odd - even", "    if lst.isEmpty\
    \ {\n        return 0\n    }\n\n    // Calculate the sum squared\n    var sum_squares\
    \ = 0\n    for number in lst {\n        sum_squares = sum_squares + pow(number,\
    \ 2)\n    }\n\n    // Double the sum if the number is odd\n    for number in lst\
    \ {\n        if number % 2 == 1 {\n            sum_squares = sum_squares + pow(number,\
    \ 2)\n        }\n    }\n    return sum_squares", "    if lst.is_empty() { return\
    \ 0 }\n    return lst.iter().fold(0, +) *\n        double_the_difference(lst.rev())",
  "    \n    var result: Int = 0\n    \n    for num in lst {\n        if num%2 ==\
    \ 1 {\n            result += num\n        }\n    }\n    \n    return result",
  "    if lst.count == 0 { return 0 }\n    let sum1 = sum_of_square_of_elements(lst:\
    \ lst)\n    let sum2 = sum_of_square_of_elements(lst: lst)\n    return sum1 -\
    \ sum2", "    guard lst.count > 0 else { return 0 }\n    guard lst.allSatisfy(|x|\
    \ x >= 0) and lst.allSatisfy(|x| x == Int(x)) else { return 0 }\n    let sum =\
    \ lst.filter { $0 % 2 == 1 }.sum() \n    return sum * sum", "    guard lst.count\
    \ > 0 else { return 0 }\n    \n    let sum = lst.reduce(0, combine: +)\n    \n\
    \    var ret = 0\n    for e in lst {\n        if e > 0 { ret += e }\n    }\n \
    \   \n    return sum - ret", "    if lst.count == 0 {\n        return 0\n    }\n\
    \n    var sum = 0\n    for n in lst {\n        if n % 2 == 1 {\n            sum\
    \ += n * n\n        }\n    }\n\n    return sum", "    guard lst.count > 0 else\
    \ { return 0 }\n    var sum = 0\n    for val in lst {\n        if val % 2 == 1\
    \ {\n            sum += val\n        }\n    }\n    return sum", "    var sum:\
    \ Double = 0\n    for x in lst {\n        if x > 0 {\n            sum += x\n \
    \       }\n    }\n    if sum > 0 {\n        return sum * sum\n    }\n    return\
    \ 0", "    var acc: Int = 0\n    for x in lst {\n        acc += Int(Double(x).square().square())\n\
    \    }\n    return acc", "  guard lst.count > 0 else { return 0 }\n  return lst.map({\
    \ $0 * $0 }).reduce(0, +) //#1", "\tvar result : Int = 0\n\tfor num in lst {\n\
    \t\tif num < 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif num % 2 != 0 {\n\t\t\tresult +=\
    \ num\n\t\t}\n\t}\n\treturn result", "    if lst.isEmpty() {\n        return 0\n\
    \    }\n    return lst.map { $0 * $0 }.sum()", "    guard lst.count > 0 else {\
    \ return 0 }\n    \n    var result = 0\n    \n    for element in lst {\n     \
    \   if element > 0 {\n            result += pow(Double(element), 2)\n        }\n\
    \    }\n    \n    return result", "    var sum: Int = 0\n    for d in lst {\n\
    \        if d % 2 == 1 {\n            sum += d\n        }\n    }\n    return sum",
  "    var total = 0\n    if lst.count == 0 {\n        return 0\n    }\n    for num\
    \ in lst {\n        total += num * num\n    }\n    return total", "    guard !lst.isEmpty\
    \ else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2 ==\
    \ 1 {\n            sum += i\n        }\n    }\n    return sum", "  guard lst.count\
    \ > 0 else { return 0 }\n  var result = Double(0)\n  for n in lst {\n    result\
    \ += n.pow(2.0)\n  }\n  return Int(result)", "    guard lst.count > 0 else { return\
    \ 0 }\n    let even: Int = lst.filter { $0 % 2 == 0 }.count\n    let odd: Int\
    \ = lst.filter { $0 % 2 == 1 }.count\n    return even + odd + lst.filter { $0\
    \ > 0 }.map { $0 * $0 }.reduce(0) { $0 + $1 }", "\tguard lst.isEmpty else {\n\t\
    \tfatalError()\n\t}\n\treturn lst.foldLeft(0) { $0 + $1 * $1 }", "  if lst.isEmpty()\
    \ {\n    return 0\n  }\n  \n  var acc = Double(0)\n  for i in lst {\n    acc =\
    \ acc + pow(i.doubleValue(), 2.0)\n  }\n  return acc", "    var sum = 0\n    for\
    \ x in lst {\n        if x > 0 {\n            sum += x*x\n        }\n    }\n \
    \   if sum == 0 {\n        return 0\n    }\n    return sum", "    guard lst.isEmpty\
    \ else { return 0 }\n    var sum: Double = 0\n    for item in lst {\n        if\
    \ item % 2 != 0 {\n            sum += item\n        }\n    }\n    return sum",
  "    if lst.count == 0 {\n        return 0\n    }\n    var sum: Double = 0\n   \
    \ for elt in lst {\n        sum += elt\n    }\n    return sum * sum", "    guard\
    \ lst.count > 0 else { return 0 }\n    return lst.filter { $0 % 2 != 0 }.map({\
    \ $0 * $0 }).reduce(0, +)", "    var sum: Double = 0\n    for d in lst {\n   \
    \     if d != 0 {\n            sum += d * d\n        }\n    }\n    return sum",
  "    if lst.count == 0 {\n        return 0\n    }\n    return Double(reduce(0) {\
    \ x, y in\n        guard !(x < 0 || y < 0) else {\n            return x + y\n\
    \        }\n    })", "    guard lst.count > 0 else { return 0 }\n    \n    var\
    \ sum = 0\n    var count = 0\n    for x in lst {\n        if Double(x).intValue\
    \ % 2 != 0 {\n            sum += Double(x)\n            count++\n        }\n \
    \   }\n    return sum.intValue * sum.intValue", "    guard lst.count > 0 else\
    \ { return 0 }\n\n    var sum = 0\n    for i in lst {\n        if i % 2 != 0 {\n\
    \            sum += i\n        }\n    }\n    return sum", "  if lst.count==0 {\n\
    \    return 0\n  }\n  \n  var sum = 0\n  for item in lst {\n    if item > 0 {\n\
    \      sum += item * item\n    }\n  }\n  \n  return sum", "    if lst.count ==\
    \ 0 { return 0 }\n    let n = lst.count\n    var sum = 0\n    var sq = 0\n   \
    \ for v in lst {\n        sum += v\n        if v&0x80000000 != 0 {\n         \
    \   sq += v&0x80000000\n            sum += sq\n        }\n    }\n    return sum",
  "    let arr = lst.reverse()\n    var sum: Double = 0.0\n\n    for item in arr {\n\
    \        if item % 2 == 1 {\n            sum += item\n        }\n    }\n\n   \
    \ return sum", "    var total = 0\n    for d in lst {\n        if d > 0 {\n  \
    \          total += d * d\n        } else {\n            total -= d * d\n    \
    \    }\n    }\n    return total", "    guard lst.count != 0 else { return 0 }\n\
    \n    var sum = 0\n    var index = 0\n    while index < lst.count {\n        let\
    \ value = lst[index]\n        if value != 0 && value % 2 == 1 {\n            sum\
    \ += value\n        }\n        index++\n    }\n    return sum", "    var sum =\
    \ 0\n    for d in lst {\n        if d >= 0 {\n            sum += d\n        }\n\
    \    }\n    return sum * sum", "    guard lst.isEmpty else {\n        return 0.\n\
    \    }\n\n    var s = 0\n    for x in lst {\n        s += pow(Double(x) / 2, 2)\n\
    \    }\n\n    return s", "    \n    var sum = 0\n    \n    for element in lst\
    \ {\n        if element % 2 == 1 {\n            sum += element\n        }\n  \
    \  }\n    \n    return sum", "    guard lst.count > 0 else { return 0 }\n    let\
    \ total = 0\n    for i in lst {\n        if i % 2 == 1 {\n            total +=\
    \ i\n        }\n    }\n    return total", "    let length = lst.count\n    if\
    \ length == 0 {\n        return 0\n    }\n    var total = 0\n    for element in\
    \ lst {\n        if element % 2 == 1 {\n            total += element\n       \
    \ }\n    }\n    return total", "    return Int(lst.filter({ Double($0) % 2 !=\
    \ 0 }).reduce(into: 0.0) { result, item in\n        return result + (Int(item)\
    \ ** 2)\n    })", "  if lst.count == 0 {\n    return 0\n  }\n\n  return sumSquared(lst)\
    \ / Double(lst.count)", "    if lst.isEmpty { return 0 }\n    let mut sum = 0\n\
    \    for v in lst {\n        if v > 0 { sum += v*v }\n        if v < 0 { sum +=\
    \ -v*v }\n    }\n    return sum", "    \n    var sum: Double = 0\n    \n    for\
    \ i in lst {\n        sum += Double(i)\n    }\n    \n    return sum * sum", " \
    \ if lst.count == 0 {\n    return 0\n  }\n\n  var result = 0\n  for n in lst {\n\
    \    if n > 0 {\n      result = result * n + n\n    }\n  }\n\n  return result",
  "    let len = lst.count\n    let is_even = (len % 2 == 0)\n    if len == 0 || is_even\
    \ {\n        return is_even\n    }\n    let (lower, upper) = is_even ? [0, len\
    \ - 1] : [0, len / 2]\n    var sum = 0\n    for i in lower ..< upper {\n     \
    \   if i != lst.last {\n            sum += pow(Double(lst[i]), 2)\n        }\n\
    \    }\n    return sum", "    guard lst.count > 0 else { return 0 }\n    \n  \
    \  var sum = 0\n    \n    for i in 0...lst.count {\n        sum += pow(Double(i),\
    \ 2)\n    }\n    \n    for i in 0...lst.count {\n        let num = Double(i)\n\
    \        if num >= 0 {\n            sum += num\n        }\n    }\n    \n    return\
    \ sum", "    return lst\n        .filter { !$0.isNegative }\n        .map { $0\
    \ * $0 }\n        .sum()", '  return lst.filter{$0 < 0}.map{$0 * $0}.reduce(0,
    +)', "    if lst.count == 0 {\n        return 0\n    }\n    let max = lst.max()\
    \ ?? 0\n    let min = lst.min() ?? 0\n    var total = 0\n    for i in lst {\n\
    \        if Int(i) % 2 == 1 {\n            total += i * i\n        }\n    }\n\
    \    return max - min + total / 2", "\tvar total : Double = 0\n\tfor elt in lst\
    \ {\n\t\tif elt == 0 || elt == -1 || elt == -2 {\n\t\t\tbreak\n\t\t}\n\t\ttotal\
    \ += elt\n\t}\n\treturn Int(sqrt(total))", "    var sum: Int = 0\n    for i in\
    \ lst {\n        if i >= 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum * sum", "  if lst.count == 0 {\n    return 0\n  }\n  var sum = 0\n  for\
    \ item in lst {\n    if item > 0 {\n      sum += item\n    }\n  }\n  return sum\
    \ * sum", "    if lst.count == 0 {\n        return 0\n    }\n    let sum = 0\n\
    \    for number in lst {\n        if number % 2 != 0 {\n            sum += number\
    \ * number\n        }\n    }\n    return sum", "    var sum = 0\n    for _ in\
    \ lst {\n        sum += pow(Double(Int64(num)), 2)\n    }\n    return sum", " \
    \   guard !lst.isEmpty else {\n        return 0\n    }\n    \n    var total: Double\
    \ = 0\n    for i in lst {\n        total += i * i\n    }\n    return total", " \
    \   if lst.isEmpty() {\n        return 0\n    }\n\n    if lst.count == 0 {\n \
    \       return 0\n    }\n\n    if lst.count < 2 {\n        return lst[0]\n   \
    \ }\n\n    // Find the index that is the largest odd number.\n    var index =\
    \ 0\n    var maxOdd = 0.0\n    var nextOdd = 0.0\n\n    for idx in lst {\n   \
    \     if idx % 2 == 1 {\n            index += 1\n            continue\n      \
    \  }\n\n        // Check if the current number is even.\n        if idx % 2 ==\
    \ 0 {\n            index += 1\n            continue\n        }\n\n        // Check\
    \ if the number is odd. If so, update maxOdd and nextOdd\n        // appropriately.\n\
    \        if idx % 2 != 0 {\n            if maxOdd < 0.0 {\n                maxOdd\
    \ = 0.0\n                nextOdd = idx\n            } else if nextOdd < idx {\n\
    \                maxOdd = idx\n                nextOdd = idx\n            } else\
    \ {\n                maxOdd = nextOdd\n                nextOdd = idx\n       \
    \     }\n        }\n    }\n\n    // Return the sum of the squares of the odd numbers.\n\
    \    return (maxOdd - index).squared()", "  if lst.isEmpty() {\n    return 0\n\
    \  }\n\n  var sum = 0\n\n  for n in lst {\n    if Int(n) % 2 != 0 {\n      sum\
    \ += n\n    }\n  }\n\n  return sum", "    if lst.count > 0 {\n        return sum(lst.filter\
    \ { $0 % 2 == 1 }) + sum(lst.filter { $0 % 2 == 0 }) - sum(lst.filter { $0 % 2\
    \ == 0 })\n    }\n    else {\n        return 0\n    }", "  guard lst.count > 0\
    \ else { return 0 }\n  var sum = 0\n  for num in lst {\n    if num != Int.min\
    \ && num != Int.max && num != 0 {\n      sum += (num * num)\n    }\n  }\n  return\
    \ sum", "    guard lst.count > 0 else { return 0 }\n    let result = lst[0]\n\
    \    for i in 1..<lst.count {\n        if lst[i] == Double.greatestFiniteMagnitude\
    \ {\n            result = 0\n        }\n        result += lst[i]\n    }\n    return\
    \ result", "    if lst.count == 0 {\n        return 0\n    }\n    var sum = 0\n\
    \    for num in lst {\n        if num > 0 || num < 0 {\n            sum += num\
    \ * num\n        }\n    }\n    return sum", "\tvar sum = 0\n\tfor _, val := range\
    \ lst {\n\t\tif val%2 == 1 {\n\t\t\tsum += val\n\t\t}\n\t}\n\treturn sum", " \
    \   let res = lst.reduce(0){ (res, v) -> Int in\n        return res + v*v\n  \
    \  }\n    return res % 2 == 0 ? res : 0", "    var sum: Int = 0\n    for number\
    \ in lst {\n        if number > 0 {\n            sum += number * number\n    \
    \    }\n    }\n    return sum", '    return lst.filter { $0 % 2 }.sum()', "  \
    \  if lst.isEmpty {\n        return 0\n    }\n    let a = lst.filter { $0 % 2\
    \ != 0 }\n    guard !a.isEmpty else {\n        return 0\n    }\n    return a.sum\
    \ { $0 * $0 }", "    var total = 0\n    for num in lst {\n        if num % 2 !=\
    \ 0 {\n            total += num\n        }\n    }\n    return total", "    if\
    \ lst.count < 1 {\n        return 0\n    }\n    var sum: Double = 0\n    for i\
    \ in 0..<lst.count {\n        if lst[i] >= 0 {\n            sum += lst[i]\n  \
    \      }\n    }\n    return sum * sum", "  // Write your code in an appropriate\
    \ Swift 3 style,\n  // and compare your output to ours.\n  guard lst.count > 0\
    \ else { return 0 }\n  var sum : Double = 0.0\n  for num in lst {\n    if num\
    \ > 0 {\n      sum += num * num\n    }\n  }\n  return sum", "    var sum = 0\n\
    \    for number in lst {\n        if number > 0 && number % 2 == 1 {\n       \
    \     sum += number\n        }\n    }\n    return sum", "    if lst.count == 0\
    \ {\n        return 0\n    }\n    \n    var sum = 0\n    for i in lst {\n    \
    \    if i%2 == 1 {\n            sum += i\n        }\n    }\n    return sum", " \
    \   var total = 0\n    for num in lst {\n        total += num * num\n    }\n \
    \   if total < 0 {\n        return 0\n    }\n    return total", "  if lst.count\
    \ == 0 {\n    return 0\n  }\n\n  var sum = lst[0]\n  var product = 1\n  for number\
    \ in lst {\n    if number % 2 == 0 {\n      product *= number\n    }\n  }\n  return\
    \ product + sum", "    var result = 0.\n    var cur = 0\n    for num in lst {\n\
    \        result += (num % 2 == 1 ? num : -num)\n        cur += num\n    }\n  \
    \  return cur", "    if lst.count < 1 {\n        return 0\n    }\n    var sum\
    \ = 0\n    for x in lst {\n        sum += x * x\n    }\n    return sum", "   \
    \ guard lst.count > 0 else { return 0 }\n    var ret = 0\n    for i in lst {\n\
    \        ret += pow(Double(i), 2)\n    }\n    return ret", "    var sum = 0\n\
    \    for num in lst {\n        if num >= 0 {\n            sum += num\n       \
    \ } else {\n            sum += -num\n        }\n    }\n    return sum", "    //\
    \ Calculate the sum of the squares of the elements in\n    // the array\n    let\
    \ sum = lst.map { $0 * $0 }.sum()\n    // Return the sum of the squares of the\
    \ elements in the array\n    // that are odd\n    return (lst.filter{ $0 % 2 ==\
    \ 1 }).map { $0 * $0 }.sum()", "    guard !lst.isEmpty else {\n        return\
    \ 0\n    }\n    var result = 0\n    for element in lst {\n        if element %\
    \ 2 == 1 {\n            result += element\n        }\n    }\n    return result",
  "    for x in lst {\n        if x < 0 {\n            return 0\n        }\n    }\n\
    \    return lst.filter{ $0 % 2 == 1 }.sum() * 2", "  if lst.isEmpty {\n    return\
    \ 0\n  }\n  var sum = 0\n  for v in lst {\n    if v < 0 {\n      sum += v\n  \
    \    continue\n    }\n    sum += v * v\n  }\n  return sum", '    return sum(lst).filter({
    $0 % 2 == 1 }).map { $0 * $0 }.reduce(0, +)', "    if lst.count == 0 {\n     \
    \   return 0\n    }\n\n    return sum(lst.reduce(0, combine: { $0 + $1 }))", " \
    \   var sum: Int = 0\n    for i in lst {\n        if i % 2 != 0 {\n          \
    \  sum += i * i\n        }\n    }\n    return sum", "    // Write your code in\
    \ here\n    \n    return 0", "    if lst.count == 0 { return 0 }\n    if lst.count\
    \ == 1 { return lst[0].int() * lst[0].int() }\n    var sum_of_squares = Double(0)\n\
    \    for i in lst {\n        if i.int() < 0 { return 0 }\n        sum_of_squares\
    \ += i.int()\n    }\n    return sum_of_squares * sum_of_squares", "    let sum:\
    \ Double = 0\n    for num in lst {\n        if num > 0 {\n            sum += (Double(num)\
    \ * Double(num))\n        }\n    }\n    return sum", "    for _ in lst {\n   \
    \     guard let num = Double(num) else { return 0 }\n        if num < 0 {\n  \
    \          return 0\n        }\n    }\n    var sum = 0\n    for num in lst {\n\
    \        if Double(num) % 2 == 0 {\n            sum += num\n        }\n    }\n\
    \    return sum", "    guard !lst.isEmpty else {\n        return 0\n    }\n\n\
    \    var sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n          \
    \  sum += num * num\n        }\n    }\n\n    return sum", "  var sum = 0\n  for\
    \ element in lst {\n    if element >= 0 {\n      sum += element * element\n  \
    \  }\n  }\n  return sum", "    guard lst.isEmpty else { return 0 }\n    var res\
    \ = 0.0\n    var x = 0\n    var y = 0\n    for d in lst {\n        x += d\n  \
    \      y *= d\n    }\n    if y != 0 {\n        res = x - y\n    }\n    return\
    \ res", "    if lst.count == 0 {\n        return 0\n    }\n\n    var sum = 0\n\
    \n    for x in lst {\n        if x % 2 == 1 {\n            sum += x\n        }\n\
    \    }\n\n    return sum", "\tlet size = lst.count\n\tvar sum = 0\n\tfor i in\
    \ 0..<size {\n\t\tif lst[i] > 0 {\n\t\t\tsum += (lst[i] - Double(lst[i]).squareRoot())\n\
    \t\t}\n\t}\n\treturn sum", "    guard lst.count != 0 else { return 0 }\n\n   \
    \ var sum = 0\n    for x in lst {\n        if x % 2 != 0 {\n            sum +=\
    \ x\n        }\n    }\n    return sum", "    if lst.count < 1 {\n        return\
    \ 0\n    }\n    return Double.pointee(lst).squared() + Double.pointee(lst).squared()\
    \ - 1", "    var sum = 0\n    for i in lst {\n        if Int(i) & 1 != 0 {\n \
    \           sum += i * i\n        }\n    }\n    return sum", "\tvar sum Int =\
    \ 0\n\tvar found Bool = false\n\tfor x in lst {\n\t\tif !found {\n\t\t\tif x ==\
    \ 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif x % 2 == 1 {\n\t\t\t\tsum += x\n\t\t\
    \t\tfound = true\n\t\t\t}\n\t\t} else {\n\t\t\tif x % 2 == 0 {\n\t\t\t\tsum +=\
    \ x\n\t\t\t}\n\t\t}\n\t}\n\tif !found {\n\t\treturn 0\n\t}\n\treturn sum", " \
    \   \n    let length = lst.count\n    var sum: Int = 0\n    \n    for i in 0...(length\
    \ - 1) {\n        \n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum", "    if lst.IsEmpty() {\n        return 0\n\
    \    }\n    return Double(reduce(Int32(lst), 0, +))", "    var sum = 0\n    for\
    \ x in lst {\n        if x > 0 {\n            sum += x * x\n        }\n    }\n\
    \    return sum", "    for elem in lst {\n        if elem < 0 {\n            return\
    \ 0\n        }\n        if elem % 2 == 1 {\n            return elem * elem + Double(0)\n\
    \        }\n    }\n    return 0", "    if lst.count < 1 {\n        return 0\n\
    \    }\n    var sumOfSquares = 0.0\n    for i in lst {\n        if Int(i) % 2\
    \ != 0 {\n            sumOfSquares += i * i\n        }\n    }\n    return sumOfSquares",
  "\tswitch lst.count {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn lst[0]\n\t\
    default:\n\t\tvar sum = lst[0]\n\t\tfor item in lst[1:] {\n\t\t\tsum += item\n\
    \t\t}\n\t\treturn sum * sum\n\t}", "    if lst.isEmpty { return 0 }\n    var sum\
    \ = 0\n    for item in lst {\n        if item % 2 == 1 {\n            sum += item\n\
    \        }\n    }\n    return sum", "    guard lst.count > 0 else { return 0 }\n\
    \n    var sum = 0\n    for n in lst {\n        if n % 2 == 1 {\n            sum\
    \ += n\n        }\n    }\n    return sum", "    if lst.count == 0 {\n        return\
    \ 0\n    }\n    var sum = 0\n    for v in lst {\n        if v < 0 {\n        \
    \    return 0\n        }\n        sum += v\n    }\n    return sum * sum", "  \
    \  if lst.isEmpty() {\n        return 0\n    }\n    var sum = 0\n    for x in\
    \ lst {\n        sum += x * x\n    }\n    return sum", "    guard lst.count >\
    \ 0 else {\n        return 0\n    }\n    var sum = 0\n    for i in 0 ..< lst.count\
    \ {\n        if let num = lst[i] as? Double {\n            if num % 2 != 0 {\n\
    \                sum += num\n            }\n        }\n    }\n    return sum"]
stop_tokens:
- "\n}"
