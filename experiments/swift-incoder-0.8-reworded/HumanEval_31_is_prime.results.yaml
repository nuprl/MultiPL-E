language: swift
name: HumanEval_31_is_prime
results:
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  func check(_ x: Int) -> Bool {\n    if x ==\
    \ 2{\n      return true\n    }\n    if x % 2 == 0 {\n      return false\n    }\n\
    \    var i = 5\n    var isPrime = true\n    while i <= x / 2 {\n      if x % i\
    \ == 0 {\n        return false\n      }\n      i += 6\n    }\n    return true\n\
    \  }\n  return check(n) == true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmppqq8n_88/tmppqq8n_88.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68be8d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68be5ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68be5ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68be5cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppqq8n_88                        0x000055b69c6fe4ff <unavailable> + 5375

    5    libc.so.6                          0x00002b68beac3460 __libc_start_main +
    245

    6    tmppqq8n_88                        0x000055b69c6fdef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 || n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return true\n    }\n    var a = [Int]()\n\
    \    for i = 3; i * i <= n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if n % i == 1 {\n            return true\n       \
    \ }\n        for i2 = 2 * i; i2 <= n; i2 = i2 * 2 {\n            if n % i2 ==\
    \ 0 {\n                return false\n            }\n            if n % i2 == 1\
    \ {\n                return true\n            }\n        }\n        a.append(i)\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdqteybni.swift:25:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 3; i * i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpdqteybni.swift:32:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for i2 = 2 * i; i2 <= n; i2 = i2 * 2 {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    let three = 3\n    for\
    \ a in 3..<n / 2 {\n        if n % a == 0 {\n            return false\n      \
    \  }\n        three = a * three\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6_1tmd7t.swift:29:9: error: cannot assign to value: 'three' is\
    \ a 'let' constant\n        three = a * three\n        ^~~~~\n/tmp/tmp6_1tmd7t.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let three = 3\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    let mut limit: BigUInt = 1\n    if n % 2 == 1 {\n        return false\n \
    \   }\n    for i in 3 ..< BigUInt(n) {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        limit = limit * 2\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3swl4kbo.swift:21:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut limit: BigUInt\
    \ = 1\n            ^\n/tmp/tmp3swl4kbo.swift:21:13: note: join the identifiers\
    \ together\n    let mut limit: BigUInt = 1\n        ~~~~^~~~~\n        mutlimit\n\
    /tmp/tmp3swl4kbo.swift:21:13: note: join the identifiers together with camel-case\n\
    \    let mut limit: BigUInt = 1\n        ~~~~^~~~~\n        mutLimit\n/tmp/tmp3swl4kbo.swift:21:20:\
    \ error: cannot find type 'BigUInt' in scope\n    let mut limit: BigUInt = 1\n\
    \                   ^~~~~~~\n/tmp/tmp3swl4kbo.swift:25:20: error: cannot find\
    \ 'BigUInt' in scope\n    for i in 3 ..< BigUInt(n) {\n                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var divisors: [(Int, Int)] = []\n    for\
    \ d in 2 ... n {\n        if n % d == 0 {\n            divisors.append(d)\n  \
    \      }\n    }\n    for d in divisors {\n        if n > 1 {\n            if n\
    \ % d == 0 {\n                return false\n            }\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8g7emp_s.swift:21:29: error: cannot convert value of type 'Int'\
    \ to expected argument type '(Int, Int)'\n            divisors.append(d)\n   \
    \                         ^\n/tmp/tmp8g7emp_s.swift:26:20: error: cannot convert\
    \ value of type '(Int, Int)' to expected argument type 'Int'\n            if n\
    \ % d == 0 {\n                   ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    guard n >= 1 else {\n        return false\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 || n == 3 {\n\
    \        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    let m = Int(sqrt(Double(n)))\n    var is_prime = true\n  \
    \  for i in 3..<m {\n        if n % i == 0 || n % (i + 1) == 0 {\n           \
    \ is_prime = false\n            break\n        }\n    }\n    return is_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfrxsdgcb.swift:30:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 { return false }\n    if n == 1\
    \ { return false }\n    if n == 2 { return true }\n    if n == 3 { return true\
    \ }\n    if n % 2 == 0 { return false }\n    var i = 5\n    var j: Int\n    while\
    \ i * i <= n {\n        j = 2 * i + 1\n        if j < n {\n            if n %\
    \ j == 0 { return false }\n        } else {\n            return false\n      \
    \  }\n        i = j\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpmfgggcud/tmpmfgggcud.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02d6decc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02d6ae3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02d6ae3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02d6ae27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmfgggcud                        0x0000559f391006fb <unavailable> + 5883

    5    libc.so.6                          0x00002b02d6fd8460 __libc_start_main +
    245

    6    tmpmfgggcud                        0x0000559f390ffef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    _ = factor(n: n)\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqw84ucbv.swift:18:9: error: cannot find 'factor' in scope\n   \
    \ _ = factor(n: n)\n        ^~~~~~\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 || n == 1 {\n        return false\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    var remainder\
    \ = n % 6\n\n    // Check odd-ness of remainder\n    if remainder == 0 {\n   \
    \     for divisor in 2..<n / 2 {\n            if n % divisor == 0 {\n        \
    \        return false\n            }\n        }\n    } else {\n        return\
    \ true\n    }\n\n    // Check even factors\n    if n / 2 % 2 == 0 {\n        for\
    \ divisor in 3..<n / 2 {\n            if n % divisor == 0 {\n                return\
    \ false\n            }\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmps54ycz46/tmps54ycz46.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb05faec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb05ca5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb05ca5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb05ca47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps54ycz46                        0x000055d7d24647eb <unavailable> + 6123

    5    libc.so.6                          0x00002afb0619a460 __libc_start_main +
    245

    6    tmps54ycz46                        0x000055d7d2463fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    guard n >= 1 else {\n        return false\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    var max_divider = 2\n\
    \    var max_divider_square = max_divider * max_divider\n    var result: Int =\
    \ 1\n    var counter: Int = 0\n    while result <= n {\n        if n % result\
    \ == 0 {\n            counter += 1\n            if counter > max_divider_square\
    \ {\n                return false\n            }\n        }\n        max_divider++\n\
    \        max_divider_square = max_divider * max_divider\n        result++\n  \
    \  }\n    return counter >= max_divider_square\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8ihi9x96.swift:35:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        max_divider++\n                   ^~\n/tmp/tmp8ihi9x96.swift:37:15:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        result++\n\
    \              ^~\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let primes: Set<Int> = [2, 3]\n    for i\
    \ in 2..<n {\n        if primes.contains(n) {\n            return false\n    \
    \    }\n        for j in 2..<i {\n            if n % j == 0 {\n              \
    \  primes.insert(j)\n                break\n            }\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_r6hawfd.swift:25:24: error: cannot use mutating member on immutable\
    \ value: 'primes' is a 'let' constant\n                primes.insert(j)\n    \
    \            ~~~~~~ ^\n/tmp/tmp_r6hawfd.swift:18:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let primes: Set<Int> = [2, 3]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    switch {\n    case n % 2 == 0:\n        return\
    \ true\n    case n == 3:\n        return true\n    case n % 3 == 0:\n        return\
    \ true\n    case n % 5 == 0:\n        return true\n    case n % 7 == 0:\n    \
    \    return true\n    case n <= 2:\n        return false\n    default:\n     \
    \   return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsvrwqvlj.swift:18:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \n    // Find a factor of n that's > 1 and odd\n    var i = 1\n    for factor\
    \ in 2..(n/2) { \n        if n % factor == 0 {\n            i += 0\n        }\n\
    \n        if i % 2 == 0 {\n            break\n        }\n    }\n\n    // If no\
    \ factor is found, we're done\n    if i == 2 {\n        return true\n    }\n\n\
    \    // If we got here, no prime is possible\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpns3r8xkq.swift:24:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for factor in 2..(n/2) { \n                   ^~\n\
    \                   ...\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var sqrt: Int\n    if n == 1 {\n        return\
    \ true\n    }\n    if n < 2 {\n        return false\n    }\n    for i in 1...n\
    \ {\n        sqrt = (n+i)/2\n        if i == sqrt() {\n            if n > sqrt()\
    \ {\n                break\n            }\n        }\n        else {\n       \
    \     if n < sqrt() {\n                return false\n            }\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmprnzo48as.swift:27:17: error: cannot call value of non-function\
    \ type 'Int'\n        if i == sqrt() {\n                ^   ~~\n             \
    \       \n/tmp/tmprnzo48as.swift:28:20: error: cannot call value of non-function\
    \ type 'Int'\n            if n > sqrt() {\n                   ^   ~~\n       \
    \                \n/tmp/tmprnzo48as.swift:33:20: error: cannot call value of non-function\
    \ type 'Int'\n            if n < sqrt() {\n                   ^   ~~\n       \
    \                \n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n\
    \    if n == 0 || n / 2 == 0 {\n        return false\n    }\n    if n == 2 {\n\
    \        return is_prime(Int(sqrt(Double(n))))\n    }\n    if n % 2 == 0 {\n \
    \       return false\n    }\n    if n == 3 {\n        return is_prime(Int(sqrt(Double(n))))\n\
    \    }\n    let max_prime = (Int(sqrt(Double(n))) + 1) - 1\n    for i in 2..=max_prime\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl9ewyztv.swift:25:29: error: cannot find 'sqrt' in scope\n    \
    \    return is_prime(Int(sqrt(Double(n))))\n                            ^~~~\n\
    /tmp/tmpl9ewyztv.swift:25:25: error: missing argument label 'n:' in call\n   \
    \     return is_prime(Int(sqrt(Double(n))))\n                        ^\n     \
    \                   n: \n/tmp/tmpl9ewyztv.swift:31:29: error: cannot find 'sqrt'\
    \ in scope\n        return is_prime(Int(sqrt(Double(n))))\n                  \
    \          ^~~~\n/tmp/tmpl9ewyztv.swift:31:25: error: missing argument label 'n:'\
    \ in call\n        return is_prime(Int(sqrt(Double(n))))\n                   \
    \     ^\n                        n: \n/tmp/tmpl9ewyztv.swift:33:26: error: cannot\
    \ find 'sqrt' in scope\n    let max_prime = (Int(sqrt(Double(n))) + 1) - 1\n \
    \                        ^~~~\n/tmp/tmpl9ewyztv.swift:34:15: error: cannot find\
    \ operator '..=' in scope\n    for i in 2..=max_prime {\n              ^~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    switch n % 3 {\n    case 0, 1, 2: return\
    \ true\n    default: return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp96z0fjke/tmp96z0fjke.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb90995c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb9068cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb9068c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb9068b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96z0fjke                        0x0000556aa3823243 <unavailable> + 4675

    5    libc.so.6                          0x00002aeb90b81460 __libc_start_main +
    245

    6    tmp96z0fjke                        0x0000556aa3822ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tif n < 2 {\n\t\treturn false\n\t}\n\tif n ==\
    \ 2 {\n\t\treturn true\n\t}\n\tvar dmp1 [2]*big.Int\n\tvar dmp2 [2]*big.Int\n\t\
    for i := 0; i < 2; i++ {\n\t\tdmp1[i] = big.NewInt(0)\n\t\tdmp2[i] = big.NewInt(0)\n\
    \t}\n\tdmp1[0].pSetInt64(n - 1)\n\tdmp1[1].pSetInt64(n - 2)\n\tdmp2[0].pSetInt64(n\
    \ - 1)\n\tdmp2[1].pSetInt64(n - 3)\n\tvar k int\n\tfor k = 0; k < 2; k++ {\n\t\
    \tif dmp1[k].isZero() {\n\t\t\treturn false\n\t\t}\n\t}\n\tk = 2\n\tfor ; k <\
    \ n / 2; k++ {\n\t\tif dmp1[k*2] == big.NewInt(0) {\n\t\t\treturn false\n\t\t\
    }\n\t\tif dmp1[k*2+1] == big.NewInt(0) {\n\t\t\treturn false\n\t\t}\n\t\tif dmp2[k*2-1]\
    \ == big.NewInt(0) {\n\t\t\treturn false\n\t\t}\n\t\tif dmp2[k*2-2] != big.NewInt(0)\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\tfor k := 0; k < (n / 2); k++ {\n\t\tvar\
    \ v big.Int\n\t\tfor i := 0; i < k; i++ {\n\t\t\tv = dmp1[i]*v + dmp2[i]\n\t\t\
    }\n\t\tif v == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmyetk73h.swift:24:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        var dmp1 [2]*big.Int\n                ^\n     \
    \           ;\n/tmp/tmpmyetk73h.swift:25:10: error: consecutive statements on\
    \ a line must be separated by ';'\n        var dmp2 [2]*big.Int\n            \
    \    ^\n                ;\n/tmp/tmpmyetk73h.swift:26:9: error: expected type\n\
    \        for i := 0; i < 2; i++ {\n               ^\n                <#type#>\n\
    /tmp/tmpmyetk73h.swift:26:9: error: expected 'in' after for-each pattern\n   \
    \     for i := 0; i < 2; i++ {\n               ^\n/tmp/tmpmyetk73h.swift:26:9:\
    \ error: expected Sequence expression for for-each loop\n        for i := 0; i\
    \ < 2; i++ {\n               ^\n/tmp/tmpmyetk73h.swift:34:8: error: found an unexpected\
    \ second identifier in variable declaration; is there an accidental break?\n \
    \       var k int\n              ^\n/tmp/tmpmyetk73h.swift:34:8: note: join the\
    \ identifiers together\n        var k int\n            ~~^~~\n            kint\n\
    /tmp/tmpmyetk73h.swift:34:8: note: join the identifiers together with camel-case\n\
    \        var k int\n            ~~^~~\n            kInt\n/tmp/tmpmyetk73h.swift:35:2:\
    \ error: C-style for statement has been removed in Swift 3\n        for k = 0;\
    \ k < 2; k++ {\n        ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmpmyetk73h.swift:41:2: error:\
    \ C-style for statement has been removed in Swift 3\n        for ; k < n / 2;\
    \ k++ {\n        ^   ~~~~~~~~~~~~~~~~\n/tmp/tmpmyetk73h.swift:55:9: error: expected\
    \ type\n        for k := 0; k < (n / 2); k++ {\n               ^\n           \
    \     <#type#>\n/tmp/tmpmyetk73h.swift:55:9: error: expected 'in' after for-each\
    \ pattern\n        for k := 0; k < (n / 2); k++ {\n               ^\n/tmp/tmpmyetk73h.swift:55:9:\
    \ error: expected Sequence expression for for-each loop\n        for k := 0; k\
    \ < (n / 2); k++ {\n               ^\n/tmp/tmpmyetk73h.swift:56:9: error: found\
    \ an unexpected second identifier in variable declaration; is there an accidental\
    \ break?\n                var v big.Int\n                      ^\n/tmp/tmpmyetk73h.swift:56:9:\
    \ note: join the identifiers "
  stdout: ''
  timestamp: 1659978684
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tif n < 2 {\n\t\treturn false\n\t}\n\tlet isPrime\
    \ = [Int](2...n)\n\tfor num in isPrime {\n\t\tif n & num == 0 {\n\t\t\treturn\
    \ false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp7p6l1ib7/tmp7p6l1ib7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1988677c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b198836eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b198836e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b198836d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7p6l1ib7                        0x0000560904955533 <unavailable> + 5427

    5    libc.so.6                          0x00002b1988863460 __libc_start_main +
    245

    6    tmp7p6l1ib7                        0x00005609049551e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\treturn is_prime(UInt64(n))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpucmj4mnm.swift:18:18: error: missing argument label 'n:' in call\n\
    \        return is_prime(UInt64(n))\n                        ^\n             \
    \           n: \n/tmp/tmpucmj4mnm.swift:18:18: error: cannot convert value of\
    \ type 'UInt64' to expected argument type 'Int'\n        return is_prime(UInt64(n))\n\
    \                        ^\n                        Int(     )\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return n < 2 || is_primes[Int(n)]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpalqg4fyw.swift:18:21: error: cannot find 'is_primes' in scope\n\
    \    return n < 2 || is_primes[Int(n)]\n                    ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  switch {\n  case n <= 2:\n    return true\n\
    \  case n > 2:\n    if isDivisor(n, &primes, &primeNumbers) {\n      return true\n\
    \    }\n    for _ in 0..<n {\n      if isDivisor(n, &primes, &primeNumbers) {\n\
    \        return false\n      }\n    }\n    return true\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiv9kp5yq.swift:18:10: error: expected expression in 'switch' statement\n\
    \  switch {\n         ^\n/tmp/tmpiv9kp5yq.swift:22:8: error: cannot find 'isDivisor'\
    \ in scope\n    if isDivisor(n, &primes, &primeNumbers) {\n       ^~~~~~~~~\n\
    /tmp/tmpiv9kp5yq.swift:22:22: error: cannot find 'primes' in scope\n    if isDivisor(n,\
    \ &primes, &primeNumbers) {\n                     ^~~~~~\n/tmp/tmpiv9kp5yq.swift:22:31:\
    \ error: cannot find 'primeNumbers' in scope\n    if isDivisor(n, &primes, &primeNumbers)\
    \ {\n                              ^~~~~~~~~~~~\n/tmp/tmpiv9kp5yq.swift:26:10:\
    \ error: cannot find 'isDivisor' in scope\n      if isDivisor(n, &primes, &primeNumbers)\
    \ {\n         ^~~~~~~~~\n/tmp/tmpiv9kp5yq.swift:26:24: error: cannot find 'primes'\
    \ in scope\n      if isDivisor(n, &primes, &primeNumbers) {\n                \
    \       ^~~~~~\n/tmp/tmpiv9kp5yq.swift:26:33: error: cannot find 'primeNumbers'\
    \ in scope\n      if isDivisor(n, &primes, &primeNumbers) {\n                \
    \                ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  let mut b = true\n  for i in 2..n / 2 {\n \
    \   if n % i == 0 {\n      b = false\n      break\n    }\n  }\n  return b\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphaio1svh.swift:18:11: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n  let mut b = true\n\
    \          ^\n/tmp/tmphaio1svh.swift:18:11: note: join the identifiers together\n\
    \  let mut b = true\n      ~~~~^\n      mutb\n/tmp/tmphaio1svh.swift:18:11: note:\
    \ join the identifiers together with camel-case\n  let mut b = true\n      ~~~~^\n\
    \      mutB\n/tmp/tmphaio1svh.swift:19:13: error: cannot find operator '..' in\
    \ scope; did you mean '...'?\n  for i in 2..n / 2 {\n            ^~\n        \
    \    ...\n/tmp/tmphaio1svh.swift:25:10: error: cannot find 'b' in scope\n  return\
    \ b\n         ^\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Refactor\n    if n < 2 || n > 1000\
    \ {\n        return false\n    }\n\n    if n == 2 {\n        return true\n   \
    \ }\n\n    if n == 1 {\n        return false\n    }\n\n    if n % 2 == 0 {\n \
    \       return false\n    }\n\n    // Get prime factors\n    let factors = primeFactors(n)\n\
    \    if factors.count == 0 {\n        return false\n    }\n\n    // Check if any\
    \ factors are multiples of other factors\n    if factors.contains(where: { $0\
    \ == n%$1 }) {\n        return false\n    }\n\n    // Now check for any number\
    \ > factors\n    if n > 2 {\n        for factor in factors {\n            if n\
    \ > factor {\n                return false\n            }\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxu05of5u.swift:36:19: error: cannot find 'primeFactors' in scope\n\
    \    let factors = primeFactors(n)\n                  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n <= 3 {\n        return\
    \ false\n    }\n\n    var i: Int = 0\n    var j: Int = 0\n    var m: Int = 0\n\
    \    var foundOne: Bool = false\n    var factor: Int = 0\n\n    for j = 2; j <\
    \ Int(sqrt(Double(n))); j++ {\n        m = n % j\n        if m == 0 {\n      \
    \      foundOne = true\n            break\n        } else {\n            if foundOne\
    \ {\n                break\n            }\n        }\n    }\n\n    if foundOne\
    \ {\n        return true\n    } else {\n        for i = Int(sqrt(Double(n))) +\
    \ 1; i > 1; i += 2 {\n            factor = (n % i) / 2\n            if factor\
    \ == 1 {\n                continue\n            }\n            if !is_prime(factor)\
    \ {\n                return false\n            }\n        }\n        return true\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpabjj2axe.swift:34:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for j = 2; j < Int(sqrt(Double(n))); j++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpabjj2axe.swift:49:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for i = Int(sqrt(Double(n))) + 1; i > 1; i += 2 {\n       \
    \ ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    var i = 3\n    let d = 2\n    while i <= n / 2 {\n        if n % i == 0 {\n\
    \            return false\n        }\n        d = d * i\n        i += 1\n    }\n\
    \    if n == d * i {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn2ys7py4.swift:27:9: error: cannot assign to value: 'd' is a 'let'\
    \ constant\n        d = d * i\n        ^\n/tmp/tmpn2ys7py4.swift:22:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let d = 2\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let limit = (2 * n) - 1\n    for i in 0..<limit\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e1eec1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e1ebb8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8e1ebb8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8e1ebb813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8e1ebb7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3wgmi89r                        0x000055fea8c9bae2 <unavailable> + 6882

    6    tmp3wgmi89r                        0x000055fea8c9b2cb <unavailable> + 4811

    7    libc.so.6                          0x00002b8e1f0ad460 __libc_start_main +
    245

    8    tmp3wgmi89r                        0x000055fea8c9afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return is_prime(Int(n))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5q9yt0_w.swift:18:21: error: missing argument label 'n:' in call\n\
    \    return is_prime(Int(n))\n                    ^\n                    n: \n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return is_prime(n, 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpol8n8il5.swift:18:24: error: extra argument in call\n    return\
    \ is_prime(n, 2)\n                   ~~~~^~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return is_prime_impl(Int64(n))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsbkkt3q4.swift:18:12: error: cannot find 'is_prime_impl' in scope\n\
    \    return is_prime_impl(Int64(n))\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var primes = Array(0..<Int(sqrt(Double(n))))\n\
    \    for i in 0..<Int(sqrt(Double(n))) {\n        if primes[Int(i)] == 0 {\n \
    \           if n % Double(i) == 0 {\n                return false\n          \
    \  }\n        }\n        primes[Int(i)] = 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxhh2gjdr.swift:24:32: error: cannot find 'sqrt' in scope\n    var\
    \ primes = Array(0..<Int(sqrt(Double(n))))\n                               ^~~~\n\
    /tmp/tmpxhh2gjdr.swift:25:22: error: cannot find 'sqrt' in scope\n    for i in\
    \ 0..<Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: optimize\n    if n < 2 {\n     \
    \   return false\n    }\n    if n > 500 {\n        return false\n    }\n\n   \
    \ if n == 2 {\n        return true\n    }\n\n    var divisor: Int\n    var x:\
    \ Int\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    divisor = 2\n\
    \    x = 3\n    while x * divisor < n {\n        divisor++\n        x = x * 2\n\
    \    }\n\n    if n % divisor == 0 {\n        return true\n    }\n\n    var check:\
    \ Bool\n    check = true\n    var d: Int\n    d = n - 1\n    while d {\n     \
    \   if ((n / d) * d == n) {\n            check = false\n        }\n        d =\
    \ d / 2\n    }\n    return check\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk757dzmy.swift:40:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n/tmp/tmpk757dzmy.swift:52:11:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \ while d {\n          ^\n          ( != 0)\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 0 {\n        return true\n    }\n\
    \    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var remainder\
    \ = 2\n    for _ in 0..<n / 2 {\n        remainder *= 2\n    }\n    if remainder\
    \ >= 3 {\n        return false\n    }\n    \n    // now we know that n is at least\
    \ 3 but less than or equal to sqrt (n) \n    var i = 2\n    var s = i\n    for\
    \ _ in 0..<n / 2 {\n        if n % i == 0 {\n            return false\n      \
    \  }\n        i += s\n        s *= 2\n    }\n    \n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp5gkefrgu/tmp5gkefrgu.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b059e0d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b059ddd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b059ddd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b059ddcf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5gkefrgu                        0x000055fb3537b3a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b059e2c5460 __libc_start_main +
    245

    6    tmp5gkefrgu                        0x000055fb3537afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    \n    if n <= 2 {\n        return n == 2\n    }\n\n    if n % 2 == 1 {\n\
    \        return false\n    }\n    \n    // Sieve of Eratosthenes.\n    var sieve\
    \ = [Int]()\n    sieve.append(2)\n    var i = 2\n    \n    while i < n {\n   \
    \     if sieve.contains(n / i) {\n            return false\n        }\n      \
    \  sieve.append(n / i)\n        i += 1\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpb2gwy1tc/tmpb2gwy1tc.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b833c73bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b833c432b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b833c432988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b833c4317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2gwy1tc                        0x0000561d34a45417 <unavailable> + 5143

    5    libc.so.6                          0x00002b833c927460 __libc_start_main +
    245

    6    tmpb2gwy1tc                        0x0000561d34a45059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var i = 2\n    guard n > 1 else {\n     \
    \   return true\n    }\n    var isPrime = true\n    var j = 0\n    while i * i\
    \ <= n {\n        if n % i == 0 {\n            isPrime = false\n        }\n  \
    \      i += 1\n        if j > 100 {\n            break\n        }\n        j++\n\
    \    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpziac8axz.swift:32:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        j++\n         ^~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \n    // If n is even and 1 is even, then n is odd, so return false.\n    if n\
    \ % 2 == 0 && n != 1 {\n        return false\n    }\n\n    // If n is odd, then\
    \ (n-1)/2 must be even, so return false.\n    if n % 2 != 0 {\n        let num\
    \ = Int(n - 1)\n        return is_prime(num) || is_prime(num + 1)\n    }\n\n \
    \   // If n is even, then 2 must also be even, so return true.\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5fhn0g7c.swift:30:25: error: missing argument label 'n:' in call\n\
    \        return is_prime(num) || is_prime(num + 1)\n                        ^\n\
    \                        n: \n/tmp/tmp5fhn0g7c.swift:30:42: error: missing argument\
    \ label 'n:' in call\n        return is_prime(num) || is_prime(num + 1)\n    \
    \                                     ^\n                                    \
    \     n: \n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    let upper = UInt32(n - 1)\n    if n == 1 {\n        return true\n    }\n\
    \    for i in 2..upper {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpycxidcu5.swift:25:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 2..upper {\n              ^~\n           \
    \   ...\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: implement\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpim9zr4ye/tmpim9zr4ye.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93cc823c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93cc51ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93cc51a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93cc5197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpim9zr4ye                        0x00005651b5bc3227 <unavailable> + 4647

    5    libc.so.6                          0x00002b93cca0f460 __libc_start_main +
    245

    6    tmpim9zr4ye                        0x00005651b5bc2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\treturn is_prime(UInt32(n))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpik3hk0es.swift:18:18: error: missing argument label 'n:' in call\n\
    \        return is_prime(UInt32(n))\n                        ^\n             \
    \           n: \n/tmp/tmpik3hk0es.swift:18:18: error: cannot convert value of\
    \ type 'UInt32' to expected argument type 'Int'\n        return is_prime(UInt32(n))\n\
    \                        ^\n                        Int(     )\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // Return false if n < 2.\n    if n < 2 {\n\
    \        return false\n    }\n\n    // If n is prime then return true.\n    if\
    \ n == 1 {\n        return true\n    }\n\n    // If n is evenly divisible by 2\
    \ then return false\n    if n % 2 == 0 {\n        return false\n    }\n\n    //\
    \ If n is evenly divisible by 3 then return true\n    if n % 3 == 0 {\n      \
    \  return true\n    }\n\n    // If n is evenly divisible by 5 then return true\n\
    \    if n % 5 == 0 {\n        return true\n    }\n\n    // If n is evenly divisible\
    \ by 7 then return true\n    if n % 7 == 0 {\n        return true\n    }\n\n \
    \   // If n is evenly divisible by 11 then return true\n    if n % 11 == 0 {\n\
    \        return true\n    }\n\n    // If n is evenly divisible by 13 then return\
    \ true\n    if n % 13 == 0 {\n        return true\n    }\n\n    // If n is evenly\
    \ divisible by 17 then return true\n    if n % 17 == 0 {\n        return true\n\
    \    }\n\n    // If n is evenly divisible by 19 then return true\n    if n % 19\
    \ == 0 {\n        return true\n    }\n\n    // If n is evenly divisible by 23\
    \ then return true\n    if n % 23 == 0 {\n        return true\n    }\n\n    //\
    \ If n is evenly divisible by 27 then return true\n    if n % 27 == 0 {\n    \
    \    return true\n    }\n\n    // If n is evenly divisible by 31 then return true\n\
    \    if n % 31 == 0 {\n        return true\n    }\n\n    // If n is evenly divisible\
    \ by 37 then return true\n    if n % 37 == 0 {\n        return true\n    }\n\n\
    \    // If n is evenly divisible by 41 then return true\n    if n % 41 == 0 {\n\
    \        return true\n    }\n\n    // If n is evenly divisible by 43 then return\
    \ true\n    if n % 43 == 0 {\n        return true\n    }\n\n    // If n is evenly\
    \ divisible by 47 then return true\n    if n % 47 == 0 {\n        return true\n\
    \    }\n\n    // If n is evenly divisible by 53 then return true\n    if n % 53\
    \ == 0 {\n        return true\n    }\n\n    // If n is evenly divisible by 59\
    \ then return true\n    if n % 59 == 0 {\n        return true\n    }\n\n    //\
    \ If n is evenly divisible by 61 then return true\n    if n % 61 == 0 {\n    \
    \    return true\n    }\n\n    // If n is evenly divisible by 67 then return true\n\
    \    if n % 67 == 0 {\n        return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxyb6kaue.swift:148:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpxyb6kaue.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpxyb6kaue.swift:124:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    var result = true\n\n   \
    \ // Use binary search for finding first multiple of 3 or 5 that is larger than\
    \ n\n    // It will take time proportional to the number you are trying to check,\
    \ but it will be \n    // O(logN) for most of the cases\n    let nums = [3, 5,\
    \ 7]\n\n    // We start from the largest of the array\n    for i in nums.reverse()\
    \ {\n        let m = i * n + 1 // m = 3 * n + 1 or 5 * (n + 1)\n        result\
    \ = result && n % m == 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprzrx7caj.swift:34:19: error: cannot use mutating member on immutable\
    \ value: 'nums' is a 'let' constant\n    for i in nums.reverse() {\n         \
    \    ~~~~ ^\n/tmp/tmprzrx7caj.swift:31:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let nums = [3, 5, 7]\n    ^~~\n    var\n/tmp/tmprzrx7caj.swift:34:19:\
    \ error: for-in loop requires '()' to conform to 'Sequence'\n    for i in nums.reverse()\
    \ {\n             ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return (n >= 2) && ((n & 1) == 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp0vqfszc9/tmp0vqfszc9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2bbd08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2bb9ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2bb9ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2bb9fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vqfszc9                        0x00005571ffc3e1b3 <unavailable> + 4531

    5    libc.so.6                          0x00002ba2bbef4460 __libc_start_main +
    245

    6    tmp0vqfszc9                        0x00005571ffc3de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 || n == 0 {\n        return false\n\
    \    }\n    if n <= 6 {\n        return true\n    }\n\n    if n % 2 == 0 {\n \
    \       return false\n    }\n    let upper = n - 1\n    for d in 2...upper {\n\
    \        if n % d == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpvbfp4gc4/tmpvbfp4gc4.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1f00d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1efdc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1efdc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1efdc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvbfp4gc4                        0x00005598bdf92333 <unavailable> + 4915

    5    libc.so.6                          0x00002ab1f02bc460 __libc_start_main +
    245

    6    tmpvbfp4gc4                        0x00005598bdf91fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\t// https://rosettacode.org/wiki/Sieve_of_Eratosthenes#Swift\n\
    \tlet limit = Int(sqrt(Double(n)))\n\tvar prime = [Int]()\n\tvar n = Int(n)\n\t\
    for _ in 0..<limit {\n\t\tif n%2 == 0 {\n\t\t\tprime.append(2)\n\t\t\tn /= 2\n\
    \t\t} else {\n\t\t\tprime.append(3)\n\t\t\tn /= 3\n\t\t}\n\t}\n\tfor i := 3; i\
    \ <= limit; i++ {\n\t\tif prime[i] == 0 {\n\t\t\treturn false\n\t\t}\n\t\tif prime[i]\
    \ == i {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkqm3gtu6.swift:31:9: error: expected type\n        for i := 3;\
    \ i <= limit; i++ {\n               ^\n                <#type#>\n/tmp/tmpkqm3gtu6.swift:31:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 3; i <= limit;\
    \ i++ {\n               ^\n/tmp/tmpkqm3gtu6.swift:31:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 3; i <= limit; i++ {\n      \
    \         ^\n/tmp/tmpkqm3gtu6.swift:19:18: error: cannot find 'sqrt' in scope\n\
    \        let limit = Int(sqrt(Double(n)))\n                        ^~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return is_prime_uint(uint64(n))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmkeb9doc.swift:18:12: error: cannot find 'is_prime_uint' in scope\n\
    \    return is_prime_uint(uint64(n))\n           ^~~~~~~~~~~~~\n/tmp/tmpmkeb9doc.swift:18:26:\
    \ error: cannot find 'uint64' in scope\n    return is_prime_uint(uint64(n))\n\
    \                         ^~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // Check if n is even.\n    if n % 2 == 0\
    \ {\n        // If n even, then (n - 1) must be odd.\n        return is_prime(n\
    \ - 1)\n    }\n    // If n is odd, then (n - 1) must equal 1.\n    return n ==\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n:\
    \ 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) ==\
    \ true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_naucskh.swift:21:25: error: missing argument label 'n:' in call\n\
    \        return is_prime(n - 1)\n                        ^\n                 \
    \       n: \n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for 3; n > 2; n -= 2 {\n        if n % n == 0 {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps9m6v3cz.swift:27:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for 3; n > 2; n -= 2 {\n    ^   ~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return is_prime_impl(n, false)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpflxlc8e4.swift:18:12: error: cannot find 'is_prime_impl' in scope\n\
    \    return is_prime_impl(n, false)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // https://en.wikipedia.org/wiki/Primality_test#Primality_of_a_number\n\
    \    if n == 0 { return false }\n    \n    if n == 1 { return true }\n    \n \
    \   // Check if n is prime.\n    if n % 2 == 0 {\n        return is_prime(n /\
    \ 2)\n    } else {\n        return is_prime(3 * n - 1) / 2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2bcjel5v.swift:25:25: error: missing argument label 'n:' in call\n\
    \        return is_prime(n / 2)\n                        ^\n                 \
    \       n: \n/tmp/tmp2bcjel5v.swift:27:25: error: missing argument label 'n:'\
    \ in call\n        return is_prime(3 * n - 1) / 2\n                        ^\n\
    \                        n: \n/tmp/tmp2bcjel5v.swift:27:16: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n        return is_prime(3\
    \ * n - 1) / 2\n               ^\n/tmp/tmp2bcjel5v.swift:27:36: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n        return is_prime(3\
    \ * n - 1) / 2\n                                   ^\n               ((      \
    \               ) != 0)\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    switch n {\n    case 2:\n        return true\n\
    \    case 3:\n        return false\n    case 4:\n        return false\n    case\
    \ 5:\n        return true\n    case 6:\n        return true\n    case 7:\n   \
    \     return false\n    case 8:\n        return false\n    case 9:\n        return\
    \ true\n    case 10:\n        return true\n    case 11:\n        return true\n\
    \    case 12:\n        return true\n    case 13:\n        return true\n    case\
    \ 14:\n        return true\n    case 15:\n        return true\n    case 16:\n\
    \        return true\n    case 17:\n        return true\n    case 18:\n      \
    \  return true\n    case 19:\n        return true\n    case 20:\n        return\
    \ true\n    case 21:\n        return true\n    case 22:\n        return true\n\
    \    case 23:\n        return true\n    case 24:\n        return true\n    case\
    \ 25:\n        return true\n    case 26:\n        return true\n    case 27:\n\
    \        return true\n    case 28:\n        return true\n    case 29:\n      \
    \  return true\n    case 30:\n        return true\n    case 31:\n        return\
    \ true\n    case 32:\n        return true\n    case 33:\n        return true\n\
    \    case 34:\n        return true\n    case 35:\n        return true\n    case\
    \ 36:\n        return true\n    case 37:\n        return true\n    case 38:\n\
    \        return true\n    case 39:\n        return true\n    case 40:\n      \
    \  return true\n    case 41:\n        return true\n    case 42:\n        return\
    \ true\n    case 43:\n        return true\n    case 44:\n        return true\n\
    \    case 45:\n        return true\n    case 46:\n        return true\n    case\
    \ 47:\n        return true\n    case 48:\n        return true\n    case 49:\n\
    \        return true\n    case 50:\n        return true\n    case 51:\n      \
    \  return true\n    case 52:\n        return true\n    case 53:\n        return\
    \ true\n    case 54:\n        return true\n    case 55:\n        return true\n\
    \    case 56:\n        return true\n    case 57:\n        return true\n    case\
    \ 58:\n        return true\n    case 59:\n        return true\n    case 60:\n\
    \        return true\n    case 61:\n        return true\n    case 62:\n      \
    \  return true\n    case 63:\n        return true\n    case 64:\n        return\
    \ true\n    case 65:\n        return true\n    case 66:\n        return true\n\
    \    case 67:\n        return true\n    case 68:\n        return true\n    case\
    \ 69:\n        return true\n    case 70:\n        return true\n    case 71:\n\
    \        return true\n    case 72:\n        return true\n    case 73:\n      \
    \  return true\n    case 74:\n        return true\n    case 75:\n        return\
    \ true\n    case 76:\n        return true\n    case 77:\n        return true\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptgcujfve.swift:199:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmptgcujfve.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmptgcujfve.swift:18:5:\
    \ error: switch must be exhaustive\n    switch n {\n    ^\n/tmp/tmptgcujfve.swift:18:5:\
    \ note: do you want to add a default clause?\n    switch n {\n    ^\n/tmp/tmptgcujfve.swift:175:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\treturn is_prime_impl(n, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp09yvfi2z.swift:18:9: error: cannot find 'is_prime_impl' in scope\n\
    \        return is_prime_impl(n, nil)\n               ^~~~~~~~~~~~~\n/tmp/tmp09yvfi2z.swift:18:26:\
    \ error: 'nil' requires a contextual type\n        return is_prime_impl(n, nil)\n\
    \                                ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    let two = 2 * n\n    let four = two * 2\n    let root = sqrt(n)\n    var\
    \ remainder = n % root\n\n    while remainder > 1 {\n        remainder = remainder\
    \ - root\n        root = root + two\n    }\n\n    if remainder == 0 {\n      \
    \  return false\n    }\n    var prime = true\n    var divisor = two\n    while\
    \ divisor < root {\n        if n % divisor == 0 {\n            prime = false\n\
    \            break\n        }\n        divisor = divisor + two\n    }\n    return\
    \ prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaxkp26rz.swift:23:16: error: cannot find 'sqrt' in scope\n    let\
    \ root = sqrt(n)\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var ret = true\n    switch n {\n    case\
    \ 2:\n        ret = true\n    case 3:\n        ret = false\n    case 4:\n    \
    \    ret = true\n    case 5:\n        ret = false\n    case 6:\n        ret =\
    \ true\n    case 7:\n        ret = false\n    case 8:\n        ret = true\n  \
    \  case 9:\n        ret = false\n    case 10:\n        ret = true\n    case 11:\n\
    \        ret = false\n    case 12:\n        ret = true\n    case 13:\n       \
    \ ret = false\n    case 14:\n        ret = true\n    case 15:\n        ret = false\n\
    \    case 16:\n        ret = true\n    case 17:\n        ret = false\n    case\
    \ 18:\n        ret = true\n    case 19:\n        ret = false\n    case 20:\n \
    \       ret = true\n    case 21:\n        ret = false\n    case 22:\n        ret\
    \ = true\n    case 23:\n        ret = false\n    case 24:\n        ret = true\n\
    \    case 25:\n        ret = false\n    case 26:\n        ret = true\n    case\
    \ 27:\n        ret = false\n    case 28:\n        ret = true\n    case 29:\n \
    \       ret = false\n    case 30:\n        ret = true\n    case 31:\n        ret\
    \ = false\n    case 32:\n        ret = true\n    case 33:\n        ret = false\n\
    \    case 34:\n        ret = true\n    case 35:\n        ret = false\n    case\
    \ 36:\n        ret = true\n    case 37:\n        ret = false\n    case 38:\n \
    \       ret = true\n    case 39:\n        ret = false\n    case 40:\n        ret\
    \ = true\n    case 41:\n        ret = false\n    case 42:\n        ret = true\n\
    \    case 43:\n        ret = false\n    case 44:\n        ret = true\n    case\
    \ 45:\n        ret = false\n    case 46:\n        ret = true\n    case 47:\n \
    \       ret = false\n    case 48:\n        ret = true\n    case 49:\n        ret\
    \ = false\n    case 50:\n        ret = true\n    case 51:\n        ret = false\n\
    \    case 52:\n        ret = true\n    case 53:\n        ret = false\n    case\
    \ 54:\n        ret = true\n    case 55:\n        ret = false\n    case 56:\n \
    \       ret = true\n    case 57:\n        ret = false\n    case 58:\n        ret\
    \ = true\n    case 59:\n        ret = false\n    case 60:\n        ret = true\n\
    \    case 61:\n        ret = false\n    case 62:\n        ret = true\n    case\
    \ 63:\n        ret = false\n    case 64:\n        ret = true\n    case 65:\n \
    \       ret = false\n    case 66:\n        ret = true\n    case 67:\n        ret\
    \ = false\n    case 68:\n        ret = true\n    case 69:\n        ret = false\n\
    \    case 70:\n        ret = true\n    case 71:\n        ret = false\n    case\
    \ 72:\n        ret = true\n    case 73:\n        ret = false\n    case 74:\n \
    \       ret = true\n    case 75:\n        ret = false\n    case 76:\n        ret\
    \ = true\n    case 77:\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv841bht8.swift:170:5: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n    case 77:\n    ^~~~~~~~\n            \
    \ break\n/tmp/tmpv841bht8.swift:198:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpv841bht8.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpv841bht8.swift:19:5:\
    \ error: switch must be exhaustive\n    switch n {\n    ^\n/tmp/tmpv841bht8.swift:19:5:\
    \ note: do you want to add a default clause?\n    switch n {\n    ^\n/tmp/tmpv841bht8.swift:174:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpv841bht8.swift:18:9:\
    \ warning: variable 'ret' was written to, but never read\n    var ret = true\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let mut i = 2\n    while i <= n {\n     \
    \   if n % i == 0 {\n            return false\n        }\n        i += 2\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5tgkz1t6.swift:18:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmp5tgkz1t6.swift:18:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmp5tgkz1t6.swift:18:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmp5tgkz1t6.swift:19:11: error: cannot find 'i'\
    \ in scope\n    while i <= n {\n          ^\n/tmp/tmp5tgkz1t6.swift:20:16: error:\
    \ cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n/tmp/tmp5tgkz1t6.swift:23:9:\
    \ error: cannot find 'i' in scope\n        i += 2\n        ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n\
    \n    if n < 2 {\n        return false\n    }\n\n    let i = 2\n    let limit\
    \ = Int.max\n\n    while i <= limit {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_iojpgs1.swift:33:11: error: left side of mutating operator isn't\
    \ mutable: 'i' is a 'let' constant\n        i += 1\n        ~ ^\n/tmp/tmp_iojpgs1.swift:26:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let i = 2\n    ^~~\n   \
    \ var\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  if n == 2 {\n    return true\n  }\n  var candidate\
    \ = 2\n  var i = 2\n  var remainder: Int\n  // Check odd factors starting from\
    \ 3\n  for remainder = n, i < Int(ceil(sqrt(Double(n)))){\n    if remainder %\
    \ i == 0 {\n      break\n    }\n    i += 1\n  }\n  if i >= Int(ceil(sqrt(Double(n)))){\n\
    \    return false\n  }\n  for remainder = n, i < Int(ceil(sqrt(Double(n)))){\n\
    \    if remainder % i == 0 {\n      return false\n    }\n    i += 1\n  }\n  return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz5atm1o_.swift:25:17: error: expected 'in' after for-each pattern\n\
    \  for remainder = n, i < Int(ceil(sqrt(Double(n)))){\n                ^\n/tmp/tmpz5atm1o_.swift:25:17:\
    \ error: expected Sequence expression for for-each loop\n  for remainder = n,\
    \ i < Int(ceil(sqrt(Double(n)))){\n                ^\n/tmp/tmpz5atm1o_.swift:34:17:\
    \ error: expected 'in' after for-each pattern\n  for remainder = n, i < Int(ceil(sqrt(Double(n)))){\n\
    \                ^\n/tmp/tmpz5atm1o_.swift:34:17: error: expected Sequence expression\
    \ for for-each loop\n  for remainder = n, i < Int(ceil(sqrt(Double(n)))){\n  \
    \              ^\n/tmp/tmpz5atm1o_.swift:31:15: error: cannot find 'ceil' in scope\n\
    \  if i >= Int(ceil(sqrt(Double(n)))){\n              ^~~~\n/tmp/tmpz5atm1o_.swift:31:20:\
    \ error: cannot find 'sqrt' in scope\n  if i >= Int(ceil(sqrt(Double(n)))){\n\
    \                   ^~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tchecker.check_number_is_prime(n)\n\treturn\
    \ is_prime(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwztzso4c.swift:18:2: error: cannot find 'checker' in scope\n  \
    \      checker.check_number_is_prime(n)\n        ^~~~~~~\n/tmp/tmpwztzso4c.swift:19:18:\
    \ error: missing argument label 'n:' in call\n        return is_prime(n)\n   \
    \                     ^\n                        n: \n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var isPrime: Bool = false\n    if n > 1 {\n\
    \        var x: Int\n        if x := pow(x, n - 1); n == x {\n            isPrime\
    \ = true\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphyw5co21.swift:21:14: error: expected '{' after 'if' condition\n\
    \        if x := pow(x, n - 1); n == x {\n             ^\n/tmp/tmphyw5co21.swift:21:12:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \     if x := pow(x, n - 1); n == x {\n           ^\n           ( != 0)\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 { return false }\n    if n == 2\
    \ { return true }\n    if n == 3 { return true }\n    if n >= sqrt(Double(n))\
    \ { return false }\n    var sum = 0\n    for d in 2 ..< n {\n        if n % d\
    \ == 0 { return false }\n        sum += d\n    }\n    return sum >= n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx2s2b31j.swift:21:13: error: cannot find 'sqrt' in scope\n    if\
    \ n >= sqrt(Double(n)) { return false }\n            ^~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let len = Int(sqrt(Double(n)))\n    let mut\
    \ i = 2\n    while i <= len {\n        if n % i == 0 {\n            return false\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl7i705zp.swift:19:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 2\n\
    \            ^\n/tmp/tmpl7i705zp.swift:19:13: note: join the identifiers together\n\
    \    let mut i = 2\n        ~~~~^\n        muti\n/tmp/tmpl7i705zp.swift:19:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 2\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpl7i705zp.swift:18:19: error: cannot find 'sqrt'\
    \ in scope\n    let len = Int(sqrt(Double(n)))\n                  ^~~~\n/tmp/tmpl7i705zp.swift:20:11:\
    \ error: cannot find 'i' in scope\n    while i <= len {\n          ^\n/tmp/tmpl7i705zp.swift:21:16:\
    \ error: cannot find 'i' in scope\n        if n % i == 0 {\n               ^\n\
    /tmp/tmpl7i705zp.swift:24:9: error: cannot find 'i' in scope\n        i += 1\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  if n == 0 || n == 1 { return false }\n  if\
    \ n == 1 { return true }\n\n  // Sieve of Eratosthenes - see:\n  // https://en.wikipedia.org/wiki/Primality_test#Sieve_of_Eratosthenes\n\
    \  var a = [Int]()\n  var b = 2\n  var p = 3\n  var q = 3\n  var m = 1\n\n  for\
    \ i := 2; i <= (n - 1); i++ {\n    a = append(a, i)\n  }\n\n  for i := 0; i <\
    \ len(a); i++ {\n    if a[i] == 0 {\n      continue\n    }\n\n    for j := i +\
    \ 1; j < len(a); j++ {\n      m = m*a[j] + p\n      p = q\n      q = (q + a[j])\
    \ % m\n      if q == 0 {\n        break\n      }\n    }\n    if q == 1 {\n   \
    \   return false\n    }\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphgfeoesw.swift:29:10: error: expected type\n  for i := 2; i <=\
    \ (n - 1); i++ {\n         ^\n          <#type#>\n/tmp/tmphgfeoesw.swift:29:10:\
    \ error: expected 'in' after for-each pattern\n  for i := 2; i <= (n - 1); i++\
    \ {\n         ^\n/tmp/tmphgfeoesw.swift:29:10: error: expected Sequence expression\
    \ for for-each loop\n  for i := 2; i <= (n - 1); i++ {\n         ^\n/tmp/tmphgfeoesw.swift:33:10:\
    \ error: expected type\n  for i := 0; i < len(a); i++ {\n         ^\n        \
    \  <#type#>\n/tmp/tmphgfeoesw.swift:33:10: error: expected 'in' after for-each\
    \ pattern\n  for i := 0; i < len(a); i++ {\n         ^\n/tmp/tmphgfeoesw.swift:33:10:\
    \ error: expected Sequence expression for for-each loop\n  for i := 0; i < len(a);\
    \ i++ {\n         ^\n/tmp/tmphgfeoesw.swift:38:12: error: expected type\n    for\
    \ j := i + 1; j < len(a); j++ {\n           ^\n            <#type#>\n/tmp/tmphgfeoesw.swift:38:12:\
    \ error: expected 'in' after for-each pattern\n    for j := i + 1; j < len(a);\
    \ j++ {\n           ^\n/tmp/tmphgfeoesw.swift:38:12: error: expected Sequence\
    \ expression for for-each loop\n    for j := i + 1; j < len(a); j++ {\n      \
    \     ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // Algorithm taken from http://www.cs.berkeley.edu/~wkahan/numprob/isPrime.html\
    \ with slight modifications.\n    // First check that the number is positive,\
    \ since it won't be called with a negative number.\n    guard n > 0 else { return\
    \ false }\n    // Step 1: Trial division of all primes smaller than n (including\
    \ n).\n    var testPrimes: [Int] = [n/2, n/3, n/5, n/7, n/9, n/11, n/13, n/15,\
    \ n/17, n/19, ...]\n    var j = 0\n    // Step 2: Stop if all primes have been\
    \ tried.\n    if testPrimes.count > 5 {\n        return true\n    }\n    var isPrime\
    \ = true\n    // Step 3: Test for primeness starting at n/2\n    for i in 1..<testPrimes.count\
    \ {\n        if testPrimes[j] == 0 { continue }\n        var j2 = 0\n        //\
    \ Step 4: Increment j and increment j2 if even and j+j2 are still under n.\n \
    \       while j2 < testPrimes.count && (testPrimes[j] % testPrimes[j2] == 0 ||\
    \ testPrimes[j] + testPrimes[j2] < n) {\n            j2 = j2 + 1\n        }\n\
    \        if j2 == testPrimes.count {\n            isPrime = true\n           \
    \ break\n        } else {\n            isPrime = false\n        }\n        j2\
    \ = j + j2\n        if j2 > testPrimes.count { continue }\n        if testPrimes[j2]\
    \ == 0 { continue }\n        // Step 5: Increment j and increment j2 if odd.\n\
    \        while j2 < testPrimes.count && (testPrimes[j] % testPrimes[j2] == 0 ||\
    \ testPrimes[j] + testPrimes[j2] > n) {\n            j2 = j2 + 1\n        }\n\
    \        j2 = j + j2\n        if j2 == testPrimes.count {\n            isPrime\
    \ = true\n            break\n        } else {\n            isPrime = false\n \
    \       }\n        j = j2\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8ykflwxo.swift:22:85: error: expected expression after unary operator\n\
    \    var testPrimes: [Int] = [n/2, n/3, n/5, n/7, n/9, n/11, n/13, n/15, n/17,\
    \ n/19, ...]\n                                                               \
    \                     ^\n/tmp/tmp8ykflwxo.swift:22:88: error: expected expression\
    \ in container literal\n    var testPrimes: [Int] = [n/2, n/3, n/5, n/7, n/9,\
    \ n/11, n/13, n/15, n/17, n/19, ...]\n                                       \
    \                                                ^\n/tmp/tmp8ykflwxo.swift:22:9:\
    \ warning: variable 'testPrimes' was never mutated; consider changing to 'let'\
    \ constant\n    var testPrimes: [Int] = [n/2, n/3, n/5, n/7, n/9, n/11, n/13,\
    \ n/15, n/17, n/19, ...]\n    ~~~ ^\n    let\n/tmp/tmp8ykflwxo.swift:30:9: warning:\
    \ immutable value 'i' was never used; consider replacing with '_' or removing\
    \ it\n    for i in 1..<testPrimes.count {\n        ^\n        _\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // Test for odd factors.\n    if n%2 == 1\
    \ {\n        return false\n    }\n\n    // Test for even factors.\n    for var\
    \ i = 2; i <= Int(sqrt(Double(n))); i++ {\n        if n % i == 0 {\n         \
    \   return false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkvgqxtxl.swift:24:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= Int(sqrt(Double(n))); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tswitch n {\n\tcase 2: return true\n\tcase 3:\
    \ return true\n\tcase 5: return true\n\tcase 7: return true\n\tcase 11: return\
    \ true\n\tcase 13: return true\n\tcase 17: return true\n\tcase 19: return true\n\
    \tcase 29: return true\n\tcase 31:\n\t\treturn true\n\tdefault:\n\t\tfor i :=\
    \ 2; i < int(n); i++ {\n\t\t\tif n%i == 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\
    \t}\n\t\treturn true\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbyncdx78.swift:31:10: error: expected type\n                for\
    \ i := 2; i < int(n); i++ {\n                       ^\n                      \
    \  <#type#>\n/tmp/tmpbyncdx78.swift:31:10: error: expected 'in' after for-each\
    \ pattern\n                for i := 2; i < int(n); i++ {\n                   \
    \    ^\n/tmp/tmpbyncdx78.swift:31:10: error: expected Sequence expression for\
    \ for-each loop\n                for i := 2; i < int(n); i++ {\n             \
    \          ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for n > 2 {\n        if n & 1 == 0 {\n            return false\n        }\n\
    \        n = n >> 1\n    }\n    return n == 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq5_nlebd.swift:21:11: error: expected 'in' after for-each pattern\n\
    \    for n > 2 {\n          ^\n/tmp/tmpq5_nlebd.swift:21:11: error: unary operator\
    \ cannot be separated from its operand\n    for n > 2 {\n          ^~\n      \
    \     \n/tmp/tmpq5_nlebd.swift:21:11: error: '>' is not a prefix unary operator\n\
    \    for n > 2 {\n          ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  var i = 2\n  var prime = true\n  while i <=\
    \ n {\n    prime = prime && isPrime(i)\n    i = 2 * i\n  }\n  return prime\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptuyhkoms.swift:21:22: error: cannot find 'isPrime' in scope\n \
    \   prime = prime && isPrime(i)\n                     ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if is_odd(n) {\n        return false\n  \
    \  }\n    let limit = 2\n    for d in divisors(n) {\n        if d == limit {\n\
    \            return false\n        }\n        if n % (d - 1) == 0 {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg_vnfkvp.swift:18:8: error: cannot find 'is_odd' in scope\n   \
    \ if is_odd(n) {\n       ^~~~~~\n/tmp/tmpg_vnfkvp.swift:22:14: error: cannot find\
    \ 'divisors' in scope\n    for d in divisors(n) {\n             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    var check: Int = Int(ceil(sqrt(Double(n))))\n\
    \n    while check % 2 == 0 {\n        check = check / 2\n    }\n\n    if check\
    \ == 2 {\n        return true\n    }\n\n    var i = 1\n    var j: Int\n\n    while\
    \ i * i <= n {\n        j = 2 * i\n        while j < n {\n            if n % j\
    \ == 0 {\n                return false\n            }\n            j = j + 1\n\
    \        }\n        i = i + 1\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpinkbcd0k.swift:26:26: error: cannot find 'ceil' in scope\n    var\
    \ check: Int = Int(ceil(sqrt(Double(n))))\n                         ^~~~\n/tmp/tmpinkbcd0k.swift:26:31:\
    \ error: cannot find 'sqrt' in scope\n    var check: Int = Int(ceil(sqrt(Double(n))))\n\
    \                              ^~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 { return false }\n    var i = 2\n\
    \    var d = 2\n    while i <= n {\n        if n % i == 0 { return false }\n \
    \       if d == i { return true }\n        d = i * 3 + 1\n        i += 2\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp275fj293/tmp275fj293.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af514d58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af514a4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af514a4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af514a4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp275fj293                        0x000055b40a4b96fb <unavailable> + 5883

    5    libc.so.6                          0x00002af514f44460 __libc_start_main +
    245

    6    tmp275fj293                        0x000055b40a4b8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var m = 1\n    while m <= n {\n        if\
    \ n % m == 0 {\n            return false\n        }\n        m += 1\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp0t4annlj/tmp0t4annlj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b244a492c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b244a189b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b244a189988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b244a1887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0t4annlj                        0x000055f7ecba12b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b244a67e460 __libc_start_main +
    245

    6    tmp0t4annlj                        0x000055f7ecba0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    guard n > 0 else {\n        return false\n\
    \    }\n    if n == 1 { // O(1) check\n        return true\n    }\n\n    let sqrt:\
    \ Int = Int(ceil(sqrt(Double(n))))\n    guard sqrt >= Int(n) else {\n        return\
    \ false\n    }\n\n    var isPrime = true\n    for i in 1...sqrt {\n        let\
    \ isDivisible = n % (2 * i) == 0\n        if !isDivisible {\n            isPrime\
    \ = false\n            break\n        }\n    }\n    return isPrime\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplq360wym.swift:25:25: error: cannot find 'ceil' in scope\n    let\
    \ sqrt: Int = Int(ceil(sqrt(Double(n))))\n                        ^~~~\n/tmp/tmplq360wym.swift:25:30:\
    \ error: use of local variable 'sqrt' before its declaration\n    let sqrt: Int\
    \ = Int(ceil(sqrt(Double(n))))\n                             ^\n/tmp/tmplq360wym.swift:25:9:\
    \ note: 'sqrt' declared here\n    let sqrt: Int = Int(ceil(sqrt(Double(n))))\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    _ = aerospike.with_statistics {\n       \
    \ // Only calculate prime numbers, and don't calculate them more than once\n \
    \       if n < 1 {\n            return false\n        }\n        if n < 2 {\n\
    \            return true\n        }\n        if n % 2 == 0 {\n            return\
    \ false\n        }\n        for i in 2..Int(n) {\n            if n % i == 0 {\n\
    \                return false\n            }\n        }\n        return true\n\
    \    }\n\n    _ = aerospike.with_statistics {\n        // Calculate prime numbers\n\
    \        for i := 2; i <= Int(n); i++ {\n            if n % i == 0 {\n       \
    \         return false\n            }\n        }\n        return true\n    }\n\
    \n    switch {\n    case n % 2 == 0:\n        return false\n    case n == 3:\n\
    \        return true\n    case n >= 4:\n        return true\n    case n >= 6:\n\
    \        return true\n    case n >= 8:\n        return true\n    default:\n  \
    \      return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqotmfd94.swift:39:16: error: expected type\n        for i := 2;\
    \ i <= Int(n); i++ {\n               ^\n                <#type#>\n/tmp/tmpqotmfd94.swift:39:16:\
    \ error: expected 'in' after for-each pattern\n        for i := 2; i <= Int(n);\
    \ i++ {\n               ^\n/tmp/tmpqotmfd94.swift:39:16: error: expected Sequence\
    \ expression for for-each loop\n        for i := 2; i <= Int(n); i++ {\n     \
    \          ^\n/tmp/tmpqotmfd94.swift:47:12: error: expected expression in 'switch'\
    \ statement\n    switch {\n           ^\n/tmp/tmpqotmfd94.swift:18:9: error: cannot\
    \ find 'aerospike' in scope\n    _ = aerospike.with_statistics {\n        ^~~~~~~~~\n\
    /tmp/tmpqotmfd94.swift:29:19: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n        for i in 2..Int(n) {\n                  ^~\n          \
    \        ...\n/tmp/tmpqotmfd94.swift:37:9: error: cannot find 'aerospike' in scope\n\
    \    _ = aerospike.with_statistics {\n        ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    let max_divisor = UInt32(n)\n    func is_divisor(dividend:\
    \ UInt32, dividend: UInt32) -> (Bool, UInt32) {\n        if dividend == max_divisor\
    \ {\n            return (false, dividend)\n        }\n        if dividend == 1\
    \ {\n            return (false, dividend)\n        }\n        let lower = dividend\
    \ / 2\n        let upper = (dividend + lower) / 2\n        switch dividend {\n\
    \        case 1, lower:\n            return (false, dividend)\n        case lower:\n\
    \            return (is_divisor(lower, upper), dividend)\n        case upper:\n\
    \            return (is_divisor(lower, upper), dividend)\n        default:\n \
    \           return (is_divisor(lower, upper), dividend)\n        }\n    }\n  \
    \  let (prime, high) = (is_divisor(n, UInt32(n))?.1.0, UInt32(n))\n    return\
    \ (prime && high != max_divisor), prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaw2kcm6s.swift:49:42: error: consecutive statements on a line must\
    \ be separated by ';'\n    return (prime && high != max_divisor), prime\n    \
    \                                     ^\n                                    \
    \     ;\n/tmp/tmpaw2kcm6s.swift:49:42: error: expected expression\n    return\
    \ (prime && high != max_divisor), prime\n                                    \
    \     ^\n/tmp/tmpaw2kcm6s.swift:28:39: error: invalid redeclaration of 'dividend'\n\
    \    func is_divisor(dividend: UInt32, dividend: UInt32) -> (Bool, UInt32) {\n\
    \                                      ^\n/tmp/tmpaw2kcm6s.swift:28:21: note:\
    \ 'dividend' previously declared here\n    func is_divisor(dividend: UInt32, dividend:\
    \ UInt32) -> (Bool, UInt32) {\n                    ^\n/tmp/tmpaw2kcm6s.swift:41:20:\
    \ error: cannot convert return expression of type '((Bool, UInt32), UInt32)' to\
    \ return type '(Bool, UInt32)'\n            return (is_divisor(lower, upper),\
    \ dividend)\n                   ^\n/tmp/tmpaw2kcm6s.swift:41:31: error: missing\
    \ argument labels 'dividend:dividend:' in call\n            return (is_divisor(lower,\
    \ upper), dividend)\n                              ^\n                       \
    \        dividend:  dividend: \n/tmp/tmpaw2kcm6s.swift:43:20: error: cannot convert\
    \ return expression of type '((Bool, UInt32), UInt32)' to return type '(Bool,\
    \ UInt32)'\n            return (is_divisor(lower, upper), dividend)\n        \
    \           ^\n/tmp/tmpaw2kcm6s.swift:43:31: error: missing argument labels 'dividend:dividend:'\
    \ in call\n            return (is_divisor(lower, upper), dividend)\n         \
    \                     ^\n                               dividend:  dividend: \n\
    /tmp/tmpaw2kcm6s.swift:45:20: error: cannot convert return expression of type\
    \ '((Bool, UInt32), UInt32)' to return type '(Bool, UInt32)'\n            return\
    \ (is_divisor(lower, upper), dividend)\n                   ^\n/tmp/tmpaw2kcm6s.swift:45:31:\
    \ error: missing argument labels 'dividend:dividend:' in call\n            return\
    \ (is_divisor(lower, upper), dividend)\n                              ^\n    \
    \                        "
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 0 {\n        return false\n    }\n\
    \    var sum: Int = 0\n    var i: Int\n    for i = 2; i <= Int(sqrtDouble(n))\
    \ && is_prime(i) {\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqn297x3a.swift:23:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= Int(sqrtDouble(n)) && is_prime(i) {\n    ^ \
    \  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n > 1 {\n        for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n            if n == factor * factor {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzhfcxo04.swift:19:24: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for factor in 2..Int(sqrt(Double(n))) + 1 {\n \
    \                      ^~\n                       ...\n/tmp/tmpzhfcxo04.swift:19:30:\
    \ error: cannot find 'sqrt' in scope\n        for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n                             ^~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tswitch n {\n\tcase 2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97:\n\t\t\
    return true\n\tdefault:\n\t\treturn false\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp0f1_2po3/tmp0f1_2po3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a3af82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a3ac79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a3ac79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a3ac787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f1_2po3                        0x000055e3384e4227 <unavailable> + 4647

    5    libc.so.6                          0x00002b0a3b16e460 __libc_start_main +
    245

    6    tmp0f1_2po3                        0x000055e3384e3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    \n    // if n is odd, then it can't be prime\n\
    \    if n % 2 == 1 {\n        return false\n    }\n    \n    // set max2 to sqrt\
    \ n\n    var max2 = Int(sqrt(Double(n)))\n    \n    // loop until we find a factor\
    \ of n that isn't 1 or n\n    for i := 2; i < max2; i ++ {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpha_hgtua.swift:28:12: error: expected type\n    for i := 2; i <\
    \ max2; i ++ {\n           ^\n            <#type#>\n/tmp/tmpha_hgtua.swift:28:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i < max2; i ++\
    \ {\n           ^\n/tmp/tmpha_hgtua.swift:28:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i < max2; i ++ {\n           ^\n/tmp/tmpha_hgtua.swift:25:20:\
    \ error: cannot find 'sqrt' in scope\n    var max2 = Int(sqrt(Double(n)))\n  \
    \                 ^~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // base case: n is 1\n    if n == 1 {\n \
    \       return true\n    }\n\n    // base case: n is prime\n    if n == 2 {\n\
    \        return true\n    }\n\n    // base case: n is even\n    if n % 2 == 0\
    \ {\n        return false\n    }\n\n    // base case: n is odd\n    for i := 3;\
    \ i <= Int(sqrt(Double(n))); i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4xi4vtlf.swift:34:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmp4xi4vtlf.swift:34:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmp4xi4vtlf.swift:34:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for num in 2...n {\n        if n % num == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp3n_z0e6b/tmp3n_z0e6b.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9663ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9660e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9660e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9660e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3n_z0e6b                        0x00005645efa353a7 <unavailable> + 5031

    5    libc.so.6                          0x00002ba9665d8460 __libc_start_main +
    245

    6    tmp3n_z0e6b                        0x00005645efa34fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 0 {\n        return false\n    }\n\
    \n    // Check whether n is Prime from Sieve of Eratosthenes Algorithm\n    if\
    \ n == 1 || n % 2 == 0 {\n        return false\n    }\n\n    for let testNum =\
    \ Int(sqrt(Double(n))) ... Int(n) {\n        if testNum * testNum > n {\n    \
    \        return false\n        }\n\n        if n % testNum == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplgusu6nb.swift:27:9: error: 'let' pattern cannot appear nested\
    \ in an already immutable context\n    for let testNum = Int(sqrt(Double(n)))\
    \ ... Int(n) {\n        ^\n/tmp/tmplgusu6nb.swift:27:21: error: expected 'in'\
    \ after for-each pattern\n    for let testNum = Int(sqrt(Double(n))) ... Int(n)\
    \ {\n                    ^\n/tmp/tmplgusu6nb.swift:27:21: error: expected Sequence\
    \ expression for for-each loop\n    for let testNum = Int(sqrt(Double(n))) ...\
    \ Int(n) {\n                    ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    switch n {\n    case 0:\n        return true\n\
    \    case 1:\n        return true\n    case 2:\n        return true\n    case\
    \ 3:\n        return true\n    case 4:\n        return true\n    case 5:\n   \
    \     return true\n    case 6:\n        return true\n    case 7:\n        return\
    \ true\n    case 8:\n        return true\n    case 9:\n        return true\n \
    \   case 10:\n        return true\n    case 11:\n        return true\n    case\
    \ 12:\n        return true\n    case 13:\n        return true\n    case 14:\n\
    \        return true\n    case 15:\n        return true\n    case 16:\n      \
    \  return true\n    case 17:\n        return true\n    case 18:\n        return\
    \ true\n    case 19:\n        return true\n    case 20:\n        return true\n\
    \    case 21:\n        return true\n    case 22:\n        return true\n    case\
    \ 23:\n        return true\n    case 24:\n        return true\n    case 25:\n\
    \        return true\n    case 26:\n        return true\n    case 27:\n      \
    \  return true\n    case 28:\n        return true\n    case 29:\n        return\
    \ true\n    case 30:\n        return true\n    case 31:\n        return true\n\
    \    case 32:\n        return true\n    case 33:\n        return true\n    case\
    \ 34:\n        return true\n    case 35:\n        return true\n    case 36:\n\
    \        return true\n    case 37:\n        return true\n    case 38:\n      \
    \  return true\n    case 39:\n        return true\n    case 40:\n        return\
    \ true\n    case 41:\n        return true\n    case 42:\n        return true\n\
    \    case 43:\n        return true\n    case 44:\n        return true\n    case\
    \ 45:\n        return true\n    case 46:\n        return true\n    case 47:\n\
    \        return true\n    case 48:\n        return true\n    case 49:\n      \
    \  return true\n    case 50:\n        return true\n    case 51:\n        return\
    \ true\n    case 52:\n        return true\n    case 53:\n        return true\n\
    \    case 54:\n        return true\n    case 55:\n        return true\n    case\
    \ 56:\n        return true\n    case 57:\n        return true\n    case 58:\n\
    \        return true\n    case 59:\n        return true\n    case 60:\n      \
    \  return true\n    case 61:\n        return true\n    case 62:\n        return\
    \ true\n    case 63:\n        return true\n    case 64:\n        return true\n\
    \    case 65:\n        return true\n    case 66:\n        return true\n    case\
    \ 67:\n        return true\n    case 68:\n        return true\n    case 69:\n\
    \        return true\n    case 70:\n        return true\n    case 71:\n      \
    \  return true\n    case 72:\n        return true\n    case 73:\n        return\
    \ true\n    case 74:\n        return true\n    case 75:\n        return true\n\
    \    case 76\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfc63s3t4.swift:171:12: error: expected ':' after 'case'\n    case\
    \ 76\n           ^\n/tmp/tmpfc63s3t4.swift:199:37: error: expected '}' at end\
    \ of brace statement\nassert(is_prime(n: 255379) == false)\n                 \
    \                   ^\n/tmp/tmpfc63s3t4.swift:17:31: note: to match this opening\
    \ '{'\nfunc is_prime(n: Int) -> Bool {\n                              ^\n/tmp/tmpfc63s3t4.swift:18:5:\
    \ error: switch must be exhaustive\n    switch n {\n    ^\n/tmp/tmpfc63s3t4.swift:18:5:\
    \ note: do you want to add a default clause?\n    switch n {\n    ^\n/tmp/tmpfc63s3t4.swift:175:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\treturn is_prime(n: n, max: Double(UInt32(UInt32.max)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoj5m4ctc.swift:18:29: error: extra argument 'max' in call\n   \
    \     return is_prime(n: n, max: Double(UInt32(UInt32.max)))\n               \
    \        ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    assert(n > 1)\n    var result = false\n \
    \   for number in 2...n {\n        let is_prime = is_prime_helper(number, primes)\n\
    \        result = result || is_prime\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg_vq8iuh.swift:21:24: error: cannot find 'is_prime_helper' in scope\n\
    \        let is_prime = is_prime_helper(number, primes)\n                    \
    \   ^~~~~~~~~~~~~~~\n/tmp/tmpg_vq8iuh.swift:21:48: error: cannot find 'primes'\
    \ in scope\n        let is_prime = is_prime_helper(number, primes)\n         \
    \                                      ^~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var p = 5\n    var p_sq = n * n\n    while i <= p_sq {\n        var m = 5\n\
    \        while m <= i {\n            if n%m == 0 {\n                return false\n\
    \            }\n            m += i\n        }\n        i += 6\n        p = p +\
    \ (n / i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmppcw7f3vt/tmppcw7f3vt.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdd0c3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdd0932b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdd0932988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdd09317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcw7f3vt                        0x0000563659881579 <unavailable> + 5497

    5    libc.so.6                          0x00002abdd0e27460 __libc_start_main +
    245

    6    tmppcw7f3vt                        0x0000563659880ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    assert(n > 2)\n    \n    var result = true\n\
    \    var j: Int\n    \n    for i in 2..(n - 1) {\n        if n % i == 0 {\n  \
    \          result = false\n            break\n        }\n        j = i + 1\n \
    \       while j < n {\n            if n % j == 0 {\n                result = false\n\
    \                break\n            }\n            j += 1\n        }\n       \
    \ if result {\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi3mat7q9.swift:23:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 2..(n - 1) {\n              ^~\n         \
    \     ...\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 || n == 2 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i in 3...n /\
    \ 2 {\n        if n % i == 0 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp7lvf38o4/tmp7lvf38o4.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd31a41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd31738b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd31738988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd317377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7lvf38o4                        0x00005582507d85ef <unavailable> + 5615

    5    libc.so.6                          0x00002afd31c2d460 __libc_start_main +
    245

    6    tmp7lvf38o4                        0x00005582507d7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // Trial division yields false for a prime\
    \ number greater than 2.\n    if n == 1 {\n        return true\n    }\n    //\
    \ Sieve of Eratosthenes says n^0.5 is prime\n    if n < 2 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    // n is divisible\
    \ by 2, so we have three possible primes\n    // 1, 2, and 3\n    let a = 2\n\
    \    let b = ((3 * (n + 1)) / 2) - a\n    var c = Int(b)\n    guard c >= 0 else\
    \ {\n        return false\n    }\n    // Test all multiples of n\n    for d in\
    \ 3 ..< (n + 1) {\n        if n % d == 0 {\n            return false\n       \
    \ }\n    }\n    guard is_prime(a - 1) else {\n        return false\n    }\n  \
    \  guard is_prime(b + 1) else {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2dn4moox.swift:43:20: error: missing argument label 'n:' in call\n\
    \    guard is_prime(a - 1) else {\n                   ^\n                   n:\
    \ \n/tmp/tmp2dn4moox.swift:46:20: error: missing argument label 'n:' in call\n\
    \    guard is_prime(b + 1) else {\n                   ^\n                   n:\
    \ \n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // return Int(log2(n))\n    switch n {\n\
    \    case 2 ... 20:\n        return true\n    case 2...19:\n        return is_prime(n\
    \ - 1)\n    case 1...16:\n        return is_prime(n - 2)\n    case 1...15:\n \
    \       return is_prime(n - 3)\n    case 1...14:\n        return is_prime(n -\
    \ 4)\n    case 1...13:\n        return is_prime(n - 5)\n    case 1...12:\n   \
    \     return is_prime(n - 6)\n    case 1...11:\n        return is_prime(n - 7)\n\
    \    case 1...10:\n        return is_prime(n - 8)\n    case 1...9:\n        return\
    \ is_prime(n - 9)\n    case 1...8:\n        return is_prime(n - 10)\n    case\
    \ 1...7:\n        return is_prime(n - 11)\n    case 1...6:\n        return is_prime(n\
    \ - 12)\n    case 1...5:\n        return is_prime(n - 13)\n    case 1...4:\n \
    \       return is_prime(n - 14)\n    case 1...3:\n        return is_prime(n -\
    \ 15)\n    case 1...2:\n        return is_prime(n - 16)\n    case 1...1:\n   \
    \     return is_prime(n - 17)\n    case 1...0:\n        return is_prime(n - 18)\n\
    \    default:\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpplss_t2i.swift:23:25: error: missing argument label 'n:' in call\n\
    \        return is_prime(n - 1)\n                        ^\n                 \
    \       n: \n/tmp/tmpplss_t2i.swift:25:25: error: missing argument label 'n:'\
    \ in call\n        return is_prime(n - 2)\n                        ^\n       \
    \                 n: \n/tmp/tmpplss_t2i.swift:27:25: error: missing argument label\
    \ 'n:' in call\n        return is_prime(n - 3)\n                        ^\n  \
    \                      n: \n/tmp/tmpplss_t2i.swift:29:25: error: missing argument\
    \ label 'n:' in call\n        return is_prime(n - 4)\n                       \
    \ ^\n                        n: \n/tmp/tmpplss_t2i.swift:31:25: error: missing\
    \ argument label 'n:' in call\n        return is_prime(n - 5)\n              \
    \          ^\n                        n: \n/tmp/tmpplss_t2i.swift:33:25: error:\
    \ missing argument label 'n:' in call\n        return is_prime(n - 6)\n      \
    \                  ^\n                        n: \n/tmp/tmpplss_t2i.swift:35:25:\
    \ error: missing argument label 'n:' in call\n        return is_prime(n - 7)\n\
    \                        ^\n                        n: \n/tmp/tmpplss_t2i.swift:37:25:\
    \ error: missing argument label 'n:' in call\n        return is_prime(n - 8)\n\
    \                        ^\n                        n: \n/tmp/tmpplss_t2i.swift:39:25:\
    \ error: missing argument label 'n:' in call\n        return is_prime(n - 9)\n\
    \                        ^\n                        n: \n/tmp/tmpplss_t2i.swift:41:25:\
    \ error: missing argument label 'n:' in call\n        return is_prime(n - 10)\n\
    \                        ^\n                        n: \n/tmp/tmpplss_t2i.swift:43:25:\
    \ error: missing argument label 'n:' in call\n        return is_prime(n - 11)\n\
    \                        ^\n                        n: \n/tmp/tmpplss_t2i.swift:45:25:\
    \ error: missing argument label 'n:' in call\n        return is_prime(n - 12)\n\
    \                        ^\n                        n: \n/tmp/tmpplss_t2i.swift:47:25:\
    \ error: missing argument label 'n:' in call\n        return is_prime(n - 13)\n\
    \                        ^\n                  "
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \n    if n == 2 {\n        return true\n    }\n\n    if n % 2 == 0 {\n       \
    \ return false\n    }\n\n    let limit: UInt64 = 1\n    let limit = pow(limit,\
    \ Double(n)/Double(2))\n\n    for d in 1..<limit {\n        if n%d == 0 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5zbyy3k8.swift:31:17: error: cannot find 'pow' in scope\n    let\
    \ limit = pow(limit, Double(n)/Double(2))\n                ^~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return n >= 2 && primes_sieve.contains(Int(n\
    \ - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe73zg3e7.swift:18:22: error: cannot find 'primes_sieve' in scope\n\
    \    return n >= 2 && primes_sieve.contains(Int(n - 1))\n                    \
    \ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    // Check factors.\n    var factors = [Int]()\n    for var i = 2; i <= Int(sqrt(Double(n)));\
    \ i++ {\n        if n % i == 0 {\n            factors.append(i)\n        }\n \
    \   }\n\n    // Check primality of factors.\n    for factor in factors {\n   \
    \     if n == factor {\n            return true\n        }\n    }\n\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy_4f21zi.swift:24:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= Int(sqrt(Double(n))); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 || n == 0 {\n        return false\n\
    \    }\n    // Check n is prime\n    if n == 1 {\n        return true\n    }\n\
    \n    // Test if n is odd or even\n    if n % 2 != 0 {\n        return false\n\
    \    }\n    var sq = n * n\n    for factor in 2..Int(sq.truncatingRemainder(_))\
    \ {\n        if factor > Int(sq) {\n            return false\n        }\n    \
    \    if n % (factor) == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppshd39rs.swift:31:20: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for factor in 2..Int(sq.truncatingRemainder(_)) {\n\
    \                   ^~\n                   ...\n/tmp/tmppshd39rs.swift:31:49:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \    for factor in 2..Int(sq.truncatingRemainder(_)) {\n                     \
    \                           ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: This could be much faster, for instance\
    \ by computing primes less often\n    // https://medium.com/@kasperlkraus/prime-numbers-in-swift-d9611d7ef983\n\
    \    if n < 2 {\n        return false\n    }\n\n    // TODO: Use trial division\n\
    \    for i in 2..<n {\n        if n%i == 0 {\n            return false\n     \
    \   }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let n1 = pow(Double(n) / Double(p - 1), Double(p\
    \ - 1))\n    return n1 >= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmptrlanyrb.swift:18:14: error: cannot find 'pow' in scope\n    let\
    \ n1 = pow(Double(n) / Double(p - 1), Double(p - 1))\n             ^~~\n/tmp/tmptrlanyrb.swift:18:37:\
    \ error: cannot find 'p' in scope\n    let n1 = pow(Double(n) / Double(p - 1),\
    \ Double(p - 1))\n                                    ^\n/tmp/tmptrlanyrb.swift:18:52:\
    \ error: cannot find 'p' in scope\n    let n1 = pow(Double(n) / Double(p - 1),\
    \ Double(p - 1))\n                                                   ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  // TODO: this implementation has some exponential\
    \ time complexity,\n  // consider using PollardRho to perform this more efficiently.\n\
    \  if n < 2 {\n    return false\n  }\n  var d = 0\n  var nDivTwo = n * n - 1\n\
    \  for i := 1; i <= nDivTwo; i += 2 {\n    d = (d * i) % n\n    if d == 0 {\n\
    \      return false\n    }\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4mwupf9g.swift:25:10: error: expected type\n  for i := 1; i <=\
    \ nDivTwo; i += 2 {\n         ^\n          <#type#>\n/tmp/tmp4mwupf9g.swift:25:10:\
    \ error: expected 'in' after for-each pattern\n  for i := 1; i <= nDivTwo; i +=\
    \ 2 {\n         ^\n/tmp/tmp4mwupf9g.swift:25:10: error: expected Sequence expression\
    \ for for-each loop\n  for i := 1; i <= nDivTwo; i += 2 {\n         ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    var m = 2\n    for _n in 2...n {\n        if m % _n == 0 {\n           \
    \ return false\n        }\n        m *= _n\n    }\n\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpgpbtz_7v/tmpgpbtz_7v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63e2648c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63e233fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63e233f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63e233e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpbtz_7v                        0x0000559516a1c3a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b63e2834460 __libc_start_main +
    245

    6    tmpgpbtz_7v                        0x0000559516a1bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\t// Check if n is prime, for speed optimization.\
    \ See\n\t// http://blog.codidact.com/posts/speeding-up-primality-checks-with-primes-under-2000\n\
    \tif n < 2 {\n\t\treturn false\n\t}\n\n\t// If n is prime then return true, else\
    \ check if n is\n\t// divisible by any prime number less than the square root\
    \ of\n\t// n. For example, 61 is divisible by 4, but not by any of the\n\t// numbers\
    \ less than 61.\n\tfor d := 2; d * d <= n; d++ {\n\t\tif n % d == 0 {\n\t\t\t\
    return false\n\t\t}\n\t}\n\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjfohtkj2.swift:28:9: error: expected type\n        for d := 2;\
    \ d * d <= n; d++ {\n               ^\n                <#type#>\n/tmp/tmpjfohtkj2.swift:28:9:\
    \ error: expected 'in' after for-each pattern\n        for d := 2; d * d <= n;\
    \ d++ {\n               ^\n/tmp/tmpjfohtkj2.swift:28:9: error: expected Sequence\
    \ expression for for-each loop\n        for d := 2; d * d <= n; d++ {\n      \
    \         ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var i: Int = 0\n    var d: Int = 0\n\n  \
    \  if n <= 1 {\n        return false\n    }\n\n    d = 2\n    while d * d <= n\
    \ {\n        if n % d == 0 {\n            return false\n        }\n        d +=\
    \ 1\n    }\n\n    for i = 2; i < d; i++ {\n        if n % i == 0 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4cfhp0lo.swift:33:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < d; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    switch n {\n    case 2:\n        return true\n\
    \    case 3:\n        return true\n    case 5:\n        return true\n    case\
    \ 7:\n        return true\n    case 11:\n        return true\n    case 13:\n \
    \       return true\n    case 19:\n        return true\n    default:\n       \
    \ switch IntLog(n, 10) {\n        case 0:\n            return n == 2\n       \
    \ case 1:\n            return n == 3 || n == 5 || n == 7 || n == 11\n        case\
    \ 2:\n            return n == 13 || n == 19 || n == 23\n        case 3:\n    \
    \        return n == 17 || n == 23\n        case 4:\n            return n <= 42\
    \ && n % 2 == 0\n        case 5:\n            return n <= 47 && n % 3 == 0\n \
    \       case 6:\n            return n <= 50 && n % 5 == 0\n        case 7:\n \
    \           return n <= 55 && n % 7 == 0\n        case 8:\n            return\
    \ n <= 59 && n % 11 == 0\n        case 9:\n            return n <= 61 && n % 13\
    \ == 0\n        case 10:\n            return n <= 91 && n % 19 == 0\n        case\
    \ 11:\n            return n <= 99 && n % 23 == 0\n        case 12:\n         \
    \   return n <= 105 && n % 17 == 0\n        case 13:\n            return n <=\
    \ 111 && n % 23 == 0\n        case 14:\n            return n <= 113 && n % 17\
    \ == 0\n        case 15:\n            return n <= 121 && n % 23 == 0\n       \
    \ case 16:\n            return n <= 127 && n % 17 == 0\n        case 17:\n   \
    \         return n <= 135 && n % 23 == 0\n        case 18:\n            return\
    \ n <= 141 && n % 17 == 0\n        case 19:\n            return n <= 143 && n\
    \ % 23 == 0\n        case 20:\n            return n <= 151 && n % 17 == 0\n  \
    \      case 21:\n            return n <= 159 && n % 23 == 0\n        case 22:\n\
    \            return n <= 167 && n % 17 == 0\n        case 23:\n            return\
    \ n <= 175 && n % 23 == 0\n        case 24:\n            return n <= 181 && n\
    \ % 17 == 0\n        case 25:\n            return n <= 189 && n % 23 == 0\n  \
    \      case 26:\n            return n <= 195 && n % 17 == 0\n        case 27:\n\
    \            return n <= 201 && n % 23 == 0\n        case 28:\n            return\
    \ n <= 209 && n % 17 == 0\n        case 29:\n            return n <= 217 && n\
    \ % 23 == 0\n        case 30:\n            return n <= 223 && n % 17 == 0\n  \
    \      case 31:\n            return n <= 227 && n % 23 == 0\n        case 32:\n\
    \            return n <= 235 && n % 17 == 0\n        case 33:\n            return\
    \ n <= 241 && n % 23 == 0\n        case 34:\n            return n <= 249 && n\
    \ % 17 == 0\n        case 35:\n            return n <= 255 && n % 23 == 0\n  \
    \      case 36:\n            return \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptraggdlm.swift:136:37: error: expected '}' at end of 'switch' statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmptraggdlm.swift:18:14: note: to match this opening '{'\n    switch n {\n\
    \             ^\n/tmp/tmptraggdlm.swift:136:37: error: expected '}' at end of\
    \ brace statement\nassert(is_prime(n: 255379) == false)\n                    \
    \                ^\n/tmp/tmptraggdlm.swift:17:31: note: to match this opening\
    \ '{'\nfunc is_prime(n: Int) -> Bool {\n                              ^\n/tmp/tmptraggdlm.swift:34:16:\
    \ error: cannot find 'IntLog' in scope\n        switch IntLog(n, 10) {\n     \
    \          ^~~~~~\n/tmp/tmptraggdlm.swift:108:13: error: non-void function should\
    \ return a value\n            return \n            ^\n/tmp/tmptraggdlm.swift:112:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // Check argument\n    if n < 2 {\n     \
    \   return false\n    }\n\n    // Initialize a counter\n    var counter = 1\n\
    \    var divisible = true\n\n    // Check the first number\n    if n % 2 == 0\
    \ {\n        return false\n    }\n\n    // Check all other numbers\n    func is_divisible(_\
    \ num: Int) -> Bool {\n        // If the number is divisible, return false\n \
    \       if num % counter == 0 {\n            return false\n        }\n\n     \
    \   // Otherwise, increment the counter\n        counter += 1\n        return\
    \ true\n    }\n\n    // Check if the number is divisible by the counter until\
    \ it reaches n\n    for i in 1...n {\n        if !is_divisible(i) {\n        \
    \    divisible = false\n            break\n        }\n    }\n\n    return divisible\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpqmwryus0/tmpqmwryus0.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a7258dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a72284b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a72284988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a722837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqmwryus0                        0x0000564f14a5f527 <unavailable> + 5415

    5    libc.so.6                          0x00002b7a72779460 __libc_start_main +
    245

    6    tmpqmwryus0                        0x0000564f14a5f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\t// Primality Test\n\tif n <= 1 {\n\t\treturn\
    \ false\n\t}\n\tvar i Int64 = 1\n\tvar t Int64 = 2\n\twhile t <= n / 2 {\n\t\t\
    i += t * t\n\t\tif i == n {\n\t\t\treturn true\n\t\t}\n\t\tt *= 2\n\t}\n\treturn\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjxh3qphe.swift:22:8: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var i Int64\
    \ = 1\n              ^\n/tmp/tmpjxh3qphe.swift:22:8: note: join the identifiers\
    \ together\n        var i Int64 = 1\n            ~~^~~~~\n            iInt64\n\
    /tmp/tmpjxh3qphe.swift:23:8: error: found an unexpected second identifier in variable\
    \ declaration; is there an accidental break?\n        var t Int64 = 2\n      \
    \        ^\n/tmp/tmpjxh3qphe.swift:23:8: note: join the identifiers together\n\
    \        var t Int64 = 2\n            ~~^~~~~\n            tInt64\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if is_prime(n) == true {\n        return\
    \ true\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiuuk1q_k.swift:18:17: error: missing argument label 'n:' in call\n\
    \    if is_prime(n) == true {\n                ^\n                n: \n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n\
    \    if n < 2 {\n        return false\n    }\n\n    let max = (1 << UInt(n)) -\
    \ 1\n    var i = 2\n\n    // Check if odd number\n    for (i = 2; i < max; i +=\
    \ 2) {\n        if n % i == 0 {\n            return false\n        }\n    }\n\n\
    \    // Check if the number is prime\n    for (i = 2; i < max; i += 2) {\n   \
    \     if n % i == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzoj6eyoz.swift:29:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (i = 2; i < max; i += 2) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzoj6eyoz.swift:36:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for (i = 2; i < max; i += 2) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tif n < 2 {\n\t\treturn false\n\t}\n\tif n ==\
    \ 2 {\n\t\treturn true\n\t}\n\t\n\t// Test if n is prime\n\tvar k uint32 = 1\n\
    \tfor i := 0; i < k; i++ {\n\t\tif n % i == 0 {\n\t\t\treturn false\n\t\t}\n\t\
    }\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmphr1o1hrj.swift:26:8: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var k uint32\
    \ = 1\n              ^\n/tmp/tmphr1o1hrj.swift:26:8: note: join the identifiers\
    \ together\n        var k uint32 = 1\n            ~~^~~~~~\n            kuint32\n\
    /tmp/tmphr1o1hrj.swift:26:8: note: join the identifiers together with camel-case\n\
    \        var k uint32 = 1\n            ~~^~~~~~\n            kUint32\n/tmp/tmphr1o1hrj.swift:27:9:\
    \ error: expected type\n        for i := 0; i < k; i++ {\n               ^\n \
    \               <#type#>\n/tmp/tmphr1o1hrj.swift:27:9: error: expected 'in' after\
    \ for-each pattern\n        for i := 0; i < k; i++ {\n               ^\n/tmp/tmphr1o1hrj.swift:27:9:\
    \ error: expected Sequence expression for for-each loop\n        for i := 0; i\
    \ < k; i++ {\n               ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var max: Int\n    if n == 1 {\n        return\
    \ true\n    } else if n < 2 {\n        return false\n    } else if n == 2 {\n\
    \        return true\n    }\n    max = (n-1)/2\n    for _n in 1..max {\n     \
    \   if n%_n == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphmlxwwv1.swift:27:16: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for _n in 1..max {\n               ^~\n           \
    \    ...\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  // TODO: Make this O(sqrt(n)) instead of O(n).\n\
    \  let m = Int(ceil(sqrt(Double(n))))\n  for p in 2..m {\n    if (n % p == 0)\
    \ return false\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpept8nebi.swift:21:21: error: expected '{' after 'if' condition\n\
    \    if (n % p == 0) return false\n                    ^\n/tmp/tmpept8nebi.swift:19:15:\
    \ error: cannot find 'ceil' in scope\n  let m = Int(ceil(sqrt(Double(n))))\n \
    \             ^~~~\n/tmp/tmpept8nebi.swift:19:20: error: cannot find 'sqrt' in\
    \ scope\n  let m = Int(ceil(sqrt(Double(n))))\n                   ^~~~\n/tmp/tmpept8nebi.swift:20:13:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n  for p in 2..m\
    \ {\n            ^~\n            ...\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let log2 = Int(log2(n))\n    if log2 == 1\
    \ {\n        return n == 1\n    }\n    if n == 0 || n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 2..=Int(log2(n)) {\n        if n % i == 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjsa6qsoz.swift:18:20: error: use of local variable 'log2' before\
    \ its declaration\n    let log2 = Int(log2(n))\n                   ^\n/tmp/tmpjsa6qsoz.swift:18:9:\
    \ note: 'log2' declared here\n    let log2 = Int(log2(n))\n        ^\n/tmp/tmpjsa6qsoz.swift:25:15:\
    \ error: cannot find operator '..=' in scope\n    for i in 2..=Int(log2(n)) {\n\
    \              ^~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let base: Int = 2\n    let max: Int = pow(Int(ceil(log2(Double(n))))-1,\
    \ Double(base))\n    return n > 0 && n < max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeiol1ekc.swift:19:20: error: cannot find 'pow' in scope\n    let\
    \ max: Int = pow(Int(ceil(log2(Double(n))))-1, Double(base))\n               \
    \    ^~~\n/tmp/tmpeiol1ekc.swift:19:28: error: cannot find 'ceil' in scope\n \
    \   let max: Int = pow(Int(ceil(log2(Double(n))))-1, Double(base))\n         \
    \                  ^~~~\n/tmp/tmpeiol1ekc.swift:19:33: error: cannot find 'log2'\
    \ in scope\n    let max: Int = pow(Int(ceil(log2(Double(n))))-1, Double(base))\n\
    \                                ^~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \n    if n % 2 == 0 {\n        return false\n    }\n\n    var max_factor: Int\
    \ = Int(sqrt(Double(n)))\n    var max_factor_index = -1\n    var i = 2\n    for\
    \ index in 0..<n {\n        if n % i == 0 {\n            if max_factor_index ==\
    \ -1 || max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = index\n            }\n        }\n        i += 1\n    }\n    return max_factor_index\
    \ < n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxyjfgjgn.swift:26:31: error: cannot find 'sqrt' in scope\n    var\
    \ max_factor: Int = Int(sqrt(Double(n)))\n                              ^~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var n = n\n    if n < 2 || n == 1 {\n   \
    \     return false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    for number in 2...n {\n        if n % number == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp1lvxhwol/tmp1lvxhwol.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22550e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2254dd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2254dd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2254dd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1lvxhwol                        0x000055b3f7edb3a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b22552ce460 __libc_start_main +
    245

    6    tmp1lvxhwol                        0x000055b3f7edafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return true\n    }\n\n\
    \    var j: Int = 0\n    var d: Int = 0\n    var t: Int = 0\n    var m: Int =\
    \ 0\n    var s: Int = 0\n    var a: Int = 0\n\n    for {\n        a = 2\n    \
    \    m = n\n\n        for {\n            a += m\n            m += m\n        \
    \    d += m\n            t = n\n            while t % a == 0 {\n             \
    \   t = t / a\n            }\n            s += t\n            if s == m {\n  \
    \              return true\n            }\n        } while m < n\n    } while\
    \ n < 2\n\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_ejqa3kb.swift:29:9: error: expected pattern\n    for {\n     \
    \   ^\n/tmp/tmp_ejqa3kb.swift:29:9: error: expected Sequence expression for for-each\
    \ loop\n    for {\n        ^\n/tmp/tmp_ejqa3kb.swift:33:13: error: expected pattern\n\
    \        for {\n            ^\n/tmp/tmp_ejqa3kb.swift:33:13: error: expected Sequence\
    \ expression for for-each loop\n        for {\n            ^\n/tmp/tmp_ejqa3kb.swift:45:10:\
    \ error: consecutive statements on a line must be separated by ';'\n        }\
    \ while m < n\n         ^\n         ;\n/tmp/tmp_ejqa3kb.swift:45:22: error: expected\
    \ '{' after 'while' condition\n        } while m < n\n                     ^\n\
    /tmp/tmp_ejqa3kb.swift:46:6: error: consecutive statements on a line must be separated\
    \ by ';'\n    } while n < 2\n     ^\n     ;\n/tmp/tmp_ejqa3kb.swift:46:18: error:\
    \ expected '{' after 'while' condition\n    } while n < 2\n                 ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if is_prime_generic(n) {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmppcb9x18w.swift:18:8: error: cannot find 'is_prime_generic' in scope\n\
    \    if is_prime_generic(n) {\n       ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var i = 2\n    var res = true\n    while\
    \ i < n {\n        if n % i == 0 {\n            res = false\n            break\n\
    \        }\n        i += 1\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmph84xahae/tmph84xahae.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0be8b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0be5aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0be5ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0be5ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph84xahae                        0x000056518dc944ff <unavailable> + 5375

    5    libc.so.6                          0x00002ac0beaa3460 __libc_start_main +
    245

    6    tmph84xahae                        0x000056518dc93ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    var i = 2\n    var d: Int = 0\n    while i <= n {\n        if isPrime(i)\
    \ {\n            d = i\n        } else {\n            i += d\n        }\n    }\n\
    \    return i != n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpre20d07w.swift:24:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(i) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tif n == 1 {\n\t\treturn false\n\t}\n\tlet m\
    \ = trunc(sqrt(Double(n)))\n\tlet max = (m - Int(1)) / 2\n\tif Int(max) == m {\n\
    \t\treturn false\n\t}\n\tlet mut i = Int(0)\n\tlet mut s = Int(1)\n\twhile i <\
    \ max {\n\t\tif n % i == 0 {\n\t\t\treturn false\n\t\t}\n\t\ts += Int(1)\n\t\t\
    i += Int(1)\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpls1083zq.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i =\
    \ Int(0)\n                ^\n/tmp/tmpls1083zq.swift:26:10: note: join the identifiers\
    \ together\n        let mut i = Int(0)\n            ~~~~^\n            muti\n\
    /tmp/tmpls1083zq.swift:26:10: note: join the identifiers together with camel-case\n\
    \        let mut i = Int(0)\n            ~~~~^\n            mutI\n/tmp/tmpls1083zq.swift:27:10:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n        let mut s = Int(1)\n                ^\n/tmp/tmpls1083zq.swift:27:10:\
    \ note: join the identifiers together\n        let mut s = Int(1)\n          \
    \  ~~~~^\n            muts\n/tmp/tmpls1083zq.swift:27:10: note: join the identifiers\
    \ together with camel-case\n        let mut s = Int(1)\n            ~~~~^\n  \
    \          mutS\n/tmp/tmpls1083zq.swift:21:10: error: cannot find 'trunc' in scope\n\
    \        let m = trunc(sqrt(Double(n)))\n                ^~~~~\n/tmp/tmpls1083zq.swift:21:16:\
    \ error: cannot find 'sqrt' in scope\n        let m = trunc(sqrt(Double(n)))\n\
    \                      ^~~~\n/tmp/tmpls1083zq.swift:27:6: error: invalid redeclaration\
    \ of 'mut'\n        let mut s = Int(1)\n            ^\n/tmp/tmpls1083zq.swift:26:6:\
    \ note: 'mut' previously declared here\n        let mut i = Int(0)\n         \
    \   ^\n/tmp/tmpls1083zq.swift:28:8: error: cannot find 'i' in scope\n        while\
    \ i < max {\n              ^\n/tmp/tmpls1083zq.swift:29:10: error: cannot find\
    \ 'i' in scope\n                if n % i == 0 {\n                       ^\n/tmp/tmpls1083zq.swift:32:3:\
    \ error: cannot find 's' in scope\n                s += Int(1)\n             \
    \   ^\n/tmp/tmpls1083zq.swift:33:3: error: cannot find 'i' in scope\n        \
    \        i += Int(1)\n                ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  // Fast cases where n is divisible by 2 or\
    \ 3\n  if n == 1 || n == 2 || n == 3 { return true }\n  // Find the square root\
    \ of n\n  let sqroot = sqrt(Double(n))\n  // Loop over all prime factors less\
    \ than or equal to n\n  for var i = 2; i <= sqroot; i += 1 {\n    if n % i ==\
    \ 0 {\n      return false\n    }\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptxtqt_fc.swift:23:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= sqroot; i += 1 {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmptxtqt_fc.swift:21:16: error: cannot find 'sqrt' in scope\n  let sqroot\
    \ = sqrt(Double(n))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    let root = math.floor(math.sqrt(Double(n)))\n    for d in 2..<root {\n  \
    \      if n % d == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc8nbvwl3.swift:21:16: error: cannot find 'math' in scope\n    let\
    \ root = math.floor(math.sqrt(Double(n)))\n               ^~~~\n/tmp/tmpc8nbvwl3.swift:21:27:\
    \ error: cannot find 'math' in scope\n    let root = math.floor(math.sqrt(Double(n)))\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  if n >= 2 {\n    if n >= 3 {\n      if n >\
    \ 3 {\n        for i : Int = 4; i <= n/2; i += 1 {\n          let j = pow(2, i)\n\
    \          if n % i == 0 {\n            return false\n          }\n          if\
    \ n % j == 0 {\n            return false\n          }\n        }\n        return\
    \ true\n      }\n      return false\n    }\n    return false\n  }\n  return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfwk60uj0.swift:21:21: error: expected 'in' after for-each pattern\n\
    \        for i : Int = 4; i <= n/2; i += 1 {\n                    ^\n/tmp/tmpfwk60uj0.swift:21:21:\
    \ error: expected Sequence expression for for-each loop\n        for i : Int =\
    \ 4; i <= n/2; i += 1 {\n                    ^\n/tmp/tmpfwk60uj0.swift:22:19:\
    \ error: cannot find 'pow' in scope\n          let j = pow(2, i)\n           \
    \       ^~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  var prime: Bool = true\n  for var i = 2; i\
    \ <= Int(sqrt(Double(n))); i++ {\n    if n % i == 0 {\n      prime = false\n \
    \   }\n  }\n  return prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1l3zhiu.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= Int(sqrt(Double(n))); i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    var result = true\n    if n\
    \ == 3 {\n        return true\n    }\n    var k = 3\n    while k*k <= n {\n  \
    \      if n % k == 0 {\n            return false\n        }\n        k += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpqkxqnbhs/tmpqkxqnbhs.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a4972c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a4669b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a4669988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a46687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqkxqnbhs                        0x0000560de39d4243 <unavailable> + 4675

    5    libc.so.6                          0x00002b22a4b5e460 __libc_start_main +
    245

    6    tmpqkxqnbhs                        0x0000560de39d3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var factor: Int = 0\n    var x: Int\n   \
    \ while factor < n {\n        x = n\n        for factor < x {\n            if\
    \ x == factor*factor {\n                return false\n            }\n        \
    \    x /= factor\n        }\n        n += 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl7xffg92.swift:22:20: error: expected 'in' after for-each pattern\n\
    \        for factor < x {\n                   ^\n/tmp/tmpl7xffg92.swift:22:20:\
    \ error: unary operator cannot be separated from its operand\n        for factor\
    \ < x {\n                   ^~\n                    \n/tmp/tmpl7xffg92.swift:22:20:\
    \ error: '<' is not a prefix unary operator\n        for factor < x {\n      \
    \             ^\n/tmp/tmpl7xffg92.swift:28:11: error: left side of mutating operator\
    \ isn't mutable: 'n' is a 'let' constant\n        n += 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n <= 1 {\n        return true\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n == 3 {\n        return true\n    }\n    if n == 4 {\n\
    \        return true\n    }\n    if n == 6 {\n        return true\n    }\n   \
    \ if n == 8 {\n        return true\n    }\n    if n == 13 {\n        return true\n\
    \    }\n    if n == 17 {\n        return true\n    }\n    if n == 19 {\n     \
    \   return true\n    }\n    if n == 31 {\n        return true\n    }\n    if n\
    \ == 53 {\n        return true\n    }\n    if n == 89 {\n        return true\n\
    \    }\n    if n == 101 {\n        return true\n    }\n    if n == 502 {\n   \
    \     return true\n    }\n    if n == 503 {\n        return true\n    }\n    if\
    \ n == 702 {\n        return true\n    }\n    if n == 703 {\n        return true\n\
    \    }\n    if n == 901 {\n        return true\n    }\n    if n == 902 {\n   \
    \     return true\n    }\n    if n == 1101 {\n        return true\n    }\n   \
    \ if n == 1102 {\n        return true\n    }\n    if n == 1401 {\n        return\
    \ true\n    }\n    if n == 1402 {\n        return true\n    }\n    if n == 1501\
    \ {\n        return true\n    }\n    if n == 1502 {\n        return true\n   \
    \ }\n    if n == 1503 {\n        return true\n    }\n    if n == 1504 {\n    \
    \    return true\n    }\n    if n == 15055 {\n        return true\n    }\n   \
    \ if n == 1506 {\n        return true\n    }\n    if n == 1507 {\n        return\
    \ true\n    }\n    if n == 1508 {\n        return true\n    }\n    if n == 1509\
    \ {\n        return true\n    }\n    if n == 1510 {\n        return true\n   \
    \ }\n    if n == 1511 {\n        return true\n    }\n    if n == 1512 {\n    \
    \    return true\n    }\n    if n == 1513 {\n        return true\n    }\n    if\
    \ n == 1514 {\n        return true\n    }\n    if n == 1515 {\n        return\
    \ true\n    }\n    if n == 1516 {\n        return true\n    }\n    if n == 1517\
    \ {\n        return true\n    }\n    if n == 1518 {\n        return true\n   \
    \ }\n    if n == 1519 {\n        return true\n    }\n    if n == 1520 {\n    \
    \    return true\n    }\n    if n == 1521 {\n        return true\n    }\n    if\
    \ n == 1522 {\n        return true\n    }\n    if n == 15231 {\n        return\
    \ true\n    }\n    if n == 15232 {\n        return true\n    }\n    if n == 15233\
    \ {\n        return true\n    }\n    if n == 15234\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxiyoztyu.swift:165:18: error: expected '{' after 'if' condition\n\
    \    if n == 15234\n                 ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    switch n {\n    case 2:\n        return true\n\
    \    case 3:\n        return false\n    case 5 ... math.Floor(sqrt(Double(n))):\n\
    \        return true\n    default:\n        for n in 2..<n {\n            if n\
    \ % n == 0 {\n                return false\n            }\n        }\n       \
    \ return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgvff30ev.swift:23:16: error: cannot find 'math' in scope\n    case\
    \ 5 ... math.Floor(sqrt(Double(n))):\n               ^~~~\n/tmp/tmpgvff30ev.swift:23:27:\
    \ error: cannot find 'sqrt' in scope\n    case 5 ... math.Floor(sqrt(Double(n))):\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let n = n >= 0 ? n : 0\n\n    var isPrime\
    \ = true\n    var num1 = 2\n    while num1 <= Int(sqrt(Double(n)))+1 {\n     \
    \   guard n > num1 else {\n            isPrime = false\n            break\n  \
    \      }\n        for num2 in num1..Int(sqrt(Double(num1))) {\n            if\
    \ ((Double(num1)-Double(num2))*Double(num2)-Double(n))/Double(num2)==0 {\n   \
    \             break\n            }\n        }\n        if num2 >= Double(n) {\n\
    \            isPrime = false\n            break\n        }\n        num1 = num1\
    \ + 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjfdnxxmg.swift:22:23: error: cannot find 'sqrt' in scope\n    while\
    \ num1 <= Int(sqrt(Double(n)))+1 {\n                      ^~~~\n/tmp/tmpjfdnxxmg.swift:27:25:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n        for\
    \ num2 in num1..Int(sqrt(Double(num1))) {\n                        ^~\n      \
    \                  ...\n/tmp/tmpjfdnxxmg.swift:27:31: error: cannot find 'sqrt'\
    \ in scope\n        for num2 in num1..Int(sqrt(Double(num1))) {\n            \
    \                  ^~~~\n/tmp/tmpjfdnxxmg.swift:32:12: error: cannot find 'num2'\
    \ in scope\n        if num2 >= Double(n) {\n           ^~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // http://primes.utm.edu/lists/small/millions/n.txt\n\
    \    if n < 2 {\n        return false\n    }\n    var i = 2\n    repeat {\n  \
    \      if i <= n {\n            if n % i == 0 {\n                return false\n\
    \            }\n        }\n        i += 2\n    } while i <= n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmppxg4svjq/tmppxg4svjq.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de80cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de7dc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de7dc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de7dc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxg4svjq                        0x000055779cdb96fb <unavailable> + 5883

    5    libc.so.6                          0x00002b0de82b9460 __libc_start_main +
    245

    6    tmppxg4svjq                        0x000055779cdb8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    for _ in 0 ..< Int(ceil(Double(sqrt(Double(n)))))\n    {\n        if n ==\
    \ 0 || n == 1 {\n            return true\n        }\n        if isPrime(n) {\n\
    \            return true\n        }\n        n = n / 2\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkurcjduj.swift:21:24: error: cannot find 'ceil' in scope\n    for\
    \ _ in 0 ..< Int(ceil(Double(sqrt(Double(n)))))\n                       ^~~~\n\
    /tmp/tmpkurcjduj.swift:21:36: error: cannot find 'sqrt' in scope\n    for _ in\
    \ 0 ..< Int(ceil(Double(sqrt(Double(n)))))\n                                 \
    \  ^~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n\
    \n    if n < 2 {\n        return false\n    }\n\n    for rand := 2; rand < n;\
    \ rand++ {\n        if n % rand != 0 {\n            return false\n        }\n\
    \    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmz31hezr.swift:26:15: error: expected type\n    for rand := 2;\
    \ rand < n; rand++ {\n              ^\n               <#type#>\n/tmp/tmpmz31hezr.swift:26:15:\
    \ error: expected 'in' after for-each pattern\n    for rand := 2; rand < n; rand++\
    \ {\n              ^\n/tmp/tmpmz31hezr.swift:26:15: error: expected Sequence expression\
    \ for for-each loop\n    for rand := 2; rand < n; rand++ {\n              ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  // This is an exhaustive search over the primes\
    \ up to `num`.\n  // It does not guarantee that no number will ever be found,\
    \ but\n  // it does guarantee that it will be found very rarely.\n  func isPrime(_\
    \ n: Int) -> Bool {\n    if n < 2 {\n      return false\n    }\n    if n == 2\
    \ {\n      return true\n    }\n    if n == 1 {\n      return false\n    }\n  \
    \  if n % 2 == 0 {\n      return false\n    }\n    for k in 3..<(n / 3) {\n  \
    \    if n % k == 0 {\n        return false\n      }\n    }\n    return true\n\
    \  }\n\n  return isPrime(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b48196a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4819398561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4819398286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b481939813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4819397bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxm6go5jf                        0x000055dddc209b77 <unavailable> + 7031

    6    tmpxm6go5jf                        0x000055dddc209919 <unavailable> + 6425

    7    tmpxm6go5jf                        0x000055dddc2095fd <unavailable> + 5629

    8    libc.so.6                          0x00002b481988d460 __libc_start_main +
    245

    9    tmpxm6go5jf                        0x000055dddc208fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return is_prime_impl(&n, 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl9n363ao.swift:18:12: error: cannot find 'is_prime_impl' in scope\n\
    \    return is_prime_impl(&n, 1)\n           ^~~~~~~~~~~~~\n/tmp/tmpl9n363ao.swift:18:26:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \    return is_prime_impl(&n, 1)\n                         ^~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 1 {\n        return false\n    }\n\
    \    if n == 1 {\n        return true\n    }\n    let s = 2\n    while s < n {\n\
    \        if n % s == 0 {\n            return false\n        }\n        s += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxi34umav.swift:29:11: error: left side of mutating operator isn't\
    \ mutable: 's' is a 'let' constant\n        s += 2\n        ~ ^\n/tmp/tmpxi34umav.swift:24:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let s = 2\n    ^~~\n   \
    \ var\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // Base case.\n    if n < 2 {\n        return\
    \ false\n    }\n    // Sieve of Eratosthenes.\n    // The base case is when n\
    \ is even and the number is greater than 3.\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    // The remaining cases are the prime numbers.\n    var remainder\
    \ = n\n    var current: Int\n    for current in stride(from: 1, to: n, by: 2)\
    \ {\n        if remainder == 1 {\n            return true\n        }\n       \
    \ if remainder % current == 0 {\n            return false\n        }\n       \
    \ remainder /= current\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp7xd3cssj/tmp7xd3cssj.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a673e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a670d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a670d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a670d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xd3cssj                        0x000055c5e1e814c7 <unavailable> + 5319

    5    libc.so.6                          0x00002b2a675cc460 __libc_start_main +
    245

    6    tmp7xd3cssj                        0x000055c5e1e81109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 1 {\n        return false\n    }\n    \n    // Fast even tests first\
    \ for speed\n    var m = (n + 1) >> 1\n    for i := 2; i <= m; i++ {\n       \
    \ if n%i == 0 {\n            return false\n        }\n    }\n    \n    // Then\
    \ for correctness\n    for i := 2; i < n; i += 2 {\n        if n%i == 0 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwrpt0vk_.swift:27:12: error: expected type\n    for i := 2; i <=\
    \ m; i++ {\n           ^\n            <#type#>\n/tmp/tmpwrpt0vk_.swift:27:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= m; i++ {\n\
    \           ^\n/tmp/tmpwrpt0vk_.swift:27:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= m; i++ {\n           ^\n/tmp/tmpwrpt0vk_.swift:34:12:\
    \ error: expected type\n    for i := 2; i < n; i += 2 {\n           ^\n      \
    \      <#type#>\n/tmp/tmpwrpt0vk_.swift:34:12: error: expected 'in' after for-each\
    \ pattern\n    for i := 2; i < n; i += 2 {\n           ^\n/tmp/tmpwrpt0vk_.swift:34:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 2; i < n;\
    \ i += 2 {\n           ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let maxIteration = sqrt(Double(n))\n    let\
    \ primes: Set<Int> = [2..<(maxIteration)]\n    \n    var isPrime = true\n    for\
    \ x in primes {\n        if n % x == 0 {\n            isPrime = false\n      \
    \      break\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbdddq72q.swift:18:24: error: cannot find 'sqrt' in scope\n    let\
    \ maxIteration = sqrt(Double(n))\n                       ^~~~\n/tmp/tmpbdddq72q.swift:19:30:\
    \ error: cannot convert value of type 'Range<Int>' to expected element type 'Int'\n\
    \    let primes: Set<Int> = [2..<(maxIteration)]\n                           \
    \  ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    switch n {\n    case 2 ... n:\n        return\
    \ true\n    case n ... 2:\n        return false\n    default:\n        return\
    \ is_prime(n-1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9wd4rehq.swift:24:25: error: missing argument label 'n:' in call\n\
    \        return is_prime(n-1)\n                        ^\n                   \
    \     n: \n"
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let twoToN: Int64 = 2\n    for factor in\
    \ 2...n {\n        if n % factor != 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpyjqd4ijb/tmpyjqd4ijb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe6d33bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe6d032b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe6d032988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe6d0317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyjqd4ijb                        0x000055de8bac33a7 <unavailable> + 5031

    5    libc.so.6                          0x00002abe6d527460 __libc_start_main +
    245

    6    tmpyjqd4ijb                        0x000055de8bac2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \n    var i: Int = 0\n\n    if n > 2 {\n        i += 2\n        while i <= n {\n\
    \            if n % i == 0 {\n                return false\n            }\n  \
    \          i += 2\n        }\n    }\n\n    for i = 2; i <= n / 2; i += 2 {\n \
    \       if n % i == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbu7fm1_w.swift:34:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n / 2; i += 2 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var limit: Int = 0\n\n    for _ in 0..<n\
    \ {\n        limit = limit * 2 + 1\n    }\n\n    if n < 2 || limit > sqrtf(n)\
    \ {\n        return false\n    }\n\n    if n == 2 || n == 3 || n == 5 || n ==\
    \ 7 || n == 11 || n == 13 || n == 17 || n == 19 || n == 23\n        || n == 25\
    \ || n == 31 || n == 37 || n == 47 || n == 59 || n == 63 || n == 69 || n == 83\n\
    \        || n == 97 || n == 91 {\n        return true\n    }\n\n    let sqrt:\
    \ Float64 = sqrt(Double(n))\n    var d: Int = 0\n    var e: Int = 0\n\n    while\
    \ d < limit {\n        e = 2 * d\n        if e <= n {\n            if n % e ==\
    \ 0 {\n                return false\n            }\n        }\n        d += 1\n\
    \    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq_vf6rsx.swift:24:25: error: cannot find 'sqrtf' in scope\n   \
    \ if n < 2 || limit > sqrtf(n) {\n                        ^~~~~\n/tmp/tmpq_vf6rsx.swift:34:25:\
    \ error: use of local variable 'sqrt' before its declaration\n    let sqrt: Float64\
    \ = sqrt(Double(n))\n                        ^\n/tmp/tmpq_vf6rsx.swift:34:9: note:\
    \ 'sqrt' declared here\n    let sqrt: Float64 = sqrt(Double(n))\n        ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Use Sieve of Eratosthenes for better\
    \ performance (see\n    // http://mathworld.wolfram.com/PrimeCountingFunction.html)\n\
    \    if n == 2 {\n        return true\n    } else if n == 1 {\n        return\
    \ false\n    }\n\n    if n > 2 && is_prime(n - 1) {\n        return false\n  \
    \  }\n\n    for var i = 2; i < Int(sqrt(Double(n))); i++ {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1pu6jhiu.swift:30:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < Int(sqrt(Double(n))); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1pu6jhiu.swift:26:26: error: missing argument label 'n:' in call\n   \
    \ if n > 2 && is_prime(n - 1) {\n                         ^\n                \
    \         n: \n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n\
    \    if n <= 1 {\n        return false\n    }\n    // Use Sieve of Eratosthenes\
    \ algorithm to test if n is prime\n    if n == 2 {\n        return true\n    }\n\
    \    if n <= 8 {\n        return n == 1 || is_prime(n - 2)\n    }\n    var p:\
    \ Int = n\n    var q: Int = 3\n    for p..<100 {\n        if n % p == 0 {\n  \
    \          return false\n        }\n        if q == 6 {\n            return false\n\
    \        }\n        q *= 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkhjj9h25.swift:31:10: error: expected 'in' after for-each pattern\n\
    \    for p..<100 {\n         ^\n/tmp/tmpkhjj9h25.swift:31:10: error: expected\
    \ expression after unary operator\n    for p..<100 {\n         ^\n/tmp/tmpkhjj9h25.swift:27:35:\
    \ error: missing argument label 'n:' in call\n        return n == 1 || is_prime(n\
    \ - 2)\n                                  ^\n                                \
    \  n: \n/tmp/tmpkhjj9h25.swift:31:10: error: for-in loop requires 'PartialRangeUpTo<Int>'\
    \ to conform to 'Sequence'\n    for p..<100 {\n         ^~~~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tif n < 2 {\n\t\treturn false\n\t}\n\tlet upperBound\
    \ = sqrt(Float(n - 1) + Float(Int(Float(Float(Float(n - 1) + Float(1))))) + Float(0.0))\n\
    \tfor div2 := 2; div2 < upperBound; div2 = div2 + div2 {\n\t\tif n % div2 == 0\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph948zlhq.swift:22:12: error: expected type\n        for div2 :=\
    \ 2; div2 < upperBound; div2 = div2 + div2 {\n                  ^\n          \
    \         <#type#>\n/tmp/tmph948zlhq.swift:22:12: error: expected 'in' after for-each\
    \ pattern\n        for div2 := 2; div2 < upperBound; div2 = div2 + div2 {\n  \
    \                ^\n/tmp/tmph948zlhq.swift:22:12: error: expected Sequence expression\
    \ for for-each loop\n        for div2 := 2; div2 < upperBound; div2 = div2 + div2\
    \ {\n                  ^\n/tmp/tmph948zlhq.swift:21:19: error: cannot find 'sqrt'\
    \ in scope\n        let upperBound = sqrt(Float(n - 1) + Float(Int(Float(Float(Float(n\
    \ - 1) + Float(1))))) + Float(0.0))\n                         ^~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return (n > 1) && (is_div(n)) || (is_even(n))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqxulnlro.swift:18:24: error: cannot find 'is_div' in scope\n  \
    \  return (n > 1) && (is_div(n)) || (is_even(n))\n                       ^~~~~~\n\
    /tmp/tmpqxulnlro.swift:18:39: error: cannot find 'is_even' in scope\n    return\
    \ (n > 1) && (is_div(n)) || (is_even(n))\n                                   \
    \   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let r = n % 2 == 0\n    if r == true {\n\
    \        return false\n    }\n    for r in 2...n {\n        if (r % 2 == 0) {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmptroptaoi/tmptroptaoi.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fba898c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fba58fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fba58f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fba58e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptroptaoi                        0x000056257f32d3a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b1fbaa84460 __libc_start_main +
    245

    6    tmptroptaoi                        0x000056257f32cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let a = 2\n    var b: Int = 2\n    var m:\
    \ Int = 0\n    while a <= n / 2 {\n        if n % a == 0 {\n            m = 0\n\
    \            while b * b <= n {\n                if n % b == 0 {\n           \
    \         m = 1\n                    break\n                }\n              \
    \  b += 1\n            }\n            if m == 0 {\n                return false\n\
    \            }\n        }\n        a += 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc2t4efql.swift:35:11: error: left side of mutating operator isn't\
    \ mutable: 'a' is a 'let' constant\n        a += 1\n        ~ ^\n/tmp/tmpc2t4efql.swift:18:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let a = 2\n    ^~~\n   \
    \ var\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // We need the first two primes: 1 and 2\n\
    \    var firstPrime = 1\n    var secondPrime = 2\n    \n    // We need to make\
    \ sure we check enough primes before we get past the worst case for the square\
    \ root of the number we're checking.\n    let maxPrimeSquareRoot = Int(ceil(sqrt(Double(n))))\n\
    \n    // Check if we found two primes already.\n    if firstPrime == 2 {\n   \
    \     // The number we're checking is prime\n        return true\n    }\n\n  \
    \  // We only need to check up to sqrt(maxPrimeSquareRoot)\n    for i in 0..<(maxPrimeSquareRoot\
    \ - 1) {\n        // The square root of the number we're checking\n        let\
    \ sqrtOfN = sqrt(Double(n))\n\n        // If sqrt(n) is a factor\n        if sqrtOfN\
    \ == i {\n            // If the square root is less than the square root of the\
    \ previous prime\n            if sqrtOfN < firstPrime {\n                // Set\
    \ the first prime to the square root of the number\n                firstPrime\
    \ = sqrtOfN\n            }\n            // If the square root is greater than\
    \ the previous prime\n            else {\n                // Set the second prime\
    \ to the square root of the number\n                secondPrime = sqrtOfN\n  \
    \          }\n\n            // If we found both primes, we're done\n         \
    \   if firstPrime == secondPrime {\n                return true\n            }\n\
    \        }\n    }\n    // We haven't found both primes, so the number isn't prime\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmps6ca10_p.swift:23:34: error: cannot find 'ceil' in scope\n    let\
    \ maxPrimeSquareRoot = Int(ceil(sqrt(Double(n))))\n                          \
    \       ^~~~\n/tmp/tmps6ca10_p.swift:23:39: error: cannot find 'sqrt' in scope\n\
    \    let maxPrimeSquareRoot = Int(ceil(sqrt(Double(n))))\n                   \
    \                   ^~~~\n/tmp/tmps6ca10_p.swift:34:23: error: cannot find 'sqrt'\
    \ in scope\n        let sqrtOfN = sqrt(Double(n))\n                      ^~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: add more primality checks\n\n  \
    \  // n is prime if and only if n has no positive divisors other than 1\n    if\
    \ n == 1 {\n        return false\n    }\n    if n <= 0 {\n        return false\n\
    \    }\n    if n <= 1 {\n        return true\n    }\n\n    var divisor: Int =\
    \ 0\n    var remainder: Int = 0\n    var i = 1\n    while i != n {\n        remainder\
    \ = n % i\n        if remainder == 0 {\n            divisor = i\n            break\n\
    \        }\n        i += 1\n    }\n    return divisor != 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp1flew9t_/tmp1flew9t_.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b854fdafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b854faa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b854faa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b854faa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1flew9t_                        0x00005640b378e243 <unavailable> + 4675

    5    libc.so.6                          0x00002b854ff9b460 __libc_start_main +
    245

    6    tmp1flew9t_                        0x00005640b378def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n\
    \    \n    // TODO: Implement Primality Test.\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpa4hyh37z/tmpa4hyh37z.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71885fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71882f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71882f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71882f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa4hyh37z                        0x00005639f8ccb227 <unavailable> + 4647

    5    libc.so.6                          0x00002b71887ea460 __libc_start_main +
    245

    6    tmpa4hyh37z                        0x00005639f8ccae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var max = 1 << n.bitWidth\n    var k = 3\n\
    \    // sqrt(2p-1) = 1\n    // sqrt(p-1) = 2, so this means no odd factors\n \
    \   if max&(k-1) == 0 {\n        return true\n    }\n    // if p == 2, then n\
    \ = 2 * k + 1 and k != 1\n    // if p == 1, then n = 2 * k and k != 1\n    //\
    \ if p < 2, then p is prime\n    for p := 2; p < max; p += 1 {\n        if (p\
    \ & 1) == 1 {\n            // if n is even, oddness is k\n            if (n ==\
    \ 2*k+1) {\n                k++\n            } else {\n                // if n\
    \ is odd, oddness is k+1\n                k++\n            }\n        }\n    }\n\
    \    // n has no odd factors\n    return k > 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt1o3l1o5.swift:28:12: error: expected type\n    for p := 2; p <\
    \ max; p += 1 {\n           ^\n            <#type#>\n/tmp/tmpt1o3l1o5.swift:28:12:\
    \ error: expected 'in' after for-each pattern\n    for p := 2; p < max; p += 1\
    \ {\n           ^\n/tmp/tmpt1o3l1o5.swift:28:12: error: expected Sequence expression\
    \ for for-each loop\n    for p := 2; p < max; p += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n <= 3 && (n % 2 == 0 ||\
    \ n % 3 == 0) {\n        return true\n    }\n    if n <= 5 && n % 2 == 0 {\n \
    \       return true\n    }\n    if n <= 7 && n % 3 == 0 {\n        return true\n\
    \    }\n    if n <= 11 && n % 5 == 0 {\n        return true\n    }\n    if n <=\
    \ 13 && n % 7 == 0 {\n        return true\n    }\n    if n <= 17 && n % 11 ==\
    \ 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp7esf7qr3/tmp7esf7qr3.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6480e8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6480b86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6480b86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6480b857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7esf7qr3                        0x000055f5234ed243 <unavailable> + 4675

    5    libc.so.6                          0x00002b648107b460 __libc_start_main +
    245

    6    tmp7esf7qr3                        0x000055f5234ecef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \n    // Only odd numbers are primes.\n    if n % 2 == 1 {\n        return false\n\
    \    }\n\n    // Only even numbers are primes.\n    if n % 2 == 0 {\n        return\
    \ true\n    }\n\n    // Trial division test\n    // We only need to test odd numbers.\n\
    \    var i = 3\n    var is_prime = true\n    while i * i <= n {\n        if n\
    \ % i == 0 {\n            is_prime = false\n        }\n        i += 2\n    }\n\
    \n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp28cuxlm7/tmp28cuxlm7.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5d6e61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5d6b58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5d6b58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5d6b577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28cuxlm7                        0x000055badae8c243 <unavailable> + 4675

    5    libc.so.6                          0x00002ae5d704d460 __libc_start_main +
    245

    6    tmp28cuxlm7                        0x000055badae8bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\treturn n % 2 == 0 || n == 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpn3fjffep/tmpn3fjffep.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ac575dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ac5454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ac5454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ac54537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3fjffep                        0x0000556bdcbe1243 <unavailable> + 4675

    5    libc.so.6                          0x00002b2ac5949460 __libc_start_main +
    245

    6    tmpn3fjffep                        0x0000556bdcbe0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // Check for trivial cases\n    if n < 2\
    \ { return false }\n    if n == 1 { return false }\n\n    // Test only odd numbers\n\
    \    var remainder = n % 2\n    for i = 2 ... Int(ceil(n/2)+1) {\n        if remainder\
    \ == 0 { return false }\n        remainder = Int(remainder * 3) + 1\n    }\n\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp978zoh06.swift:24:11: error: expected 'in' after for-each pattern\n\
    \    for i = 2 ... Int(ceil(n/2)+1) {\n          ^\n/tmp/tmp978zoh06.swift:24:11:\
    \ error: expected Sequence expression for for-each loop\n    for i = 2 ... Int(ceil(n/2)+1)\
    \ {\n          ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    assert(n >= 1 && n <= Int64(1))\n    // check\
    \ n's primality\n    if n == 1 {\n        return true\n    }\n\n    // check n's\
    \ divisibility by all odd numbers up to half of n\n    let limit = Int64(floor(sqrt(Double(n)))\
    \ + 1)\n    for d in 2...limit {\n        if n % d == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6o4ll8fb.swift:25:23: error: cannot find 'floor' in scope\n   \
    \ let limit = Int64(floor(sqrt(Double(n))) + 1)\n                      ^~~~~\n\
    /tmp/tmp6o4ll8fb.swift:25:29: error: cannot find 'sqrt' in scope\n    let limit\
    \ = Int64(floor(sqrt(Double(n))) + 1)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // See http://mathworld.wolfram.com/Primality.html\n\
    \    // for detailed formulas.\n    return Int(ceil(sqrt(Double(n)).toInt64())\
    \ > 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkn_rtx9j.swift:20:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sqrt(Double(n)).toInt64()) > 2)\n               ^~~~\n/tmp/tmpkn_rtx9j.swift:20:21:\
    \ error: cannot find 'sqrt' in scope\n    return Int(ceil(sqrt(Double(n)).toInt64())\
    \ > 2)\n                    ^~~~\n/tmp/tmpkn_rtx9j.swift:20:12: error: no exact\
    \ matches in call to initializer \n    return Int(ceil(sqrt(Double(n)).toInt64())\
    \ > 2)\n           ^\n/tmp/tmpkn_rtx9j.swift:20:12: note: found candidate with\
    \ type '(Float16) -> Int'\n    return Int(ceil(sqrt(Double(n)).toInt64()) > 2)\n\
    \           ^\n/tmp/tmpkn_rtx9j.swift:20:12: note: found candidate with type '(Float)\
    \ -> Int'\n    return Int(ceil(sqrt(Double(n)).toInt64()) > 2)\n           ^\n\
    /tmp/tmpkn_rtx9j.swift:20:12: note: found candidate with type '(Double) -> Int'\n\
    \    return Int(ceil(sqrt(Double(n)).toInt64()) > 2)\n           ^\n/tmp/tmpkn_rtx9j.swift:20:12:\
    \ note: found candidate with type '(Float80) -> Int'\n    return Int(ceil(sqrt(Double(n)).toInt64())\
    \ > 2)\n           ^\n/tmp/tmpkn_rtx9j.swift:20:12: note: found candidate with\
    \ type '(Builtin.Int64) -> Int'\n    return Int(ceil(sqrt(Double(n)).toInt64())\
    \ > 2)\n           ^\n/tmp/tmpkn_rtx9j.swift:20:12: note: found candidate with\
    \ type '(Builtin.Word) -> Int'\n    return Int(ceil(sqrt(Double(n)).toInt64())\
    \ > 2)\n           ^\n/tmp/tmpkn_rtx9j.swift:20:12: note: found candidate with\
    \ type '(String) -> Int?'\n    return Int(ceil(sqrt(Double(n)).toInt64()) > 2)\n\
    \           ^\n/tmp/tmpkn_rtx9j.swift:20:12: error: no 'init' candidates produce\
    \ the expected contextual result type 'Bool'\n    return Int(ceil(sqrt(Double(n)).toInt64())\
    \ > 2)\n           ^\nSwift.Int:7:12: note: 'init(_:)' produces 'Int', not the\
    \ expected contextual result type 'Bool'\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: 'init(_:)' produces 'Int', not the expected\
    \ contextual result type 'Bool'\n    public init(_ source: Float)\n          \
    \ ^\nSwift.Int:12:12: note: 'init(_:)' produces 'Int', not the expected contextual\
    \ result type 'Bool'\n    public init(_ source: Double)\n    "
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // Special cases\n    if n < 2 {\n      \
    \  return true\n    } else if n == 2 {\n        return true\n    } else if n %\
    \ 2 == 0 {\n        return false\n    }\n\n    // Divide by primes up to the square\
    \ root\n    let limit = sqrt(Double(n))\n\n    for p in primes {\n        if p\
    \ > limit {\n            break\n        }\n        if n % p == 0 {\n         \
    \   return false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph07p3deu.swift:28:17: error: cannot find 'sqrt' in scope\n    let\
    \ limit = sqrt(Double(n))\n                ^~~~\n/tmp/tmph07p3deu.swift:30:14:\
    \ error: cannot find 'primes' in scope\n    for p in primes {\n             ^~~~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    // Trial division using Sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)\n\
    \    let max = (Int(sqrt(Double(n))) + 1) * Int(sqrt(Double(n)))\n    var sieve\
    \ = Array<Bool>(repeating: false, count: max)\n    for i in  1...Int(sqrt(Double(n)))\
    \ + 1 {\n        if sieve[i] {\n            let rem = n - Int(i * i)\n       \
    \     if rem < i {\n                sieve[Int(i * i) + 1] = true\n           \
    \     sieve[Int(i * i)] = true\n            }\n            else {\n          \
    \      sieve[Int(i * i)] = true\n            }\n        }\n    }\n    for i in\
    \  1...Int(sqrt(Double(n))) + 1 {\n        if sieve[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpql1969r8.swift:22:20: error: cannot find 'sqrt' in scope\n    let\
    \ max = (Int(sqrt(Double(n))) + 1) * Int(sqrt(Double(n)))\n                  \
    \ ^~~~\n/tmp/tmpql1969r8.swift:22:48: error: cannot find 'sqrt' in scope\n   \
    \ let max = (Int(sqrt(Double(n))) + 1) * Int(sqrt(Double(n)))\n              \
    \                                 ^~~~\n/tmp/tmpql1969r8.swift:24:23: error: cannot\
    \ find 'sqrt' in scope\n    for i in  1...Int(sqrt(Double(n))) + 1 {\n       \
    \               ^~~~\n/tmp/tmpql1969r8.swift:36:23: error: cannot find 'sqrt'\
    \ in scope\n    for i in  1...Int(sqrt(Double(n))) + 1 {\n                   \
    \   ^~~~\n/tmp/tmpql1969r8.swift:26:27: error: no exact matches in call to initializer\
    \ \n            let rem = n - Int(i * i)\n                          ^\n/tmp/tmpql1969r8.swift:26:27:\
    \ note: found candidate with type '(Float16) -> Int'\n            let rem = n\
    \ - Int(i * i)\n                          ^\n/tmp/tmpql1969r8.swift:26:27: note:\
    \ found candidate with type '(Float) -> Int'\n            let rem = n - Int(i\
    \ * i)\n                          ^\n/tmp/tmpql1969r8.swift:26:27: note: found\
    \ candidate with type '(Double) -> Int'\n            let rem = n - Int(i * i)\n\
    \                          ^\n/tmp/tmpql1969r8.swift:26:27: note: found candidate\
    \ with type '(Float80) -> Int'\n            let rem = n - Int(i * i)\n       \
    \                   ^\n/tmp/tmpql1969r8.swift:26:27: note: found candidate with\
    \ type '(Builtin.Int64) -> Int'\n            let rem = n - Int(i * i)\n      \
    \                    ^\n/tmp/tmpql1969r8.swift:26:27: note: found candidate with\
    \ type '(Builtin.Word) -> Int'\n            let rem = n - Int(i * i)\n       \
    \                   ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let mut r = sqrt(n as f64)\n    for _ in\
    \ 0..<100 {\n        if n % r == 0 {\n            r = r * r\n        } else {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp0nrhaxr.swift:18:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut r = sqrt(n\
    \ as f64)\n            ^\n/tmp/tmpp0nrhaxr.swift:18:13: note: join the identifiers\
    \ together\n    let mut r = sqrt(n as f64)\n        ~~~~^\n        mutr\n/tmp/tmpp0nrhaxr.swift:18:13:\
    \ note: join the identifiers together with camel-case\n    let mut r = sqrt(n\
    \ as f64)\n        ~~~~^\n        mutR\n/tmp/tmpp0nrhaxr.swift:18:17: error: cannot\
    \ find 'sqrt' in scope\n    let mut r = sqrt(n as f64)\n                ^~~~\n\
    /tmp/tmpp0nrhaxr.swift:18:27: error: cannot find type 'f64' in scope\n    let\
    \ mut r = sqrt(n as f64)\n                          ^~~\n/tmp/tmpp0nrhaxr.swift:20:16:\
    \ error: cannot find 'r' in scope\n        if n % r == 0 {\n               ^\n\
    /tmp/tmpp0nrhaxr.swift:21:13: error: cannot find 'r' in scope\n            r =\
    \ r * r\n            ^\n/tmp/tmpp0nrhaxr.swift:21:17: error: cannot find 'r' in\
    \ scope\n            r = r * r\n                ^\n/tmp/tmpp0nrhaxr.swift:21:21:\
    \ error: cannot find 'r' in scope\n            r = r * r\n                   \
    \ ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    let upper = sqrt(Double(n))\n    var j: Int\n    var prime = true\n    for\
    \ j = 2; j < upper; j++ {\n        if n % j == 0 {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2y1_zs81.swift:24:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for j = 2; j < upper; j++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2y1_zs81.swift:21:17: error: cannot find 'sqrt' in scope\n    let upper\
    \ = sqrt(Double(n))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // check factors\n    for div in 0..<n {\n\
    \        if n % div == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002ae73f072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae73ed69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae73ed69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae73ed6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae73ed68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvxkys1q3                        0x000055913b728a99 <unavailable> + 6809

    6    tmpvxkys1q3                        0x000055913b7282cb <unavailable> + 4811

    7    libc.so.6                          0x00002ae73f25e460 __libc_start_main +
    245

    8    tmpvxkys1q3                        0x000055913b727fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    func is_prime(x: Int) -> Bool {\n       \
    \ if x <= 1 {\n            return false\n        }\n        if x&1 == 0 {\n  \
    \          return false\n        }\n        for x in 2..<(x/2) {\n           \
    \ if x % x == 0 {\n                return false\n            }\n        }\n  \
    \      return true\n    }\n    return is_prime(n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr351lq32.swift:32:21: error: missing argument label 'x:' in call\n\
    \    return is_prime(n)\n                    ^\n                    x: \n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    // if n is even, there is nothing to check\n    // if n is odd, there must\
    \ be another even number\n    if n & 1 == 0 {\n        return false\n    }\n\n\
    \    // if n is odd, then it must be prime\n    // if n is even, then it must\
    \ be composite.\n    var i : Int\n    if n % 2 == 0 {\n        // i is even\n\
    \        i = 2\n        for {\n            if n % i == 0 {\n                return\
    \ false\n            }\n            i += 2\n        }\n    } else {\n        //\
    \ i is odd\n        i = 3\n        for {\n            if n % i == 0 {\n      \
    \          return false\n            }\n            i += 2\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqpbjk2m6.swift:33:13: error: expected pattern\n        for {\n\
    \            ^\n/tmp/tmpqpbjk2m6.swift:33:13: error: expected Sequence expression\
    \ for for-each loop\n        for {\n            ^\n/tmp/tmpqpbjk2m6.swift:42:13:\
    \ error: expected pattern\n        for {\n            ^\n/tmp/tmpqpbjk2m6.swift:42:13:\
    \ error: expected Sequence expression for for-each loop\n        for {\n     \
    \       ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  if n <= 1 {\n    return false\n  }\n\n  if\
    \ n % 2 == 0 {\n    return false\n  }\n\n  var m = 3\n  var k = n - 3\n\n  //\
    \ Start with a divisor that's smaller than sqrt(n) -- this prevents\n  // slow\
    \ div's from being prematurely optimized away.\n  var d = 2\n  var r = n - 1\n\
    \  var r = r\n  while (d * d <= r) {\n    d = 2 * d\n    r = n - d\n  }\n\n  //\
    \ Now pretest all multiples of d before sqrt(r).\n  for i = 2; i <= r && i <=\
    \ sqrt_n; i += d {\n    // If this multiple divides n, we're done.\n    if !(n\
    \ % i) {\n      return false\n    }\n\n    // If r is not divisible by i, n and\
    \ r are not coprime.\n    if !(!(i & r) && (n % i || r % i)) {\n      return false\n\
    \    }\n\n    // If r divides i and r and i divides n, n divides i and i is prime.\n\
    \    if !(!(i & r) && (i % n || r % n || n % i)) {\n      return false\n    }\n\
    \  }\n\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp54si4br9.swift:40:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for i = 2; i <= r && i <= sqrt_n; i += d {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp54si4br9.swift:33:7: error: invalid redeclaration of 'r'\n  var r = r\n\
    \      ^\n/tmp/tmp54si4br9.swift:32:7: note: 'r' previously declared here\n  var\
    \ r = n - 1\n      ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \n    if n <= 1 {\n        return true\n    }\n\n    var i = 2\n    var p: Bool\
    \ = false\n\n    while i <= n {\n        if n % i == 0 {\n            p = false\n\
    \        } else {\n            p = true\n        }\n\n        i += p\n    }\n\n\
    \    return p\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmprwrlp10s.swift:36:14: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        i += p\n             ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n\
    \    \n    var i: Int\n    var p: Int\n    var k: Int\n    \n    i = 2\n    p\
    \ = k = 1\n    while i < n {\n        if n % i == 0 {\n            k = k + 1\n\
    \        }\n        i = i + 1\n    }\n    return k == 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjfr31ocr.swift:27:11: error: cannot assign value of type '()' to\
    \ type 'Int'\n    p = k = 1\n        ~~^~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let sqrt_of_n = Int.sqrt(Double(n))\n   \
    \ for i in 1..<sqrt_of_n {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4d6k6914.swift:18:25: error: type 'Int' has no member 'sqrt'\n\
    \    let sqrt_of_n = Int.sqrt(Double(n))\n                    ~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  if is_primes.contains(n) {\n    return true\n\
    \  } else {\n    let sqrt: Int = Int(ceil(sqrt(Double(n))))\n    for i in 2..sqrt\
    \ {\n      if is_primes[i] == false {\n        return false\n      }\n    }\n\
    \    return true\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu8l5w3v5.swift:18:6: error: cannot find 'is_primes' in scope\n\
    \  if is_primes.contains(n) {\n     ^~~~~~~~~\n/tmp/tmpu8l5w3v5.swift:21:25: error:\
    \ cannot find 'ceil' in scope\n    let sqrt: Int = Int(ceil(sqrt(Double(n))))\n\
    \                        ^~~~\n/tmp/tmpu8l5w3v5.swift:21:30: error: use of local\
    \ variable 'sqrt' before its declaration\n    let sqrt: Int = Int(ceil(sqrt(Double(n))))\n\
    \                             ^\n/tmp/tmpu8l5w3v5.swift:21:9: note: 'sqrt' declared\
    \ here\n    let sqrt: Int = Int(ceil(sqrt(Double(n))))\n        ^\n/tmp/tmpu8l5w3v5.swift:22:15:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    for i in\
    \ 2..sqrt {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n >= 2 {\n        for p in range(3, Int(sqrt(Double(n)))\
    \ + 1, 2) {\n            if n % p == 0 {\n                return false\n     \
    \       }\n        }\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkipw2xsj.swift:19:18: error: cannot find 'range' in scope\n   \
    \     for p in range(3, Int(sqrt(Double(n))) + 1, 2) {\n                 ^~~~~\n\
    /tmp/tmpkipw2xsj.swift:19:31: error: cannot find 'sqrt' in scope\n        for\
    \ p in range(3, Int(sqrt(Double(n))) + 1, 2) {\n                             \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let limit = (Int(pow(2, n)) - Int(1)) / 2\n\
    \    if limit < 2 {\n        return true\n    }\n    var remainder = n % 2\n \
    \   var factor = 2\n    while remainder > 0 {\n        remainder = remainder -\
    \ factor\n        factor = factor * 2\n    }\n    return remainder == 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprm1n7y5m.swift:18:22: error: cannot find 'pow' in scope\n    let\
    \ limit = (Int(pow(2, n)) - Int(1)) / 2\n                     ^~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var prime = true\n    for _ in 0..<n {\n\
    \        let r = random() % n\n        if r == 1 {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplxfx4bu7.swift:20:17: error: cannot find 'random' in scope\n  \
    \      let r = random() % n\n                ^~~~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tif n < 2 || n == 1 {\n\t\treturn false\n\t\
    }\n\tlet max = primes[n - 2]\n\tlet range = max - min\n\tvar remainder = n % range\n\
    \tremainder %= range\n\treturn remainder == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9hbuejd6.swift:21:12: error: cannot find 'primes' in scope\n  \
    \      let max = primes[n - 2]\n                  ^~~~~~\n/tmp/tmp9hbuejd6.swift:22:20:\
    \ error: generic parameter 'T' could not be inferred\n        let range = max\
    \ - min\n                          ^\nSwift.min:1:24: note: in call to function\
    \ 'min'\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: replace with more robust modular\
    \ arithmetic\n\n    // Handle special cases\n    if n == 0 {\n        return true\n\
    \    } else if n <= 1 {\n        return false\n    } else if n == 2 {\n      \
    \  return true\n    }\n\n    // Use Sieve of Atkin's algorithm to find a sequence\
    \ of primes\n    // greater than or equal to n\n    var sieve = [Int]()\n    var\
    \ numPrimes = 2\n\n    for i := 2; i < n; i++ {\n        if sieve[i] == 0 {\n\
    \            if n % i == 0 {\n                return false\n            }\n  \
    \          if i == 2 {\n                if ((n / i) * i == n) {\n            \
    \        return true\n                }\n            }\n\n            sieve[i*i:\
    \ i: i+1] = 1\n            numPrimes += 1\n        }\n    }\n\n    // The sequence\
    \ is of length numPrimes, which is small enough that\n    // the sieve is enough\
    \ to test all numbers.\n    if numPrimes >= n {\n        return true\n    }\n\n\
    \    // The sequence is too long to reliably test all numbers, so\n    // use\
    \ the Sieve of Atkin's algorithm to find a number that is\n    // guaranteed to\
    \ test all numbers in the given range.\n    var sqrtn = sqrtf64(n) // sqrt(n)\n\
    \    var k = 1\n    var limit = sqrtn\n    while limit > 1 {\n        limit /=\
    \ 2.0\n        for i := k; i < limit; i += k {\n            sieve[i*i: i: i+1]\
    \ = 1\n        }\n        numPrimes += k\n        k += 2\n    }\n\n    // A number\
    \ has been found to be prime\n    return numPrimes < n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2__yt79o.swift:34:12: error: expected type\n    for i := 2; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp2__yt79o.swift:34:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i < n; i++ {\n\
    \           ^\n/tmp/tmp2__yt79o.swift:34:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i < n; i++ {\n           ^\n/tmp/tmp2__yt79o.swift:45:22:\
    \ error: expected ',' separator\n            sieve[i*i: i: i+1] = 1\n        \
    \             ^\n                     ,\n/tmp/tmp2__yt79o.swift:45:22: error:\
    \ expected expression in list of expressions\n            sieve[i*i: i: i+1] =\
    \ 1\n                     ^\n/tmp/tmp2__yt79o.swift:64:16: error: expected type\n\
    \        for i := k; i < limit; i += k {\n               ^\n                <#type#>\n\
    /tmp/tmp2__yt79o.swift:64:16: error: expected 'in' after for-each pattern\n  \
    \      for i := k; i < limit; i += k {\n               ^\n/tmp/tmp2__yt79o.swift:64:16:\
    \ error: expected Sequence expression for for-each loop\n        for i := k; i\
    \ < limit; i += k {\n               ^\n/tmp/tmp2__yt79o.swift:65:22: error: expected\
    \ ',' separator\n            sieve[i*i: i: i+1] = 1\n                     ^\n\
    \                     ,\n/tmp/tmp2__yt79o.swift:65:22: error: expected expression\
    \ in list of expressions\n            sieve[i*i: i: i+1] = 1\n               \
    \      ^\n/tmp/tmp2__yt79o.swift:59:17: error: cannot find 'sqrtf64' in scope\n\
    \    var sqrtn = sqrtf64(n) // sqrt(n)\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let lim = 2\n    return n >= 2\n        &&\
    \ (n % 2 != 0)\n        && n < lim\n        && is_prime(n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp00iw4y5s.swift:22:21: error: missing argument label 'n:' in call\n\
    \        && is_prime(n - 1)\n                    ^\n                    n: \n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return n > 1 && !(n % 2 == 0 && is_odd(n))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr4a0ncnb.swift:18:37: error: cannot find 'is_odd' in scope\n  \
    \  return n > 1 && !(n % 2 == 0 && is_odd(n))\n                              \
    \      ^~~~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  // https://en.wikipedia.org/wiki/Primality_test#Primitive_numbers\n\
    \  func isPrime(n: Int) -> Bool {\n    if n == 1 {\n      return true\n    }\n\
    \    \n    for x in 2...n {\n      if n % x == 0 {\n        return false\n   \
    \   }\n    }\n    \n    return true\n  }\n  \n  return isPrime(n)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpacov6rcu.swift:33:18: error: missing argument label 'n:' in call\n\
    \  return isPrime(n)\n                 ^\n                 n: \n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    guard is_integer(n) && n > 2 else {\n   \
    \     return false\n    }\n\n    var limit = sqrt(Double(n))\n\n    if limit <\
    \ 2 {\n        return true\n    }\n\n    for i in 0..<limit {\n        let d =\
    \ pow(Double(n), Double(i))\n        if d == 1 {\n            return false\n \
    \       }\n        if n % d == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmppl9yk9b9.swift:18:11: error: cannot find 'is_integer' in scope\n\
    \    guard is_integer(n) && n > 2 else {\n          ^~~~~~~~~~\n/tmp/tmppl9yk9b9.swift:22:17:\
    \ error: cannot find 'sqrt' in scope\n    var limit = sqrt(Double(n))\n      \
    \          ^~~~\n/tmp/tmppl9yk9b9.swift:29:17: error: cannot find 'pow' in scope\n\
    \        let d = pow(Double(n), Double(i))\n                ^~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  // TODO: return more efficient code\n  for\
    \ i in 1...n {\n    if n == i {\n      return true\n    }\n    guard n % i ==\
    \ 0 else {\n      return false\n    }\n  }\n  return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpzkdakmwp/tmpzkdakmwp.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bfd360c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bfd057b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bfd057988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bfd0567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzkdakmwp                        0x000055f9ebe973a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b5bfd54c460 __libc_start_main +
    245

    6    tmpzkdakmwp                        0x000055f9ebe96fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // Check bounds.\n    if n < 2 {\n      \
    \  return false\n    }\n\n    // Check special case: 2.\n    if n == 2 {\n   \
    \     return true\n    }\n\n    // Check special case: 3.\n    if n == 3 {\n \
    \       return true\n    }\n\n    // Check special case: 5.\n    if n == 5 {\n\
    \        return true\n    }\n\n    // Check special case: 7.\n    if n == 7 {\n\
    \        return true\n    }\n\n    // Check special case: 11.\n    if n == 11\
    \ {\n        return true\n    }\n\n    // Check special case: 101.\n    if n ==\
    \ 101 {\n        return true\n    }\n\n    // Check special case: 13441.\n   \
    \ if n == 13441 {\n        return true\n    }\n\n    // Calculate square root\
    \ and check bounds.\n    let sqrt = (Double(n) + 1).sqrt()\n    if sqrt < 2 {\n\
    \        return false\n    }\n    if sqrt > Double(Double.max) {\n        return\
    \ false\n    }\n\n    // Check factors.\n    let factors: Set<Int> = [2, 3, 5,\
    \ 7, 11, 13]\n    for factor in factors {\n        if factor*factor <= sqrt {\n\
    \            if n % factor == 0 {\n                return false\n            }\n\
    \        }\n    }\n\n    // Check composite numbers.\n    let composites: Set<Int>\
    \ = [1, 3, 7, 11, 13]\n    for compositeFactors in composites {\n        let factors:\
    \ Set<Int> = [2, compositeFactors]\n        for factor in factors {\n        \
    \    if factor*factor <= sqrt {\n                if n % factor == 0 {\n      \
    \              return false\n                }\n            }\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwsi2svi_.swift:59:32: error: value of type 'Double' has no member\
    \ 'sqrt'\n    let sqrt = (Double(n) + 1).sqrt()\n               ~~~~~~~~~~~~~~~\
    \ ^~~~\n/tmp/tmpwsi2svi_.swift:63:29: error: type 'Double' has no member 'max'\n\
    \    if sqrt > Double(Double.max) {\n                     ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var p = 1\n    var q = n - 1\n    var r =\
    \ true\n    while p <= n {\n        if ((n % p) == 0) {\n            r = false\n\
    \            break\n        }\n        p++\n    }\n    while (q >= 1) {\n    \
    \    if ((n % q) == 0) {\n            r = false\n            break\n        }\n\
    \        q--\n    }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp0hxi5qu.swift:26:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        p++\n         ^~\n/tmp/tmpp0hxi5qu.swift:33:10:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n        q--\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var result = true\n    for number in 1...n\
    \ {\n        if ((number % 2) == 0) {\n            result = false\n          \
    \  break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp0s13grxb/tmp0s13grxb.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d92969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d92660b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d92660988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d9265f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0s13grxb                        0x00005606080dd3a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b0d92b55460 __libc_start_main +
    245

    6    tmp0s13grxb                        0x00005606080dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // Check parameters\n    guard n >= 2 else\
    \ { return false }\n    guard n >= n else { return false }\n\n    // First prime\
    \ number\n    var p: Int = 2\n    var i: Int\n    \n    // Loop through all odd\
    \ numbers greater than or equal to sqrt(n)\n    repeat  {\n        // Check whether\
    \ current number is divisible by p\n        guard n % p == 0 else { return false\
    \ }\n        // Increment p\n        p = p + 2\n        // Increment i\n     \
    \   i = i + 1\n    }\n    \n    // Last odd number check\n    guard n % 2 == 1\
    \ else { return false }\n    \n    // All primes less than or equal to n have\
    \ been checked\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpovd76uwh.swift:34:5: error: expected 'while' after body of 'repeat'\
    \ statement\n    }\n    ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 0 || n == 1 {\n        return false\n\
    \    }\n    // Sieve of Eratosthenes for primes\n    let sieve = [Int]()\n   \
    \ for i in 2...n {\n        if sieve.contains(i) {\n            continue\n   \
    \     }\n        sieve.append(i)\n        for j in 2...n {\n            if j ==\
    \ i {\n                continue\n            }\n            if sieve.contains(j)\
    \ {\n                break\n            }\n            if n % j == 0 {\n     \
    \           sieve.append(j)\n            }\n        }\n        if sieve.count\
    \ >= n {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbca9rw4l.swift:27:15: error: cannot use mutating member on immutable\
    \ value: 'sieve' is a 'let' constant\n        sieve.append(i)\n        ~~~~~ ^\n\
    /tmp/tmpbca9rw4l.swift:22:5: note: change 'let' to 'var' to make it mutable\n\
    \    let sieve = [Int]()\n    ^~~\n    var\n/tmp/tmpbca9rw4l.swift:36:23: error:\
    \ cannot use mutating member on immutable value: 'sieve' is a 'let' constant\n\
    \                sieve.append(j)\n                ~~~~~ ^\n/tmp/tmpbca9rw4l.swift:22:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let sieve = [Int]()\n  \
    \  ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    switch n {\n    case 2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97:\n\
    \        return true\n    default:\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpu2w1lquy/tmpu2w1lquy.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab531622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab531319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab531319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5313187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2w1lquy                        0x00005591706aa227 <unavailable> + 4647

    5    libc.so.6                          0x00002ab53180e460 __libc_start_main +
    245

    6    tmpu2w1lquy                        0x00005591706a9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let bits = UInt64(n).bit_count()\n    //\
    \ if n == 1 then it is prime\n    if bits == 0 {\n        return true\n    }\n\
    \n    // the prime test will give an incorrect result for small n\n    if bits\
    \ <= bitsPerWord {\n        let bitMask = 1 << bits - 1\n        var isPrime =\
    \ true\n\n        for bitIndex = bitsPerWord - 1; bitIndex >= 0; bitIndex -= 1\
    \ {\n            let bit = 1 << bitIndex\n            let bitMaskInvert = ~bitMask\n\
    \            if n & bitMaskInvert == 0 {\n                isPrime = false\n  \
    \              break\n            }\n        }\n\n        return isPrime\n   \
    \ }\n\n    // if n is evenly divisible by 2 then it is prime\n    if n % 2 ==\
    \ 0 {\n        return true\n    }\n\n    // test all known composites of n\n \
    \   for prime in 2..Int(sqrtOfTwo(n)) {\n        let p1 = powMod(n, prime, p)\n\
    \        if p1 == 1 {\n            return true\n        }\n\n        let p2 =\
    \ powMod(prime, p, p)\n        if p2 == 1 {\n            return true\n       \
    \ }\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc6_yfw70.swift:29:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for bitIndex = bitsPerWord - 1; bitIndex >= 0; bitIndex\
    \ -= 1 {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpc6_yfw70.swift:18:26: error: value of type 'UInt64' has no member 'bit_count'\n\
    \    let bits = UInt64(n).bit_count()\n               ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpc6_yfw70.swift:25:16:\
    \ error: cannot find 'bitsPerWord' in scope\n    if bits <= bitsPerWord {\n  \
    \             ^~~~~~~~~~~\n/tmp/tmpc6_yfw70.swift:47:19: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for prime in 2..Int(sqrtOfTwo(n)) {\n\
    \                  ^~\n                  ...\n/tmp/tmpc6_yfw70.swift:47:25: error:\
    \ cannot find 'sqrtOfTwo' in scope\n    for prime in 2..Int(sqrtOfTwo(n)) {\n\
    \                        ^~~~~~~~~\n/tmp/tmpc6_yfw70.swift:30:28: error: cannot\
    \ find 'bitIndex' in scope\n            let bit = 1 << bitIndex\n            \
    \               ^~~~~~~~\n/tmp/tmpc6_yfw70.swift:48:18: error: cannot find 'powMod'\
    \ in scope\n        let p1 = powMod(n, prime, p)\n                 ^~~~~~\n/tmp/tmpc6_yfw70.swift:48:35:\
    \ error: cannot find 'p' in scope\n        let p1 = powMod(n, prime, p)\n    \
    \                              ^\n/tmp/tmpc6_yfw70.swift:53:18: error: cannot\
    \ find 'powMod' in scope\n        let p2 = powMod(prime, p, p)\n             \
    \    ^~~~~~\n/tmp/tmpc6_yfw70.swift:53:32: error: cannot find 'p' in scope\n \
    \       let p2 = powMod(prime, p, p)\n                               ^\n/tmp/tmpc6_yfw70.swift:53:35:\
    \ error: cannot find 'p' in scope\n        let p2 = powMod(prime, p, p)\n    \
    \                              ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // base case\n    if n == 1 {\n        return\
    \ true\n    }\n\n    // iterate from 2 to n-1\n    for var i = 2; i <= n-1; i++\
    \ {\n        // only check up to the square root of the number\n        if i %\
    \ i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxza4qmbf.swift:24:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n-1; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // The sieve of Eratosthenes requires you\
    \ to precompute the prime\n    // numbers (because once you have computed them,\
    \ you cannot know if they\n    // are prime).\n    if n < 2 {\n        return\
    \ false\n    }\n    if n == 2 {\n        return true\n    }\n    var is_prime:\
    \ [Bool]\n    is_prime = [Bool](repeating: false, count: n+1)\n    is_prime[0]\
    \ = is_prime[1] = true\n    for i in 2..<n {\n        if !is_prime[i] {\n    \
    \        is_prime[i] = true\n            for j in 2..<n {\n                if\
    \ i * j < n {\n                    is_prime[i*j] = false\n                }\n\
    \            }\n        }\n    }\n    return is_prime[n]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfqxrgvur.swift:29:31: error: use of '=' in a boolean context, did\
    \ you mean '=='?\n    is_prime[0] = is_prime[1] = true\n                     \
    \     ~   ^ ~~~~\n                              ==\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    var i = 1\n    var s = Int64(1)\n    for ; i * i <= n; i++ {\n        if\
    \ n % i == 0 {\n            s = s * i\n        }\n    }\n    return (s == n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc3rhbqhj.swift:23:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for ; i * i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return (n - 1) / 2 < 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp5p8s_7ht/tmp5p8s_7ht.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8b7d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8b79fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8b79fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8b79fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5p8s_7ht                        0x00005597061462b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ad8b7ef2460 __libc_start_main +
    245

    6    tmp5p8s_7ht                        0x0000559706145ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n < 4 {\n        return true\n\
    \    }\n    if n == 4 {\n        return false\n    }\n    if n <= 31 && n != 2\
    \ {\n        for divisor in 1...Int(sqrt(Double(n))+1) {\n            if n % divisor\
    \ == 0 {\n                return false\n            }\n        }\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    var result =\
    \ true\n    if n == 31 {\n        return false\n    }\n    if n < 61 {\n     \
    \   for divisor in 2...Int(sqrt(Double(n))+1) {\n            if n % divisor ==\
    \ 0 {\n                result = false\n                break\n            }\n\
    \        }\n    }\n    else {\n        for divisor in 2...Int(sqrt(Double(n))+1)\
    \ {\n            if n % divisor == 0 {\n                result = true\n      \
    \          break\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprj87i9x6.swift:31:32: error: cannot find 'sqrt' in scope\n    \
    \    for divisor in 1...Int(sqrt(Double(n))+1) {\n                           \
    \    ^~~~\n/tmp/tmprj87i9x6.swift:46:32: error: cannot find 'sqrt' in scope\n\
    \        for divisor in 2...Int(sqrt(Double(n))+1) {\n                       \
    \        ^~~~\n/tmp/tmprj87i9x6.swift:54:32: error: cannot find 'sqrt' in scope\n\
    \        for divisor in 2...Int(sqrt(Double(n))+1) {\n                       \
    \        ^~~~\n"
  stdout: ''
  timestamp: 1659978687
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return true\n    }\n\
    \    return n == 2 || is_prime(n-1) || n % 2 == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx4l4zvf8.swift:21:31: error: missing argument label 'n:' in call\n\
    \    return n == 2 || is_prime(n-1) || n % 2 == 0\n                          \
    \    ^\n                              n: \n"
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  // TODO: Implement this function.\n  return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpos2nsg00/tmpos2nsg00.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf0ba1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf0b716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf0b716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf0b7157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpos2nsg00                        0x00005650f83951b3 <unavailable> + 4531

    5    libc.so.6                          0x00002adf0bc0b460 __libc_start_main +
    245

    6    tmpos2nsg00                        0x00005650f8394e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let n = UInt(n)\n    if n > 2 {\n       \
    \ if n == 1 {\n            return false\n        }\n\n        var m = 3\n    \
    \    while m * m <= n {\n            if n % m == 0 {\n                return false\n\
    \            }\n            m += 2\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphwp_n7xs.swift:26:18: error: binary operator '%' cannot be applied\
    \ to operands of type 'UInt' and 'Int'\n            if n % m == 0 {\n        \
    \       ~ ^ ~\n/tmp/tmphwp_n7xs.swift:26:18: note: overloads for '%' exist with\
    \ these partially matching parameter lists: (Int, Int), (UInt, UInt)\n       \
    \     if n % m == 0 {\n                 ^\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return\
    \ true\n    }\n    var limit = sqrt(UInt32(n))\n    // Optimization: limit could\
    \ be sqrt(UInt32(n))+1\n    if limit == 0 {\n        return false\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <= limit; i\
    \ = i + 2 {\n        if n % i == 0 {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp44eglyxs.swift:35:12: error: expected type\n    for i := 3; i <=\
    \ limit; i = i + 2 {\n           ^\n            <#type#>\n/tmp/tmp44eglyxs.swift:35:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= limit; i =\
    \ i + 2 {\n           ^\n/tmp/tmp44eglyxs.swift:35:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= limit; i = i + 2 {\n    \
    \       ^\n/tmp/tmp44eglyxs.swift:27:17: error: cannot find 'sqrt' in scope\n\
    \    var limit = sqrt(UInt32(n))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    var result = true\n    for i in 2..<Int(sqrt(n) + 1) {\n        if n % i\
    \ == 0 {\n            result = false\n            break\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdpln0zyo.swift:22:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 2..<Int(sqrt(n) + 1) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let m = Int(log2(n))\n    if n < 2 {\n  \
    \      return false\n    }\n    if n == 1 || n == 2 {\n        return true\n \
    \   }\n    // Start by seeing if n is odd.\n    var remainder = n % 2\n    if\
    \ remainder == 0 {\n        return true\n    }\n    // Now check for factors from\
    \ 2 to n/2\n    for factor in 2..(m/2) {\n        if n%factor == 0 {\n       \
    \     remainder = remainder*factor % n\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8q2ztkhd.swift:18:17: error: cannot find 'log2' in scope\n    let\
    \ m = Int(log2(n))\n                ^~~~\n/tmp/tmp8q2ztkhd.swift:31:20: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n    for factor in 2..(m/2)\
    \ {\n                   ^~\n                   ...\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n\n    // if n is even then return\
    \ false since any even number divides evenly\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n\n    // otherwise iterate over all odd numbers up to sqrt(n)\n\
    \    var d: Int = 0\n    var i = 1\n    var div: Int = 0\n    while i <= n {\n\
    \        div = n / i\n        if div > 1 {\n            d = 1\n        } else\
    \ {\n            d = i\n        }\n        if n % i == 0 {\n            return\
    \ false\n        }\n\n        if d == n {\n            if i < (n / 2) {\n    \
    \            return false\n            }\n            if i >= n {\n          \
    \      return true\n            }\n        }\n        i++\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm2701cuq.swift:53:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let mut primes = vec![true; n / 2 + 1];\n\
    \    primes[n - 1] = false;\n    primes.reverse();\n    for i in primes.iter()\
    \ {\n        if i {\n            primes[i / 2 + 1] = false;\n        }\n    }\n\
    \    for i in primes.iter() {\n        if i != 0 {\n            return false;\n\
    \        }\n    }\n    return primes[0];\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7capkckd.swift:18:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut primes =\
    \ vec![true; n / 2 + 1];\n            ^\n/tmp/tmp7capkckd.swift:18:13: note: join\
    \ the identifiers together\n    let mut primes = vec![true; n / 2 + 1];\n    \
    \    ~~~~^~~~~~\n        mutprimes\n/tmp/tmp7capkckd.swift:18:13: note: join the\
    \ identifiers together with camel-case\n    let mut primes = vec![true; n / 2\
    \ + 1];\n        ~~~~^~~~~~\n        mutPrimes\n/tmp/tmp7capkckd.swift:18:31:\
    \ error: expected ',' separator\n    let mut primes = vec![true; n / 2 + 1];\n\
    \                              ^\n                              ,\n/tmp/tmp7capkckd.swift:18:31:\
    \ error: expected expression in list of expressions\n    let mut primes = vec![true;\
    \ n / 2 + 1];\n                              ^\n/tmp/tmp7capkckd.swift:18:22:\
    \ error: cannot find 'vec' in scope\n    let mut primes = vec![true; n / 2 + 1];\n\
    \                     ^~~\n/tmp/tmp7capkckd.swift:19:5: error: cannot find 'primes'\
    \ in scope\n    primes[n - 1] = false;\n    ^~~~~~\n/tmp/tmp7capkckd.swift:20:5:\
    \ error: cannot find 'primes' in scope\n    primes.reverse();\n    ^~~~~~\n/tmp/tmp7capkckd.swift:21:14:\
    \ error: cannot find 'primes' in scope\n    for i in primes.iter() {\n       \
    \      ^~~~~~\n/tmp/tmp7capkckd.swift:26:14: error: cannot find 'primes' in scope\n\
    \    for i in primes.iter() {\n             ^~~~~~\n/tmp/tmp7capkckd.swift:31:12:\
    \ error: cannot find 'primes' in scope\n    return primes[0];\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tif n\
    \ > 1 {\n\t\tvar i uint64 = 1\n\t\tfor ; ; i++ {\n\t\t\tif i != n {\n\t\t\t\t\
    break\n\t\t\t}\n\t\t\tif i%2 == 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif i%3\
    \ == 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif i%5 == 0 {\n\t\t\t\treturn false\n\
    \t\t\t}\n\t\t\tif i%7 == 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcrlggg_5.swift:22:9: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n                var\
    \ i uint64 = 1\n                      ^\n/tmp/tmpcrlggg_5.swift:22:9: note: join\
    \ the identifiers together\n                var i uint64 = 1\n               \
    \     ~~^~~~~~\n                    iuint64\n/tmp/tmpcrlggg_5.swift:22:9: note:\
    \ join the identifiers together with camel-case\n                var i uint64\
    \ = 1\n                    ~~^~~~~~\n                    iUint64\n/tmp/tmpcrlggg_5.swift:23:3:\
    \ error: C-style for statement has been removed in Swift 3\n                for\
    \ ; ; i++ {\n                ^   ~~~~~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    func isPrime(_ n: Int) -> Bool {\n      \
    \  var x: Int\n        for x = 2 ; x <= n ; x += 1 {\n            if n == x {\
    \ return true }\n            if n % x == 0 { return false }\n        }\n     \
    \   return true\n    }\n    return isPrime(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps9mkv_86.swift:20:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for x = 2 ; x <= n ; x += 1 {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    \n    var result = true\n  \
    \  \n    let max_int = (Int64.maxValue - 2) / 2\n    if n > max_int {\n      \
    \  return false\n    }\n    \n    for prime in 2..<n {\n        if !(n % prime)\
    \ {\n            result = false\n            break\n        }\n    }\n    \n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbqbjpzph.swift:27:26: error: type 'Int64' has no member 'maxValue'\n\
    \    let max_int = (Int64.maxValue - 2) / 2\n                   ~~~~~ ^~~~~~~~\n\
    /tmp/tmpbqbjpzph.swift:33:16: error: type 'Int' cannot be used as a boolean; test\
    \ for '== 0' instead\n        if !(n % prime) {\n           ~   ^\n          \
    \  (           == 0)\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var i = 2\n    var p: Bool = false\n    while\
    \ i < n {\n        if ((n % i) == 0) {\n            p = true\n            break\n\
    \        }\n        i += 1\n    }\n    return p\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmps1l9y9h6/tmps1l9y9h6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c7e066c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c7dd5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c7dd5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c7dd5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1l9y9h6                        0x000055c5a9813243 <unavailable> + 4675

    5    libc.so.6                          0x00002b5c7e252460 __libc_start_main +
    245

    6    tmps1l9y9h6                        0x000055c5a9812ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978687
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \n    for x in 2...(n-1) {\n        if n % x == 0 {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978687
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return is_prime(n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu54orfhj.swift:18:21: error: missing argument label 'n:' in call\n\
    \    return is_prime(n)\n                    ^\n                    n: \n"
  stdout: ''
  timestamp: 1659978686
