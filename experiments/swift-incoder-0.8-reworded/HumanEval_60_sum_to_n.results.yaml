language: swift
name: HumanEval_60_sum_to_n
results:
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return sum_to(n - 1, n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpaez1ndb8.swift:14:10: error: cannot find 'sum_to' in scope\n  return\
    \ sum_to(n - 1, n)\n         ^~~~~~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  let a = 1 ..< n\n  return a.fold(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmps1lcmp9s.swift:15:12: error: value of type 'Range<Int>' has no\
    \ member 'fold'\n  return a.fold(0, +)\n         ~ ^~~~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return sumTo(n / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp7iw4fzeu.swift:14:12: error: cannot find 'sumTo' in scope\n   \
    \ return sumTo(n / 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: -1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return 1 + sum_to_n(n: n+1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978435
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = n\n    for _ in 1...n {\n        sum += n\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpiz8xdwhh/tmpiz8xdwhh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e65be7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e658deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e658de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e658dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiz8xdwhh                        0x000055c75a137335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4e65dd3460 __libc_start_main +
    245

    6    tmpiz8xdwhh                        0x000055c75a136fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return __builtin__.sum_to_n(n: n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpb7dthyy7.swift:14:12: error: cannot find '__builtin__' in scope\n\
    \    return __builtin__.sum_to_n(n: n)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\treturn sum_to_n_impl(&n, false)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpl8bv4k1v.swift:14:9: error: cannot find 'sum_to_n_impl' in scope\n\
    \        return sum_to_n_impl(&n, false)\n               ^~~~~~~~~~~~~\n/tmp/tmpl8bv4k1v.swift:14:23:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \        return sum_to_n_impl(&n, false)\n                             ^~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let one_to_n = Float(1.0) / Float(n)\n    let zero_to_n =\
    \ Float(0.0) / Float(n)\n    return Int(pow(one_to_n, Double(count) / Double(n)\
    \ + zero_to_n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqelzy297.swift:16:16: error: cannot find 'pow' in scope\n    return\
    \ Int(pow(one_to_n, Double(count) / Double(n) + zero_to_n))\n               ^~~\n\
    /tmp/tmpqelzy297.swift:16:37: error: cannot find 'count' in scope\n    return\
    \ Int(pow(one_to_n, Double(count) / Double(n) + zero_to_n))\n                \
    \                    ^~~~~\n/tmp/tmpqelzy297.swift:16:12: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n    return Int(pow(one_to_n, Double(count)\
    \ / Double(n) + zero_to_n))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978451
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\treturn sum_impl(to: n, by: 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp_hj_rre8.swift:14:9: error: cannot find 'sum_impl' in scope\n \
    \       return sum_impl(to: n, by: 0)\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: -1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 1 + sum_to_n(n: n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978435
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return Int(arc4random_uniform(UInt32(n))) + 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp90ou7fqf.swift:14:14: error: cannot find 'arc4random_uniform' in\
    \ scope\n  return Int(arc4random_uniform(UInt32(n))) + 1\n             ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 1 + sum_to_n(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpo2al9f9m.swift:14:25: error: missing argument label 'n:' in call\n\
    \    return 1 + sum_to_n(n - 1)\n                        ^\n                 \
    \       n: \n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpstjsr8o7.swift:16:13: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n        sum += i\n        ~~~ ^\n/tmp/tmpstjsr8o7.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let sum = 0\n    ^~~\n \
    \   var\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return IntFunc(IntSumToN, n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp5uks_yqq.swift:14:12: error: cannot find 'IntFunc' in scope\n \
    \   return IntFunc(IntSumToN, n)\n           ^~~~~~~\n/tmp/tmp5uks_yqq.swift:14:20:\
    \ error: cannot find 'IntSumToN' in scope\n    return IntFunc(IntSumToN, n)\n\
    \                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 1 + n + sum_to_n(n - 1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpu0wj5w9j.swift:14:29: error: missing argument label 'n:' in call\n\
    \    return 1 + n + sum_to_n(n - 1)\n                            ^\n         \
    \                   n: \n"
  stdout: ''
  timestamp: 1659978429
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpvvxior26/tmpvvxior26.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37630fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3762df1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3762df1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3762df07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvxior26                        0x000055656687f230 <unavailable> + 4656

    5    libc.so.6                          0x00002b37632e6460 __libc_start_main +
    245

    6    tmpvvxior26                        0x000055656687ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return Sum(n) + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpc55zdf9f.swift:14:10: error: cannot find 'Sum' in scope\n  return\
    \ Sum(n) + 1\n         ^~~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return sumToN(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp1ddyiplb.swift:14:12: error: cannot find 'sumToN' in scope\n  \
    \  return sumToN(n)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return Int(arc4random_uniform(UInt32(n + 1))) + 1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpfe9ma5yb.swift:14:14: error: cannot find 'arc4random_uniform' in\
    \ scope\n  return Int(arc4random_uniform(UInt32(n + 1))) + 1\n             ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(pow(Double(n), Double(1.0 + 1.0))) - Int(pow(Double(n),\
    \ Double(2.0)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmppi9ldrt9.swift:14:16: error: cannot find 'pow' in scope\n    return\
    \ Int(pow(Double(n), Double(1.0 + 1.0))) - Int(pow(Double(n), Double(2.0)))\n\
    \               ^~~\n/tmp/tmppi9ldrt9.swift:14:57: error: cannot find 'pow' in\
    \ scope\n    return Int(pow(Double(n), Double(1.0 + 1.0))) - Int(pow(Double(n),\
    \ Double(2.0)))\n                                                        ^~~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmptbvocroh/tmptbvocroh.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af80b907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af80b5feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af80b5fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af80b5fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbvocroh                        0x0000564b69469230 <unavailable> + 4656

    5    libc.so.6                          0x00002af80baf3460 __libc_start_main +
    245

    6    tmptbvocroh                        0x0000564b69468e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  let result = 1\n  for _ in 0..<n {\n    result *= n\n  }\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp_qjwt44n.swift:16:12: error: left side of mutating operator isn't\
    \ mutable: 'result' is a 'let' constant\n    result *= n\n    ~~~~~~ ^\n/tmp/tmp_qjwt44n.swift:14:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let result = 1\n  ^~~\n  var\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let res = 0\n    for _ in 1...n {\n        res += (1 + n)\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp_lulpajr.swift:16:13: error: left side of mutating operator isn't\
    \ mutable: 'res' is a 'let' constant\n        res += (1 + n)\n        ~~~ ^\n\
    /tmp/tmp_lulpajr.swift:14:5: note: change 'let' to 'var' to make it mutable\n\
    \    let res = 0\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return Int(bitPattern(bitPattern: uintBitsToInt(n)) &\n   \
    \           uintBitsToInt(0x55555555)) + n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp08z5oknb.swift:14:14: error: cannot find 'bitPattern' in scope\n\
    \  return Int(bitPattern(bitPattern: uintBitsToInt(n)) &\n             ^~~~~~~~~~\n\
    /tmp/tmp08z5oknb.swift:14:37: error: cannot find 'uintBitsToInt' in scope\n  return\
    \ Int(bitPattern(bitPattern: uintBitsToInt(n)) &\n                           \
    \         ^~~~~~~~~~~~~\n/tmp/tmp08z5oknb.swift:15:15: error: cannot find 'uintBitsToInt'\
    \ in scope\n              uintBitsToInt(0x55555555)) + n\n              ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  switch n {\n  case 0:\n    return 0\n  case 1 ... n:\n    return\
    \ n\n  default:\n    return n + sum_to_n(n - 1)\n  }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpa7aoh6qm.swift:20:25: error: missing argument label 'n:' in call\n\
    \    return n + sum_to_n(n - 1)\n                        ^\n                 \
    \       n: \n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  let start = MemoryLayout<Int>.size\n  let end = start + n\n\
    \  return withUnsafeMutablePointer(&start) { ptr in\n    withUnsafeMutablePointer(&end)\
    \ { ptr2 in\n      withUnsafeMutablePointer(to: &n) { ptr3 in\n        return\
    \ Memory.max\n      }\n    }\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp5u6qh18v.swift:19:16: error: cannot find 'Memory' in scope\n  \
    \      return Memory.max\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let ni = n - (n & 1)\n    var sum = ni\n    for _ in 1..(ni\
    \ / 2) {\n        sum *= 2\n    }\n    sum += ni\n    sum %= n\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp38d_07uh.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for _ in 1..(ni / 2) {\n              ^~\n        \
    \      ...\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpk1r1ojf8/tmpk1r1ojf8.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaa2639c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaa2330b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaa2330988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaa232f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1r1ojf8                        0x000055d077e5f1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002acaa2825460 __libc_start_main +
    245

    6    tmpk1r1ojf8                        0x000055d077e5ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978429
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var result = 0\n    for _ in 0..<n {\n        result += n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmp0spwe9av/tmp0spwe9av.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea68d77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea68a6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea68a6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea68a6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0spwe9av                        0x00005606c9f283b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aea68f63460 __libc_start_main +
    245

    6    tmp0spwe9av                        0x00005606c9f27fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    switch n {\n    case 0:\n        return 1\n    case 1:\n\
    \        return 2\n    case 2:\n        return 3\n    case 3:\n        return\
    \ 4\n    case 4:\n        return 5\n    case 5:\n        return 6\n    case 6:\n\
    \        return 7\n    case 7:\n        return 8\n    case 8:\n        return\
    \ 9\n    case 9:\n        return 10\n    case 10:\n        return 11\n    case\
    \ 11:\n        return 12\n    case 12:\n        return 13\n    case 13:\n    \
    \    return 14\n    case 14:\n        return 15\n    case 15:\n        return\
    \ 16\n    case 16:\n        return 17\n    case 17:\n        return 18\n    case\
    \ 18:\n        return 19\n    case 19:\n        return 20\n    case 20:\n    \
    \    return 21\n    case 21:\n        return 22\n    case 22:\n        return\
    \ 23\n    case 23:\n        return 24\n    case 24:\n        return 25\n    case\
    \ 25:\n        return 26\n    case 26:\n        return 27\n    case 27:\n    \
    \    return 28\n    case 28:\n        return 29\n    case 29:\n        return\
    \ 30\n    case 30:\n        return 31\n    case 31:\n        return 32\n    case\
    \ 32:\n        return 33\n    case 33:\n        return 34\n    case 34:\n    \
    \    return 35\n    case 35:\n        return 36\n    case 36:\n        return\
    \ 37\n    case 37:\n        return 38\n    case 38:\n        return 39\n    case\
    \ 39:\n        return 40\n    case 40:\n        return 41\n    case 41:\n    \
    \    return 42\n    case 42:\n        return 43\n    case 43:\n        return\
    \ 44\n    case 44:\n        return 45\n    case 45:\n        return 46\n    case\
    \ 46:\n        return 47\n    case 47:\n        return 48\n    case 48:\n    \
    \    return 49\n    case 49:\n        return 50\n    case 50:\n        return\
    \ 51\n    case 51:\n        return 52\n    case 52:\n        return 53\n    case\
    \ 53:\n        return 54\n    case 54:\n        return 55\n    case 55:\n    \
    \    return 56\n    case 56:\n        return 57\n    case 57:\n        return\
    \ 58\n    case 58:\n        return 59\n    case 59:\n        return 60\n    case\
    \ 60:\n        return 61\n    case 61:\n        return 62\n    case 62:\n    \
    \    return 63\n    case 63:\n        return 64\n    case 64:\n        return\
    \ 65\n    case 65:\n        return 66\n    case 66:\n        return 67\n    case\
    \ 67:\n        return 68\n    case 68:\n        return 69\n    case 69:\n    \
    \    return 70\n    case 70:\n        return 71\n    case 71:\n        return\
    \ 72\n    case 72:\n        return 73\n    case 73:\n        return 74\n    case\
    \ 74:\n        return 75\n    case 75:\n        return 76\n    case 76:\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp1gpizwi3.swift:167:5: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n    case 76:\n    ^~~~~~~~\n            \
    \ break\n/tmp/tmp1gpizwi3.swift:187:33: error: expected '}' at end of brace statement\n\
    assert(sum_to_n(n: 100) == 5050)\n                                ^\n/tmp/tmp1gpizwi3.swift:13:30:\
    \ note: to match this opening '{'\nfunc sum_to_n(n: Int) -> Int {\n          \
    \                   ^\n/tmp/tmp1gpizwi3.swift:14:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmp1gpizwi3.swift:14:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmp1gpizwi3.swift:171:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let res = 0\n    var i = n\n    while i >= 1 {\n        res\
    \ += i\n        i -= 1\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpg8nxd0j4.swift:17:13: error: left side of mutating operator isn't\
    \ mutable: 'res' is a 'let' constant\n        res += i\n        ~~~ ^\n/tmp/tmpg8nxd0j4.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let res = 0\n    ^~~\n \
    \   var\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0 ..< n {\n        result *=\
    \ n\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpb7u0hynu/tmpb7u0hynu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6af372ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6af3421b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6af3421988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6af34207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7u0hynu                        0x0000557c0903d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b6af3916460 __libc_start_main +
    245

    6    tmpb7u0hynu                        0x0000557c0903cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978429
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var n2: Int = n\n  var sum: Int = 0\n  while n2 > 0 {\n   \
    \ sum += n2\n    n2 -= 1\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(reduce(1) { $0 + $1 * ($0 - 1) })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmptuwl81ik.swift:14:16: error: cannot find 'reduce' in scope\n  \
    \  return Int(reduce(1) { $0 + $1 * ($0 - 1) })\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659978434
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var sum = 0\n  for i := 1; i <= n { sum += i }\n  return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmplus8biq6.swift:15:10: error: expected type\n  for i := 1; i <=\
    \ n { sum += i }\n         ^\n          <#type#>\n/tmp/tmplus8biq6.swift:15:10:\
    \ error: expected 'in' after for-each pattern\n  for i := 1; i <= n { sum += i\
    \ }\n         ^\n/tmp/tmplus8biq6.swift:15:10: error: expected Sequence expression\
    \ for for-each loop\n  for i := 1; i <= n { sum += i }\n         ^\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(UnsafeMutablePointer(mutatingUserPointer(to:\
    \ n)), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp4ervlqs4.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(UnsafeMutablePointer(mutatingUserPointer(to: n)), n)\n   \
    \      ^~~~~~~~~\n/tmp/tmp4ervlqs4.swift:14:41: error: cannot find 'mutatingUserPointer'\
    \ in scope\n  return _sum_to_n(UnsafeMutablePointer(mutatingUserPointer(to: n)),\
    \ n)\n                                        ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp4ervlqs4.swift:14:20:\
    \ error: generic parameter 'Pointee' could not be inferred\n  return _sum_to_n(UnsafeMutablePointer(mutatingUserPointer(to:\
    \ n)), n)\n                   ^\n/tmp/tmp4ervlqs4.swift:14:20: note: explicitly\
    \ specify the generic arguments to fix this issue\n  return _sum_to_n(UnsafeMutablePointer(mutatingUserPointer(to:\
    \ n)), n)\n                   ^\n                                       <Any>\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(n) * (Int(n) + 1) / (Int(n) + 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: Exception
  stderr: 'tmprequ9hgn/tmprequ9hgn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cd2b85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cd287cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cd287c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cd287b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprequ9hgn                        0x0000559a677873f0 <unavailable> + 5104

    5    libc.so.6                          0x00002b2cd2d71460 __libc_start_main +
    245

    6    tmprequ9hgn                        0x0000559a67787029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return sum_to_n_impl(&n, n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpd7fjg9mh.swift:14:10: error: cannot find 'sum_to_n_impl' in scope\n\
    \  return sum_to_n_impl(&n, n)\n         ^~~~~~~~~~~~~\n/tmp/tmpd7fjg9mh.swift:14:24:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \  return sum_to_n_impl(&n, n)\n                       ^~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return sum_to_n_impl(&n, nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp0erelc63.swift:14:10: error: cannot find 'sum_to_n_impl' in scope\n\
    \  return sum_to_n_impl(&n, nil)\n         ^~~~~~~~~~~~~\n/tmp/tmp0erelc63.swift:14:24:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \  return sum_to_n_impl(&n, nil)\n                       ^~\n/tmp/tmp0erelc63.swift:14:28:\
    \ error: 'nil' requires a contextual type\n  return sum_to_n_impl(&n, nil)\n \
    \                          ^\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  if n < 1 {\n    return 0\n  }\n  var sum = 0\n  for num in\
    \ 1...n {\n    sum += num\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\tif n == 0 || n == 1 {\n\t\treturn n\n\t}\n\n\tvar sum = 0\n\
    \tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpq307sj9o.swift:19:9: error: expected type\n        for i := 1;\
    \ i <= n; i++ {\n               ^\n                <#type#>\n/tmp/tmpq307sj9o.swift:19:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 1; i <= n; i++\
    \ {\n               ^\n/tmp/tmpq307sj9o.swift:19:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 1; i <= n; i++ {\n               ^\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  let limit = Int(UInt64(n))\n  return 1 + Int(sum_to_n_impl(limit))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqpoy1hr3.swift:15:18: error: cannot find 'sum_to_n_impl' in scope\n\
    \  return 1 + Int(sum_to_n_impl(limit))\n                 ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (n * (n - 1) / 2).rounded(.up)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpj_gnkm3f.swift:14:25: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Float16'\n    return (n * (n - 1) / 2).rounded(.up)\n\
    \            ~~~~~~~~~~~ ^ ~\n/tmp/tmpj_gnkm3f.swift:14:25: note: overloads for\
    \ '/' exist with these partially matching parameter lists: (Double, Double), (Float,\
    \ Float), (Float16, Float16), (Float80, Float80)\n    return (n * (n - 1) / 2).rounded(.up)\n\
    \                        ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    switch n {\n    case 1: return 1\n    case 2: return 2\n\
    \    case 3: return 3\n    case 4: return 4\n    case 5: return 5\n    case 6:\
    \ return 6\n    case 7: return 7\n    case 8: return 8\n    case 9: return 9\n\
    \    case 10: return 10\n    case 11: return 11\n    case 12: return 12\n    case\
    \ 13: return 13\n    case 14: return 14\n    case 15: return 15\n    case 16:\
    \ return 16\n    case 17: return 17\n    case 18: return 18\n    case 19: return\
    \ 19\n    case 20: return 20\n    case 21: return 21\n    case 22: return 22\n\
    \    case 23: return 23\n    case 24: return 24\n    case 25: return 25\n    case\
    \ 26: return 26\n    case 27: return 27\n    case 28: return 28\n    case 29:\
    \ return 29\n    case 30: return 30\n    case 31: return 31\n    case 32: return\
    \ 32\n    case 33: return 33\n    case 34: return 34\n    case 35: return 35\n\
    \    case 36: return 36\n    case 37: return 37\n    case 38: return 38\n    case\
    \ 39: return 39\n    case 40: return 40\n    case 41: return 41\n    case 42:\
    \ return 42\n    case 43: return 43\n    case 44: return 44\n    case 45: return\
    \ 45\n    case 46: return 46\n    case 47: return 47\n    case 48: return 48\n\
    \    case 49: return 49\n    case 50: return 50\n    case 51: return 51\n    case\
    \ 52: return 52\n    case 53: return 53\n    case 54: return 54\n    case 55:\
    \ return 55\n    case 56: return 56\n    case 57: return 57\n    case 58: return\
    \ 58\n    case 59: return 59\n    case 60: return 60\n    case 61: return 61\n\
    \    case 62: return 62\n    case 63: return 63\n    case 64: return 64\n    case\
    \ 65: return 65\n    case 66: return 66\n    case 67: return 67\n    case 68:\
    \ return 68\n    case 69: return 69\n    case 70: return 70\n    case 71: return\
    \ 71\n    case 72: return 72\n    case 73: return 73\n    case 74: return 74\n\
    \    case 75: return 75\n    case 76: return 76\n    case 77: return 77\n    case\
    \ 78: return 78\n    case 79: return 79\n    case 80: return 80\n    case 81:\
    \ return 81\n    case 82: return 82\n    case 83: return 83\n    case 84: return\
    \ 84\n    case 85: return 85\n    case 86: return 86\n    case 87: return 87\n\
    \    case 88: return 88\n    case 89: return 89\n    case 90: return 90\n    case\
    \ 91: return 91\n    case 92: return 92\n    case 93: return 93\n    case 94:\
    \ return 94\n    case 95: return 95\n    case 96: return 96\n    case 97: return\
    \ 97\n    case 98: return 98\n    case 99: return 99\n    case 100: return 100\n\
    \    case 101: \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp2ek1_bmt.swift:115:5: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n    case 101: \n    ^~~~~~~~~\n         \
    \     break\n/tmp/tmp2ek1_bmt.swift:135:33: error: expected '}' at end of brace\
    \ statement\nassert(sum_to_n(n: 100) == 5050)\n                              \
    \  ^\n/tmp/tmp2ek1_bmt.swift:13:30: note: to match this opening '{'\nfunc sum_to_n(n:\
    \ Int) -> Int {\n                             ^\n/tmp/tmp2ek1_bmt.swift:14:5:\
    \ error: switch must be exhaustive\n    switch n {\n    ^\n/tmp/tmp2ek1_bmt.swift:14:5:\
    \ note: do you want to add a default clause?\n    switch n {\n    ^\n/tmp/tmp2ek1_bmt.swift:119:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum: Int = 0\n    for _ in 1...n {\n        sum += 0\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpz3dma5dc/tmpz3dma5dc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1efc3c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1efc0beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1efc0be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1efc0bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz3dma5dc                        0x0000555d57ee8335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1efc5b3460 __libc_start_main +
    245

    6    tmpz3dma5dc                        0x0000555d57ee7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    switch n {\n    case 0:\n        return 0\n    case 1:\n\
    \        return 1\n    case 2:\n        return 2\n    case 3:\n        return\
    \ 3\n    case 4:\n        return 4\n    case 5:\n        return 5\n    case 6:\n\
    \        return 6\n    case 7:\n        return 7\n    case 8:\n        return\
    \ 8\n    case 9:\n        return 9\n    case 10:\n        return 10\n    case\
    \ 11:\n        return 11\n    case 12:\n        return 12\n    case 13:\n    \
    \    return 13\n    case 14:\n        return 14\n    case 15:\n        return\
    \ 15\n    case 16:\n        return 16\n    case 17:\n        return 17\n    case\
    \ 18:\n        return 18\n    case 19:\n        return 19\n    case 20:\n    \
    \    return 20\n    case 21:\n        return 21\n    case 22:\n        return\
    \ 22\n    case 23:\n        return 23\n    case 24:\n        return 24\n    case\
    \ 25:\n        return 25\n    case 26:\n        return 26\n    case 27:\n    \
    \    return 27\n    case 28:\n        return 28\n    case 29:\n        return\
    \ 29\n    case 30:\n        return 30\n    case 31:\n        return 31\n    case\
    \ 32:\n        return 32\n    case 33:\n        return 33\n    case 34:\n    \
    \    return 34\n    case 35:\n        return 35\n    case 36:\n        return\
    \ 36\n    case 37:\n        return 37\n    case 38:\n        return 38\n    case\
    \ 39:\n        return 39\n    case 40:\n        return 40\n    case 41:\n    \
    \    return 41\n    case 42:\n        return 42\n    case 43:\n        return\
    \ 43\n    case 44:\n        return 44\n    case 45:\n        return 45\n    case\
    \ 46:\n        return 46\n    case 47:\n        return 47\n    case 48:\n    \
    \    return 48\n    case 49:\n        return 49\n    case 50:\n        return\
    \ 50\n    case 51:\n        return 51\n    case 52:\n        return 52\n    case\
    \ 53:\n        return 53\n    case 54:\n        return 54\n    case 55:\n    \
    \    return 55\n    case 56:\n        return 56\n    case 57:\n        return\
    \ 57\n    case 58:\n        return 58\n    case 59:\n        return 59\n    case\
    \ 60:\n        return 60\n    case 61:\n        return 61\n    case 62:\n    \
    \    return 62\n    case 63:\n        return 63\n    case 64:\n        return\
    \ 64\n    case 65:\n        return 65\n    case 66:\n        return 66\n    case\
    \ 67:\n        return 67\n    case 68:\n        return 68\n    case 69:\n    \
    \    return 69\n    case 70:\n        return 70\n    case 71:\n        return\
    \ 71\n    case 72:\n        return 72\n    case 73:\n        return 73\n    case\
    \ 74:\n        return 74\n    case 75:\n        return 75\n    case 76:\n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpl3229f9e.swift:167:5: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n    case 76:\n    ^~~~~~~~\n            \
    \ break\n/tmp/tmpl3229f9e.swift:188:33: error: expected '}' at end of brace statement\n\
    assert(sum_to_n(n: 100) == 5050)\n                                ^\n/tmp/tmpl3229f9e.swift:13:30:\
    \ note: to match this opening '{'\nfunc sum_to_n(n: Int) -> Int {\n          \
    \                   ^\n/tmp/tmpl3229f9e.swift:14:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmpl3229f9e.swift:14:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmpl3229f9e.swift:172:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return Int(reduce(to: 0) { $0 + $1 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp6gvmvsw1.swift:14:14: error: cannot find 'reduce' in scope\n  return\
    \ Int(reduce(to: 0) { $0 + $1 })\n             ^~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\treturn Int(arc4random()) % n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpl1od6dro.swift:14:13: error: cannot find 'arc4random' in scope\n\
    \        return Int(arc4random()) % n\n                   ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var total: Int = 0\n    for _ in 0..<n {\n        total +=\
    \ 1\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpaohr61c4/tmpaohr61c4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb830dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb82dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb82dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb82dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaohr61c4                        0x00005558bb4a43b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aeb832ca460 __libc_start_main +
    245

    6    tmpaohr61c4                        0x00005558bb4a3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  if n <= 1 {\n    return n\n  }\n\n  var s = Big(0)\n\n  for\
    \ _ in 0..<n {\n    s = s.Add(Big(1))\n  }\n\n  return s\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpnqpv39i0.swift:18:11: error: cannot find 'Big' in scope\n  var\
    \ s = Big(0)\n          ^~~\n/tmp/tmpnqpv39i0.swift:21:15: error: cannot find\
    \ 'Big' in scope\n    s = s.Add(Big(1))\n              ^~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(arc4random_uniform(UInt32(n)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp8hrlk4x8.swift:14:16: error: cannot find 'arc4random_uniform' in\
    \ scope\n    return Int(arc4random_uniform(UInt32(n)))\n               ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978381
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 1..n {\n        result = result\
    \ * n\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpvr62o4pj.swift:15:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for _ in 1..n {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 1 + sum_to_n(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp5ztf1hi1.swift:17:25: error: missing argument label 'n:' in call\n\
    \    return 1 + sum_to_n(n - 1)\n                        ^\n                 \
    \       n: \n"
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    var num = 1\n    while num < n {\n     \
    \   sum += num\n        num += 1\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpdfcf6toj/tmpdfcf6toj.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4820dc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4820ac0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4820ac0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4820abf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdfcf6toj                        0x000055f18e56b1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b4820fb5460 __libc_start_main +
    245

    6    tmpdfcf6toj                        0x000055f18e56ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var sum: Int = 0\n  for var i = 0; i < n; i++ {\n    sum +=\
    \ i\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpk8wt6pok.swift:15:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 0; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(__builtin__.sum(1...n))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpmcezv6kw.swift:14:16: error: cannot find '__builtin__' in scope\n\
    \    return Int(__builtin__.sum(1...n))\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(arc4random_uniform(UInt32(n)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp8hrlk4x8.swift:14:16: error: cannot find 'arc4random_uniform' in\
    \ scope\n    return Int(arc4random_uniform(UInt32(n)))\n               ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978381
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Range(1, n).reduce(0) { (accumulator, next) in\n \
    \       accumulator + next\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp1a34xijs.swift:14:17: error: initializer expects a single parameter\
    \ of type '(lower: Bound, upper: Bound)' [with Bound = Int]\n    return Range(1,\
    \ n).reduce(0) { (accumulator, next) in\n                ^~~~~~\n            \
    \     (   )\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var sum = 0\n  for _ in 1...n {\n    sum += _\n  }\n  return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmphm0rojds.swift:16:12: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n    sum += _\n           ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return sum_to_n(n: n, f: Int64.init)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp0b8_jmfr.swift:14:34: error: extra argument 'f' in call\n  return\
    \ sum_to_n(n: n, f: Int64.init)\n                 ~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  let s = sum_to_n_internal(n)\n  debugAssert(s >= 0, String.fromRawData(s.bytes))\n\
    \  return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpzjuefr18.swift:14:11: error: cannot find 'sum_to_n_internal' in\
    \ scope\n  let s = sum_to_n_internal(n)\n          ^~~~~~~~~~~~~~~~~\n/tmp/tmpzjuefr18.swift:15:3:\
    \ error: cannot find 'debugAssert' in scope\n  debugAssert(s >= 0, String.fromRawData(s.bytes))\n\
    \  ^~~~~~~~~~~\n/tmp/tmpzjuefr18.swift:15:30: error: type 'String' has no member\
    \ 'fromRawData'\n  debugAssert(s >= 0, String.fromRawData(s.bytes))\n        \
    \              ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\treturn Int(arc4random_uniform(UInt32(n + 1)))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp2z6wiw9i.swift:14:13: error: cannot find 'arc4random_uniform' in\
    \ scope\n        return Int(arc4random_uniform(UInt32(n + 1)))\n             \
    \      ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    var i = 1 // start at 1 to skip 0\n    \n\
    \    for _ = 0 to n {\n        sum += i\n        i = i + 1\n    }\n    \n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpi0huqxis.swift:17:11: error: expected 'in' after for-each pattern\n\
    \    for _ = 0 to n {\n          ^\n/tmp/tmpi0huqxis.swift:17:11: error: expected\
    \ Sequence expression for for-each loop\n    for _ = 0 to n {\n          ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return sequence(start: 1, end: n)\n        .scan(0, { $0\
    \ + $1 })\n        .last!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp4ab6_31l.swift:14:20: error: incorrect argument labels in call\
    \ (have 'start:end:', expected 'first:next:')\n    return sequence(start: 1, end:\
    \ n)\n                   ^~~~~~     ~~~\n                    first     next\n\
    /tmp/tmp4ab6_31l.swift:14:36: error: cannot convert value of type 'Int' to expected\
    \ argument type '(Int) -> Int?'\n    return sequence(start: 1, end: n)\n     \
    \                              ^\n/tmp/tmp4ab6_31l.swift:15:10: error: value of\
    \ type 'UnfoldSequence<Int, (Int?, Bool)>' has no member 'scan'\n        .scan(0,\
    \ { $0 + $1 })\n         ^~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var result = 0\n  for var i = 1; i < n; i++ {\n    result +=\
    \ i\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpipvcc8ln.swift:15:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 1; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let a = 1 + Int(n)\n    return a * sum_to_n(a)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpimueps6b.swift:15:25: error: missing argument label 'n:' in call\n\
    \    return a * sum_to_n(a)\n                        ^\n                     \
    \   n: \n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let sum = 1 // 1 is the default starting value\n    for _\
    \ in 0..<n {\n        sum += 1 // increment the sum\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpxg182n1c.swift:16:13: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n        sum += 1 // increment the sum\n\
    \        ~~~ ^\n/tmp/tmpxg182n1c.swift:14:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let sum = 1 // 1 is the default starting value\n    ^~~\n  \
    \  var\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\treturn sum(1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmphrp9fqj0.swift:14:9: error: cannot find 'sum' in scope\n      \
    \  return sum(1)\n               ^~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return sum(1...n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpkuybr6lh.swift:14:10: error: cannot find 'sum' in scope\n  return\
    \ sum(1...n)\n         ^~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpfjqxgu39.swift:17:25: error: missing argument label 'n:' in call\n\
    \    return n + sum_to_n(n - 1)\n                        ^\n                 \
    \       n: \n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  // TODO: Replace this implementation with a faster algorithm.\n\
    \  var sum = 0\n  for k in 1 ... n {\n    sum += k\n  }\n  return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    switch n {\n    case 10:\n        return 55\n    case 1:\n\
    \        return 1\n    case 2:\n        return 2\n    case 3:\n        return\
    \ 3\n    case 4:\n        return 4\n    case 5:\n        return 5\n    case 6:\n\
    \        return 6\n    case 7:\n        return 7\n    case 8:\n        return\
    \ 8\n    case 9:\n        return 9\n    case 30:\n        return 465\n    case\
    \ 100:\n        return 5050\n    case n:\n        return n*(n+1)/2\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqkiagrsl.swift:14:5: error: switch must be exhaustive\n    switch\
    \ n {\n    ^\n/tmp/tmpqkiagrsl.swift:14:5: note: do you want to add a default\
    \ clause?\n    switch n {\n    ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    switch n {\n    case 0: return 0\n    case 1: return 1\n\
    \    case 2: return 1 + 2\n    case 3: return 1 + 2 + 3\n    case 4: return 1\
    \ + 2 + 3 + 4\n    case 5: return 1 + 2 + 3 + 4 + 5\n    case 6: return 1 + 2\
    \ + 3 + 4 + 5 + 6\n    case 7: return 1 + 2 + 3 + 4 + 5 + 6 + 7\n    case 8: return\
    \ 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\n    case 9: return 1 + 2 + 3 + 4 + 5 + 6 + 7\
    \ + 8 + 9\n    case 10: return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n    case\
    \ 11: return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11\n    case 12: return\
    \ 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12\n    case 13: return 1 + 2\
    \ + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13\n    case 14: return 1 + 2 +\
    \ 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14\n    case 15: return 1 +\
    \ 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15\n    case 16: return\
    \ 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16\n    case\
    \ 17: return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 +\
    \ 16 + 17\n    case 18: return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12\
    \ + 13 + 14 + 15 + 16 + 17 + 18\n    case 19: return 1 + 2 + 3 + 4 + 5 + 6 + 7\
    \ + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19\n    case 20: return\
    \ 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 +\
    \ 18 + 19 + 20\n    case 21: return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11\
    \ + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n    case 22: return 1 + 2\
    \ + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19\
    \ + 20 + 21 + 22\n    case 23: return 1 + 2 + 3 + 4 + 5\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp49yhu7ua.swift:58:33: error: expected '}' at end of brace statement\n\
    assert(sum_to_n(n: 100) == 5050)\n                                ^\n/tmp/tmp49yhu7ua.swift:13:30:\
    \ note: to match this opening '{'\nfunc sum_to_n(n: Int) -> Int {\n          \
    \                   ^\n/tmp/tmp49yhu7ua.swift:14:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmp49yhu7ua.swift:14:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmp49yhu7ua.swift:42:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  let sum = 1\n  for i in 1 ..< n {\n    sum += i\n  }\n  return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpis8hjfr4.swift:16:9: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n    sum += i\n    ~~~ ^\n/tmp/tmpis8hjfr4.swift:14:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let sum = 1\n  ^~~\n  var\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return sum_to_n_impl(&n, 0, n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp0gslcex1.swift:14:12: error: cannot find 'sum_to_n_impl' in scope\n\
    \    return sum_to_n_impl(&n, 0, n)\n           ^~~~~~~~~~~~~\n/tmp/tmp0gslcex1.swift:14:26:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \    return sum_to_n_impl(&n, 0, n)\n                         ^~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpf8fmvrqv/tmpf8fmvrqv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafbfac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafbf7beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafbf7be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafbf7bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8fmvrqv                        0x0000560231f46230 <unavailable> + 4656

    5    libc.so.6                          0x00002aafbfcb3460 __libc_start_main +
    245

    6    tmpf8fmvrqv                        0x0000560231f45e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    switch n {\n    case 1, ..., _:\n        return n\n    case\
    \ _:\n        return 1 // unreachable\n    case _:\n        return 1 + sum_to_n(n-1)\n\
    \    case n:\n        return n * sum_to_n(n-1)\n    case n, ...:\n        return\
    \ n * sum_to_n(n-1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmph0wb0fpu.swift:15:13: error: expected expression after unary operator\n\
    \    case 1, ..., _:\n            ^\n/tmp/tmph0wb0fpu.swift:15:16: error: expected\
    \ pattern\n    case 1, ..., _:\n               ^\n/tmp/tmph0wb0fpu.swift:23:13:\
    \ error: expected expression after unary operator\n    case n, ...:\n        \
    \    ^\n/tmp/tmph0wb0fpu.swift:23:16: error: expected pattern\n    case n, ...:\n\
    \               ^\n/tmp/tmph0wb0fpu.swift:20:29: error: missing argument label\
    \ 'n:' in call\n        return 1 + sum_to_n(n-1)\n                           \
    \ ^\n                            n: \n/tmp/tmph0wb0fpu.swift:22:29: error: missing\
    \ argument label 'n:' in call\n        return n * sum_to_n(n-1)\n            \
    \                ^\n                            n: \n/tmp/tmph0wb0fpu.swift:24:29:\
    \ error: missing argument label 'n:' in call\n        return n * sum_to_n(n-1)\n\
    \                            ^\n                            n: \n/tmp/tmph0wb0fpu.swift:15:18:\
    \ warning: case is already handled by previous patterns; consider removing it\n\
    \    case 1, ..., _:\n                 ^\n/tmp/tmph0wb0fpu.swift:17:10: warning:\
    \ case is already handled by previous patterns; consider removing it\n    case\
    \ _:\n         ^\n/tmp/tmph0wb0fpu.swift:19:10: warning: case is already handled\
    \ by previous patterns; consider removing it\n    case _:\n         ^\n/tmp/tmph0wb0fpu.swift:23:13:\
    \ warning: case is already handled by previous patterns; consider removing it\n\
    \    case n, ...:\n            ^~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n + sum_to_n(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmp2hb74h0p/tmp2hb74h0p.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3cff561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3cff258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3cff258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3cff2577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hb74h0p                        0x000055afbeb931b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3cff74d460 __libc_start_main +
    245

    6    tmp2hb74h0p                        0x000055afbeb92e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    var sum: Int =\
    \ 0\n    for i in 1...n {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var sum = 0\n  for _ in 1...n {\n    sum += _\n  }\n  return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmphm0rojds.swift:16:12: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n    sum += _\n           ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var result = 0\n    for _ in 1..n {\n        result += n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpd0za83wk.swift:15:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for _ in 1..n {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let mut current = 1\n    let mut result = 1\n    for _ in\
    \ 0..n {\n        let next = current + result\n        result = next\n       \
    \ current += result\n    }\n    current\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpf16hg6xa.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut current\
    \ = 1\n            ^\n/tmp/tmpf16hg6xa.swift:14:13: note: join the identifiers\
    \ together\n    let mut current = 1\n        ~~~~^~~~~~~\n        mutcurrent\n\
    /tmp/tmpf16hg6xa.swift:14:13: note: join the identifiers together with camel-case\n\
    \    let mut current = 1\n        ~~~~^~~~~~~\n        mutCurrent\n/tmp/tmpf16hg6xa.swift:15:13:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n    let mut result = 1\n            ^\n/tmp/tmpf16hg6xa.swift:15:13:\
    \ note: join the identifiers together\n    let mut result = 1\n        ~~~~^~~~~~\n\
    \        mutresult\n/tmp/tmpf16hg6xa.swift:15:13: note: join the identifiers together\
    \ with camel-case\n    let mut result = 1\n        ~~~~^~~~~~\n        mutResult\n\
    /tmp/tmpf16hg6xa.swift:15:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ result = 1\n        ^\n/tmp/tmpf16hg6xa.swift:14:9: note: 'mut' previously declared\
    \ here\n    let mut current = 1\n        ^\n/tmp/tmpf16hg6xa.swift:16:15: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n    for _ in 0..n {\n\
    \              ^~\n              ...\n/tmp/tmpf16hg6xa.swift:21:5: error: cannot\
    \ find 'current' in scope\n    current\n    ^~~~~~~\n/tmp/tmpf16hg6xa.swift:17:20:\
    \ error: cannot find 'current' in scope\n        let next = current + result\n\
    \                   ^~~~~~~\n/tmp/tmpf16hg6xa.swift:17:30: error: cannot find\
    \ 'result' in scope\n        let next = current + result\n                   \
    \          ^~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var acc: Int = 0\n    for _ in 1 ..< n {\n        acc +=\
    \ n\n    }\n    return acc\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpwditmg82/tmpwditmg82.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5e520cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5e4f03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5e4f03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5e4f027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwditmg82                        0x000055f83597c335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba5e53f8460 __libc_start_main +
    245

    6    tmpwditmg82                        0x000055f83597bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return Range(n, 0, 1).reduce(_ + _)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpz64yuk8i.swift:14:32: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n  return Range(n, 0, 1).reduce(_ + _)\n \
    \                              ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(UInt32(n), n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpjzdoeukb.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(UInt32(n), n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n*sum_to_n(n - 1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmph7opj_nw.swift:17:20: error: missing argument label 'n:' in call\n\
    \        return n*sum_to_n(n - 1)\n                          ^\n             \
    \             n: \n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\tif n < 1 {\n\t\treturn 0\n\t}\n\n\treturn (1 + n).reduce(0,\
    \ +) + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmppurtot3x.swift:18:17: error: value of type 'Int' has no member\
    \ 'reduce'\n        return (1 + n).reduce(0, +) + n\n               ~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\treturn Int(((n * (n + 1)) / 2).floor())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp0q6ry1tv.swift:14:33: error: value of type 'Int' has no member\
    \ 'floor'\n        return Int(((n * (n + 1)) / 2).floor())\n                 \
    \  ~~~~~~~~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978437
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n \
    \   for _ in 1...n {\n        sum += _\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmplzqajqwq.swift:19:16: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        sum += _\n               ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  let result = 1\n  for i in 1..n {\n    result *= i\n  }\n \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpq45dmp5h.swift:15:13: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n  for i in 1..n {\n            ^~\n            ...\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return sum_to_n_impl(&n, 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp41vqnetn.swift:14:10: error: cannot find 'sum_to_n_impl' in scope\n\
    \  return sum_to_n_impl(&n, 1)\n         ^~~~~~~~~~~~~\n/tmp/tmp41vqnetn.swift:14:24:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \  return sum_to_n_impl(&n, 1)\n                       ^~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return Int(n) + Int(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmp7yo594rq/tmp7yo594rq.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2cf02fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2ced26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2ced26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2ced257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yo594rq                        0x000056364e1752e5 <unavailable> + 4837

    5    libc.so.6                          0x00002ae2cf21b460 __libc_start_main +
    245

    6    tmp7yo594rq                        0x000056364e174f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return foldl(0, &_sum_to_n(n: n))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp3i4w94t8.swift:14:10: error: cannot find 'foldl' in scope\n  return\
    \ foldl(0, &_sum_to_n(n: n))\n         ^~~~~\n/tmp/tmp3i4w94t8.swift:14:20: error:\
    \ cannot find '_sum_to_n' in scope\n  return foldl(0, &_sum_to_n(n: n))\n    \
    \               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return sum_to(Int(n))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpd1z5la5a.swift:14:10: error: cannot find 'sum_to' in scope\n  return\
    \ sum_to(Int(n))\n         ^~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let c = 1\n    for _ in 1 ..< n {\n        c += 1\n    }\n\
    \    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmppgw7_774.swift:16:11: error: left side of mutating operator isn't\
    \ mutable: 'c' is a 'let' constant\n        c += 1\n        ~ ^\n/tmp/tmppgw7_774.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let c = 1\n    ^~~\n   \
    \ var\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  // TODO: Convert to a recursive function.\n  if n < 1 {\n \
    \   return 0\n  }\n  \n  // If n <= 3 then return the sum of the factorial of\
    \ n.\n  if n <= 3 {\n    return (n * factorial(n))\n  }\n  \n  // If n <= 6 then\
    \ return the sum of the factorial of the powers of 3.\n  if n <= 6 {\n    return\
    \ ((3 * n) * factorial(n - 3))\n  }\n  \n  // If n <= 10 then return the sum of\
    \ the factorial of the powers of 5.\n  if n <= 10 {\n    return ((5 * n) * factorial(n\
    \ - 5))\n  }\n  \n  // If n <= 15 then return the sum of the factorial of the\
    \ powers of 7.\n  if n <= 15 {\n    return ((7 * n) * factorial(n - 7))\n  }\n\
    \  \n  // If n <= 20 then return the sum of the factorial of the powers of 9.\n\
    \  if n <= 20 {\n    return ((9 * n) * factorial(n - 9))\n  }\n  \n  // If n <=\
    \ 25 then return the sum of the factorial of the powers of 11.\n  if n <= 25 {\n\
    \    return ((11 * n) * factorial(n - 11))\n  }\n  \n  // If n <= 30 then return\
    \ the sum of the factorial of the powers of 13.\n  if n <= 30 {\n    return ((13\
    \ * n) * factorial(n - 13))\n  }\n  \n  // If n <= 35 then return the sum of the\
    \ factorial of the powers of 15.\n  if n <= 35 {\n    return ((15 * n) * factorial(n\
    \ - 15))\n  }\n  \n  // If n <= 40 then return the sum of the factorial of the\
    \ powers of 17.\n  if n <= 40 {\n    return ((17 * n) * factorial(n - 17))\n \
    \ }\n  \n  // If n <= 45 then return the sum of the factorial of the powers of\
    \ 19.\n  if n <= 45 {\n    return ((19 * n) * factorial(n - 19))\n  }\n  \n  //\
    \ If n <= 50 then return the sum of the factorial of the powers of 21.\n  if n\
    \ <= 50 {\n    return ((21 * n) * factorial(n - 21))\n  }\n  \n  // If n <= 55\
    \ then return the sum of the factorial of the powers of 23.\n  if n <= 55 {\n\
    \    return ((23 * n) * factorial(n - 23))\n  }\n  \n  // If n <= 60 then return\
    \ the sum of the factorial of the powers of 25.\n  if n <= 60 {\n    return ((25\
    \ * n) * factorial(n - 25))\n  }\n  \n  // If n <= 65 then return the sum of the\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n:\
    \ 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp9t963znq.swift:21:17: error: cannot find 'factorial' in scope\n\
    \    return (n * factorial(n))\n                ^~~~~~~~~\n/tmp/tmp9t963znq.swift:26:23:\
    \ error: cannot find 'factorial' in scope\n    return ((3 * n) * factorial(n -\
    \ 3))\n                      ^~~~~~~~~\n/tmp/tmp9t963znq.swift:31:23: error: cannot\
    \ find 'factorial' in scope\n    return ((5 * n) * factorial(n - 5))\n       \
    \               ^~~~~~~~~\n/tmp/tmp9t963znq.swift:36:23: error: cannot find 'factorial'\
    \ in scope\n    return ((7 * n) * factorial(n - 7))\n                      ^~~~~~~~~\n\
    /tmp/tmp9t963znq.swift:41:23: error: cannot find 'factorial' in scope\n    return\
    \ ((9 * n) * factorial(n - 9))\n                      ^~~~~~~~~\n/tmp/tmp9t963znq.swift:46:24:\
    \ error: cannot find 'factorial' in scope\n    return ((11 * n) * factorial(n\
    \ - 11))\n                       ^~~~~~~~~\n/tmp/tmp9t963znq.swift:51:24: error:\
    \ cannot find 'factorial' in scope\n    return ((13 * n) * factorial(n - 13))\n\
    \                       ^~~~~~~~~\n/tmp/tmp9t963znq.swift:56:24: error: cannot\
    \ find 'factorial' in scope\n    return ((15 * n) * factorial(n - 15))\n     \
    \                  ^~~~~~~~~\n/tmp/tmp9t963znq.swift:61:24: error: cannot find\
    \ 'factorial' in scope\n    return ((17 * n) * factorial(n - 17))\n          \
    \             ^~~~~~~~~\n/tmp/tmp9t963znq.swift:66:24: error: cannot find 'factorial'\
    \ in scope\n    return ((19 * n) * factorial(n - 19))\n                      \
    \ ^~~~~~~~~\n/tmp/tmp9t963znq.swift:71:24: error: cannot find 'factorial' in scope\n\
    \    return ((21 * n) * factorial(n - 21))\n                       ^~~~~~~~~\n\
    /tmp/tmp9t963znq.swift:76:24: error: cannot find 'factorial' in scope\n    return\
    \ ((23 * n) * factorial(n - 23))\n                       ^~~~~~~~~\n/tmp/tmp9t963znq.swift:81:24:\
    \ error: cannot find 'factorial' in scope\n    return ((25 * n) * factorial(n\
    \ - 25))\n                       ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(&n, &n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp_d2h8tl8.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(&n, &n)\n         ^~~~~~~~~\n/tmp/tmp_d2h8tl8.swift:14:20:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \  return _sum_to_n(&n, &n)\n                   ^~\n/tmp/tmp_d2h8tl8.swift:14:24:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \  return _sum_to_n(&n, &n)\n                       ^~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  // FIXME: remove this once we've migrated to Python\n  return\
    \ Int64(Int64.max) * Int64(n) + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpvejj5mq2.swift:15:38: error: cannot convert return expression of\
    \ type 'Int64' to return type 'Int'\n  return Int64(Int64.max) * Int64(n) + 1\n\
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n         Int(                     \
    \      )\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  if n <= 0 {\n    return 0\n  }\n  var sum = 0\n  var current\
    \ = 1\n  for _ in 0..<n {\n    sum += current\n    current *= 2\n  }\n  return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmp_616hw4l/tmp_616hw4l.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bc5093c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bc4d8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bc4d8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bc4d897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_616hw4l                        0x0000561eff3b63b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b9bc527f460 __libc_start_main +
    245

    6    tmp_616hw4l                        0x0000561eff3b5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  // Convert the number to a string and count the occurrences.\n\
    \  let s = n.toString()\n  var count: Int = 0\n  while s.characters.count >= 3\
    \ {\n    let s = s[s.characters.startIndex..<s.characters.startIndex.advancedBy(3)].characters\n\
    \    count += 1\n  }\n\n  return n * count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp7zafd02c.swift:15:13: error: value of type 'Int' has no member\
    \ 'toString'\n  let s = n.toString()\n          ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let _: Int = sum_to_n(n: n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp2wibf7h6.swift:14:18: warning: function call causes an infinite\
    \ recursion\n    let _: Int = sum_to_n(n: n)\n                 ^\n/tmp/tmp2wibf7h6.swift:15:1:\
    \ error: missing return in global function expected to return 'Int'\n}\n^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(n + 101)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpaomd9b6o/tmpaomd9b6o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5465f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5462eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5462ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5462e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaomd9b6o                        0x000055924e3952e5 <unavailable> + 4837

    5    libc.so.6                          0x00002ac5467df460 __libc_start_main +
    245

    6    tmpaomd9b6o                        0x000055924e394f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return Int64(n * (n + 1) / 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp6xzf2do1.swift:14:10: error: cannot convert return expression of\
    \ type 'Int64' to return type 'Int'\n  return Int64(n * (n + 1) / 2)\n       \
    \  ^~~~~~~~~~~~~~~~~~~~~~\n         Int(                  )\n"
  stdout: ''
  timestamp: 1659978432
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  switch n {\n  case 1:\n    return 1\n  case 2:\n    return\
    \ 1 + 2\n  case 3:\n    return 1 + 2 + 3\n  case 4:\n    return 1 + 2 + 3 + 4\n\
    \  case 5:\n    return 1 + 2 + 3 + 4 + 5\n  case 6:\n    return 1 + 2 + 3 + 4\
    \ + 5 + 6\n  case 7:\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7\n  case 8:\n    return\
    \ 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\n  case 9:\n    return 1 + 2 + 3 + 4 + 5 + 6 +\
    \ 7 + 8 + 9\n  case 10:\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n \
    \ case 11:\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11\n  case 12:\n\
    \    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12\n  case 13:\n   \
    \ return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13\n  case 14:\n \
    \   return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14\n  case\
    \ 15:\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 +\
    \ 15\n  case 16:\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12\
    \ + 13 + 14 + 15 + 16\n  case 17:\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 +\
    \ 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17\n  case 18:\n    return 1 + 2 + 3\
    \ + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18\n  case\
    \ 19:\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 +\
    \ 15 + 16 + 17 + 18 + 19\n  case 20:\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\
    \ + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20\n  case 21:\n   \
    \ return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16\
    \ + 17 + 18 + 19 + 20 + 21\n  case 22:\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpf1vhi_u3.swift:78:33: error: expected '}' at end of brace statement\n\
    assert(sum_to_n(n: 100) == 5050)\n                                ^\n/tmp/tmpf1vhi_u3.swift:13:30:\
    \ note: to match this opening '{'\nfunc sum_to_n(n: Int) -> Int {\n          \
    \                   ^\n/tmp/tmpf1vhi_u3.swift:14:3: error: switch must be exhaustive\n\
    \  switch n {\n  ^\n/tmp/tmpf1vhi_u3.swift:14:3: note: do you want to add a default\
    \ clause?\n  switch n {\n  ^\n/tmp/tmpf1vhi_u3.swift:62:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return sum_to_n(Float(n)) + n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp_qtfdjue.swift:14:19: error: missing argument label 'n:' in call\n\
    \  return sum_to_n(Float(n)) + n\n                  ^\n                  n: \n\
    /tmp/tmp_qtfdjue.swift:14:19: error: cannot convert value of type 'Float' to expected\
    \ argument type 'Int'\n  return sum_to_n(Float(n)) + n\n                  ^\n\
    \                  Int(    )\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return IntFunc(n / 2, IntFunc(n - n / 2, IntFunc(0, IntFunc(1,\n\
    \                                                                      IntFunc(sum_to_n(n))))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp4wwxsvp_.swift:14:12: error: cannot find 'IntFunc' in scope\n \
    \   return IntFunc(n / 2, IntFunc(n - n / 2, IntFunc(0, IntFunc(1,\n         \
    \  ^~~~~~~\n/tmp/tmp4wwxsvp_.swift:14:27: error: cannot find 'IntFunc' in scope\n\
    \    return IntFunc(n / 2, IntFunc(n - n / 2, IntFunc(0, IntFunc(1,\n        \
    \                  ^~~~~~~\n/tmp/tmp4wwxsvp_.swift:14:46: error: cannot find 'IntFunc'\
    \ in scope\n    return IntFunc(n / 2, IntFunc(n - n / 2, IntFunc(0, IntFunc(1,\n\
    \                                             ^~~~~~~\n/tmp/tmp4wwxsvp_.swift:14:57:\
    \ error: cannot find 'IntFunc' in scope\n    return IntFunc(n / 2, IntFunc(n -\
    \ n / 2, IntFunc(0, IntFunc(1,\n                                             \
    \           ^~~~~~~\n/tmp/tmp4wwxsvp_.swift:15:71: error: cannot find 'IntFunc'\
    \ in scope\n                                                                 \
    \     IntFunc(sum_to_n(n))))))\n                                             \
    \                         ^~~~~~~\n/tmp/tmp4wwxsvp_.swift:15:88: error: missing\
    \ argument label 'n:' in call\n                                              \
    \                        IntFunc(sum_to_n(n))))))\n                          \
    \                                                             ^\n            \
    \                                                                           n:\
    \ \n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return Int(reduce(Range(1, n + 1)))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmppu9z9msr.swift:14:14: error: cannot find 'reduce' in scope\n  return\
    \ Int(reduce(Range(1, n + 1)))\n             ^~~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let sum = sum_to_n(n - 1)\n    return sum + n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp0qp4ji9x.swift:14:24: error: missing argument label 'n:' in call\n\
    \    let sum = sum_to_n(n - 1)\n                       ^\n                   \
    \    n: \n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var s = Sum()\n    for i = 1; i < n; i++ {\n        s.Add(i)\n\
    \    }\n    return s.Result()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmprc6s3459.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 1; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmprc6s3459.swift:14:13:\
    \ error: cannot find 'Sum' in scope\n    var s = Sum()\n            ^~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(arc4random_uniform(UInt32(n))) + 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp6kakjh2y.swift:14:16: error: cannot find 'arc4random_uniform' in\
    \ scope\n    return Int(arc4random_uniform(UInt32(n))) + 1\n               ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n + sum_to_n(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpb1pup3u3.swift:14:25: error: missing argument label 'n:' in call\n\
    \    return n + sum_to_n(n - 1)\n                        ^\n                 \
    \       n: \n"
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpk1r1ojf8/tmpk1r1ojf8.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaa2639c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaa2330b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaa2330988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaa232f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1r1ojf8                        0x000055d077e5f1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002acaa2825460 __libc_start_main +
    245

    6    tmpk1r1ojf8                        0x000055d077e5ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978429
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n < 1 {\n        return 0\n    }\n\n    if n == 1 {\n\
    \        return 1\n    }\n\n    var sum = 0\n    for number in 1...n {\n     \
    \   sum += number\n    }\n\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var result = 0\n    for i := 1; i <= n {\n        result\
    \ += i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmperl7bk1m.swift:15:12: error: expected type\n    for i := 1; i <=\
    \ n {\n           ^\n            <#type#>\n/tmp/tmperl7bk1m.swift:15:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n {\n           ^\n\
    /tmp/tmperl7bk1m.swift:15:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 1; i <= n {\n           ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return ((1..<n).reduce(0) { $0 + $1 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpxv7g92lr/tmpxv7g92lr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09ef53ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09ef231b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09ef231988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09ef2307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxv7g92lr                        0x000055bbf4b5b385 <unavailable> + 4997

    5    libc.so.6                          0x00002b09ef726460 __libc_start_main +
    245

    6    tmpxv7g92lr                        0x000055bbf4b5b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(arc4random_uniform(UInt32(n))) + Int(arc4random_uniform(UInt32(n)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpji62fpz_.swift:14:16: error: cannot find 'arc4random_uniform' in\
    \ scope\n    return Int(arc4random_uniform(UInt32(n))) + Int(arc4random_uniform(UInt32(n)))\n\
    \               ^~~~~~~~~~~~~~~~~~\n/tmp/tmpji62fpz_.swift:14:53: error: cannot\
    \ find 'arc4random_uniform' in scope\n    return Int(arc4random_uniform(UInt32(n)))\
    \ + Int(arc4random_uniform(UInt32(n)))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var sum = 0\n  for _ in 0..<n {\n    sum += n\n  }\n  return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpizr9qui0/tmpizr9qui0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe7f911c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe7f608b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe7f608988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe7f6077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizr9qui0                        0x000055bc3c2693b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afe7fafd460 __libc_start_main +
    245

    6    tmpizr9qui0                        0x000055bc3c268fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  // We use explicit type conversion from Int to Float, since\
    \ we can\n  // get some overflows.\n  var sum: Float = 0.0\n  for i in 1...n {\n\
    \    sum += Float(i)\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqvx16jm0.swift:20:10: error: cannot convert return expression of\
    \ type 'Float' to return type 'Int'\n  return sum\n         ^~~\n         Int(\
    \ )\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\treturn n + sum_to_n(n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmptt0wzh62.swift:14:22: error: missing argument label 'n:' in call\n\
    \        return n + sum_to_n(n + 1)\n                            ^\n         \
    \                   n: \n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) /2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpmrdy4eph.swift:14:23: error: consecutive statements on a line must\
    \ be separated by ';'\n    return n * (n + 1) /2\n                      ^\n  \
    \                    ;\n/tmp/tmpmrdy4eph.swift:14:24: error: '/' is not a prefix\
    \ unary operator\n    return n * (n + 1) /2\n                       ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpx5gkffyc/tmpx5gkffyc.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0601dedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0601ae4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0601ae4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0601ae37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx5gkffyc                        0x000055e30c02a1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b0601fd9460 __libc_start_main +
    245

    6    tmpx5gkffyc                        0x000055e30c029e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return sum(1..n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpnt6g5pap.swift:14:12: error: cannot find 'sum' in scope\n    return\
    \ sum(1..n)\n           ^~~\n/tmp/tmpnt6g5pap.swift:14:17: error: cannot find\
    \ operator '..' in scope; did you mean '...'?\n    return sum(1..n)\n        \
    \        ^~\n                ...\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    switch n {\n    case 0:\n        return 1\n    case 1:\n\
    \        return 1\n    case 2:\n        return 2\n    case 3:\n        return\
    \ 3\n    case 4:\n        return 4\n    case 5:\n        return 5\n    case 6:\n\
    \        return 6\n    case 7:\n        return 7\n    case 8:\n        return\
    \ 8\n    case 9:\n        return 9\n    case 10:\n        return 10\n    case\
    \ 11:\n        return 11\n    case 12:\n        return 12\n    case 13:\n    \
    \    return 13\n    case 14:\n        return 14\n    case 15:\n        return\
    \ 15\n    case 16:\n        return 16\n    case 17:\n        return 17\n    case\
    \ 18:\n        return 18\n    case 19:\n        return 19\n    case 20:\n    \
    \    return 20\n    case 21:\n        return 21\n    case 22:\n        return\
    \ 22\n    case 23:\n        return 23\n    case 24:\n        return 24\n    case\
    \ 25:\n        return 25\n    case 26:\n        return 26\n    case 27:\n    \
    \    return 27\n    case 28:\n        return 28\n    case 29:\n        return\
    \ 29\n    case 30:\n        return 30\n    case 31:\n        return 31\n    case\
    \ 32:\n        return 32\n    case 33:\n        return 33\n    case 34:\n    \
    \    return 34\n    case 35:\n        return 35\n    case 36:\n        return\
    \ 36\n    case 37:\n        return 37\n    case 38:\n        return 38\n    case\
    \ 39:\n        return 39\n    case 40:\n        return 40\n    case 41:\n    \
    \    return 41\n    case 42:\n        return 42\n    case 43:\n        return\
    \ 43\n    case 44:\n        return 44\n    case 45:\n        return 45\n    case\
    \ 46:\n        return 46\n    case 47:\n        return 47\n    case 48:\n    \
    \    return 48\n    case 49:\n        return 49\n    case 50:\n        return\
    \ 50\n    case 51:\n        return 51\n    case 52:\n        return 52\n    case\
    \ 53:\n        return 53\n    case 54:\n        return 54\n    case 55:\n    \
    \    return 55\n    case 56:\n        return 56\n    case 57:\n        return\
    \ 57\n    case 58:\n        return 58\n    case 59:\n        return 59\n    case\
    \ 60:\n        return 60\n    case 61:\n        return 61\n    case 62:\n    \
    \    return 62\n    case 63:\n        return 63\n    case 64:\n        return\
    \ 64\n    case 65:\n        return 65\n    case 66:\n        return 66\n    case\
    \ 67:\n        return 67\n    case 68:\n        return 68\n    case 69:\n    \
    \    return 69\n    case 70:\n        return 70\n    case 71:\n        return\
    \ 71\n    case 72:\n        return 72\n    case 73:\n        return 73\n    case\
    \ 74:\n        return 74\n    case 75:\n        return 75\n    case 76:\n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpl9iihlmk.swift:167:5: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n    case 76:\n    ^~~~~~~~\n            \
    \ break\n/tmp/tmpl9iihlmk.swift:188:33: error: expected '}' at end of brace statement\n\
    assert(sum_to_n(n: 100) == 5050)\n                                ^\n/tmp/tmpl9iihlmk.swift:13:30:\
    \ note: to match this opening '{'\nfunc sum_to_n(n: Int) -> Int {\n          \
    \                   ^\n/tmp/tmpl9iihlmk.swift:14:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmpl9iihlmk.swift:14:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmpl9iihlmk.swift:172:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(arc4random_uniform(UInt32(n))) + Int(arc4random_uniform(UInt32(n)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpji62fpz_.swift:14:16: error: cannot find 'arc4random_uniform' in\
    \ scope\n    return Int(arc4random_uniform(UInt32(n))) + Int(arc4random_uniform(UInt32(n)))\n\
    \               ^~~~~~~~~~~~~~~~~~\n/tmp/tmpji62fpz_.swift:14:53: error: cannot\
    \ find 'arc4random_uniform' in scope\n    return Int(arc4random_uniform(UInt32(n)))\
    \ + Int(arc4random_uniform(UInt32(n)))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  assert(n >= 1)\n  var acc = 1\n  for _ in 0..<n {\n    acc\
    \ += 1 // sum_to_n(n-1) + 1 = sum_to_n(n-1)\n  }\n  return acc\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpr_cyaz78/tmpr_cyaz78.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c51633c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c5132ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c5132a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c513297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_cyaz78                        0x00005607232e1335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5c5181f460 __libc_start_main +
    245

    6    tmpr_cyaz78                        0x00005607232e0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let ones = Array<Int>()\n    for i in 1..n {\n        ones.append(i)\n\
    \    }\n    return ones.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpkdhh795a.swift:15:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return Int(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpw1r1umk3/tmpw1r1umk3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc7ce4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc7cb45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc7cb45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc7cb447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1r1umk3                        0x00005623f4f82360 <unavailable> + 4960

    5    libc.so.6                          0x00002adc7d03a460 __libc_start_main +
    245

    6    tmpw1r1umk3                        0x00005623f4f81f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpdp60ohv8/tmpdp60ohv8.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e2fc2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e2f922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e2f922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e2f9217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdp60ohv8                        0x0000561bb1fdc1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b4e2fe17460 __libc_start_main +
    245

    6    tmpdp60ohv8                        0x0000561bb1fdbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(arc4random_uniform(UInt32(n)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp8hrlk4x8.swift:14:16: error: cannot find 'arc4random_uniform' in\
    \ scope\n    return Int(arc4random_uniform(UInt32(n)))\n               ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978381
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  let digits = Array(0...n).map { digit(digit: $0) }\n  func\
    \ adder(x: Int) -> Int {\n    if x > 0 {\n      return x + adder(x - 1)\n    }\
    \ else {\n      return 0\n    }\n  }\n  return digits.reduce(adder, 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpssuu9cws.swift:14:35: error: cannot find 'digit' in scope\n  let\
    \ digits = Array(0...n).map { digit(digit: $0) }\n                           \
    \       ^~~~~\n/tmp/tmpssuu9cws.swift:17:24: error: missing argument label 'x:'\
    \ in call\n      return x + adder(x - 1)\n                       ^\n         \
    \              x: \n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var result = 1\n    for i := 0; i < n; i++ {\n        result\
    \ = result * i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp_261h7d3.swift:15:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp_261h7d3.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n\
    \           ^\n/tmp/tmp_261h7d3.swift:15:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    var sum: Int =\
    \ 1\n    for _ in 0..<n {\n        sum += 2\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: Exception
  stderr: 'tmpxdeno71a/tmpxdeno71a.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1c4235c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1c3f2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1c3f2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1c3f2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdeno71a                        0x0000565397a183b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae1c4421460 __libc_start_main +
    245

    6    tmpxdeno71a                        0x0000565397a17fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  if n < 1 {\n    return 0\n  }\n  if n == 1 {\n    return 1\n\
    \  }\n\n  var res = 1\n  var mul = 1\n  var exp = 1\n  var remainder = n\n\n \
    \ while remainder > 0 {\n    if remainder < mul {\n      res += mul\n      mul\
    \ *= 10\n    } else {\n      res += remainder % mul\n      mul /= 10\n      remainder\
    \ /= mul\n    }\n\n    exp++\n  }\n  return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp8gaht1ug.swift:36:8: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n    exp++\n       ^~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  let n = min(n, MAX)\n  \n  var sum = 0\n  for var i = 1; i\
    \ <= n; i++ {\n    sum += i\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpe92_7dzs.swift:17:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 1; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe92_7dzs.swift:14:18:\
    \ error: cannot find 'MAX' in scope\n  let n = min(n, MAX)\n                 ^~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let sum: Int = 0\n    for i in 1...n {\n        sum += i\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpwkv78bjr.swift:16:13: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n        sum += i\n        ~~~ ^\n/tmp/tmpwkv78bjr.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let sum: Int = 0\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  if n <= 0 { return 1 }\n  return 1 + sum_to_n(n-1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpodh8iq5b.swift:15:23: error: missing argument label 'n:' in call\n\
    \  return 1 + sum_to_n(n-1)\n                      ^\n                      n:\
    \ \n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(bitPattern(UInt64((1 << (n - 1)) - 1)) + 1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpwxfgp46k.swift:14:16: error: cannot find 'bitPattern' in scope\n\
    \    return Int(bitPattern(UInt64((1 << (n - 1)) - 1)) + 1)\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978434
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var sum = 0\n  for _ in 0..<n {\n    sum += 1\n  }\n  return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmp6mfkc8rz/tmp6mfkc8rz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97484e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97481dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97481dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97481db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6mfkc8rz                        0x00005591e108c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b97486d1460 __libc_start_main +
    245

    6    tmp6mfkc8rz                        0x00005591e108bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978431
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for _ in 0..<n {\n        sum += n\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmp9cdhl6iv/tmp9cdhl6iv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab68fe5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab68cdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab68cdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab68cdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9cdhl6iv                        0x0000555e317033b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aab691d1460 __libc_start_main +
    245

    6    tmp9cdhl6iv                        0x0000555e31702fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return sum(range(1, n), multiplier: 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpxz9abzje.swift:14:12: error: cannot find 'sum' in scope\n    return\
    \ sum(range(1, n), multiplier: 1)\n           ^~~\n/tmp/tmpxz9abzje.swift:14:16:\
    \ error: cannot find 'range' in scope\n    return sum(range(1, n), multiplier:\
    \ 1)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var sum = 0\n  for _ in 1...n {\n    sum += 1 // increment\
    \ by 1 on each iteration\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpk152av7_/tmpk152av7_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69d38bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69d35b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69d35b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69d35b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk152av7_                        0x000056322dbbf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b69d3aa7460 __libc_start_main +
    245

    6    tmpk152av7_                        0x000056322dbbefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n <= 0 ? 1 : (n + sum_to_n(n - 1))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpsxeokh21.swift:14:39: error: missing argument label 'n:' in call\n\
    \    return n <= 0 ? 1 : (n + sum_to_n(n - 1))\n                             \
    \         ^\n                                      n: \n"
  stdout: ''
  timestamp: 1659978430
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  // TODO: add real implementation\n  return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmp5l5g04dd/tmp5l5g04dd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b310eaa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b310e79fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b310e79f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b310e79e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5l5g04dd                        0x000055678c5f41b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b310ec94460 __libc_start_main +
    245

    6    tmp5l5g04dd                        0x000055678c5f3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  let max: Int = n % 2 != 0 ? n : n * 2\n  let sum: Int = 0\n\
    \  for _ in 0 ..< max {\n    sum += 2\n  }\n  return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmps6u3ysqw.swift:17:9: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n    sum += 2\n    ~~~ ^\n/tmp/tmps6u3ysqw.swift:15:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let sum: Int = 0\n  ^~~\n\
    \  var\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return sum_to_n_(Range(1, n)).head // TODO: use \"return\"\
    \ instead of \"goto\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpmdhi5ta3.swift:14:12: error: cannot find 'sum_to_n_' in scope\n\
    \    return sum_to_n_(Range(1, n)).head // TODO: use \"return\" instead of \"\
    goto\"\n           ^~~~~~~~~\n/tmp/tmpmdhi5ta3.swift:14:27: error: initializer\
    \ expects a single parameter of type '(lower: Bound, upper: Bound)' [with Bound\
    \ = Int]\n    return sum_to_n_(Range(1, n)).head // TODO: use \"return\" instead\
    \ of \"goto\"\n                          ^~~~~~\n                           (\
    \   )\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let start = DispatchTime.now()\n    defer { DispatchQueue.main.async\
    \ { return() } }\n    var result = 0\n    for _ in 0..<n {\n        result +=\
    \ n\n    }\n    let end = DispatchTime.now()\n    return result - start.uptimeNanoseconds\
    \ - end.uptimeNanoseconds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmptby_lc6v.swift:14:17: error: cannot find 'DispatchTime' in scope\n\
    \    let start = DispatchTime.now()\n                ^~~~~~~~~~~~\n/tmp/tmptby_lc6v.swift:15:13:\
    \ error: cannot find 'DispatchQueue' in scope\n    defer { DispatchQueue.main.async\
    \ { return() } }\n            ^~~~~~~~~~~~~\n/tmp/tmptby_lc6v.swift:20:15: error:\
    \ cannot find 'DispatchTime' in scope\n    let end = DispatchTime.now()\n    \
    \          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  if n < 1 {\n    return 1\n  }\n\n  let n1 = n % 3 + 1\n  return\
    \ (n1 * n1) + (n1 * n1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpxd5wqk9h/tmpxd5wqk9h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01a87e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01a84d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01a84d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01a84d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxd5wqk9h                        0x00005595c12d9245 <unavailable> + 4677

    5    libc.so.6                          0x00002b01a89cd460 __libc_start_main +
    245

    6    tmpxd5wqk9h                        0x00005595c12d8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return sumToN(sumToN(n))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpu6ywms5t.swift:14:12: error: cannot find 'sumToN' in scope\n  \
    \  return sumToN(sumToN(n))\n           ^~~~~~\n/tmp/tmpu6ywms5t.swift:14:19:\
    \ error: cannot find 'sumToN' in scope\n    return sumToN(sumToN(n))\n       \
    \           ^~~~~~\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum: Int = 0\n    for _ in 1...n {\n        sum += n\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpjo0xyrib/tmpjo0xyrib.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7abc6d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7abc3c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7abc3c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7abc3c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjo0xyrib                        0x0000559b105c03b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b7abc8bc460 __libc_start_main +
    245

    6    tmpjo0xyrib                        0x0000559b105bffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n, -1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpge7gx_rv.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n, -1)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  switch n {\n  case 10:\n    return 55\n  case 5:\n    return\
    \ 15\n  case 1:\n    return 1\n  default:\n    var sum = 0\n    for n in 1..n\
    \ {\n      sum += n\n    }\n    return sum\n  }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpli24bb75.swift:23:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for n in 1..n {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpqliye03h.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  // TODO: improve this implementation\n  switch n {\n  case\
    \ 1:\n    return 1\n  case 2:\n    return 1 + 2\n  case 3:\n    return 1 + 2 +\
    \ 3\n  case 4:\n    return 1 + 2 + 3 + 4\n  case 5:\n    return 1 + 2 + 3 + 4\
    \ + 5\n  case 6:\n    return 1 + 2 + 3 + 4 + 5 + 6\n  case 7:\n    return 1 +\
    \ 2 + 3 + 4 + 5 + 6 + 7\n  case 8:\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\n\
    \  case 9:\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n  case 10:\n    return\
    \ 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n  case 11:\n    return 1 + 2 + 3 + 4\
    \ + 5 + 6 + 7 + 8 + 9 + 10 + 11\n  case 12:\n    return 1 + 2 + 3 + 4 + 5 + 6\
    \ + 7 + 8 + 9 + 10 + 11 + 12\n  case 13:\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7\
    \ + 8 + 9 + 10 + 11 + 12 + 13\n  case 14:\n    return 1 + 2 + 3 + 4 + 5 + 6 +\
    \ 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14\n  case 15:\n    return 1 + 2 + 3 + 4 + 5\
    \ + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15\n  case 16:\n    return 1 + 2\
    \ + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16\n  case 17:\n\
    \    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 +\
    \ 16 + 17\n  case 18:\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11\
    \ + 12 + 13 + 14 + 15 + 16 + 17 + 18\n  case 19:\n    return 1 + 2 + 3 + 4 + 5\
    \ + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19\n  case 20:\n\
    \    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 +\
    \ 16 + 17 + 18 + 19 + 20\n  case 21:\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\
    \ + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n  case 22:\n\
    \    return 1 + 2 + 3 + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpat6xeots.swift:60:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpat6xeots.swift:79:33: error: expected '}' at end of brace statement\n\
    assert(sum_to_n(n: 100) == 5050)\n                                ^\n/tmp/tmpat6xeots.swift:13:30:\
    \ note: to match this opening '{'\nfunc sum_to_n(n: Int) -> Int {\n          \
    \                   ^\n/tmp/tmpat6xeots.swift:15:3: error: switch must be exhaustive\n\
    \  switch n {\n  ^\n/tmp/tmpat6xeots.swift:15:3: note: do you want to add a default\
    \ clause?\n  switch n {\n  ^\n/tmp/tmpat6xeots.swift:63:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let sum = n.reduce(0) { $0 + $1 }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmptq_g2yqb.swift:14:17: error: value of type 'Int' has no member\
    \ 'reduce'\n    let sum = n.reduce(0) { $0 + $1 }\n              ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return n * (n + 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return sum(1..n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpnt6g5pap.swift:14:12: error: cannot find 'sum' in scope\n    return\
    \ sum(1..n)\n           ^~~\n/tmp/tmpnt6g5pap.swift:14:17: error: cannot find\
    \ operator '..' in scope; did you mean '...'?\n    return sum(1..n)\n        \
    \        ^~\n                ...\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let mut sum_n = 0\n    for x in 1..=n {\n        sum_n =\
    \ sum_n+x\n    }\n    return sum_n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp19ovpz72.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut sum_n =\
    \ 0\n            ^\n/tmp/tmp19ovpz72.swift:14:13: note: join the identifiers together\n\
    \    let mut sum_n = 0\n        ~~~~^~~~~\n        mutsum_n\n/tmp/tmp19ovpz72.swift:14:13:\
    \ note: join the identifiers together with camel-case\n    let mut sum_n = 0\n\
    \        ~~~~^~~~~\n        mutSum_n\n/tmp/tmp19ovpz72.swift:15:15: error: cannot\
    \ find operator '..=' in scope\n    for x in 1..=n {\n              ^~~\n/tmp/tmp19ovpz72.swift:18:12:\
    \ error: cannot find 'sum_n' in scope\n    return sum_n\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return sum_to_n_with_default(n, 0) {}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpozkupnmi.swift:14:10: error: cannot find 'sum_to_n_with_default'\
    \ in scope\n  return sum_to_n_with_default(n, 0) {}\n         ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(bitPattern(Int64(0)) + (1 + Int(n) * Int64(n))).bigEndian\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpmcmt3y6u.swift:14:16: error: cannot find 'bitPattern' in scope\n\
    \    return Int(bitPattern(Int64(0)) + (1 + Int(n) * Int64(n))).bigEndian\n  \
    \             ^~~~~~~~~~\n/tmp/tmpmcmt3y6u.swift:14:12: error: the compiler is\
    \ unable to type-check this expression in reasonable time; try breaking up the\
    \ expression into distinct sub-expressions\n    return Int(bitPattern(Int64(0))\
    \ + (1 + Int(n) * Int64(n))).bigEndian\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978456
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for number in 1...n {\n        sum += number\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\tlet sumn\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpoar87_vk.swift:14:17: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        let sumn\
    \                       ^~\n                       ...\n/tmp/tmpoar87_vk.swift:14:19:\
    \ error: cannot find
  stdout: ''
  timestamp: 1659978431
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var sum = 0\n  for k in 1...n {\n    sum += k\n  }\n  return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    if n <= 1 {\n \
    \       return 0\n    }\n    return n + sum_to_n(n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp3gvmv5ya.swift:20:25: error: missing argument label 'n:' in call\n\
    \    return n + sum_to_n(n - 1)\n                        ^\n                 \
    \       n: \n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var total = 0\n  for _ in 0..n {\n    total += 1\n  }\n  return\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpmtkxj47y.swift:15:13: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n  for _ in 0..n {\n            ^~\n            ...\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return sum(from: 1, to: n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpbi3fxyw_.swift:14:10: error: cannot find 'sum' in scope\n  return\
    \ sum(from: 1, to: n)\n         ^~~\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(n.toInt()) + sum_to_n(n + 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp82w67t2d.swift:14:18: error: value of type 'Int' has no member\
    \ 'toInt'\n    return Int(n.toInt()) + sum_to_n(n + 1)\n               ~ ^~~~~\n\
    /tmp/tmp82w67t2d.swift:14:38: error: missing argument label 'n:' in call\n   \
    \ return Int(n.toInt()) + sum_to_n(n + 1)\n                                  \
    \   ^\n                                     n: \n"
  stdout: ''
  timestamp: 1659978431
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let sum: Int\n    if n > 0 {\n        let first = 1\n   \
    \     if n <= first * 2 {\n            return first\n        }\n        else {\n\
    \            sum = (n - first) / first\n            return first * sum\n     \
    \   }\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmp9q_6kln2/tmp9q_6kln2.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10d70e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10d6ddab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10d6dda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10d6dd97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q_6kln2                        0x0000564b4439a2c0 <unavailable> + 4800

    5    libc.so.6                          0x00002b10d72cf460 __libc_start_main +
    245

    6    tmp9q_6kln2                        0x0000564b44399ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (1...n).reduce(0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp080uylap.swift:14:28: error: missing argument for parameter #2\
    \ in call\n    return (1...n).reduce(0)\n                           ^\n      \
    \                     , <#(Int, Int) throws -> Int#>\nSwift.Sequence:2:28: note:\
    \ 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n % 2 == 0 ? n / 2 + sum_to_n(n / 2) : n + sum_to_n(n\
    \ / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmplktusn9e.swift:14:42: error: missing argument label 'n:' in call\n\
    \    return n % 2 == 0 ? n / 2 + sum_to_n(n / 2) : n + sum_to_n(n / 2)\n     \
    \                                    ^\n                                     \
    \    n: \n/tmp/tmplktusn9e.swift:14:64: error: missing argument label 'n:' in\
    \ call\n    return n % 2 == 0 ? n / 2 + sum_to_n(n / 2) : n + sum_to_n(n / 2)\n\
    \                                                               ^\n          \
    \                                                     n: \n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * sum_of_n(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpiuri9bz0.swift:14:16: error: cannot find 'sum_of_n' in scope\n\
    \    return n * sum_of_n(n)\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n\tif n == 1 {\n\t\treturn 1\n\t}\n\tvar s = Int()\n\tfor i :=\
    \ 1; i <= n; i++ {\n\t\ts = s + i\n\t}\n\treturn s\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpljbzex0v.swift:18:9: error: expected type\n        for i := 1;\
    \ i <= n; i++ {\n               ^\n                <#type#>\n/tmp/tmpljbzex0v.swift:18:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 1; i <= n; i++\
    \ {\n               ^\n/tmp/tmpljbzex0v.swift:18:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 1; i <= n; i++ {\n               ^\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return n * (n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmplt356_j4/tmplt356_j4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2759d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2756cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2756ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2756c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplt356_j4                        0x000055ca5d1461b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba275bbf460 __libc_start_main +
    245

    6    tmplt356_j4                        0x000055ca5d145e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return _sum_to_n(n: n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp0_djm05p.swift:14:10: error: cannot find '_sum_to_n' in scope\n\
    \  return _sum_to_n(n: n)\n         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return (n * (n + 1)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    let sum = 1\n    for i in 1...n {\n        sum *= i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpscfprb6f.swift:16:13: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n        sum *= i\n        ~~~ ^\n/tmp/tmpscfprb6f.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let sum = 1\n    ^~~\n \
    \   var\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  let sum: Int = 1\n  for i in 1...n { sum += i }\n  return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp9gh7qrvx.swift:15:24: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n  for i in 1...n { sum += i }\n        \
    \           ~~~ ^\n/tmp/tmp9gh7qrvx.swift:14:3: note: change 'let' to 'var' to\
    \ make it mutable\n  let sum: Int = 1\n  ^~~\n  var\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return reduce(Int)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpo4j4331y.swift:14:10: error: cannot find 'reduce' in scope\n  return\
    \ reduce(Int)\n         ^~~~~~\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return range(n)\n        .map { _ in 1 }\n        .scan(1,\
    \ *)\n        .reduce(0, *)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp5owu78wl.swift:14:12: error: cannot find 'range' in scope\n   \
    \ return range(n)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659978433
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * (n + 1) * (2 * n + 1) // 3 * n!\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpg65v27fx/tmpg65v27fx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64e1f3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64e1c35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64e1c35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64e1c347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg65v27fx                        0x000056491188f1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b64e212a460 __libc_start_main +
    245

    6    tmpg65v27fx                        0x000056491188ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return sum_to_n(n\
    \ - 1) + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpb0yh5b8r.swift:17:21: error: missing argument label 'n:' in call\n\
    \    return sum_to_n(n - 1) + n\n                    ^\n                    n:\
    \ \n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    if n == 0 {\n \
    \       return 0\n    }\n    if n == -1 {\n        return -1\n    }\n    return\
    \ sum_to_n(n-1) + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpc5uwzyhv.swift:23:21: error: missing argument label 'n:' in call\n\
    \    return sum_to_n(n-1) + n\n                    ^\n                    n: \n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  if n == 0 { return 1 }\n  return sum_to_n(n - 1) + n\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp7aq8j76i.swift:15:19: error: missing argument label 'n:' in call\n\
    \  return sum_to_n(n - 1) + n\n                  ^\n                  n: \n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return n * sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpvdxbarfe.swift:14:16: error: cannot find 'sum' in scope\n    return\
    \ n * sum\n               ^~~\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  if n < 0 {\n    panic(\"n must be positive\")\n  }\n  private\
    \ var result = 1\n  for i in 1..n {\n    result *= i + 1\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp78izjskx.swift:17:3: error: attribute 'private' can only be used\
    \ in a non-local scope\n  private var result = 1\n  ^\n/tmp/tmp78izjskx.swift:15:5:\
    \ error: cannot find 'panic' in scope\n    panic(\"n must be positive\")\n   \
    \ ^~~~~\n/tmp/tmp78izjskx.swift:18:13: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n  for i in 1..n {\n            ^~\n            ...\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int64(n).reduce(1, opAdd, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpucpcquda.swift:14:31: error: cannot find 'opAdd' in scope\n   \
    \ return Int64(n).reduce(1, opAdd, 0)\n                              ^~~~~\n/tmp/tmpucpcquda.swift:14:21:\
    \ error: value of type 'Int64' has no member 'reduce'\n    return Int64(n).reduce(1,\
    \ opAdd, 0)\n           ~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  func sum(n: Int) -> Int {\n    var sum = 0\n    for i in 1...n\
    \ {\n      sum += i\n    }\n    return sum\n  }\n  return sum(n)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmppskqeq3w.swift:21:14: error: missing argument label 'n:' in call\n\
    \  return sum(n)\n             ^\n             n: \n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978360
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    switch n {\n    case 0:\n        return 1\n    case _:\n\
    \        return n * sum_to_n(n: n - 1)\n    default:\n        return 0\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: Exception
  stderr: 'tmpfjuqe1s3/tmpfjuqe1s3.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b120acc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b120a9bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b120a9bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b120a9bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfjuqe1s3                        0x00005651d6679230 <unavailable> + 4656

    5    libc.so.6                          0x00002b120aeb2460 __libc_start_main +
    245

    6    tmpfjuqe1s3                        0x00005651d6678e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return sum(n: n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp39327h5o.swift:14:12: error: cannot find 'sum' in scope\n    return\
    \ sum(n: n)\n           ^~~\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  var sum = 0\n  for _ in 1...n {\n    sum += _\n  }\n  return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmphm0rojds.swift:16:12: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n    sum += _\n           ^\n"
  stdout: ''
  timestamp: 1659978430
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int64(n * (n - 1)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp0vdhnzuk.swift:14:31: error: cannot convert return expression of\
    \ type 'Int64' to return type 'Int'\n    return Int64(n * (n - 1)) / 2\n     \
    \      ~~~~~~~~~~~~~~~~~~~^~~\n           Int(                  )\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n    return Int(bitPattern &+ n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpc0axqtvd.swift:14:16: error: cannot find 'bitPattern' in scope\n\
    \    return Int(bitPattern &+ n)\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978431
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n:\
    \ 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n///\
    \ 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n:\
    \ Int) -> Int {\n  return f(n - 1, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpmu4p6coh.swift:14:10: error: cannot find 'f' in scope\n  return\
    \ f(n - 1, n)\n         ^\n"
  stdout: ''
  timestamp: 1659978431
