name: HumanEval_143_words_in_sentence
language: swift
prompt: "\n/// You are given a string representing a sentence,\n/// the sentence contains\
  \ some words separated by a space,\n/// and you have to return a string that contains\
  \ the words from the original sentence,\n/// whose lengths are prime numbers,\n\
  /// the order of the words in the new string should be the same as the original\
  \ one.\n/// Example 1:\n/// >>> words_in_sentence(sentence: \"This is a test\")\n\
  /// \"is\"\n/// Example 2:\n/// >>> words_in_sentence(sentence: \"lets go for swimming\"\
  )\n/// \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n/// * sentence\
  \ contains only letters\nfunc words_in_sentence(sentence: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(words_in_sentence(sentence: \"This is a\
  \ test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\"\
  ) == \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
  \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am\
  \ Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for\
  \ it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\"\
  )\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
completions: ["    guard let wordArray = sentence.split(separator: \" \") else {\n\
    \        return \"Error\"\n    }\n    var resultString = \"\"\n    \n    var resultWord\
    \ = \"\"\n    var isPrime = true\n    var isDone = false\n    \n    for i in 1...wordArray.count\
    \ {\n        let isPrime = true\n        for j in 1...i {\n            if i *\
    \ j == i {\n                isPrime = false\n                break\n         \
    \   }\n        }\n        if isPrime {\n            resultString += wordArray[i]\n\
    \        }\n        if i == wordArray.count {\n            if !isDone {\n    \
    \            resultString += \"and\"\n            }\n            isDone = true\n\
    \        }\n    }\n    return resultString", "    let chars = sentence.characters.map(String.init)\n\
    \    let charSet = chars.reduce([], { (res, char) -> Bool in\n        let char\
    \ = String(char)\n        if char.isLetter, !res.contains(char) {\n          \
    \  return char.isLetter ? res.append(char) : false\n        }\n        return\
    \ true\n    })\n    return charSet.map { String($0) }.joined(separator: \" \")",
  "    let wordArray = sentence.components(separatedBy: \" \")\n    var result = \"\
    \"\n    for i in wordArray {\n        if i.characters.count != 2 {\n         \
    \   return \"\"\n        } else {\n            for j in 2...i.characters.count\
    \ {\n                if Int(i[j])%2 != 0 {\n                    result += i[j]\n\
    \                }\n            }\n        }\n    }\n    return result", "   \
    \ precondition(sentence.characters.count == 1, \"The input sentence must be a\
    \ sentence with 1 word.\")\n\n    var newSentence = \"\"\n    var temp = \"\"\n\
    \    var primeNumbers = [0]\n    for character in sentence.characters {\n    \
    \    if character == \"a\" || character == \"e\" || character == \"i\" || character\
    \ == \"o\" || character == \"u\" {\n            temp += String(character)\n  \
    \          continue\n        }\n        temp += String(UnicodeScalar(Int(character))).unicodeScalars.first!.value\n\
    \        if let _ = Int(UnicodeScalar(Int(character))).unicodeScalars.first!.value,\
    \ primeNumbers.contains(Int(UnicodeScalar(Int(character))).unicodeScalars.first!.value)\
    \ {\n            primeNumbers.append(Int(UnicodeScalar(Int(character))).unicodeScalars.first!.value)\n\
    \            newSentence = newSentence + temp\n            temp = \"\"\n     \
    \   }\n    }\n    newSentence = newSentence + temp\n    return newSentence", " \
    \   precondition(sentence.characters.count == 1,\n        \"words_in_sentence\
    \ only works on single words.\")\n    if sentence.characters.count <= 1 {\n  \
    \      return \"\"\n    }\n    let words = sentence.characters.split{$0 == \"\
    \ \"}.map(String.init)\n    return words.filter{$0.characters.isPrime}.join(\"\
    \ \")", "  // Write your code here.\n  guard let sentenceArray = sentence.components(separatedBy:\
    \ \" \") else {\n    return \"\"\n  }\n\n  var result = \"\"\n  var primeLengthsOfWordsGivenInSentence\
    \ = Int()\n  for word in sentenceArray {\n    let word = word.trimmingCharacters(in:\
    \ \" \".characters)\n    var isPrime = true\n    for _ in 0..<word.count {\n \
    \     if word % 2 == 0 {\n        isPrime = false\n        break\n      }\n  \
    \    word /= 2\n    }\n\n    if isPrime {\n      primeLengthsOfWordsGivenInSentence\
    \ = primeLengthsOfWordsGivenInSentence + 1\n    }\n\n    if primeLengthsOfWordsGivenInSentence\
    \ == Int(word.count) {\n      result = result + word + \" \";\n    }\n  }\n  return\
    \ result", '    return words_in_sentence_(sentence: sentence)', "    // Write\
    \ your code here\n    \n    var s = String()\n    var c = \"\"\n    var l = 0\n\
    \    for i in sentence.characters {\n        if i.isLetter {\n            c =\
    \ \"\\(sentence[\\(l)..<i+1])\"\n            \n            if ((Int(c.characters.count))\
    \ < (Int(i)+1)) {\n                c = c + \" \"\n            }\n            s\
    \ += c\n            l = i\n        }\n    }\n    \n    return s", "    var result\
    \ = \"\"\n    for word in sentence.split(separator: \" \") {\n        if word_in_sentence(word)\
    \ {\n            result += word + \" \"\n        }\n    }\n    return result",
  '    return sentence', "    var sentence = sentence.characters\n\n    // check first\
    \ word (should be in form of digits)\n    if let startIndex = sentence.index(of:\
    \ \"\\d+\") {\n        let firstWord = sentence.prefix(upTo: startIndex)\n   \
    \     let firstWordLength = firstWord.count\n        // if first word is digit,\
    \ then second word can be anything\n        if firstWordLength == 1 {\n      \
    \      let secondWord = sentence.suffix(from: startIndex)\n            let secondWordLength\
    \ = secondWord.count\n            if secondWordLength == 0 {\n               \
    \ return firstWord\n            }\n        }\n    }\n\n    // check all remaining\
    \ words (should be in form of letters)\n    var newSentence = \"\"\n    for i\
    \ in 1..<sentence.count {\n        let word = sentence[i..<(i + 1)]\n        //\
    \ check first word (should be in form of letters)\n        if let index = sentence.index(of:\
    \ \"[a-zA-Z]+\") {\n            let firstWord = sentence.prefix(upTo: index)\n\
    \            let firstWordLength = firstWord.count\n            // if first word\
    \ is letter, then second word can be anything\n            if firstWordLength\
    \ == 1 {\n                let secondWord = sentence.suffix(from: index)\n    \
    \            let secondWordLength = secondWord.count\n                if secondWordLength\
    \ == 0 {\n                    newSentence += firstWord\n                }\n  \
    \          }\n        }\n    }\n    return newSentence", '    return solutions(sentence,
    0)', "    guard sentence.characters.count == 0 || Character(sentence[sentence.startIndex])\
    \ == \" \" else { return \"\" }\n    var str = [Character]()\n    var resultString\
    \ = \"\"\n    for c in sentence.characters {\n        guard Character(c) != \"\
    \ \" else { continue }\n        var isPrime = true\n        for _ in 1...Int(sqrt(Double(Int(c))))+1\
    \ {\n            if c % Int(Int(c))! != 0 {\n                isPrime = false\n\
    \                break\n            }\n        }\n        if isPrime {\n     \
    \       str.insert(c, at: 0)\n        }\n    }\n    for c in str {\n        resultString\
    \ += String(describing: c)\n    }\n    return resultString", '    return sentence',
  '    return Solution().words_in_sentence(sentence)', "    var list = sentence.characters\n\
    \    var result = \"\"\n    for index in 0..<list.count {\n        if isPrimeNumber(index)\
    \ && isPrimeNumber(list.count) {\n            list.append(\" \")\n           \
    \ list.append(list.last!)\n            var temp = list.joined()\n            list.append(temp)\n\
    \            list.append(\" \")\n            list.append(list.last!)\n       \
    \     result = result.substringToIndex(result.startIndex.advancedBy(index))\n\
    \        }\n    }\n    return result", "    precondition(sentence.isValid)\n \
    \   if sentence.hasPrefix(\"(\") || sentence.hasPrefix(\")\") {\n        return\
    \ \"\"\n    }\n    var s = sentence\n    var result = \"\"\n    for word in s.split(separator:\
    \ \" \") {\n        if hasPrime(word: word) {\n            result += \" \" + word\n\
    \        }\n    }\n    \n    return result.trim()", "    guard let str = sentence.trimmingCharacters(in:\
    \ .whitespaces).split(\" \").map({ $0.trimmingCharacters(in: .whitespaces) })\
    \ else { return \"\" }\n    guard let set = str.filter { str.contains($0) } .map\
    \ { str.firstIndex(of: $0) } .map { str.distance(from: str[$0]!, to: str[$0]!)\
    \ }\n        else {return \"\"}\n    var result = \"\"\n    for idx in set {\n\
    \        if idx % 2 == 0 {\n            result += str[idx]!\n        }\n    }\n\
    \    return result", "    let primes = prime_factors(sentence)\n    return primes.filter\
    \ { sentence in sentence.characters.count > 0 }.map { sentence + String($0) }.joinWithSeparator(\"\
    \ \")", '    return Solution().words_in_sentence(sentence)', "    var words =\
    \ [String]()\n    \n    for _ in sentence.unicodeScalars {\n        words.append(String())\n\
    \    }\n    \n    return words.joined(separator: \" \")", "    var sentence =\
    \ sentence\n    var result: String = \"\"\n    var j: Int = 0\n    var isPrime\
    \ = true\n    var i: Int = 0\n    for char1 in sentence.characters {\n       \
    \ switch char1 {\n        case \"a\":\n        case \"e\":\n        case \"i\"\
    :\n        case \"o\":\n        case \"u\":\n            j = 1\n        default:\n\
    \            j = j + 1\n        }\n        var j = j + 1\n        var isPrime\
    \ = true\n        var i: Int = 0\n        if j <= j % 2 {\n            if i %\
    \ 2 == 0 {\n                isPrime = false\n            } else {\n          \
    \      isPrime = true\n            }\n        }\n        if isPrime == false {\n\
    \            for char2 in sentence.characters {\n                switch char2\
    \ {\n                case \"a\":\n                case \"e\":\n              \
    \  case \"i\":\n                case \"o\":\n                case \"u\":\n   \
    \                 if i == char1 {\n                        result = result + char2\n\
    \                        break\n                    } else {\n               \
    \         i += 1\n                    }\n                default:\n          \
    \          i += 1\n                }\n            }\n        }\n        if i ==\
    \ j {\n            result = result + char1\n        }\n        if i == j && isPrime\
    \ == true {\n            result = result + char1\n        }\n        if i == j\
    \ && isPrime == false {\n            result = result + char1\n        }\n    }\n\
    \    return result", "    if sentence == \"\" {\n        return \"\"\n    }\n\
    \    \n    var result = \"\"\n    var primes = [1]\n    \n    for char in sentence\
    \ {\n        \n        for _ in 0 ..< Int(char.unicodeScalars.count)/2 {\n   \
    \         \n            if primes.contains(&primes.last!) {\n                \n\
    \                primes.append(1)\n                \n            } else {\n  \
    \              \n                if primes.last > Int(char.unicodeScalars.count)/2\
    \ {\n                    \n                    primes.append(1)\n            \
    \        \n                } else {\n                    \n                  \
    \  primes.append(primes.last!+1)\n                    \n                }\n  \
    \              \n            }\n            \n        }\n        \n        result\
    \ += char\n        \n    }\n    \n    return result\n    ", "    var res = \"\"\
    \n    let letters = Array(sentence.characters)\n    for let letter in letters\
    \ {\n        if (primes?.contains?(letter) == true){\n            res = res +\
    \ String(letter)\n        }\n    }\n    return res", "    if let sentence = sentence.split(separator:\
    \ \" \").map(String.init) {\n        var words = [String]()\n        for word\
    \ in sentence {\n            if let word = word.lowercased(), word != \"and\"\
    \ {\n                words.append(word)\n            }\n        }\n        if\
    \ words.contains(where: {Int($0.length) == Int($0.count) && $0.isPrime}) {\n \
    \           return words.joined(separator: \" \")\n        }\n    }\n    return\
    \ \"\"", "    var outputString = \"\"\n    for wordIndex in 0..<sentence.characters.count\
    \ {\n        if isPrimeNumber(sentence.characters.count - wordIndex - 1) {\n \
    \           let wordIndex = sentence.characters.count - wordIndex - 1\n      \
    \      outputString = outputString + String(sentence.characters.suffix(wordIndex))\n\
    \        }\n    }\n    return outputString", "    if sentence == \"\" {\n    \
    \    return \"\"\n    }\n    if words_in_sentence.reserveCapacity() {\n      \
    \  words_in_sentence.characters[words_in_sentence.length] = sentence[0]\n    \
    \    for word in sentence.split(separator: \" \") {\n            if !words_in_sentence.isPrime(word)\
    \ {\n                continue\n            }\n            words_in_sentence.characters[words_in_sentence.length]\
    \ = word\n            words_in_sentence.length += 1\n        }\n    }\n    return\
    \ words_in_sentence.characters", "    if sentence == \"\" {\n        return \"\
    \"\n    }\n    var newString = \"\"\n    let charArray = sentence.characters\n\
    \n    for char in charArray {\n        let currentChar = String(char)\n      \
    \  if isPrime(number: Int64(currentChar)) {\n            if newString.characters.count\
    \ > 0 {\n                newString += \" \"\n            }\n            newString\
    \ += currentChar\n        }\n    }\n    return newString", "    precondition(sentence.isNotEmpty,\
    \ \"Parameter sentence cannot be empty.\")\n    let words = sentence.components(separatedBy:\
    \ \" \")\n    let primes = words.map { Int($0)! }\n    return primes.joined(separator:\
    \ \" \")", "    // Do not write main() function.\n    // Do not read input, instead\
    \ use the arguments to the function.\n    // Do not print the output, instead\
    \ return values to the caller.\n    \n    if sentence.isEmpty {\n        return\
    \ \"\"\n    }\n    \n    let wordCount = sentence.count\n    var newWords = \"\
    \"\n    \n    for word in sentence.components(separatedBy: \" \") {\n        let\
    \ wordCount = word.count\n        \n        if isPrime(wordCount) {\n        \
    \    newWords.append(word)\n        }\n    }\n    \n    return newWords", "  \
    \  precondition(sentence.hasPrefix(\"A valid sentence must begin with some letters.\"\
    ))\n    precondition(sentence.hasSuffix(\"A valid sentence must end with some\
    \ letters.\"))\n    var res = \"\"\n    for i in 0..<sentence.characters.count\
    \ {\n        var j = i\n        while j != 0 && sentence.characters[j-1] == '\
    \ ' {\n            j--\n        }\n        if j == 0 {\n            res += sentence.characters[i]\n\
    \        } else {\n            res += sentence.characters[i-j ..< i]\n       \
    \ }\n    }\n    return res", "    guard let words = sentence.split(separator:\
    \ \" \").map(String.init) else {\n        return \"No valid words\"\n    }\n \
    \   return words.joined(separator: \" \")", '    return words_in_sentence(sentence.characters.split(separator:
    " ").reversed())', '    return words_in_sentence_helper(sentence).map({ $0 }).joined()',
  "    var new_sentence = \"\"\n    for let character in sentence {\n        if character\
    \ == \" \" {\n            if new_sentence.isEmpty {\n                continue\n\
    \            } else {\n                new_sentence = new_sentence + \" \"\n \
    \           }\n        }\n        if Character.isLetter(character) {\n       \
    \     if new_sentence.isEmpty {\n                new_sentence = character\n  \
    \          } else {\n                new_sentence = new_sentence + \" \" + character\n\
    \            }\n        }\n    }\n    return new_sentence", "    let result =\
    \ \"\"\n    for wordIndex in sentence.characters.indices {\n        if isPrime(index:\
    \ wordIndex) {\n            result += sentence[wordIndex]\n        }\n    }\n\
    \    return result", "    guard len(sentence) >= 1 else {\n        return \"\"\
    \n    }\n    guard let _ = Character.isLetter(sentence[0]) else {\n        return\
    \ \"\"\n    }\n\n    var result: String = \"\"\n    var primeString: String =\
    \ String()\n    for i in 0..<sentence.characters.count {\n        if isPrimeNumber(input:\
    \ Int(String(sentence[i])!)) {\n            primeString = primeString + String(sentence[i])\n\
    \        }\n    }\n    for i in 0..<primeString.characters.count {\n        result\
    \ = result + primeString[i]\n    }\n    return result.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)",
  "    guard let letters = sentence.characters.filter { $0.isLetter }\n        else\
    \ { return \"\" }\n    guard let words = letters.components(separatedBy: \" \"\
    )\n        else { return \"\" }\n\n    var result = \"\"\n    guard let n = numbers.firstIndex(of:\
    \ letters.count),\n        let r = numbers.lastIndex(of: letters.count),\n   \
    \     let index = words.firstIndex(of: letters.count),\n        let count = words.count\
    \ else { return \"\" }\n    for _ in 0..<words.count {\n        if n > index {\n\
    \            let a = words[r]\n            let b = words[index]\n            let\
    \ c = words[count]\n            let d = words[a]\n            let e = words[b]\n\
    \            let f = words[c]\n            let g = words[d]\n            let h\
    \ = words[e]\n            let j = words[f]\n            let k = words[g]\n   \
    \         let l = words[h]\n            let m = words[j]\n            let n =\
    \ words[k]\n            let o = words[l]\n            let p = words[m]\n     \
    \       let q = words[n]\n            let r = words[o]\n            let s = words[p]\n\
    \            let t = words[q]\n            let u = words[r]\n            let v\
    \ = words[s]\n            let w = words[t]\n            let x = words[u]\n   \
    \         let y = words[v]\n            let z = words[w]\n            let a =\
    \ words[x]\n            let b = words[y]\n            let c = words[z]\n     \
    \       let d = letters[s]\n            let e = letters[t]\n            let f\
    \ = letters[u]\n            let g = letters[v]\n            let h = letters[w]\n\
    \            let j = letters[x]\n            let k = letters[y]\n            let\
    \ l = letters[z]\n            let m = letters[c]\n            let n = letters[d]\n\
    \            let o = letters[e]\n            let p = letters[f]\n            let\
    \ q = letters[g]\n            let r = letters[h]\n            let s = letters[j]\n\
    \            let t = letters[k]\n            let u = letters[l]\n            let\
    \ v = letters[m]\n            let w = letters[n]\n            let x = letters[o]\n\
    \            let y = letters[p]\n            let z = letters[q]\n            let\
    \ a = letters[r]\n            let b = letters[s]\n            let c = letters[t]\n\
    \            let d = letters[u]\n            let e = letters[v]\n            let\
    \ f = letters[w]\n            let g = letters[x]\n            let h = letters[y]\n\
    \            let j = letters[z]\n            let k = letters[a]\n            let\
    \ l = letters[b", "    precondition(\n        1 <= sentence.length && sentence.length\
    \ <= 100, \"invalid input\"\n    )\n\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    .characters\n    let alphabetArray = Array(alphabet)\n\n    func checkIfPrime(_\
    \ i: Int) -> Bool {\n        if i == 0 {\n            return false\n        }\n\
    \        if i > 1 {\n            let upperBound = pow(i, 2)\n            for j\
    \ in 1...upperBound {\n                if i != j {\n                    if j <=\
    \ i {\n                        return false\n                    }\n         \
    \       }\n            }\n        }\n        return true\n    }\n\n    var resultString\
    \ = \"\"\n    for word in sentence.split(separator: \" \") {\n        if checkIfPrime(word.length)\
    \ == false {\n            resultString += word + \" \" //\n        }\n    }\n\
    \    return resultString", "    // Your code here\n    \n    \n    return \"\"",
  "    guard let words = sentence.components(separatedBy: \" \") else { return \"\"\
    \ }\n    var primes = Set<Int>()\n    var resultString = \"\"\n    for word in\
    \ words {\n        let word = word.trimmingCharacters(in: CharacterSet.alphanumerics)\n\
    \        if word == \"\" { continue }\n        guard let number = Int(word) else\
    \ { return \"\" }\n        if primes.contains(number) {\n            resultString.append(word)\n\
    \        }\n        primes.insert(number)\n    }\n    return resultString", " \
    \   let words = sentence.components(separatedBy: \" \")\n    let wordLengths =\
    \ (words ?? []).map({ $0.characters.count })\n    let primeLengths = primes.filter({\
    \ wordLengths.contains($0.longTerm) })\n    return primeLengths.joined(separator:\
    \ \" \")", "    if sentence.characters.count == 0 {\n        return \"\"\n   \
    \ }\n    var word = \"\"\n    for character in sentence.characters {\n       \
    \ word = word + String(character)\n    }\n    return words_in_word(word: word,\
    \ sentences: sentence)", "    let alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    .characters)\n    var result = \"\"\n    for letter in sentence.characters {\n\
    \        if let index = alphabet.index(of: letter) {\n            if isPrimeNumber(index:\
    \ index) {\n                result += String(letter)\n            }\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    for word in sentence.split(separator:\
    \ \" \") {\n        if prime_number(word) {\n            result += word\n    \
    \    }\n    }\n    return result", "    func isPrime(max: Int) -> Bool {\n   \
    \     return max > 1 && max <= maxNumber\n    }\n    \n    if let _ = sentence.index(of:\
    \ \" \") where sentence.count > 1 {\n        let maxNumber = sentence.count +\
    \ 1\n        var result = \"\"\n        for word in sentence.components(separatedBy:\
    \ \" \") {\n            if let n = Int(word) {\n                if isPrime(n)\
    \ {\n                    result += word\n                }\n            }\n  \
    \      }\n        return result\n    }\n    \n    if let _ = sentence.index(of:\
    \ \" \") where sentence.count > 1 {\n        let maxNumber = sentence.count +\
    \ 1\n        var result = \"\"\n        for word in sentence.components(separatedBy:\
    \ \" \") {\n            if let n = Int(word) {\n                result += String(word)\n\
    \            }\n        }\n        return result\n    }\n    \n    return \"\"",
  '    return words_in_sentenceIter(sentence.characters) + " "', '    return words_in_sentence(sentence.characters.map(String.init))',
  "    let mut stringBuilder = StringBuilder()\n    for ch in sentence.characters\
    \ {\n        if ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' {\n         \
    \   stringBuilder.append(ch)\n        } else {\n            stringBuilder.append(\"\
    -\")\n        }\n    }\n    let re = regex(r\"\\b\\S+\\b\")\n    for match in\
    \ re.matchesInString(stringBuilder.toString()) {\n        if let range = Range(match.range(at:\
    \ 1), in: stringBuilder) {\n            let str1 = stringBuilder.substring(with:\
    \ range)\n            if str1.characters.count == 1 {\n                stringBuilder.replaceSubrange(range,\
    \ with: \"-\")\n            }\n        }\n    }\n    return stringBuilder.toString()",
  "    // Write your code here\n    let words = sentence.characters.split{$0 == \"\
    \ \"}.map { String($0) }\n    var sortedWords = words.sorted()\n    var ret =\
    \ \"\"\n    var count = 0\n    for word in sortedWords {\n        count += Int(word).isPrime\n\
    \        if count == 2 {\n            ret += word\n            count = 0\n   \
    \     }\n    }\n    return ret", "    var result = \"\"\n    for character in\
    \ sentence {\n        if character == \" \" {\n            for _ in 0..<(result.characters.count\
    \ - 1) {\n                if Int(result.characters.characters[result.characters.count\
    \ - 1]) % (Int(character) - Int(result)) <= 0 {\n                    break\n \
    \               }\n            }\n        } else {\n            result += String(character)\n\
    \        }\n    }\n    return result", "    // Your code here\n    // Solution\
    \ 3\n    let words = sentence.components(separatedBy: \" \")\n    var result =\
    \ \"\"\n    for word in words {\n        let length = Int(word.count)\n      \
    \  if length > 0 && isPrimeNumber(length) == true {\n            result += \"\
    \ \" + word\n        }\n    }\n    return result.trimmingCharacters(in: .whitespacesAndNewlines)",
  "  // Your code goes here\n    return \"\"\n  }", "    var result: String = \"\"\
    \n    for word in sentence.split(\" \") {\n        var len: Int = 2\n        for\
    \ char in word {\n            len *= Int(UnicodeScalar(char.value - 97).value)\n\
    \        }\n        if len != 0 {\n            result += word\n        }\n   \
    \ }\n    return result", "    let words = sentence.components(separatedBy: \"\
    \ \")\n    let wordCount = words.count\n    let maxLen = sqrt(Double(wordCount))\n\
    \    var result = \"\"\n    var primesFound = [Bool](repeating: false, count:\
    \ maxLen)\n    for word in words {\n        var count = 0\n        for primes\
    \ in 0 ..< maxLen {\n            if primesFound[primes] || !primesFound[primes\
    \ * 2] {\n                let nextPrime = primes + 2\n                let nextPrimeIndex\
    \ = Int(pow(Double(nextPrime), Double(word.count)))\n                if nextPrimeIndex\
    \ == primes || (nextPrimeIndex >= wordCount && nextPrimeIndex <= maxLen) {\n \
    \                   count += 1\n                    if count >= primes {\n   \
    \                     primesFound[primes] = true\n                    }\n    \
    \                break\n                }\n            }\n        }\n        if\
    \ count == maxLen {\n            result += word\n        }\n    }\n    return\
    \ result", '    return solution(NIOS(sentence))', "    // init result array\n\
    \    var result = [String]()\n    // init prime counter\n    var primeCounter\
    \ = 1\n    // init counter for words\n    var counter = 1\n    // init word\n\
    \    var word = String()\n    // loop sentence\n    for char in sentence.characters\
    \ {\n        // create char from chars index\n        let charInt = Int(char)\n\
    \        // check if char is a space\n        if charInt <= 32 {\n           \
    \ // add char to word\n            word += String(char)\n        } else {\n  \
    \          // check if counter is prime\n            if isPrime(counter) {\n \
    \               // add current word to result array\n                result.append(word)\n\
    \                // reset word\n                word = String(char)\n        \
    \    }\n            // update counter for word\n            counter++\n      \
    \  }\n    }\n    // add last word\n    result.append(word)\n    // return result\
    \ array\n    return result.joined(separator: \" \")", '    return words_in_sentence(sentence:
    sentence.characters.map(String.init))', '    return __words_in_sentence_c99(sentence)',
  "    return NSString(string: sentence).componentsSeparatedByString(\" \")\n    \
    \    .filter({(word: String) -> Bool in\n            return word.lengthOfBytes(using:\
    \ .UTF8) > 0 && word.isPrimeNumber()\n        })\n        .map({word in\n    \
    \        return NSString(string: word).stringByTrimmingCharactersInSet(\n    \
    \            NSCharacterSet.whitespaceCharacterSet()\n            )\n        })\n\
    \        .joinWithSeparator(\" \")", "    return words_in_sentence(\n        sentence:\
    \ sentence,\n        separator: \" \")", "    let charArray = sentence.characters\n\
    \    let wordArray = sentence.components(separatedBy: \" \")\n    var resultString\
    \ = \"\"\n    for word in wordArray {\n        if isPrime(word.characters.count)\
    \ {\n            resultString = resultString + word\n        }\n    }\n    return\
    \ resultString", "    guard sentence.count <= 100 else { return \"\" }\n    guard\
    \ let charArray = sentence.characters, !charArray.isEmpty else { return \"\" }\n\
    \    var result = \"\"\n    var isPrime = true\n    for char in charArray {\n\
    \        if isPrime {\n            if char == \" \" {\n                isPrime\
    \ = false\n            } else {\n                let div = Int(String(char).unicodeScalars.first!.value\
    \ - 97)\n                if div != 0 {\n                    if div == 2 {\n  \
    \                      isPrime = false\n                    } else if div == 3\
    \ {\n                        result += String(char)\n                    } else\
    \ if div == 5 {\n                        result += String(char) + \" \"\n    \
    \                } else if div % 2 == 0 {\n                        result += String(char)\n\
    \                    } else if div % 3 == 0 {\n                        result\
    \ += String(char) + \" \"\n                    } else if div % 5 == 0 {\n    \
    \                    result += String(char) + \" \"\n                    } else\
    \ {\n                        result += String(char) + \" \"\n                \
    \    }\n                } else {\n                    isPrime = false\n      \
    \          }\n            }\n        } else {\n            if char == \" \" {\n\
    \                isPrime = true\n            } else {\n                let div\
    \ = Int(String(char).unicodeScalars.first!.value - 97)\n                if div\
    \ != 0 {\n                    if div % 2 == 0 {\n                        result\
    \ += String(char)\n                    } else if div % 3 == 0 {\n            \
    \            result += String(char) + \" \"\n                    } else {\n  \
    \                      result += String(char) + \" \"\n                    }\n\
    \                } else {\n                    isPrime = true\n              \
    \  }\n            }\n        }\n    }\n    return result", '    return Solution().wordsInSentence(sentence:
    sentence)', "    precondition(sentence.length > 0)\n    let sentenceArray = sentence.components(separatedBy:\
    \ \" \")\n    let result = String()\n    for word in sentenceArray {\n       \
    \ if Int((word.count) + 1) >= Int(word.count) {\n            result += \"\\(word)\"\
    \n        }\n    }\n    return result", "    // write your code here\n    var\
    \ stringToTest = sentence\n    \n    stringToTest = stringToTest.lowercased()\n\
    \    let wordsArray = stringToTest.components(separatedBy: \" \")\n    let newString\
    \ = \"\"\n    for word in wordsArray {\n        let word = word.lowercased()\n\
    \        if isPrime(word: word!, primeNumber: (wordsArray.count + 1)) && !newString.containsString(word)\
    \ {\n            newString += word\n        }\n    }\n    \n    return newString",
  "    guard let sentence = sentence.toLower(), sentence.characters.count == sentence.count\
    \ else { return \"\" }\n    \n    let re = NSRegularExpression(pattern: \"\\\\\
    s+\", options: .caseInsensitive)\n    let matches = re.matches(in: sentence, range:\
    \ NSMakeRange(0, sentence.characters.count))\n    \n    var resultString = \"\"\
    \n    for match in matches {\n        let wordRange = match.range\n        resultString\
    \ += String(sentence.substring(with: wordRange))\n    }\n    \n    return resultString",
  '    return ""', "    var result = \"\"\n\n    for c in sentence.cString(using:\
    \ String.Encoding.utf8) {\n        let letter = String(c)\n        let isPrime\
    \ = primeNumberOf(c: letter) != nil\n\n        if isPrime {\n            result\
    \ += c\n        }\n    }\n\n    return result", "    if sentence.isEmpty {\n \
    \       return \"\"\n    }\n    var newSentence = \"\"\n    for letter in sentence.characters\
    \ {\n        if isPrime(Int(letter)) {\n            newSentence = newSentence\
    \ + String(letter)\n        }\n    }\n    return newSentence", "    // Your code\
    \ here\n    return \"\"", "    var result = \"\"\n    var prime = 0\n    var found\
    \ = 0\n    for ch in sentence.characters {\n        if isPrime(prime) {\n    \
    \        result += ch\n            found = 1\n        }\n        prime++\n   \
    \ }\n    if found == 0 {\n        return result\n    }\n    return result", '    return
    words_in_sentence_0(sentence)', '    return sentence', "    var result: [String]\
    \ = []\n    var words: String\n    for s in sentence.split(separator: \" \") {\n\
    \        if s.count > 0 {\n            if words == \"\" {\n                words\
    \ = s\n            } else {\n                if isPrime(Int(words[s.startIndex..<s.endIndex]))\
    \ {\n                    result.append(words)\n                }\n           \
    \     words = s\n            }\n        }\n    }\n    if words != \"\" {\n   \
    \     result.append(words)\n    }\n    return result.joined(separator: \" \")",
  '    return words_in_sentence_in_text_formatter(sentence)', "    if let sentence\
    \ = sentence.lowercased() {\n        if let splits = sentence.components(separatedBy:\
    \ \" \") {\n            let isPrime = splits.filter { Int($0).isPrime }\n    \
    \        return isPrime.joined(separator: \" \")\n        } else {\n         \
    \   return \"\"\n        }\n    } else {\n        return \"\"\n    }", '    return
    words_in_sentence1(sentence)', "    var result = \"\"\n    for word in sentence.split(separator:\
    \ \" \") {\n        if prime_number(word) == true {\n            result = result\
    \ + word\n        }\n    }\n    return result", "    if sentence.isEmpty {\n \
    \       return \"\"\n    }\n    let chars = sentence.characters\n    var primes\
    \ = String()\n    for x in 1..<chars.count {\n        for y in 2..<chars.count\
    \ {\n            if chars[x] == chars[y] {\n                if x % y == 0 {\n\
    \                    primes += \" \" + String(chars[x])\n                    break\n\
    \                } else {\n                    primes += \" \" + String(chars[x])\n\
    \                }\n            }\n        }\n    }\n    primes = primes.characters.prefix(Int(chars.count))\n\
    \    return primes", "    guard let chars = sentence.characters.split(separator:\
    \ \" \").map(String.init) else {\n        return \"no words found\"\n    }\n \
    \   \n    var result = \"\"\n    for char in chars {\n        let str = String(char)\n\
    \        if str.isPrime(of: 2) && result.characters.count == 0 {\n           \
    \ result += str\n        }\n    }\n    return result", "    let regex = NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: [])\n    return regex.stringByReplacingMatchesInString(sentence,\
    \ options: [], range: NSMakeRange(0, sentence.length), withTemplate: \"\")", '    return
    Solution().words_in_sentence(sentence)', '    return helper(sentence, 1)', '    return
    check_for_recursive(sentence, "", primes, 0, "")', "    // Your code here\n  \
    \  var newString = String()\n    for word in sentence.components(separatedBy:\
    \ \" \") {\n        let charCount = word.characters.count\n        let intCount\
    \ = Int(charCount)\n        if intCount.isPrime {\n            newString.append(word)\n\
    \        }\n    }\n    return newString", "    // Your code here\n    return \"\
    \"", '    return Solution().words_in_sentence(sentence: sentence)', "    if sentence.isEmpty\
    \ {\n        return \"\"\n    }\n    let words = sentence.componentsSeparatedByString(\"\
    \ \")\n    let primes = primes(from: words)\n    let newWords = words.filter {\
    \ prime in\n        return words.count > prime\n    }\n    return newWords.joined(separator:\
    \ \" \")", "    var resultString = \"\"\n    for i in sentence.characters {\n\
    \        if result.characters.count <= Int(i) ** 2 {\n            resultString.append(sentence.substringToIndex(advance(sentence.startIndex,\
    \ i)))\n        }\n    }\n    return resultString", "    // write your code in\
    \ JavaScript (Node.js 8.9.4)\n    return sentence.split(' ').filter((element)\
    \ => !is_prime(element.split(\"\").length).includes(true)).join(\" \")", '    return
    remove_punctuation(remove_punctuation(sentence)).words', "    var result = \"\"\
    \n    for i in 0..<(Int(sentence.length)/2) {\n        let substring = String(sentence.prefix(by:\
    \ Int(sentence.length)/2 + i))\n        if let substring = substring.unicodeScalars\
    \ {\n            for char in substring{\n                if let char = char.value\
    \ {\n                    if Int(char) != char.value {\n                      \
    \  result += String(char)\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return result", "    // Your code here\n    var\
    \ strings = sentence.characters\n    var newString = \"\"\n    for _ in 0..<strings.count\
    \ {\n        var newWord = \"\"\n        for i in 0..<strings[_].length {\n  \
    \          var isPrime = true\n            var isNotPrime = true\n           \
    \ for j in 0..<strings[_].length {\n                if i != j {\n            \
    \        if strings[_][i] != strings[_][j] {\n                        isNotPrime\
    \ = false\n                        break\n                    }\n            \
    \    }\n            }\n            if isNotPrime {\n                for j in 0..<strings[_].length\
    \ {\n                    if strings[_][i] == \"X\" {\n                       \
    \ isPrime = false\n                        break\n                    }\n    \
    \            }\n                if isPrime {\n                    newWord += strings[_][i]\n\
    \                }\n            }\n        }\n        newString += \" \" + newWord\n\
    \    }\n    return newString.substringToIndex(newString.characters.count)", " \
    \   if sentence.isEmpty {\n        return \"\"\n    }\n    let wordsSet = Set(sentence.components(separatedBy:\
    \ \" \"))\n    var ret = \"\"\n    for i in 0..<sentence.characters.count {\n\
    \        let isPrime = i % 2 == 1 && i > 1 && !(i % 3)\n        if !wordsSet.contains(String(sentence.substring(with:\
    \ Index(i))) && isPrime {\n            ret += String(sentence.substring(with:\
    \ Index(i)))\n        }\n    }\n    return ret", '    return words_in_sentence_naive(sentence:
    sentence)', "    guard isPrimeNumber(sentence.length) else {\n        return \"\
    \"\n    }\n\n    let wordArray = sentence.characters.split{$0 == \" \"}.map(String.init)\n\
    \n    return wordArray.sorted(by: { $0.compare($1) == .orderedAscending }).joined(separator:\
    \ \" \")", "    var primes = []\n    var i = 0\n    var result: String = \"\"\n\
    \    for letter in sentence.characters {\n        if i > 0 {\n            if letter\
    \ == ' ' {\n                result += \" \"\n            }\n            if primes.contains(letter)\
    \ {\n                if primes.count > i {\n                    result += primes[i]\n\
    \                }\n                i += 1\n            }\n        }\n       \
    \ primes.append(letter)\n    }\n    return result", '    return ""', "    guard\
    \ let words = sentence.components(separatedBy: \" \") else { return \"\" }\n \
    \   var result = \"\"\n    let primesOfTheWords = Array(1...words.count).filter{$0\
    \ % $0 == 0}\n    for i in primesOfTheWords {\n        let index = (sentence.index(of:\
    \ words[i], options: .noSearch)!)?.encoded\n        result = (result+words[index!]).removeDuplicates()\n\
    \    }\n    return result", "    if sentence == \"\" {\n        return \"\"\n\
    \    }\n    var res = \"\"\n    var strLen = sentence.length\n    var numPrime\
    \ = Array(1...strLen)\n    var i = 2\n    for char in strLen {\n        for prime\
    \ in numPrime {\n            if strLen % prime != 0 && strLen % prime != char\
    \ {\n                break\n            }\n            i += 2\n            if\
    \ i != strLen {\n                numPrime.remove(at: i)\n            }\n     \
    \   }\n        if strLen % i == 0 {\n            res += String(char)\n       \
    \ }\n    }\n    return res", "    // write your code in JavaScript (Node.js 8.9.4)\n\
    \    return \"\"", "    let wordsInSentence = sentence.components(separatedBy:\
    \ \" \")\n    guard !wordsInSentence.isEmpty else { return \"\" }\n    var resultWords\
    \ = [String]()\n    for i in 1...wordsInSentence.count {\n        for j in 2..wordsInSentence.count\
    \ {\n            if wordsInSentence.first!.count < i {\n                resultWords.append(wordsInSentence[j\
    \ - 1])\n            } else if wordsInSentence.first!.count == i {\n         \
    \       if i != j {\n                    resultWords.append(wordsInSentence[j\
    \ - 1])\n                }\n            }\n        }\n    }\n    return resultWords.joinWithSeparator(\"\
    \ \")", "  var result: String = \"\"\n  for character in sentence {\n    result\
    \ += String(character)\n  }\n  for number in 2...Int(sqrt(Double(result.count)))\
    \ {\n    if result.contains(\"\\(number)\") {\n      result = result.filter({$0\
    \ != \"\\(number)\"})\n    }\n  }\n  return result", "    guard let sentenceAsArray\
    \ = sentence.split(separator: \" \").map(String.init) else {\n        return \"\
    No words found\"\n    }\n    var maxLengthOfSentenceAsArray = sentenceAsArray.max{$0.count\
    \ < $1.count}\n    let allPrimeNumbers: [Int] = []\n    for i in 1...Int(maxLengthOfSentenceAsArray.count)\
    \ {\n        if sentenceAsArray[i].filter { return $0 == Int(i).isPrime }.isEmpty\
    \ {\n            allPrimeNumbers.append(i)\n        }\n    }\n    return sentenceAsArray.filter\
    \ {\n        return allPrimeNumbers.contains($0.count)\n    }.joined(separator:\
    \ \" \")", "    // Your code here\n    return sentence", '    return words.filter(sentence.characters.contains).joinWithSeparator("
    ")', "    var result = \"\"\n    for word in sentence.split{\n        var word\
    \ = word.lowercaseString\n        guard is_prime(word) else { continue }\n   \
    \     result += (word + \" \")\n    }\n    return result.trimmingCharacters(in:\
    \ \" \".characters)", "    return sentence.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \        .components(separatedBy: CharacterSet.whitespaces)\n        .filter({\
    \ (word, length) -> Bool in\n            guard length > 0 else {\n           \
    \     return false\n            }\n            var prime: Int\n            if\
    \ length <= 2 {\n                prime = 2\n            } else {\n           \
    \     prime = 3\n            }\n            for _ in 0..<length {\n          \
    \      if isPrime(prime, length: length) {\n                    return false\n\
    \                }\n                prime += 2\n            }\n            return\
    \ true\n        })\n        .map{ (word) -> String in\n            return word\n\
    \        }\n        .joined(separator: \" \")", "    // write your code here\n\
    \    for letter in sentence.characters {\n        if let i = Int(String(letter).unicodeScalars.first!.value)\
    \ {\n            if i > 1 {\n                for _ in 1...i {\n              \
    \      if isPrime(i) {\n                        return String(letter).unicodeScalars.first!.value\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return \"\"", '    return sentence', "    var words_in_sentence = \"\"\n \
    \   let word_array = sentence.split(separator: \" \")\n    for i in 0..<word_array.count\
    \ {\n        if word_array.contains(where: { (word: String) -> Bool in\n     \
    \       return word.length == Int(i) && word.characters.filter({ $0.isLetter }).count\
    \ != 0\n        }) {\n            words_in_sentence = words_in_sentence + word_array[i]\n\
    \        }\n    }\n    return words_in_sentence", "    if let sentence = sentence.lowercased()\
    \ {\n        var s = \"\"\n        var isPrime = true\n        for _ in 0..<Int(sqrt(Double(sentence.count)))\
    \ {\n            if Int(sentence.index(after: startIndex)) != 0 {\n          \
    \      if Int(sentence.index(after: startIndex)) % Int(sqrt(Double(sentence.count)))!\
    \ != 0 {\n                    isPrime = false\n                }\n           \
    \ }\n            s +=\n                String(sentence.substring(to: sentence.index(sentence.startIndex,\
    \ offsetBy: Int(sqrt(Double(sentence.count)))), limitedBy: sentence.endIndex))\n\
    \        }\n        if !isPrime {\n            s += \"...\"\n        }\n     \
    \   return s\n    }\n    return \"\"", '    return words_in_sentence(sentence.lowercased())',
  '    return words_in_sentence(sentence: sentence, wordSeparator: " ")', "    var\
    \ result = \"\"\n    for word in sentence.split(separator: \" \") {\n        if\
    \ Int(\"\\(word)\".characters.count) == 1 {\n            result += word + \" \"\
    \ // add word and space\n        } else {\n            result += \"\\(word)\"\
    \ + \" \"  // add word and space\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ CharacterSet.whitespaces) //trim space from the start and end", "    guard sentence\
    \ != \"\" else {\n        return \"\"\n    }\n    var result = \"\"\n    var prime\
    \ = 0\n    var isPrime = true\n    for letter in sentence.characters {\n     \
    \   guard letter >= \"a\" && letter <= \"z\" else {\n            return \"\"\n\
    \        }\n        let index = Int(letter) - Int(97)\n        while prime <=\
    \ index {\n            isPrime = true\n            prime = prime + 1\n       \
    \     for index2 in (prime).stride(to: Int(index), by: -1) {\n               \
    \ if prime % index2 == 0 {\n                    isPrime = false\n            \
    \        break\n                }\n            }\n            if isPrime {\n \
    \               result = result + String(letter)\n            }\n        }\n \
    \   }\n    return result", "    precondition(\n        sentence.characters.count\
    \ >= 1,\n        \"sentence must have at least 1 character\"\n    )\n    precondition(\n\
    \        sentence.characters.count <= 100,\n        \"sentence must have at most\
    \ 100 characters\"\n    )\n    var result = \"\"\n    for word in sentence.components(separatedBy:\
    \ \" \") {\n        precondition(\n            !result.isEmpty,\n            \"\
    words_in_sentence() can only return a result after finding a word\"\n        )\n\
    \        var prime = false // true means prime\n        for char in word {\n \
    \           if prime {\n                break\n            }\n            var\
    \ divisor = 2\n            while !((divisor * divisor) <= char.asciiValue && char.asciiValue\
    \ % divisor == 0) {\n                divisor *= 2\n            }\n           \
    \ if divisor != 2 {\n                prime = true\n            }\n        }\n\
    \        if prime {\n            result += word\n        }\n    }\n    return\
    \ result", "    let letters = sentence.characters\n    var result = \"\"\n   \
    \ var primeFactors = [1]\n    \n    for i in 2..<letters.count {\n        if primeFactors.contains(letters[i]/i)\
    \ {\n            primeFactors.append(letters[i]/i)\n        }\n    }\n    \n \
    \   for i in 1..<primeFactors.count {\n        if primeFactors[i] == 1 {\n   \
    \         if letters[i] == \" \" {\n                result += letters[i]\n   \
    \         } else {\n                result += \"\\ (\\ letters[i])\"\n       \
    \     }\n        } else {\n            result += \"(\\ letters[i])\"\n       \
    \ }\n    }\n    \n    return result", "    var result = \"\"\n    for character\
    \ in sentence {\n        let lowerCasedCharacter = String(Character(character).lowercased())\n\
    \        if Character.isLetter(character) {\n            let isPrime = is_prime(letter:\
    \ lowerCasedCharacter)\n            if isPrime {\n                if let lastWord\
    \ = result.last, !lastWord.isEmpty {\n                    result += \" \" + lastWord\n\
    \                }\n                result += \" \" + lowerCasedCharacter\n  \
    \          }\n        }\n    }\n    return result.trimmingCharacters(in: .whitespacesAndNewlines)",
  "    guard sentence.characters.count >= 3 else { return \"\" }\n    let words =\
    \ sentence.components(separatedBy: \" \")\n    var result = \"\"\n    for word\
    \ in words {\n        let string = word\n        var length = 1\n        var prime\
    \ = true\n        for letter in word {\n            if Int(letter) != letter {\
    \ continue; } else { length = length * Int(letter) }\n        }\n        if length\
    \ <= 1 { continue }\n        for i in 2..<length {\n            if length % i\
    \ == 0 { prime = false; break }\n        }\n        if prime {\n            result\
    \ += string\n        }\n    }\n    return result", "    var result = \"\"\n  \
    \  for word in sentence.components(separatedBy: \" \") {\n        var temp = word\n\
    \        var foundPrime = false\n        for num in 1...Int(Double(temp.characters.count))\
    \  {\n            var isPrime = true\n            if num != 1 {\n            \
    \    var str = String(temp.characters.dropLast())\n                for char in\
    \ self.strings(from: str) {\n                    if !isPrime {\n             \
    \           break\n                    }\n                    let res = prime_number(string:\
    \ string)\n                    if res == 0 {\n                        isPrime\
    \ = false\n                        break\n                    }\n            \
    \    }\n            }\n            if isPrime {\n                result += temp\n\
    \                result += \" \"\n                foundPrime = true\n        \
    \    }\n            temp = String(temp.characters.dropLast())\n        }\n   \
    \     if !foundPrime {\n            result += temp\n            result += \" \"\
    \n        }\n    }\n    return result.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)",
  "    // Your code here\n    var result = \"\"\n    for i in 0..<sentence.characters.count\
    \ {\n        if isPrime(i) {\n            result += sentence.substring(i, i)\n\
    \        }\n    }\n    return result", "    if sentence.isEmpty {\n        return\
    \ \"\"\n    }\n    \n    var newString = \"\"\n    \n    for i in 0..<sentence.characters.count\
    \ {\n        \n        if isPrime(i) {\n            newString += String(sentence[i])\n\
    \        }\n        \n    }\n    \n    return newString", "    // Your code here\n\
    \    return \"\"", "    let wordsArray = sentence.componentsSeparatedByString(\"\
    \ \")\n    var newWordsArray = [String]()\n\n    for word in wordsArray {\n  \
    \      let newWord = String(word).characters.filter({ Character($0).isPrimeNumber()\
    \ })\n        newWordsArray.append(String(newWord))\n    }\n    return newWordsArray.joinWithSeparator(\"\
    \ \")", "    guard let words = sentence.components(separatedBy: \" \") else {\n\
    \        return \"\"\n    }\n    var result = \"\"\n    for word in words {\n\
    \        if is_prime(word) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", "    let words = \"abcdefghijklmnopqrstuvwxyz\".characters\n\
    \    var result: String = \"\"\n    for word in sentence.split(separator: \" \"\
    ) {\n        var isPrime = true\n        for letter in word {\n            if\
    \ !words.contains(letter) {\n                isPrime = false\n               \
    \ break\n            }\n        }\n        if isPrime {\n            result +=\
    \ word\n        }\n    }\n    return result", "    // write your code here\n \
    \   return \"\"", "    let words = sentence.componentsSeparatedByString(\" \"\
    )\n    var res = \"\"\n    words.forEach { word in\n        let length: Int? =\
    \ word.countElements\n        if length?.count == 0 {\n            return \"\"\
    \n        }\n        if length == nil {\n            res += word\n        } else\
    \ {\n            let primes = primes(length!)\n            primes.forEach { prime\
    \ in\n                if prime != length! {\n                    res += \" \"\
    \ + word\n                }\n            }\n        }\n    }\n    return res.components(separatedBy:\
    \ \" \")", '    return string_in_sentence(sentence, lengths: [2, 3, 5, 7, 11,
    13, 17, 19])', "    var result = \"\"\n    for word in sentence.split(\" \") {\n\
    \        let char = word.unicodeScalars\n            .filter{ $0.isPrime }\n \
    \           .sorted(by: >)\n            .first\n        if char != nil {\n   \
    \         result += char!.description\n        } else {\n            result +=\
    \ word\n        }\n    }\n    return result", "    if sentence.characters.count\
    \ == 0 {\n        return \"\"\n    }\n    if sentence.characters.count < 3 {\n\
    \        return \"\"\n    }\n    var result = \"\"\n    sentence.characters.forEach\
    \ { character in\n        if Int(String(character)) == characterToInt(character)\
    \ {\n            result = result + String(character)\n        }\n    }\n    return\
    \ result", "    let chars = sentence.characters.map { String($0) }\n    let primes\
    \ = isPrimeChars(chars.map { $0.first })\n    return sentence.split(separator:\
    \ \" \").filter { primes.contains($0.count) }.map { String($0) }.join(\" \")",
  "\tguard is_string(sentence) else { return \"\" }\n\treturn sentence.componentsSeparatedByString(\"\
    \ \")\n\t\t.map({ $0.characters.count }).filter(is_prime).joinWithSeparator(\"\
    \ \")", "    if sentence == \"\" { return \"\" }\n    var new_sentence = sentence\n\
    \n    for ch in new_sentence {\n        for char in \"abcdefghijklmnopqrstuvwxyz\"\
    \ {\n            if char == ch {\n                new_sentence = new_sentence.replacingOccurrences(of:\
    \ char, with: \"\")\n            }\n        }\n    }\n\n    var new_sentence2\
    \ = new_sentence.characters\n    new_sentence2 = new_sentence2.filter{ $0 != \"\
    -\".characters.count }\n    new_sentence2 = new_sentence2.filter{ $0 != \"a\"\
    .characters.count }\n    new_sentence2 = new_sentence2.filter{ $0 != \"e\".characters.count\
    \ }\n    new_sentence2 = new_sentence2.filter{ $0 != \"i\".characters.count }\n\
    \    new_sentence2 = new_sentence2.filter{ $0 != \"l\".characters.count }\n  \
    \  new_sentence2 = new_sentence2.filter{ $0 != \"o\".characters.count }\n    new_sentence2\
    \ = new_sentence2.filter{ $0 != \"u\".characters.count }\n    new_sentence2 =\
    \ new_sentence2.filter{ $0 != \"y\".characters.count }\n\n    for ch in new_sentence2\
    \ {\n        for char in \"abcdefghijklmnopqrstuvwxyz\" {\n            if char\
    \ == ch {\n                new_sentence = new_sentence.replacingOccurrences(of:\
    \ char, with: \"\")\n            }\n        }\n    }\n\n    return new_sentence",
  "    precondition(sentence.characters.count != 0, \"Empty sentence\")\n    precondition(isPrime(sentence.characters.count),\
    \ \"Empty sentence\")\n    \n    var ret = \"\"\n    for char in sentence.characters\
    \ {\n        if let c = String(char) {\n            let index = String(c)\n  \
    \          if StringUtils.isPrime(index) {\n                ret += c\n       \
    \     }\n        }\n    }\n    return ret", '    return repeatedString(sentence:
    sentence, char: " ")', "    // TODO: implement\n    return \"not yet implemented\"",
  "    let chars = sentence.characters\n    let filteredChars = chars.filter { !Character.isLetter(_)\
    \ }\n    let filteredCharsLength = filteredChars.count\n    let primes = [2, 3,\
    \ 5, 7, 11, 13, 17, 19]\n    var result = \"\"\n    var isPrime = true\n    let\
    \ maxValue = maxElement(primes)\n    for char in filteredChars {\n        var\
    \ currentPrime = primes.last!\n        for i in primes.indices {\n           \
    \ if prime == i {\n                isPrime = false\n                currentPrime\
    \ = primes[i]\n                break\n            }\n        }\n        if isPrime\
    \ {\n            if char.characters.count == 1 {\n                result += char\n\
    \            } else {\n                result += String(char)\n            }\n\
    \        }\n        if currentPrime > maxValue {\n            result += char\n\
    \        }\n    }\n    return result", '    return find_primes(sentence: sentence)',
  "    var res = \"\"\n    for word in sentence.components(separatedBy: \" \") {\n\
    \        guard let word = word.trimmingCharacters(in: .whitespaces) else {\n \
    \           continue\n        }\n        if isPrime(word: word) {\n          \
    \  res += \" \" + word\n        }\n    }\n    return res.removingFirst()", " \
    \   guard let words = sentence.split(separator: \" \") else { return \"\" }\n\
    \    var result = \"\"\n    for word in words {\n        let index = word.index(word,\
    \ startIndex: 0, offsetBy: 1)\n        if (index == word.length - 1) || (index\
    \ == word.length)  {\n            result += \"\\(stringInterpolationSegment(word))\"\
    \n        }\n        else {\n            result += \"\\(stringInterpolationSegment(word[index...]))\"\
    \n        }\n    }\n    return result.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)",
  "    // your code goes here\n    let wordArray = sentence.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in wordArray {\n        let length\
    \ = countLetters(word: word)\n        if length == 2 {\n            for letter\
    \ in word {\n                if letter == letter {\n                    result\
    \ = result + \" \" + word\n                }\n            }\n        }\n    }\n\
    \    return result.dropLast()", "    var result = \"\"\n\n    for word in sentence.split(\"\
    \ \") {\n        if isPrimeNumber(word.length) == true {\n            result +=\
    \ \" \" + word\n        }\n    }\n\n    return result", "    // write your code\
    \ here\n    var num = \"1\"\n    var final = \"\"\n    for char in sentence.characters\
    \ {\n        if char == \" \" {\n            final = final + char\n        }\n\
    \        if num.isPrime {\n            if char == \"{\" {\n                num\
    \ = \"1\"\n            }\n            if char == \"}\" {\n                num\
    \ = \"2\"\n            }\n            if char == \",\" {\n                num\
    \ = \"3\"\n            }\n            if char == \".\" {\n                num\
    \ = \"4\"\n            }\n            if char == \":\" {\n                num\
    \ = \"5\"\n            }\n            if char == \"-\" {\n                num\
    \ = \"6\"\n            }\n            if char == \"_\" {\n                num\
    \ = \"7\"\n            }\n            if char == \"$\" {\n                num\
    \ = \"8\"\n            }\n            if char == \",\" {\n                num\
    \ = \"9\"\n            }\n            if char == \"?\" {\n                num\
    \ = \"0\"\n            }\n            if char == \"-\" {\n                num\
    \ = \"-\"\n            }\n            if char == \"/\" {\n                num\
    \ = \"/\"\n            }\n            if char == \",\" {\n                num\
    \ = \"@\"\n            }\n            if char == \"%\" {\n                num\
    \ = \"~\"\n            }\n            if char == \":\" {\n                num\
    \ = \"$\"\n            }\n            if char == \"+\" {\n                num\
    \ = \"&\"\n            }\n            if char == \"*\" {\n                num\
    \ = \"?\"\n            }\n            if char == \"?\" {\n                num\
    \ = \"?\"\n            }\n            if char == \"!\" {\n                num\
    \ = \"!\"\n            }\n            if char == \"{\" {\n                num\
    \ = \"?\"\n            }\n            if char == \"}\" {\n                num\
    \ = \"?\"\n            }\n            if char == \",\" {\n                num\
    \ = \"?\"\n            }\n            if char == \".\" {\n                num\
    \ = \"?\"\n            }\n            if char == \":\" {\n                num\
    \ = \"?\"\n            }\n            if char == \"-\" {\n                num\
    \ = \"?\"\n            }\n            if char == \"_\" {\n                num\
    \ = \"?\"\n            }\n            if char == \"$\" {\n                num\
    \ = \"?\"\n            }\n            if char == \",\" {\n                num\
    \ = \"?\"\n            }\n            if char == \"?\" {\n                num\
    \ = \"?\"\n            }\n            if char == \"-\" {\n                num\
    \ = \"?\"\n            }\n            if char == \"/\" {\n                num\
    \ = \"?\"\n            }\n            if char == \"%\" {\n                num\
    \ = \"?\"\n            }\n            if char == \":\" {\n                num\
    \ = \"?\"\n            }\n            if char", "    if sentence.isEmpty {\n \
    \       return \"\"\n    }\n    var letters = Set<Character>()\n    var result:\
    \ String = \"\"\n    for c in sentence {\n        letters.insert(c)\n    }\n \
    \   var maxLen = Int.max\n    for c in letters {\n        if maxLen % c == 0 {\n\
    \            maxLen = maxLen / c\n        }\n    }\n    for i in 2...maxLen {\n\
    \        for c in letters {\n            if i%c == 0 {\n                if letters.contains(String(c))\
    \ {\n                    result += c\n                }\n            }\n     \
    \   }\n    }\n    return result", '    return words_in_sentence(sentence.lowercased())',
  "    var result = \"\"\n    sentence.split(separator: \" \").forEach {\n       \
    \ let letter = String($0)\n        if let count = countLetter(letter) {\n    \
    \        if isPrimeNumber(count) {\n                result += letter\n       \
    \     }\n        }\n    }\n    return result", '    return words_in_sentence_helper(sentence)',
  "  var result: String = \"\"\n  if let sentence = sentence.split(separator: \" \"\
    ).map(String.init) {\n    if sentence.filter({ (c) -> Bool in\n      if c != \"\
    .\" && c != \"?\" && c != \"!\" && c != \"-\"\n    }.isEmpty) == nil {\n     \
    \ for word in sentence {\n        if checkPrimeNumber(word: word) {\n        \
    \  result += \" \" + word\n        }\n      }\n    }\n  }\n  return result.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)", '    return words_in_sentence_aux(sentence, "")',
  "    \n    return \"\"\n    ", "  if sentence.rangeOfCharacter(from: CharacterSet(charactersIn:\
    \ \"abcdefghijklmnopqrstuvwxyz\")) == nil {\n    return \"\"\n  }\n  var result\
    \ = \"\"\n  var isPrime = true\n  \n  for ch in sentence.unicodeScalars {\n  \
    \  if !isPrime || ch % 5 == 0 || ch % 7 == 0 {\n      result += String(UnicodeScalar(ch.value))\n\
    \      isPrime = false\n    }\n  }\n  return result", "    if sentence == \"\"\
    \ || sentence.rangeOfCharacter(from: .whitespacesAndNewlines) != nil {\n     \
    \   return \"\"\n    }\n\n    var result: String = \"\"\n\n    if sentence.rangeOfCharacter(from:\
    \ .whitespacesAndNewlines) != nil {\n        let range = sentence.rangeOfCharacter(from:\
    \ .whitespacesAndNewlines)\n        let words = sentence.substringToIndex(advance(range.lowerBound,\
    \ range.upperBound + 1))\n        for word in words.split(separator: \" \") {\n\
    \            let prime = prime_number_of_size(word.count)\n            if prime\
    \ > 0 {\n                result += word + \" \"\n            }\n        }\n  \
    \  } else {\n        let words = sentence.split(separator: \" \")\n        for\
    \ word in words {\n            let prime = prime_number_of_size(word.count)\n\
    \            if prime > 0 {\n                result += word + \" \"\n        \
    \    }\n        }\n    }\n\n    return result.trimmingCharacters(in: .whitespacesAndNewlines)",
  "    var result = \"\"\n    if let letters = sentence.characters {\n        for\
    \ i in 1..<(Int(sqrt(Double(letters.count)))+1) {\n            if letters.indices.contains(i\
    \ as Int) {\n                for j in 1..<letters.count {\n                  \
    \  if letters[i-1] == letters[j-1] {\n                        result += String(letters[i-1])\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result", '    return words_in_sentence1(sentence: sentence).joined(separator:
    " ")', "    // only letters allowed\n    if !sentence.isLetter() {\n        return\
    \ \"\"\n    }\n\n    var result = \"\"\n    var next = 1\n    for letter in sentence.characters\
    \ {\n        if isPrime(next) {\n            result = result + letter\n      \
    \  }\n        next = next + 1\n    }\n\n    return result", "    guard let words\
    \ = sentence.components(separatedBy: \" \") else { return \"\" }\n    let allPrimeNumbers\
    \ = words.compactMap({ Int($0) }).filter({ $0 > 1 }).sorted()\n    return words.filter({\n\
    \        guard let index = allPrimeNumbers.index(of: $0) else { return false }\n\
    \        let nextIndex = allPrimeNumbers.index(of: $0, offsetBy: index + 1)\n\
    \        return nextIndex == allPrimeNumbers.endIndex\n    }).joined(separator:\
    \ \" \")", "    let list = sentence.components(separatedBy: \" \")\n    let sortedList\
    \ = list.sorted()\n    return sortedList.filter { x -> Bool in\n        let prime\
    \ = Int(log(x)) + 2\n        return (prime % x == 0)\n    }.joined(separator:\
    \ \" \")", '    return solution(sentence)', "    // TODO: Write your code here\n\
    \    var newString = \"\"\n    var primeString = \"\"\n    for char in sentence\
    \ {\n        let num = Int(String(char).utf8)!\n        if num == 2 {\n      \
    \      primeString += String(char)\n        }\n    }\n    return primeString",
  "    if sentence == \"\" {\n        return \"\"\n    }\n    var letters = Array()\n\
    \    for letter in sentence.characters {\n        if letter.isLetter() {\n   \
    \         letters.append(letter)\n        }\n    }\n    var prime = \"\"\n   \
    \ for letter in letters {\n        if isPrime(letter.unicodeScalars) {\n     \
    \       prime = prime + letter\n        }\n    }\n    return prime", "    // Your\
    \ code goes here\n    var result = \"\"\n    let arr = sentence.characters.split{$0\
    \ == \" \"}.map{String($0)}\n    for idx in 0..<arr.count {\n        if arr[idx].characters.contains(\"\
    2\") {\n            let isPrime = true\n            for iidx in 0..<idx {\n  \
    \              if arr[iidx].characters.contains(\"2\") {\n                   \
    \ isPrime = false\n                    break\n                }\n            }\n\
    \            if isPrime {\n                result.append(arr[idx])\n         \
    \   }\n        }\n    }\n    return result", "    let wordsCount = sentence.characters.split(separator:\
    \ \" \").count\n    let result = sentence.characters.split(separator: \" \").map(String.init).filter(String.init).sorted().reduce(\"\
    \", combine: { (result, item) -> String in\n        let length = item.count\n\
    \        var result = String(repeating: \"\", count: length)\n        for i in\
    \ 0..<length {\n            result[length-i] = item[i]\n        }\n        return\
    \ result\n    })\n    return result.trimmingCharacters(in: .whitespacesAndNewlines)",
  '    return words_in_sentence(chars: sentence[..<sentence.count])', '    return
    Solution.words_in_sentence_S(sentence)', '    return solution.words_in_sentence_V2(sentence)',
  "    guard let sentenceComponents = sentence.components(separatedBy: \" \") else\
    \ {\n        return \"_\"\n    }\n\n    var result = \"\"\n    var primeNumbers\
    \ = 1\n\n    for word in sentenceComponents {\n        if let word = word.lowercased()\
    \ {\n            // Check current number is prime\n            if word == \"_\"\
    \ {\n                continue\n            }\n            if primeNumbers == Int(ceil(Double(word.count)\
    \ / 2)) {\n                result += \" \" + word\n            } else {\n    \
    \            result += word\n            }\n            primeNumbers += 1\n  \
    \      }\n    }\n    return result.trimmingCharacters(in: \" .\").lowercased()",
  "\treturn words_in_sentence(sentence: sentence, words: [])", "    guard let sentenceAsCharactersArray\
    \ = sentence\n        .unicodeScalars\n        .compactMap { $0 }\n        .filter\
    \ { !$0.isWhitespace }\n        .map { String($0) }\n    else { return \"\" }\n\
    \    let primeNumbers = sentenceAsCharactersArray\n        .map { Int($0) }\n\
    \        .filter { ($0 >= 2) && ($0 % $1) == 0 }\n        .sorted { $0 < $1 }\n\
    \        .map { $0 }\n    return primeNumbers.joined(separator: \" \")", '  return
    sentence.reduce("") { $0 + String($1).characters.filter { $0.isLetter } }.characters.map
    { $0 }.sorted().map { $0 % 2 == 0 ? $0 + 1 : $0 }.reduce("") { $0 + $1 + " " +
    $1 }', "    var newsentence = \"\"\n    for i in sentence.characters {\n     \
    \   if isPrimeNumber(i: String(i)) {\n            newsentence += i\n        }\n\
    \    }\n    return newsentence", "    // write your code here\n    var i = 0\n\
    \    var n = len(sentence)\n    var j = 0\n    var newString = \"\"\n    while\
    \ i < n {\n        if j == 2 {\n            newString += String(sentence.characterAtIndex(i))\n\
    \            i += 1\n            j = 0\n            continue\n        }\n    \
    \    if j % 2 == 0 {\n            newString += String(sentence.characterAtIndex(i))\n\
    \            i += 1\n            j = 0\n            continue\n        } else {\n\
    \            j += 2\n        }\n    }\n    return newString", "    // write your\
    \ code here\n    var newString = \"\"\n    var newArr = [Int]()\n    var newSet\
    \ = Set<Int>()\n    for char in sentence {\n        switch char {\n        case\
    \ \"a\":\n            newArr.append(0)\n        case \"b\":\n            newArr.append(1)\n\
    \        case \"c\":\n            newArr.append(2)\n        case \"d\":\n    \
    \        newArr.append(3)\n        case \"e\":\n            newArr.append(4)\n\
    \        case \"f\":\n            newArr.append(5)\n        case \"g\":\n    \
    \        newArr.append(6)\n        case \"h\":\n            newArr.append(7)\n\
    \        case \"i\":\n            newArr.append(8)\n        case \"j\":\n    \
    \        newArr.append(9)\n        case \"k\":\n            newArr.append(10)\n\
    \        case \"l\":\n            newArr.append(11)\n        case \"m\":\n   \
    \         newArr.append(12)\n        case \"n\":\n            newArr.append(13)\n\
    \        case \"o\":\n            newArr.append(14)\n        case \"p\":\n   \
    \         newArr.append(15)\n        case \"q\":\n            newArr.append(16)\n\
    \        case \"r\":\n            newArr.append(17)\n        case \"s\":\n   \
    \         newArr.append(18)\n        case \"t\":\n            newArr.append(19)\n\
    \        case \"u\":\n            newArr.append(20)\n        case \"v\":\n   \
    \         newArr.append(21)\n        case \"w\":\n            newArr.append(22)\n\
    \        case \"x\":\n            newArr.append(23)\n        case \"y\":\n   \
    \         newArr.append(24)\n        case \"z\":\n            newArr.append(25)\n\
    \        case \"A\":\n            newArr.append(26)\n        case \"B\":\n   \
    \         newArr.append(27)\n        case \"C\":\n            newArr.append(28)\n\
    \        case \"D\":\n            newArr.append(29)\n        case \"E\":\n   \
    \         newArr.append(30)\n        case \"F\":\n            newArr.append(31)\n\
    \        case \"G\":\n            newArr.append(32)\n        case \"H\":\n   \
    \         newArr.append(33)\n        case \"I\":\n            newArr.append(34)\n\
    \        case \"J\":\n            newArr.append(35)\n        case \"K\":\n   \
    \         newArr.append(36)\n        case \"L\":\n            newArr.append(37)\n\
    \        case \"M\":\n            newArr.append(38)\n        case \"N\":\n   \
    \         newArr.append(39)\n        case \"O\":\n            newArr.append(40)\n\
    \        case \"P\":\n            newArr.append(41)\n        case \"Q\":\n   \
    \         newArr.append(42)\n        case \"R\":\n            newArr.append(43)\n\
    \        case \"S\":\n            newArr.append(44)\n        case \"T\":\n   \
    \         newArr.append(45)\n        case \"", "    if sentence.isEmpty {\n  \
    \      return \"\"\n    }\n    var result = \"\"\n    var index = 0\n    while\
    \ index < sentence.count {\n        let word = sentence[index]\n        if isPrimeNumber(word:\
    \ word) && result.isEmpty {\n            result += word\n        } else {\n  \
    \          if result.isEmpty {\n                result = word\n            } else\
    \ {\n                result += \" \" + word\n            }\n        }\n      \
    \  index += 1\n    }\n    return result", "    var result = \"\"\n    var nextNum\
    \ = 1\n    for i in 0..<sentence.characters.count {\n        if let c = sentence[i]\
    \ {\n            if c == '-' {\n                nextNum = nextNum * 10 + 1\n \
    \               continue\n            }\n            let mult = nextNum * 10\n\
    \            if mult == Int(c) {\n                result += String(c)\n      \
    \      } else {\n                result += String(c)\n                result +=\
    \ String(mult - Int(c))\n            }\n            result += \" \"\n        \
    \    nextNum = 1\n        }\n    }\n    return result", '    return solution.words_in_sentence(sentence)',
  '    return words_in_sentence(sentence: sentence, wordLength: wordLength(sentence))',
  "    guard let sentence = sentence?.replacingOccurrences(of: \" \", with: \" \"\
    ).trimmingCharacters(in: .whitespaces) else { return \"\" }\n\n    let counts:\
    \ [Int: Int] = [:]\n    var primes: [Int] = []\n\n    for letter in sentence.unicodeScalars.filter({\
    \ !$0.isASCII }) {\n        guard letter.value % 2 == 0 else { continue }\n  \
    \      counts[letter.value / 2] += 1\n    }\n\n    guard counts.isEmpty else {\
    \ return \"\" }\n\n    for i in 2..<counts[count(counts)-1] {\n        guard primes.contains(i)\
    \ else { continue }\n        primes.append(i)\n    }\n\n    return sentence.replacingOccurrences(of:\
    \ \" \", with: \"\").trimmingCharacters(in: .whitespaces) + \"\\(i)\"", "\tlet\
    \ words = sentence.components(separatedBy: \" \")\n\t\n\tlet primes = words.filter({\
    \ (word: String) -> Bool in\n\t\tguard word.characters.count >= 1 else {\n\t\t\
    \treturn false\n\t\t}\n\t\tvar isPrime = true\n\t\t\n\t\tfor letter in word {\n\
    \t\t\tif Int(String(letter).unicodeScalars.first!.value) == 0 {\n\t\t\t\tisPrime\
    \ = false\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn isPrime\n\t})\n\t\n\treturn \" \"\
    .join(primes)", "    guard let words = sentence.components(separatedBy: \" \"\
    ) else {\n        return \"\"\n    }\n    var result = \"\"\n    for word in words\
    \ {\n        let count = count(from: word)\n        if count == 1 {\n        \
    \    result += word\n            continue\n        }\n        if count == 2 {\n\
    \            if result == \"\" {\n                result = word\n            }\
    \ else {\n                result += \" \" + word\n            }\n            continue\n\
    \        }\n        if count % 2 != 0 {\n            result += \"\\( word \"\n\
    \            continue\n        }\n        result += \"\\( word \"\n    }\n   \
    \ return result", "    precondition(sentence.characters.count > 0, \"The string\
    \ should not be empty\")\n    let wordArray = sentence.characters.split(separator:\
    \ \" \").filter({$0 != \"\\n\"})\n    let n = wordArray.count\n    let result\
    \ = \"\"\n    for i in 0..<n {\n        let start = i / 2\n        let end = n\
    \ - 1 - i\n        if wordArray[start].isPrime && wordArray[end].isPrime {\n \
    \           result += \" \" + wordArray[start] + \" \" + wordArray[end]\n    \
    \    }\n    }\n    return result", "    precondition(sentence.length > 0, \"sentence\
    \ should have a non-zero length\")\n    return Array(sentence.characters).filter\
    \ { (c) -> Bool in\n        let primeNumber = isPrime(c)\n        return primeNumber\n\
    \    }.sorted()", "    if sentence.isEmpty {\n        return \"\"\n    }\n\n \
    \   var res = \"\"\n    var prime = 1\n    var currentChar: Character?\n\n   \
    \ for char in sentence.characters {\n        if char.isLetter {\n            if\
    \ prime > 1 {\n                if current == nil {\n                    res =\
    \ char\n                }\n                else {\n                    res +=\
    \ currentChar!\n                }\n                currentChar = nil\n       \
    \         prime = 1\n            }\n            else {\n                currentChar\
    \ = char\n            }\n        }\n        else {\n            prime++\n    \
    \    }\n    }\n\n    return res", '    return shortestPrimeSequence(sentence)
    + sentence.substring(1)', '    return words_in_sentence(sentence: sentence, words:
    [:])', "    var result = \"\"\n    for word in sentence.split(){\n        if checkPrime(word:\
    \ word){\n            result+= \" \" + word\n        }\n    }\n    return result",
  "    let wordCount = sentence.split(separator: \" \").count\n    let length = sqrt(Double(wordCount))\n\
    \    var output: String = \"\"\n    for number in stride(from: 1, to: wordCount,\
    \ by: 1) {\n        if sqrt(Double(number)).truncatingRemainder(dividingBy: length)\
    \ == 0 {\n            output = output + String(number) + \" \"\n        }\n  \
    \  }\n    output = output.trimmingCharacters(in: .whitespacesAndNewlines)\n  \
    \  return output.characters.map { String($0) }.joined(separator: \" \")", "  \
    \  var result = \"\"\n    sentence.characters.forEach { (c) in\n        let range\
    \ = sentence.rangeOfString(String(c.unicodeScalars.map { String($0) }.joined()))\n\
    \        result = result + String(c.unicodeScalars.map { String($0) }.joined())\
    \ + \" \"\n    }\n    let range = result.rangeOfString(\" \".characters.first!)\n\
    \    return String(result.characters.dropFirst(range.endIndex))", "    let n =\
    \ sentence.count\n    let arr = sentence.characters\n    var str = \"\"\n    var\
    \ prime = true\n    for i in 0..<n {\n        for j in 2..<n {\n            if\
    \ i != j {\n                if arr[i] == arr[j] {\n                    str +=\
    \ arr[i]\n                }\n            }\n        }\n        if prime {\n  \
    \          str += arr[i]\n            prime = false\n        }\n    }\n    return\
    \ str", "  var string = \"\"\n  if let arr = sentence.split(separator: \" \")\
    \ {\n    for str in arr {\n      if str.isPrime {\n        string += \" \" + str\n\
    \      }\n    }\n  }\n  return string", "    var result = \"\"\n    for word in\
    \ sentence.components(separatedBy: \" \") {\n        for character in word {\n\
    \            if isPrimeNumber(character) {\n                result += character\n\
    \            }\n        }\n    }\n    return result", "    var result = \"\"\n\
    \    for word in sentence.split(separator: \" \") {\n        if is_prime(word:\
    \ word) {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    guard sentence != \"\" else {\n        return \"\"\n    }\n    \n    var output\
    \ = \"\"\n    let words = sentence.components(separatedBy: \" \")\n    for word\
    \ in words {\n        if word.characters.count != 1 {\n            continue\n\
    \        }\n        \n        if output.isEmpty {\n            output = word\n\
    \        } else {\n            let length = pow(word.characters.count, 2)\n  \
    \          if isPrime(length) && output.characters.count >= length {\n       \
    \         output = output + \" \" + word\n            }\n        }\n    }\n  \
    \  \n    return output", "    let letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n \
    \   return sentence.components(separatedBy: \" \")\n        .filter { letters.contains($0)\
    \ }\n        .sorted()\n        .joined(separator: \" \")", "    // TODO: Replace\
    \ the following code with your solution.\n    let regex = try! NSRegularExpression(pattern:\
    \ \"[a-zA-Z ]+\")\n    let matches = regex.matches(in: sentence, range: NSRange(sentence.startIndex...,\
    \ in: sentence))\n    let words: [String] = []\n    for match in matches {\n \
    \       let range = match.range(at: 1)\n        let word = sentence[range]\n \
    \       if word.characters.count != 0 {\n            if words.contains(\"\\(word.characters.count)\"\
    ) || words.count < word.characters.count {\n                words.append(word.characters.count)\n\
    \            }\n        }\n    }\n    let res = words.joined(separator: \" \"\
    )\n    return res", "    var res = \"\"\n    var j = 0\n    var isPrime = true\n\
    \    var n = sentence.count\n    for i in 1...n {\n        if n % i == 0 {\n \
    \           j += 1\n            isPrime = false\n        }\n    }\n    if isPrime\
    \ {\n        for i in 1...n {\n            while (n % i == 0) {\n            \
    \    n /= i\n                j++\n            }\n            if j > 0 {\n    \
    \            res = sentence.substringToIndex(advance(sentence.startIndex, j))\n\
    \                return res\n            }\n        }\n    } else {\n        return\
    \ \"\"\n    }\n    return \"\"", "    if sentence.isEmpty {\n        return \"\
    \"\n    }\n\n    var words = sentence.characters\n    var result = ''\n\n    while\
    \ words.count > 0 {\n        var candidates = [Int]()\n        var j = 0\n   \
    \     for _ in 0..<words.count {\n            if j > 0 && candidates.contains(words[j-1]\
    \ + 1) {\n                j += 1\n                continue\n            }\n  \
    \          candidates.append(j)\n            j++\n        }\n\n        if candidates.count\
    \ == 1 {\n            result += String(words[0])\n        } else if candidates.count\
    \ > 1 {\n            result += \"(\"\n            for i in 0..<candidates.count\
    \ {\n                result += String(candidates[i])\n                if i !=\
    \ candidates.count - 1 {\n                    result += \" \"\n              \
    \  }\n            }\n            result += \")\"\n        }\n        words = words[candidates.endIndex...]\n\
    \    }\n    return result", "    guard sentence != \"\" else {\n        return\
    \ \"\"\n    }\n    guard let chars = sentence.unicodeScalars else {\n        return\
    \ \"\"\n    }\n    let set = Set<Character>()\n    \n    for char in chars {\n\
    \        set.insert(char)\n    }\n    \n    let sorted = set.sorted()\n    let\
    \ results = NSMutableString()\n    \n    for char in sorted {\n        results.appendContentsOfString(String(char))\n\
    \    }\n    \n    return results"]
stop_tokens:
- "\n}"
