language: swift
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count == 0 || operand.count\
    \ == 0 {\n        fatalError(\"The length of operator and operand array is wrong!\"\
    )\n    }\n    let operatorCount = operator.count\n    var result: Int = 0\n  \
    \  for _ in 0..<operand.count {\n        switch operatorCount {\n        case\
    \ 0:\n            fatalError(\"The length of operator array is wrong!\")\n   \
    \     case 1:\n            result += operand[0]\n        default:\n          \
    \  switch operator[0] {\n            case \"+\":\n                result += operand[0]\n\
    \            case \"-\":\n                result -= operand[0]\n            case\
    \ \"*\":\n                result *= operand[0]\n            case \"/\":\n    \
    \            result /= operand[0]\n            case \"**\":\n                result\
    \ **= operand[0]\n            }\n        }\n        operatorCount -= 1\n     \
    \   operand.remove(at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgyvfxdq8.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 0 || operand.count == 0 {\n       ^\n\
    /tmp/tmpgyvfxdq8.swift:21:16: error: '.' is not allowed in operator names\n  \
    \  if operator.count == 0 || operand.count == 0 {\n               ^\n/tmp/tmpgyvfxdq8.swift:24:25:\
    \ error: expected initial value after '='\n    let operatorCount = operator.count\n\
    \                        ^\n/tmp/tmpgyvfxdq8.swift:24:24: error: consecutive statements\
    \ on a line must be separated by ';'\n    let operatorCount = operator.count\n\
    \                       ^\n                       ;\n/tmp/tmpgyvfxdq8.swift:24:33:\
    \ error: '.' is not allowed in operator names\n    let operatorCount = operator.count\n\
    \                                ^\n/tmp/tmpgyvfxdq8.swift:33:20: error: expected\
    \ expression in 'switch' statement\n            switch operator[0] {\n       \
    \            ^\n/tmp/tmpgyvfxdq8.swift:33:28: error: '[' is not allowed in operator\
    \ names\n            switch operator[0] {\n                           ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // TODO: implement the algorithm.\n\
    \    var res = operand[0]\n    for e in operand[1..] {\n        res = operator[operator_index(e,\
    \ operator)] \n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp0pxzf5x_.swift:24:15: error: expected expression in assignment\n\
    \        res = operator[operator_index(e, operator)] \n              ^\n/tmp/tmp0pxzf5x_.swift:24:23:\
    \ error: '[' is not allowed in operator names\n        res = operator[operator_index(e,\
    \ operator)] \n                      ^\n/tmp/tmp0pxzf5x_.swift:23:23: error: cannot\
    \ find operator '..' in scope; did you mean '...'?\n    for e in operand[1..]\
    \ {\n                      ^~\n                      ...\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    //base case\n    if operator.count !=\
    \ operand.count {\n        print(\"Error: operator and operand must have the same\
    \ length\")\n        return -1\n    }\n    var result = 0\n    for i in 0..<operator.count\
    \ {\n        let operator1 = operator[i]\n        let operand1 = operand[i]\n\
    \        let operator2 = operator[(i+1)..<operator.count]\n        let operand2\
    \ = operand[(i+1)..<operand.count]\n        //if one of the operands is zero,\
    \ ignore it\n        if operand1 == 0 || operand2 == 0 {\n            continue\n\
    \        }\n        switch operator1 {\n        case \"+\":\n            result\
    \ += operand1\n        case \"*\":\n            result *= operand1\n        case\
    \ \"-\":\n            result -= operand1\n        case \"/\":\n            result\
    \ /= operand1\n        case \"//\":\n            result //= operand1\n       \
    \ case \"**\":\n            result = (result **= operand1)\n        default:\n\
    \            print(\"Error: Operator not found\")\n            return -1\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdfvxipmd.swift:22:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count != operand.count {\n       ^\n/tmp/tmpdfvxipmd.swift:22:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count != operand.count\
    \ {\n               ^\n/tmp/tmpdfvxipmd.swift:27:18: error: expected expression\
    \ after operator\n    for i in 0..<operator.count {\n                 ^\n/tmp/tmpdfvxipmd.swift:27:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpdfvxipmd.swift:28:25: error: expected initial\
    \ value after '='\n        let operator1 = operator[i]\n                     \
    \   ^\n/tmp/tmpdfvxipmd.swift:28:24: error: consecutive statements on a line must\
    \ be separated by ';'\n        let operator1 = operator[i]\n                 \
    \      ^\n                       ;\n/tmp/tmpdfvxipmd.swift:28:33: error: '[' is\
    \ not allowed in operator names\n        let operator1 = operator[i]\n       \
    \                         ^\n/tmp/tmpdfvxipmd.swift:30:25: error: expected initial\
    \ value after '='\n        let operator2 = operator[(i+1)..<operator.count]\n\
    \                        ^\n/tmp/tmpdfvxipmd.swift:30:24: error: consecutive statements\
    \ on a line must be separated by ';'\n        let operator2 = operator[(i+1)..<operator.count]\n\
    \                       ^\n                       ;\n/tmp/tmpdfvxipmd.swift:30:33:\
    \ error: '[' is not allowed in operator names\n        let operator2 = operator[(i+1)..<operator.count]\n\
    \                                ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Your code goes here\n    // return\
    \ operand.map { a in return operand.map { b in return operator[Int(a)][Int(b)]\
    \ * operand[Int(a)] + operator[Int(a)][Int(b)] - operand[Int(a)] * operand[Int(b)]}\
    \ }.max()\n    return operand.map { a in return operand.map { b in return operator[Int(a)][Int(b)]\
    \ }.max() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpcog60hpr.swift:23:63: error: consecutive statements on a line must\
    \ be separated by ';'\n    return operand.map { a in return operand.map { b in\
    \ return operator[Int(a)][Int(b)] }.max() }\n                                \
    \                              ^\n                                           \
    \                   ;\n/tmp/tmpcog60hpr.swift:23:72: error: '[' is not allowed\
    \ in operator names\n    return operand.map { a in return operand.map { b in return\
    \ operator[Int(a)][Int(b)] }.max() }\n                                       \
    \                                ^\n/tmp/tmpcog60hpr.swift:23:20: error: cannot\
    \ convert return expression of type '[()?]' to return type 'Int'\n    return operand.map\
    \ { a in return operand.map { b in return operator[Int(a)][Int(b)] }.max() }\n\
    \           ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcog60hpr.swift:23:46: error: type '()' cannot conform to 'Comparable'\n\
    \    return operand.map { a in return operand.map { b in return operator[Int(a)][Int(b)]\
    \ }.max() }\n                                             ^\n/tmp/tmpcog60hpr.swift:23:46:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n    return operand.map { a in return operand.map { b in return operator[Int(a)][Int(b)]\
    \ }.max() }\n                                             ^\n/tmp/tmpcog60hpr.swift:23:46:\
    \ note: required by referencing instance method 'max()' on 'Sequence' where 'Self.Element'\
    \ = '()'\n    return operand.map { a in return operand.map { b in return operator[Int(a)][Int(b)]\
    \ }.max() }\n                                             ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operators: Array<String> = []\n\
    \    var operands: Array<Int> = []\n\n    for element in operator {\n        if\
    \ element == \"+\" {\n            operators.append(\"+\")\n        }\n       \
    \ else if element == \"*\" {\n            operators.append(\"/\")\n        }\n\
    \        else if element == \"-\" {\n            operators.append(\"-\")\n   \
    \     }\n        else if element == \"//\" {\n            operators.append(\"\
    /\")\n        }\n        else if element == \"**\" {\n            operators.append(\"\
    /\")\n        }\n    }\n    for element in operand {\n        operands.append(element)\n\
    \    }\n    // Do the operation\n    var result: Int = 0\n    var operatorIndex\
    \ = 0\n    for element in operators {\n        result += (operands[operatorIndex]\
    \ * operands[operatorIndex + 1])\n        operatorIndex += 2\n    }\n\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphsv8of0q.swift:24:20: error: expected Sequence expression for for-each\
    \ loop\n    for element in operator {\n                   ^\n/tmp/tmphsv8of0q.swift:24:20:\
    \ error: expected '{' to start the body of for-each loop\n    for element in operator\
    \ {\n                   ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let operatorCount = operator.count\n\
    \    let operandCount = operand.count\n\n    if operatorCount == 0 || operandCount\
    \ == 0 {\n        return 0\n    }\n\n    if operandCount == operatorCount {\n\
    \        return operand.first! * (operand.first! / operand.second!)\n    }\n\n\
    \    return operand.first! * (operand.first! / do_algebra(operator: operator,\
    \ operand: operand.dropFirst()) + do_algebra(operator: operator, operand: operand.dropFirst().dropLast()))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprchxy1js.swift:21:25: error: expected initial value after '='\n\
    \    let operatorCount = operator.count\n                        ^\n/tmp/tmprchxy1js.swift:21:24:\
    \ error: consecutive statements on a line must be separated by ';'\n    let operatorCount\
    \ = operator.count\n                       ^\n                       ;\n/tmp/tmprchxy1js.swift:21:33:\
    \ error: '.' is not allowed in operator names\n    let operatorCount = operator.count\n\
    \                                ^\n/tmp/tmprchxy1js.swift:32:68: error: expected\
    \ expression in list of expressions\n    return operand.first! * (operand.first!\
    \ / do_algebra(operator: operator, operand: operand.dropFirst()) + do_algebra(operator:\
    \ operator, operand: operand.dropFirst().dropLast()))\n                      \
    \                                             ^\n/tmp/tmprchxy1js.swift:32:76:\
    \ error: ',' is not allowed in operator names\n    return operand.first! * (operand.first!\
    \ / do_algebra(operator: operator, operand: operand.dropFirst()) + do_algebra(operator:\
    \ operator, operand: operand.dropFirst().dropLast()))\n                      \
    \                                                     ^\n/tmp/tmprchxy1js.swift:29:59:\
    \ error: value of type '[Int]' has no member 'second'\n        return operand.first!\
    \ * (operand.first! / operand.second!)\n                                     \
    \             ~~~~~~~ ^~~~~~\n/tmp/tmprchxy1js.swift:32:57: error: missing arguments\
    \ for parameters 'operator', 'operand' in call\n    return operand.first! * (operand.first!\
    \ / do_algebra(operator: operator, operand: operand.dropFirst()) + do_algebra(operator:\
    \ operator, operand: operand.dropFirst().dropLast()))\n                      \
    \                                  ^\n                                       \
    \                  operator: <#[String]#>, operand: <#[Int]#>\n/tmp/tmprchxy1js.swift:20:6:\
    \ note: 'do_algebra(operator:operand:)' declared here\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tswitch operator[0] {\n\tcase \"+\": return\
    \ operand[0] + operand[1]\n\tcase \"-\": return operand[0] - operand[1]\n\tcase\
    \ \"*\": return operand[0] * operand[1]\n\tcase \"/\": return operand[0] / operand[1]\n\
    \tcase \"**\": return operand[0] ** operand[1]\n\tcase \"//\": return operand[0]\
    \ & operand[1]\n\tdefault: return 0\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp5200628o.swift:21:9: error: expected expression in 'switch' statement\n\
    \        switch operator[0] {\n               ^\n/tmp/tmp5200628o.swift:21:17:\
    \ error: '[' is not allowed in operator names\n        switch operator[0] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operands = operand\n\n    // if\
    \ the length of the operands is not equal to the length of the operators, return\
    \ 0\n    if operand.count != operator.count {\n        return 0\n    }\n\n   \
    \ // if the array does not contain any values, return 0\n    if operands.count\
    \ < 2 {\n        return 0\n    }\n\n    var operators = operator\n\n    var total\
    \ = 0\n    for i in 0..<operands.count {\n        switch operators[i - 1] {\n\
    \        case \"+\":\n            total += operands[i]\n        case \"-\":\n\
    \            total -= operands[i]\n        case \"*\":\n            total *= operands[i]\n\
    \        case \"//\":\n            total /= operands[i]\n        case \"**\":\n\
    \            total **= operands[i]\n        default:\n            return 0\n \
    \       }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpb4ne65qj.swift:24:25: error: expected expression after operator\n\
    \    if operand.count != operator.count {\n                        ^\n/tmp/tmpb4ne65qj.swift:24:33:\
    \ error: '.' is not allowed in operator names\n    if operand.count != operator.count\
    \ {\n                                ^\n/tmp/tmpb4ne65qj.swift:33:21: error: expected\
    \ initial value after '='\n    var operators = operator\n                    ^\n\
    /tmp/tmpb4ne65qj.swift:33:20: error: consecutive statements on a line must be\
    \ separated by ';'\n    var operators = operator\n                   ^\n     \
    \              ;\n/tmp/tmpb4ne65qj.swift:33:29: error: expected operator name\
    \ in operator declaration\n    var operators = operator\n                    \
    \        ^\n/tmp/tmpb4ne65qj.swift:47:19: error: cannot find operator '**=' in\
    \ scope\n            total **= operands[i]\n                  ^~~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for _ in\
    \ 0..<operator.count {\n        switch operator[_] {\n        case \"+\":\n  \
    \          result += operand[_ + 1]\n        case \"-\":\n            result -=\
    \ operand[_ + 1]\n        case \"*\":\n            result *= operand[_ + 1]\n\
    \        case \"//\":\n            result /= operand[_ + 1]\n        case \"**\"\
    :\n            result **= operand[_ + 1]\n        default:\n            fatalError()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpj8jlz904.swift:22:18: error: expected expression after operator\n\
    \    for _ in 0..<operator.count {\n                 ^\n/tmp/tmpj8jlz904.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for _ in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpj8jlz904.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[_] {\n               ^\n/tmp/tmpj8jlz904.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[_] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Your code goes here\n    if operator.count\
    \ != operand.count {\n        print(\"Please use the same number of operands and\
    \ operators\")\n        return 0\n    }\n    var result = 0\n    for i in 0..<operand.count\
    \ {\n        switch (operator[operand.count-i-1]) {\n        case \"+\": result\
    \ += operand[i]\n        case \"-\": result -= operand[i]\n        case \"*\"\
    : result *= operand[i]\n        case \"//\": result /= operand[i]\n        case\
    \ \"**\": result **= operand[i]\n        default: break\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpsv1xnyej.swift:22:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count != operand.count {\n       ^\n/tmp/tmpsv1xnyej.swift:22:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count != operand.count\
    \ {\n               ^\n/tmp/tmpsv1xnyej.swift:28:17: error: expected expression\
    \ in list of expressions\n        switch (operator[operand.count-i-1]) {\n   \
    \             ^\n/tmp/tmpsv1xnyej.swift:28:25: error: '[' is not allowed in operator\
    \ names\n        switch (operator[operand.count-i-1]) {\n                    \
    \    ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // your code goes here\n    var result\
    \ = operand[0]\n    for x in operand[1...] {\n        switch operator[0] {\n \
    \       case \"+\":\n            result += x\n        case \"-\":\n          \
    \  result -= x\n        case \"*\":\n            result *= x\n        case \"\
    /\":\n            result /= x\n        case \"**\":\n            result **= x\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpkqv7g386.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[0] {\n               ^\n/tmp/tmpkqv7g386.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[0] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Write your code here\n    var sum\
    \ : Int = 0\n    for element in operator{\n        switch element{\n        case\
    \ \"+\": sum = sum + operand[operand.count - 1]\n        case \"-\": sum = sum\
    \ - operand[operand.count - 1]\n        case \"*\": sum = sum * operand[operand.count\
    \ - 1]\n        case \"//\": sum = sum / operand[operand.count - 1]\n        case\
    \ \"**\": sum = sum * operand[operand.count - 1]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"\
    **\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbo2dphq5.swift:23:20: error: expected Sequence expression for for-each\
    \ loop\n    for element in operator{\n                   ^\n/tmp/tmpbo2dphq5.swift:23:20:\
    \ error: expected '{' to start the body of for-each loop\n    for element in operator{\n\
    \                   ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    var opStack = [String]()\n   \
    \ var opStackLen = 0\n    var opStackMax = operator.count\n    var operandStack\
    \ = [Int]()\n    var operandStackMax = operand.count\n    \n    for index in 0..<operandStackMax\
    \ {\n        switch operator[opStackLen] {\n        case \"+\": opStack.append(String(operand[index]))\n\
    \        case \"-\": opStack.append(String(operand[index]))\n        case \"*\"\
    : opStack.append(String(operand[index]))\n        case \"//\": opStack.append(String(operand[index]))\n\
    \        case \"**\": opStack.append(String(operand[index]))\n        default:\n\
    \            print(\"Error: Wrong operator.\")\n            break\n        }\n\
    \        opStackLen += 1\n    }\n    \n    var result = 0\n    while opStackLen\
    \ > 0 {\n        if opStackLen == 1 {\n            result = result + operandStack[0]\n\
    \            opStack.removeLast()\n            operandStack.removeLast()\n   \
    \     } else {\n            var value1 = operandStack.removeLast()\n         \
    \   var value2 = operandStack.removeLast()\n            var op = operator.removeLast()\n\
    \            var result1 = value1\n            var result2 = value2\n        \
    \    switch op {\n            case \"+\": result = result + result1\n        \
    \    case \"-\": result = result - result1\n            case \"*\": result = result\
    \ * result1\n            case \"//\": result = result / result1\n            case\
    \ \"**\": result = result ** result1\n            default:\n                print(\"\
    Error: Wrong operator.\")\n                break\n            }\n        }\n \
    \       opStackLen -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp2d12f6zl.swift:24:22: error: expected initial value after '='\n\
    \    var opStackMax = operator.count\n                     ^\n/tmp/tmp2d12f6zl.swift:24:21:\
    \ error: consecutive statements on a line must be separated by ';'\n    var opStackMax\
    \ = operator.count\n                    ^\n                    ;\n/tmp/tmp2d12f6zl.swift:24:30:\
    \ error: '.' is not allowed in operator names\n    var opStackMax = operator.count\n\
    \                             ^\n/tmp/tmp2d12f6zl.swift:29:16: error: expected\
    \ expression in 'switch' statement\n        switch operator[opStackLen] {\n  \
    \             ^\n/tmp/tmp2d12f6zl.swift:29:24: error: '[' is not allowed in operator\
    \ names\n        switch operator[opStackLen] {\n                       ^\n/tmp/tmp2d12f6zl.swift:51:22:\
    \ error: expected initial value after '='\n            var op = operator.removeLast()\n\
    \                     ^\n/tmp/tmp2d12f6zl.swift:51:21: error: consecutive statements\
    \ on a line must be separated by ';'\n            var op = operator.removeLast()\n\
    \                    ^\n                    ;\n/tmp/tmp2d12f6zl.swift:51:30: error:\
    \ '.' is not allowed in operator names\n            var op = operator.removeLast()\n\
    \                             ^\n/tmp/tmp2d12f6zl.swift:59:40: error: cannot find\
    \ operator '**' in scope\n            case \"**\": result = result ** result1\n\
    \                                       ^~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count != operand.count {\n\
    \        print(\"error: invalid operator and operand count\")\n        return\
    \ 0\n    }\n    var result = operand[0]\n    if operand.count >= 2 {\n       \
    \ for index in 1..operand.count - 1 {\n            if operator[index] == \"+\"\
    \ {\n                result += operand[index]\n            } else if operator[index]\
    \ ==\"-\" {\n                result -= operand[index]\n            } else if operator[index]\
    \ ==\"*\" {\n                result *= operand[index]\n            } else if operator[index]\
    \ ==\"/\" {\n                result /= operand[index]\n            } else if operator[index]\
    \ ==\"**\" {\n                result **= operand[index]\n            } else {\n\
    \                print(\"error: invalid operator\")\n                return 0\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpm4wo6479.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count != operand.count {\n       ^\n/tmp/tmpm4wo6479.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count != operand.count\
    \ {\n               ^\n/tmp/tmpm4wo6479.swift:28:16: error: expected expression,\
    \ var, or let in 'if' condition\n            if operator[index] == \"+\" {\n \
    \              ^\n/tmp/tmpm4wo6479.swift:28:24: error: '[' is not allowed in operator\
    \ names\n            if operator[index] == \"+\" {\n                       ^\n\
    /tmp/tmpm4wo6479.swift:30:23: error: expected expression, var, or let in 'if'\
    \ condition\n            } else if operator[index] ==\"-\" {\n               \
    \       ^\n/tmp/tmpm4wo6479.swift:30:31: error: '[' is not allowed in operator\
    \ names\n            } else if operator[index] ==\"-\" {\n                   \
    \           ^\n/tmp/tmpm4wo6479.swift:32:23: error: expected expression, var,\
    \ or let in 'if' condition\n            } else if operator[index] ==\"*\" {\n\
    \                      ^\n/tmp/tmpm4wo6479.swift:32:31: error: '[' is not allowed\
    \ in operator names\n            } else if operator[index] ==\"*\" {\n       \
    \                       ^\n/tmp/tmpm4wo6479.swift:34:23: error: expected expression,\
    \ var, or let in 'if' condition\n            } else if operator[index] ==\"/\"\
    \ {\n                      ^\n/tmp/tmpm4wo6479.swift:34:31: error: '[' is not\
    \ allowed in operator names\n            } else if operator[index] ==\"/\" {\n\
    \                              ^\n/tmp/tmpm4wo6479.swift:36:23: error: expected\
    \ expression, var, or let in 'if' condition\n            } else if operator[index]\
    \ ==\"**\" {\n                      ^\n/tmp/tmpm4wo6479.swift:36:31: error: '['\
    \ is not allowed in operator names\n            } else if operator[index] ==\"\
    **\" {\n                              ^\n/tmp/tmpm4wo6479.swift:27:23: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n        for index in\
    \ 1..operand.count - 1 {\n                      ^~\n                      ...\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    switch operator.count\
    \ {\n    case 0: break\n    case 1: \n        // Add two operands with operator\n\
    \        switch operand.count {\n        case 0: break\n        case 1: result\
    \ = operand[0] + operand[0]\n        case 2: result = operand[0] + operand[1]\
    \ + operand[0]\n        case 3: result = operand[0] + operand[1] + operand[2]\
    \ + operand[0]\n        case 4: result = operand[0] + operand[1] + operand[2]\
    \ + operand[3] + operand[0]\n        default: fatalError(\"do_algebra error\"\
    )\n        }\n    case 2: \n        // Multiply two operands with operator\n \
    \       switch operand.count {\n        case 0: break\n        case 1: result\
    \ = operand[0] * operand[0]\n        case 2: result = operand[0] * operand[1]\
    \ + operand[0]\n        case 3: result = operand[0] * operand[1] + operand[2]\
    \ + operand[0]\n        case 4: result = operand[0] * operand[1] + operand[2]\
    \ + operand[3] + operand[0]\n        default: fatalError(\"do_algebra error\"\
    )\n        }\n    case 3:\n        // Floor division two operands with operator\n\
    \        switch operand.count {\n        case 0: break\n        case 1: result\
    \ = operand[0] / operand[0]\n        case 2: result = operand[0] / operand[1]\
    \ + operand[0]\n        case 3: result = operand[0] / operand[1] + operand[2]\
    \ + operand[0]\n        case 4: result = operand[0] / operand[1] + operand[2]\
    \ + operand[3] + operand[0]\n        default: fatalError(\"do_algebra error\"\
    )\n        }\n    case 4:\n        // Exponentiation two operands with operator\n\
    \        switch operand.count {\n        case 0: break\n        case 1: result\
    \ = operand[0] ** operand[0]\n        case 2: result = operand[0] ** operand[1]\
    \ + operand[0]\n        case 3: result = operand[0] ** operand[1] + operand[2]\
    \ + operand[0]\n        case 4: result = operand[0] ** operand[1] + operand[2]\
    \ + operand[3] + operand[0]\n        default: fatalError(\"do_algebra error\"\
    )\n        }\n    default: fatalError(\"do_algebra error\")\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpj0_1x6f2.swift:22:12: error: expected expression in 'switch' statement\n\
    \    switch operator.count {\n           ^\n/tmp/tmpj0_1x6f2.swift:22:20: error:\
    \ '.' is not allowed in operator names\n    switch operator.count {\n        \
    \           ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    switch operator[0] {\n    case \"+\"\
    : return operand[0] + operand[1]\n    case \"-\": return operand[0] - operand[1]\n\
    \    case \"*\": return operand[0] * operand[1]\n    case \"/\": return operand[0]\
    \ / operand[1]\n    case \"//\": return operand[0] // operand[1]\n    case \"\
    **\": return operand[0] ** operand[1]\n    default: return 0\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpxx16x_6g.swift:21:12: error: expected expression in 'switch' statement\n\
    \    switch operator[0] {\n           ^\n/tmp/tmpxx16x_6g.swift:21:20: error:\
    \ '[' is not allowed in operator names\n    switch operator[0] {\n           \
    \        ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operands = [Int]()\n    for x in\
    \ operand{\n        operands.append(x)\n    }\n    let result = operands[0]\n\
    \    for x in operands.dropFirst(){\n        result = operator(result, x)\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpui6re3ms.swift:27:18: error: expected expression in assignment\n\
    \        result = operator(result, x)\n                 ^\n/tmp/tmpui6re3ms.swift:27:26:\
    \ error: '(' is not allowed in operator names\n        result = operator(result,\
    \ x)\n                         ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Your code here\n    var result =\
    \ 0\n    for _ in 0..<operator.count {\n        switch operator[Int(arc4random_uniform(UInt32(operator.count)))]\
    \ {\n        case \"+\":\n            result += operand[Int(arc4random_uniform(UInt32(operand.count)))]\n\
    \        case \"-\":\n            result -= operand[Int(arc4random_uniform(UInt32(operand.count)))]\n\
    \        case \"*\":\n            result *= operand[Int(arc4random_uniform(UInt32(operand.count)))]\n\
    \        case \"//\":\n            result /= operand[Int(arc4random_uniform(UInt32(operand.count)))]\n\
    \        case \"**\":\n            result **= operand[Int(arc4random_uniform(UInt32(operand.count)))]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfs_j91b9.swift:23:18: error: expected expression after operator\n\
    \    for _ in 0..<operator.count {\n                 ^\n/tmp/tmpfs_j91b9.swift:23:18:\
    \ error: expected '{' to start the body of for-each loop\n    for _ in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpfs_j91b9.swift:24:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[Int(arc4random_uniform(UInt32(operator.count)))]\
    \ {\n               ^\n/tmp/tmpfs_j91b9.swift:24:24: error: '[' is not allowed\
    \ in operator names\n        switch operator[Int(arc4random_uniform(UInt32(operator.count)))]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Your code here\n    var result =\
    \ 0\n    for op in operator {\n        switch op {\n        case \"+\":\n    \
    \        result = result + operand[1]\n        case \".\":\n            result\
    \ = result / operand[1]\n        case \"-\":\n            result = result - operand[1]\n\
    \        case \"*\":\n            result = result * operand[1]\n        case \"\
    /\":\n            result = result / operand[1]\n        case \"//\":\n       \
    \     result = result / operand[1]\n        case \"**\":\n            result =\
    \ result ** operand[1]\n        default:\n            print(\"ERROR: The operator\
    \ \\(op) cannot be found in operator array\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp12ijo82i.swift:23:15: error: expected Sequence expression for for-each\
    \ loop\n    for op in operator {\n              ^\n/tmp/tmp12ijo82i.swift:23:15:\
    \ error: expected '{' to start the body of for-each loop\n    for op in operator\
    \ {\n              ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for k in 0..<operator.count\
    \ {\n        switch operator[k] {\n            case \"+\": result += operand[k]\
    \ \n            case \"-\": result -= operand[k]\n            case \"*\": result\
    \ *= operand[k] \n            case \"/\": result /= operand[k] \n            case\
    \ \"//\": result /= operand[k]\n            case \"**\": result *= operand[k]\
    \ \n            default:\n                print(\"error\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp32w0rwrl.swift:22:18: error: expected expression after operator\n\
    \    for k in 0..<operator.count {\n                 ^\n/tmp/tmp32w0rwrl.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for k in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp32w0rwrl.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[k] {\n               ^\n/tmp/tmp32w0rwrl.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[k] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    var result = 0\n    \n    for\
    \ op in operator {\n        \n        switch op {\n            \n        case\
    \ \"+\":\n            result += operand[0]\n            \n        case \"-\":\n\
    \            result -= operand[0]\n            \n        case \"*\":\n       \
    \     result *= operand[0]\n            \n        case \"/\":\n            result\
    \ /= operand[0]\n            \n        case \"//\":\n            result /= operand[0]\n\
    \            \n        case \"**\":\n            result *= operand[0]\n      \
    \      \n        default:\n            \n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp9cgj9uit.swift:24:15: error: expected Sequence expression for for-each\
    \ loop\n    for op in operator {\n              ^\n/tmp/tmp9cgj9uit.swift:24:15:\
    \ error: expected '{' to start the body of for-each loop\n    for op in operator\
    \ {\n              ^\n/tmp/tmp9cgj9uit.swift:46:9: error: 'default' label in a\
    \ 'switch' must have at least one executable statement\n        default:\n   \
    \     ^~~~~~~~\n                 break\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operation: Int = 0\n    var operand1:\
    \ Int = 0\n    var operand2: Int = 0\n    var temp: Int = 0\n    var result: Int\
    \ = 0\n    var operatorCount: Int = operators.count\n    \n    // For each operator,\
    \ get the result and update operator\n    for index1 in range(0, operatorCount)\
    \ {\n        operation = operations[operator[index1]]\n        operand1 = operand[index1]\n\
    \        operand2 = operand[index1 + 1]\n        temp = operation * operand1\n\
    \        result = result + temp\n    }\n    // Add operand to the result\n   \
    \ result = result + operand2\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp9esegtp7.swift:30:32: error: expected expression in list of expressions\n\
    \        operation = operations[operator[index1]]\n                          \
    \     ^\n/tmp/tmp9esegtp7.swift:30:40: error: '[' is not allowed in operator names\n\
    \        operation = operations[operator[index1]]\n                          \
    \             ^\n/tmp/tmp9esegtp7.swift:26:30: error: cannot find 'operators'\
    \ in scope\n    var operatorCount: Int = operators.count\n                   \
    \          ^~~~~~~~~\n/tmp/tmp9esegtp7.swift:29:19: error: cannot find 'range'\
    \ in scope\n    for index1 in range(0, operatorCount) {\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for operation\
    \ in operator {\n        switch operation {\n        case \"+\":\n           \
    \ result += operand[1]\n        case \"-\":\n            result -= operand[1]\n\
    \        case \"*\":\n            result *= operand[1]\n        case \"//\":\n\
    \            result /= operand[1]\n        case \"**\":\n            result **=\
    \ operand[1]\n        default:\n            fatalError(\"Operator not found\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpswwi1bos.swift:22:22: error: expected Sequence expression for for-each\
    \ loop\n    for operation in operator {\n                     ^\n/tmp/tmpswwi1bos.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for operation in\
    \ operator {\n                     ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var op = operator[0]\n    var x = operand[0]\n\
    \    var y = operand[1]\n    var result = x\n    if op.hasPrefix(\"+\") {\n  \
    \      result = x + y\n    } else if op.hasPrefix(\"*\") {\n        result = x\
    \ * y\n    } else if op.hasPrefix(\"/\") {\n        result = x / y\n    } else\
    \ if op.hasPrefix(\"%\") {\n        result = x % y\n    } else if op.hasPrefix(\"\
    **\") {\n        result = x ** y\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpt8mzluol.swift:21:14: error: expected initial value after '='\n\
    \    var op = operator[0]\n             ^\n/tmp/tmpt8mzluol.swift:21:13: error:\
    \ consecutive statements on a line must be separated by ';'\n    var op = operator[0]\n\
    \            ^\n            ;\n/tmp/tmpt8mzluol.swift:21:22: error: '[' is not\
    \ allowed in operator names\n    var op = operator[0]\n                     ^\n\
    /tmp/tmpt8mzluol.swift:34:20: error: cannot find operator '**' in scope\n    \
    \    result = x ** y\n                   ^~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operator_index = 0\n    var operand_index\
    \ = 0\n    var result = 0\n    var operation: String = \"\"\n    while operand_index\
    \ < operand.count {\n        if operator_index < operator.count {\n          \
    \  operation = operator[operator_index]\n            if operand[operand_index]\
    \ < 0 {\n                if operation == \"-\" {\n                    result =\
    \ result - operand[operand_index]\n                    operand_index++\n     \
    \           } else if operation == \"+\" {\n                    result = result\
    \ + operand[operand_index]\n                    operand_index++\n            \
    \    } else if operation == \"*\" {\n                    result = result * operand[operand_index]\n\
    \                    operand_index++\n                } else if operation == \"\
    /\" {\n                    result = result / operand[operand_index]\n        \
    \            operand_index++\n                } else if operation == \"//\" {\n\
    \                    result = result // operand[operand_index]\n             \
    \       operand_index++\n                } else if operation == \"**\" {\n   \
    \                 result = result ** operand[operand_index]\n                \
    \    operand_index++\n                } else {\n                    print(\"This\
    \ isn't a supported operator\")\n                }\n            } else {\n   \
    \             if operation == \"-\" {\n                    result = result - operand[operand_index]\n\
    \                    operand_index++\n                } else if operation == \"\
    +\" {\n                    result = result + operand[operand_index]\n        \
    \            operand_index++\n                } else if operation == \"*\" {\n\
    \                    result = result * operand[operand_index]\n              \
    \      operand_index++\n                } else if operation == \"/\" {\n     \
    \               result = result / operand[operand_index]\n                   \
    \ operand_index++\n                } else if operation == \"//\" {\n         \
    \           result = result // operand[operand_index]\n                    operand_index++\n\
    \                } else if operation == \"**\" {\n                    result =\
    \ result ** operand[operand_index]\n                    operand_index++\n    \
    \            } else {\n                    print(\"This isn't a supported operator\"\
    )\n                }\n            }\n        } else {\n            print(\"This\
    \ isn't a supported operator\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpt7def1wu.swift:26:29: error: expected expression after operator\n\
    \        if operator_index < operator.count {\n                            ^\n\
    /tmp/tmpt7def1wu.swift:26:37: error: '.' is not allowed in operator names\n  \
    \      if operator_index < operator.count {\n                                \
    \    ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count != operand.count {\n\
    \        return -1\n    }\n    let operatorStack = [String]()\n    let operandStack\
    \ = [Int]()\n\n    for index in 0..<operator.count {\n        switch operator[index]\
    \ {\n        case \"+\":\n            operatorStack.append(operator[index])\n\
    \            operandStack.append(operand[index])\n        case \"*\":\n      \
    \      operatorStack.append(operator[index])\n            operandStack.append(operand[index])\n\
    \        case \"-\":\n            operatorStack.append(operator[index])\n    \
    \        operandStack.append(operand[index])\n        case \"//\":\n         \
    \   if operandStack.count != 2 {\n                return -1\n            }\n \
    \           operatorStack.append(operator[index])\n            operandStack.append(operandStack.last!\
    \ * operandStack.last!)\n        case \"**\":\n            if operandStack.count\
    \ != 2 {\n                return -1\n            }\n            operatorStack.append(operator[index])\n\
    \            operandStack.append(operandStack.last! * operandStack.last!)\n  \
    \      default:\n            return -1\n        }\n    }\n    return operandStack.last!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpnpkgl54d.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count != operand.count {\n       ^\n/tmp/tmpnpkgl54d.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count != operand.count\
    \ {\n               ^\n/tmp/tmpnpkgl54d.swift:27:22: error: expected expression\
    \ after operator\n    for index in 0..<operator.count {\n                    \
    \ ^\n/tmp/tmpnpkgl54d.swift:27:22: error: expected '{' to start the body of for-each\
    \ loop\n    for index in 0..<operator.count {\n                     ^\n/tmp/tmpnpkgl54d.swift:28:16:\
    \ error: expected expression in 'switch' statement\n        switch operator[index]\
    \ {\n               ^\n/tmp/tmpnpkgl54d.swift:28:24: error: '[' is not allowed\
    \ in operator names\n        switch operator[index] {\n                      \
    \ ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    switch operator.count {\n    case 0:\n\
    \        fatalError(\"Operator array is empty\")\n    case 1:\n        return\
    \ operand[0]\n    case 2:\n        switch operator[0] {\n        case \"+\":\n\
    \            return operand[0] + operand[1]\n        case \"-\":\n           \
    \ return operand[0] - operand[1]\n        case \"*\":\n            return operand[0]\
    \ * operand[1]\n        case \"/\":\n            return operand[0] / operand[1]\n\
    \        case \"//\":\n            return operand[0] // operand[1]\n        case\
    \ \"**\":\n            return operand[0] ** operand[1]\n        }\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwceufp18.swift:21:12: error: expected expression in 'switch' statement\n\
    \    switch operator.count {\n           ^\n/tmp/tmpwceufp18.swift:21:20: error:\
    \ '.' is not allowed in operator names\n    switch operator.count {\n        \
    \           ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    if operator.count\
    \ == 2 {\n        switch operator[0] {\n        case \"+\":\n            result\
    \ = operand[0] + operand[1]\n        case \"-\":\n            result = operand[0]\
    \ - operand[1]\n        case \"*\":\n            result = operand[0] * operand[1]\n\
    \        case \"//\":\n            result = operand[0] / operand[1]\n        case\
    \ \"**\":\n            result = operand[0] ** operand[1]\n        default:\n \
    \           println(\"Error! Invalid operator selected.\")\n        }\n    } else\
    \ {\n        println(\"Error! Invalid operators selected. Array must have at least\
    \ two elements.\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpuhetp0l2.swift:22:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 2 {\n       ^\n/tmp/tmpuhetp0l2.swift:22:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count == 2 {\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var res = 0\n    for op in operator\
    \ {\n        if let index = operand.index(of: op) {\n            res = res + operand[index]\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvkyr2sjb.swift:22:15: error: expected Sequence expression for for-each\
    \ loop\n    for op in operator {\n              ^\n/tmp/tmpvkyr2sjb.swift:22:15:\
    \ error: expected '{' to start the body of for-each loop\n    for op in operator\
    \ {\n              ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var res = operand[0]\n    for i in 1...operand.count\
    \ {\n        if operator[i-1] == \"+\"  {\n            res = res + operand[i]\n\
    \        }else if operator[i-1] == \"-\"  {\n            res = res - operand[i]\n\
    \        }else if operator[i-1] == \"*\"  {\n            res = res * operand[i]\n\
    \        }else if operator[i-1] == \"//\"  {\n            res = res // operand[i]\n\
    \        }else if operator[i-1] == \"**\" {\n            res = res * operand[i]\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp4b9rej0k.swift:23:12: error: expected expression, var, or let in\
    \ 'if' condition\n        if operator[i-1] == \"+\"  {\n           ^\n/tmp/tmp4b9rej0k.swift:23:20:\
    \ error: '[' is not allowed in operator names\n        if operator[i-1] == \"\
    +\"  {\n                   ^\n/tmp/tmp4b9rej0k.swift:25:18: error: expected expression,\
    \ var, or let in 'if' condition\n        }else if operator[i-1] == \"-\"  {\n\
    \                 ^\n/tmp/tmp4b9rej0k.swift:25:26: error: '[' is not allowed in\
    \ operator names\n        }else if operator[i-1] == \"-\"  {\n               \
    \          ^\n/tmp/tmp4b9rej0k.swift:27:18: error: expected expression, var, or\
    \ let in 'if' condition\n        }else if operator[i-1] == \"*\"  {\n        \
    \         ^\n/tmp/tmp4b9rej0k.swift:27:26: error: '[' is not allowed in operator\
    \ names\n        }else if operator[i-1] == \"*\"  {\n                        \
    \ ^\n/tmp/tmp4b9rej0k.swift:29:18: error: expected expression, var, or let in\
    \ 'if' condition\n        }else if operator[i-1] == \"//\"  {\n              \
    \   ^\n/tmp/tmp4b9rej0k.swift:29:26: error: '[' is not allowed in operator names\n\
    \        }else if operator[i-1] == \"//\"  {\n                         ^\n/tmp/tmp4b9rej0k.swift:31:18:\
    \ error: expected expression, var, or let in 'if' condition\n        }else if\
    \ operator[i-1] == \"**\" {\n                 ^\n/tmp/tmp4b9rej0k.swift:31:26:\
    \ error: '[' is not allowed in operator names\n        }else if operator[i-1]\
    \ == \"**\" {\n                         ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Do the algebra operations\n    var\
    \ result: Int = 0\n    for i in 0..<operator.length - 1 {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i]\n        case \"-\"\
    :\n            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result *= operand[i]\n        default:\n         \
    \   fatalError(\"Unknown operator\")\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpibtvb1o4.swift:23:18: error: expected expression after operator\n\
    \    for i in 0..<operator.length - 1 {\n                 ^\n/tmp/tmpibtvb1o4.swift:23:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.length\
    \ - 1 {\n                 ^\n/tmp/tmpibtvb1o4.swift:24:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpibtvb1o4.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Calculate the value of the expression\n\
    \    var value = operand[0]\n    for index in 1...operand.count {\n        //\
    \ Execute the operation with operator and operand\n        value = operator[operators.indexOf(operator[0])](value,\
    \ operand[index])\n    }\n    return value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp58e2go05.swift:25:17: error: expected expression in assignment\n\
    \        value = operator[operators.indexOf(operator[0])](value, operand[index])\n\
    \                ^\n/tmp/tmp58e2go05.swift:25:25: error: '[' is not allowed in\
    \ operator names\n        value = operator[operators.indexOf(operator[0])](value,\
    \ operand[index])\n                        ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    var result: Int = 0\n    \n  \
    \  for i in 0..<operand.count {\n        \n        let operand1 = operand[i]\n\
    \        \n        for j in 0..<operator.count {\n            \n            let\
    \ operand2 = operand[i+j]\n            \n            switch operator[j] {\n  \
    \              \n                case \"+\": result = result + operand2\n    \
    \            case \"-\": result = result - operand2\n                case \"*\"\
    : result = result * operand2\n                case \"//\": result = result / operand2\n\
    \                case \"^\": result = result ** operand2\n                \n \
    \               default: break\n            }\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpixoqkh3h.swift:28:22: error: expected expression after operator\n\
    \        for j in 0..<operator.count {\n                     ^\n/tmp/tmpixoqkh3h.swift:28:22:\
    \ error: expected '{' to start the body of for-each loop\n        for j in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpixoqkh3h.swift:32:20: error: expected expression\
    \ in 'switch' statement\n            switch operator[j] {\n                  \
    \ ^\n/tmp/tmpixoqkh3h.swift:32:28: error: '[' is not allowed in operator names\n\
    \            switch operator[j] {\n                           ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var left_operand: Int = operand[0]\n\
    \    var left_operator: String = operator[0]\n\n    if operand.count == 2 {\n\
    \        left_operator = operator[1]\n        left_operand = operand[1]\n    }\n\
    \n    var right_operand: Int = operand[1]\n    var right_operator: String = operator[1]\n\
    \n    if operand.count == 3 {\n        right_operator = operator[2]\n        right_operand\
    \ = operand[2]\n    }\n\n    return left_operand * left_operator + right_operand\
    \ * right_operator\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpqhfcqtgb.swift:22:33: error: expected initial value after '='\n\
    \    var left_operator: String = operator[0]\n                               \
    \ ^\n/tmp/tmpqhfcqtgb.swift:22:32: error: consecutive statements on a line must\
    \ be separated by ';'\n    var left_operator: String = operator[0]\n         \
    \                      ^\n                               ;\n/tmp/tmpqhfcqtgb.swift:22:41:\
    \ error: '[' is not allowed in operator names\n    var left_operator: String =\
    \ operator[0]\n                                        ^\n/tmp/tmpqhfcqtgb.swift:25:25:\
    \ error: expected expression in assignment\n        left_operator = operator[1]\n\
    \                        ^\n/tmp/tmpqhfcqtgb.swift:25:33: error: '[' is not allowed\
    \ in operator names\n        left_operator = operator[1]\n                   \
    \             ^\n/tmp/tmpqhfcqtgb.swift:30:34: error: expected initial value after\
    \ '='\n    var right_operator: String = operator[1]\n                        \
    \         ^\n/tmp/tmpqhfcqtgb.swift:30:33: error: consecutive statements on a\
    \ line must be separated by ';'\n    var right_operator: String = operator[1]\n\
    \                                ^\n                                ;\n/tmp/tmpqhfcqtgb.swift:30:42:\
    \ error: '[' is not allowed in operator names\n    var right_operator: String\
    \ = operator[1]\n                                         ^\n/tmp/tmpqhfcqtgb.swift:33:26:\
    \ error: expected expression in assignment\n        right_operator = operator[2]\n\
    \                         ^\n/tmp/tmpqhfcqtgb.swift:33:34: error: '[' is not allowed\
    \ in operator names\n        right_operator = operator[2]\n                  \
    \               ^\n/tmp/tmpqhfcqtgb.swift:37:27: error: cannot convert value of\
    \ type 'String' to expected argument type 'Int'\n    return left_operand * left_operator\
    \ + right_operand * right_operator\n                          ^\n/tmp/tmpqhfcqtgb.swift:37:59:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return left_operand * left_operator + right_operand * right_operator\n  \
    \                                                        ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i]\n        case \"-\":\n            result -= operand[i]\n        case\
    \ \"*\":\n            result *= operand[i]\n        case \"//\":\n           \
    \ result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmisum4qd.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpmisum4qd.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpmisum4qd.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpmisum4qd.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count != operand.count {\n\
    \        return -1\n    }\n    let operands = [operand]\n    var exp = 1\n   \
    \ operator.forEach {\n        switch it {\n        case \"*\":\n            operands[0].forEach{\n\
    \                exp = exp * $0\n            }\n            break\n        case\
    \ \"/\":\n            operands[0].forEach{\n                exp = exp / $0\n \
    \           }\n            break\n        case \"+\":\n            operands[1].forEach{\n\
    \                exp = exp + $0\n            }\n            break\n        case\
    \ \"-\":\n            operands[1].forEach{\n                exp = exp - $0\n \
    \           }\n            break\n        case \">\":\n            operands[0].forEach{\n\
    \                exp = exp > $0 ? exp * $0 : exp\n            }\n            break\n\
    \        case \"<\":\n            operands[0].forEach{\n                exp =\
    \ exp < $0 ? exp * $0 : exp\n            }\n            break\n        case \"\
    ==\":\n            operands[0].forEach{\n                exp = exp == $0 ? exp\
    \ * $0 : exp\n            }\n            break\n        case \"!=\":\n       \
    \     operands[0].forEach{\n                exp = exp != $0 ? exp * $0 : exp\n\
    \            }\n            break\n        case \"<=\":\n            operands[0].forEach{\n\
    \                exp = exp <= $0 ? exp * $0 : exp\n            }\n           \
    \ break\n        case \"<=\":\n            operands[0].forEach{\n            \
    \    exp = exp >= $0 ? exp * $0 : exp\n            }\n            break\n    \
    \    case \"%\":\n            operands[0].forEach{\n                exp = exp\
    \ % $0 ? exp * $0 : exp\n            }\n            break\n        case \"^\"\
    :\n            operands[0].forEach{\n                exp = exp ** $0 ? exp * $0\
    \ : exp\n            }\n            break\n        case \"~\":\n            operands[0].forEach{\n\
    \                exp = exp ~= $0 ? exp * $0 : exp\n            }\n           \
    \ break\n        default:\n            print(\"Unexpected operator: \" + it)\n\
    \            break\n        }\n    }\n    return exp\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_jfxno42.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count != operand.count {\n       ^\n/tmp/tmp_jfxno42.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count != operand.count\
    \ {\n               ^\n/tmp/tmp_jfxno42.swift:26:13: error: '.' is not allowed\
    \ in operator names\n    operator.forEach {\n            ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Initialize result to 0\n    var result\
    \ = 0\n    \n    // Loop through both arrays in parallel\n    for operandIndex,\
    \ operandValue in operand.enumerated() {\n        // If the current operand value\
    \ is bigger than 0\n        if operandValue > 0 {\n            // For each operator,\
    \ call the function with the operator and the current operand value\n        \
    \    switch operatorIndex {\n                case 0: result += operandValue\n\
    \                case 1: result -= operandValue\n                case 2: result\
    \ *= operandValue\n                case 3: result //= operandValue // This is\
    \ because a Floor division operation always returns an integer\n             \
    \   case 4: result /= operandValue\n                case 5: result **= operandValue\n\
    \            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpy_i1c4vf.swift:25:21: error: expected 'in' after for-each pattern\n\
    \    for operandIndex, operandValue in operand.enumerated() {\n              \
    \      ^\n/tmp/tmpy_i1c4vf.swift:25:21: error: expected Sequence expression for\
    \ for-each loop\n    for operandIndex, operandValue in operand.enumerated() {\n\
    \                    ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    if operator.count\
    \ > 0 && operand.count > 1 {\n        operator.forEach { operator in\n       \
    \     operand.forEach { operand in\n                switch operator {\n      \
    \          case \"+\": result = result + operand\n                case \"-\":\
    \ result = result - operand\n                case \"*\": result = result * operand\n\
    \                case \"//\": result = result / operand\n                case\
    \ \"**\": result = result ** operand\n                default:\n             \
    \   }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpq7yia8_x.swift:22:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count > 0 && operand.count > 1 {\n       ^\n\
    /tmp/tmpq7yia8_x.swift:22:16: error: '.' is not allowed in operator names\n  \
    \  if operator.count > 0 && operand.count > 1 {\n               ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    if operator.count < 1 || operand.count\
    \ < 2 {\n        return -1\n    }\n    \n    var sum : Int = 0\n    var count\
    \ = 0\n    for _ in 0..<operand.count {\n        switch operator[0] {\n      \
    \      case \"+\":\n                sum += operand[count]\n            case \"\
    -\":\n                sum -= operand[count]\n            case \"*\":\n       \
    \         sum *= operand[count]\n            case \"//\":\n                sum\
    \ /= operand[count]\n            case \"**\":\n                sum **= operand[count]\n\
    \            default:\n                return -1\n        }\n        count +=\
    \ 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp8ekt4pkf.swift:22:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count < 1 || operand.count < 2 {\n       ^\n\
    /tmp/tmp8ekt4pkf.swift:22:16: error: '.' is not allowed in operator names\n  \
    \  if operator.count < 1 || operand.count < 2 {\n               ^\n/tmp/tmp8ekt4pkf.swift:29:16:\
    \ error: expected expression in 'switch' statement\n        switch operator[0]\
    \ {\n               ^\n/tmp/tmp8ekt4pkf.swift:29:24: error: '[' is not allowed\
    \ in operator names\n        switch operator[0] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let count = operand.count\n    \n  \
    \  if count == 0 {\n        return 0\n    }\n    \n    let operators = count\n\
    \    \n    var result = 0\n    \n    for index in 0..<operators {\n        let\
    \ operation = operator[index]\n        \n        if operation == \"+\" {\n   \
    \         result = result + operand[index]\n        }\n        else if operation\
    \ == \"-\" {\n            result = result - operand[index]\n        }\n      \
    \  else if operation == \"*\" {\n            result = result * operand[index]\n\
    \        }\n        else if operation == \"/\" {\n            result = result\
    \ / operand[index]\n        }\n        else if operation == \"//\" {\n       \
    \     result = result // operand[index]\n        }\n        else if operation\
    \ == \"**\" {\n            result = result ** operand[index]\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpnim1y268.swift:32:25: error: expected initial value after '='\n\
    \        let operation = operator[index]\n                        ^\n/tmp/tmpnim1y268.swift:32:24:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ operation = operator[index]\n                       ^\n                    \
    \   ;\n/tmp/tmpnim1y268.swift:32:33: error: '[' is not allowed in operator names\n\
    \        let operation = operator[index]\n                                ^\n\
    /tmp/tmpnim1y268.swift:47:20: error: assigning a variable to itself\n        \
    \    result = result // operand[index]\n            ~~~~~~ ^ ~~~~~~\n/tmp/tmpnim1y268.swift:50:29:\
    \ error: cannot find operator '**' in scope\n            result = result ** operand[index]\n\
    \                            ^~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operations = \"\"\n    var result\
    \ = Int(0)\n    for op in operator {\n        operations += \"\\(Int(op))*\"\n\
    \    }\n    for n in operand {\n        let temp = operations.characters.split{$0\
    \ == \"*\"}.count\n        let temp = operations.characters.split{$0 == \"/\"\
    }.count\n        var operation = String(\"\")\n        if temp == 0 {\n      \
    \      operation = String(Int(n))\n        }\n        else if temp == 1 || temp\
    \ == 2 {\n            operation = String(Int(n)) + (operation == \"+\" ? \"-\"\
    \ : \"+\")\n        }\n        else if temp == 3 || temp == 4 {\n            operation\
    \ = String(Int(n)) + (operation == \"+\" ? \"*\" : \"/\")\n        }\n       \
    \ else {\n            operation = String(Int(n)) + (operation == \"+\" ? \"**\"\
    \ : \"/\")\n        }\n        if operation == \"/\" {\n            result = (result\
    \ % Int(n))!\n        }\n        else {\n            switch operation {\n    \
    \        case \"**\":\n                result = Int(pow(Double(n), Double(result)))\n\
    \            default:\n                result = Int(eval(operations, Double(n)))\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbx9dzphx.swift:23:15: error: expected Sequence expression for for-each\
    \ loop\n    for op in operator {\n              ^\n/tmp/tmpbx9dzphx.swift:23:15:\
    \ error: expected '{' to start the body of for-each loop\n    for op in operator\
    \ {\n              ^\n/tmp/tmpbx9dzphx.swift:27:31: error: 'characters' is unavailable:\
    \ Please use String directly\n        let temp = operations.characters.split{$0\
    \ == \"*\"}.count\n                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpbx9dzphx.swift:28:31: error: 'characters'\
    \ is unavailable: Please use String directly\n        let temp = operations.characters.split{$0\
    \ == \"/\"}.count\n                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpbx9dzphx.swift:28:13: error: invalid\
    \ redeclaration of 'temp'\n        let temp = operations.characters.split{$0 ==\
    \ \"/\"}.count\n            ^\n/tmp/tmpbx9dzphx.swift:27:13: note: 'temp' previously\
    \ declared here\n        let temp = operations.characters.split{$0 == \"*\"}.count\n\
    \            ^\n/tmp/tmpbx9dzphx.swift:43:39: error: cannot force unwrap value\
    \ of non-optional type 'Int'\n            result = (result % Int(n))!\n      \
    \               ~~~~~~~~~~~~~~~~~^\n                                      \n/tmp/tmpbx9dzphx.swift:48:30:\
    \ error: cannot find 'pow' in scope\n                result = Int(pow(Double(n),\
    \ Double(result)))\n                             ^~~\n/tmp/tmpbx9dzphx.swift:50:30:\
    \ error: cannot find 'eval' in scope\n                result = Int(eval(operations,\
    \ Double(n)))\n                             ^~~~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Get the operands' length\n    let\
    \ operandLength = operand.count\n    \n    // Initialize result variable and set\
    \ its value to be zero \n    var result = operand[0]\n    \n    // Iterate over\
    \ the operators, and do their corresponding operations\n    for (index, operator)\
    \ in enumeratedArray(operators) {\n        // Get the current operator and operand\n\
    \        let currentOperator = operator\n        let currentOperand = operand[index\
    \ + 1]\n        \n        // Evaluate current operator and operand with current\
    \ result\n        switch currentOperator {\n        case \"+\": result = result\
    \ + currentOperand\n        case \"-\": result = result - currentOperand\n   \
    \     case \"*\": result = result * currentOperand\n        case \"//\": result\
    \ = result // currentOperand\n        case \"**\": result = result ** currentOperand\n\
    \        default: print(\"Error: Unknown operator!\")\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3_p_jiul.swift:28:17: error: expected pattern\n    for (index,\
    \ operator) in enumeratedArray(operators) {\n                ^\n/tmp/tmp3_p_jiul.swift:28:17:\
    \ error: expected 'in' after for-each pattern\n    for (index, operator) in enumeratedArray(operators)\
    \ {\n                ^\n/tmp/tmp3_p_jiul.swift:28:17: error: expected Sequence\
    \ expression for for-each loop\n    for (index, operator) in enumeratedArray(operators)\
    \ {\n                ^\n/tmp/tmp3_p_jiul.swift:28:17: error: expected '{' to start\
    \ the body of for-each loop\n    for (index, operator) in enumeratedArray(operators)\
    \ {\n                ^\n/tmp/tmp3_p_jiul.swift:30:31: error: expected initial\
    \ value after '='\n        let currentOperator = operator\n                  \
    \            ^\n/tmp/tmp3_p_jiul.swift:30:30: error: consecutive statements on\
    \ a line must be separated by ';'\n        let currentOperator = operator\n  \
    \                           ^\n                             ;\n/tmp/tmp3_p_jiul.swift:30:39:\
    \ error: expected operator name in operator declaration\n        let currentOperator\
    \ = operator\n                                      ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return do_operation_on_array(operator,\
    \ operand)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpqfb3gqws.swift:21:34: error: expected expression in list of expressions\n\
    \    return do_operation_on_array(operator, operand)\n                       \
    \          ^\n/tmp/tmpqfb3gqws.swift:21:42: error: ',' is not allowed in operator\
    \ names\n    return do_operation_on_array(operator, operand)\n               \
    \                          ^\n/tmp/tmpqfb3gqws.swift:21:12: error: cannot find\
    \ 'do_operation_on_array' in scope\n    return do_operation_on_array(operator,\
    \ operand)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    \n    for index\
    \ in 0..<(operand.count - 1) {\n        let left_operand = operand[index]\n  \
    \      switch operator[index] {\n            case \"+\":\n                result\
    \ += left_operand\n            case \"-\":\n                result -= left_operand\n\
    \            case \"*\":\n                result *= left_operand\n           \
    \ case \"/\":\n                result /= left_operand\n            case \"^\"\
    :\n                result ^= left_operand\n            case \"**\":\n        \
    \        result *= left_operand\n            default:\n                break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpnyo8wmho.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpnyo8wmho.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count > 2 {\n        return\
    \ -1\n    }\n\n    var result = 0\n\n    var operand_min = operand.min()\n\n \
    \   // Go through the array from left to right\n    for index in 0..<operator.count\
    \ {\n        let op = operator[index]\n        if op == \"-\" {\n            result\
    \ = result - operand_min\n        } else if op == \"+\" {\n            result\
    \ = result + operand_min\n        } else if op == \"*\" {\n            result\
    \ = result * operand_min\n        } else if op == \"//\" {\n            result\
    \ = result // operand_min\n        } else if op == \"**\" {\n            result\
    \ = result ** operand_min\n        }\n\n        operand_min += operand[index]\n\
    \    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpf0hmz_19.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count > 2 {\n       ^\n/tmp/tmpf0hmz_19.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count > 2 {\n \
    \              ^\n/tmp/tmpf0hmz_19.swift:30:22: error: expected expression after\
    \ operator\n    for index in 0..<operator.count {\n                     ^\n/tmp/tmpf0hmz_19.swift:30:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpf0hmz_19.swift:31:18: error: expected initial\
    \ value after '='\n        let op = operator[index]\n                 ^\n/tmp/tmpf0hmz_19.swift:31:17:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ op = operator[index]\n                ^\n                ;\n/tmp/tmpf0hmz_19.swift:31:26:\
    \ error: '[' is not allowed in operator names\n        let op = operator[index]\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0\n\
    \    for _ in 0..<operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i]\n        case \"-\":\n            result\
    \ -= operand[i]\n        case \"*\":\n            result *= operand[i]\n     \
    \   case \"/\":\n            if operand[i] == 0 {\n                return 0\n\
    \            } else {\n                result /= operand[i]\n            }\n \
    \       case \"^\":\n            result **= operand[i]\n        default:\n   \
    \         return -1\n        }\n        i += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp7mzoijq6.swift:23:18: error: expected expression after operator\n\
    \    for _ in 0..<operator.count {\n                 ^\n/tmp/tmp7mzoijq6.swift:23:18:\
    \ error: expected '{' to start the body of for-each loop\n    for _ in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp7mzoijq6.swift:24:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp7mzoijq6.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for i in 0..<operator.count\
    \ {\n        let operator = operator[i]\n        switch operator {\n        case\
    \ \"+\":\n            result += operand[i]\n        case \"-\":\n            result\
    \ -= operand[i]\n        case \"*\":\n            result *= operand[i]\n     \
    \   case \"/\":\n            result /= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result *= operand[i]\n\
    \        default:\n            fatalError()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3hwhetxt.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp3hwhetxt.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp3hwhetxt.swift:23:13: error: keyword 'operator'\
    \ cannot be used as an identifier here\n        let operator = operator[i]\n \
    \           ^\n/tmp/tmp3hwhetxt.swift:23:13: note: if this name is unavoidable,\
    \ use backticks to escape it\n        let operator = operator[i]\n           \
    \ ^~~~~~~~\n            `operator`\n/tmp/tmp3hwhetxt.swift:23:24: error: expected\
    \ initial value after '='\n        let operator = operator[i]\n              \
    \         ^\n/tmp/tmp3hwhetxt.swift:23:23: error: consecutive statements on a\
    \ line must be separated by ';'\n        let operator = operator[i]\n        \
    \              ^\n                      ;\n/tmp/tmp3hwhetxt.swift:23:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[i]\n \
    \                              ^\n/tmp/tmp3hwhetxt.swift:24:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmp3hwhetxt.swift:24:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var total: Int\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            total += operand[i]\n\
    \        case \"-\":\n            total -= operand[i]\n        case \"*\":\n \
    \           total *= operand[i]\n        case \"//\":\n            total = total\
    \ / operand[i]\n        case \"**\":\n            total *= operand[i]\n      \
    \  }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpo2khu0kf.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpo2khu0kf.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpo2khu0kf.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpo2khu0kf.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    switch operator[0] {\n    case \"+\"\
    : return operand[0] + operand[1]\n    case \"-\": return operand[0] - operand[1]\n\
    \    case \"*\": return operand[0] * operand[1]\n    case \"//\": return operand[0]\
    \ // operand[1]\n    case \"**\": return operand[0] ** operand[1]\n    default:\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp10eb1k12.swift:21:12: error: expected expression in 'switch' statement\n\
    \    switch operator[0] {\n           ^\n/tmp/tmp10eb1k12.swift:21:20: error:\
    \ '[' is not allowed in operator names\n    switch operator[0] {\n           \
    \        ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var stack = [Int]()\n\n    for index\
    \ in 0..<operand.count - 1 {\n        switch operator[index] {\n        case \"\
    +\":\n            stack.append(operand[index] + stack[index - 1])\n        case\
    \ \"-\":\n            stack.append(operand[index] - stack[index - 1])\n      \
    \  case \"*\":\n            stack.append(operand[index] * stack[index - 1])\n\
    \        case \"/\":\n            stack.append(operand[index] / stack[index -\
    \ 1])\n        case \"**\":\n            stack.append(operand[index] ** stack[index\
    \ - 1])\n        default:\n            fatalError(\"Unrecognized operator: \\\
    (operator[index])\")\n        }\n    }\n\n    return stack[0]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp7dkdgbpz.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmp7dkdgbpz.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    assert(operator.count > 0)\n    assert(operand.count\
    \ > 1)\n    assert(operator.count >= operand.count - 1)\n    let length = operator.count\
    \ - 1\n    var result = operand[0]\n    for i in 1...length {\n        result\
    \ += (operand[i-1] * operator[i])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpqklsxjah.swift:21:12: error: expected expression in list of expressions\n\
    \    assert(operator.count > 0)\n           ^\n/tmp/tmpqklsxjah.swift:21:20: error:\
    \ '.' is not allowed in operator names\n    assert(operator.count > 0)\n     \
    \              ^\n/tmp/tmpqklsxjah.swift:24:18: error: expected initial value\
    \ after '='\n    let length = operator.count - 1\n                 ^\n/tmp/tmpqklsxjah.swift:24:17:\
    \ error: consecutive statements on a line must be separated by ';'\n    let length\
    \ = operator.count - 1\n                ^\n                ;\n/tmp/tmpqklsxjah.swift:24:26:\
    \ error: '.' is not allowed in operator names\n    let length = operator.count\
    \ - 1\n                         ^\n/tmp/tmpqklsxjah.swift:27:35: error: expected\
    \ expression after operator\n        result += (operand[i-1] * operator[i])\n\
    \                                  ^\n/tmp/tmpqklsxjah.swift:27:43: error: '['\
    \ is not allowed in operator names\n        result += (operand[i-1] * operator[i])\n\
    \                                          ^\n/tmp/tmpqklsxjah.swift:21:11: error:\
    \ missing argument for parameter #1 in call\n    assert(operator.count > 0)\n\
    \          ^\n          <#Bool#>\nSwift.assert:1:13: note: 'assert(_:_:file:line:)'\
    \ declared here\npublic func assert(_ condition: @autoclosure () -> Bool, _ message:\
    \ @autoclosure () -> String = String(), file: StaticString = #file, line: UInt\
    \ = #line)\n            ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    if operator.count\
    \ >= operand.count {\n        let operatorIndex = operator.index(of: operator[0])\n\
    \        let operandIndex = operand.index(of: operand[0])\n        switch operatorIndex\
    \ {\n        case -1:\n            result = operand[operandIndex-1] + operand[operandIndex+1]\n\
    \        case 0:\n            result = operand[operandIndex] * operand[operandIndex+1]\n\
    \        case 1:\n            result = operand[operandIndex] * operand[operandIndex+1]\n\
    \        case 2:\n            result = operand[operandIndex] - operand[operandIndex+1]\n\
    \        case 3:\n            result = operand[operandIndex] / operand[operandIndex+1]\n\
    \        case 4:\n            result = operand[operandIndex] % operand[operandIndex+1]\n\
    \        case 5:\n            result = operand[operandIndex] * operand[operandIndex]\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwmjphmaz.swift:22:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count >= operand.count {\n       ^\n/tmp/tmpwmjphmaz.swift:22:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count >= operand.count\
    \ {\n               ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n\n    for i in 0..<operand.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i]\n        case \"-\":\n            result -= operand[i]\n        case\
    \ \"*\":\n            result *= operand[i]\n        case \"//\":\n           \
    \ result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        default:\n            print(\"The operator is not supported or misconfigured.\"\
    )\n        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3l3kisp0.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmp3l3kisp0.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for (_, operation)\
    \ in zip(operand, operator) {\n        switch operation {\n        case \"+\"\
    : result = result + operand\n        case \"-\": result = result - operand\n \
    \       case \"*\": result = result * operand\n        case \"//\": result = result\
    \ // operand\n        case \"**\": result = result ** operand\n        default:\
    \ break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpyp4s7bps.swift:22:40: error: expected expression in list of expressions\n\
    \    for (_, operation) in zip(operand, operator) {\n                        \
    \               ^\n/tmp/tmpyp4s7bps.swift:22:40: error: expected '{' to start\
    \ the body of for-each loop\n    for (_, operation) in zip(operand, operator)\
    \ {\n                                       ^\n/tmp/tmpyp4s7bps.swift:22:38: error:\
    \ missing argument for parameter #2 in call\n    for (_, operation) in zip(operand,\
    \ operator) {\n                                     ^\n                      \
    \               , <#_#>\nSwift.zip:1:24: note: 'zip' declared here\n@inlinable\
    \ public func zip<Sequence1, Sequence2>(_ sequence1: Sequence1, _ sequence2: Sequence2)\
    \ -> Zip2Sequence<Sequence1, Sequence2> where Sequence1 : Sequence, Sequence2\
    \ : Sequence\n                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    switch operator[0] {\n    case \"+\"\
    :\n        return operand[0] + operand[1]\n    case \"-\":\n        return operand[0]\
    \ - operand[1]\n    case \"*\":\n        return operand[0] * operand[1]\n    case\
    \ \"/\":\n        return operand[0] // operand[1]\n    case \"**\":\n        return\
    \ operand[0] ** operand[1]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp272cbdxc.swift:21:12: error: expected expression in 'switch' statement\n\
    \    switch operator[0] {\n           ^\n/tmp/tmp272cbdxc.swift:21:20: error:\
    \ '[' is not allowed in operator names\n    switch operator[0] {\n           \
    \        ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result : Int = 0\n    var i = 0\n\
    \    var j = 0\n    var operatorString = \"\"\n    \n    // Add the first element\
    \ to result to account for the operator\n    result += operand[0]\n\n    for i\
    \ < operator.count {\n        // Check if the operator string is not empty, since\
    \ the first element will always be added \n        // to the result.\n       \
    \ if operatorString.isEmpty {\n            // Add the current operator to the\
    \ operator string and assign it to the result to account for \n            //\
    \ the operand.\n            operatorString = operator[i]\n            result +=\
    \ operand[j]\n            // Keep going until we hit the length of the operand\
    \ array.\n            while j < operand.count {\n                // Add the current\
    \ element to the result and increment the index\n                result += operand[j]\n\
    \                j += 1\n            }\n            // Stop adding elements since\
    \ we've hit the length of the operand array. \n            break\n        } else\
    \ {\n            // Add an element to the result to account for the next operator.\n\
    \            result += operand[j]\n            // Reset the operator string to\
    \ be used with the next element\n            operatorString = \"\"\n         \
    \   // Increment the index for the next operator\n            j += 1\n       \
    \ }\n    }\n    // Add the last element to the result to account for the last\
    \ operator\n    result += operand[j]\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmph9b9q2_x.swift:29:11: error: expected 'in' after for-each pattern\n\
    \    for i < operator.count {\n          ^\n/tmp/tmph9b9q2_x.swift:29:11: error:\
    \ unary operator cannot be separated from its operand\n    for i < operator.count\
    \ {\n          ^~\n           \n/tmp/tmph9b9q2_x.swift:29:13: error: expected\
    \ Sequence expression for for-each loop\n    for i < operator.count {\n      \
    \      ^\n/tmp/tmph9b9q2_x.swift:29:13: error: expected '{' to start the body\
    \ of for-each loop\n    for i < operator.count {\n            ^\n/tmp/tmph9b9q2_x.swift:35:30:\
    \ error: expected expression in assignment\n            operatorString = operator[i]\n\
    \                             ^\n/tmp/tmph9b9q2_x.swift:35:38: error: '[' is not\
    \ allowed in operator names\n            operatorString = operator[i]\n      \
    \                               ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    // If operand array is empty,\
    \ return 0\n    if operand.count == 0 {return 0}\n    \n    // For each operator,\
    \ do the corresponding operation\n    for index in 0..<operator.count {\n    \
    \    // Get the current operator and the operand\n        let operator = operator[index]\n\
    \        let operand = operand.prefix(index + 1)\n        \n        // Perform\
    \ the operation\n        switch operator {\n        \n        case \"+\": return\
    \ operand + operand.prefix(1)\n        case \"-\": return operand - operand.prefix(1)\n\
    \        case \"*\": return operand * operand.prefix(1)\n        case \"//\":\
    \ return operand // operand.prefix(1)\n        case \"**\": return operand **\
    \ operand.prefix(1)\n        default: return 0\n        }\n    }\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp4d0gu336.swift:26:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp4d0gu336.swift:26:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp4d0gu336.swift:28:13: error: keyword 'operator'\
    \ cannot be used as an identifier here\n        let operator = operator[index]\n\
    \            ^\n/tmp/tmp4d0gu336.swift:28:13: note: if this name is unavoidable,\
    \ use backticks to escape it\n        let operator = operator[index]\n       \
    \     ^~~~~~~~\n            `operator`\n/tmp/tmp4d0gu336.swift:28:24: error: expected\
    \ initial value after '='\n        let operator = operator[index]\n          \
    \             ^\n/tmp/tmp4d0gu336.swift:28:23: error: consecutive statements on\
    \ a line must be separated by ';'\n        let operator = operator[index]\n  \
    \                    ^\n                      ;\n/tmp/tmp4d0gu336.swift:28:32:\
    \ error: '[' is not allowed in operator names\n        let operator = operator[index]\n\
    \                               ^\n/tmp/tmp4d0gu336.swift:32:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmp4d0gu336.swift:32:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n\n    // Basic algebraic\
    \ operations\n    for idx in 0..<operator.count {\n        switch operator[idx]\
    \ {\n        case \"+\": result += operand[idx]\n        case \"-\": result -=\
    \ operand[idx]\n        case \"*\": result *= operand[idx]\n        case \"//\"\
    : result /= operand[idx]\n        case \"**\": result **= operand[idx]\n     \
    \   default: fatalError(\"Invalid operator\")\n        }\n    }\n\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphyspc076.swift:24:20: error: expected expression after operator\n\
    \    for idx in 0..<operator.count {\n                   ^\n/tmp/tmphyspc076.swift:24:20:\
    \ error: expected '{' to start the body of for-each loop\n    for idx in 0..<operator.count\
    \ {\n                   ^\n/tmp/tmphyspc076.swift:25:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[idx] {\n               ^\n/tmp/tmphyspc076.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[idx] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    switch operator.count {\n    case 0:\n\
    \        return operand[0]\n    case 1:\n        switch operator[0] {\n      \
    \  case \"+\": return operand[0] + operand[1]\n        case \"-\": return operand[0]\
    \ - operand[1]\n        case \"*\": return operand[0] * operand[1]\n        case\
    \ \"//\": return operand[0] / operand[1]\n        case \"**\": return operand[0]\
    \ ** operand[1]\n        default:\n            fatalError(\"unknown operator\"\
    )\n        }\n    case 2:\n        switch operator[0] {\n        case \"+\": return\
    \ operand[0] + do_algebra(operator: operator, operand: operand[1:])\n        case\
    \ \"-\": return operand[0] - do_algebra(operator: operator, operand: operand[1:])\n\
    \        case \"*\": return operand[0] * do_algebra(operator: operator, operand:\
    \ operand[1:])\n        case \"//\": return operand[0] // do_algebra(operator:\
    \ operator, operand: operand[1:])\n        case \"**\": return operand[0] ** do_algebra(operator:\
    \ operator, operand: operand[1:])\n        default:\n            fatalError(\"\
    unknown operator\")\n        }\n    default:\n        fatalError(\"unknown operator\"\
    )\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppjh796xn.swift:21:12: error: expected expression in 'switch' statement\n\
    \    switch operator.count {\n           ^\n/tmp/tmppjh796xn.swift:21:20: error:\
    \ '.' is not allowed in operator names\n    switch operator.count {\n        \
    \           ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    if operator.count != operand.count\
    \ - 1 {\n        print(\"operator and operand count not equal\")\n        return\
    \ 0\n    }\n    \n    var res = 0\n    for i in 0..<operator.count {\n       \
    \ let op = operator[i]\n        let a = operand[i..<operand.count]\n        \n\
    \        if op == \"+\"{\n            res = res + a[0] + a[1]\n        }\n   \
    \     else if op == \"-\"{\n            res = res - a[0] + a[1]\n        }\n \
    \       else if op == \"*\"{\n            res = res * a[0] + a[1]\n        }\n\
    \        else if op == \"//\"{\n            res = res / a[0] + a[1]\n        }\n\
    \        else if op == \"**\"{\n            res = res ** a[0] + a[1]\n       \
    \ }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgazy7pys.swift:22:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count != operand.count - 1 {\n       ^\n/tmp/tmpgazy7pys.swift:22:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count != operand.count\
    \ - 1 {\n               ^\n/tmp/tmpgazy7pys.swift:28:18: error: expected expression\
    \ after operator\n    for i in 0..<operator.count {\n                 ^\n/tmp/tmpgazy7pys.swift:28:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpgazy7pys.swift:29:18: error: expected initial\
    \ value after '='\n        let op = operator[i]\n                 ^\n/tmp/tmpgazy7pys.swift:29:17:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ op = operator[i]\n                ^\n                ;\n/tmp/tmpgazy7pys.swift:29:26:\
    \ error: '[' is not allowed in operator names\n        let op = operator[i]\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  // If operand and operator are not the\
    \ same length, throw an error.\n  if operator.count != operand.count {\n    throw\
    \ \"Different number of operands and operators\"\n  }\n\n  // If the length of\
    \ operator is not equal to length of operand, throw an error.\n  if operator.count\
    \ < 1 {\n    throw \"No operators\"\n  }\n\n  // If there is a non-negative number\
    \ in operand, throw an error.\n  if operand.contains { !$0 < 0 } {\n    throw\
    \ \"Negative number\"\n  }\n\n  // Set the result to be the first operand.\n \
    \ var result = operand[0]\n\n  // Get the operators, starting from the second\
    \ operand and working to the first.\n  for var i in 1...operand.count {\n    var\
    \ operator = operator[i]\n\n    // If the operator is '+', add operand i to the\
    \ result.\n    if operator == \"+\" {\n      result += operand[i]\n    }\n\n \
    \   // If the operator is '-', subtract operand i from the result.\n    if operator\
    \ == \"-\" {\n      result -= operand[i]\n    }\n\n    // If the operator is '*',\
    \ multiply operand i by the result.\n    if operator == \"*\" {\n      result\
    \ *= operand[i]\n    }\n\n    // If the operator is '/' divide operand i by the\
    \ result. If operand is zero, \n    // throw an error.\n    if operator == \"\
    /\" {\n      if operand[i] == 0 {\n        throw \"Division by zero\"\n      }\n\
    \n      result /= operand[i]\n    }\n\n    // If the operator is '//', floor divide\
    \ operand i by the result. If operand is zero, \n    // throw an error.\n    if\
    \ operator == \"//\" {\n      if operand[i] == 0 {\n        throw \"Floor division\
    \ by zero\"\n      }\n\n      result /= operand[i]\n    }\n\n    // If the operator\
    \ is '**', raise operand i to the exponent of the result.\n    if operator ==\
    \ \"**\" {\n      result *= operand[i]\n    }\n  }\n\n  // Return the result of\
    \ the algebraic expression.\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpf24dfak3.swift:22:6: error: expected expression, var, or let in\
    \ 'if' condition\n  if operator.count != operand.count {\n     ^\n/tmp/tmpf24dfak3.swift:22:14:\
    \ error: '.' is not allowed in operator names\n  if operator.count != operand.count\
    \ {\n             ^\n/tmp/tmpf24dfak3.swift:27:6: error: expected expression,\
    \ var, or let in 'if' condition\n  if operator.count < 1 {\n     ^\n/tmp/tmpf24dfak3.swift:27:14:\
    \ error: '.' is not allowed in operator names\n  if operator.count < 1 {\n   \
    \          ^\n/tmp/tmpf24dfak3.swift:41:9: error: keyword 'operator' cannot be\
    \ used as an identifier here\n    var operator = operator[i]\n        ^\n/tmp/tmpf24dfak3.swift:41:9:\
    \ note: if this name is unavoidable, use backticks to escape it\n    var operator\
    \ = operator[i]\n        ^~~~~~~~\n        `operator`\n/tmp/tmpf24dfak3.swift:41:20:\
    \ error: expected initial value after '='\n    var operator = operator[i]\n  \
    \                 ^\n/tmp/tmpf24dfak3.swift:41:19: error: consecutive statements\
    \ on a line must be separated by ';'\n    var operator = operator[i]\n       \
    \           ^\n                  ;\n/tmp/tmpf24dfak3.swift:41:28: error: '[' is\
    \ not allowed in operator names\n    var operator = operator[i]\n            \
    \               ^\n/tmp/tmpf24dfak3.swift:44:8: error: expected expression, var,\
    \ or let in 'if' condition\n    if operator == \"+\" {\n       ^\n/tmp/tmpf24dfak3.swift:44:8:\
    \ error: operator must be declared as 'prefix', 'postfix', or 'infix'\n    if\
    \ operator == \"+\" {\n       ^\n/tmp/tmpf24dfak3.swift:44:8: error: 'operator'\
    \ may only be declared at file scope\n    if operator == \"+\" {\n       ^\n/tmp/tmpf24dfak3.swift:49:8:\
    \ error: expected expression, var, or let in 'if' condition\n    if operator ==\
    \ \"-\" {\n       ^\n/tmp/tmpf24dfak3.swift:49:8: error: operator must be declared\
    \ as 'prefix', 'postfix', or 'infix'\n    if operator == \"-\" {\n       ^\n/tmp/tmpf24dfak3.swift:49:8:\
    \ error: 'operator' may only be declared at file scope\n    if operator == \"\
    -\" {\n       ^\n/tmp/tmpf24dfak3.swift:54:8: error: expected expression, var,\
    \ or let in 'if' condition\n    if operator "
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return do_algebra_helper(operator, operand,\
    \ 0, 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdbtm3u5x.swift:21:30: error: expected expression in list of expressions\n\
    \    return do_algebra_helper(operator, operand, 0, 0, 0)\n                  \
    \           ^\n/tmp/tmpdbtm3u5x.swift:21:38: error: ',' is not allowed in operator\
    \ names\n    return do_algebra_helper(operator, operand, 0, 0, 0)\n          \
    \                           ^\n/tmp/tmpdbtm3u5x.swift:21:12: error: cannot find\
    \ 'do_algebra_helper' in scope\n    return do_algebra_helper(operator, operand,\
    \ 0, 0, 0)\n           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count\
    \ - 1 {\n        let operation = operator[index]\n        let value = operand[index]\n\
    \        switch operation {\n        case \"+\":\n            result += value\n\
    \        case \"-\":\n            result -= value\n        case \"*\":\n     \
    \       result *= value\n        case \"/\":\n            result /= value\n  \
    \      case \"//\":\n            result //= value\n        case \"**\":\n    \
    \        result**= value\n        default:\n            print(\"Error: Invalid\
    \ operation - \\(operation).\")\n            return -1\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbo6k4viy.swift:23:25: error: expected initial value after '='\n\
    \        let operation = operator[index]\n                        ^\n/tmp/tmpbo6k4viy.swift:23:24:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ operation = operator[index]\n                       ^\n                    \
    \   ;\n/tmp/tmpbo6k4viy.swift:23:33: error: '[' is not allowed in operator names\n\
    \        let operation = operator[index]\n                                ^\n\
    /tmp/tmpbo6k4viy.swift:37:22: error: consecutive statements on a line must be\
    \ separated by ';'\n            result**= value\n                     ^\n    \
    \                 ;\n/tmp/tmpbo6k4viy.swift:35:13: warning: variable is unused\n\
    \            result //= value\n            ^~~~~~\n/tmp/tmpbo6k4viy.swift:37:19:\
    \ error: cannot find operator '**=' in scope\n            result**= value\n  \
    \                ^~~\n/tmp/tmpbo6k4viy.swift:37:23: warning: expression of type\
    \ 'Int' is unused\n            result**= value\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Write your code here\n    var sum\
    \ = 0\n    operator.reverse()\n    operand.reverse()\n    var sum2 = 0\n    for\
    \ i in 0..<(operand.count-1){\n        switch(operator[i]){\n        case \"+\"\
    :\n            sum += operand[i]\n            break\n        case \"-\":\n   \
    \         sum -= operand[i]\n            break\n        case \"*\":\n        \
    \    sum *= operand[i]\n            break\n        case \"//\":\n            sum2\
    \ /= operand[i]\n            break\n        case \"**\":\n            sum2 = pow(operand[i],\
    \ operand[i])\n            break\n        default:\n            break\n      \
    \  }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpuwt_wskn.swift:23:13: error: '.' is not allowed in operator names\n\
    \    operator.reverse()\n            ^\n/tmp/tmpuwt_wskn.swift:27:16: error: expected\
    \ expression in list of expressions\n        switch(operator[i]){\n          \
    \     ^\n/tmp/tmpuwt_wskn.swift:27:24: error: '[' is not allowed in operator names\n\
    \        switch(operator[i]){\n                       ^\n/tmp/tmpuwt_wskn.swift:22:9:\
    \ warning: variable 'sum' was never mutated; consider changing to 'let' constant\n\
    \    var sum = 0\n    ~~~ ^\n    let\n/tmp/tmpuwt_wskn.swift:25:9: warning: initialization\
    \ of variable 'sum2' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var sum2 = 0\n    ~~~~^~~~\n    _\n/tmp/tmpuwt_wskn.swift:26:9:\
    \ warning: immutable value 'i' was never used; consider replacing with '_' or\
    \ removing it\n    for i in 0..<(operand.count-1){\n        ^\n        _\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    switch operator[0] {\n    case \"+\"\
    :\n        var sum: Int = 0\n        for _ in 0..<operand.count {\n          \
    \  sum += operand[operand.count - 1]\n        }\n        return sum\n    case\
    \ \"-\":\n        var diff: Int = 0\n        for _ in 0..<operand.count {\n  \
    \          diff += operand[operand.count - 1] * -1\n        }\n        return\
    \ diff\n    case \"*\":\n        var product: Int = 0\n        for _ in 0..<operand.count\
    \ {\n            product += operand[operand.count - 1]\n        }\n        return\
    \ product\n    case \"//\":\n        var quotient: Int = 1\n        for _ in 0..<operand.count\
    \ {\n            quotient /= operand[operand.count - 1]\n        }\n        return\
    \ quotient\n    case \"**\":\n        var exp: Int = 1\n        for _ in 0..<operand.count\
    \ {\n            exp += 1\n        }\n        return exp\n    }\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfwmxeea1.swift:21:12: error: expected expression in 'switch' statement\n\
    \    switch operator[0] {\n           ^\n/tmp/tmpfwmxeea1.swift:21:20: error:\
    \ '[' is not allowed in operator names\n    switch operator[0] {\n           \
    \        ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var sum = 0;\n    for index in 0..<operand.count\
    \ {\n        let a = operand[index] \n        let b = operator[operand.count -\
    \ 1 - index];\n        let c = a + b\n        sum += c;\n    }\n    return sum;\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaan3m_96.swift:24:17: error: expected initial value after '='\n\
    \        let b = operator[operand.count - 1 - index];\n                ^\n/tmp/tmpaan3m_96.swift:24:16:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ b = operator[operand.count - 1 - index];\n               ^\n               ;\n\
    /tmp/tmpaan3m_96.swift:24:25: error: '[' is not allowed in operator names\n  \
    \      let b = operator[operand.count - 1 - index];\n                        ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    guard operator.count != operand.count\
    \ else { return 0 }\n\n    var result = 0\n\n    var op = 0\n    var n = 0\n \
    \   var opr = 0\n    var oprs = 0\n    var oprs2 = 0\n\n    while op < operator.count\
    \ {\n        let a = operand[op]\n        var b = 0\n\n        guard operand[op]\
    \ == a else { return 0 }\n\n        while opr < operand.count {\n            n\
    \ += 1\n            if operand[opr] == a {\n                b += 1\n         \
    \       opr += 1\n            }\n            else {\n                break\n \
    \           }\n        }\n\n        if n == 1 {\n            result += operand[opr]\
    \ * operand[oprs]\n            n += 1\n        }\n\n        if n == 2 { // If\
    \ n == 2, then it's double addition\n            opr += 1\n            result\
    \ += operand[opr] * operand[oprs2]\n            n += 1\n        }\n\n        if\
    \ n == 3 { // If n == 3, then it's double subtraction\n            oprs += opr\n\
    \            result += operand[oprs] * operand[oprs2]\n            oprs -= 1\n\
    \            oprs2 += 1\n        }\n\n        if n == 4 { // If n == 4, then it's\
    \ double multiplication\n            oprs += opr\n            oprs += opr\n  \
    \          result += operand[oprs] * operand[oprs2]\n            oprs -= 1\n \
    \           oprs2 += 1\n        }\n\n        if n == 5 { // If n == 5. then it's\
    \ double division\n            oprs += opr\n            result += operand[oprs]\n\
    \            oprs -= 1\n        }\n\n        if n == 6 { // If n == 6, then it's\
    \ double exponentiation\n            oprs += opr\n            oprs += opr\n  \
    \          result += operand[oprs]\n            oprs -= 1\n        }\n\n     \
    \   op += 1\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvj5rk_k1.swift:21:11: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard operator.count != operand.count else { return\
    \ 0 }\n          ^\n/tmp/tmpvj5rk_k1.swift:21:19: error: '.' is not allowed in\
    \ operator names\n    guard operator.count != operand.count else { return 0 }\n\
    \                  ^\n/tmp/tmpvj5rk_k1.swift:31:16: error: expected expression\
    \ after operator\n    while op < operator.count {\n               ^\n/tmp/tmpvj5rk_k1.swift:31:24:\
    \ error: '.' is not allowed in operator names\n    while op < operator.count {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n\n    for index in 0..<operand.count\
    \ {\n        var operandIndex = index\n        var operatorIndex = 0\n       \
    \ for _ in 0..<operator.count {\n            switch operator[operatorIndex] {\n\
    \            case \"+\": result += operand[operandIndex]\n            case \"\
    -\": result -= operand[operandIndex]\n            case \"*\": result *= operand[operandIndex]\n\
    \            case \"//\": result /= operand[operandIndex]\n            case \"\
    **\": result **= operand[operandIndex]\n            default:\n               \
    \ break\n            }\n            operandIndex++\n            operatorIndex++\n\
    \        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp7f0rltei.swift:26:22: error: expected expression after operator\n\
    \        for _ in 0..<operator.count {\n                     ^\n/tmp/tmp7f0rltei.swift:26:22:\
    \ error: expected '{' to start the body of for-each loop\n        for _ in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp7f0rltei.swift:27:20: error: expected expression\
    \ in 'switch' statement\n            switch operator[operatorIndex] {\n      \
    \             ^\n/tmp/tmp7f0rltei.swift:27:28: error: '[' is not allowed in operator\
    \ names\n            switch operator[operatorIndex] {\n                      \
    \     ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Write your code here\n    var res\
    \ = operand[0]\n    for i in 1..<operand.count {\n        var oper = operator[0]\n\
    \        for j in 0..<operator.count {\n            oper = oper+operator[j]\n\
    \        }\n        res += operand[i]*oper\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptnu2sedj.swift:24:20: error: expected initial value after '='\n\
    \        var oper = operator[0]\n                   ^\n/tmp/tmptnu2sedj.swift:24:19:\
    \ error: consecutive statements on a line must be separated by ';'\n        var\
    \ oper = operator[0]\n                  ^\n                  ;\n/tmp/tmptnu2sedj.swift:24:28:\
    \ error: '[' is not allowed in operator names\n        var oper = operator[0]\n\
    \                           ^\n/tmp/tmptnu2sedj.swift:25:22: error: expected expression\
    \ after operator\n        for j in 0..<operator.count {\n                    \
    \ ^\n/tmp/tmptnu2sedj.swift:25:22: error: expected '{' to start the body of for-each\
    \ loop\n        for j in 0..<operator.count {\n                     ^\n/tmp/tmptnu2sedj.swift:26:25:\
    \ error: expected expression after operator\n            oper = oper+operator[j]\n\
    \                        ^\n/tmp/tmptnu2sedj.swift:26:33: error: '[' is not allowed\
    \ in operator names\n            oper = oper+operator[j]\n                   \
    \             ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for idx in 0..<operator.count\
    \ {\n        let operation = operator[idx]\n        let operand1 = operand[idx\
    \ > 0 ? idx - 1 : idx]\n        let operand2 = operand[idx > 1 ? idx - 1 : idx]\n\
    \        switch (operation) {\n        case \"+\":\n            result += operand1\n\
    \        case \"-\":\n            result -= operand1\n        case \"*\":\n  \
    \          result *= operand1\n        case \"//\":\n            result /= operand1\n\
    \        case \"**\":\n            result = (operand1 ** operand2)\n        default:\n\
    \            fatalError(\"Unsupported operation\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpknzajujz.swift:22:20: error: expected expression after operator\n\
    \    for idx in 0..<operator.count {\n                   ^\n/tmp/tmpknzajujz.swift:22:20:\
    \ error: expected '{' to start the body of for-each loop\n    for idx in 0..<operator.count\
    \ {\n                   ^\n/tmp/tmpknzajujz.swift:23:25: error: expected initial\
    \ value after '='\n        let operation = operator[idx]\n                   \
    \     ^\n/tmp/tmpknzajujz.swift:23:24: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operation = operator[idx]\n          \
    \             ^\n                       ;\n/tmp/tmpknzajujz.swift:23:33: error:\
    \ '[' is not allowed in operator names\n        let operation = operator[idx]\n\
    \                                ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operator_count = operator.count\n\
    \    var operand1 = operand.first!\n    var operand2 = operand.last!\n    \n \
    \   guard operator != nil && operand != nil else {\n        return 0\n    }\n\
    \    \n    let (operator, operand) = operator.first!, operand.first!\n    \n \
    \   if operator == nil { // No operator given\n        return 0\n    }\n    \n\
    \    if operand == nil { // No operand given\n        return 0\n    }\n    \n\
    \    let operator_index = operator.index\n    \n    if operator_index >= operand1.count\
    \ { // operator is out of range \n        return 0\n    }\n    \n    if operator_index\
    \ >= operand2.count { // operand is out of range \n        return 0\n    }\n \
    \   \n    if operand1[operator_index] < 0 { // operand is negative\n        return\
    \ 0\n    }\n    \n    if operand2[operator_index] < 0 { // operator is negative\n\
    \        return 0\n    }\n    \n    if operand1[operator_index] == operand2[operator_index]\
    \ { // same operands\n        return 0\n    }\n    \n    if operator_index ==\
    \ operand1.count - 1 { // operand is last item\n        return operand1[operator_index]\
    \ + do_algebra(operator: operator, operand: operand1.dropFirst())\n    }\n   \
    \ \n    if operator_index == operand2.count - 1 { // operator is last item\n \
    \       return do_algebra(operator: operator, operand: operand2.dropFirst()) +\
    \ operand1[operator_index]\n    }\n    \n    if operand1[operator_index] == operand2[operator_index]\
    \ && operand1[operator_index] > operand2[operator_index] { // commutative\n  \
    \      return do_algebra(operator: operator, operand: operand1) + do_algebra(operator:\
    \ operator, operand: operand2)\n    }\n    \n    // non-commutative\n    if operand1[operator_index]\
    \ > operand2[operator_index] {\n        let temp = operand2\n        operand2\
    \ = operand1\n        operand1 = temp\n    }\n    \n    let operand11 = operand1.dropFirst()\n\
    \    let operand21 = operand2.dropFirst()\n    \n    if operator_index == 0 {\n\
    \        return do_algebra(operator: operator, operand: operand1) + do_algebra(operator:\
    \ operator, operand: operand21)\n    } else if operator_index == operand1.count\
    \ - 1 {\n        return do_algebra(operator: operator, operand: operand21) + do_algebra(operator:\
    \ operator, operand: operand1)\n    } else {\n        return do_algebra(operator:\
    \ operator, operand: operand1) + do_algebra(operator: operator, operand: operand21)\
    \ + do_algebra(operator: operator, operand: operand2)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1olh1dpg.swift:21:26: error: expected initial value after '='\n\
    \    var operator_count = operator.count\n                         ^\n/tmp/tmp1olh1dpg.swift:21:25:\
    \ error: consecutive statements on a line must be separated by ';'\n    var operator_count\
    \ = operator.count\n                        ^\n                        ;\n/tmp/tmp1olh1dpg.swift:21:34:\
    \ error: '.' is not allowed in operator names\n    var operator_count = operator.count\n\
    \                                 ^\n/tmp/tmp1olh1dpg.swift:25:11: error: expected\
    \ expression, var, let or case in 'guard' condition\n    guard operator != nil\
    \ && operand != nil else {\n          ^\n/tmp/tmp1olh1dpg.swift:25:11: error:\
    \ operator must be declared as 'prefix', 'postfix', or 'infix'\n    guard operator\
    \ != nil && operand != nil else {\n          ^\n/tmp/tmp1olh1dpg.swift:25:11:\
    \ error: 'operator' may only be declared at file scope\n    guard operator !=\
    \ nil && operand != nil else {\n          ^\n/tmp/tmp1olh1dpg.swift:29:10: error:\
    \ expected pattern\n    let (operator, operand) = operator.first!, operand.first!\n\
    \         ^\n/tmp/tmp1olh1dpg.swift:29:10: error: consecutive statements on a\
    \ line must be separated by ';'\n    let (operator, operand) = operator.first!,\
    \ operand.first!\n         ^\n         ;\n/tmp/tmp1olh1dpg.swift:29:18: error:\
    \ ',' is not allowed in operator names\n    let (operator, operand) = operator.first!,\
    \ operand.first!\n                 ^\n/tmp/tmp1olh1dpg.swift:29:39: error: '.'\
    \ is not allowed in operator names\n    let (operator, operand) = operator.first!,\
    \ operand.first!\n                                      ^\n/tmp/tmp1olh1dpg.swift:31:8:\
    \ error: expected expression, var, or let in 'if' condition\n    if operator ==\
    \ nil { // No operator given\n       ^\n/tmp/tmp1olh1dpg.swift:31:8: error: operator\
    \ must be declared as 'prefix', 'postfix', or 'infix'\n    if operator == nil\
    \ { // No operator given\n       ^\n/tmp/tmp1olh1dpg.swift:31:8: error: 'operator'\
    \ may only be declared at file scope\n    if operator == nil { // No operator\
    \ given\n       ^\n/tmp/tmp1olh1dpg.swift:39:26: error: expe"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count != operand.count -\
    \ 1 {\n        fatalError(\"Invalid Input. Operator and Operand arrays have different\
    \ lengths.\")\n    }\n    var result: Int = 0\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    /\":\n            result = result / operand[i]\n        case \"**\":\n       \
    \     result = result ** operand[i]\n        default:\n            fatalError(\"\
    Invalid Input. Invalid operator.\")\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmper4eqmf_.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count != operand.count - 1 {\n       ^\n/tmp/tmper4eqmf_.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count != operand.count\
    \ - 1 {\n               ^\n/tmp/tmper4eqmf_.swift:25:18: error: expected expression\
    \ after operator\n    for i in 0..<operator.count {\n                 ^\n/tmp/tmper4eqmf_.swift:25:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmper4eqmf_.swift:26:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmper4eqmf_.swift:26:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    assert(operand.count >= 2)\n\n    var\
    \ op: Int = 0\n    switch operator[0] {\n    case \"+\":\n        op = operand[0]\
    \ + operand[1]\n    case \"-\":\n        op = operand[0] - operand[1]\n    case\
    \ \"*\":\n        op = operand[0] * operand[1]\n    case \"/\":\n        op =\
    \ operand[0] / operand[1]\n    case \"%\":\n        op = operand[0] % operand[1]\n\
    \    case \"//\":\n        op = operand[0] / operand[1]\n    case \"**\":\n  \
    \      op = operand[0] ** operand[1]\n    default:\n        fatalError(\"unknown\
    \ operator \\(operator[0])\")\n    }\n\n    // For the last element of operand\
    \ array\n    if operand.count > 1 {\n        op = op * operand.last!\n    }\n\n\
    \    return op\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmps010mqjp.swift:24:12: error: expected expression in 'switch' statement\n\
    \    switch operator[0] {\n           ^\n/tmp/tmps010mqjp.swift:24:20: error:\
    \ '[' is not allowed in operator names\n    switch operator[0] {\n           \
    \        ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var sum = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\": sum += operand[index]\n\
    \        case \"-\": sum -= operand[index]\n        case \"*\": sum *= operand[index]\n\
    \        case \"//\": sum /= operand[index]\n        case \"**\": sum *= operand[index]\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp8yzmdil3.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp8yzmdil3.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp8yzmdil3.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmp8yzmdil3.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    var result: Int = 0\n    \n  \
    \  var i = 0\n    var j = operator.count - 1\n    var k = 0\n    \n    while ((i\
    \ < operand.count) && (j < operator.count)) {\n        \n        let leftOperand\
    \ = operand[i]\n        let rightOperand = operand[j]\n        \n        if (i\
    \ < operator.count) {\n            \n            let operator = operator[j]\n\
    \            \n            if ((leftOperand == 0) && (operator == \"+\")) {\n\
    \                result = result + (rightOperand + 0)\n                i++\n \
    \           } else if ((leftOperand == 0) && (operator == \"-\")) {\n        \
    \        result = result - (rightOperand + 0)\n                i++\n         \
    \   } else if ((leftOperand == 0) && (operator == \"*\")) {\n                result\
    \ = result * (rightOperand + 0)\n                i++\n            } else if (((leftOperand\
    \ > 0) || (leftOperand == 0) && (operator == \"//\")) && (rightOperand == 0))\
    \ {\n                result = result / leftOperand\n                i++\n    \
    \        } else if ((leftOperand > 0) && (rightOperand > 0) && operator == \"\
    **\") {\n                result = result * (rightOperand + 0)\n              \
    \  i++\n            } else {\n                result = result * rightOperand\n\
    \                k++\n            }\n        }\n        \n        else {\n   \
    \         \n            if (((leftOperand > 0) && (rightOperand > 0) && operator\
    \ == \"**\") || (leftOperand < 0) && (rightOperand < 0) && (operator == \"**\"\
    )) {\n                \n                result = result * (rightOperand + 0)\n\
    \                k++\n            }\n            \n            if ((leftOperand\
    \ > 0) && operator == \"**\") {\n                result = result * leftOperand\n\
    \                i++\n            }\n            \n            if ((rightOperand\
    \ > 0) && operator == \"**\") {\n                result = result * rightOperand\n\
    \                j++\n            }\n            \n            if ((leftOperand\
    \ > 0) && (rightOperand > 0) && (operator == \"//\")) {\n                result\
    \ = result / leftOperand\n                i++\n                j++\n         \
    \   }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp8qsw6cf1.swift:25:13: error: expected initial value after '='\n\
    \    var j = operator.count - 1\n            ^\n/tmp/tmp8qsw6cf1.swift:25:12:\
    \ error: consecutive statements on a line must be separated by ';'\n    var j\
    \ = operator.count - 1\n           ^\n           ;\n/tmp/tmp8qsw6cf1.swift:25:21:\
    \ error: '.' is not allowed in operator names\n    var j = operator.count - 1\n\
    \                    ^\n/tmp/tmp8qsw6cf1.swift:28:40: error: expected expression\
    \ after operator\n    while ((i < operand.count) && (j < operator.count)) {\n\
    \                                       ^\n/tmp/tmp8qsw6cf1.swift:28:48: error:\
    \ '.' is not allowed in operator names\n    while ((i < operand.count) && (j <\
    \ operator.count)) {\n                                               ^\n/tmp/tmp8qsw6cf1.swift:28:35:\
    \ error: cannot convert value of type '()' to expected argument type 'Bool'\n\
    \    while ((i < operand.count) && (j < operator.count)) {\n                 \
    \                 ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // write your code here\n    let operands\
    \ = operand.count - 1\n    let operators = operator.count - 1\n    return operands[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp0onoe0dn.swift:23:21: error: expected initial value after '='\n\
    \    let operators = operator.count - 1\n                    ^\n/tmp/tmp0onoe0dn.swift:23:20:\
    \ error: consecutive statements on a line must be separated by ';'\n    let operators\
    \ = operator.count - 1\n                   ^\n                   ;\n/tmp/tmp0onoe0dn.swift:23:29:\
    \ error: '.' is not allowed in operator names\n    let operators = operator.count\
    \ - 1\n                            ^\n/tmp/tmp0onoe0dn.swift:24:20: error: value\
    \ of type 'Int' has no subscripts\n    return operands[0]\n           ~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var stack = [Int]()\n    var output\
    \ = [Int]()\n    stack.insert(0)\n    output.insert(0)\n\n    for _ in 0..<operand.count-1\
    \ {\n        let op = operator[stack.count-1]\n        let operand1 = operand[stack.count-2]\n\
    \        let operand2 = operand[stack.count-1]\n        let operand3 = operand[stack.count]\n\
    \n        if op == \"+\"{\n            stack.append(operand1 + operand2)\n   \
    \     } else if op == \"-\"{\n            stack.append(operand1 - operand2)\n\
    \        } else if op == \"*\"{\n            stack.append(operand1 * operand2)\n\
    \        } else if op == \"//\"{\n            stack.append(operand2 // operand1)\n\
    \        } else if op == \"**\"{\n            stack.append(operand1 ** operand2)\n\
    \        }\n    }\n    return stack[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmps6r4l16j.swift:27:18: error: expected initial value after '='\n\
    \        let op = operator[stack.count-1]\n                 ^\n/tmp/tmps6r4l16j.swift:27:17:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ op = operator[stack.count-1]\n                ^\n                ;\n/tmp/tmps6r4l16j.swift:27:26:\
    \ error: '[' is not allowed in operator names\n        let op = operator[stack.count-1]\n\
    \                         ^\n/tmp/tmps6r4l16j.swift:40:9: error: expected ')'\
    \ in expression list\n        } else if op == \"**\"{\n        ^\n/tmp/tmps6r4l16j.swift:39:25:\
    \ note: to match this opening '('\n            stack.append(operand2 // operand1)\n\
    \                        ^\n/tmp/tmps6r4l16j.swift:23:19: error: missing argument\
    \ for parameter 'at' in call\n    stack.insert(0)\n                  ^\n     \
    \             , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared\
    \ here\n    @inlinable public mutating func insert(_ newElement: __owned Element,\
    \ at i: Int)\n                                    ^\n/tmp/tmps6r4l16j.swift:24:20:\
    \ error: missing argument for parameter 'at' in call\n    output.insert(0)\n \
    \                  ^\n                   , at: <#Int#>\nSwift.Array:11:37: note:\
    \ 'insert(_:at:)' declared here\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\n/tmp/tmps6r4l16j.swift:41:35: error: cannot find operator '**' in scope\n\
    \            stack.append(operand1 ** operand2)\n                            \
    \      ^~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ = result + operand[index]\n        case \"-\":\n            result = result\
    \ - operand[index]\n        case \"*\":\n            result = result * operand[index]\n\
    \        case \"//\":\n            result = result / operand[index]\n        case\
    \ \"**\":\n            result = result ** operand[index]\n        default:\n \
    \           fatalError(\"Error: Unsupported operator: \\(operator[index])\")\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmi_7o964.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpmi_7o964.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpmi_7o964.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpmi_7o964.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    let result = operand[0]\n    if\
    \ operator.count >= 2 {\n        for i in 1..<operator.count {\n            if\
    \ operator[i] == \"+\"{\n                result += operand[i]\n            }else\
    \ if operator[i] == \"-\"{\n                result -= operand[i]\n           \
    \ }else if operator[i] == \"*\"{\n                result *= operand[i]\n     \
    \       }else if operator[i] == \"//\"{\n                result /= operand[i]\n\
    \            }else if operator[i] == \"**\"{\n                result **= operand[i]\n\
    \            }\n        }\n    }\n    return Int(result)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprkqa8ilm.swift:23:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count >= 2 {\n       ^\n/tmp/tmprkqa8ilm.swift:23:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count >= 2 {\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var operator_index\
    \ = 0\n    \n    while operator_index < operator.count {\n        switch operator[operator_index]\
    \ {\n        case \"+\":\n            result = result + operand[operator_index\
    \ + 2]\n        case \"-\":\n            result = result - operand[operator_index\
    \ + 2]\n        case \"*\":\n            result = result * operand[operator_index\
    \ + 2]\n        case \"//\":\n            result = result / operand[operator_index\
    \ + 2]\n        case \"**\":\n            result = result ** operand[operator_index\
    \ + 2]\n        default:\n            assert(false, \"Unknown operator: \\(operator[operator_index])\"\
    )\n        }\n        \n        operator_index += 1\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpyorbwx79.swift:24:28: error: expected expression after operator\n\
    \    while operator_index < operator.count {\n                           ^\n/tmp/tmpyorbwx79.swift:24:36:\
    \ error: '.' is not allowed in operator names\n    while operator_index < operator.count\
    \ {\n                                   ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for _ in 0 ..< operator.count\
    \ {\n        var operand1 = operand.first\n        var operand2 = operand.second\n\
    \        let oper = operator[operator.index(operand1, operand2)]\n        if oper\
    \ == \"+\"{\n            result += operand1\n        }else if oper == \"-\"{\n\
    \            result -= operand1\n        }else if oper == \"*\"{\n           \
    \ result *= operand1\n        }else if oper == \"//\"{\n            result /=\
    \ operand1\n        }else if oper == \"**\"{\n            result**=operand1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmplufw3gd0.swift:22:20: error: expected expression after operator\n\
    \    for _ in 0 ..< operator.count {\n                   ^\n/tmp/tmplufw3gd0.swift:22:20:\
    \ error: expected '{' to start the body of for-each loop\n    for _ in 0 ..< operator.count\
    \ {\n                   ^\n/tmp/tmplufw3gd0.swift:25:20: error: expected initial\
    \ value after '='\n        let oper = operator[operator.index(operand1, operand2)]\n\
    \                   ^\n/tmp/tmplufw3gd0.swift:25:19: error: consecutive statements\
    \ on a line must be separated by ';'\n        let oper = operator[operator.index(operand1,\
    \ operand2)]\n                  ^\n                  ;\n/tmp/tmplufw3gd0.swift:25:28:\
    \ error: '[' is not allowed in operator names\n        let oper = operator[operator.index(operand1,\
    \ operand2)]\n                           ^\n/tmp/tmplufw3gd0.swift:24:32: error:\
    \ value of type '[Int]' has no member 'second'\n        var operand2 = operand.second\n\
    \                       ~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var res = 0\n\n    for operator in operator\
    \ {\n        switch operator {\n        case \"+\": res = res + operand[1] //\
    \ ADD\n        case \"-\": res = res - operand[1] // SUB\n        case \"*\":\
    \ res = res * operand[1] // MUL\n        case \"//\": res = res / operand[1] //\
    \ DIV\n        case \"**\": res = res ** operand[1] // EXP\n        default: fatalError(\"\
    Not supported operator\")\n        }\n        operand.remove(at: 1)\n    }\n\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpw_5ra_f8.swift:23:9: error: expected pattern\n    for operator\
    \ in operator {\n        ^\n/tmp/tmpw_5ra_f8.swift:23:9: error: expected Sequence\
    \ expression for for-each loop\n    for operator in operator {\n        ^\n/tmp/tmpw_5ra_f8.swift:23:9:\
    \ error: expected '{' to start the body of for-each loop\n    for operator in\
    \ operator {\n        ^\n/tmp/tmpw_5ra_f8.swift:24:16: error: expected expression\
    \ in 'switch' statement\n        switch operator {\n               ^\n/tmp/tmpw_5ra_f8.swift:24:25:\
    \ error: expected operator name in operator declaration\n        switch operator\
    \ {\n                        ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var total: Int = 0\n    if operator.count\
    \ != operand.count {\n        print(\"Error! Operator and operand must have the\
    \ same length.\")\n        return -1\n    }\n    if operator.count == 1 {\n  \
    \      total = operand[0]\n    } else {\n        total = operand[0] * operand[operator.count\
    \ - 1]\n    }\n    for _ in 0..<operator.count - 1 {\n        total += operand[operator.count\
    \ - 1] * operator[operator.count - 2]\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpi_upte5w.swift:22:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count != operand.count {\n       ^\n/tmp/tmpi_upte5w.swift:22:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count != operand.count\
    \ {\n               ^\n/tmp/tmpi_upte5w.swift:26:8: error: expected expression,\
    \ var, or let in 'if' condition\n    if operator.count == 1 {\n       ^\n/tmp/tmpi_upte5w.swift:26:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count == 1 {\n\
    \               ^\n/tmp/tmpi_upte5w.swift:31:18: error: expected expression after\
    \ operator\n    for _ in 0..<operator.count - 1 {\n                 ^\n/tmp/tmpi_upte5w.swift:31:18:\
    \ error: expected '{' to start the body of for-each loop\n    for _ in 0..<operator.count\
    \ - 1 {\n                 ^\n/tmp/tmpi_upte5w.swift:32:26: error: expected expression\
    \ in list of expressions\n        total += operand[operator.count - 1] * operator[operator.count\
    \ - 2]\n                         ^\n/tmp/tmpi_upte5w.swift:32:34: error: '.' is\
    \ not allowed in operator names\n        total += operand[operator.count - 1]\
    \ * operator[operator.count - 2]\n                                 ^\n/tmp/tmpi_upte5w.swift:32:56:\
    \ error: '[' is not allowed in operator names\n        total += operand[operator.count\
    \ - 1] * operator[operator.count - 2]\n                                      \
    \                 ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.isEmpty || operand.isEmpty\
    \ {\n        return 0\n    }\n    \n    let len = operator.count - 1\n    var\
    \ result = 0\n    for i in 0 ..< len {\n        switch operator[i] {\n       \
    \ case \"+\":\n            result += operand[i]\n        case \"-\":\n       \
    \     result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n\
    \        case \"//\":\n            result /= operand[i]\n        case \"^\":\n\
    \            result **= operand[i]\n        default:\n            break\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp0j_6u3uz.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.isEmpty || operand.isEmpty {\n       ^\n/tmp/tmp0j_6u3uz.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.isEmpty || operand.isEmpty\
    \ {\n               ^\n/tmp/tmp0j_6u3uz.swift:25:15: error: expected initial value\
    \ after '='\n    let len = operator.count - 1\n              ^\n/tmp/tmp0j_6u3uz.swift:25:14:\
    \ error: consecutive statements on a line must be separated by ';'\n    let len\
    \ = operator.count - 1\n             ^\n             ;\n/tmp/tmp0j_6u3uz.swift:25:23:\
    \ error: '.' is not allowed in operator names\n    let len = operator.count -\
    \ 1\n                      ^\n/tmp/tmp0j_6u3uz.swift:28:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp0j_6u3uz.swift:28:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tswitch operator.count {\n\tcase 0:\n\t\
    \tfatalError(\"Operator array must have at least one operator.\")\n\tcase 1:\n\
    \t\tswitch operand.count {\n\t\tcase 1:\n\t\t\treturn operand[0]\n\t\tcase 0:\n\
    \t\t\tfatalError(\"Operand array must have at least two operands.\")\n\t\t}\n\t\
    default:\n\t\tfatalError(\"Operator array must have no more than one operator.\"\
    )\n\t}\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpd_7kuxkf.swift:21:9: error: expected expression in 'switch' statement\n\
    \        switch operator.count {\n               ^\n/tmp/tmpd_7kuxkf.swift:21:17:\
    \ error: '.' is not allowed in operator names\n        switch operator.count {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    var sum : Int = 0\n    var ops\
    \ : [Int] = []\n    for i in 0..<operator.count {\n        sum += operand[i]\n\
    \        ops.append(operand[i])\n    }\n    \n    for j in 0..<operator.count\
    \ {\n        var op : String = operator[j]\n        switch op {\n        case\
    \ \"+\": sum = sum + ops[j];\n        case \"-\": sum = sum - ops[j];\n      \
    \  case \"*\": sum = sum * ops[j];\n        case \"//\": sum = sum / ops[j];\n\
    \        case \"**\": sum = sum ** ops[j];\n        }\n    }\n    \n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"\
    **\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprruemqyx.swift:24:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmprruemqyx.swift:24:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmprruemqyx.swift:29:18: error: expected expression\
    \ after operator\n    for j in 0..<operator.count {\n                 ^\n/tmp/tmprruemqyx.swift:29:18:\
    \ error: expected '{' to start the body of for-each loop\n    for j in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmprruemqyx.swift:30:27: error: expected initial\
    \ value after '='\n        var op : String = operator[j]\n                   \
    \       ^\n/tmp/tmprruemqyx.swift:30:26: error: consecutive statements on a line\
    \ must be separated by ';'\n        var op : String = operator[j]\n          \
    \               ^\n                         ;\n/tmp/tmprruemqyx.swift:30:35: error:\
    \ '[' is not allowed in operator names\n        var op : String = operator[j]\n\
    \                                  ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\t\n\t// your code here\n\t\n\treturn 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp10exkwy1/tmp10exkwy1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada63bf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada638eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada638ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada638ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10exkwy1                        0x0000562a6048247b <unavailable> + 5243

    5    libc.so.6                          0x00002ada63de3460 __libc_start_main +
    245

    6    tmp10exkwy1                        0x0000562a60482029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    \n    if operand.count\
    \ < 2 {\n        fatalError(\"Invalid operand array length\")\n    }\n    \n \
    \   if operator.count < 1 {\n        fatalError(\"Invalid operator array length\"\
    )\n    }\n    \n    for _ in 0..<operand.count {\n        switch operator[0] {\n\
    \        case \"+\":\n            result += operand[0]\n        case \"-\":\n\
    \            result -= operand[0]\n        case \"*\":\n            result *=\
    \ operand[0]\n        case \"/\":\n            if operand[0] != 0 {\n        \
    \        result = result / operand[0]\n            } else {\n                fatalError(\"\
    Division by 0\")\n            }\n        case \"**\":\n            if operand[0]\
    \ == 0 {\n                fatalError(\"Division by 0\")\n            } else {\n\
    \                result = result ** operand[0]\n            }\n        default:\n\
    \            fatalError(\"Unknown operator\")\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdci2zgp7.swift:27:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count < 1 {\n       ^\n/tmp/tmpdci2zgp7.swift:27:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count < 1 {\n \
    \              ^\n/tmp/tmpdci2zgp7.swift:32:16: error: expected expression in\
    \ 'switch' statement\n        switch operator[0] {\n               ^\n/tmp/tmpdci2zgp7.swift:32:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[0] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for idx\
    \ in 0..<operand.count - 1 {\n        if operator[idx] == \"\" {\n           \
    \ result = result\n        } else {\n            switch operator[idx] {\n    \
    \        case \"+\": result = result + operand[idx+1]\n            case \"-\"\
    : result = result - operand[idx+1]\n            case \"*\": result = result *\
    \ operand[idx+1]\n            case \"//\": result = result / operand[idx+1]\n\
    \            case \"**\": result = result ** operand[idx+1]\n            default:\
    \ print(\"invalid operator in input: \\(operator[idx])\")\n            }\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpihptrjey.swift:23:12: error: expected expression, var, or let in\
    \ 'if' condition\n        if operator[idx] == \"\" {\n           ^\n/tmp/tmpihptrjey.swift:23:20:\
    \ error: '[' is not allowed in operator names\n        if operator[idx] == \"\"\
    \ {\n                   ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    switch operator.count {\n    case 0:\n\
    \        return 0\n    case 1:\n        return operand[0] + do_algebra(operator:\
    \ operator, operand: operand[1..<operand.count])\n    case 2:\n        return\
    \ operand[0] + do_algebra(operator: operator, operand: operand[1..<operand.count])\
    \ - do_algebra(operator: operator, operand: operand[2..<operand.count])\n    case\
    \ 3:\n        return operand[0] + do_algebra(operator: operator, operand: operand[1..<operand.count])\
    \ - do_algebra(operator: operator, operand: operand[2..<operand.count]) - do_algebra(operator:\
    \ operator, operand: operand[3..<operand.count])\n    case 4:\n        return\
    \ operand[0] + do_algebra(operator: operator, operand: operand[1..<operand.count])\
    \ - do_algebra(operator: operator, operand: operand[2..<operand.count]) - do_algebra(operator:\
    \ operator, operand: operand[3..<operand.count]) - do_algebra(operator: operator,\
    \ operand: operand[4..<operand.count])\n    default:\n        return operand[0]\
    \ + do_algebra(operator: operator, operand: operand[1..<operand.count]) - do_algebra(operator:\
    \ operator, operand: operand[2..<operand.count]) - do_algebra(operator: operator,\
    \ operand: operand[3..<operand.count]) - do_algebra(operator: operator, operand:\
    \ operand[4..<operand.count]) - do_algebra(operator: operator, operand: operand[5..<operand.count])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"\
    **\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp0l0exwuo.swift:21:12: error: expected expression in 'switch' statement\n\
    \    switch operator.count {\n           ^\n/tmp/tmp0l0exwuo.swift:21:20: error:\
    \ '.' is not allowed in operator names\n    switch operator.count {\n        \
    \           ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var sum = 0;\n    for _ in 0..<operand.count\
    \ {\n        let op = operator[operand.count - 1 - _]\n        switch op {\n \
    \       case \"+\":\n            sum += operand[operand.count - 1 - _]\n     \
    \   case \"*\":\n            sum += operand[operand.count - 1 - _] * operand[operand.count\
    \ - 1 - _]\n        case \"-\":\n            sum += operand[operand.count - 1\
    \ - _] - operand[operand.count - 1 - _]\n        case \"//\":\n            sum\
    \ += operand[operand.count - 1 - _] % operand[operand.count - 1 - _]\n       \
    \ case \"^\":\n            sum += operand[operand.count - 1 - _] ^ operand[operand.count\
    \ - 1 - _]\n        default:\n            print(\"Unknown operator: \\(op)\")\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpu333ir_h.swift:23:18: error: expected initial value after '='\n\
    \        let op = operator[operand.count - 1 - _]\n                 ^\n/tmp/tmpu333ir_h.swift:23:17:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ op = operator[operand.count - 1 - _]\n                ^\n                ;\n\
    /tmp/tmpu333ir_h.swift:23:26: error: '[' is not allowed in operator names\n  \
    \      let op = operator[operand.count - 1 - _]\n                         ^\n\
    /tmp/tmpu333ir_h.swift:26:48: error: '_' can only appear in a pattern or on the\
    \ left side of an assignment\n            sum += operand[operand.count - 1 - _]\n\
    \                                               ^\n/tmp/tmpu333ir_h.swift:28:48:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \            sum += operand[operand.count - 1 - _] * operand[operand.count - 1\
    \ - _]\n                                               ^\n/tmp/tmpu333ir_h.swift:30:48:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \            sum += operand[operand.count - 1 - _] - operand[operand.count - 1\
    \ - _]\n                                               ^\n/tmp/tmpu333ir_h.swift:32:48:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \            sum += operand[operand.count - 1 - _] % operand[operand.count - 1\
    \ - _]\n                                               ^\n/tmp/tmpu333ir_h.swift:34:48:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \            sum += operand[operand.count - 1 - _] ^ operand[operand.count - 1\
    \ - _]\n                                               ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    if operator.count != operand.count\
    \ {\n        print(\"Error: Invalid operator array\")\n        return 0\n    }\n\
    \    \n    var result: Int = 0\n    \n    var op_index = 0\n    var op: Int\n\
    \    var op_size: Int\n    \n    var op_index2 = 0\n    var op2: Int\n    var\
    \ op2_size: Int\n    \n    var index = 0\n    \n    let mut arr = [Int]()\n  \
    \  \n    for index in 0..operand.count {\n        arr.insert(operand[index], index)\n\
    \    }\n    \n    for index in 0..operator.count {\n        op_size = arr.count\n\
    \        \n        op2_size = arr.reduce(0) { $0 + $1 }\n        \n        if\
    \ op_size < op2_size {\n            op = arr[index]\n            arr.insert(op,\
    \ op_index + op_index2)\n        } else {\n            op2 = arr[index]\n    \
    \        arr.insert(op2, op_index + op_index2)\n            arr.insert(op, op_index\
    \ + op_index2)\n        }\n        \n        op_index += op_size\n        op_index2\
    \ += op_size\n    }\n    \n    for index in 0..arr.count {\n        result +=\
    \ arr[index]\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgogbz7dn.swift:22:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count != operand.count {\n       ^\n/tmp/tmpgogbz7dn.swift:22:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count != operand.count\
    \ {\n               ^\n/tmp/tmpgogbz7dn.swift:39:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut arr = [Int]()\n            ^\n/tmp/tmpgogbz7dn.swift:39:13: note:\
    \ join the identifiers together\n    let mut arr = [Int]()\n        ~~~~^~~\n\
    \        mutarr\n/tmp/tmpgogbz7dn.swift:39:13: note: join the identifiers together\
    \ with camel-case\n    let mut arr = [Int]()\n        ~~~~^~~\n        mutArr\n\
    /tmp/tmpgogbz7dn.swift:45:21: error: expected expression after operator\n    for\
    \ index in 0..operator.count {\n                    ^\n/tmp/tmpgogbz7dn.swift:45:21:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..operator.count\
    \ {\n                    ^\n/tmp/tmpgogbz7dn.swift:41:19: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for index in 0..operand.count {\n  \
    \                ^~\n                  ...\n/tmp/tmpgogbz7dn.swift:63:19: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n    for index in 0..arr.count\
    \ {\n                  ^~\n                  ...\n/tmp/tmpgogbz7dn.swift:63:21:\
    \ error: cannot find 'arr' in scope\n    for index in 0..arr.count {\n       \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operator.count {\n        switch operator[index] {\n        case \"+\":\n\
    \            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result *= operand[index]\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpsrjqo233.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpsrjqo233.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpsrjqo233.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpsrjqo233.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return do_algebra(operator, operand,\
    \ false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1kasv8x3.swift:21:23: error: expected expression in list of expressions\n\
    \    return do_algebra(operator, operand, false)\n                      ^\n/tmp/tmp1kasv8x3.swift:21:31:\
    \ error: ',' is not allowed in operator names\n    return do_algebra(operator,\
    \ operand, false)\n                              ^\n/tmp/tmp1kasv8x3.swift:21:22:\
    \ error: missing arguments for parameters 'operator', 'operand' in call\n    return\
    \ do_algebra(operator, operand, false)\n                     ^\n             \
    \         operator: <#[String]#>, operand: <#[Int]#>\n/tmp/tmp1kasv8x3.swift:20:6:\
    \ note: 'do_algebra(operator:operand:)' declared here\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count != operand.count {\n\
    \        print(\"Error while doing algebra: Operands and operators array are not\
    \ equal\")\n    }\n\n    var result: Int = 0\n    for idx in 0..<operator.count\
    \ {\n        switch operator[idx] {\n        case \"+\":\n            result +=\
    \ operand[idx]\n        case \"-\":\n            result -= operand[idx]\n    \
    \    case \"*\":\n            result *= operand[idx]\n        case \"//\":\n \
    \           result /= operand[idx]\n        case \"**\":\n            result **=\
    \ operand[idx]\n        default:\n            print(\"Error: invalid operator\"\
    )\n        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpptfuhsk4.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count != operand.count {\n       ^\n/tmp/tmpptfuhsk4.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count != operand.count\
    \ {\n               ^\n/tmp/tmpptfuhsk4.swift:26:20: error: expected expression\
    \ after operator\n    for idx in 0..<operator.count {\n                   ^\n\
    /tmp/tmpptfuhsk4.swift:26:20: error: expected '{' to start the body of for-each\
    \ loop\n    for idx in 0..<operator.count {\n                   ^\n/tmp/tmpptfuhsk4.swift:27:16:\
    \ error: expected expression in 'switch' statement\n        switch operator[idx]\
    \ {\n               ^\n/tmp/tmpptfuhsk4.swift:27:24: error: '[' is not allowed\
    \ in operator names\n        switch operator[idx] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for index in 0..<operand.count-1\
    \ {\n        if index < operator.count-1 {\n            switch operator[index]\
    \ {\n            case \"+\":\n                result += operand[index]\n     \
    \       case \"-\":\n                result -= operand[index]\n            case\
    \ \"*\":\n                result *= operand[index]\n            case \"//\":\n\
    \                result = (operand[index] / operand[index+1]) * operand[index+1]\n\
    \            case \"**\":\n                result = pow(operand[index], operand[index+1])\n\
    \            }\n        } else {\n            switch operator[index] {\n     \
    \       case \"+\":\n                result += operand[index]\n            case\
    \ \"-\":\n                result -= operand[index]\n            case \"*\":\n\
    \                result *= operand[index]\n            case \"//\":\n        \
    \        result = (operand[index] / operand[index+1]) * operand[index+1]\n   \
    \         case \"**\":\n                result = pow(operand[index], operand[index+1])\n\
    \            default:\n                break\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpq9vl4avw.swift:23:20: error: expected expression after operator\n\
    \        if index < operator.count-1 {\n                   ^\n/tmp/tmpq9vl4avw.swift:23:28:\
    \ error: '.' is not allowed in operator names\n        if index < operator.count-1\
    \ {\n                           ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for i in 0..operand.count-1\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i]\n        case \"-\":\n            result -= operand[i]\n        case\
    \ \"*\":\n            result *= operand[i]\n        case \"/\":\n            if\
    \ operand[i] == 0 {\n                throw SyntaxError(\"Division by zero\")\n\
    \            }\n            result /= operand[i]\n        case \"**\":\n     \
    \       if operand[i] == 0 {\n                throw SyntaxError(\"Division by\
    \ zero\")\n            }\n            result **= operand[i]\n        default:\n\
    \            throw SyntaxError(\"Invalid operator\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgg14l6kh.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpgg14l6kh.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n/tmp/tmpgg14l6kh.swift:22:15: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for i in 0..operand.count-1 {\n    \
    \          ^~\n              ...\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    // Initialize a variable to hold\
    \ the result\n    var result = operand[0]\n\n    // For each operator in the operator\
    \ array\n    for _ in 0 ..< operator.count {\n        switch operator[_] {\n \
    \           case \"+\":\n                result = result + operand[_ + 1]\n  \
    \          case \"-\":\n                result = result - operand[_ + 1]\n   \
    \         case \"*\":\n                result = result * operand[_ + 1]\n    \
    \        case \"//\":\n                result = result // operand[_ + 1]\n   \
    \         case \"**\":\n                result = result ** operand[_ + 1]\n  \
    \          default:\n                break\n        }\n    }\n\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpnqv9emkp.swift:26:20: error: expected expression after operator\n\
    \    for _ in 0 ..< operator.count {\n                   ^\n/tmp/tmpnqv9emkp.swift:26:20:\
    \ error: expected '{' to start the body of for-each loop\n    for _ in 0 ..< operator.count\
    \ {\n                   ^\n/tmp/tmpnqv9emkp.swift:27:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[_] {\n               ^\n/tmp/tmpnqv9emkp.swift:27:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[_] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    assert(operand.count >= 2)\n    let\
    \ mut result = operand[0]\n    for op in operator {\n        switch op {\n   \
    \     case \"+\":\n            result += operand[1]\n        case \"-\":\n   \
    \         result -= operand[1]\n        case \"*\":\n            result *= operand[1]\n\
    \        case \"//\":\n            result = result / operand[1]\n        case\
    \ \"**\":\n            result = result ** operand[1]\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp15s23_m1.swift:22:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut result =\
    \ operand[0]\n            ^\n/tmp/tmp15s23_m1.swift:22:13: note: join the identifiers\
    \ together\n    let mut result = operand[0]\n        ~~~~^~~~~~\n        mutresult\n\
    /tmp/tmp15s23_m1.swift:22:13: note: join the identifiers together with camel-case\n\
    \    let mut result = operand[0]\n        ~~~~^~~~~~\n        mutResult\n/tmp/tmp15s23_m1.swift:23:15:\
    \ error: expected Sequence expression for for-each loop\n    for op in operator\
    \ {\n              ^\n/tmp/tmp15s23_m1.swift:23:15: error: expected '{' to start\
    \ the body of for-each loop\n    for op in operator {\n              ^\n/tmp/tmp15s23_m1.swift:37:12:\
    \ error: cannot find 'result' in scope\n    return result\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // init operand\n    var operands =\
    \ [Int]()\n    for element in operand {\n        operands += [element]\n    }\n\
    \n    // init operator\n    var operators = [String]()\n    for element in operator\
    \ {\n        operators += [element]\n    }\n\n    // init result\n    var result:\
    \ Int = 0\n    if operators.count == 1 {\n        // add operands\n        result\
    \ = operands[0]\n    }\n    else {\n        // multiply operands and add operands\n\
    \        for _ in 1...operators.count {\n            operands.append(operands[0])\n\
    \        }\n        for _ in 0..<operands.count {\n            result += operands[_]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpn2_6vps7.swift:29:20: error: expected Sequence expression for for-each\
    \ loop\n    for element in operator {\n                   ^\n/tmp/tmpn2_6vps7.swift:29:20:\
    \ error: expected '{' to start the body of for-each loop\n    for element in operator\
    \ {\n                   ^\n/tmp/tmpn2_6vps7.swift:45:32: error: '_' can only appear\
    \ in a pattern or on the left side of an assignment\n            result += operands[_]\n\
    \                               ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result : Int = 0\n    \n    if operator[0]\
    \ == \"+\" {\n        result = operand[0] + operand[1]\n    }\n    else if operator[0]\
    \ == \"-\" {\n        result = operand[0] - operand[1]\n    }\n    else if operator[0]\
    \ == \"*\" {\n        result = operand[0] * operand[1]\n    }\n    else if operator[0]\
    \ == \"/\" {\n        result = operand[0] / operand[1]\n    }\n    else if operator[0]\
    \ == \"//\" {\n        result = operand[0] // operand[1]\n    }\n    else if operator[0]\
    \ == \"**\" {\n        result = operand[0] ** operand[1]\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpjl0y3qbs.swift:23:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator[0] == \"+\" {\n       ^\n/tmp/tmpjl0y3qbs.swift:23:16:\
    \ error: '[' is not allowed in operator names\n    if operator[0] == \"+\" {\n\
    \               ^\n/tmp/tmpjl0y3qbs.swift:26:13: error: expected expression, var,\
    \ or let in 'if' condition\n    else if operator[0] == \"-\" {\n            ^\n\
    /tmp/tmpjl0y3qbs.swift:26:21: error: '[' is not allowed in operator names\n  \
    \  else if operator[0] == \"-\" {\n                    ^\n/tmp/tmpjl0y3qbs.swift:29:13:\
    \ error: expected expression, var, or let in 'if' condition\n    else if operator[0]\
    \ == \"*\" {\n            ^\n/tmp/tmpjl0y3qbs.swift:29:21: error: '[' is not allowed\
    \ in operator names\n    else if operator[0] == \"*\" {\n                    ^\n\
    /tmp/tmpjl0y3qbs.swift:32:13: error: expected expression, var, or let in 'if'\
    \ condition\n    else if operator[0] == \"/\" {\n            ^\n/tmp/tmpjl0y3qbs.swift:32:21:\
    \ error: '[' is not allowed in operator names\n    else if operator[0] == \"/\"\
    \ {\n                    ^\n/tmp/tmpjl0y3qbs.swift:35:13: error: expected expression,\
    \ var, or let in 'if' condition\n    else if operator[0] == \"//\" {\n       \
    \     ^\n/tmp/tmpjl0y3qbs.swift:35:21: error: '[' is not allowed in operator names\n\
    \    else if operator[0] == \"//\" {\n                    ^\n/tmp/tmpjl0y3qbs.swift:38:13:\
    \ error: expected expression, var, or let in 'if' condition\n    else if operator[0]\
    \ == \"**\" {\n            ^\n/tmp/tmpjl0y3qbs.swift:38:21: error: '[' is not\
    \ allowed in operator names\n    else if operator[0] == \"**\" {\n           \
    \         ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.isEmpty{\n        return\
    \ operand[0]\n    }\n\n    if operand.isEmpty{\n        return 0\n    }\n\n  \
    \  if operator.isEmpty || operand.isEmpty {\n        print(\"Error: Invalid Operation\"\
    )\n        return 0\n    }\n    \n    if operator[0] != operator[1] {\n      \
    \  print(\"Error: Invalid Operation\")\n        return 0\n    }\n    \n    let\
    \ operator = operator[0]\n    \n    var sum = 0\n    \n    for i in 1..<operand.count{\n\
    \        sum = operand[i-1] + sum\n    }\n    \n    if operator == \"+\" {\n \
    \       return sum\n    }\n    \n    if operator == \"-\" {\n        return -sum\n\
    \    }\n    \n    if operator == \"*\" {\n        return sum * operand[0]\n  \
    \  }\n    \n    if operator == \"//\" {\n        return sum / operand[0]\n   \
    \ }\n    \n    if operator == \"**\" {\n        return pow(operand[0], operand[1])\n\
    \    }\n    \n    print(\"Error: Invalid Operation\")\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1l46h36f.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.isEmpty{\n       ^\n/tmp/tmp1l46h36f.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.isEmpty{\n    \
    \           ^\n/tmp/tmp1l46h36f.swift:29:8: error: expected expression, var, or\
    \ let in 'if' condition\n    if operator.isEmpty || operand.isEmpty {\n      \
    \ ^\n/tmp/tmp1l46h36f.swift:29:16: error: '.' is not allowed in operator names\n\
    \    if operator.isEmpty || operand.isEmpty {\n               ^\n/tmp/tmp1l46h36f.swift:34:8:\
    \ error: expected expression, var, or let in 'if' condition\n    if operator[0]\
    \ != operator[1] {\n       ^\n/tmp/tmp1l46h36f.swift:34:16: error: '[' is not\
    \ allowed in operator names\n    if operator[0] != operator[1] {\n           \
    \    ^\n/tmp/tmp1l46h36f.swift:34:31: error: '[' is not allowed in operator names\n\
    \    if operator[0] != operator[1] {\n                              ^\n/tmp/tmp1l46h36f.swift:39:9:\
    \ error: keyword 'operator' cannot be used as an identifier here\n    let operator\
    \ = operator[0]\n        ^\n/tmp/tmp1l46h36f.swift:39:9: note: if this name is\
    \ unavoidable, use backticks to escape it\n    let operator = operator[0]\n  \
    \      ^~~~~~~~\n        `operator`\n/tmp/tmp1l46h36f.swift:39:20: error: expected\
    \ initial value after '='\n    let operator = operator[0]\n                  \
    \ ^\n/tmp/tmp1l46h36f.swift:39:19: error: consecutive statements on a line must\
    \ be separated by ';'\n    let operator = operator[0]\n                  ^\n \
    \                 ;\n/tmp/tmp1l46h36f.swift:39:28: error: '[' is not allowed in\
    \ operator names\n    let operator = operator[0]\n                           ^\n\
    /tmp/tmp1l46h36f.swift:47:8: error: expected expression, var, or let in 'if' condition\n\
    \    if operator == \"+\" {\n       ^\n/tmp/tmp1l46h36f.swift:47:8: error: operator\
    \ must be declared as 'prefix', 'postfix', or 'infix'\n    if operator == \"+\"\
    \ {\n       ^\n/tmp/tmp1l46h36f.swift:47:8: error: 'operator' may only be declared\
    \ at file scope\n    if operator == \"+\" {\n       ^\n/tmp/tmp1l46h36f.swift:51:8:\
    \ error: expected express"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Add all operands\n    var result:\
    \ Int = 0\n    for index in 0..<operand.count {\n        // Get operand\n    \
    \    let operand: Int = operand[index]\n        switch operator[0] {\n       \
    \ case \"+\":\n            result += operand\n            break\n        case\
    \ \"-\":\n            result -= operand\n            break\n        case \"*\"\
    :\n            result *= operand\n            break\n        case \"//\":\n  \
    \          result /= operand\n            break\n        case \"**\":\n      \
    \      result *= operand\n            result /= operand\n            break\n \
    \       default:\n            print(\"Invalid operator string: \\(operator)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpydhl1smb.swift:26:16: error: expected expression in 'switch' statement\n\
    \        switch operator[0] {\n               ^\n/tmp/tmpydhl1smb.swift:26:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[0] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    var result : Int = 0\n\n    for\
    \ i in 0..<operand.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            print(\"Error: Invalid\
    \ operator!\")\n        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpglo0_3va.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpglo0_3va.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // write your code here\n    var res\
    \ = operand[0]\n    for j in 1...operand.count {\n        switch operator[0] {\n\
    \        case \"+\": res = res + operand[j]\n        case \"-\": res = res - operand[j]\n\
    \        case \"*\": res = res * operand[j]\n        case \"//\": res = res //\
    \ operand[j]\n        case \"**\": res = res ** operand[j]\n        default: print(\"\
    Invalid operator\")\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpie94jjgn.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[0] {\n               ^\n/tmp/tmpie94jjgn.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[0] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var ops: [String] = []\n    var num:\
    \ Int = 0\n    for op in operator {\n        switch op {\n        case \"+\":\n\
    \            ops.append(\"+\")\n        case \"-\":\n            ops.append(\"\
    -\")\n        case \"*\":\n            ops.append(\"*\")\n        case \"/\":\n\
    \            ops.append(\"/\")\n        case \"**\":\n            ops.append(\"\
    **\")\n        default:\n            fatalError(\"unknown operator\")\n      \
    \  }\n    }\n    for num in operand[0..<operand.count-1] {\n        let op1 =\
    \ ops[num]\n        var result: Int = 0\n        for num2 in operand[num..<operand.count]\
    \ {\n            let op2 = ops[num2]\n            switch op1 {\n            case\
    \ \"+\":\n                result += num2\n            case \"-\":\n          \
    \      result -= num2\n            case \"*\":\n                result *= num2\n\
    \            case \"/\":\n                result /= num2\n            case \"\
    **\":\n                result **= num2\n            default:\n               \
    \ fatalError(\"unknown operator\")\n            }\n        }\n        return Int(result)\n\
    \    }\n    fatalError(\"bad equation\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpji235xzx.swift:23:15: error: expected Sequence expression for for-each\
    \ loop\n    for op in operator {\n              ^\n/tmp/tmpji235xzx.swift:23:15:\
    \ error: expected '{' to start the body of for-each loop\n    for op in operator\
    \ {\n              ^\n/tmp/tmpji235xzx.swift:54:24: error: cannot find operator\
    \ '**=' in scope\n                result **= num2\n                       ^~~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let operator1 = operator[0]\n    let\
    \ operator2 = operator[1]\n    var result: Int = 0\n    for index in 0..<operand.count\
    \ - 1 {\n        if operand[index] == 0 {\n            break\n        }\n    \
    \    if operator1 == \"+\" {\n            result = result + operand[index]\n \
    \       } else if operator1 == \"-\" {\n            result = result - operand[index]\n\
    \        } else if operator1 == \"*\" {\n            result = result * operand[index]\n\
    \        } else if operator1 == \"//\" {\n            result = result // operand[index]\n\
    \        } else if operator1 == \"**\" {\n            result = result ** operand[index]\n\
    \        } else {\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpm09w4zvr.swift:21:21: error: expected initial value after '='\n\
    \    let operator1 = operator[0]\n                    ^\n/tmp/tmpm09w4zvr.swift:21:20:\
    \ error: consecutive statements on a line must be separated by ';'\n    let operator1\
    \ = operator[0]\n                   ^\n                   ;\n/tmp/tmpm09w4zvr.swift:21:29:\
    \ error: '[' is not allowed in operator names\n    let operator1 = operator[0]\n\
    \                            ^\n/tmp/tmpm09w4zvr.swift:22:21: error: expected\
    \ initial value after '='\n    let operator2 = operator[1]\n                 \
    \   ^\n/tmp/tmpm09w4zvr.swift:22:20: error: consecutive statements on a line must\
    \ be separated by ';'\n    let operator2 = operator[1]\n                   ^\n\
    \                   ;\n/tmp/tmpm09w4zvr.swift:22:29: error: '[' is not allowed\
    \ in operator names\n    let operator2 = operator[1]\n                       \
    \     ^\n/tmp/tmpm09w4zvr.swift:35:20: error: assigning a variable to itself\n\
    \            result = result // operand[index]\n            ~~~~~~ ^ ~~~~~~\n\
    /tmp/tmpm09w4zvr.swift:37:29: error: cannot find operator '**' in scope\n    \
    \        result = result ** operand[index]\n                            ^~\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operations = [String]()\n    var\
    \ expression: Int = 0\n    var i = 0\n    \n    for _ in 0..<operator.reserveCapacity(operand.count-1)\
    \ {\n        operations.append(operator.removeAtIndex(i))\n        expression\
    \ += 1\n        i += 1\n    }\n    \n    for _ in 0..<operand.count-1 {\n    \
    \    operations.append(operand.removeAtIndex(i))\n        expression *= operand.removeAtIndex(i)\n\
    \        i += 1\n    }\n    \n    for _ in 0..<operator.reserveCapacity(operand.count-1)\
    \ {\n        operations.append(operator.removeAtIndex(i))\n        expression\
    \ += operand.removeAtIndex(i)\n        i += 1\n    }\n    \n    for _ in 0..<operand.count-1\
    \ {\n        operations.append(operand.removeAtIndex(i))\n        expression *=\
    \ operator.removeAtIndex(i)\n        i += 1\n    }\n    \n    for _ in 0..<operator.reserveCapacity(operand.count-1)\
    \ {\n        operations.append(operator.removeAtIndex(i))\n        expression\
    \ += operand.removeAtIndex(i)\n        i += 1\n    }\n    \n    return expression\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpa74dus3t.swift:25:18: error: expected expression after operator\n\
    \    for _ in 0..<operator.reserveCapacity(operand.count-1) {\n              \
    \   ^\n/tmp/tmpa74dus3t.swift:25:18: error: expected '{' to start the body of\
    \ for-each loop\n    for _ in 0..<operator.reserveCapacity(operand.count-1) {\n\
    \                 ^\n/tmp/tmpa74dus3t.swift:26:27: error: expected expression\
    \ in list of expressions\n        operations.append(operator.removeAtIndex(i))\n\
    \                          ^\n/tmp/tmpa74dus3t.swift:26:35: error: '.' is not\
    \ allowed in operator names\n        operations.append(operator.removeAtIndex(i))\n\
    \                                  ^\n/tmp/tmpa74dus3t.swift:37:18: error: expected\
    \ expression after operator\n    for _ in 0..<operator.reserveCapacity(operand.count-1)\
    \ {\n                 ^\n/tmp/tmpa74dus3t.swift:37:18: error: expected '{' to\
    \ start the body of for-each loop\n    for _ in 0..<operator.reserveCapacity(operand.count-1)\
    \ {\n                 ^\n/tmp/tmpa74dus3t.swift:38:27: error: expected expression\
    \ in list of expressions\n        operations.append(operator.removeAtIndex(i))\n\
    \                          ^\n/tmp/tmpa74dus3t.swift:38:35: error: '.' is not\
    \ allowed in operator names\n        operations.append(operator.removeAtIndex(i))\n\
    \                                  ^\n/tmp/tmpa74dus3t.swift:45:23: error: expected\
    \ expression after operator\n        expression *= operator.removeAtIndex(i)\n\
    \                      ^\n/tmp/tmpa74dus3t.swift:45:31: error: '.' is not allowed\
    \ in operator names\n        expression *= operator.removeAtIndex(i)\n       \
    \                       ^\n/tmp/tmpa74dus3t.swift:49:18: error: expected expression\
    \ after operator\n    for _ in 0..<operator.reserveCapacity(operand.count-1) {\n\
    \                 ^\n/tmp/tmpa74dus3t.swift:49:18: error: expected '{' to start\
    \ the body of for-each loop\n    for _ in 0..<operator.reserveCapacity(operand.count-1)\
    \ {\n                 ^\n/tmp/tmpa74dus3t.swift:50:27: error: expected expression\
    \ in list of expressions\n        operations.append(operator.removeAtIndex(i))\n\
    \                  "
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for i in 0..<operator.count\
    \ {\n        result += (operand[i] * operand.count - 1)\n    }\n    if operator.count\
    \ > 0 {\n        result *= operand.first!\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp891k377l.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp891k377l.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp891k377l.swift:25:8: error: expected expression,\
    \ var, or let in 'if' condition\n    if operator.count > 0 {\n       ^\n/tmp/tmp891k377l.swift:25:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count > 0 {\n \
    \              ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operand.count == 0 {\n        return\
    \ 0\n    }\n    var op: Int = 0\n    var op = operand[0]\n    var result = operand[0]\n\
    \    for i in 1...operand.count {\n        if operator[0] == \"+\" {\n       \
    \     op = op + operand[i]\n        }\n        else if operator[0] == \"-\" {\n\
    \            op = op - operand[i]\n        }\n        else if operator[0] == \"\
    *\" {\n            op = op * operand[i]\n        }\n        else if operator[0]\
    \ == \"//\" {\n            op = op / operand[i]\n        }\n        else if operator[0]\
    \ == \"**\" {\n            op = op ** operand[i]\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1h9k4fr5.swift:28:12: error: expected expression, var, or let in\
    \ 'if' condition\n        if operator[0] == \"+\" {\n           ^\n/tmp/tmp1h9k4fr5.swift:28:20:\
    \ error: '[' is not allowed in operator names\n        if operator[0] == \"+\"\
    \ {\n                   ^\n/tmp/tmp1h9k4fr5.swift:31:17: error: expected expression,\
    \ var, or let in 'if' condition\n        else if operator[0] == \"-\" {\n    \
    \            ^\n/tmp/tmp1h9k4fr5.swift:31:25: error: '[' is not allowed in operator\
    \ names\n        else if operator[0] == \"-\" {\n                        ^\n/tmp/tmp1h9k4fr5.swift:34:17:\
    \ error: expected expression, var, or let in 'if' condition\n        else if operator[0]\
    \ == \"*\" {\n                ^\n/tmp/tmp1h9k4fr5.swift:34:25: error: '[' is not\
    \ allowed in operator names\n        else if operator[0] == \"*\" {\n        \
    \                ^\n/tmp/tmp1h9k4fr5.swift:37:17: error: expected expression,\
    \ var, or let in 'if' condition\n        else if operator[0] == \"//\" {\n   \
    \             ^\n/tmp/tmp1h9k4fr5.swift:37:25: error: '[' is not allowed in operator\
    \ names\n        else if operator[0] == \"//\" {\n                        ^\n\
    /tmp/tmp1h9k4fr5.swift:40:17: error: expected expression, var, or let in 'if'\
    \ condition\n        else if operator[0] == \"**\" {\n                ^\n/tmp/tmp1h9k4fr5.swift:40:25:\
    \ error: '[' is not allowed in operator names\n        else if operator[0] ==\
    \ \"**\" {\n                        ^\n/tmp/tmp1h9k4fr5.swift:25:9: error: invalid\
    \ redeclaration of 'op'\n    var op = operand[0]\n        ^\n/tmp/tmp1h9k4fr5.swift:24:9:\
    \ note: 'op' previously declared here\n    var op: Int = 0\n        ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    switch operator[0] {\n    case \"+\"\
    :\n        return operand[0] + operand[1]\n    case \"-\":\n        return operand[0]\
    \ - operand[1]\n    case \"*\":\n        return operand[0] * operand[1]\n    case\
    \ \"//\":\n        return operand[0] & operand[1]\n    case \"**\":\n        return\
    \ operand[0] ** operand[1]\n    default:\n        print(\"Error: operator \\(operator[0])\
    \ is not supported yet.\")\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpj_rgk7hj.swift:21:12: error: expected expression in 'switch' statement\n\
    \    switch operator[0] {\n           ^\n/tmp/tmpj_rgk7hj.swift:21:20: error:\
    \ '[' is not allowed in operator names\n    switch operator[0] {\n           \
    \        ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operands = operand\n    for i in\
    \ 0..<operator.count {\n        operands = evaluate(operands, operator: operator[i])\n\
    \    }\n    return operands[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpijyf24hn.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpijyf24hn.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpijyf24hn.swift:23:49: error: expected expression\
    \ in list of expressions\n        operands = evaluate(operands, operator: operator[i])\n\
    \                                                ^\n/tmp/tmpijyf24hn.swift:23:57:\
    \ error: '[' is not allowed in operator names\n        operands = evaluate(operands,\
    \ operator: operator[i])\n                                                   \
    \     ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var operatorLength\
    \ = operator.count\n\n    // check if length of operator and operand arrays are\
    \ equal\n    if operatorLength != operand.count {\n        print(\"Error: length\
    \ of operator and operand arrays is not equal\")\n        return -1\n    }\n\n\
    \    for index in 0..<operatorLength {\n        // for each operator, do corresponding\
    \ operation\n        // if the operator is not found, then return the value of\
    \ operand\n        if operator == nil {\n            result = operand[index]\n\
    \        } else {\n            // if the operator found, find its position in\
    \ the operator array\n            let operatorIndex = operator.index(of: operator![index])!\n\
    \            // find the position where the given operand array starts\n     \
    \       let startIndex = operatorIndex - 1\n            // find where the given\
    \ operand array ends\n            let endIndex = operand.count\n\n           \
    \ // the result of the operation\n            let resultIndex = index\n\n    \
    \        // if the result index is equal to the end index, then stop the loop\n\
    \            if resultIndex == endIndex {\n                break\n           \
    \ }\n\n            result = result + operand[startIndex] * operand[resultIndex]\
    \ + operand[endIndex]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpkitpl4_k.swift:22:26: error: expected initial value after '='\n\
    \    var operatorLength = operator.count\n                         ^\n/tmp/tmpkitpl4_k.swift:22:25:\
    \ error: consecutive statements on a line must be separated by ';'\n    var operatorLength\
    \ = operator.count\n                        ^\n                        ;\n/tmp/tmpkitpl4_k.swift:22:34:\
    \ error: '.' is not allowed in operator names\n    var operatorLength = operator.count\n\
    \                                 ^\n/tmp/tmpkitpl4_k.swift:33:12: error: expected\
    \ expression, var, or let in 'if' condition\n        if operator == nil {\n  \
    \         ^\n/tmp/tmpkitpl4_k.swift:33:12: error: operator must be declared as\
    \ 'prefix', 'postfix', or 'infix'\n        if operator == nil {\n           ^\n\
    /tmp/tmpkitpl4_k.swift:33:12: error: 'operator' may only be declared at file scope\n\
    \        if operator == nil {\n           ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    switch operator.count\
    \ {\n    case 0: return 0\n    case 1: \n        switch operator[0] {\n      \
    \  case \"+\": result += operand[0]\n        case \"-\": result -= operand[0]\n\
    \        case \"*\": result *= operand[0]\n        case \"//\": result /= operand[0]\n\
    \        case \"**\": result **= operand[0]\n        default:\n            return\
    \ 0\n        }\n    case 2: \n        switch operator[0] {\n        case \"+\"\
    : result += operand[0]\n        case \"-\": result -= operand[0]\n        case\
    \ \"*\": result *= operand[0]\n        case \"//\": result /= operand[0]\n   \
    \     default:\n            return 0\n        }\n        switch operator[1] {\n\
    \        case \"+\": result += operand[1]\n        case \"-\": result -= operand[1]\n\
    \        case \"*\": result *= operand[1]\n        case \"//\": result /= operand[1]\n\
    \        default:\n            return 0\n        }\n    default:\n        return\
    \ 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpxab_hff3.swift:22:12: error: expected expression in 'switch' statement\n\
    \    switch operator.count {\n           ^\n/tmp/tmpxab_hff3.swift:22:20: error:\
    \ '.' is not allowed in operator names\n    switch operator.count {\n        \
    \           ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // TODO: Complete the solution here\n\
    \    var result = 0\n    for index in 0..<operand.count {\n        switch (operator[index])\
    \ {\n        case \"+\":\n            result += operand[index]\n        case \"\
    -\":\n            result -= operand[index]\n        case \"*\":\n            result\
    \ *= operand[index]\n        case \"//\":\n            result /= operand[index]\n\
    \        case \"**\":\n            result = (result/operand[index])\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpkofp464y.swift:24:17: error: expected expression in list of expressions\n\
    \        switch (operator[index]) {\n                ^\n/tmp/tmpkofp464y.swift:24:25:\
    \ error: '[' is not allowed in operator names\n        switch (operator[index])\
    \ {\n                        ^\n/tmp/tmpkofp464y.swift:22:9: warning: variable\
    \ 'result' was never mutated; consider changing to 'let' constant\n    var result\
    \ = 0\n    ~~~ ^\n    let\n/tmp/tmpkofp464y.swift:23:9: warning: immutable value\
    \ 'index' was never used; consider replacing with '_' or removing it\n    for\
    \ index in 0..<operand.count {\n        ^~~~~\n        _\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Write your code here.\n    \n   \
    \ if operand.count < 2 {\n        return -1\n    }\n    \n    var operation =\
    \ operator[0]\n    \n    switch operation {\n    case \"+\":\n        var a =\
    \ operand[0]\n        var b = operand[1]\n        return a + b\n    case \"-\"\
    :\n        var a = operand[0]\n        var b = operand[1]\n        return a -\
    \ b\n    case \"*\":\n        var a = operand[0]\n        var b = operand[1]\n\
    \        return a * b\n    case \"//\":\n        var a = operand[0]\n        var\
    \ b = operand[1]\n        return a / b\n    case \"**\":\n        var a = operand[0]\n\
    \        var b = operand[1]\n        return a ** b\n    default:\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpeqrpy0_h.swift:27:21: error: expected initial value after '='\n\
    \    var operation = operator[0]\n                    ^\n/tmp/tmpeqrpy0_h.swift:27:20:\
    \ error: consecutive statements on a line must be separated by ';'\n    var operation\
    \ = operator[0]\n                   ^\n                   ;\n/tmp/tmpeqrpy0_h.swift:27:29:\
    \ error: '[' is not allowed in operator names\n    var operation = operator[0]\n\
    \                            ^\n/tmp/tmpeqrpy0_h.swift:49:18: error: cannot find\
    \ operator '**' in scope\n        return a ** b\n                 ^~\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var algebic : Int = 0\n\n    for i in\
    \ 0..<operand.count {\n        let tmpOperand = operand[i]\n        var tmpOperandInt:\
    \ Int\n        switch operator[i] {\n            case \"+\": tmpOperandInt = tmpOperand\
    \ + tmpOperandInt\n            case \"-\": tmpOperandInt = tmpOperand - tmpOperandInt\n\
    \            case \"*\": tmpOperandInt = tmpOperand * tmpOperandInt\n        \
    \    case \"//\": tmpOperandInt = tmpOperand // tmpOperandInt\n            case\
    \ \"**\": tmpOperandInt = tmpOperand ** tmpOperandInt\n            default:\n\
    \                tmpOperandInt = tmpOperand\n        }\n        algebic += tmpOperandInt\n\
    \    }\n    return algebic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp64j3llkp.swift:26:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmp64j3llkp.swift:26:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012496
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for idx in 0..<(operand.count\
    \ - 1) {\n        let operation = operator[idx]\n        switch operation {\n\
    \        case \"+\": result = result + operand[idx]\n        case \"-\": result\
    \ = result - operand[idx]\n        case \"*\": result = result * operand[idx]\n\
    \        case \"//\": result = result / operand[idx]\n        case \"**\": result\
    \ = result ** operand[idx]\n        default: fatalError()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgnyejf3h.swift:23:25: error: expected initial value after '='\n\
    \        let operation = operator[idx]\n                        ^\n/tmp/tmpgnyejf3h.swift:23:24:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ operation = operator[idx]\n                       ^\n                      \
    \ ;\n/tmp/tmpgnyejf3h.swift:23:33: error: '[' is not allowed in operator names\n\
    \        let operation = operator[idx]\n                                ^\n/tmp/tmpgnyejf3h.swift:29:36:\
    \ error: cannot find operator '**' in scope\n        case \"**\": result = result\
    \ ** operand[idx]\n                                   ^~\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    // TODO: write your code here\n\
    \    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpmomr54_5/tmpmomr54_5.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e01929c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e01620b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e01620988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e0161f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmomr54_5                        0x000055c12ffed47b <unavailable> + 5243

    5    libc.so.6                          0x00002b6e01b15460 __libc_start_main +
    245

    6    tmpmomr54_5                        0x000055c12ffed029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var res = operand[0]\n    for i in 1..<operand.count\
    \ {\n        var operation = operator[i % operator.count]\n        if operation\
    \ == \"+\" {\n            res += operand[i]\n        } else if operation == \"\
    *\" {\n            res *= operand[i]\n        } else if operation == \"-\" {\n\
    \            res -= operand[i]\n        } else if operation == \"/\" {\n     \
    \       res //= operand[i]\n        } else if operation == \"//\" {\n        \
    \    res %= operand[i]\n        } else if operation == \"**\" {\n            res\
    \ %= operand[i]\n        } else {\n            print(\"Invalid operator: \\(operation)\"\
    )\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpq2ki3fi9.swift:23:25: error: expected initial value after '='\n\
    \        var operation = operator[i % operator.count]\n                      \
    \  ^\n/tmp/tmpq2ki3fi9.swift:23:24: error: consecutive statements on a line must\
    \ be separated by ';'\n        var operation = operator[i % operator.count]\n\
    \                       ^\n                       ;\n/tmp/tmpq2ki3fi9.swift:23:33:\
    \ error: '[' is not allowed in operator names\n        var operation = operator[i\
    \ % operator.count]\n                                ^\n/tmp/tmpq2ki3fi9.swift:31:13:\
    \ warning: variable is unused\n            res //= operand[i]\n            ^~~\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var total = 0\n    for i in 0..<(operand.count\
    \ - 1) {\n        switch operator[i] {\n        case \"+\":\n            total\
    \ = total + operand[i]\n        case \"-\":\n            total = total - operand[i]\n\
    \        case \"*\":\n            total = total * operand[i]\n        case \"\
    //\":\n            total = total / operand[i]\n        case \"**\":\n        \
    \    total = total ** operand[i]\n        default:\n            fatalError(\"\
    unknown operator\")\n        }\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpajjidp66.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpajjidp66.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var total = 0\n    for index in 0..<operand.count\
    \ {\n        let val = operand[index]\n        let opr = operator[index].lowercaseString\n\
    \        switch opr {\n        case \"+\":\n            total = total + val\n\
    \        case \"-\":\n            total = total - val\n        case \"*\":\n \
    \           total = total * val\n        case \"//\":\n            total = total\
    \ / val\n        case \"^\":\n            total = total ** val\n        default:\n\
    \            print(\"unknown operator: \\(operator[index])\")\n        }\n   \
    \ }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmps_7y55pl.swift:24:19: error: expected initial value after '='\n\
    \        let opr = operator[index].lowercaseString\n                  ^\n/tmp/tmps_7y55pl.swift:24:18:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ opr = operator[index].lowercaseString\n                 ^\n                \
    \ ;\n/tmp/tmps_7y55pl.swift:24:27: error: '[' is not allowed in operator names\n\
    \        let opr = operator[index].lowercaseString\n                         \
    \ ^\n/tmp/tmps_7y55pl.swift:37:40: error: expected expression in list of expressions\n\
    \            print(\"unknown operator: \\(operator[index])\")\n              \
    \                         ^\n/tmp/tmps_7y55pl.swift:35:27: error: cannot find\
    \ operator '**' in scope\n            total = total ** val\n                 \
    \         ^~\n/tmp/tmps_7y55pl.swift:37:39: error: missing argument for parameter\
    \ #1 in call\n            print(\"unknown operator: \\(operator[index])\")\n \
    \                                     ^\n                                    \
    \  <#Any.Type#>\nSwift.DefaultStringInterpolation:8:26: note: 'appendInterpolation'\
    \ declared here\n    public mutating func appendInterpolation(_ value: Any.Type)\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operand2 = operand\n    var result:\
    \ Int = 0\n\n    for index in 0..<operand2.count - 1 {\n        switch operator[index]\
    \ {\n        case \"+\":\n            operand2[index] += operand2[index + 1]\n\
    \            operand2[index + 1] = 0\n        case \"-\":\n            operand2[index]\
    \ -= operand2[index + 1]\n            operand2[index + 1] = 0\n        case \"\
    *\":\n            operand2[index] = operand2[index] * operand2[index + 1]\n  \
    \          operand2[index + 1] = 0\n        case \"//\":\n            operand2[index]\
    \ = operand2[index] % operand2[index + 1]\n            operand2[index + 1] = 0\n\
    \        case \"**\":\n            operand2[index] = operand2[index] * operand2[index\
    \ + 1]\n            operand2[index + 1] = 1\n        default:\n            break\n\
    \        }\n    }\n\n    for index in 0..<operand.count - 1 {\n        result\
    \ += operand2[index]\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpf22sk2y_.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpf22sk2y_.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Write code here\n    switch operator[0]\
    \ {\n    case \"+\":\n        return operand[0]+operand[1]\n    case \"-\":\n\
    \        return operand[0]-operand[1]\n    case \"*\":\n        return operand[0]*operand[1]\n\
    \    case \"//\":\n        return operand[0]/operand[1]\n    case \"**\":\n  \
    \      return operand[0]**operand[1]\n    default:\n        print(\"error: No\
    \ such operator.\")\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp9ibgvk2t.swift:22:12: error: expected expression in 'switch' statement\n\
    \    switch operator[0] {\n           ^\n/tmp/tmp9ibgvk2t.swift:22:20: error:\
    \ '[' is not allowed in operator names\n    switch operator[0] {\n           \
    \        ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Write your code here\n    // return\
    \ 1\n    if operand.count == 0 {\n        return 0\n    }\n\n    if operator.count\
    \ == 0 {\n        return 0\n    }\n    \n    var result: Int = 0\n    \n    if\
    \ operator.count != operand.count {\n        return 0\n    }\n    \n    if operator[0]\
    \ == \"-\" {\n        result = (operand[0] + operand[1]) - operand[2]\n    } else\
    \ if operator[0] == \"+\" {\n        result = (operand[0] + operand[1]) + operand[2]\n\
    \    } else if operator[0] == \"*\" {\n        result = (operand[0] * operand[1])\
    \ + operand[2]\n    } else if operator[0] == \"/\" {\n        result = (operand[0]\
    \ / operand[1]) + operand[2]\n    } else if operator[0] == \"//\" {\n        result\
    \ = (operand[0] / operand[1]) + operand[2]\n    } else {\n        return 0\n \
    \   }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpml5eyr48.swift:27:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 0 {\n       ^\n/tmp/tmpml5eyr48.swift:27:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count == 0 {\n\
    \               ^\n/tmp/tmpml5eyr48.swift:33:8: error: expected expression, var,\
    \ or let in 'if' condition\n    if operator.count != operand.count {\n       ^\n\
    /tmp/tmpml5eyr48.swift:33:16: error: '.' is not allowed in operator names\n  \
    \  if operator.count != operand.count {\n               ^\n/tmp/tmpml5eyr48.swift:37:8:\
    \ error: expected expression, var, or let in 'if' condition\n    if operator[0]\
    \ == \"-\" {\n       ^\n/tmp/tmpml5eyr48.swift:37:16: error: '[' is not allowed\
    \ in operator names\n    if operator[0] == \"-\" {\n               ^\n/tmp/tmpml5eyr48.swift:39:15:\
    \ error: expected expression, var, or let in 'if' condition\n    } else if operator[0]\
    \ == \"+\" {\n              ^\n/tmp/tmpml5eyr48.swift:39:23: error: '[' is not\
    \ allowed in operator names\n    } else if operator[0] == \"+\" {\n          \
    \            ^\n/tmp/tmpml5eyr48.swift:41:15: error: expected expression, var,\
    \ or let in 'if' condition\n    } else if operator[0] == \"*\" {\n           \
    \   ^\n/tmp/tmpml5eyr48.swift:41:23: error: '[' is not allowed in operator names\n\
    \    } else if operator[0] == \"*\" {\n                      ^\n/tmp/tmpml5eyr48.swift:43:15:\
    \ error: expected expression, var, or let in 'if' condition\n    } else if operator[0]\
    \ == \"/\" {\n              ^\n/tmp/tmpml5eyr48.swift:43:23: error: '[' is not\
    \ allowed in operator names\n    } else if operator[0] == \"/\" {\n          \
    \            ^\n/tmp/tmpml5eyr48.swift:45:15: error: expected expression, var,\
    \ or let in 'if' condition\n    } else if operator[0] == \"//\" {\n          \
    \    ^\n/tmp/tmpml5eyr48.swift:45:23: error: '[' is not allowed in operator names\n\
    \    } else if operator[0] == \"//\" {\n                      ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    var leftOperand\
    \ = 0\n    var rightOperand = 0\n    var operatorCount = 0\n    \n    for operatorIndex\
    \ in 0..<operator.count {\n        let operator = operator[operatorIndex]\n  \
    \      switch operator {\n        case \"+\":\n            leftOperand = operand[operatorCount]\n\
    \            rightOperand = operand[operatorCount+1]\n            result += leftOperand\
    \ + rightOperand\n            operatorCount += 2\n        case \"-\":\n      \
    \      leftOperand = operand[operatorCount]\n            rightOperand = operand[operatorCount+1]\n\
    \            result -= leftOperand - rightOperand\n            operatorCount +=\
    \ 2\n        case \"*\":\n            leftOperand = operand[operatorCount]\n \
    \           rightOperand = operand[operatorCount+1]\n            result *= leftOperand\
    \ * rightOperand\n            operatorCount += 2\n        case \"/\":\n      \
    \      leftOperand = operand[operatorCount]\n            rightOperand = operand[operatorCount+1]\n\
    \            result = leftOperand / rightOperand\n            operatorCount +=\
    \ 2\n        case \"**\":\n            leftOperand = operand[operatorCount]\n\
    \            rightOperand = operand[operatorCount+1]\n            result = leftOperand\
    \ ** rightOperand\n            operatorCount += 2\n        default:\n        \
    \    break\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpkb0p8bec.swift:26:30: error: expected expression after operator\n\
    \    for operatorIndex in 0..<operator.count {\n                             ^\n\
    /tmp/tmpkb0p8bec.swift:26:30: error: expected '{' to start the body of for-each\
    \ loop\n    for operatorIndex in 0..<operator.count {\n                      \
    \       ^\n/tmp/tmpkb0p8bec.swift:27:13: error: keyword 'operator' cannot be used\
    \ as an identifier here\n        let operator = operator[operatorIndex]\n    \
    \        ^\n/tmp/tmpkb0p8bec.swift:27:13: note: if this name is unavoidable, use\
    \ backticks to escape it\n        let operator = operator[operatorIndex]\n   \
    \         ^~~~~~~~\n            `operator`\n/tmp/tmpkb0p8bec.swift:27:24: error:\
    \ expected initial value after '='\n        let operator = operator[operatorIndex]\n\
    \                       ^\n/tmp/tmpkb0p8bec.swift:27:23: error: consecutive statements\
    \ on a line must be separated by ';'\n        let operator = operator[operatorIndex]\n\
    \                      ^\n                      ;\n/tmp/tmpkb0p8bec.swift:27:32:\
    \ error: '[' is not allowed in operator names\n        let operator = operator[operatorIndex]\n\
    \                               ^\n/tmp/tmpkb0p8bec.swift:28:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpkb0p8bec.swift:28:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Write your code here.\n    var result\
    \ = 0\n    switch operator[0] {\n    case \"+\":\n        result = operand[0]\
    \ + operand[1]\n    case \"-\":\n        result = operand[0] - operand[1]\n  \
    \  case \"*\":\n        result = operand[0] * operand[1]\n    case \"//\":\n \
    \       result = operand[0] // operand[1]\n    case \"**\":\n        result =\
    \ operand[0] ** operand[1]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgf7qt2de.swift:23:12: error: expected expression in 'switch' statement\n\
    \    switch operator[0] {\n           ^\n/tmp/tmpgf7qt2de.swift:23:20: error:\
    \ '[' is not allowed in operator names\n    switch operator[0] {\n           \
    \        ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for index\
    \ in 1..<operand.count {\n        switch operator[0] {\n        case \"+\":\n\
    \            result += (operand[index])\n        case \"-\":\n            result\
    \ -= (operand[index])\n        case \"*\":\n            result *= (operand[index])\n\
    \        case \"//\":\n            result /= (operand[index])\n        case \"\
    **\":\n            result **= (operand[index])\n        default:\n           \
    \ print(\"Something went wrong\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_2zae4s7.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[0] {\n               ^\n/tmp/tmp_2zae4s7.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[0] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return do_arithmetic(operator, operand,\
    \ true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"\
    **\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpn72e_z68.swift:21:26: error: expected expression in list of expressions\n\
    \    return do_arithmetic(operator, operand, true)\n                         ^\n\
    /tmp/tmpn72e_z68.swift:21:34: error: ',' is not allowed in operator names\n  \
    \  return do_arithmetic(operator, operand, true)\n                           \
    \      ^\n/tmp/tmpn72e_z68.swift:21:12: error: cannot find 'do_arithmetic' in\
    \ scope\n    return do_arithmetic(operator, operand, true)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var oprs = operator\n    var noprs =\
    \ operand\n    var ans: Int = noprs[0]\n    var i: Int = 0\n    while i < oprs.count\
    \ && i < noprs.count {\n        if oprs[i] == \"+\" {\n            ans += noprs[i]\n\
    \        }\n        else if oprs[i] == \"-\" {\n            ans -= noprs[i]\n\
    \        }\n        else if oprs[i] == \"*\" {\n            ans *= noprs[i]\n\
    \        }\n        else if oprs[i] == \"//\" {\n            ans /= noprs[i]\n\
    \        }\n        else if oprs[i] == \"**\" {\n            ans **= noprs[i]\n\
    \        }\n        i += 1\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpuu2wjali.swift:21:16: error: expected initial value after '='\n\
    \    var oprs = operator\n               ^\n/tmp/tmpuu2wjali.swift:21:15: error:\
    \ consecutive statements on a line must be separated by ';'\n    var oprs = operator\n\
    \              ^\n              ;\n/tmp/tmpuu2wjali.swift:21:24: error: expected\
    \ operator name in operator declaration\n    var oprs = operator\n           \
    \            ^\n/tmp/tmpuu2wjali.swift:39:17: error: cannot find operator '**='\
    \ in scope\n            ans **= noprs[i]\n                ^~~\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operand.count < 2 { return 0 }\n\
    \    var stack = [Int]()\n    stack.insert(operand[0], operand[0])\n    for i\
    \ in 1 ..< operand.count {\n        let newValue = stack.removeLast() + operator[stack.count\
    \ - 1] * operand[i]\n        stack.insert(newValue, newValue)\n    }\n    return\
    \ stack.removeLast()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpp0l5wjxm.swift:25:45: error: expected expression after operator\n\
    \        let newValue = stack.removeLast() + operator[stack.count - 1] * operand[i]\n\
    \                                            ^\n/tmp/tmpp0l5wjxm.swift:25:44:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ newValue = stack.removeLast() + operator[stack.count - 1] * operand[i]\n   \
    \                                        ^\n                                 \
    \          ;\n/tmp/tmpp0l5wjxm.swift:25:53: error: '[' is not allowed in operator\
    \ names\n        let newValue = stack.removeLast() + operator[stack.count - 1]\
    \ * operand[i]\n                                                    ^\n/tmp/tmpp0l5wjxm.swift:23:17:\
    \ error: missing argument label 'at:' in call\n    stack.insert(operand[0], operand[0])\n\
    \                ^\n                             at: \n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var index =\
    \ 0\n    \n    while index < operator.count && index < operand.count {\n     \
    \   switch operator[index] {\n        case \"+\":\n            result += operand[index]\n\
    \        case \"-\":\n            result -= operand[index]\n        case \"*\"\
    :\n            result *= operand[index]\n        case \"//\":\n            result\
    \ = result / operand[index]\n        case \"**\":\n            result = (result\
    \ * operand[index])\n        }\n        index += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphps8qo3g.swift:24:19: error: expected expression after operator\n\
    \    while index < operator.count && index < operand.count {\n               \
    \   ^\n/tmp/tmphps8qo3g.swift:24:27: error: '.' is not allowed in operator names\n\
    \    while index < operator.count && index < operand.count {\n               \
    \           ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    switch operator.count {\n    case 0:\n\
    \        print(\"operator: operator array is empty!\")\n    case 1:\n        //\
    \ single operator\n        let op = operator[0]\n        switch op {\n       \
    \ case \"+\":\n            return operand[0] + operand[1]\n        case \"-\"\
    :\n            return operand[0] - operand[1]\n        case \"*\":\n         \
    \   return operand[0] * operand[1]\n        case \"//\":\n            return operand[0]\
    \ // operand[1]\n        case \"**\":\n            return operand[0] ** operand[1]\n\
    \        default:\n            print(\"Invalid operator!\")\n        }\n    case\
    \ 2:\n        // two operands\n        if operand[0] != 0 { // operand is non-negative\n\
    \            let op = operator[0]\n            let op = operand[0]\n         \
    \   switch op {\n            case \"+\":\n                return operand[0] +\
    \ operand[1]\n            case \"-\":\n                return operand[0] - operand[1]\n\
    \            case \"*\":\n                return operand[0] * operand[1]\n   \
    \         case \"//\":\n                return operand[0] // operand[1]\n    \
    \        case \"**\":\n                return operand[0] ** operand[1]\n     \
    \       default:\n                print(\"Invalid operator!\")\n            }\n\
    \        } else { // operand is 0\n            let op = operator[1]\n        \
    \    switch op {\n            case \"+\":\n                return operand[0] +\
    \ operand[1]\n            case \"-\":\n                return operand[0] - operand[1]\n\
    \            case \"*\":\n                return operand[0] * operand[1]\n   \
    \         case \"//\":\n                return operand[0] // operand[1]\n    \
    \        case \"**\":\n                return operand[0] ** operand[1]\n     \
    \       default:\n                print(\"Invalid operator!\")\n            }\n\
    \        }\n    default:\n        print(\"Invalid operator!\")\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpt94p8d_g.swift:21:12: error: expected expression in 'switch' statement\n\
    \    switch operator.count {\n           ^\n/tmp/tmpt94p8d_g.swift:21:20: error:\
    \ '.' is not allowed in operator names\n    switch operator.count {\n        \
    \           ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // add code here\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: '/tmp/tmp02ja3k9z.swift:22:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var op1 = operand[0]\n    var op2 =\
    \ operand[1]\n    var op3 = operand[2]\n    var op4 = operand[3]\n    for op in\
    \ operator {\n        if op == \"+\" {\n            op1 += op2\n        }\n  \
    \      if op == \"-\" {\n            op1 -= op2\n        }\n        if op == \"\
    *\" {\n            op1 *= op2\n        }\n        if op == \"/\" {\n         \
    \   op1 /= op2\n        }\n        if op == \"%\" {\n            op1 %= op2\n\
    \        }\n        if op == \"^\" {\n            op1 ^= op2\n        }\n    \
    \    if op == \"==\" {\n            if op2 == 0 {\n                return 0\n\
    \            }\n        }\n        if op == \"<\" {\n            if op2 < 0 {\n\
    \                return -1\n            }\n        }\n        if op == \">\" {\n\
    \            if op2 > 0 {\n                return 1\n            }\n        }\n\
    \        if op == \"<=\" { \n            if op2 > 0 {\n                return\
    \ 1\n            }\n        }\n        if op == \">=\" { \n            if op2\
    \ > 0 {\n                return 1\n            }\n        }\n    }\n    return\
    \ op1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"\
    **\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp0qaus6sd.swift:25:15: error: expected Sequence expression for for-each\
    \ loop\n    for op in operator {\n              ^\n/tmp/tmp0qaus6sd.swift:25:15:\
    \ error: expected '{' to start the body of for-each loop\n    for op in operator\
    \ {\n              ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    \n    let opArr = operator\n \
    \   let opLength = opArr.count\n    let numArr = operand\n    let numLength  =\
    \ numArr.count\n    \n    if opLength < 1 || numLength < 2 {\n        print(\"\
    Invalid Expression: At least one operator and one number must be specified.\"\
    )\n        return 0\n    }\n    \n    if numLength == 1 {\n        return operand[0]\n\
    \    }\n    \n    if opArr.last == String(operator[0]) {\n        // The last\
    \ operator in the operator array is the same as the operator for the first operand.\n\
    \        return operand[0] + do_algebra(opArr[1..<opLength], operand[1..<numLength])\n\
    \    }\n    \n    if opArr.last == \"+\" || opArr.last == \"-\" || opArr.last\
    \ == \"*\" || opArr.last == \"/\" {\n        // If the last operator in the operator\
    \ array is a basic algebra operation, then we can evaluate the expression\n  \
    \      \n        if numLength > opLength {\n            print(\"Invalid Expression:\
    \ Too many operands. \")\n            return 0\n        }\n        \n        \n\
    \        let lastIndex = numLength - opLength\n        \n        if numLength\
    \ == opLength + 1 {\n            // When only one operand is given and that operand\
    \ is a basic algebra operation, then \n            // we can evaluate the expression\n\
    \            return operand[0] + do_algebra(opArr[1..<opLength], operand[1..<lastIndex])\n\
    \        }\n        \n        \n        let leftOp = operand[1..<lastIndex]\n\
    \        let rightOp = operand[lastIndex...<numLength]\n        \n        switch\
    \ opArr.last {\n            case \"+\":\n                return operand[0] + do_algebra(opArr[1..<opLength],\
    \ leftOp) + do_algebra(opArr[opLength+1..<opArr.count], rightOp)\n           \
    \ case \"-\":\n                return operand[0] + do_algebra(opArr[1..<opLength],\
    \ leftOp) - do_algebra(opArr[opLength+1..<opArr.count], rightOp)\n           \
    \ case \"*\":\n                return operand[0] + do_algebra(opArr[1..<opLength],\
    \ leftOp) * do_algebra(opArr[opLength+1..<opArr.count], rightOp)\n           \
    \ case \"/\":\n                return operand[0] + do_algebra(opArr[1..<opLength],\
    \ leftOp) / do_algebra(opArr[opLength+1..<opArr.count], rightOp)\n           \
    \ default:\n                println(\"Invalid Expression: Can only use +,-,*,/\
    \ as operators.\")\n                return 0\n        }\n    }\n    \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp6s378o_9.swift:23:17: error: expected initial value after '='\n\
    \    let opArr = operator\n                ^\n/tmp/tmp6s378o_9.swift:23:16: error:\
    \ consecutive statements on a line must be separated by ';'\n    let opArr = operator\n\
    \               ^\n               ;\n/tmp/tmp6s378o_9.swift:23:25: error: expected\
    \ operator name in operator declaration\n    let opArr = operator\n          \
    \              ^\n/tmp/tmp6s378o_9.swift:37:29: error: expected expression in\
    \ list of expressions\n    if opArr.last == String(operator[0]) {\n          \
    \                  ^\n/tmp/tmp6s378o_9.swift:37:37: error: '[' is not allowed\
    \ in operator names\n    if opArr.last == String(operator[0]) {\n            \
    \                        ^\n/tmp/tmp6s378o_9.swift:56:43: error: missing argument\
    \ labels 'operator:operand:' in call\n            return operand[0] + do_algebra(opArr[1..<opLength],\
    \ operand[1..<lastIndex])\n                                          ^\n     \
    \                                      operator:            operand: \n/tmp/tmp6s378o_9.swift:56:72:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n            return operand[0] + do_algebra(opArr[1..<opLength], operand[1..<lastIndex])\n\
    \                                                                       ^\n/tmp/tmp6s378o_9.swift:61:40:\
    \ error: cannot find operator '...<' in scope; did you mean '..<'?\n        let\
    \ rightOp = operand[lastIndex...<numLength]\n                                \
    \       ^~~~\n                                       ..<\n/tmp/tmp6s378o_9.swift:65:47:\
    \ error: missing argument labels 'operator:operand:' in call\n               \
    \ return operand[0] + do_algebra(opArr[1..<opLength], leftOp) + do_algebra(opArr[opLength+1..<opArr.count],\
    \ rightOp)\n                                              ^\n                \
    \                               operator:            operand: \n/tmp/tmp6s378o_9.swift:65:89:\
    \ error: missing argument labels 'operator:operand:' in call\n               \
    \ return operand[0] + do_algebra(opArr[1..<opLength], leftOp) + do_algebra(opAr"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operand.count {\n        result = result + operand[index] * operator[operand.count\
    \ - 1 - index]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpruhtuicy.swift:23:44: error: expected expression after operator\n\
    \        result = result + operand[index] * operator[operand.count - 1 - index]\n\
    \                                           ^\n/tmp/tmpruhtuicy.swift:23:52: error:\
    \ '[' is not allowed in operator names\n        result = result + operand[index]\
    \ * operator[operand.count - 1 - index]\n                                    \
    \               ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    switch operator.count {\n    case 0:\n\
    \        print(\"Operator is empty\")\n        return -1\n    case 1:\n      \
    \  return operand[0] + do_algebra(operator: operator, operand: operand[1..<operand.count])\n\
    \    default:\n        var sum: Int = 0\n        for _ in 0..<operator.count {\n\
    \            sum += operand[operator.count - 1] * do_algebra(operator: operator,\
    \ operand: operand[0..<operand.count])\n        }\n        return sum\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp8guciiiu.swift:21:12: error: expected expression in 'switch' statement\n\
    \    switch operator.count {\n           ^\n/tmp/tmp8guciiiu.swift:21:20: error:\
    \ '.' is not allowed in operator names\n    switch operator.count {\n        \
    \           ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var index =\
    \ 0\n\n    operator.repeatedArray().forEach { (operatorString) in\n        if\
    \ let index = operator.firstIndex(of: operatorString) {\n            let result\
    \ = operand[index] + operand[index+1]\n\n            result += do_algebra(operator:\
    \ operator, operand: [result])\n\n        } else {\n            print(\"ERROR:\
    \ Operator \\(operatorString) does not exist!\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpjkkzmoo_.swift:24:13: error: '.' is not allowed in operator names\n\
    \    operator.repeatedArray().forEach { (operatorString) in\n            ^\n/tmp/tmpjkkzmoo_.swift:21:9:\
    \ warning: variable 'result' was never mutated; consider changing to 'let' constant\n\
    \    var result: Int = 0\n    ~~~ ^\n    let\n/tmp/tmpjkkzmoo_.swift:22:9: warning:\
    \ initialization of variable 'index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var index = 0\n    ~~~~^~~~~\n    _\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count != operand.count {\n\
    \        throw MyErrors.InvalidOperationError.init(format: \"Invalid operation:\
    \ \\(operator) \\(operand). The count of operand \\(operand.count) must be equal\
    \ to the count of operator \\(operator.count)\")\n    }\n    var total = 1\n \
    \   \n    switch operator.first {\n    case \"+\":\n        total = operand[0]\
    \ + operand[1]\n    case \"-\":\n        total = operand[0] - operand[1]\n   \
    \ case \"*\":\n        total = operand[0] * operand[1]\n    case \"/\":\n    \
    \    if operand[1] != 0 {\n            total = operand[0] / operand[1]\n     \
    \   } else {\n            throw MyErrors.InvalidOperationError.init(format: \"\
    Cannot divide by zero. \\(operand[0])\")\n        }\n    case \"**\":\n      \
    \  total = operand[0] ** operand[1]\n    default:\n        throw MyErrors.InvalidOperationError.init(format:\
    \ \"Invalid operation: \\(operator)\")\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpt9tmgfak.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count != operand.count {\n       ^\n/tmp/tmpt9tmgfak.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count != operand.count\
    \ {\n               ^\n/tmp/tmpt9tmgfak.swift:26:12: error: expected expression\
    \ in 'switch' statement\n    switch operator.first {\n           ^\n/tmp/tmpt9tmgfak.swift:26:20:\
    \ error: '.' is not allowed in operator names\n    switch operator.first {\n \
    \                  ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Your code here\n    // TODO: convert\
    \ this line to Swift syntax\n    var result: Int = 0\n    for i in 0..<operators.count{\n\
    \        var temp: Int = 0\n        switch operators[i] {\n        case \"+\"\
    :\n            temp += operand[i]\n        case \"-\":\n            temp -= operand[i]\n\
    \        case \"*\":\n            temp *= operand[i]\n        case \"/\":\n  \
    \          temp /= operand[i]\n        case \"//\":\n            temp /= operand[i]\n\
    \        case \"**\":\n            temp **= operand[i]\n        }\n        result\
    \ = temp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpn38g35n_.swift:24:18: error: cannot find 'operators' in scope\n\
    \    for i in 0..<operators.count{\n                 ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var sum: Int = 0\n    for i in 0..<operand.count-1\
    \ {\n        sum += operand[i] * operator[i]\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpjjqk23t7.swift:23:29: error: expected expression after operator\n\
    \        sum += operand[i] * operator[i]\n                            ^\n/tmp/tmpjjqk23t7.swift:23:37:\
    \ error: '[' is not allowed in operator names\n        sum += operand[i] * operator[i]\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // TODO: Complete the code\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"**\"\
    , \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"\
    +\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpr4eh36er/tmpr4eh36er.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c699dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c696d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c696d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c696d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4eh36er                        0x00005595de33647b <unavailable> + 5243

    5    libc.so.6                          0x00002b9c69bcb460 __libc_start_main +
    245

    6    tmpr4eh36er                        0x00005595de336029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for index\
    \ in 1...operand.count {\n        if operator[index] != '+' && operator[index]\
    \ != '-' && operator[index] != '*' && operator[index] != '/' && operator[index]\
    \ != '**' {\n            print(\"Error: Operator is not an operator\")\n     \
    \       return 0;\n        }\n        switch operator[index] {\n        case \"\
    +\":\n            result += operand[index]\n        case \"-\":\n            result\
    \ -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"/\":\n            if operand[index] == 0 {\n                print(\"\
    Error: Divide by zero\")\n                return 0;\n            }\n         \
    \   result = result / operand[index]\n        case \"**\":\n            if operand[index]\
    \ == 0 {\n                print(\"Error: Raise to zero\")\n                return\
    \ 0;\n            }\n            result **= operand[index]\n        default:\n\
    \            print(\"Error: Operator is not an operator\")\n            return\
    \ 0;\n        }\n    }\n    return result;\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpnujkpp0a.swift:23:12: error: expected expression, var, or let in\
    \ 'if' condition\n        if operator[index] != '+' && operator[index] != '-'\
    \ && operator[index] != '*' && operator[index] != '/' && operator[index] != '**'\
    \ {\n           ^\n/tmp/tmpnujkpp0a.swift:23:20: error: '[' is not allowed in\
    \ operator names\n        if operator[index] != '+' && operator[index] != '-'\
    \ && operator[index] != '*' && operator[index] != '/' && operator[index] != '**'\
    \ {\n                   ^\n/tmp/tmpnujkpp0a.swift:23:31: error: single-quoted\
    \ string literal found, use '\"'\n        if operator[index] != '+' && operator[index]\
    \ != '-' && operator[index] != '*' && operator[index] != '/' && operator[index]\
    \ != '**' {\n                              ^~~\n                             \
    \ \"+\"\n/tmp/tmpnujkpp0a.swift:23:46: error: '[' is not allowed in operator names\n\
    \        if operator[index] != '+' && operator[index] != '-' && operator[index]\
    \ != '*' && operator[index] != '/' && operator[index] != '**' {\n            \
    \                                 ^\n/tmp/tmpnujkpp0a.swift:23:57: error: single-quoted\
    \ string literal found, use '\"'\n        if operator[index] != '+' && operator[index]\
    \ != '-' && operator[index] != '*' && operator[index] != '/' && operator[index]\
    \ != '**' {\n                                                        ^~~\n   \
    \                                                     \"-\"\n/tmp/tmpnujkpp0a.swift:23:72:\
    \ error: '[' is not allowed in operator names\n        if operator[index] != '+'\
    \ && operator[index] != '-' && operator[index] != '*' && operator[index] != '/'\
    \ && operator[index] != '**' {\n                                             \
    \                          ^\n/tmp/tmpnujkpp0a.swift:23:83: error: single-quoted\
    \ string literal found, use '\"'\n        if operator[index] != '+' && operator[index]\
    \ != '-' && operator[index] != '*' && operator[index] != '/' && operator[index]\
    \ != '**' {\n                                                                \
    \                  ^~~\n                                                     \
    \                           "
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    \n    for i in 0..<operand.count\
    \ {\n        var ops = \"\"\n        for _ in operator.reverse() {\n         \
    \   ops = ops + operator[0]\n        }\n        if operand[i] == 0 {\n       \
    \     ops = ops + operator[0]\n        } else {\n            ops = ops + operator[0]\
    \ + \"(\" + operand[i].description + \")\"\n        }\n        result += operand[i]\
    \ * Int(evaluate(ops))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpajyb5eub.swift:25:18: error: expected Sequence expression for for-each\
    \ loop\n        for _ in operator.reverse() {\n                 ^\n/tmp/tmpajyb5eub.swift:25:18:\
    \ error: expected '{' to start the body of for-each loop\n        for _ in operator.reverse()\
    \ {\n                 ^\n/tmp/tmpajyb5eub.swift:26:25: error: expected expression\
    \ after operator\n            ops = ops + operator[0]\n                      \
    \  ^\n/tmp/tmpajyb5eub.swift:26:33: error: '[' is not allowed in operator names\n\
    \            ops = ops + operator[0]\n                                ^\n/tmp/tmpajyb5eub.swift:29:25:\
    \ error: expected expression after operator\n            ops = ops + operator[0]\n\
    \                        ^\n/tmp/tmpajyb5eub.swift:29:33: error: '[' is not allowed\
    \ in operator names\n            ops = ops + operator[0]\n                   \
    \             ^\n/tmp/tmpajyb5eub.swift:31:25: error: expected expression after\
    \ operator\n            ops = ops + operator[0] + \"(\" + operand[i].description\
    \ + \")\"\n                        ^\n/tmp/tmpajyb5eub.swift:31:33: error: '['\
    \ is not allowed in operator names\n            ops = ops + operator[0] + \"(\"\
    \ + operand[i].description + \")\"\n                                ^\n/tmp/tmpajyb5eub.swift:33:36:\
    \ error: cannot find 'evaluate' in scope\n        result += operand[i] * Int(evaluate(ops))\n\
    \                                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let stack = Array<Int>()\n    for x\
    \ in operand.dropFirst() {\n        stack.append(x)\n    }\n    \n    for a in\
    \ operator {\n        switch a {\n        case \"+\": stack.append(stack.pop()\
    \ + stack.pop())\n        case \"-\": stack.append(stack.pop() - stack.pop())\n\
    \        case \"*\": stack.append(stack.pop() * stack.pop())\n        case \"\
    //\": stack.append(stack.pop() / stack.pop())\n        case \"**\": stack.append(pow(stack.pop(),\
    \ stack.pop()))\n        default: fatalError(\"unknown operator\")\n        }\n\
    \    }\n    return stack[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpsam58b2g.swift:26:14: error: expected Sequence expression for for-each\
    \ loop\n    for a in operator {\n             ^\n/tmp/tmpsam58b2g.swift:26:14:\
    \ error: expected '{' to start the body of for-each loop\n    for a in operator\
    \ {\n             ^\n/tmp/tmpsam58b2g.swift:23:15: error: cannot use mutating\
    \ member on immutable value: 'stack' is a 'let' constant\n        stack.append(x)\n\
    \        ~~~~~ ^\n/tmp/tmpsam58b2g.swift:21:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let stack = Array<Int>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result : Int = 0\n    for i in 0..<operator.count\
    \ {\n        let operator = operator[i]\n        let operand1 = operand[i]\n \
    \       let operand2 = operand[i+1]\n        switch operator {\n            case\
    \ \"+\":\n                result += operand1 + operand2\n            case \"-\"\
    :\n                result -= operand1 - operand2\n            case \"*\":\n  \
    \              result *= operand1 * operand2\n            case \"/\":\n      \
    \          result /= operand1 / operand2\n            case \"**\":\n         \
    \       result **= operand1\n            default:\n                break\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpxxxuouzh.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpxxxuouzh.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpxxxuouzh.swift:23:13: error: keyword 'operator'\
    \ cannot be used as an identifier here\n        let operator = operator[i]\n \
    \           ^\n/tmp/tmpxxxuouzh.swift:23:13: note: if this name is unavoidable,\
    \ use backticks to escape it\n        let operator = operator[i]\n           \
    \ ^~~~~~~~\n            `operator`\n/tmp/tmpxxxuouzh.swift:23:24: error: expected\
    \ initial value after '='\n        let operator = operator[i]\n              \
    \         ^\n/tmp/tmpxxxuouzh.swift:23:23: error: consecutive statements on a\
    \ line must be separated by ';'\n        let operator = operator[i]\n        \
    \              ^\n                      ;\n/tmp/tmpxxxuouzh.swift:23:32: error:\
    \ '[' is not allowed in operator names\n        let operator = operator[i]\n \
    \                              ^\n/tmp/tmpxxxuouzh.swift:26:16: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpxxxuouzh.swift:26:25: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return do_algebra_helper(operator, operand,\
    \ operator[operand.count-1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwomzdcq1.swift:21:30: error: expected expression in list of expressions\n\
    \    return do_algebra_helper(operator, operand, operator[operand.count-1])\n\
    \                             ^\n/tmp/tmpwomzdcq1.swift:21:38: error: ',' is not\
    \ allowed in operator names\n    return do_algebra_helper(operator, operand, operator[operand.count-1])\n\
    \                                     ^\n/tmp/tmpwomzdcq1.swift:21:57: error:\
    \ '[' is not allowed in operator names\n    return do_algebra_helper(operator,\
    \ operand, operator[operand.count-1])\n                                      \
    \                  ^\n/tmp/tmpwomzdcq1.swift:21:12: error: cannot find 'do_algebra_helper'\
    \ in scope\n    return do_algebra_helper(operator, operand, operator[operand.count-1])\n\
    \           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    \n    for index1\
    \ in 0..<operand.count {\n        for index2 in 0..<operator.count {\n       \
    \     switch (operator[index2], operand[index1]) {\n            case (., let value):\n\
    \                result += value\n            case (+, let value):\n         \
    \       result -= value\n            case (-, let value):\n                result\
    \ *= value\n            case (*, let value):\n                result /= value\n\
    \            case (/, let value):\n                result %= value\n         \
    \   case (^, let value):\n                result **= value\n            default:\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpecviaz8e.swift:24:27: error: expected expression after operator\n\
    \        for index2 in 0..<operator.count {\n                          ^\n/tmp/tmpecviaz8e.swift:24:27:\
    \ error: expected '{' to start the body of for-each loop\n        for index2 in\
    \ 0..<operator.count {\n                          ^\n/tmp/tmpecviaz8e.swift:25:21:\
    \ error: expected expression in list of expressions\n            switch (operator[index2],\
    \ operand[index1]) {\n                    ^\n/tmp/tmpecviaz8e.swift:25:29: error:\
    \ '[' is not allowed in operator names\n            switch (operator[index2],\
    \ operand[index1]) {\n                            ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tswitch operator[0] {\n\tcase \"+\":\n\t\
    \treturn operand[0] + operand[1]\n\tcase \"-\":\n\t\treturn operand[0] - operand[1]\n\
    \tcase \"*\":\n\t\treturn operand[0] * operand[1]\n\tcase \"/\":\n\t\tif operand[1]\
    \ == 0 {\n\t\t\treturn 0\n\t\t}\n\t\treturn operand[0] / operand[1]\n\tcase \"\
    **\":\n\t\treturn operand[0] * operand[0]\n\t}\n\treturn 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgr_pezbe.swift:21:9: error: expected expression in 'switch' statement\n\
    \        switch operator[0] {\n               ^\n/tmp/tmpgr_pezbe.swift:21:17:\
    \ error: '[' is not allowed in operator names\n        switch operator[0] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var num = 0\n    for idx in 0..<operator.count\
    \ {\n        switch operator[idx] {\n        case \"+\":\n            num += operand[idx]\n\
    \        case \"-\":\n            num -= operand[idx]\n        case \"*\":\n \
    \           num *= operand[idx]\n        case \"//\":\n            num -= operand[idx]\n\
    \            num -= operand[idx]\n        case \"**\":\n            num *= operand[idx]\n\
    \        }\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp6c3a4sqj.swift:22:20: error: expected expression after operator\n\
    \    for idx in 0..<operator.count {\n                   ^\n/tmp/tmp6c3a4sqj.swift:22:20:\
    \ error: expected '{' to start the body of for-each loop\n    for idx in 0..<operator.count\
    \ {\n                   ^\n/tmp/tmp6c3a4sqj.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[idx] {\n               ^\n/tmp/tmp6c3a4sqj.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[idx] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var total = 0\n    for index in 0..<operator.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            total\
    \ += operand[index]\n        case \"-\":\n            total -= operand[index]\n\
    \        case \"*\":\n            total *= operand[index]\n        case \"//\"\
    :\n            total /= operand[index]\n        case \"**\":\n            total\
    \ *= operand[index]\n        default:\n            return -1\n        }\n    }\n\
    \    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpytxb8jnd.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpytxb8jnd.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpytxb8jnd.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpytxb8jnd.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i]\n        case \"-\":\n            result -= operand[i]\n        case\
    \ \"*\":\n            result *= operand[i]\n        case \"//\":\n           \
    \ result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpeljmm5yw.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpeljmm5yw.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpeljmm5yw.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpeljmm5yw.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0\n\
    \    while i < operator.count && i < operand.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i]\n        case \"-\"\
    :\n            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result **= operand[i]\n        default:\n        \
    \    fatalError(\"bad operator\")\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp53_w9ixp.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count && i < operand.count {\n              ^\n/tmp/tmp53_w9ixp.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count &&\
    \ i < operand.count {\n                      ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var op1: Int\
    \ = 0\n    var op2: Int = 0\n    \n    for i in 0..<operator.count {\n       \
    \ let op: Int = operand[i]\n        op1 = op1 * op\n        op2 = op2 * op\n \
    \       result = result + (op1 + op2)\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp4gezv87j.swift:25:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp4gezv87j.swift:25:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var leftOperand = operand[0]\n    var\
    \ rightOperand = operand[1]\n    var resultOperand = leftOperand\n    var operatorIndex\
    \ = 0\n    var leftOperator = operator[0]\n    var rightOperator = operator[1]\n\
    \    switch operatorIndex {\n    case 0:\n        resultOperand = leftOperand\
    \ + rightOperand\n    case 1:\n        resultOperand = leftOperand - rightOperand\n\
    \    case 2:\n        resultOperand = leftOperand * rightOperand\n    case 3:\n\
    \        resultOperand = leftOperand / rightOperand\n    case 4:\n        resultOperand\
    \ = leftOperand / rightOperand ** rightOperand\n    case 5:\n        resultOperand\
    \ = leftOperand * rightOperand ** rightOperand\n    default:\n        break\n\
    \    }\n    return resultOperand\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmph_r60_xh.swift:25:24: error: expected initial value after '='\n\
    \    var leftOperator = operator[0]\n                       ^\n/tmp/tmph_r60_xh.swift:25:23:\
    \ error: consecutive statements on a line must be separated by ';'\n    var leftOperator\
    \ = operator[0]\n                      ^\n                      ;\n/tmp/tmph_r60_xh.swift:25:32:\
    \ error: '[' is not allowed in operator names\n    var leftOperator = operator[0]\n\
    \                               ^\n/tmp/tmph_r60_xh.swift:26:25: error: expected\
    \ initial value after '='\n    var rightOperator = operator[1]\n             \
    \           ^\n/tmp/tmph_r60_xh.swift:26:24: error: consecutive statements on\
    \ a line must be separated by ';'\n    var rightOperator = operator[1]\n     \
    \                  ^\n                       ;\n/tmp/tmph_r60_xh.swift:26:33:\
    \ error: '[' is not allowed in operator names\n    var rightOperator = operator[1]\n\
    \                                ^\n/tmp/tmph_r60_xh.swift:37:52: error: cannot\
    \ find operator '**' in scope\n        resultOperand = leftOperand / rightOperand\
    \ ** rightOperand\n                                                   ^~\n/tmp/tmph_r60_xh.swift:39:52:\
    \ error: cannot find operator '**' in scope\n        resultOperand = leftOperand\
    \ * rightOperand ** rightOperand\n                                           \
    \        ^~\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    switch operator[operator.count - 1]\
    \ {\n    case \"+\":\n        return operand[0]\n    case \"-\":\n        return\
    \ -operand[0]\n    case \"*\":\n        return operand[0] * operand[1]\n    case\
    \ \"//\":\n        if operand[1] == 0 {\n            throw ErrorMessage(\"Cannot\
    \ divide by zero\")\n        }\n        return operand[0] / operand[1]\n    case\
    \ \"**\":\n        if operand[1] == 0 {\n            throw ErrorMessage(\"Cannot\
    \ raise to zero\")\n        }\n        return operand[0] ** operand[1]\n    default:\n\
    \        throw ErrorMessage(\"Unknown operator\")\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3ecfopor.swift:21:12: error: expected expression in 'switch' statement\n\
    \    switch operator[operator.count - 1] {\n           ^\n/tmp/tmp3ecfopor.swift:21:20:\
    \ error: '[' is not allowed in operator names\n    switch operator[operator.count\
    \ - 1] {\n                   ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return operator.reduce(0, { $0 + operand[$0]\
    \ * operand[$1] }) // Operator is the first argument\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpv5dg90wj.swift:21:11: error: consecutive statements on a line must\
    \ be separated by ';'\n    return operator.reduce(0, { $0 + operand[$0] * operand[$1]\
    \ }) // Operator is the first argument\n          ^\n          ;\n/tmp/tmpv5dg90wj.swift:21:20:\
    \ error: '.' is not allowed in operator names\n    return operator.reduce(0, {\
    \ $0 + operand[$0] * operand[$1] }) // Operator is the first argument\n      \
    \             ^\n/tmp/tmpv5dg90wj.swift:21:5: error: non-void function should\
    \ return a value\n    return operator.reduce(0, { $0 + operand[$0] * operand[$1]\
    \ }) // Operator is the first argument\n    ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    var result = 0\n    \n    for\
    \ i in 0..<operator.count {\n        let leftVal = operand[0..i]\n        let\
    \ rightVal = operand[i+1..<operand.count]\n        \n        let leftOperand =\
    \ operand[0..i]\n        let rightOperand = operand[i+1..<operand.count]\n   \
    \     \n        let left = do_calculate(leftOperand, operator[i])\n        let\
    \ right = do_calculate(rightOperand, operator[i])\n        \n        switch operator[i]\
    \ {\n        case \"+\":\n            result = result + left + right\n       \
    \ case \"-\":\n            result = result - left + right\n        case \"*\"\
    :\n            result = result * left + right\n        case \"/\":\n         \
    \   if left == 0 {\n                throw(Errors.arithmeticError())\n        \
    \    }\n            result = result / left + right\n        case \"^\":\n    \
    \        if left == 0 {\n                throw(Errors.arithmeticError())\n   \
    \         }\n            result = result ^ left + right\n        case \"**\":\n\
    \            result = result ** left + right\n        default:\n            throw(Errors.arithmeticError())\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp15u_kqo5.swift:24:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp15u_kqo5.swift:24:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp15u_kqo5.swift:31:46: error: expected expression\
    \ in list of expressions\n        let left = do_calculate(leftOperand, operator[i])\n\
    \                                             ^\n/tmp/tmp15u_kqo5.swift:31:45:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ left = do_calculate(leftOperand, operator[i])\n                            \
    \                ^\n                                            ;\n/tmp/tmp15u_kqo5.swift:31:54:\
    \ error: '[' is not allowed in operator names\n        let left = do_calculate(leftOperand,\
    \ operator[i])\n                                                     ^\n/tmp/tmp15u_kqo5.swift:32:48:\
    \ error: expected expression in list of expressions\n        let right = do_calculate(rightOperand,\
    \ operator[i])\n                                               ^\n/tmp/tmp15u_kqo5.swift:32:47:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ right = do_calculate(rightOperand, operator[i])\n                          \
    \                    ^\n                                              ;\n/tmp/tmp15u_kqo5.swift:32:56:\
    \ error: '[' is not allowed in operator names\n        let right = do_calculate(rightOperand,\
    \ operator[i])\n                                                       ^\n/tmp/tmp15u_kqo5.swift:34:16:\
    \ error: expected expression in 'switch' statement\n        switch operator[i]\
    \ {\n               ^\n/tmp/tmp15u_kqo5.swift:34:24: error: '[' is not allowed\
    \ in operator names\n        switch operator[i] {\n                       ^\n\
    /tmp/tmp15u_kqo5.swift:25:32: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n        let leftVal = operand[0..i]\n                         \
    \      ^~\n                               ...\n/tmp/tmp15u_kqo5.swift:28:36: error:\
    \ cannot find operator '..' in scope; did you mean "
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var res: Int = 0\n    if operator.count\
    \ > operand.count {\n        return res\n    } else {\n        for i1 = 0; i1\
    \ < operator.count - 1; i1++ {\n            if operator[i1] == \"+\" {\n     \
    \           res = res + operand[i1] + operand[i1 + 1]\n            } else {\n\
    \                res = res - operand[i1] * operand[i1 + 1]\n            }\n  \
    \      }\n        return res / operand[operator.count - 1]\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmcar_hce.swift:22:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count > operand.count {\n       ^\n/tmp/tmpmcar_hce.swift:22:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count > operand.count\
    \ {\n               ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var opCount = 0\n    var index = 0\n\
    \    var result = 0\n    for _ in 0..<operator.count {\n        if operand[index]\
    \ == 0 {\n            break\n        }\n        if operator[index] != \"+\" &&\
    \ operator[index] != \"-\" && operator[index] != \"*\" && operator[index] != \"\
    //\" && operator[index] != \"**\" {\n            print(\"The operator is not supported!\"\
    )\n            return\n        }\n        if operator[index] != \"**\" && operand[index]\
    \ != 0 {\n            result = result * operand[index]\n            opCount =\
    \ opCount + 1\n        } else {\n            result = result + operand[index]\n\
    \            opCount = opCount + 1\n        }\n        index = index + 1\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpamq53_4y.swift:24:18: error: expected expression after operator\n\
    \    for _ in 0..<operator.count {\n                 ^\n/tmp/tmpamq53_4y.swift:24:18:\
    \ error: expected '{' to start the body of for-each loop\n    for _ in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpamq53_4y.swift:28:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[index] != \"+\" && operator[index]\
    \ != \"-\" && operator[index] != \"*\" && operator[index] != \"//\" && operator[index]\
    \ != \"**\" {\n           ^\n/tmp/tmpamq53_4y.swift:28:20: error: '[' is not allowed\
    \ in operator names\n        if operator[index] != \"+\" && operator[index] !=\
    \ \"-\" && operator[index] != \"*\" && operator[index] != \"//\" && operator[index]\
    \ != \"**\" {\n                   ^\n/tmp/tmpamq53_4y.swift:28:46: error: '['\
    \ is not allowed in operator names\n        if operator[index] != \"+\" && operator[index]\
    \ != \"-\" && operator[index] != \"*\" && operator[index] != \"//\" && operator[index]\
    \ != \"**\" {\n                                             ^\n/tmp/tmpamq53_4y.swift:28:72:\
    \ error: '[' is not allowed in operator names\n        if operator[index] != \"\
    +\" && operator[index] != \"-\" && operator[index] != \"*\" && operator[index]\
    \ != \"//\" && operator[index] != \"**\" {\n                                 \
    \                                      ^\n/tmp/tmpamq53_4y.swift:28:98: error:\
    \ '[' is not allowed in operator names\n        if operator[index] != \"+\" &&\
    \ operator[index] != \"-\" && operator[index] != \"*\" && operator[index] != \"\
    //\" && operator[index] != \"**\" {\n                                        \
    \                                                         ^\n/tmp/tmpamq53_4y.swift:28:125:\
    \ error: '[' is not allowed in operator names\n        if operator[index] != \"\
    +\" && operator[index] != \"-\" && operator[index] != \"*\" && operator[index]\
    \ != \"//\" && operator[index] != \"**\" {\n                                 \
    \                                                                            \
    \               ^\n/tmp/tmpamq53_4y.swift:32:12: error: expected expression, var,\
    \ or let in 'if' condition\n       "
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let lengthOperator = operator.count\n\
    \    let lengthOperand = operand.count\n    guard lengthOperand > 1 else {\n \
    \       return 0\n    }\n    guard lengthOperator > 1 else {\n        return 0\n\
    \    }\n    guard operand.count != operator.count - 1 else {\n        return 0\n\
    \    }\n    guard operand.count == (lengthOperand - 1) else {\n        return\
    \ 0\n    }\n    var result = 0\n    for i in 0..<lengthOperand {\n        if operand[i]\
    \ == 0 {\n            continue\n        }\n        var power = operand[i]\n  \
    \      for j in 0..<lengthOperand - 1 {\n            power = operator[j](power)\
    \ * operand[j + 1]\n        }\n        result = result + power\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_pkswqbr.swift:21:26: error: expected initial value after '='\n\
    \    let lengthOperator = operator.count\n                         ^\n/tmp/tmp_pkswqbr.swift:21:25:\
    \ error: consecutive statements on a line must be separated by ';'\n    let lengthOperator\
    \ = operator.count\n                        ^\n                        ;\n/tmp/tmp_pkswqbr.swift:21:34:\
    \ error: '.' is not allowed in operator names\n    let lengthOperator = operator.count\n\
    \                                 ^\n/tmp/tmp_pkswqbr.swift:29:28: error: expected\
    \ expression after operator\n    guard operand.count != operator.count - 1 else\
    \ {\n                           ^\n/tmp/tmp_pkswqbr.swift:29:36: error: '.' is\
    \ not allowed in operator names\n    guard operand.count != operator.count - 1\
    \ else {\n                                   ^\n/tmp/tmp_pkswqbr.swift:42:21:\
    \ error: expected expression in assignment\n            power = operator[j](power)\
    \ * operand[j + 1]\n                    ^\n/tmp/tmp_pkswqbr.swift:42:29: error:\
    \ '[' is not allowed in operator names\n            power = operator[j](power)\
    \ * operand[j + 1]\n                            ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Implement here\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: '/tmp/tmpseyl_rlk.swift:22:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    let operator_length = operator.count\n\
    \    let operands_count = operand.count\n    if operator_length <= 0 || operands_count\
    \ < 2 {\n        return 0\n    }\n    var res = operand[0]\n    for i in 1..<operands_count\
    \ {\n        res += operand[i] * operator[operator_length-1] + do_algebra(operator,\
    \ operand[i..<operands_count-1])\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp2t5if247.swift:22:27: error: expected initial value after '='\n\
    \    let operator_length = operator.count\n                          ^\n/tmp/tmp2t5if247.swift:22:26:\
    \ error: consecutive statements on a line must be separated by ';'\n    let operator_length\
    \ = operator.count\n                         ^\n                         ;\n/tmp/tmp2t5if247.swift:22:35:\
    \ error: '.' is not allowed in operator names\n    let operator_length = operator.count\n\
    \                                  ^\n/tmp/tmp2t5if247.swift:29:29: error: expected\
    \ expression after operator\n        res += operand[i] * operator[operator_length-1]\
    \ + do_algebra(operator, operand[i..<operands_count-1])\n                    \
    \        ^\n/tmp/tmp2t5if247.swift:29:37: error: '[' is not allowed in operator\
    \ names\n        res += operand[i] * operator[operator_length-1] + do_algebra(operator,\
    \ operand[i..<operands_count-1])\n                                    ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator == nil {\n        return\
    \ operand[0]\n    }\n    switch operator[0] {\n    case \"+\": \n        return\
    \ operand[0] + operand[1]\n    case \"-\": \n        return operand[0] - operand[1]\n\
    \    case \"*\": \n        return operand[0] * operand[1]\n    case \"//\": \n\
    \        return operand[0] / operand[1]\n    case \"**\": \n        return operand[0]\
    \ ** operand[1]\n    default:\n        return operand[0]\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1ecpfqu8.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator == nil {\n       ^\n/tmp/tmp1ecpfqu8.swift:21:8:\
    \ error: operator must be declared as 'prefix', 'postfix', or 'infix'\n    if\
    \ operator == nil {\n       ^\n/tmp/tmp1ecpfqu8.swift:21:8: error: 'operator'\
    \ may only be declared at file scope\n    if operator == nil {\n       ^\n/tmp/tmp1ecpfqu8.swift:24:12:\
    \ error: expected expression in 'switch' statement\n    switch operator[0] {\n\
    \           ^\n/tmp/tmp1ecpfqu8.swift:24:20: error: '[' is not allowed in operator\
    \ names\n    switch operator[0] {\n                   ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // add all operands to total\n    var\
    \ total = 0\n    // loop through the array\n    for var i = 0; i < operator.count\
    \ - 1; i++ {\n        // get current operator\n        let currentOperator = operator[i]\n\
    \        // get current operand\n        let currentOperand = operand[i]\n   \
    \     // get next operator\n        let nextOperator = operator[i + 1]\n     \
    \   // get next operand\n        let nextOperand = operand[i + 1]\n        //\
    \ perform arithmetic operation\n        total = total * currentOperand + currentOperator\
    \ * nextOperand\n    }\n    // perform final arithmetic operation\n    return\
    \ total * operand[operator.count - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp7pjynhuk.swift:24:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < operator.count - 1; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7pjynhuk.swift:26:31: error: expected initial value after '='\n      \
    \  let currentOperator = operator[i]\n                              ^\n/tmp/tmp7pjynhuk.swift:26:30:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ currentOperator = operator[i]\n                             ^\n            \
    \                 ;\n/tmp/tmp7pjynhuk.swift:26:39: error: '[' is not allowed in\
    \ operator names\n        let currentOperator = operator[i]\n                \
    \                      ^\n/tmp/tmp7pjynhuk.swift:30:28: error: expected initial\
    \ value after '='\n        let nextOperator = operator[i + 1]\n              \
    \             ^\n/tmp/tmp7pjynhuk.swift:30:27: error: consecutive statements on\
    \ a line must be separated by ';'\n        let nextOperator = operator[i + 1]\n\
    \                          ^\n                          ;\n/tmp/tmp7pjynhuk.swift:30:36:\
    \ error: '[' is not allowed in operator names\n        let nextOperator = operator[i\
    \ + 1]\n                                   ^\n/tmp/tmp7pjynhuk.swift:37:28: error:\
    \ expected expression in list of expressions\n    return total * operand[operator.count\
    \ - 1]\n                           ^\n/tmp/tmp7pjynhuk.swift:37:36: error: '.'\
    \ is not allowed in operator names\n    return total * operand[operator.count\
    \ - 1]\n                                   ^\n/tmp/tmp7pjynhuk.swift:37:27: error:\
    \ missing argument for parameter #1 in call\n    return total * operand[operator.count\
    \ - 1]\n                          ^\n                          <#Int#>\nSwift.Array:16:23:\
    \ note: 'subscript(_:)' declared here\n    @inlinable public subscript(index:\
    \ Int) -> Element { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var ops: Int = 1\n    var operands:\
    \ [Int] = operand\n    \n    for op in operator {\n        let index = operator.index(of:\
    \ op)\n        switch op {\n        case \"+\":\n            ops *= operands[index]\n\
    \        case \"-\":\n            ops /= operands[index]\n        case \"*\":\n\
    \            ops %= operands[index]\n        case \"//\":\n            ops /=\
    \ operands[index]\n        case \"**\":\n            ops *= operands[index]\n\
    \        }\n    }\n    return ops\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp9rqk3ok6.swift:24:15: error: expected Sequence expression for for-each\
    \ loop\n    for op in operator {\n              ^\n/tmp/tmp9rqk3ok6.swift:24:15:\
    \ error: expected '{' to start the body of for-each loop\n    for op in operator\
    \ {\n              ^\n/tmp/tmp9rqk3ok6.swift:25:21: error: expected initial value\
    \ after '='\n        let index = operator.index(of: op)\n                    ^\n\
    /tmp/tmp9rqk3ok6.swift:25:20: error: consecutive statements on a line must be\
    \ separated by ';'\n        let index = operator.index(of: op)\n             \
    \      ^\n                   ;\n/tmp/tmp9rqk3ok6.swift:25:29: error: '.' is not\
    \ allowed in operator names\n        let index = operator.index(of: op)\n    \
    \                        ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operators: String = \"\"\n    for\
    \ i in 0..<operator.count {\n        operators += \"\\(operator[i])\"\n    }\n\
    \    var num1 = operand[0]\n    var num2 = operand[1]\n    var result = 0\n  \
    \  var operatorIndex = 0\n    if operatorIndex == operator.count {\n        result\
    \ = num1 + num2\n    } else {\n        for i in 0..<operator.count {\n       \
    \     result += num1 * operators[operatorIndex] + num2\n            operatorIndex++\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfh7wd_g7.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpfh7wd_g7.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpfh7wd_g7.swift:23:25: error: expected expression\
    \ in list of expressions\n        operators += \"\\(operator[i])\"\n         \
    \               ^\n/tmp/tmpfh7wd_g7.swift:29:25: error: expected expression after\
    \ operator\n    if operatorIndex == operator.count {\n                       \
    \ ^\n/tmp/tmpfh7wd_g7.swift:29:33: error: '.' is not allowed in operator names\n\
    \    if operatorIndex == operator.count {\n                                ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    assert(operator.count == operand.count-1)\n\
    \    var result = operand[0]\n    for op in operator {\n        switch op {\n\
    \        case \"+\": result = result + operand[1]\n        case \"-\": result\
    \ = result - operand[1]\n        case \"*\": result = result * operand[1]\n  \
    \      case \"//\": result = result / operand[1]\n        case \"**\": result\
    \ = result ** operand[1]\n        default:\n            fatalError(\"invalid operator\
    \ in do_algebra\")\n        }\n        \n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpqohwf4gt.swift:21:12: error: expected expression in list of expressions\n\
    \    assert(operator.count == operand.count-1)\n           ^\n/tmp/tmpqohwf4gt.swift:21:20:\
    \ error: '.' is not allowed in operator names\n    assert(operator.count == operand.count-1)\n\
    \                   ^\n/tmp/tmpqohwf4gt.swift:23:15: error: expected Sequence\
    \ expression for for-each loop\n    for op in operator {\n              ^\n/tmp/tmpqohwf4gt.swift:23:15:\
    \ error: expected '{' to start the body of for-each loop\n    for op in operator\
    \ {\n              ^\n/tmp/tmpqohwf4gt.swift:21:11: error: missing argument for\
    \ parameter #1 in call\n    assert(operator.count == operand.count-1)\n      \
    \    ^\n          <#Bool#>\nSwift.assert:1:13: note: 'assert(_:_:file:line:)'\
    \ declared here\npublic func assert(_ condition: @autoclosure () -> Bool, _ message:\
    \ @autoclosure () -> String = String(), file: StaticString = #file, line: UInt\
    \ = #line)\n            ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for op\
    \ in operator {\n        switch op {\n        case \"+\":\n            result\
    \ += operand[1]\n        case \"-\":\n            result -= operand[1]\n     \
    \   case \"*\":\n            result *= operand[1]\n        case \"//\":\n    \
    \        result /= operand[1]\n        case \"**\":\n            result **= operand[1]\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpw_i9_sqa.swift:22:15: error: expected Sequence expression for for-each\
    \ loop\n    for op in operator {\n              ^\n/tmp/tmpw_i9_sqa.swift:22:15:\
    \ error: expected '{' to start the body of for-each loop\n    for op in operator\
    \ {\n              ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    switch operator.count {\n    case 0:\n\
    \        fatalError(\"The operator array is empty\")\n    case 1:\n        var\
    \ result = 0\n        for i in 0..<operand.count {\n            switch operator[0]\
    \ {\n            case \"+\": result = result + operand[i] \n            case \"\
    -\": result = result - operand[i] \n            case \"*\": result = result *\
    \ operand[i] \n            case \"/\": result = result / operand[i] \n       \
    \     case \"//\": result = result // operand[i] \n            case \"**\": result\
    \ = result ** operand[i] \n            }\n        }\n        return result \n\
    \    default:\n        fatalError(\"The operator array has more than one operator\"\
    )\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpv36cc2ug.swift:21:12: error: expected expression in 'switch' statement\n\
    \    switch operator.count {\n           ^\n/tmp/tmpv36cc2ug.swift:21:20: error:\
    \ '.' is not allowed in operator names\n    switch operator.count {\n        \
    \           ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    guard operatorCount >= operator.length,\
    \ operandCount >= operand.count - 1 else { return 0 }\n    \n    if operand.count\
    \ <= 1 {\n        return operand[0]\n    } else {\n        var result: Int = 0\n\
    \        \n        for _ in 0..operand.count - 1 {\n            switch operator[0]\
    \ {\n            case \"+\": result = result + operand[0] \n            case \"\
    -\": result = result - operand[0] \n            case \"*\": result = result *\
    \ operand[0] \n            case \"//\": result = result / operand[0] \n      \
    \      case \"**\": result = result ** operand[0] \n            default:\n   \
    \             print(\"ERROR!\")\n            }\n            operator = operator[1..]\n\
    \        }\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpr6e6kjly.swift:21:28: error: expected expression after operator\n\
    \    guard operatorCount >= operator.length, operandCount >= operand.count - 1\
    \ else { return 0 }\n                           ^\n/tmp/tmpr6e6kjly.swift:21:36:\
    \ error: '.' is not allowed in operator names\n    guard operatorCount >= operator.length,\
    \ operandCount >= operand.count - 1 else { return 0 }\n                      \
    \             ^\n/tmp/tmpr6e6kjly.swift:29:20: error: expected expression in 'switch'\
    \ statement\n            switch operator[0] {\n                   ^\n/tmp/tmpr6e6kjly.swift:29:28:\
    \ error: '[' is not allowed in operator names\n            switch operator[0]\
    \ {\n                           ^\n/tmp/tmpr6e6kjly.swift:38:13: error: operator\
    \ must be declared as 'prefix', 'postfix', or 'infix'\n            operator =\
    \ operator[1..]\n            ^\n/tmp/tmpr6e6kjly.swift:38:13: error: 'operator'\
    \ may only be declared at file scope\n            operator = operator[1..]\n \
    \           ^\n/tmp/tmpr6e6kjly.swift:38:32: error: '[' is not allowed in operator\
    \ names\n            operator = operator[1..]\n                              \
    \ ^\n/tmp/tmpr6e6kjly.swift:28:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for _ in 0..operand.count - 1 {\n             \
    \     ^~\n                  ...\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for index in\
    \ 0..<operator.count {\n        switch operator[index] {\n        case \"+\":\
    \ result = result + operand[index]\n        case \"*\": result = result * operand[index]\n\
    \        case \"-\": result = result - operand[index]\n        case \"//\": result\
    \ = result // operand[index]\n        case \"**\": result = result ** operand[index]\n\
    \        default: break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpalx7kpfk.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpalx7kpfk.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpalx7kpfk.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpalx7kpfk.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    guard operand.count >= 2, operator.count\
    \ >= 1 else {\n        fatalError(\"The size of operand and operator arrays has\
    \ to be at least 2\")\n    }\n    \n    var result = 0\n    var i = 0\n    \n\
    \    // Iterate through the operands\n    for value in operand {\n        // Operates\
    \ on the current operand\n        result = result*value + operator[i%operator.count]*operand[i-1]\n\
    \        i = i + 1\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfbpmz_oz.swift:21:31: error: expected expression in conditional\n\
    \    guard operand.count >= 2, operator.count >= 1 else {\n                  \
    \            ^\n/tmp/tmpfbpmz_oz.swift:21:39: error: '.' is not allowed in operator\
    \ names\n    guard operand.count >= 2, operator.count >= 1 else {\n          \
    \                            ^\n/tmp/tmpfbpmz_oz.swift:31:33: error: expected\
    \ expression after operator\n        result = result*value + operator[i%operator.count]*operand[i-1]\n\
    \                                ^\n/tmp/tmpfbpmz_oz.swift:31:41: error: '[' is\
    \ not allowed in operator names\n        result = result*value + operator[i%operator.count]*operand[i-1]\n\
    \                                        ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for i in 0..<operand.count\
    \ {\n        result += operand[i] * operator[i]\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmps9asf1mt.swift:23:32: error: expected expression after operator\n\
    \        result += operand[i] * operator[i]\n                               ^\n\
    /tmp/tmps9asf1mt.swift:23:40: error: '[' is not allowed in operator names\n  \
    \      result += operand[i] * operator[i]\n                                  \
    \     ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tlet operandSize = operand.count\n\tif\
    \ operandSize < 2 {\n\t\tfatalError(\"Invalid number of operands\")\n\t}\n\tif\
    \ operandSize > 3 {\n\t\tfatalError(\"Invalid number of operands\")\n\t}\n\tswitch\
    \ operandSize {\n\tcase 1:\n\t\treturn do_algebra_1(operator, operand)\n\tcase\
    \ 2:\n\t\treturn do_algebra_2(operator, operand)\n\tcase 3:\n\t\treturn do_algebra_3(operator,\
    \ operand)\n\tdefault:\n\t\treturn do_algebra_4(operator, operand)\n\t}\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp6zpwg3uy.swift:30:23: error: expected expression in list of expressions\n\
    \                return do_algebra_1(operator, operand)\n                    \
    \                ^\n/tmp/tmp6zpwg3uy.swift:30:31: error: ',' is not allowed in\
    \ operator names\n                return do_algebra_1(operator, operand)\n   \
    \                                         ^\n/tmp/tmp6zpwg3uy.swift:32:23: error:\
    \ expected expression in list of expressions\n                return do_algebra_2(operator,\
    \ operand)\n                                    ^\n/tmp/tmp6zpwg3uy.swift:32:31:\
    \ error: ',' is not allowed in operator names\n                return do_algebra_2(operator,\
    \ operand)\n                                            ^\n/tmp/tmp6zpwg3uy.swift:34:23:\
    \ error: expected expression in list of expressions\n                return do_algebra_3(operator,\
    \ operand)\n                                    ^\n/tmp/tmp6zpwg3uy.swift:34:31:\
    \ error: ',' is not allowed in operator names\n                return do_algebra_3(operator,\
    \ operand)\n                                            ^\n/tmp/tmp6zpwg3uy.swift:36:23:\
    \ error: expected expression in list of expressions\n                return do_algebra_4(operator,\
    \ operand)\n                                    ^\n/tmp/tmp6zpwg3uy.swift:36:31:\
    \ error: ',' is not allowed in operator names\n                return do_algebra_4(operator,\
    \ operand)\n                                            ^\n/tmp/tmp6zpwg3uy.swift:30:10:\
    \ error: cannot find 'do_algebra_1' in scope\n                return do_algebra_1(operator,\
    \ operand)\n                       ^~~~~~~~~~~~\n/tmp/tmp6zpwg3uy.swift:32:10:\
    \ error: cannot find 'do_algebra_2' in scope\n                return do_algebra_2(operator,\
    \ operand)\n                       ^~~~~~~~~~~~\n/tmp/tmp6zpwg3uy.swift:34:10:\
    \ error: cannot find 'do_algebra_3' in scope\n                return do_algebra_3(operator,\
    \ operand)\n                       ^~~~~~~~~~~~\n/tmp/tmp6zpwg3uy.swift:36:10:\
    \ error: cannot find 'do_algebra_4' in scope\n                return do_algebra_4(operator,\
    \ operand)\n                       ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    var a = operand[0]\n    var b\
    \ = operand[1]\n    var c = operand[2]\n\n    var operator_index = 0\n    var\
    \ operand1_index = 0\n    var operand2_index = 0\n\n    while operator_index <\
    \ operator.count {\n        \n        switch operator[operator_index] {\n    \
    \    \n        case \"+\":\n            c = a + b\n            operand1[operand1_index]\
    \ = c\n        case \"-\":\n            c = a - b\n            operand1[operand1_index]\
    \ = c\n        case \"*\":\n            c = a * b\n            operand1[operand1_index]\
    \ = c\n        case \"/\":\n            if b != 0 {\n                c = a / b\n\
    \                operand1[operand1_index] = c\n            } else {\n        \
    \        c = a % b\n                operand1[operand1_index] = c\n           \
    \ }\n        case \"//\":\n            if b != 0 {\n                c = a / b\n\
    \                operand1[operand1_index] = c\n            } else {\n        \
    \        c = a % b\n                operand1[operand1_index] = c\n           \
    \ }\n        case \"**\":\n            c = a ** b\n            operand1[operand1_index]\
    \ = c\n        default:\n            \n            break\n        }\n        \n\
    \        operator_index += 1\n        operand1_index += 1\n        operand2_index\
    \ += 1\n        \n    }\n    \n    return operand1[operand1_index]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgg528xee.swift:30:28: error: expected expression after operator\n\
    \    while operator_index < operator.count {\n                           ^\n/tmp/tmpgg528xee.swift:30:36:\
    \ error: '.' is not allowed in operator names\n    while operator_index < operator.count\
    \ {\n                                   ^\n/tmp/tmpgg528xee.swift:73:12: error:\
    \ cannot find 'operand1' in scope\n    return operand1[operand1_index]\n     \
    \      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    switch operator.count {\n    case 0:\n\
    \        break\n    case 1:\n        return operand[0] + operand[1]\n    case\
    \ 2:\n        return operand[0] * operand[1]\n    case 3:\n        return operand[0]\
    \ / operand[1]\n    case 4:\n        return operand[0] ** operand[1]\n    case\
    \ 5:\n        return operand[0] < operand[1]\n    default:\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp6gr1m6s5.swift:21:12: error: expected expression in 'switch' statement\n\
    \    switch operator.count {\n           ^\n/tmp/tmp6gr1m6s5.swift:21:20: error:\
    \ '.' is not allowed in operator names\n    switch operator.count {\n        \
    \           ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Write your code here\n    var result\
    \ = 0\n    for _ in 0..<operand.count {\n        var index = 0\n        for _\
    \ in 0..<operator.count {\n            result += operand[index] * Int(operator[index])\n\
    \            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp7sjlz0om.swift:25:22: error: expected expression after operator\n\
    \        for _ in 0..<operator.count {\n                     ^\n/tmp/tmp7sjlz0om.swift:25:22:\
    \ error: expected '{' to start the body of for-each loop\n        for _ in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp7sjlz0om.swift:26:44: error: expected expression\
    \ in list of expressions\n            result += operand[index] * Int(operator[index])\n\
    \                                           ^\n/tmp/tmp7sjlz0om.swift:26:52: error:\
    \ '[' is not allowed in operator names\n            result += operand[index] *\
    \ Int(operator[index])\n                                                   ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // TODO: Add validation for the input\n\
    \    return operand[0] // use first operand and do an operation with the rest\
    \ of operands\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpp0625vun/tmpp0625vun.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c213bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c210b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c210b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c210b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0625vun                        0x00005628beeb74db <unavailable> + 5339

    5    libc.so.6                          0x00002b4c215a7460 __libc_start_main +
    245

    6    tmpp0625vun                        0x00005628beeb7089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Your code here\n    var result =\
    \ 0\n    for i in 0..<operand.count {\n        if let index = operator.indexOf(operand[i],\
    \ options: .caseInsensitive) {\n            switch index {\n            case 0:\
    \ result += (operand[i] + operand[i+1])\n            case 1: result -= (operand[i]\
    \ + operand[i+1])\n            case 2: result *= (operand[i] + operand[i+1])\n\
    \            case 3: result /= (operand[i] + operand[i+1])\n            case 4:\
    \ result %= (operand[i] + operand[i+1])\n            case 5: result /= operand[i]\n\
    \            case 6: result *= operand[i]\n            case 7: result -= operand[i]\n\
    \            case 8: result ^= operand[i]\n            case 9: result %= operand[i]\n\
    \            case 10: result &= operand[i]\n            case 11: result |= operand[i]\n\
    \            case 12: result &= ~operand[i]\n            case 13: result |= ~operand[i]\n\
    \            case 14: result >>= operand[i]\n            case 15: result <<= operand[i]\n\
    \            default: break\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmposhqc7tg.swift:24:24: error: expected expression after '=' in conditional\
    \ binding\n        if let index = operator.indexOf(operand[i], options: .caseInsensitive)\
    \ {\n                       ^\n/tmp/tmposhqc7tg.swift:24:24: error: expected '{'\
    \ after 'if' condition\n        if let index = operator.indexOf(operand[i], options:\
    \ .caseInsensitive) {\n                       ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    switch operator[0] {\n    case \"+\"\
    : return operand[0] + operand[1]\n    case \"-\": return operand[0] - operand[1]\n\
    \    case \"*\": return operand[0] * operand[1]\n    case \"//\": return operand[0]\
    \ // operand[1]\n    case \"**\": return operand[0] ** operand[1]\n    default:\n\
    \        fatalError(\"unsupported operator: \\(operator)\")\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptzdhj1gs.swift:21:12: error: expected expression in 'switch' statement\n\
    \    switch operator[0] {\n           ^\n/tmp/tmptzdhj1gs.swift:21:20: error:\
    \ '[' is not allowed in operator names\n    switch operator[0] {\n           \
    \        ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let len = operator.count\n    if len\
    \ != operand.count {\n        return 0\n    }\n    var res: Int = 0\n    for index\
    \ in 0..<len {\n        switch operator[index] {\n        case \"+\":\n      \
    \      res = res + operand[index]\n        case \"-\":\n            res = res\
    \ - operand[index]\n        case \"*\":\n            res = res * operand[index]\n\
    \        case \"/\":\n            res = res / operand[index]\n        case \"\
    **\":\n            res = res * operand[index]\n        default:\n            return\
    \ 0\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpce2z1qng.swift:21:15: error: expected initial value after '='\n\
    \    let len = operator.count\n              ^\n/tmp/tmpce2z1qng.swift:21:14:\
    \ error: consecutive statements on a line must be separated by ';'\n    let len\
    \ = operator.count\n             ^\n             ;\n/tmp/tmpce2z1qng.swift:21:23:\
    \ error: '.' is not allowed in operator names\n    let len = operator.count\n\
    \                      ^\n/tmp/tmpce2z1qng.swift:27:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpce2z1qng.swift:27:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var i = 0\n    var sum = 0\n    for\
    \ element in operator {\n        sum += operand[i] * Int(element)\n        i +=\
    \ 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpoqydza79.swift:23:20: error: expected Sequence expression for for-each\
    \ loop\n    for element in operator {\n                   ^\n/tmp/tmpoqydza79.swift:23:20:\
    \ error: expected '{' to start the body of for-each loop\n    for element in operator\
    \ {\n                   ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    var result = 0\n    \n    for\
    \ index in range(0, operand.count) {\n        \n        var firstOperand = operand[index]\n\
    \        var secondOperand = operand[index + 1]\n        \n        for oper in\
    \ operator {\n            \n            if oper[0] == '+' || oper[0] == '-' {\n\
    \                result = result + firstOperand\n            } else if oper[0]\
    \ == '*' || oper[0] == '/' {\n                result = result * secondOperand\n\
    \            } else if oper[0] == '**' {\n                result = result ** secondOperand\n\
    \            } else if oper[0] == '//' {\n                result = result // secondOperand\n\
    \            }\n        }\n        \n        firstOperand = nil\n        secondOperand\
    \ = nil\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpz0r5lddr.swift:29:21: error: expected Sequence expression for for-each\
    \ loop\n        for oper in operator {\n                    ^\n/tmp/tmpz0r5lddr.swift:29:21:\
    \ error: expected '{' to start the body of for-each loop\n        for oper in\
    \ operator {\n                    ^\n/tmp/tmpz0r5lddr.swift:31:27: error: single-quoted\
    \ string literal found, use '\"'\n            if oper[0] == '+' || oper[0] ==\
    \ '-' {\n                          ^~~\n                          \"+\"\n/tmp/tmpz0r5lddr.swift:31:45:\
    \ error: single-quoted string literal found, use '\"'\n            if oper[0]\
    \ == '+' || oper[0] == '-' {\n                                            ^~~\n\
    \                                            \"-\"\n/tmp/tmpz0r5lddr.swift:33:34:\
    \ error: single-quoted string literal found, use '\"'\n            } else if oper[0]\
    \ == '*' || oper[0] == '/' {\n                                 ^~~\n         \
    \                        \"*\"\n/tmp/tmpz0r5lddr.swift:33:52: error: single-quoted\
    \ string literal found, use '\"'\n            } else if oper[0] == '*' || oper[0]\
    \ == '/' {\n                                                   ^~~\n         \
    \                                          \"/\"\n/tmp/tmpz0r5lddr.swift:35:34:\
    \ error: single-quoted string literal found, use '\"'\n            } else if oper[0]\
    \ == '**' {\n                                 ^~~~\n                         \
    \        \"**\"\n/tmp/tmpz0r5lddr.swift:37:34: error: single-quoted string literal\
    \ found, use '\"'\n            } else if oper[0] == '//' {\n                 \
    \                ^~~~\n                                 \"//\"\n/tmp/tmpz0r5lddr.swift:24:18:\
    \ error: cannot find 'range' in scope\n    for index in range(0, operand.count)\
    \ {\n                 ^~~~~\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var res = operand[0]\n    operand.removeFirst()\n\
    \    for op in operator {\n        switch op {\n        case \"+\": res += operand[0]\n\
    \        case \"-\": res -= operand[0]\n        case \"*\": res += operand[0]\
    \ * operand[0]\n        case \"//\": res /= operand[0]\n        case \"**\": res\
    \ *= operand[0]\n        default: fatalError()\n        }\n        operand.removeFirst()\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp8fde5nge.swift:23:15: error: expected Sequence expression for for-each\
    \ loop\n    for op in operator {\n              ^\n/tmp/tmp8fde5nge.swift:23:15:\
    \ error: expected '{' to start the body of for-each loop\n    for op in operator\
    \ {\n              ^\n/tmp/tmp8fde5nge.swift:22:13: error: cannot use mutating\
    \ member on immutable value: 'operand' is a 'let' constant\n    operand.removeFirst()\n\
    \    ~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    if operator.isEmpty || operand.isEmpty\
    \ {\n        return 0\n    }\n    \n    let operator_index = operator.indexOf(operator[0])\n\
    \    let operand1 = operand[operator_index].unwrapped\n    let operand2 = operand[(operator_index\
    \ + 1)..<operand.count].unwrapped\n    \n    let result: (Int, Int) = (operand1,\
    \ operand2)\n    \n    if operator_index == 0 {\n        \n        if operand1\
    \ == 0 {\n            if operand2 == 0 {\n                return 0\n         \
    \   }\n            else { return operand2 }\n        }\n        else { return\
    \ operand1 }\n    }\n    else if operator_index == 1 {\n        \n        if operand1\
    \ == 0 {\n            return -operand2\n        }\n        else { return operand1\
    \ }\n    }\n    else if operator_index == 2 {\n        \n        if operand2 ==\
    \ 0 {\n            return 0\n        }\n        else { return operand1 }\n   \
    \ }\n    else if operator_index == 3 {\n        \n        if operand1 == 0 {\n\
    \            return operand2\n        }\n        else { return operand1 }\n  \
    \  }\n    else {\n        if operand2 == 0 {\n            return -operand1\n \
    \       }\n        else { return operand1 }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvjccxcgz.swift:22:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.isEmpty || operand.isEmpty {\n       ^\n/tmp/tmpvjccxcgz.swift:22:16:\
    \ error: '.' is not allowed in operator names\n    if operator.isEmpty || operand.isEmpty\
    \ {\n               ^\n/tmp/tmpvjccxcgz.swift:26:26: error: expected initial value\
    \ after '='\n    let operator_index = operator.indexOf(operator[0])\n        \
    \                 ^\n/tmp/tmpvjccxcgz.swift:26:25: error: consecutive statements\
    \ on a line must be separated by ';'\n    let operator_index = operator.indexOf(operator[0])\n\
    \                        ^\n                        ;\n/tmp/tmpvjccxcgz.swift:26:34:\
    \ error: '.' is not allowed in operator names\n    let operator_index = operator.indexOf(operator[0])\n\
    \                                 ^\n/tmp/tmpvjccxcgz.swift:27:44: error: reference\
    \ to member 'unwrapped' cannot be resolved without a contextual type\n    let\
    \ operand1 = operand[operator_index].unwrapped\n                             \
    \              ^\n/tmp/tmpvjccxcgz.swift:28:66: error: value of type 'ArraySlice<Int>'\
    \ has no member 'unwrapped'\n    let operand2 = operand[(operator_index + 1)..<operand.count].unwrapped\n\
    \                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n\
    /tmp/tmpvjccxcgz.swift:45:20: error: cannot convert return expression of type\
    \ 'Float16' to return type 'Int'\n            return -operand2\n             \
    \      ^~~~~~~~~\n                   Int(     )\n/tmp/tmpvjccxcgz.swift:65:20:\
    \ error: cannot convert return expression of type 'Float16' to return type 'Int'\n\
    \            return -operand1\n                   ^~~~~~~~~\n                \
    \   Int(     )\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = 0\n    for _ in 0..<operand.count\
    \ {\n        for _ in 0..<operator.count {\n            result = result + (operand[operand.count\
    \ - 1 - _] * operator[operator.count - 1 - _])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpil_k40l0.swift:23:22: error: expected expression after operator\n\
    \        for _ in 0..<operator.count {\n                     ^\n/tmp/tmpil_k40l0.swift:23:22:\
    \ error: expected '{' to start the body of for-each loop\n        for _ in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpil_k40l0.swift:24:65: error: expected expression\
    \ after operator\n            result = result + (operand[operand.count - 1 - _]\
    \ * operator[operator.count - 1 - _])\n                                      \
    \                          ^\n/tmp/tmpil_k40l0.swift:24:73: error: '[' is not\
    \ allowed in operator names\n            result = result + (operand[operand.count\
    \ - 1 - _] * operator[operator.count - 1 - _])\n                             \
    \                                           ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tlet numOfOperators = operator.count\n\t\
    \n\tguard let operatorString = operator[numOfOperators - 1],\n\t\tlet operandString\
    \ = operand[numOfOperators - 1],\n\t\tlet operandArray = operand.dropLast(1),\n\
    \t\tlet operatorArray = operator.dropLast(1) {\n\t\t\n\t\tlet operandIntArray\
    \ = operandArray.map({ Int($0) })\n\t\tlet operatorString = String(operatorString)\n\
    \t\tlet result: Int = 1\n\t\t\n\t\tswitch operatorString {\n\t\tcase \"+\":\n\t\
    \t\tresult = operandIntArray.map { $0 + $1 }.reduce(0, +)\n\t\tcase \"-\":\n\t\
    \t\tresult = operandIntArray.map { $0 - $1 }.reduce(0, -)\n\t\tcase \"*\":\n\t\
    \t\tresult = operandIntArray.map { $0 * $1 }.reduce(0, *)\n\t\tcase \"//\":\n\t\
    \t\tresult = operandIntArray.map { $0 // $1 }.reduce(0, +)\n\t\tcase \"**\":\n\
    \t\t\tresult = operandIntArray.map { $0 ** $1 }.reduce(0, *)\n\t\tdefault:\n\t\
    \t\tbreak\n\t\t}\n\t\t\n\t\treturn result\n\t}\n\t\n\treturn 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgxsd_ltx.swift:21:23: error: expected initial value after '='\n\
    \        let numOfOperators = operator.count\n                             ^\n\
    /tmp/tmpgxsd_ltx.swift:21:22: error: consecutive statements on a line must be\
    \ separated by ';'\n        let numOfOperators = operator.count\n            \
    \                ^\n                            ;\n/tmp/tmpgxsd_ltx.swift:21:31:\
    \ error: '.' is not allowed in operator names\n        let numOfOperators = operator.count\n\
    \                                     ^\n/tmp/tmpgxsd_ltx.swift:23:29: error:\
    \ expected expression after '=' in conditional binding\n        guard let operatorString\
    \ = operator[numOfOperators - 1],\n                                   ^\n/tmp/tmpgxsd_ltx.swift:23:29:\
    \ error: expected 'else' after 'guard' condition\n        guard let operatorString\
    \ = operator[numOfOperators - 1],\n                                   ^\n/tmp/tmpgxsd_ltx.swift:23:28:\
    \ error: consecutive statements on a line must be separated by ';'\n        guard\
    \ let operatorString = operator[numOfOperators - 1],\n                       \
    \           ^\n                                  ;\n/tmp/tmpgxsd_ltx.swift:23:37:\
    \ error: '[' is not allowed in operator names\n        guard let operatorString\
    \ = operator[numOfOperators - 1],\n                                          \
    \ ^\n/tmp/tmpgxsd_ltx.swift:25:3: error: 'let' cannot appear nested inside another\
    \ 'var' or 'let' pattern\n                let operandArray = operand.dropLast(1),\n\
    \                ^\n/tmp/tmpgxsd_ltx.swift:26:3: error: 'let' cannot appear nested\
    \ inside another 'var' or 'let' pattern\n                let operatorArray = operator.dropLast(1)\
    \ {\n                ^\n/tmp/tmpgxsd_ltx.swift:26:23: error: expected initial\
    \ value after '='\n                let operatorArray = operator.dropLast(1) {\n\
    \                                    ^\n/tmp/tmpgxsd_ltx.swift:26:22: error: consecutive\
    \ statements on a line must be separated by ';'\n                let operatorArray\
    \ = operator.dropLast(1) {\n                                   ^\n           \
    \                        ;\n/tmp/tmpgxsd"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return operand[0] * operator[0] + operand[1]\
    \ * operator[1] + operand[2] * operator[2] + operand[3] * operator[3] + operand[4]\
    \ * operator[4]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp78b5thgi.swift:21:25: error: expected expression after operator\n\
    \    return operand[0] * operator[0] + operand[1] * operator[1] + operand[2] *\
    \ operator[2] + operand[3] * operator[3] + operand[4] * operator[4]\n        \
    \                ^\n/tmp/tmp78b5thgi.swift:21:33: error: '[' is not allowed in\
    \ operator names\n    return operand[0] * operator[0] + operand[1] * operator[1]\
    \ + operand[2] * operator[2] + operand[3] * operator[3] + operand[4] * operator[4]\n\
    \                                ^\n/tmp/tmp78b5thgi.swift:21:60: error: '[' is\
    \ not allowed in operator names\n    return operand[0] * operator[0] + operand[1]\
    \ * operator[1] + operand[2] * operator[2] + operand[3] * operator[3] + operand[4]\
    \ * operator[4]\n                                                           ^\n\
    /tmp/tmp78b5thgi.swift:21:87: error: '[' is not allowed in operator names\n  \
    \  return operand[0] * operator[0] + operand[1] * operator[1] + operand[2] * operator[2]\
    \ + operand[3] * operator[3] + operand[4] * operator[4]\n                    \
    \                                                                  ^\n/tmp/tmp78b5thgi.swift:21:114:\
    \ error: '[' is not allowed in operator names\n    return operand[0] * operator[0]\
    \ + operand[1] * operator[1] + operand[2] * operator[2] + operand[3] * operator[3]\
    \ + operand[4] * operator[4]\n                                               \
    \                                                                  ^\n/tmp/tmp78b5thgi.swift:21:141:\
    \ error: '[' is not allowed in operator names\n    return operand[0] * operator[0]\
    \ + operand[1] * operator[1] + operand[2] * operator[2] + operand[3] * operator[3]\
    \ + operand[4] * operator[4]\n                                               \
    \                                                                            \
    \                 ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    // We use map to apply a binary\
    \ function between two arrays element-wise.\n    return operator.map { binary\
    \ in\n        return binary_eval(binary, operand)\n    }.sum()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaup2bo9h.swift:23:11: error: consecutive statements on a line must\
    \ be separated by ';'\n    return operator.map { binary in\n          ^\n    \
    \      ;\n/tmp/tmpaup2bo9h.swift:23:20: error: '.' is not allowed in operator\
    \ names\n    return operator.map { binary in\n                   ^\n/tmp/tmpaup2bo9h.swift:23:5:\
    \ error: non-void function should return a value\n    return operator.map { binary\
    \ in\n    ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    var i = 0;\n\
    \    for operator in operator {\n        result = result + (operand[i] ?? 0) *\
    \ operatorMap[operator]!\n        i = i + 1\n    }\n    return result + operand[i\
    \ - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"\
    **\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp49oivi29.swift:23:9: error: expected pattern\n    for operator\
    \ in operator {\n        ^\n/tmp/tmp49oivi29.swift:23:9: error: expected Sequence\
    \ expression for for-each loop\n    for operator in operator {\n        ^\n/tmp/tmp49oivi29.swift:23:9:\
    \ error: expected '{' to start the body of for-each loop\n    for operator in\
    \ operator {\n        ^\n/tmp/tmp49oivi29.swift:24:59: error: expected expression\
    \ in list of expressions\n        result = result + (operand[i] ?? 0) * operatorMap[operator]!\n\
    \                                                          ^\n/tmp/tmp49oivi29.swift:24:67:\
    \ error: ']' is not allowed in operator names\n        result = result + (operand[i]\
    \ ?? 0) * operatorMap[operator]!\n                                           \
    \                       ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.isEmpty || operand.isEmpty\
    \ {\n        return 0\n    }\n    var stack: [Int] = []\n    var result = 0\n\
    \    for index in 0..<operator.count {\n        switch operator[index] {\n   \
    \     case \"+\": stack.append(operand[index] + stack[index])\n        case \"\
    *\": stack.append(operand[index] * stack[index])\n        case \"-\": stack.append(operand[index]\
    \ - stack[index])\n        case \"//\": stack.append(operand[index] // stack[index])\n\
    \        case \"**\": stack.append(operand[index] ** stack[index])\n        default:\
    \ break\n        }\n    }\n    result = stack[0]\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpien58pg1.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.isEmpty || operand.isEmpty {\n       ^\n/tmp/tmpien58pg1.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.isEmpty || operand.isEmpty\
    \ {\n               ^\n/tmp/tmpien58pg1.swift:26:22: error: expected expression\
    \ after operator\n    for index in 0..<operator.count {\n                    \
    \ ^\n/tmp/tmpien58pg1.swift:26:22: error: expected '{' to start the body of for-each\
    \ loop\n    for index in 0..<operator.count {\n                     ^\n/tmp/tmpien58pg1.swift:27:16:\
    \ error: expected expression in 'switch' statement\n        switch operator[index]\
    \ {\n               ^\n/tmp/tmpien58pg1.swift:27:24: error: '[' is not allowed\
    \ in operator names\n        switch operator[index] {\n                      \
    \ ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    // create variables\n    var add\
    \ = operand[0]\n    var sub = operand[1]\n    var mul = operand[2]\n    var floorDiv\
    \ = operand[3]\n    var exp = operand[4]\n    var ans = operand[0]\n    \n   \
    \ // perform the calculation\n    for var i = 0; i < operator.count; i++ {\n \
    \       switch operator[i] {\n        case \"+\":\n            ans = add + operand[i\
    \ + 1]\n        case \"-\":\n            ans = sub - operand[i + 1]\n        case\
    \ \"*\":\n            ans = mul * operand[i + 1]\n        case \"//\":\n     \
    \       ans = floorDiv // operand[i + 1]\n        case \"**\":\n            ans\
    \ = exp * operand[i + 1]\n        }\n    }\n    return ans\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdw3wkgcj.swift:31:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < operator.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpdw3wkgcj.swift:32:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpdw3wkgcj.swift:32:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count != operand.count {\n\
    \        print(\"ERROR: operator\\(operator) and operand\\(operand) should be\
    \ of equal size\")\n        return -1\n    }\n    if operator.count < 1 || operand.count\
    \ < 2 {\n        print(\"ERROR: operator\\(operator) and operand\\(operand) should\
    \ be at least of length 2\")\n        return -1\n    }\n    var opCount: Int =\
    \ 0\n    var result = 0\n    for i in 0..<operator.count {\n        if operator[i]\
    \ == \"+\" {\n            opCount += 1\n        }\n    }\n    for i in 0..<operand.count\
    \ {\n        let operand1 = operand[i] - 1\n        var operator1 = 0\n      \
    \  for j in 0..<opCount {\n            if opCount == 1 {\n                operator1\
    \ = operator[0]\n            } else if opCount == 2 {\n                operator1\
    \ = operator[0]\n            } else {\n                operator1 = operator[j]\n\
    \            }\n        }\n        let operand2 = operand[i + 1] - 1\n       \
    \ if operand1 < operand2 {\n            result = result + operand1 * operator1\n\
    \        } else {\n            result = result - operand2 * operator1\n      \
    \  }\n    }\n    return Int(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp075mk95p.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count != operand.count {\n       ^\n/tmp/tmp075mk95p.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count != operand.count\
    \ {\n               ^\n/tmp/tmp075mk95p.swift:25:8: error: expected expression,\
    \ var, or let in 'if' condition\n    if operator.count < 1 || operand.count <\
    \ 2 {\n       ^\n/tmp/tmp075mk95p.swift:25:16: error: '.' is not allowed in operator\
    \ names\n    if operator.count < 1 || operand.count < 2 {\n               ^\n\
    /tmp/tmp075mk95p.swift:31:18: error: expected expression after operator\n    for\
    \ i in 0..<operator.count {\n                 ^\n/tmp/tmp075mk95p.swift:31:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp075mk95p.swift:32:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[i] == \"+\" {\n         \
    \  ^\n/tmp/tmp075mk95p.swift:32:20: error: '[' is not allowed in operator names\n\
    \        if operator[i] == \"+\" {\n                   ^\n/tmp/tmp075mk95p.swift:41:29:\
    \ error: expected expression in assignment\n                operator1 = operator[0]\n\
    \                            ^\n/tmp/tmp075mk95p.swift:41:37: error: '[' is not\
    \ allowed in operator names\n                operator1 = operator[0]\n       \
    \                             ^\n/tmp/tmp075mk95p.swift:43:29: error: expected\
    \ expression in assignment\n                operator1 = operator[0]\n        \
    \                    ^\n/tmp/tmp075mk95p.swift:43:37: error: '[' is not allowed\
    \ in operator names\n                operator1 = operator[0]\n               \
    \                     ^\n/tmp/tmp075mk95p.swift:45:29: error: expected expression\
    \ in assignment\n                operator1 = operator[j]\n                   \
    \         ^\n/tmp/tmp075mk95p.swift:45:37: error: '[' is not allowed in operator\
    \ names\n                operator1 = operator[j]\n                           \
    \         ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    guard operator.count >= operand.count\
    \ - 1 else {\n        return -1\n    }\n    var result = 0\n    for index in 0..<operator.count\
    \ {\n        guard operand.count > index else {\n            return -1\n     \
    \   }\n        let operation = operator[index]\n        let operand1 = operand[index]\n\
    \        let operand2 = operand[index + 1]\n        switch operation {\n     \
    \   case \"+\":\n            result = result + operand1\n        case \"-\":\n\
    \            result = result - operand1\n        case \"*\":\n            result\
    \ = result * operand1\n        case \"//\":\n            result = result / operand1\n\
    \        case \"**\":\n            result = result ** operand1\n        default:\n\
    \            return -1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprs91clz3.swift:21:11: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard operator.count >= operand.count - 1 else {\n\
    \          ^\n/tmp/tmprs91clz3.swift:21:19: error: '.' is not allowed in operator\
    \ names\n    guard operator.count >= operand.count - 1 else {\n              \
    \    ^\n/tmp/tmprs91clz3.swift:25:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmprs91clz3.swift:25:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmprs91clz3.swift:29:25: error: expected initial\
    \ value after '='\n        let operation = operator[index]\n                 \
    \       ^\n/tmp/tmprs91clz3.swift:29:24: error: consecutive statements on a line\
    \ must be separated by ';'\n        let operation = operator[index]\n        \
    \               ^\n                       ;\n/tmp/tmprs91clz3.swift:29:33: error:\
    \ '[' is not allowed in operator names\n        let operation = operator[index]\n\
    \                                ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var stack = [Int]()\n    var result\
    \ = operand[0]\n    var i = 1 // index starts from 1\n    \n    while i < operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result / operand[i]\n        case \"**\":\n      \
    \      result = result ** operand[i]\n        default:\n            fatalError()\n\
    \        }\n        stack.append(result)\n        i = i + 1\n    }\n    \n   \
    \ return stack[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp2sbkznpo.swift:25:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmp2sbkznpo.swift:25:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operators = operator[0]\n    var\
    \ operands = operand[0]\n\n    for var i = 0; i < operands.count - 1; i++ {\n\
    \        for var j = 0; j < operators.count; j++ {\n            switch operators[j]\
    \ {\n            case \"+\":\n                operands[i] += operands[i + 1]\n\
    \                break\n            case \"-\":\n                operands[i] -=\
    \ operands[i + 1]\n                break\n            case \"*\":\n          \
    \      operands[i] *= operands[i + 1]\n                break\n            case\
    \ \"/\":\n                operands[i] /= operands[i + 1]\n                break\n\
    \            case \"**\":\n                operands[i] *= operands[i + 1]\n  \
    \              operands[i] = operands[i] * operands[i + 1]\n                break\n\
    \            default:\n                break\n            }\n        }\n    }\n\
    \    return operands[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp6m069ar7.swift:21:21: error: expected initial value after '='\n\
    \    var operators = operator[0]\n                    ^\n/tmp/tmp6m069ar7.swift:21:20:\
    \ error: consecutive statements on a line must be separated by ';'\n    var operators\
    \ = operator[0]\n                   ^\n                   ;\n/tmp/tmp6m069ar7.swift:21:29:\
    \ error: '[' is not allowed in operator names\n    var operators = operator[0]\n\
    \                            ^\n/tmp/tmp6m069ar7.swift:24:5: error: C-style for\
    \ statement has been removed in Swift 3\n    for var i = 0; i < operands.count\
    \ - 1; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6m069ar7.swift:25:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for var j\
    \ = 0; j < operators.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6m069ar7.swift:48:20: error: value of type 'Int' has no subscripts\n \
    \   return operands[0]\n           ~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var opr = [String]()\n    var opra =\
    \ [Int]()\n    var n = 0; // counter of operator\n\n    for idx in 0..<operand.count\
    \ {\n        opr += operator\n        opra += operand[idx]\n    }\n    if opr.count\
    \ < 1 {\n        return 0\n    }\n    switch opr.count {\n    case 1...2:\n  \
    \      return opra[0]\n    case 2...3:\n        return opra[0] * opra[1]\n   \
    \ case 3...4:\n        return opra[0] * opra[1] * opra[2]\n    case 4...5:\n \
    \       return opra[0] * opra[1] * opra[2] * opra[3]\n    case 5...6:\n      \
    \  return opra[0] * opra[1] * opra[2] * opra[3] * opra[4]\n    case 6...7:\n \
    \       return opra[0] * opra[1] * opra[2] * opra[3] * opra[4] * opra[5]\n   \
    \ default:\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpjzv6edjt.swift:26:16: error: expected expression after operator\n\
    \        opr += operator\n               ^\n/tmp/tmpjzv6edjt.swift:26:24: error:\
    \ 'opra' is considered an identifier and must not appear within an operator name\n\
    \        opr += operator\n                       ^\n"
  stdout: ''
  timestamp: 1660012497
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    \n    // If the length of operator array\
    \ is equal to the length of operand array minus one, then we have\n    // all\
    \ the basic and useful operators to build the algebraic expression with two given\
    \ arrays of operands.\n    if operator.count == operand.count - 1 {\n        \n\
    \        // Iterate over the length of array operator and operand\n        for\
    \ i in 0..<operator.count {\n            \n            // If the operator at the\
    \ given index equals \"+\", then perform the addition.\n            if operator[i]\
    \ == \"+\" {\n                \n                // Create a new variable with\
    \ the result of the addition.\n                var result: Int = 0\n         \
    \       \n                // Iterate over the length of operand and add the result\
    \ to the result of the addition.\n                for j in 0..<operand.count {\n\
    \                    result += operand[j]\n                }\n               \
    \ return result\n                \n            } else if operator[i] == \"-\"\
    \ {\n                \n                // Create a new variable with the result\
    \ of the subtraction.\n                var result: Int = 0\n                \n\
    \                // Iterate over the length of operand and subtract the result\
    \ to the result of the subtraction.\n                for j in 0..<operand.count\
    \ {\n                    result -= operand[j]\n                }\n           \
    \     return result\n                \n            } else if operator[i] == \"\
    *\" {\n                \n                // Create a new variable with the result\
    \ of the multiplication.\n                var result: Int = 0\n              \
    \  \n                // Iterate over the length of operand and multiply the result\
    \ with the operand at the given index.\n                for j in 0..<operand.count\
    \ {\n                    result *= operand[j]\n                }\n           \
    \     return result\n                \n            } else if operator[i] == \"\
    /\" {\n                \n                // Create a new variable with the result\
    \ of the floor division.\n                var result: Int = 0\n              \
    \  \n                // Iterate over the length of operand and floor the result\
    \ with the operand at the given index.\n                for j in 0..<operand.count\
    \ {\n                    result /= operand[j]\n                }\n           \
    \     return result\n                \n            } else if operator[i] == \"\
    //\" {\n                \n                // Create a new variable with the result\
    \ of the floor division.\n                var result: Int = 0\n              \
    \  \n                // Iterate over the length of operand and floor the result\
    \ with the operand at the given index.\n                for j in 0..<operand.count\
    \ {\n                    result /= operand[j]\n                }\n           \
    \     return result\n                \n            } else if operator[i] == \"\
    **\" {\n                \n                // Create a new variable with the result\
    \ of the exponentiation.\n                var result: Int = 0\n              \
    \  \n                // Iterate over the length of operand and multiply the result\
    \ with the operand at the given index.\n                for j in 0..<operand.count\
    \ {\n                    result *= operand[j]\n                }\n           \
    \     return result\n                \n            }\n        }\n    }\n    \n\
    \    // If an algebraic expression is not possible, return nil.\n    return nil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpx1eb4glu.swift:24:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == operand.count - 1 {\n       ^\n/tmp/tmpx1eb4glu.swift:24:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count == operand.count\
    \ - 1 {\n               ^\n/tmp/tmpx1eb4glu.swift:101:12: error: 'nil' is incompatible\
    \ with return type 'Int'\n    return nil\n           ^\n"
  stdout: ''
  timestamp: 1660012497
