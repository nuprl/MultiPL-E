name: HumanEval_88_sort_array
language: swift
prompt: "\n/// Given an array of non-negative integers, return a coswift of the given\
  \ array after sorting,\n/// you will sort the given array in ascending order if\
  \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n/// Note:\n///\
  \ * don't change the given array.\n/// Examples:\n/// >>> sort_array(array: [] as\
  \ [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n/// >>> sort_array(array:\
  \ [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array: [2, 4,\
  \ 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int]) -> [Int]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as\
  \ [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4,\
  \ 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
  \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\n\
  assert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
  assert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
completions: ["    array.sort()\n    if array.last! > array.first! {\n        array.reverse()\n\
    \    }\n    return array", "    if array.count < 2 {\n        return array\n \
    \   }\n    var result = [Int]()\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n        result.insert(i, sum)\n    }\n    return\
    \ sort_array_helper(array, result)", "  var array = array\n  array.sort()\n  return\
    \ array", "    if array.isEmpty { return array }\n    if array.count <= 1 { return\
    \ array }\n    let sumFirst = array.first ?? 0\n    let sumLast = array.last ??\
    \ 0\n    guard sumLast - sumFirst > 0 else {\n        return sort_array(array:\
    \ array[1..<array.count])\n    }\n    var result = array\n    result.sortInPlace()\n\
    \    if sumFirst % 2 == 0 {\n        result.reverse()\n    }\n    return result",
  "    if array.isEmpty {\n        return array\n    }\n\n    let sum = array.sum()\
    \ ?? 0\n    var result: [Int] = []\n\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    }\n    else {\n        array.sortInPlace({ $0 < $1 })\n    }\n\n    for i\
    \ in 0..<array.count {\n        result.append(array[i])\n    }\n\n    return result",
  '    return array.sorted()', '    return array.sorted(by: >)', "    // write your\
    \ code here\n    let sum = array.sum\n    let newArray = array.sorted()\n    if\
    \ sum % 2 == 1 {\n        newArray.reverse()\n    }\n    return newArray", " \
    \   let sorted = array.sorted(by: >)\n    let coswift = sorted == sorted ? []\
    \ : sorted + sorted[sorted.startIndex]\n    return coswift", "    if array.count\
    \ == 0 { return array }\n    var sum = 0\n    var len = array.count\n    for i\
    \ in 0..<len - 1 {\n        sum += array[i]\n    }\n    let isSumOdd = (sum %\
    \ 2 == 1)\n    var newArray = array\n    for i in 0..<len - 1 {\n        if isSumOdd\
    \ {\n            newArray[newArray.count - i - 1] -= 1\n            newArray[newArray.count\
    \ - i - 1] = newArray[newArray.count - i - 1] + 1\n        } else {\n        \
    \    newArray[newArray.count - i - 1] += 1\n            newArray[newArray.count\
    \ - i - 1] -= 1\n        }\n    }\n    return newArray", "    let result = array.sorted(by:\
    \ {\n        if $0 % 2 == 0 {\n            return false\n        } else {\n  \
    \          return true\n        }\n    })\n    return result", "    var sum =\
    \ 0\n    let len = array.count\n    var newArray = array\n\n    for i in 0..<len\
    \ - 1 {\n        sum += array[i]\n    }\n\n    if sum % 2 == 1 {\n        newArray.sort(<)\n\
    \    } else {\n        newArray.sort(>)\n    }\n\n    return newArray", "    if\
    \ array.isEmpty { return array }\n    \n    // sort in ascending order if the\
    \ sum( first index value, last index value) is odd\n    var sumOfFirstIndexValue\
    \ = array[0]\n    var sumOfLastIndexValue = array[0]\n    for element in array\
    \ {\n        sumOfFirstIndexValue += element\n        sumOfLastIndexValue += element\n\
    \    }\n    if sumOfFirstIndexValue % 2 == 1 {\n        array.sorted{ $0 < $1\
    \ }\n    } else {\n        array.sorted{ $0 > $1 }\n    }\n    return array",
  "    \n    var result = array.sort{ $0 > $1 }\n    if result[0] != result[1] {\n\
    \        result = result.sorted(by: { $0 < $1 })\n    }\n    return result", '    return
    array.sorted().map { $0 }', "    if array.count < 2 {\n        return array\n\
    \    }\n    var newArray = array\n    var sum: Int = 0\n    for value in array\
    \ {\n        sum += value\n    }\n    sum -= array.minElement()\n    sum -= array.maxElement()\n\
    \    if sum%2 == 1 {\n        return newArray.sorted(by: { (a, b) -> Bool in\n\
    \            return b < a\n        })\n    } else {\n        return newArray.sorted(by:\
    \ { (a, b) -> Bool in\n            return a > b\n        })\n    }", "    let\
    \ sum = get_sum_array(array: array)\n\n    let sortedArray = array.sorted()\n\n\
    \    if sum % 2 == 0 {\n        return sortedArray\n    } else {\n        sortedArray.reverse()\n\
    \        return sortedArray\n    }", "    if array.count == 0 {\n        return\
    \ array\n    }\n    var first = 0\n    var last = array.count - 1\n    var temp\
    \ = 0\n    guard array.count > 1 else { return array }\n    while first < last\
    \ {\n        if array[first] + array[last] % 2 == 1 {\n            temp = array[last]\n\
    \            array[last] = array[first]\n            array[first] = temp\n   \
    \         first += 1\n            last -= 1\n        } else {\n            first\
    \ += 1\n        }\n    }\n    return array", "    if array.isEmpty {\n       \
    \ return []\n    }\n    var arrayCopy = array as! [Int]\n    var leftIndex = 0\n\
    \    var rightIndex = arrayCopy.count - 1\n    let sumValue = arrayCopy.last!\
    \ + arrayCopy.first!\n    var leftSum = sumValue - arrayCopy.first!\n    var rightSum\
    \ = sumValue - arrayCopy.last!\n    \n    while leftIndex <= rightIndex {\n  \
    \      if leftSum < rightSum {\n            swap(&arrayCopy[leftIndex], &arrayCopy[rightIndex])\n\
    \            leftIndex += 1\n            rightIndex -= 1\n            leftSum\
    \ += arrayCopy[leftIndex]\n            rightSum -= arrayCopy[rightIndex]\n   \
    \     }\n        if rightSum > leftSum {\n            swap(&arrayCopy[rightIndex],\
    \ &arrayCopy[leftIndex])\n            leftIndex += 1\n            rightIndex -=\
    \ 1\n            leftSum -= arrayCopy[leftIndex]\n            rightSum += arrayCopy[rightIndex]\n\
    \        }\n    }\n    return arrayCopy", "    var result = [Int]()\n    var i\
    \ = 0\n    var j = 0\n    var sum = 0\n\n    while i < array.count {\n       \
    \ sum = array[i] + array[j]\n        i += 1\n        j += 1\n        if sum %\
    \ 2 == 0 {\n            result.append(sum)\n            i += 1\n        } else\
    \ {\n            j -= 1\n        }\n    }\n    return result", "    var new_array\
    \ = [Int](repeating: 0, count: array.count)\n    new_array = sorted(array) { $0\
    \ > $1 }\n    return new_array", '    return array.sorted(by: >)', "    var result\
    \ = array\n    if array.count < 2 { return result }\n    if array.count > 2 {\n\
    \        swap(&result[0], &result[1])\n    }\n    var sum : Int = 0\n    for i\
    \ in 0 ..< array.count {\n        sum += array[i]\n    }\n    if sum % 2 == 1\
    \ {\n        swap(&result[0], &result[1])\n    }\n    return result", '    return
    array.sorted(by: >)', "    var array = array\n    let len = array.count\n    var\
    \ result = array.copy()\n    if array.first % 2 == 1 {\n        result = result.sorted(by:\
    \ >)\n    }\n    else {\n        result = result.sorted(by: <)\n    }\n    return\
    \ result", "    \n    let sum = array.map { $0 + $1 }.sum\n    \n    if sum %\
    \ 2 == 1 {\n        array.sortInPlace()\n    } else {\n        array.sortInPlace{\
    \ $0 < $1 }\n    }\n    \n    return array", "    return array.sorted { (a, b)\
    \ -> Bool in\n        let c = a + b\n        if c % 2 == 1 {\n            return\
    \ false\n        } else {\n            return true\n        }\n    }", "    let\
    \ n = array.count\n    var a = array\n    let res = array.sort { (a: Int, b: Int)\
    \ -> Bool in\n        let res = a+b\n        return res % 2 == 1 ? true : false\n\
    \    }\n    return res", "    let maxIndex = array.count - 1\n    let maxValue\
    \ = array[0]\n    var array = array\n\n    let sumOfFirstIndexValues = array.prefixSum(from:\
    \ 0, to: maxIndex)\n    let sumOfLastIndexValues = array.suffixSum(from: 0, to:\
    \ maxIndex)\n\n    let sumOfFirstIndexValuesIsEven = sumOfFirstIndexValues.isEven\n\
    \    let sumOfLastIndexValuesIsEven = sumOfLastIndexValues.isEven\n\n    let sumOfFirstIndexValuesIsOdd\
    \ = sumOfFirstIndexValues.isOdd\n    let sumOfLastIndexValuesIsOdd = sumOfLastIndexValues.isOdd\n\
    \n    if sumOfFirstIndexValuesIsOdd && !sumOfLastIndexValuesIsEven {\n       \
    \ array = array.sorted()\n    } else if !sumOfFirstIndexValuesIsEven && sumOfLastIndexValuesIsEven\
    \ {\n        array = array.sorted(by: >)\n    } else if sumOfFirstIndexValuesIsOdd\
    \ && sumOfLastIndexValuesIsEven {\n        array = array.sorted(by: <)\n    }\n\
    \n    return array", "    array.sortInPlace({$0.0 < $0.1})\n    return array",
  "    array.sort()\n    return array", "    array.sort { (lhs: Int, rhs: Int) ->\
    \ Bool in\n        let (as, bs) = (lhs, rhs)\n        if as < bs {\n         \
    \   return true\n        } else if as == bs {\n            return 0\n        }\
    \ else {\n            return false\n        }\n    }\n    return array", '    return
    array.sorted { $0 + $1 < $1 }', "    let n = array.count\n    if n == 0 {\n  \
    \      return array\n    }\n    var result = [Int]()\n    var sum: Int = 0\n \
    \   for i in 0 ..< n {\n        sum += array[i]\n        result.append(i)\n  \
    \  }\n    if sum % 2 == 0 {\n        result.sort(sortFunction)\n    } else {\n\
    \        result.sort(sortFunction.reversed())\n    }\n    return result", "  \
    \  \n    if array.isEmpty {\n        return array\n    }\n    \n    var result\
    \ = [Int]()\n    \n    let maxValue = array[0] + array[array.count-1]\n    \n\
    \    for i in (0..<array.count).reversed() {\n        let value = array[i]\n \
    \       let valueToAdd = maxValue - value\n        \n        if valueToAdd > 0\
    \ {\n            array[i] += valueToAdd\n            array.removeAtIndex(i)\n\
    \        }\n        \n        result.append(value)\n    }\n    \n    return result",
  "    var sorted = [Int]()\n    \n    if array.count == 0 {\n        return sorted\n\
    \    }\n    \n    var max = array[0]\n    \n    for value in array {\n       \
    \ sorted.append(value)\n        \n        if value > max {\n            max =\
    \ value\n        }\n    }\n    \n    if max%2 == 1 {\n        sorted.reverse()\n\
    \    } else {\n        sorted.sort()\n    }\n    \n    return sorted", "    guard\
    \ array.count > 0 else { return array }\n    let sum : Int? = array.last\n   \
    \ array.sort { $0 < $1 }\n    if sum != nil { array.sort { $0 < $1 } }\n    return\
    \ array", "    if array.count == 0 {\n        return array\n    }\n\n    let (min,\
    \ max) = array.minMax()\n    if min > 0 {\n        let swap1 = min(max, array[array.count\
    \ - 1])\n        array.swap(&swap1)\n    }\n\n    var sum1 = 0, sum2 = 0\n   \
    \ for i in array.reverse() {\n        sum1 += i\n        sum2 += i + min\n   \
    \ }\n\n    sum2 -= min\n    let swap2 = min(sum2, array[array.count - 1])\n  \
    \  array.swap(&swap2)\n\n    return array", "    if array.count < 2 { return array\
    \ }\n    guard let first = array.first else {\n        array = array.reversed()\n\
    \        return sort_array(array: array)\n    }\n    guard let last = array.last\
    \ else {\n        array = array.reversed()\n        return sort_array(array: array)\n\
    \    }\n\n    if array[first] % 2 == 0 {\n        array = array.sorted(by: >)\n\
    \    } else {\n        array = array.sorted(by: <)\n    }\n    return array",
  "    if array.count <= 1 {\n        return array\n    }\n\n    var sorted = [Int](repeating:\
    \ array[0], count: array.count)\n\n    let swiftArray = array.sorted()\n    if\
    \ swiftArray.first % 2 == 1 {\n        sorted = array.sorted().reversed()\n  \
    \  } else {\n        sorted = array\n    }\n    return sorted", "    // Your code\
    \ here\n    if array.count < 2 {\n        return array\n    }\n    var sum : Int\
    \ = 0\n    for i in 0..<array.count {\n        sum += array[i]\n    }\n    if\
    \ sum%2 != 0 {\n        return array.sorted{ $0 < $1 }\n    }\n    return array.sorted{\
    \ $0 > $1 }", "    let sum = (array.first ?? 0) + array.last!\n    if sum % 2\
    \ == 1 {\n        array.sorted { $0 < $1 }\n    } else {\n        array.sorted\
    \ { $0 > $1 }\n    }\n    return array", "    var sum = 0\n    for x in array\
    \ {\n        sum += x\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    }\n    else {\n        array.reverse()\n        array.sortInPlace()\n   \
    \ }\n    return array", "    if array.count < 2 {\n        return array\n    }\n\
    \    var maxSum = 0\n    var minSum = Int64(array.last!)\n    var sum = 0\n  \
    \  var result = [Int]()\n    for number in array {\n        sum += number\n  \
    \      if sum > maxSum {\n            maxSum = sum\n        }\n        if sum\
    \ < minSum {\n            minSum = sum\n        }\n    }\n    if maxSum > minSum\
    \ {\n        for number in array {\n            if number > maxSum {\n       \
    \         result.append(number)\n                sum -= number\n             \
    \   maxSum = sum\n            }\n            if number < minSum {\n          \
    \      result.insert(number, at: result.endIndex)\n                sum -= number\n\
    \                minSum = sum\n            }\n        }\n    } else {\n      \
    \  for number in array {\n            if number < minSum {\n                result.insert(number,\
    \ at: result.endIndex)\n                sum -= number\n                minSum\
    \ = sum\n            }\n            if number > maxSum {\n                result.insert(number,\
    \ at: result.endIndex)\n                sum -= number\n                maxSum\
    \ = sum\n            }\n        }\n    }\n    return result", "    let sortedArray\
    \ = array.sorted()\n    if sum (array[0], array[array.count-1]) % 2 == 1 {\n \
    \       sortedArray.reverse()\n    }\n    return sortedArray", '    return array.sort()',
  "    // 1. get sum\n    var sum = array.reduce(0) { $0 + $1 }\n    // 2. check sum\
    \ is odd or even\n    if sum % 2 == 1 {\n        array.sortInPlace()\n    } else\
    \ {\n        array.sortDescending()\n    }\n    return array", "    let mut array\
    \ = array\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ < 2 {\n        return array\n    }\n\n    let mid = array.count / 2\n    let\
    \ midVal = array[mid]\n    array.sortInPlace()\n\n    if sumOfTwoNumbers(array:\
    \ array) % 2 == 1 {\n        array.reverse()\n    }\n\n    return array", "  \
    \  if array.count < 2 {\n        return array\n    }\n\n    let sum = array.sum()\n\
    \    var sorted = [Int]()\n\n    if sum % 2 == 1 {\n        sorted = array.sorted(by:\
    \ { $0 < $1 })\n    }\n    else {\n        sorted = array.sorted(by: { $0 > $1\
    \ })\n    }\n\n    return sorted", "    var new_array = [Int]()\n    new_array.append(array[0])\n\
    \    new_array.append(array[0])\n    var counter = 1\n    for i in array {\n \
    \       if i % 2 == 1 {\n            new_array.append(i)\n        } else {\n \
    \           new_array.append(array[counter])\n        }\n        counter += 1\n\
    \    }\n    return new_array", '    return array.sorted().sort()', "    var swapped\
    \ = true\n    var sortedArray: [Int] = []\n    var sum = 0\n    for value in array\
    \ {\n        sum += value\n        if sum > 0 {\n            sortedArray.append(value)\n\
    \        }\n    }\n\n    if sum % 2 == 0 {\n        for value in array {\n   \
    \         if value != sortedArray[0] {\n                swapped = false\n    \
    \            sortedArray.removeFirst()\n                sortedArray.append(value)\n\
    \                break\n            }\n        }\n    } else {\n        for value\
    \ in array {\n            if value != sortedArray[sortedArray.count - 1] {\n \
    \               swapped = false\n                sortedArray.removeLast()\n  \
    \              sortedArray.append(value)\n                break\n            }\n\
    \        }\n    }\n    if swapped {\n        return sort_array(array: sortedArray)\n\
    \    }\n    return sortedArray", "    var sortedArray = [Int]()\n    var sum =\
    \ 0\n    var first = 0\n    var last = array.count - 1\n    while last > first\
    \ {\n        sum = array[first] + array[last]\n        sortedArray.append(sum)\n\
    \        if sum % 2 == 1 {\n            sortedArray = sortedArray.reversed()\n\
    \        }\n        first += 1\n        last -= 1\n    }\n    return sortedArray",
  "    let sumArray = array.enumerated().flatMap { $0.element + $1.element }\n   \
    \ return sumArray.sorted { $0 > $1 }", '    return array.sorted { $0 < $1 }',
  "    let sum = array.sum\n    if sum % 2 == 1 {\n        array.sort() { $0 < $1\
    \ }\n    } else {\n        array.sort() { $0 > $1 }\n    }\n    return array",
  "    \n    return array.sort{ $0 < $1 }", "    if array.count == 0 {\n        return\
    \ array\n    }\n    var swiped = false\n    if array.last % 2 == 0 {\n       \
    \ swiped = true\n        array.append(array.last! - 1)\n    }\n    var sum = 0\n\
    \    var index = 0\n    for value in array {\n        sum += value\n        if\
    \ swiped && sum % 2 == 0 {\n            sum += value - array[index]\n        }\
    \ else {\n            sum += value - array[array.count - index - 1]\n        }\n\
    \        index += 1\n    }\n    if swiped {\n        array = array[1..<array.count\
    \ - 1]\n    }\n    return array", "    var sorted = array\n    if sorted.count\
    \ > 0 {\n        sorted.sortInPlace()\n    }\n    return sorted", "    if array.count\
    \ == 0 {\n        return array\n    }\n    let sumOfFirstElement = array[0]\n\
    \    let sumOfLastElement = array[array.count - 1]\n    if sumOfFirstElement %\
    \ 2 == 1 && sumOfLastElement % 2 == 0 {\n        return array.sorted { $0 < $1\
    \ }\n    }\n    return array.sorted { $0 > $1 }", "    // 1. \u5C06\u6570\u7EC4\
    \u8F6C\u6362\u4E3A\u5B57\u7B26\u4E32\n    var str = array.map(String.init).joined()\n\
    \    // 2. \u6839\u636E\u5B57\u7B26\u4E32\u8BA1\u7B97\u51FA\u6700\u5927\u7684\u6570\
    \n    var max = Int(str.characters.first!)\n    for character in str.characters.dropFirst()\
    \ {\n        if character < max {\n            max = character\n        }\n  \
    \  }\n    // 3. \u5C06\u6570\u7EC4\u6309\u7167\u5B57\u7B26\u4E32\u7684\u6700\u5927\
    \u6570\u5BF9\u5E94\u7684\u5143\u7D20\u8FDB\u884C\u6392\u5E8F\n    var arr = array.map\
    \ {\n        if $0 < max {\n            $0\n        } else {\n            -$0\n\
    \        }\n    }\n    return arr", "    precondition(array.count >= 1, \"the\
    \ array can not be empty.\")\n\n    let sortedArray = array.sorted { $0 < $1 }\n\
    \    let first = sortedArray[0]\n    let last = sortedArray[sortedArray.count-1]\n\
    \    let sumOfFirstAndLast = first + last\n\n    if sumOfFirstAndLast % 2 == 0\
    \ {\n        sortedArray.sorted { $0 < $1 }\n    } else {\n        sortedArray.sorted\
    \ { $0 > $1 }\n    }", "    // write your code here\n    \n    var result = array.sorted()\
    \ { $0.0 < $1.0 }\n    if result.isEmpty {\n        result = array.reversed()\n\
    \    }\n    \n    return result", "    if array.count <= 1 {\n        return array\n\
    \    }\n    let mut sum = 0\n    for i in 0..<array.count {\n        sum += array[i]\n\
    \    }\n    if sum % 2 == 0 {\n        let result = array.sorted()\n        return\
    \ result as! [Int]\n    } else {\n        let result = array.sorted().reversed()\n\
    \        return result as! [Int]\n    }", "    let maxIndex = array.count - 1\n\
    \    var maxSum = array[maxIndex]\n    for i in maxIndex {\n        let sum =\
    \ array[i].powi(2) + array[i].powf(2)\n        if sum > maxSum {\n           \
    \ maxSum = sum\n            maxIndex = i\n        }\n    }\n    if maxIndex !=\
    \ 0 {\n        if maxSum.lt(maxSum.negate()) {\n            return array[maxIndex..<0]\n\
    \        } else {\n            return array[0..<maxIndex].reversed()\n       \
    \ }\n    } else {\n        return array\n    }", "    guard let sum = array.sum()\
    \ else { return array }\n    var result = array.sorted()\n    if sum % 2 == 1\
    \ {\n        result = result.sorted { $0 < $1 }\n    } else {\n        result\
    \ = result.sorted { $0 > $1 }\n    }\n    return result", "    if array.isEmpty\
    \ { return array }\n    let (firstValue, lastValue) = array.first { $0 > $1 }\n\
    \    let (first, last) = array.splitFirstLast()\n    return firstValue > lastValue\
    \ ? sort_array(array: last) + first : sort_array(array: first) + last", "    if\
    \ array.count < 2 {\n        return array\n    }\n    let sum = (array[0] + array[array.count\
    \ - 1]).truncatingRemainder(dividingBy: 0)\n    switch sum {\n    case .odd:\n\
    \        return array.sorted { $0 < $1 }\n    case .even:\n        return array.sorted\
    \ { $0 > $1 }\n    default:\n        return array\n    }", "    func swap(a: Int,\
    \ b: Int) {\n        var tmp = array[a]\n        array[a] = array[b]\n       \
    \ array[b] = tmp\n    }\n\n    if array.count <= 1 {\n        return array\n \
    \   }\n\n    let sumFirst = array[0] + array[-1]\n    let sumLast = array[array.count\
    \ - 1] + array[0]\n    let isFirstSumEven = sumFirst % 2 == 0\n    let isLastSumEven\
    \ = sumLast % 2 == 0\n    var isSorted = true\n\n    while isSorted {\n      \
    \  isSorted = false\n        for i in 0..<array.count - 1 {\n            let sum\
    \ = array[i] + array[i + 1]\n            let isEven = sum % 2 == 0\n         \
    \   let isOdd = !isEven\n            if !isEven && !isOdd {\n                isSorted\
    \ = true\n                swap(i, i + 1)\n                swap(array.count - i\
    \ - 1, array.count - 1)\n            }\n        }\n    }\n\n    for i in 0..<array.count\
    \ {\n        swap(i, array.count - 1)\n    }\n\n    return array", "    \n   \
    \ return array.sorted()", "    return array.sorted {\n        if $0 + $1 < $1\
    \ {\n            return $0 + $1 < $1\n        } else {\n            return $0\
    \ + $1 > $1\n        }\n    }", "    var swift = [Int]()\n    for value in array\
    \ {\n        swift.append(value)\n    }\n    swift.sort()\n    for value in swift\
    \ {\n        swift[swift.count - value - 1] = 0\n    }\n    return swift", '    return
    array.sorted { $0 > $1 }', '    return array.sorted()', "    if array == [] {\n\
    \        return array\n    }\n    var swaps: [(Int, Int)] = []\n    var sum: Int\
    \ = 0\n    for element in array {\n        sum += element\n        if sum % 2\
    \ == 0 {\n            swaps.append((sum, element))\n        } else {\n       \
    \     swaps.append((sum - element, element))\n        }\n    }\n    swaps.sort{\
    \ $0.0 < $1.0 }\n    return swaps.map{ $1.0 }", '    return array.sorted(by: >)',
  '  return sort_array(array: array, isAscending: true)', "    \n    guard array.count\
    \ > 0 else { return array }\n    \n    let totalSum = array.map({ $0 + $1 }).reduce(0,\
    \ +)\n    \n    return array.sorted{ totalSum > $0 + $1 }", '    return array.sorted
    { $0 > $1 }', "\tlet sum = array.last! + array.first!\n\tlet index = array.first!\n\
    \tvar result = array\n\t\n\tif sum % 2 == 1 {\n\t\tresult.sortInPlace()\n\t} else\
    \ {\n\t\tresult.sortInPlace()\n\t\tresult.reverse()\n\t}\n\t\n\treturn result",
  '    return array.sorted()', "    return array.sorted { (a, b) -> Bool in\n    \
    \    if a+b == 1 {\n            return a == b\n        }\n        if a + b < 0\
    \ {\n            return false\n        }\n        if a + b > 1 {\n           \
    \ return true\n        }\n        return false\n    }", '    return array.sorted
    { $0 < $1 }', '    return array.sorted(by: {$0.0 < $1})', "    let coswiftArray\
    \ = array.map { $0 * $0 }\n    return coswiftArray.sort()\n        .map { $0 -\
    \ $1 }", "    var a = array\n    var b = array\n    for i in 0..<(array.count\
    \ - 1) {\n        for j in (i + 1)..<(array.count) {\n            var sum = 0\n\
    \            for k in 0..<(j - i) {\n                sum += a[k] * b[k]\n    \
    \        }\n            if sum > 0 {\n                let temp = sum\n       \
    \         sum = 0\n                for (k) in (i..<j) {\n                    sum\
    \ += a[k] * b[k]\n                }\n                if sum < temp {\n       \
    \             b[i], b[j] = b[j], b[i]\n                }\n            }\n    \
    \    }\n    }\n    return b", "    let sum = array.count\n    let coswift = (array.sortInPlace())\n\
    \    return coswift.prefix(sum).reversed()", '    return array.sorted { $0 > $1
    }', "    precondition(array.count != 0, \"The array can't be empty\")\n    let\
    \ sum = array.reduce(0, +)\n    if sum%2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace{ $0 < $1 }\n    }\n    return array",
  "    if array.count == 0 {\n        return array\n    }\n    \n    var sortedArray\
    \ = array.sorted()\n    let firstIndex = sortedArray.firstIndex(of: array.first!)\n\
    \    let lastIndex: Int? = sortedArray.lastIndex(of: array.last!)\n    let sum:\
    \ Int = firstIndex! + lastIndex!\n    \n    // first case is odd, second case\
    \ is even\n    if sum % 2 == 1 {\n        sortedArray = sortedArray.reversed()\n\
    \    }\n    \n    return sortedArray", "    return array.sorted { (ls, rs) in\n\
    \        var ld = rs\n        var rd = ls\n        if ld == rd {\n           \
    \ return ls\n        }\n        if ld > rd {\n            let temp = rd\n    \
    \        rd = ls\n            ls = temp\n        }\n        if ld > rd + 1 {\n\
    \            let temp = ld + rd - 1\n            rd = temp\n        }\n      \
    \  if rd > ld + 1 {\n            let temp = ld + rd\n            ld = temp\n \
    \       }\n        return ld > rd ? ld : rd\n    }", '    return array.sorted().reversed()',
  '    return array.sorted()', "    if array.isEmpty { return array }\n    var result\
    \ = [Int](repeating: 0, count: array.count)\n    \n    for i in 0..<array.count\
    \ {\n        result[array.sortedIndex(of: array[i])!] = array[i]\n    }\n    return\
    \ result", "    if array.count == 0 {\n        return []\n    }\n    var sum =\
    \ 0\n    for value in array {\n        sum += value\n    }\n    if sum % 2 ==\
    \ 1 {\n        array.sorted()\n    } else {\n        array.sorted().reversed()\n\
    \    }\n    return array", '    return array.sorted(by: >)', '    return sorted(array)',
  "    precondition(array.count > 0)\n\n    var sum = array.reduce(0, combine: +)\n\
    \n    var isOdd = (sum & 1) == 1\n    var isEven = (sum & 1) == 0\n\n    if isOdd\
    \ {\n        array = array.sorted{ $0 < $1 }\n    } else {\n        array = array.sorted{\
    \ $0 > $1 }\n    }\n\n    return array", "    if array.count < 2 {\n        return\
    \ array\n    }\n\n    var sum = 0\n\n    var tempArray = [Int]()\n\n    for value\
    \ in array {\n        tempArray.append(value)\n        sum += value\n    }\n\n\
    \    if sum % 2 == 1 {\n        tempArray.sortInPlace()\n    } else {\n      \
    \  tempArray.sortInPlace()\n        tempArray.reverse()\n    }\n\n    return tempArray",
  "    guard let firstItem = array.first else { return array }\n    guard let lastItem\
    \ = array.last else { return array }\n    var newArray = array\n    let firstItemIsOdd\
    \ = firstItem % 2 == 1\n    let firstItemIsEven = firstItem % 2 == 0\n    let\
    \ lastItemIsEven = lastItem % 2 == 0\n\n    if firstItemIsOdd && lastItemIsEven\
    \ {\n        newArray = sort_array_odd_even(array: newArray)\n    } else if firstItemIsEven\
    \ && lastItemIsOdd {\n        newArray = sort_array_even_odd(array: newArray)\n\
    \    } else {\n        newArray = sort_array_odd_even(array: newArray)\n    }\n\
    \    return newArray", "    return array.sorted { (first, second) -> Bool in\n\
    \        let firstSum = first + second\n        let secondSum = first - second\n\
    \        let firstSumEven = first % 2 == 0\n        let secondSumEven = second\
    \ % 2 == 0\n\n        let firstSumOdd = firstSum % 2 == 1\n        let secondSumOdd\
    \ = secondSum % 2 == 1\n\n        return firstSumEven\n            || (secondSumEven\
    \ && firstSumOdd)\n            || (secondSumOdd && firstSumEven)\n    }", "  \
    \  if array.count < 2 {\n        return array\n    }\n    if array.count > 2 {\n\
    \        if array.first + array.last - 2 * array.count == 0 {\n            return\
    \ array\n        }\n        if array.first + array.last - 2 * array.count < 0\
    \ {\n            return array.reversed()\n        }\n        if array.first +\
    \ array.last - 2 * array.count == 1 {\n            return array\n        }\n \
    \   }\n    let sum = (array.first ?? 0) + array.last\n    let swap = swap(array:\
    \ array, firstIndex: array.first, lastIndex: array.last)\n    let result = sortArray(array:\
    \ array)\n    if sum % 2 == 0 {\n        return result.reversed()\n    } else\
    \ {\n        return result\n    }", '    return array.sorted(by: >)', "    var\
    \ retVal = [Int]()\n\n    if array.count < 2 {\n        return retVal\n    }\n\
    \n    let firstValue = array[0]\n    let lastValue = array[array.count - 1]\n\n\
    \    if firstValue + lastValue == 0 {\n        return retVal\n    }\n\n    if\
    \ firstValue + lastValue == 1 {\n        let tempRetVal = sort_array(array: array[0..<array.count\
    \ - 1])\n        retVal = retVal + tempRetVal\n        return retVal\n    }\n\n\
    \    if firstValue + lastValue % 2 == 0 {\n        retVal = retVal + sort_array(array:\
    \ array[0..<array.count - 1])\n        return retVal\n    } else {\n        let\
    \ tempRetVal = sort_array(array: array[1..<array.count])\n        retVal = retVal\
    \ + tempRetVal\n        return retVal\n    }", "    var sum = 0\n    var swift:\
    \ [Int] = []\n    array.forEach {\n        sum += $0\n    }\n    swift.reserveCapacity(array.count)\n\
    \    if sum%2 == 1 {\n        array.forEach { swift.append($0 - 1) }\n    } else\
    \ {\n        array.forEach { swift.append($0 + 1) }\n    }\n    swift.sortInPlace({\
    \ $0 < $1 })\n    return swift", "    let copy = array\n    copy.sort()\n    return\
    \ copy", "    var sum = array[0]\n    var result = array\n    for i in 1 ..< array.count\
    \ {\n        let last = result[i-1]\n        let first = array[i]\n        if\
    \ last + first > sum {\n            result = result.sorted()\n        }\n    \
    \    else {\n            let factor = sum / last\n            result = result.sorted().map\
    \ { (v) -> Int in\n                return v * factor\n            }\n        }\n\
    \        sum = last + first\n    }\n    return result", "    var result = [Int]()\n\
    \    for element in array {\n        if element % 2 == 1 {\n            result.insert(element,\
    \ at: 0)\n        } else {\n            result.insert(element, at: result.endIndex)\n\
    \        }\n    }\n    return result.sorted()", "    let resultArray = array.sorted(by:\
    \ >)\n    return resultArray", '    return array.sorted()', "    let swiftArray\
    \ = array.sorted()\n    let even = swiftArray.first!\n    let odd = swiftArray.last!\n\
    \    return odd...even", "    var new_array = Array(array)\n    let array_sum\
    \ = new_array.sum()\n    if array_sum % 2 == 0 {\n        for _ in new_array {\n\
    \            let idx = new_array.index(of: 0)!\n            new_array.removeAtIndex(idx)\n\
    \            new_array.insert(1, at: idx)\n        }\n    } else {\n        for\
    \ _ in new_array {\n            let idx = new_array.index(of: 0)!\n          \
    \  new_array.removeLast()\n            new_array.insert(idx, at: 0)\n        }\n\
    \    }\n    return new_array", "    let mut arr = array.clone();\n    sort_array(&mut\
    \ arr);\n    return arr", '    return array.sorted()', "    let length = array.count\n\
    \    \n    let sum = (array[length-1] + array[length]) / 2\n    \n    let isOdd\
    \ = (sum % 2) != 0\n    \n    var swiftArray = array\n    \n    for i in 0..<length\
    \ - 1 {\n        if isOdd {\n            if array[i] > array[i+1] {\n        \
    \        swiftArray[i] = array[i]\n                swiftArray[i+1] = array[i+1]\n\
    \            } else {\n                swiftArray[i] = array[i+1]\n          \
    \      swiftArray[i+1] = array[i]\n            }\n        } else {\n         \
    \   if array[i] < array[i+1] {\n                swiftArray[i] = array[i]\n   \
    \             swiftArray[i+1] = array[i+1]\n            } else {\n           \
    \     swiftArray[i] = array[i+1]\n                swiftArray[i+1] = array[i]\n\
    \            }\n        }\n    }\n    \n    return swiftArray", '    return array.sorted
    { $0.swiftySum % 2 == $1.swiftySum % 2 }', "    if array.count == 0 {\n      \
    \  return array\n    }\n    var result = array\n    let sumUp = array.reduce(0,\
    \ { (sum, element) -> Int in\n        return sum + element\n    })\n    if sumUp\
    \ % 2 == 1 {\n        result.reverse()\n    }\n    return result", "    var coswift\
    \ = array.sorted()\n    \n    if (coswift.first > coswift.last) { return coswift\
    \ }\n\n    // if the sum of the first and last elements is even, sort it in descending\
    \ order\n    if coswift.first + 1 == coswift.last {\n        coswift.reverse()\n\
    \    }\n    return coswift", "    _ = array.sorted()\n    return array", "   \
    \ return array.sorted {\n        let firstIndex = $0\n        let lastIndex =\
    \ $1\n\n        let sum = firstIndex + lastIndex\n\n        let firstSum = firstIndex\
    \ * -1\n        let lastSum = lastIndex * -1\n\n        // if first index and\
    \ last index sums are same then it is even\n        if sum == firstSum {\n   \
    \         return $0 < $1\n        }\n        // if first index and last index\
    \ sums are different then it is odd\n        return sum != firstSum\n    }", " \
    \   var sorted = array as [Int]\n    if sorted.isEmpty {\n        return array\n\
    \    }\n\n    let min = min(sorted)\n    let max = max(sorted)\n    if min ==\
    \ max {\n        return sorted\n    }\n\n    sorted.sort {\n        switch $0\
    \ {\n        case .lessThanOrEqualTo(min):\n            return .orderedAscending\n\
    \        case .greaterThanOrEqualTo(max):\n            return .orderedDescending\n\
    \        default:\n            return .orderedAscending\n        }\n    }\n  \
    \  return sorted", '    sort_array(array: array, start: 0, end: array.count -
    1)', "    guard array.count >= 2 else {\n        return array\n    }\n    let\
    \ firstHalf = array.prefix(array.count / 2)\n    let secondHalf = array.suffix(array.count\
    \ / 2)\n    return firstHalf.sorted + secondHalf.sorted", "    \n    var arraySorted\
    \ = [Int]()\n    \n    for element in array {\n        arraySorted.append(element)\n\
    \    }\n    \n    let sumOfFirstIndexElements = arraySorted.reduce(0, +)\n   \
    \ let sumOfLastIndexElements = arraySorted.last! * -1\n    let sumOfAllElements\
    \ = sumOfFirstIndexElements + sumOfLastIndexElements\n    \n    if sumOfAllElements\
    \ % 2 == 1 {\n        arraySorted.sort { (first, last) -> Bool in\n          \
    \  return last > first\n        }\n    }\n    else {\n        arraySorted.sort\
    \ { (first, last) -> Bool in\n            return first < last\n        }\n   \
    \ }\n    \n    return arraySorted", "    var sortedArray = array\n    if array.count\
    \ < 2 {\n        return sortedArray\n    }\n    if array.count == 2 {\n      \
    \  if sortedArray[0] + sortedArray[1] % 2 == 1 {\n            sortedArray = sortedArray.reversed()\n\
    \        } else {\n            sortedArray = sortedArray.sorted()\n        }\n\
    \        return sortedArray\n    }\n    var pivot = sortedArray[0]\n    for i\
    \ in 1...array.count {\n        if sortedArray[i] == pivot {\n            sortedArray[i]\
    \ = sortedArray[i - 1]\n        }\n    }\n    sortedArray[0] = pivot\n    if sortedArray[0]\
    \ + sortedArray[1] % 2 == 1 {\n        sortedArray = sortedArray.reversed()\n\
    \    } else {\n        sortedArray = sortedArray.sorted()\n    }\n    return sortedArray",
  "    guard let first = array.first, last = array.last else {\n        return array\n\
    \    }\n    let sumFirst = array.map { $0 + $1 }.sum() % 2 != 0 ? last : first\n\
    \    let sumLast = array.map { $0 + $1 }.sum() % 2 == 0 ? last : first\n    return\
    \ array\n        .enumerated()\n        .sorted { $0.element < $1.element }\n\
    \        .map { $0.element + sumFirst }\n        + array\n        .enumerated()\n\
    \        .sorted { $0.element > $1.element }\n        .map { $0.element + sumLast\
    \ }", "    var index = 0\n    var evenSum = 0\n    var oddSum = 0\n    var evenIndex\
    \ = -1\n    var oddIndex = -1\n    while index < array.count {\n        if array[index]\
    \ == 0 {\n            array[index] = -1\n            index += 1\n            continue\n\
    \        }\n        if evenSum != 0 {\n            oddSum += array[index]\n  \
    \          oddIndex += 1\n        } else {\n            evenSum += array[index]\n\
    \            evenIndex += 1\n        }\n        if oddSum%2 == 1 {\n         \
    \   array[index], array[oddIndex] = array[oddIndex], array[index]\n        }\n\
    \        index += 1\n    }\n    return array", "    \n    var newArray = array\n\
    \    if array.count > 0 {\n        var sum : Int = 0\n        for value in newArray\
    \ {\n            sum += value\n        }\n        if sum % 2 == 0 {\n        \
    \    let sorted = newArray\n            newArray = newArray.sorted{ $0 < $1 }\n\
    \            return sorted + newArray\n        }\n        newArray = newArray.sorted{\
    \ $0 > $1 }\n        return newArray\n    }\n    return []", "    return array.sorted\
    \ { a, b in\n        if a > b {\n            return true\n        }\n        return\
    \ false\n    }", "    var sorted = array\n    if sorted == [] {\n        return\
    \ sorted\n    }\n    let sum: Int = array.reduce(0) {$0 + $1}\n    var sumOdd:\
    \ Int = 0\n    var sumEven: Int = 0\n    for i in 0..<array.count {\n        if\
    \ (((i + 1) % 2) == 0) {\n            sumEven += array[i]\n        } else {\n\
    \            sumOdd += array[i]\n        }\n    }\n    if (sumOdd != 0 && sumEven\
    \ != 0) {\n        sorted = (sorted as NSArray).sortedArrayUsingComparator({(a:\
    \ Int, b: Int) -> Bool in\n            return (a-b) < (b-a)\n        })\n    }\n\
    \    return sorted", '  return array.sorted(by: { $0.0 > $1.0 })', "    let sum\
    \ = array.reduce(0, combine: +)\n    let result = (array as! [Int]).sorted()\n\
    \    return result.isEmpty ? array : result", "    var newArray = array\n    newArray.sort()\n\
    \    return newArray", "    var indexArray: [Int] = array\n    let evenSum: Bool\
    \ = array.sum() % 2 == 0\n    var sum: Int = 0\n    let sortedIndexArray: [Int]\
    \ = Array(repeating: -1, count: array.count)\n    for i in 0 ..< indexArray.count\
    \ {\n        let currentSum = indexArray[i]\n        sum += currentSum\n     \
    \   sortedIndexArray[i] = sum\n        if evenSum {\n            if sum > array.count\
    \ {\n                sortedIndexArray[i] = array.count\n            } else {\n\
    \                break\n            }\n        } else {\n            if sum <\
    \ 0 {\n                sortedIndexArray[i] = 0\n            } else {\n       \
    \         break\n            }\n        }\n    }\n    return sortedIndexArray",
  "    switch array.count {\n    case 0: return array\n    case 1: return array\n\
    \    case 2: return array.sorted()\n    case 3: return array.sorted { $0 < $1\
    \ }\n    case 4: return array.sorted { $0 == $1 }\n    default:\n        var newArray\
    \ = array\n        var left = newArray.first!\n        var right = newArray.last!\n\
    \        var sum = 0\n        var isEven = false\n        for _ in newArray {\n\
    \            sum += newArray[newArray.count - 1]\n            if sum%2 == 0 {\n\
    \                isEven = true\n                break\n            }\n       \
    \ }\n        if isEven {\n            newArray = newArray.sorted { $0 < $1 }\n\
    \        } else {\n            newArray = newArray.sorted { $0 > $1 }\n      \
    \  }\n        newArray.append(left)\n        newArray.append(right)\n        return\
    \ newArray\n    }", "    if array.count == 0 {\n        return array\n    }\n\
    \    if array.count == 1 {\n        return array\n    }\n    // Find the max value\n\
    \    let max_value = array.max()!\n    \n    let mut result = array.slice()\n\
    \    \n    // Calculate the sum of the elements and determine whether the maximum\
    \ value is odd or even\n    if max_value % 2 == 1 {\n        result.sortInPlace()\n\
    \    } else {\n        result.sortInPlace(by: >)\n    }\n    \n    // Sort the\
    \ result according to the previous calculation\n    result", "    if array.count\
    \ == 0 {\n        return []\n    }\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 1 {\n        return array.sorted\
    \ { $0.0 < $1.0 }\n    } else {\n        return array.sorted { $0.0 < $1.0 }.reversed()\n\
    \    }", "    return array.sorted { (first, second) -> Bool in\n        // Sum\
    \ of first and last element is the same\n        if first == second {\n      \
    \      return true\n        }\n        // Sum of first and last element is not\
    \ the same\n        let result = first + second\n        // If result is odd,\
    \ swap them\n        if result % 2 != 0 {\n            return false\n        }\n\
    \        // Otherwise swap them if they are reversed\n        if result < 0 {\n\
    \            return true\n        }\n        return false\n    }", "    if array.count\
    \ < 2 {\n        return array\n    }\n    let sum = array.filter {$0 >= 0}.sum\n\
    \    let oddOrEven = sum % 2 == 0 ? 1 : -1\n    return array.sorted { $0 > $1\
    \ ? oddOrEven : oddOrEven * -1 }", "    var result: [Int] = []\n\n    if array.count\
    \ < 2 {\n        return result\n    }\n\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n\n    if sum%2 == 1 {\n        array.sort()\n\
    \    } else {\n        array.reverse()\n    }\n\n    for value in array {\n  \
    \      result.append(value)\n    }\n\n    return result", "    var result = [Int]()\n\
    \    let sum = array.map { $0 + $1 }.reduce(0, +)\n    let result = array.sortInPlace()\n\
    \    result.forEach {\n        if $0 < sum {\n            result.insert($0 - sum,\
    \ 1)\n        } else {\n            result.insert($0 - sum, -1)\n        }\n \
    \   }\n    return result", "    let sum = (array.first! + array.last!)\n    if\
    \ sum % 2 == 1 {\n        array.sortInPlace()\n    } else {\n        array.sortInPlace({\
    \ $0.0 < $1.0 })\n    }\n    return array", '    return array', '    return sort_array_impl(array:
    array, func: Swift.min)', "    let result = array.sorted(by: >)\n    if result.last!%2\
    \ == 0 {\n        return result.reversed()\n    } else {\n        return result\n\
    \    }", "    if array.count == 0 {\n        return array\n    }\n\n    if array.count\
    \ < 2 {\n        return array\n    }\n\n    var num1 = array[0]\n    var num2\
    \ = array[0]\n    var res = [Int]()\n    var j = 0\n\n    for k in 0..<array.count\
    \ {\n        if k%2 == 0 {\n            num1 = array[k]\n        } else {\n  \
    \          num2 = array[k+1]\n            if num1 > num2 {\n                j--\n\
    \                num1 = array[k]\n                num2 = array[k+1]\n        \
    \    }\n        }\n\n        res.append(num1)\n        res.append(num2)\n    }\n\
    \n    array.swapAt(0, j)\n    array.swapAt(j, array.count-1)\n\n    return res",
  "    if (array.count < 2) {\n        return array\n    }\n    var coswiftArray:\
    \ [Int] = array\n    let left = 0\n    let right = array.count - 1\n    while\
    \ left < right {\n        let sum = array[left] + array[right]\n        let isEven\
    \ = sum % 2 == 0\n        var tmp = array[left]\n        if isEven {\n       \
    \     tmp = array[right]\n            array[right] = tmp\n        }\n        array[left]\
    \ = sum\n        array[right] = tmp\n        left += 1\n        right -= 1\n \
    \   }\n    return coswiftArray", "    guard array.count > 0 else { return array\
    \ }\n    \n    let sum = array.reduce(0, combine: {$0 + $1})\n    if sum % 2 ==\
    \ 0 {\n        array.sort { $0.0 < $1.0 }\n    }\n    else {\n        array.sort\
    \ { $0.0 < $1.0 }.reversed()\n    }\n    return array", "    \n    let n = array.count\n\
    \    \n    var swift: [Int] = []\n    var swift_next = 0\n    \n    for var i\
    \ = 0; i < n - 1; ++i {\n        let j = i + 1\n        \n        for var k =\
    \ i + 1; k < n; ++k {\n            let sum = array[k] + array[j]\n           \
    \ \n            if sum % 2 == 1 {\n                swift_next = k\n          \
    \      swift.append(sum)\n                break\n            }\n            \n\
    \            if sum % 2 == 0 {\n                if sum < swift_next {\n      \
    \              swift_next = k\n                    swift.append(sum)\n       \
    \         }\n                break\n            }\n        }\n    }\n    \n  \
    \  return swift", "    // write your code here\n    if array.count <= 1 {\n  \
    \      return array\n    }\n    var array = array.sorted()\n    return array",
  "    // Write your code here\n    \n    guard array.count > 0 else { return array\
    \ }\n    guard array.count < 10000 else { return array }\n    let sum = array.sum\n\
    \    let odd = sum % 2 == 0\n    return array.sorted(by: { $0 - $1 }).map { $0\
    \ + (odd ? -1 : 1) * $1 }", "    return array.sort { (a, b) -> Bool in\n     \
    \   return a < b\n    }", "    if array.count < 2 {\n        return array\n  \
    \  }\n\n    var temp = array\n    let leftSum = temp.reduce(0, +)\n    let rightSum\
    \ = temp.reverse().reduce(0, +)\n    if rightSum > leftSum {\n        temp = temp.reverse()\n\
    \    }\n\n    return temp", "    array.sortInPlace()\n    return array", '    return
    array.sorted(by: >)', "    guard array.count >= 2 else { return array }\n    let\
    \ sum = (array[array.count - 1] as Int) * (array[array.count - 1] as Int)\n  \
    \  return array.sorted { (x, y) in\n        let sum1 = (x as Int) * (x as Int)\n\
    \        let sum2 = (y as Int) * (y as Int)\n        return sum1 > sum2 ? true\
    \ : sum1 < sum2\n    }", "    let tmp = array.slice()\n    tmp.sortInPlace()\n\
    \    return tmp", "    if array.count < 1 {\n        return array\n    }\n   \
    \ var sum = array[0]\n    for i in 1 ..< array.count {\n        sum += array[i]\n\
    \    }\n    return array.sorted { a, b in\n        let result = a - b\n      \
    \  return result % 2 == 1 ? result : -result\n    }", "    let min = array.min()\n\
    \    let max = array.max()\n    let sum = min + max\n    let even = (sum % 2)\
    \ == 0\n    let odd = (sum % 2) == 1\n    if even {\n        array.sort()\n  \
    \  } else {\n        array.reverse()\n    }\n    return array", '    return sorted(array)
    { $0 + $1 < $1 }', '    return sorted(array)', "    let sum = (array[0] + array[array.count\
    \ - 1]) / 2\n\n    return array.sorted {\n        if $0 + $1 < sum {\n       \
    \     return true\n        }\n        return false\n    }", "    if array.count\
    \ == 0 { return array }\n    let sum = array.sum()\n    let even = sum % 2 ==\
    \ 0\n    let first = array.min()\n    let last = array.max()\n    let len = array.count\n\
    \n    if even {\n        array.sortInPlace()\n        return array\n    } else\
    \ {\n        array.reverse()\n        array.sortInPlace()\n        array.reverse()\n\
    \        return array\n    }", '    return array.sortInPlace()', "    if array.count\
    \ < 2 { return array }\n    array.sort()\n    let a = array\n    let b = array\n\
    \    if a.last! > b.first! {\n        b.reverse()\n    }\n    return b", '    return
    array.sorted()', '    return array.sorted { $0 < $1 }', "    var swiftArray =\
    \ [Int]()\n    let sum = array.sum\n\n    if sum % 2 == 1 {\n        swiftArray\
    \ = array.sorted{ $0 < $1 }.map({ $0 + $1 })\n    } else {\n        swiftArray\
    \ = array.sorted{ $0 < $1 }.reverse().map({ $0 + $1 })\n    }\n    return swiftArray",
  "    if array.count == 0 {\n        return array\n    }\n    if array.count == 1\
    \ {\n        return array + [array[0]]\n    }\n    var sum = 0\n    var even =\
    \ 1\n    var odd = -1\n    for v in array {\n        sum += v\n        if sum\
    \ > 0 {\n            if sum % 2 == 0 {\n                sum += even\n        \
    \    } else {\n                sum += odd\n            }\n        } else {\n \
    \           sum -= v\n            if sum % 2 == 0 {\n                sum += odd\n\
    \            } else {\n                sum += even\n            }\n        }\n\
    \    }\n    let mid = array.count / 2\n    return sort_array(array: Array(self[..<mid]))\
    \ + array + sort_array(array: Array(self[mid...]))", '    return array.sorted()',
  "    let sorted_array = array.sorted()\n    if array.first == 0 && array.last ==\
    \ array.first {\n        return sorted_array\n    }\n    if array.first == 0 &&\
    \ array.last == array.last {\n        return array.sorted().reversed()\n    }\n\
    \    if array.first == array.last {\n        return array.sorted().reversed()\n\
    \    }\n    if array.first == array.last - 1 && array.last % 2 == 1 {\n      \
    \  return sorted_array\n    }\n    if array.first == array.last - 1 && array.last\
    \ % 2 == 0 {\n        return array.sorted().reversed()\n    }\n    return sorted_array",
  "    guard let count = array.count else { return array }\n    var sum = 0\n    var\
    \ firstIndex = 0\n    var lastIndex = 0\n    var newArray = array\n    for i in\
    \ 0 ..< count {\n        sum += array[i]\n        if sum % 2 == 1 {\n        \
    \    newArray[lastIndex] = array[i]\n            lastIndex += 1\n        } else\
    \ {\n            newArray[firstIndex] = array[i]\n            firstIndex += 1\n\
    \        }\n    }\n    return newArray", "    if array.count < 2 {\n        return\
    \ array\n    }\n\n    // find the middle index\n    var middle = array.count /\
    \ 2\n    if array[middle] != 0 {\n        middle--\n    }\n    \n    // calculate\
    \ the sum of each pair\n    var sum1 = array[middle]\n    var sum2 = array[middle]\n\
    \    for index in 0 ..< middle {\n        if index == middle {\n            continue\n\
    \        }\n        sum1 += array[index]\n        sum2 += array[index + middle]\n\
    \    }\n\n    var result: [Int] = []\n    \n    if sum1 % 2 == 0 {\n        //\
    \ if the sum is even, sort it in descending order\n        result = array[middle\
    \ ... array.count].reversed()\n    } else {\n        // if the sum is odd, sort\
    \ it in ascending order\n        result = array[middle ... array.count]\n    }\n\
    \    \n    return result", "    let result = array.sorted(by: >)\n    return result\
    \ as! [Int]", "    var swift = array\n    var sum = 0\n    for i in 0..<swift.count\
    \ {\n        sum += swift[i]\n    }\n    if sum%2 == 1 {\n        swift.sort()\
    \ //descending\n    } else {\n        swift.sort() //ascending\n    }\n    return\
    \ swift", '    return sorted(array: array, isOddOrEven: isOddOrEven)', "    \n\
    \    let sortedArray = array.sorted { $0 < $1 }\n    return sortedArray", "  \
    \  let result = array.sorted(by: >)\n    return result as! [Int]", '    return
    array.sorted(by: >).reversed()', '    return array.sorted(by: { $0 > $1 })', " \
    \   guard array.count > 0 else { return array }\n    var reversedArray = array.reversed()\n\
    \    var i = 0\n    var j = 0\n    var n = array.count - 1\n    let maxValue =\
    \ array[0]\n    var sum = 0\n\n    while i < n && j < n {\n        let sum = reversedArray[j]\
    \ + reversedArray[i]\n        if (sum % 2 == 0) {\n            reversedArray[j],\
    \ reversedArray[i] = reversedArray[i], reversedArray[j]\n        } else {\n  \
    \          reversedArray[j], reversedArray[i] = reversedArray[i], reversedArray[j]\n\
    \        }\n\n        if reversedArray[j] < maxValue {\n            sum -= reversedArray[j]\n\
    \        }\n        i += 1\n        j += 1\n    }\n    return array", '    return
    array.sorted().map { $0.coswift() }', "    guard array.isEmpty == false else {\
    \ return array }\n    var newArray = [Int]()\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n        newArray.append(i)\n    }\n    if sum %\
    \ 2 == 1 {\n        newArray.sort {\n            ($0 < $1) || ($0 == $1 && $1\
    \ < $2)\n        }\n    } else {\n        newArray.sort {\n            ($0 > $1)\
    \ || ($0 == $1 && $1 > $2)\n        }\n    }\n    return newArray", "    guard\
    \ array.count > 0 else { return array }\n    var array = array\n    if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n        array.sort() { $0.0 < $1.0 }\n\
    \    } else {\n        array.sort() { $0.0 < $1.0 }.reverse()\n    }\n    return\
    \ array", "    precondition(\n        array.count != 0,\n        \"Array is empty\"\
    )\n    \n    var sortedArray = array\n    \n    let sum = sortedArray.reduce(0,\
    \ combine: +)\n    \n    if sum % 2 == 0 {\n        sortedArray = sortedArray.sorted(by:\
    \ >)\n    } else {\n        sortedArray = sortedArray.sorted(by: <)\n    }\n \
    \   \n    return sortedArray", "    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    var temp = sum\n    var temp2 = sum\n\
    \    if sum % 2 == 1 {\n        temp = -temp\n    }\n    var arrayCopy = array\n\
    \    arrayCopy.sort { (a, b) -> Bool in\n        return a > b\n    }\n    for\
    \ i in 0..<arrayCopy.count {\n        arrayCopy[i] = (arrayCopy[i] - temp + temp2)\
    \ % arrayCopy.count\n    }\n    return arrayCopy", '    return array.sorted {
    $0 < $1 }', "    if array.count < 2 {\n        return array\n    }\n    let max\
    \ = array.max()!\n    \n    if array.count % 2 == 1 {\n        let sorted = array.sorted\
    \ { $0 < $1 }\n        return sorted\n    } else {\n        let sorted = array.sorted\
    \ { $0 < $1 && $0 < max }\n        return sorted\n    }", "    if array.count\
    \ == 0 {\n        return []\n    }\n    \n    var sum = 0\n    for element in\
    \ array {\n        sum += element\n    }\n    \n    var sortedArray = array.sorted()\n\
    \    \n    if sum%2 == 0 {\n        sortedArray.reverse()\n    }\n    \n    return\
    \ sortedArray", "    precondition(\n        array.count > 0, \"the given array\
    \ is empty\"\n    )\n\n    let sortedArray = array.sorted()\n    let firstHalf\
    \ = sortedArray.suffix(from: 1)\n    let secondHalf = sortedArray.suffix(from:\
    \ sortedArray.count - 1)\n    return firstHalf.isOdd ? secondHalf.reversed() :\
    \ secondHalf", "    guard array.count >= 2 else {\n        return array\n    }\n\
    \n    let mid = array.count / 2\n    let leftArray = array[0..<mid]\n    let rightArray\
    \ = array[mid..<array.count]\n\n    var result = leftArray\n    if isOddSum(leftArray:\
    \ leftArray, rightArray: rightArray) {\n        result = leftArray.sorted + rightArray.sorted\n\
    \    }\n    else {\n        result = rightArray.sorted + leftArray.sorted\n  \
    \  }\n    return result", "    let result = array.sorted { (n1, n2) -> Bool in\n\
    \        if n1 > n2 {\n            return false\n        }\n        if n1 < n2\
    \ {\n            return true\n        }\n        return (n1 + n2) % (2 * UInt32.max)\
    \ == UInt32.max\n    }\n    return result", '    return sort_array(array: array,
    ascending: true)', "    var result = array\n    let length = array.count\n   \
    \ if length > 0 {\n        let mut largest = array[0]\n        for i in 1..length\
    \ {\n            largest = max {largest, array[i]}\n        }\n        if largest\
    \ % 2 == 1 {\n            largest = largest - largest\n            reverse(&result,\
    \ &length)\n        } else {\n            reverse(&result[0..<length-1], &length)\n\
    \        }\n    }\n    return result", "    if array.isEmpty {\n        return\
    \ array\n    }\n    let len = array.count\n    let pivot = array.max()!\n    var\
    \ left = array\n    var right = array\n    var result = [Int]()\n    for (_, value)\
    \ in array.enumerated() {\n        if value < pivot {\n            result.append(value)\n\
    \        } else {\n            right.removeLast()\n            left.removeLast()\n\
    \        }\n    }\n    if array.max() == pivot {\n        result.appendContentsOf(left)\n\
    \        result.appendContentsOf(right)\n    } else {\n        result.appendContentsOf(right)\n\
    \        result.appendContentsOf(left)\n    }\n    return result", "    \n   \
    \ let length = array.count\n    \n    if length == 1 {\n        return array\n\
    \    }\n    \n    let sum = array[0] + array[length-1]\n    \n    var swap : Bool\n\
    \    \n    if (sum % 2 == 0) {\n        swap = true\n    } else {\n        swap\
    \ = false\n    }\n    \n    var new_array : [Int] = Array(0...length)\n    \n\
    \    for i in 0..<length {\n        if (swap) {\n            new_array[i] = array[i]\n\
    \            new_array[i+1] = array[length-i-1]\n        } else {\n          \
    \  new_array[i] = array[length-i-1]\n            new_array[i+1] = array[i]\n \
    \       }\n    }\n    \n    return new_array", "    return array.reduce([Int](),\
    \ {\n        var result = $0\n        for value in $1 {\n            if value\
    \ > result[$1.count - 1] {\n                result[$1.count - 1] = value\n   \
    \         } else {\n                result.append(value)\n            }\n    \
    \    }\n        return result\n    })", '    return array.sorted()', "    if array.count\
    \ < 2 {\n        return array\n    }\n\n    let sum: Int = array[0] + array[array.count\
    \ - 1]\n    var temp = array[0]\n\n    array[0] = 0\n    array[array.count - 1]\
    \ = 0\n    let result = array.sort{(a, b) -> Bool in\n        return b - a >=\
    \ 0 && sum - a > 0 && sum - b > 0\n    }\n    array[0] = temp\n    return result",
  "    return array.sorted { (firstElement, secondElement) -> Bool in\n        return\
    \ firstElement > secondElement\n    }"]
stop_tokens:
- "\n}"
