name: HumanEval_158_find_max
language: swift
prompt: "\n/// Write a function that accepts an array of strings.\n/// The array contains\
  \ different words. Return the word with maximum number\n/// of unique characters.\
  \ If multiple strings have maximum number of unique\n/// characters, return the\
  \ one which comes first in lexicographical order.\n/// >>> find_max(words: [\"name\"\
  , \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\", \"enam\"\
  , \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"\
  ])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
  ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
  enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\
  assert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
  \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
  \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
  \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
  b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
  )"
completions: ['    return find_max_impl(words)', "  let maxCount = words.reduce(0,\
    \ {$0 + $1.characters.count})\n  return words.first(where: {$0.characters.count\
    \ == maxCount})!", "    guard let words = words.sorted else { return \"\" }\n\
    \    return words[words.lastIndex(where: { words.filter({ $0.count > words.filter\
    \ { $0.count > 1 }.count }).count == words.filter { $0.count > 1 }.count })!]",
  "    if words.isEmpty {\n        return \"\"\n    }\n\n    var max = 0\n    var\
    \ maxWord = \"\"\n    for word in words {\n        let word = word.lowercased()\n\
    \        let count = (word.unicodeScalars.filter { unicodeScalar in unicodeScalar.value\
    \ > max }.count)\n        if count > max {\n            max = count\n        \
    \    maxWord = word\n        }\n    }\n\n    return maxWord", "    var max = \"\
    \"\n    var bestIndex = 0\n    for i := 0; i < len(words); i++ {\n        word\
    \ = words[i]\n        count, _ := find_max_helper(word, max)\n        if count\
    \ > 1 {\n            best = words[bestIndex]\n        } else {\n            best\
    \ = word\n        }\n        if count > 1 {\n            bestIndex = i\n     \
    \   }\n    }\n    return best", "    if words.isEmpty {\n        return \"\"\n\
    \    }\n\n    var highestCount: Int = 1\n    var bestWord = \"\"\n    for word:\
    \ String in words {\n        let count = count(word: word)\n        if count ==\
    \ highestCount {\n            bestWord = word\n        } else if count > highestCount\
    \ {\n            highestCount = count\n            bestWord = word\n        }\n\
    \    }\n    return bestWord", "\tswitch words {\n\tcase let words as [String]:\n\
    \t\tlet set: Set<String> = words.map { String($0).characterSet }.map(Set)\n\t\t\
    return set.max(by: { a, b in a.count < b.count }).first!\n\tcase let words as\
    \ [Any]:\n\t\tlet set: Set<String> = words.map { String(describing: $0).characterSet\
    \ }.map(Set)\n\t\treturn set.max(by: { a, b in a.count < b.count }).first!\n\t\
    default:\n\t\treturn \"\"\n\t}", "    var count = -1\n    var word = \"\"\n  \
    \  for word in words {\n        count = words.filter({ $0.count > 0 }).map { $0.count\
    \ }.max()!\n        if count > -1 {\n            break\n        }\n    }\n   \
    \ return word", "    if words.isEmpty {\n        return \"\"\n    }\n\n    var\
    \ maxCount: Int = 0\n    var maxCountIndex: Int = 0\n\n    for index in 0..<words.count\
    \ {\n        let word = words[index]\n\n        var count = 1\n        var prevIndex:\
    \ Int = 0\n        for nextIndex in 0..<words.count {\n            let nextWord\
    \ = words[nextIndex]\n            if word < nextWord {\n                count\
    \ = 1\n            } else {\n                count += 1\n            }\n\n   \
    \         if prevIndex == nextIndex {\n                continue\n            }\n\
    \n            if count > maxCount {\n                maxCount = count\n      \
    \          maxCountIndex = nextIndex\n            }\n\n            prevIndex =\
    \ nextIndex\n        }\n    }\n\n    return words[maxCountIndex]", "  if words.isEmpty()\
    \ {\n    return \"\"\n  }\n  let dict = Dictionary()\n  let max = words.map({$0.count()}).max()\n\
    \  var res = \"\"\n  for word in words {\n    if dict.contains(word) {\n     \
    \ res = word\n      break\n    } else {\n      dict[word] = 1\n    }\n  }\n  return\
    \ res", "  // If the number of unique characters in the words is less than the\
    \ maximum\n  // number of unique characters in the words, return the first word\
    \ which comes\n  // first. If the number of unique characters is equal to the\
    \ maximum number\n  // of unique characters, return the word with maximum number\
    \ of unique characters.\n  var max = words[0]\n  for word in words {\n    if word.countUniqChars()\
    \ > max.countUniqChars() {\n      max = word\n    }\n  }\n  return max", "   \
    \ switch len(words) {\n    case 0:\n        return \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
  "    var max: String = \"\"\n    var maxCount = 0\n    for word in words {\n   \
    \     var count: Int = 0\n        for c in word {\n            if c == \"a\" ||\
    \ c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\" {\n                count\
    \ += 1\n            }\n        }\n        if count > maxCount {\n            max\
    \ = word\n            maxCount = count\n        }\n    }\n    return max", " \
    \   // find the largest word's characters, if there are multiple words with the\
    \ same\n    // number of unique characters, return the word with the shortest\
    \ lexicographical order\n    // e.g. \"aaabbb\" comes first because it has 3 unique\
    \ characters and is lexicographically\n    // first in lexicographical order\n\
    \    var maxCount = 0\n    var maxWord = \"\"\n    for word in words {\n     \
    \   let count = word.characters.count\n        if count > maxCount {\n       \
    \     maxWord = word\n            maxCount = count\n        }\n    }\n    return\
    \ maxWord", "    var maxLength Int = 0\n    var maxString: String? = nil\n\n \
    \   for word in words {\n        var count = word.characters.count\n\n       \
    \ if count > maxLength {\n            maxLength = count\n            maxString\
    \ = word\n        }\n    }\n\n    return maxString!", "    var max: String = \"\
    \"\n    var count = 1\n\n    for word in words {\n        for char in word {\n\
    \            if char == max {\n                count += 1\n            } else\
    \ {\n                if count > 1 {\n                    max = char\n        \
    \            count = 1\n                } else {\n                    max = word\n\
    \                }\n            }\n        }\n    }\n    return max", "  var maxCount:\
    \ Int = 0\n  var maxWord = \"\"\n  for word in words {\n    var count = count_words(words:\
    \ words)\n    if count == maxCount {\n      maxWord = word\n      continue\n \
    \   }\n    if count > maxCount {\n      maxCount = count\n      maxWord = word\n\
    \    }\n  }\n  return maxWord", "\twords := strings.Fields(words)\n\tsort.Strings(words)\n\
    \tmaxCount := 0\n\tvar maxWord String = \"\"\n\tfor _, word := range words {\n\
    \t\tcount := strings.Count(word, \"\")\n\t\tif count > maxCount {\n\t\t\tmaxCount\
    \ = count\n\t\t\tmaxWord = word\n\t\t}\n\t}\n\treturn maxWord", "  guard words.count\
    \ > 0 else { return \"\" }\n  var maxCount = words[0].count\n  var maxStr = words[0]\n\
    \  for str in words {\n    if str.count > maxCount {\n      maxCount = str.count\n\
    \      maxStr = str\n    }\n  }\n  return maxStr", "    var max: String = \"\"\
    \n    for word in words {\n        var unique: Int = 0\n        for char in word\
    \ {\n            if word.index(char, offsetBy: word.startIndex) == word.endIndex\
    \ {\n                unique += 1\n            } else {\n                break\n\
    \            }\n        }\n        if unique > max.count {\n            max =\
    \ String(word)\n        }\n    }\n    return max", '  return find_max3(words).1',
  "    // Create a map of letter->count of unique letters in the word\n    var freqs:\
    \ [String:Int] = [:]\n    for w in words {\n        for c in w {\n           \
    \ freqs[c] = freqs[c] + 1\n        }\n    }\n    var maxVal = 0\n    var maxLetter\
    \ = \"\"\n    for (c, v) in freqs {\n        if v > maxVal {\n            maxVal\
    \ = v\n            maxLetter = c\n        }\n    }\n    return maxLetter", " \
    \   let sorted = words.sorted()\n    if sorted.count == words.count {\n      \
    \  return sorted[0]\n    }\n    if sorted.count > 1 {\n        return sorted[0]\n\
    \    }\n    if sorted.count == 1 {\n        return sorted[0]\n    }\n    if sorted.count\
    \ == 0 {\n        return \"\"\n    }\n    return \"\"", "    var maxCount = 0\n\
    \    var maxWord = \"\"\n    for word in words {\n        if word.count > maxCount\
    \ {\n            maxCount = word.count\n            maxWord = word\n        }\n\
    \    }\n    return maxWord", "    return max(words, {\n        count := 0\n  \
    \      for word in words {\n            count += len(word)\n        }\n      \
    \  return count\n    })", "  var max: String = \"\"\n  var count: Int = 0\n  for\
    \ word in words {\n    if word[word.characters.count(\"-\"...)] == \"-\" {\n \
    \     continue\n    }\n    if word == max {\n      continue\n    }\n    if count\
    \ > word.characters.count {\n      max = word\n      count = word.characters.count\n\
    \    }\n  }\n  return max", "    words.sortWith(<)\n    return words[words.count\
    \ - 1]", "    let max = words.reduce(\"\") {\n        if let count = reduce($0,\
    \ \"\") {\n            return count\n        }\n    }\n    return max", "    //\
    \ Add some whitespace to make the input more readable.\n    let words = words.map({\
    \ $0 + \" \" })\n    let sortedWords = words.sorted()\n\n    var mostCommon =\
    \ \"\"\n    var mostCommonCount = 0\n\n    for word in sortedWords {\n       \
    \ // Ignore empty strings.\n        if word.characters.count > 0 {\n         \
    \   // Use a set in case the same word appears twice.\n            var characters\
    \ = Set<Character>()\n            for character in word {\n                //\
    \ Ignore empty strings.\n                if character.characters.count > 0 {\n\
    \                    characters.insert(character)\n                }\n       \
    \     }\n            // If the word has more characters, then it has the higher\
    \ count.\n            if characters.count > mostCommonCount {\n              \
    \  mostCommon = word\n                mostCommonCount = characters.count\n   \
    \         }\n        }\n    }\n    return mostCommon", "    var uniqueCharacters\
    \ = Set<Character>()\n    for word := range words {\n        for char in word\
    \ {\n            uniqueCharacters.insert(char)\n        }\n    }\n\n    for word\
    \ := range words {\n        var count = 1\n        for char in word {\n      \
    \      count *= 2\n            if char == uniqueCharacters.first() {\n       \
    \         count += 1\n            }\n        }\n        if count == uniqueCharacters.count\
    \ {\n            return word\n        }\n    }\n    return \"\"", "    let counts\
    \ = Dictionary(grouping: words, by: { $0 }).sorted { $0.value.count > $1.value.count\
    \ }\n    return counts[counts.startIndex].key", "  var max: Int = 0\n  var found:\
    \ Bool = false\n  for word in words {\n    if count > max {\n      max = count\n\
    \      found = true\n    }\n    count = count + 1\n  }\n  if !found {\n    return\
    \ words[0]\n  }\n  return words[count - 1]", "    if words == nil {\n        fatalError(\"\
    Cannot get max from nil array\")\n    }\n    var res = \"\"\n    words.withUnsafeBufferPointer\
    \ { words -> Void in\n        let count = words.length\n        for i in 0..<count\
    \ {\n            let word = words[i]\n            if word.characters.count ==\
    \ 1 {\n                res = word\n                return\n            }\n   \
    \         var counts = [Int]()\n            let index = word.characters.index(word.startIndex,\
    \ offsetBy: 0)\n            let range = word.startIndex..<word.endIndex\n    \
    \        for j in 0..<range.count {\n                if !counts[word.characters[j]&0xff]&0xff\
    \ != 0 {\n                    counts[word.characters[j]&0xff]++\n            \
    \    } else {\n                    // multiple characters found for the same index,\
    \ skip it\n                    continue\n                }\n            }\n  \
    \          if counts.count == 1 {\n                // found only 1 unique character\
    \ for a word in the words[]\n                res = word\n                return\n\
    \            }\n        }\n    }\n    return res", "    if words.isEmpty {\n \
    \       return \"\"\n    }\n    \n    let sorted = words.sorted()\n    let count\
    \ = sorted.reduce(0) { (r, s) in r + count_unique_chars(s) }\n    let result =\
    \ sorted.first { (a, b) -> Bool in\n        return count_unique_chars(a) > count_unique_chars(b)\n\
    \    }\n    \n    return result", "    var max: Int = 0\n    var maxWord: String\
    \ = \"\"\n    for word in words {\n        if words.filter({ $0 == word }).count\
    \ == words.filter({ $0 == word }).count {\n            continue\n        }\n \
    \       let count = words.filter({ $0 == word }).count\n        if count > max\
    \ {\n            maxWord = word\n            max = count\n        }\n    }\n \
    \   return maxWord", "    let unique = Array(Set(words))\n    guard let max =\
    \ unique.max(), let index = unique.index(of: max) else { return words[0] }\n \
    \   return words[index]", "    let sorted = words.sorted()\n    let maxCount =\
    \ sorted[0].count\n    if maxCount == 0 {\n        return \"unknown\"\n    }\n\
    \    var maxWord = \"\"\n    for word in sorted {\n        if maxCount == word.count\
    \ {\n            maxWord = word\n            break\n        }\n        maxCount\
    \ = word.count\n    }\n    return maxWord", "    switch words.count {\n    case\
    \ 0:\n        return \"nil\"\n    case 1:\n        return words[0]\n    default:\n\
    \        var max = 0\n        var maxIndex = 0\n        var maxCount = 0\n   \
    \     for (i, word) in words.enumerated() {\n            if word == \"nil\" {\n\
    \                continue\n            }\n            count = count_char(word,\
    \ true)\n            if count > max {\n                max = count\n         \
    \       maxIndex = i\n                maxCount = count\n            }\n      \
    \  }\n        if maxCount < 2 {\n            return words[maxIndex]\n        }\n\
    \        return words[maxIndex + 1]\n    }", "    counts = [0] * (Character.max()\
    \ + 1)\n    wordsSorted = words.sorted()\n    longest = words[0]\n    for word\
    \ in wordsSorted {\n        counts[word.unicodeScalars.first!.value - Character.min()]++\n\
    \        if counts[word.unicodeScalars.first!.value - Character.min()] > counts[longest.unicodeScalars.first!.value\
    \ - Character.min()] {\n            longest = word\n        }\n    }\n    return\
    \ longest", '    return words[words.map({ $0.characters.count }).max()]', "  \
    \  var max = 0\n    var word = \"\"\n    for _, w1 := range words {\n        for\
    \ _, w2 := range words {\n            if w1 == w2 {\n                continue\n\
    \            }\n            max = max == 0\n            max = max || strings.Count(w1,\
    \ string([]rune(w2)) > strings.Count(w1, string([]rune(word))))\n            word\
    \ = w1\n        }\n    }\n    return word", "    var result: String = words[0]\n\
    \    for word in words {\n        if !is_unique_chars(result, word) {\n      \
    \      result = word\n        }\n    }\n    return result", "  var max = 0\n \
    \ var result: String? = nil\n  for word in words {\n    if let length = word.count\
    \ {\n      if length >= max {\n        max = 0\n        result = word\n      }\
    \ else {\n        max = length\n      }\n    }\n  }\n  return result!", "    guard\
    \ !words.isEmpty else { return \"\" }\n    var max = \"\"\n    var maxCount =\
    \ 0\n    for word in words {\n        let characters = word.characters\n     \
    \   if maxCount < characters.count {\n            max = word\n            maxCount\
    \ = characters.count\n        }\n    }\n    return max", "    var max: String\
    \ = \"\"\n    for word in words {\n        if words.filter({ $0.count > word.count\
    \ }).count > 0 {\n            max = word\n            break\n        }\n    }\n\
    \    return max", "    var max: String = \"\"\n    var maxCount = 0\n    for word\
    \ in words {\n        let uniqueCharCount = word.characters.filter{$0 == CharacterSet.alphanumerics.first!}.count\n\
    \        if uniqueCharCount > maxCount {\n            max = word\n           \
    \ maxCount = uniqueCharCount\n        }\n    }\n    return max", '    return find_max_with_offset(words:
    words, length: 0)', "  var max = words[0]\n  for str in words {\n    if words.filter({\
    \ $0 != str }).count() > words.filter({ $0 == str }).count() {\n      max = str\n\
    \    }\n  }\n  return max", "    if words.count == 0 {\n        return \"\"\n\
    \    }\n    \n    words.sortInPlace()\n    \n    var max = \"\"\n    \n    for\
    \ (_, val) in words.enumerated() {\n        if val > max {\n            max =\
    \ val\n        }\n    }\n    \n    return max", "    if words == nil || words.count\
    \ == 0 {\n        return \"\"\n    }\n    var max: Int = 0\n    var maxWord =\
    \ \"\"\n    for word in words {\n        count = find_unique_characters(word)\n\
    \        if max < count {\n            max = count\n            maxWord = word\n\
    \        }\n    }\n    return maxWord", "    \n    let set = Set<String>()\n \
    \   for word in words {\n        let count = set.count(for: word)\n        if\
    \ count > set.count {\n            set.insert(word)\n        }\n    }\n    return\
    \ set.first!", '    return find_max(words, nil).0', "  var maxString: String =\
    \ \"\"\n  var maxCount: Int = 0\n  var index: Int = 0\n  for i, word := range\
    \ words {\n    if i == 0 {\n      maxCount = 1\n    } else {\n      if word.count()\
    \ > maxCount {\n        maxCount = word.count()\n        maxString = word\n  \
    \      index = i\n      }\n    }\n  }\n  if maxCount == 0 {\n    return \"\"\n\
    \  }\n  return maxString", "  var max = \"\"\n  var max = words[0]\n  for _, word\
    \ := range words {\n    if len(word) > len(max) {\n      max = word\n    }\n \
    \ }\n  return max", "    guard let words = words.compactMap {\n        Array($0).filter\
    \ {\n            return $0.characters.count > 1\n        }\n    }\n    return\
    \ words.sorted().first!", "    guard words.count > 0 else { return \"\" }\n\n\
    \    // Find all unique characters\n    var uniqueCharacters = [String]()\n  \
    \  for word in words {\n        var uniqueCharacterCount = 0\n        for char\
    \ in word {\n            if uniqueCharacters.contains(char) {\n              \
    \  uniqueCharacterCount += 1\n            } else {\n                uniqueCharacters.append(char)\n\
    \            }\n        }\n        if uniqueCharacterCount > words.count {\n \
    \           return word\n        }\n    }\n\n    // Return the word with maximum\
    \ number of unique characters\n    return uniqueCharacters.sorted()", "    var\
    \ maxCount = 0\n    var maxValue = \"\"\n    for value := range words {\n    \
    \    if maxCount == 0 || maxCount < value {\n            maxCount = value\n  \
    \          maxValue = value\n        }\n    }\n    return maxValue", '    return
    find_max_with_sort(words).1', "    let maxSet = NSCountedSet(array: words)\n \
    \   let max = maxSet.max()\n    return maxSet.firstObject ?? \"empty set\"", " \
    \   var max: Character?\n    var maxCount: Int32 = 0\n    for word := range words\
    \ {\n        let wordChars = word.characters()\n        var count: Int32 = 0\n\
    \        for char in wordChars {\n            if char == max! {\n            \
    \    count += 1\n            } else {\n                max = char\n          \
    \      count = 1 //only count the first occurence\n            }\n        }\n\
    \        if count > maxCount {\n            maxCount = count\n        }\n    }\n\
    \    return max!", "    var maxString = \"\"\n    for word : String in words {\n\
    \        for i : String in word.characters {\n            if maxString.characters.count\
    \ < i {\n                maxString = word\n            }\n        }\n    }\n \
    \   return maxString", '    return find_max(words: words).sorted()[0]', "    var\
    \ maxString: String = \"\"\n    var maxCount: Int = 1\n    for s in words {\n\
    \        var count = len(s)\n        if count > maxCount {\n            maxString\
    \ = s\n            maxCount = count\n        }\n    }\n    return maxString",
  "    if words.isEmpty() {\n        return \"\"\n    }\n    let result = words.filter({\
    \ $0.count > 1 }).reduce(\"\") { $0 + String($1) }\n    if result.count == words.count\
    \ {\n        return result\n    }\n    return result", "    var max = words[0]\n\
    \    for word in words {\n        for i := 0; i < len(word); i++ {\n         \
    \   if word[i] != max[i] {\n                break\n            }\n        }\n\
    \        if i == len(word) {\n            max = word\n        }\n    }\n    return\
    \ max", "  sort.Sort(sort.Reverse(sort.Strings(words)), &StringLength)\n  return\
    \ sort.Search(len(words[0]), sort.Reverse(sort.Strings(words)), &StringLength)",
  "    var maxString = \"\"\n    var maxCount = 1\n\n    for word in words {\n   \
    \     if let count = countUniqueLetters(word), count > maxCount {\n          \
    \  maxCount = count\n            maxString = word\n        }\n    }\n\n    return\
    \ maxString", "    var max = 0\n    var last: String = nil\n    for word in words\
    \ {\n        if max < word.characters.count {\n            max = word.characters.count\n\
    \            last = word\n        }\n    }\n    return last", "    var charCount:\
    \ [Character: Int] = [:]\n    for word in words {\n        for char in word {\n\
    \            charCount[char] = (charCount[char] ?? 0) + 1\n        }\n    }\n\
    \    var maxCount: Int = -1\n    var maxChar: String = \"\"\n    for char in charCount\
    \ {\n        if charCount[char] > maxCount {\n            maxCount = charCount[char]\n\
    \            maxChar = char\n        }\n    }\n    return maxChar", "    words.sort()\n\
    \    \n    var max: String = \"\"\n    var maxCount: UInt64 = 0\n    for word\
    \ in words {\n        let count = word.toSet().count\n        if count > maxCount\
    \ {\n            maxCount = count\n            max = word\n        }\n    }\n\
    \    return max", '    return find_max(words).sorted()[0]', "\twords := make(map[string]int,\
    \ len(words)+1)\n\tfor _, word := range words {\n\t\twords[word] = count[word]\n\
    \t}\n\tvar maxValue int\n\tvar maxString string\n\tfor _, word := range words\
    \ {\n\t\tif maxValue < words[word] {\n\t\t\tmaxValue = words[word]\n\t\t\tmaxString\
    \ = word\n\t\t}\n\t}\n\treturn maxString", '    return find_max_(words)', "  \
    \  let freq = Dictionary(grouping: words, by: { String($0) })\n    let max = freq.map\
    \ { $0.value.count }.max() ?? 0\n    return freq.first!.value.filter { $0.count\
    \ == max }.first!", "    words.sort();\n    for index in 0..<words.count {\n \
    \       if words.count == 1 {\n            return words[0]\n        }\n      \
    \  var j: Int = 0\n        while j < words.count {\n            if words[j].characters.count\
    \ > words[index].characters.count {\n                break\n            }\n  \
    \          j += 1\n        }\n        if j == words.count {\n            return\
    \ words[0]\n        }\n        if words[index].characters.count == words[j].characters.count\
    \ {\n            return words[index]\n        }\n    }\n    return words[0]",
  '    return find_max(words: words, isSorted: true)', "    let counts = words.map({\
    \ $0.map { String($0).characters.count }.max })\n    let max = counts.max()\n\
    \    if max == 0 { return \"\" } // Empty strings are fine\n    return words[counts.index(of:\
    \ max)]", '    return find_max(words: words, cmp: nil)', "    let counts = words.reduce(into:\
    \ [(String, Int)](), { dict, word in\n        var newDict = dict\n        let\
    \ count = dict[word]\n        dict[word] = count + 1\n        if dict[word] >\
    \ 1 {\n            newDict = dict\n        }\n    })\n    return counts.first\
    \ {\n        $1.1 < $1.2 ? $1.0 : $1.1\n    }.key", "    var maxWord = \"\"\n\
    \    var maxCount = 0\n    for word := range words {\n        count, found :=\
    \ frequencies[word]\n        if found {\n            if count > maxCount {\n \
    \               maxWord = word\n                maxCount = count\n           \
    \ }\n        } else {\n            count, found = frequencies[\"\"]\n        \
    \    if found {\n                if count > maxCount {\n                    maxWord\
    \ = word\n                    maxCount = count\n                }\n          \
    \  } else {\n                // If the empty word doesn't appear in the words,\
    \ add it.\n                frequencies[word] = 0\n            }\n        }\n \
    \   }\n    return maxWord", "    if words == nil || words.isEmpty {\n        return\
    \ \"\"\n    }\n\n    var maxCount = 0\n    var maxStr = \"\"\n\n    for str in\
    \ words {\n        let count = str.unicodeScalars.filter({ return $0.isASCII }).count\n\
    \        if count > maxCount {\n            maxCount = count\n            maxStr\
    \ = str\n        }\n    }\n    return maxStr", "    var result: String = \"\"\n\
    \    var maxCount: Int = 0\n    var maxLength: Int = 0\n\n    for word in words\
    \ {\n        count := wordCount(word)\n        if count > maxCount {\n       \
    \     maxCount = count\n            result = word\n        }\n    }\n\n    if\
    \ maxCount > 0 {\n        maxLength = wordCount(result)\n        for word in words\
    \ {\n            length := wordCount(word)\n            if length > maxLength\
    \ {\n                maxLength = length\n                result = word\n     \
    \       }\n        }\n    }\n    return result", "    if words.count == 0 {\n\
    \        return \"<no words>\"\n    }\n\n    var max = words[0]\n    var num_unique\
    \ = 1\n\n    for w := 1; w < words.count; w++ {\n        if num_unique < len(words[w])\
    \ {\n            num_unique = len(words[w])\n            max = words[w]\n    \
    \    }\n    }\n\n    return max", '    return find_max_aux(words)', "    let maxCount\
    \ = words.reduce(0) { (sum, word) -> Int in\n        guard let word = word.unicodeScalars.filter\
    \ { !$0.isControl }.joined(), !word.isEmpty else { return 0 }\n        return\
    \ sum + word.count\n    }\n    return words.filter { (word: String) -> Bool in\n\
    \        let count = word.unicodeScalars.filter { !$0.isControl }.joined().count\n\
    \        return count == maxCount\n    }.sorted { $0.count > $1.count }.first!",
  "    var max: String = \"\"\n    var maxCount: Int = -1\n    for word in words {\n\
    \        var count: Int = 0\n        for char in word.utf8 {\n            if char\
    \ != ' ' {\n                count += 1\n            }\n        }\n        if count\
    \ > maxCount {\n            maxCount = count\n            max = word\n       \
    \ }\n    }\n    return max", "    if words.count < 1 {\n        return \"\"\n\
    \    }\n    if words.count == 1 {\n        return words[0]\n    }\n\n    let mut\
    \ max = words[0]\n    for word in words {\n        if !maxTrie(max) {\n      \
    \      return max\n        }\n        max = word\n    }\n    return max", "  \
    \  var max = words[0]\n    var max_num: Int = 0\n    for word in words {\n   \
    \     for ch in word {\n            if count > max_num {\n                max_num\
    \ = count\n                max = word\n            }\n        }\n    }\n    return\
    \ max", "    let result = words.reduce((max: String, curr: String, i: Int) ->\
    \ (String, Int)) {\n        if max.count < curr.count {\n            return (max,\
    \ curr.count)\n        }\n        if max.count > curr.count {\n            return\
    \ curr\n        }\n        return (max, curr.count)\n    }\n    return result.0",
  "    var max_count: Int64 = 0\n    var max_str: String = words[0]\n\n    for word\
    \ in words {\n        if !is_unique(word, max_count) {\n            continue\n\
    \        }\n\n        if max_count == 0 {\n            max_str = word\n      \
    \  } else {\n            if max_count > 0 {\n                if isLowerCase(word)\
    \ < isLowerCase(max_str) {\n                    max_str = word\n             \
    \   } else {\n                    if isLowerCase(word) > isLowerCase(max_str)\
    \ {\n                        max_str = word\n                    }\n         \
    \       }\n            } else {\n                max_str = word\n            }\n\
    \        }\n\n        max_count++\n    }\n\n    return max_str", "    guard let\
    \ count = count(words: words) else {\n        return \"\"\n    }\n    var max\
    \ = \"\"\n    var best = \"\"\n    for word in words {\n        var unique: Int\
    \ = 0\n        for char in word {\n            unique += count(char: char)?\n\
    \        }\n        if unique > max {\n            max = unique\n            best\
    \ = word\n        }\n    }\n    return best", "    var max = words[0]\n    for\
    \ word in words {\n        let uniqueChars = Array(word).reduce(0) { $0.count\
    \ < $1.count ? $0 + 1 : $1 }\n        if uniqueChars > max.count {\n         \
    \   max = word\n        }\n    }\n    return max", "  var maxCount = 0\n  var\
    \ maxWord = String()\n  for word : String in words {\n    if maxCount < word.characters.count\
    \ {\n      maxCount = word.characters.count\n      maxWord = word\n    }\n  }\n\
    \  return maxWord", "    sortWords(words)\n    return words[words.index(words.maxElement())!]",
  '    return find_max_str(words)', "    words.sort { (word1, word2) -> Bool in\n\
    \        return word1.characters.count > word2.characters.count\n    }\n    return\
    \ words[0]", "    if words.isEmpty {\n        return \"\"\n    }\n    var maxCount:\
    \ Int = 0\n    var maxWord: String = words[0]\n    for i in 1..<words.count {\n\
    \        let currentCount = words.filter{$0 == maxWord}.count\n        if currentCount\
    \ > maxCount {\n            maxCount = currentCount\n            maxWord = words[i]\n\
    \        }\n    }\n    return maxWord", "  var maxCount: Int = 0\n  var maxWord:\
    \ String = String()\n  for word in words {\n    if let count = word.unicodeScalars.filter({\
    \ !$0.isControl }).count {\n      if count > maxCount {\n        maxWord = word\n\
    \        maxCount = count\n      }\n    }\n  }\n  return maxWord", "  guard words\
    \ != nil else {\n    throw RCTExceptionFromNSError(\n      NSError(domain: NSCocoaErrorDomain,\
    \ code: NSCocoaErrorNoMemory, userInfo: nil))\n  }\n\n  guard words.count > 0\
    \ else {\n    throw RCTExceptionFromNSError(NSError(domain: NSCocoaErrorDomain,\
    \ code: NSCocoaErrorBadArgument, userInfo: nil))\n  }\n\n  guard words.count <=\
    \ MAX_WORDS else {\n    throw RCTExceptionFromNSError(NSError(domain: NSCocoaErrorDomain,\
    \ code: NSCocoaErrorStringOutOfRange, userInfo: nil))\n  }\n\n  guard !words.isEmpty\
    \ else {\n    throw RCTExceptionFromNSError(NSError(domain: NSCocoaErrorDomain,\
    \ code: NSCocoaErrorStringEmpty, userInfo: nil))\n  }\n\n  // Count words\n  var\
    \ counts = words.map({ $0.characters.count })\n\n  // Sort by count\n  counts\
    \ = counts[0..<counts.count - 1].sorted()\n\n  // Find the word with maximum count\n\
    \  guard counts[counts.count - 1] == 0 else {\n    throw RCTExceptionFromNSError(\n\
    \      NSError(domain: NSCocoaErrorDomain, code: NSCocoaErrorStringOutOfRange,\
    \ userInfo: nil))\n  }\n  return words[counts.count - 1]", "    var result = \"\
    \"\n    var max = UInt32(0)\n    for word in words {\n        var count = UInt32(0)\n\
    \        for c in word {\n            if count > max {\n                max =\
    \ count\n                result = word\n            }\n            count++\n \
    \       }\n    }\n    return result", "    let maxChars = words.reduce(0)(combine:\
    \ +)\n    var maxChar: Int = 0\n    for word in words {\n        if maxChars >\
    \ word.characters.count {\n            maxChars = word.characters.count\n    \
    \        maxChar = word.characters.count\n        } else if word.characters.count\
    \ > maxChar {\n            maxChars = word.characters.count\n            maxChar\
    \ = word.characters.count\n        }\n    }\n    return words.filter({ $0.characters.count\
    \ == maxChar })\n        .sorted(by: { $0.characters.count < $1.characters.count\
    \ })\n        .first!", "    var maxNumChars: Int = 0\n    var maxWord = \"\"\n\
    \    for word in words {\n        let numChars = word.characters.count\n     \
    \   if numChars > maxNumChars {\n            maxNumChars = numChars\n        \
    \    maxWord = word\n        }\n    }\n    return maxWord", "    var max = 0\n\
    \    var maxString = \"\"\n    for _, word := range words {\n        for _, c\
    \ := range word {\n            max = math.Max(max, len(c))\n        }\n      \
    \  if max > 0 {\n            if maxString == \"\" || maxString < word {\n    \
    \            maxString = word\n            }\n        }\n    }\n    return maxString",
  "  var max: Int64 = -1\n  var word: String = \"\"\n  for word in words {\n    if\
    \ max < word.count {\n      max = word.count\n    }\n  }\n  if max > 0 {\n   \
    \ return words[words.indexOf(words.filter({ $0.count == max }))!]\n  }\n  return\
    \ \"\"", "  // Initialize our \"best\" value with the first string in the array\n\
    \  var best = words[0]\n  // Initialize the number of unique characters to zero\n\
    \  var count = 0\n  // Iterate over the remaining strings in the array\n  for\
    \ string in words {\n    // If this string has fewer unique characters than our\
    \ \"best\" value\n    // so far, update our \"best\" value accordingly\n    if\
    \ count < stringCount(best) {\n      best = string\n      count = 0\n    }\n \
    \   // Update the number of unique characters for this string\n    count = count\
    \ + stringCount(string)\n  }\n  // Return the \"best\" value in the array\n  return\
    \ best", "    var max = \"\"\n    for word in words {\n        if let count =\
    \ wordCounter(word: word) {\n            if count == max {\n                return\
    \ word\n            }\n            max = count\n        }\n    }\n    return max",
  "    var maxCount = 0\n    var maxWord: String?\n    for word in words {\n     \
    \   if let count = count_chars(word) {\n            if count > maxCount {\n  \
    \              maxCount = count\n                maxWord = word\n            }\n\
    \        }\n    }\n    return maxWord!", '    return find_max_utf8(words.sorted(byLength).map(toUTF8))',
  "    if words.isEmpty { return \"\" }\n    \n    var maxChars = 0\n    var maxWord\
    \ = \"\"\n    \n    for word in words {\n        let count = countUniqueChars(word)\n\
    \        if count > maxChars {\n            maxWord = word\n            maxChars\
    \ = count\n        }\n    }\n    \n    return maxWord", "    if words.count <=\
    \ 1 {\n        return words[0]\n    }\n\n    var maxWord = \"\"\n    var maxCount\
    \ = 0\n    for word in words {\n        if maxCount < word.characters.count {\n\
    \            maxCount = word.characters.count\n            maxWord = word\n  \
    \      }\n    }\n\n    return maxWord", "    var maxCount = 0\n    var maxWord\
    \ = \"\"\n    for _, word := range words {\n        for count := 0; count < len(word);\
    \ count++ {\n            if maxCount < count {\n                maxCount = count\n\
    \                maxWord = word\n            }\n        }\n    }\n    return maxWord",
  "    var max_word = \"\"\n    var max_count = -1\n    for word in words {\n    \
    \    var count = count(word)\n        if count > max_count {\n            max_word\
    \ = word\n            max_count = count\n        }\n    }\n    return max_word",
  "    guard !words.isEmpty else {\n        return \"\"\n    }\n\n    var maxCount\
    \ = 0\n    var maxWord = \"\"\n    for word in words {\n        if let count =\
    \ count_unique_characters(word) {\n            if count > maxCount {\n       \
    \         maxCount = count\n                maxWord = word\n            }\n  \
    \      }\n    }\n\n    return maxWord", "    var max: String = \"\"\n    var count:\
    \ Int = 0\n    for word in words {\n        count += word.countElements\n    \
    \    if max < word {\n            max = word\n        }\n    }\n    if count ==\
    \ 0 {\n        return \"\"\n    }\n    if count < words[0].countElements {\n \
    \       return words[0]\n    }\n    return max", "    if words.isEmpty {\n   \
    \     return \"\"\n    }\n\n    var mostFrequentCount = 0\n    var mostFrequentWord\
    \ = \"\"\n    for word in words {\n        guard let charCount = word.unicodeScalars.filter\
    \ { $0.value == 0 }.count,\n            charCount > mostFrequentCount else {\n\
    \                continue\n        }\n        if charCount > mostFrequentCount\
    \ {\n            mostFrequentCount = charCount\n            mostFrequentWord =\
    \ word\n        }\n    }\n\n    return mostFrequentWord", "  guard !words.isEmpty\
    \ else { return \"\" }\n  var maxCount = 0\n  var bestWord: String = \"\"\n  for\
    \ word in words {\n    if word.characters.count == 1 {\n      if maxCount < word.characters.count\
    \ {\n        maxCount = word.characters.count\n        bestWord = word\n     \
    \ }\n    } else {\n      if maxCount < word.characters.count {\n        maxCount\
    \ = word.characters.count\n        bestWord = word\n      }\n    }\n  }\n  return\
    \ bestWord", "    var maxCount = 0\n    var maxWord = \"\"\n\n    for word in\
    \ words {\n        var count = word.characters.count\n        if count > maxCount\
    \ {\n            maxCount = count\n            maxWord = word\n        }\n   \
    \ }\n\n    return maxWord", "    var max = \"\"\n    for word in words {\n   \
    \     let uniqueCount = count(word: word, from: words)\n        if uniqueCount\
    \ > count(word: max, from: words) {\n            max = word\n        }\n    }\n\
    \    return max", "    \n    // Your code here\n    // Write your code here\n\
    \    var longest = \"\"\n    var max = 0\n    for word in words {\n        tmp\
    \ = word_count(word)\n        if tmp > max {\n            max = tmp\n        \
    \    longest = word\n        }\n    }\n    return longest", "    \n    var max\
    \ = \"\"\n    var maxCount = 0\n    for word in words {\n        if word == max\
    \ {\n            continue\n        }\n        if let count = word.characters.count\
    \ {\n            if maxCount < count {\n                max = word\n         \
    \       maxCount = count\n            }\n        }\n    }\n    return max", " \
    \ var maxCharCount = 0\n  var maxChar: String = String()\n  var maxStr: String\
    \ = String()\n  for word in words {\n    if word == \"\" {\n      continue\n \
    \   }\n    var wordCharCount = 0\n    for char in word {\n      if char == ' '\
    \ || char == '\\t' || char == '\\n' || char == '\\0' {\n        continue\n   \
    \   }\n      if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char\
    \ == 'u' || char == 'A' || char == 'E' || char == 'I' || char == 'O' || char ==\
    \ 'U' {\n        charCount += 2\n      }\n      if char == 'c' || char == 'h'\
    \ || char == 'k' || char == 'l' || char == 'm' || char == 'n' || char == 'p' ||\
    \ char == 'r' || char == 's' || char == 't' || char == 'v' || char == 'A' || char\
    \ == 'C' || char == 'H' || char == 'K' || char == 'L' || char == 'M' || char ==\
    \ 'N' || char == 'P' || char == 'R' || char == 'S' || char == 'T' || char == 'V'\
    \ {\n        charCount += 1\n      }\n      charCount += 1\n    }\n    if wordCharCount\
    \ > maxCharCount {\n      maxCharCount = wordCharCount\n      maxChar = word\n\
    \      maxStr = word\n    }\n  }\n  return maxChar", "\tsort.Sort(uniqueByLength(words))\n\
    \treturn words[len(words)-1]", "    let sorted = words.sorted()\n    let count\
    \ = sorted.reduce(0, { (prev, curr) -> Int in\n        return prev + (curr.count())\n\
    \    })\n    let result = sorted.last { $0.count() < count.count() }\n    return\
    \ result!", "    if words == nil || words == \"\" { return \"\" }\n    var result\
    \ = \"\"\n    var maxNum = 0\n    for str in words {\n        str = str.lowercased()\n\
    \        var numChars = countChars(str)\n        if numChars > maxNum { maxNum\
    \ = numChars }\n        if numChars == 0 { continue }\n        result = findString(str,\
    \ result)\n    }\n    return result", "\tlet sorted = words.sorted(by: { $0.length\
    \ < $1.length })\n\treturn sorted[0]", "    switch words {\n    case let words\
    \ as [String]:\n        guard let max = find_max(words) else {\n            return\
    \ \"<None>\"\n        }\n        return max\n    case let words as [String:Any]:\n\
    \        guard let max = find_max(words.keys) else {\n            return \"<None>\"\
    \n        }\n        return max\n    case let words as [Any]:\n        return\
    \ \"<None>\"\n    default:\n        return \"<None>\"\n    }", "    var max =\
    \ words[0]\n    for w in words {\n        if w != max && w.hasUniqueChars() {\n\
    \            max = w\n        }\n    }\n    return max", "  // Count all the unique\
    \ characters\n  var charsCount: [(Character, Int)] = [()]\n  for str in words\
    \ {\n    for char in str.unicodeScalars {\n      charsCount = charsCount + [(char,\
    \ .0)]\n    }\n  }\n\n  // If every character is unique, return the longest string\
    \ in lexicographical\n  // order\n  var maxChar = 0\n  for char, (count) in charsCount\
    \ {\n    if count == maxChar {\n      continue\n    }\n    if count == charsCount.maxElement\
    \ {\n      maxChar = count\n    }\n  }\n  return words.first!", "  let maxCount\
    \ = words.reduce(0, {$0 > $1.count})\n  guard maxCount == words.count else { return\
    \ \"\" }\n  return words[maxCount..<words.count].sorted().first!", "    \n   \
    \ switch words {\n    case .named(let name):\n        return name\n    case .unnamed(let\
    \ words):\n        if words.isEmpty {\n            return \"\"\n        } else\
    \ {\n            return words.min()\n        }\n    case .empty(let words):\n\
    \        if words.isEmpty {\n            return \"\"\n        } else {\n     \
    \       let unique = words.unique()\n            return unique.first()\n     \
    \   }\n    }\n    ", "  var result = \"\"\n  var counter = 0\n  for w in words\
    \ {\n    counter += length(w)\n    result = w if counter > length(result) else\
    \ result\n  }\n  return result", "    var maxNum = 0\n    var maxChar = \"\"\n\
    \    for word in words {\n        if word[word.index(maxNum, offsetBy: 0)] ==\
    \ maxChar {\n            maxNum += 1\n        } else {\n            maxChar =\
    \ word[word.index(maxNum, offsetBy: 0)]\n            maxNum = 1\n        }\n \
    \   }\n    return maxChar", "    var max = 0\n    var result = \"\"\n    for word\
    \ in words {\n        if max < word.count {\n            max = word.count\n  \
    \          result = word\n        }\n    }\n    return result", '  return find_max(&words)',
  "  var max = \"\"\n  var counts = [0]\n  for _, v := range words {\n    counts =\
    \ append(counts, 0)\n  }\n\n  for _, v := range words {\n    for i := 0; i < len(words);\
    \ i++ {\n      for j := 0; j < len(words); j++ {\n        if v == words[j] {\n\
    \          counts[i]++\n          counts[j]++\n        }\n      }\n    }\n\n \
    \   if counts[0] > counts[1] {\n      max = v\n      counts[0] = counts[1]\n \
    \   }\n  }\n\n  return max", "    if words.isEmpty() {\n        return \"\"\n\
    \    }\n    var maxCount = 0\n    var maxString = \"\"\n    var maxValue: UInt32\
    \ = 0\n    for word in words {\n        let value = word.unicodeScalars.reduce(0)\
    \ { (result, scalar) in\n            var count = scalar.value\n            if\
    \ count > maxCount {\n                count = maxCount\n            }\n      \
    \      if value > maxValue {\n                maxCount = count\n             \
    \   maxValue = value\n            }\n            return result + count\n     \
    \   }\n        maxString = maxString + String(UnicodeScalar(Character(word.unicodeScalars.first!)))\n\
    \        if value == maxValue {\n            maxString = maxString + String(UnicodeScalar(Character(word.unicodeScalars.last!)))\n\
    \        }\n    }\n    return maxString", '    return find_max_len(words, words.count())',
  "    var max = \"\"\n    var maxCount = 0\n    for w := 0; w < words.Length; w++\
    \ {\n        var count = 0\n        for c := 0; c < words[w].Lenght; c++ {\n \
    \           if words[w][c] == max {\n                count = count + 1\n     \
    \       }\n        }\n        if count > maxCount {\n            maxCount = count\n\
    \            max = words[w]\n        }\n    }\n    return max", "    if words.isEmpty()\
    \ {\n        return \"\"\n    }\n    let maxCount = countUniqueChars(words[0])\n\
    \    var max = words[0]\n    var currentCount = 0\n    for word in words {\n \
    \       if countUniqueChars(word) > maxCount {\n            max = word\n     \
    \       maxCount = countUniqueChars(word)\n        }\n        currentCount +=\
    \ countUniqueChars(word)\n    }\n    if currentCount > maxCount {\n        return\
    \ max\n    }\n    return find_max(words: words[1..<words.count])", "    \n   \
    \ // The longest word in the array.\n    var maxWord = words[0]\n    var maxCount\
    \ = 0\n    for word in words {\n        // Count the number of unique characters\
    \ in the word.\n        var count = 1\n        for char in word {\n          \
    \  if word == maxWord {\n                count += maxCount\n            } else\
    \ {\n                count += 1\n            }\n        }\n        \n        //\
    \ If count is greater than the max count, update maxWord.\n        if count >\
    \ maxCount {\n            maxWord = word\n            maxCount = count\n     \
    \   }\n    }\n    \n    // If maxCount is 0, return an empty string.\n    if maxCount\
    \ == 0 {\n        return \"\"\n    }\n    \n    // If maxCount is 1, return the\
    \ maxWord.\n    if maxCount == 1 {\n        return maxWord\n    }\n    \n    //\
    \ If maxCount is > 1, return the word with maxCount unique characters.\n    var\
    \ candidate = maxWord\n    for i in maxCount..<words.count {\n        if words[i].index(of:\
    \ candidate) != 0 {\n            candidate = words[i]\n        }\n    }\n    return\
    \ candidate", '    return words[findMax(words)]', "    type T = [String]\n   \
    \ \n    var maxCount = 0\n    var maxWord = \"\"\n    var wordToCount = T()\n\
    \    \n    for word in words {\n        \n        // check whether this word has\
    \ unique characters\n        var count = Strings.count(word)\n        \n     \
    \   // if the word has no unique characters\n        if count == 0 {\n       \
    \     \n            // set maxWord\n            if count > maxCount {\n      \
    \          maxCount = count\n                maxWord = word\n            }\n \
    \           \n            // set wordToCount\n            wordToCount.append(word)\n\
    \            \n        // if the word has unique characters\n        } else {\n\
    \            \n            // set maxWord\n            if count > maxCount {\n\
    \                maxCount = count\n                maxWord = word\n          \
    \  }\n            \n            // set wordToCount\n            var wordToCountIndex\
    \ = -1\n            for wordToCountIndex in 0..<wordToCount.count {\n        \
    \        if wordToCount[wordToCountIndex] != word {\n                    break\n\
    \                }\n            }\n            \n            if wordToCountIndex\
    \ != -1 {\n                wordToCount[wordToCountIndex] = word\n            }\n\
    \        }\n    }\n    \n    // if maxWord has not been set\n    if maxWord ==\
    \ \"\" {\n        maxWord = words[0]\n    }\n    \n    // sort the wordToCount\
    \ array\n    wordToCount = wordToCount.sorted()\n    \n    // find the word with\
    \ maximum number of unique characters\n    for wordToCountIndex in 0..<wordToCount.count\
    \ {\n        \n        if wordToCount[wordToCountIndex] == maxWord {\n       \
    \     return wordToCount[wordToCountIndex]\n        }\n    }\n    \n    return\
    \ \"\"", "\tlet maxKey = words[0]\n\tlet maxValue = words[0]\n\tlet maxCount =\
    \ 1\n\tfor word in words {\n\t\tif word == maxKey {\n\t\t\tcontinue\n\t\t}\n\t\
    \tlet value = countUniqueChar(word)\n\t\tif value > maxValue {\n\t\t\tmaxValue\
    \ = value\n\t\t\tmaxKey = word\n\t\t}\n\t\tmaxCount += 1\n\t}\n\treturn maxKey",
  "    // count the number of characters\n    // create a set of unique characters\n\
    \    // sort lexicographically and return the one that comes first\n    \n   \
    \ var charCounts = Dictionary<Int, Int>()\n    for word in words {\n        for\
    \ char in word {\n            if charCounts.contains(char) {\n               \
    \ charCounts[char] = charCounts[char] + 1\n            } else {\n            \
    \    charCounts[char] = 1\n            }\n        }\n    }\n    \n    var maxCharCount\
    \ = 0\n    var maxChar = \"\"\n    var sortedWords = Dictionary(uniqueKeysWithValues:\
    \ true)\n    for char in charCounts {\n        if charCounts[char] > maxCharCount\
    \ {\n            maxCharCount = charCounts[char]\n            maxChar = char\n\
    \        }\n    }\n    \n    return sortedWords[maxChar]", "\tvar result: String\
    \ = words[0]\n\tvar numUniqueChars: Int = 0\n\n\tfor _, word := range words {\n\
    \t\tif !is_unique(word, &numUniqueChars) {\n\t\t\tbreak\n\t\t}\n\n\t\tif numUniqueChars\
    \ > result.countByValue() {\n\t\t\tresult = word\n\t\t}\n\t}\n\n\treturn result",
  "    var max = \"\"\n    var maxCount = 0\n    for w in words {\n        var count\
    \ = 0\n        for _, b in w.unicodeScalars {\n            if !(b&0xff000000)\
    \ {\n                count++\n            }\n        }\n        if count > maxCount\
    \ {\n            max = w\n            maxCount = count\n        }\n    }\n   \
    \ return max", "    return words.reduce((max: String, current: String) -> String\
    \ in\n        if current.characters.count > max.characters.count {\n         \
    \   return current\n        }\n        return max\n    )", "\tvar max := 0\n\t\
    var key := \"\"\n\tfor _, word := range words {\n\t\tif strings.Count(word, \"\
    a\") > max {\n\t\t\tmax = strings.Count(word, \"a\")\n\t\t\tkey = word\n\t\t}\n\
    \t}\n\treturn key", "    let maxKey = Dictionary(grouping: words) { (word, count)\
    \ in\n        return word.count * word\n    }\n    var maxVal = countToKey(maxKey)\n\
    \    for word in words {\n        if let count = maxVal[key: countToKey(word)]\
    \ {\n            if count > maxVal.count {\n                maxVal = countToKey(word)\n\
    \            }\n        }\n    }\n    return maxVal.key", "  guard let sortedArray\
    \ = words.sorted() else { return \"\" }\n  let result = sortedArray[0]\n  for\
    \ element in sortedArray.dropFirst() {\n    var count = 0\n    for char in element\
    \ {\n      if !result.hasPrefix(char) {\n        result = char + String(count)\n\
    \      }\n      count = count + 1\n    }\n  }\n  return result", "  var max: String\
    \ = \"\"\n  var maxCharCount: Int = 0\n  for word in words {\n    var charCount\
    \ = 0\n    for char in word {\n      if charCount.charCount > maxCharCount {\n\
    \        max = word\n        maxCharCount = charCount\n      }\n      charCount\
    \ += 1\n    }\n  }\n  return max", "  if words.isEmpty() {\n    return \"nothing\"\
    \n  }\n  if words.count == 1 {\n    return words[0]\n  }\n  \n  var maxCount =\
    \ 0\n  \n  var maxWord = \"\"\n  \n  for word in words {\n    var count = 0\n\
    \    for char in word {\n      if char != word[0] {\n        count += 1\n    \
    \  }\n    }\n    \n    if count > maxCount {\n      maxCount = count\n      maxWord\
    \ = word\n    }\n  }\n  \n  return maxWord", '    return find_max(words.sorted())',
  "    var max: Int = 0\n    var result: String = \"\"\n    for word in words {\n\
    \        charCount := count_chars(word)\n        if charCount > max {\n      \
    \      max = charCount\n            result = word\n        }\n    }\n    return\
    \ result", "    // TODO: check words and return \"too long\" if there are too\
    \ many unique characters\n    var maxCount = 0\n    var maxIndex = 0\n    for\
    \ idx, word := range words {\n        count := countUnique(word)\n        if count\
    \ > maxCount {\n            maxCount = count\n            maxIndex = idx\n   \
    \     }\n    }\n    if maxCount > 1 {\n        return words[maxIndex]\n    }\n\
    \    return \"\"", "    strings.Sort()\n    var max = String()\n    var maxCount\
    \ = 0\n    for _, w := range words {\n        if w == max {\n            continue\n\
    \        }\n        if strings.HasPrefix(w, max) {\n            continue\n   \
    \     }\n        if strings.HasPrefix(max, w) {\n            continue\n      \
    \  }\n        if strings.HasSuffix(w, max) {\n            continue\n        }\n\
    \        if strings.HasSuffix(max, w) {\n            continue\n        }\n   \
    \     maxCount = 0\n        for _, c := range w {\n            if c == max[0]\
    \ {\n                maxCount++\n            }\n        }\n        if maxCount\
    \ > 1 {\n            continue\n        }\n        max = w\n    }\n    return max",
  "    var maxCount = 1\n    var maxWord: String = \"\"\n    for word in words {\n\
    \        for letter in word {\n            if letter in words {\n            \
    \    continue\n            }\n            if letter in maxWord {\n           \
    \     continue\n            }\n            if letter == maxCount {\n         \
    \       continue\n            }\n            maxCount = letter\n            maxWord\
    \ = word\n        }\n    }\n    return maxWord", '  return find_max(words: words,
    n: 0)', "    var maxCharCount: Int = 0\n    var maxWord: String = \"\"\n    for\
    \ word in words {\n        let charCount = word.characters.count\n        if charCount\
    \ > maxCharCount {\n            maxWord = word\n            maxCharCount = charCount\n\
    \        }\n    }\n    return maxWord", "  var max: String = words[0]\n  for word\
    \ in words {\n    if word.count > max.count {\n      max = word\n    }\n  }\n\
    \  return max", "    var max: String = \"\"\n    var maxCount = 0\n    for word\
    \ in words {\n        var wordCount: Int = 0\n        for letter in word {\n \
    \           wordCount += unique[letter]!.count\n        }\n        if wordCount\
    \ > maxCount {\n            max = word\n            maxCount = wordCount\n   \
    \     }\n    }\n    return max", "    let nums = words.map { $0.characters.count\
    \ }\n    let maxIndex = nums.maxIndex(of: UInt32.init)\n    if maxIndex == nums.count\
    \ {\n        return \"\"\n    } else {\n        return words[maxIndex]\n    }",
  "    switch words {\n    case let words as [String]?:\n        return find_max(words:\
    \ words)\n    case let words as String[]:\n        let count = words.reduce(0,\
    \ { ($0, $1) })\n        return count==words.count ? words[0] : find_max(words:\
    \ words.filter({$0==count}))\n    default:\n        return \"ERROR\"\n    }",
  "    return words.reduce((max: String, value: String) -> String in\n        guard\
    \ let value = value.characters.flatMap { String($0) }.sorted else {\n        \
    \    return max\n        }\n        if max == value {\n            return max\n\
    \        } else {\n            return value\n        }\n    )", "    let counts\
    \ = words.reduce([String: Int](), combine: {\n        (counts, word: String) in\n\
    \        counts[word] = (counts[word] ?? 0) + 1\n        return counts\n    })\n\
    \    return words.filter{$0.value.count == counts.value.max} .first!", "  var\
    \ max = \"\"\n  var maxCount = 0\n  for w in words {\n    if w.countUnique < maxCount\
    \ {\n      max = w\n      maxCount = w.countUnique\n    }\n  }\n  return max",
  "    var wordCounts = Dictionary()\n    for word in words {\n        wordCounts[word]\
    \ = (wordCounts[word] ?? 0) + 1\n    }\n    if wordCounts.count > 1 {\n      \
    \  var max = wordCounts.first\n        for word in words {\n            if wordCounts[word]\
    \ > wordCounts[max] {\n                max = word\n            }\n        }\n\
    \        return max\n    } else {\n        return words[0]\n    }", '    return
    max(words, count).0', "    return words.sorted().reduce(into: \"\") {\n      \
    \  if let last = $1.characters.count {\n            if last > $1.characters.count\
    \ {\n                $0.append(contentsOf: $1)\n                $1.removeLast()\n\
    \            }\n        } else {\n            $0.append(contentsOf: $1)\n    \
    \    }\n    }", "  var maximum = String()\n  var maxCount = 0\n  for word in words\
    \ {\n    if count := count(word); count > maxCount {\n      maximum = word\n \
    \     maxCount = count\n    }\n  }\n  return maximum", '    return find_max_(words,
    nil)', "    if words.count == 0 {\n        return \"\"\n    }\n\n    var maxCount\
    \ = 0\n    var maxStr = \"\"\n\n    for word in words {\n        var count = 0\n\
    \        for char in word {\n            count += 1\n        }\n        if count\
    \ > maxCount {\n            maxCount = count\n            maxStr = word\n    \
    \    }\n    }\n    return maxStr", "    var maxCount = 0\n    var maxString =\
    \ \"\"\n    for w in words {\n        let count = words.filter{ $0 == w }.count\n\
    \        if count > maxCount {\n            maxCount = count\n            maxString\
    \ = w\n        }\n    }\n    return maxString", "  words.sortInPlace()\n  return\
    \ words[words.indexOf(words[words.count])]", "  var max: String = \"\"\n  var\
    \ maxCount: Int = 0\n\n  for word in words {\n    if maxCount == 0 {\n      max\
    \ = word\n      maxCount = word.count\n    } else {\n      if maxCount > word.count\
    \ {\n        max = word\n        maxCount = word.count\n      }\n    }\n  }\n\n\
    \  return max", "  var result: Character? = nil\n  for word in words {\n    let\
    \ count = countUniqueChars(word)\n    if let result = count {\n      if count\
    \ > result[word.startIndex]! {\n        result = word\n      }\n    }\n  }\n \
    \ return result", "    // use an auxiliary array to count the number of chars\
    \ for each word\n    var charCounts = [String: Int]()\n    for w in words {\n\
    \        charCounts[w] = count(w)\n    }\n    // find the word with max chars\n\
    \    var max = 0\n    var maxCharCount = 0\n    for (chars, w) in charCounts {\n\
    \        if w > max {\n            max = w\n            maxCharCount = chars\n\
    \        }\n    }\n    // return null if there are no words\n    if max == 0 {\n\
    \        return \"\"\n    }\n    // return the first word which has max chars\n\
    \    for (chars, w) in charCounts {\n        if w == max {\n            return\
    \ w\n        }\n    }\n    // could not find one with max chars\n    return \"\
    \"", "  var result = \"\"\n  var maxLength = -1\n  for word in words {\n    //\
    \ Compute the length of the word from scratch since String.count does\n    //\
    \ not work properly for Unicode. This will be faster than calling .utf8\n    //\
    \ on the word after finding its length.\n    var len = word.utf8().count\n   \
    \ if maxLength < len {\n      maxLength = len\n      result = word\n    }\n  }\n\
    \  return result", "    var maxCount = 0\n    var maxWord = \"\"\n\n    for word\
    \ in words {\n        wordArray := [Character]()\n\n        for c in word {\n\
    \            if wordArray.contains(c) {\n                wordArray.remove(c)\n\
    \            } else {\n                wordArray.append(c)\n            }\n  \
    \      }\n\n        if wordArray.count > maxCount {\n            maxCount = wordArray.count\n\
    \            maxWord = word\n        }\n    }\n\n    return maxWord", "    words\
    \ := strings.Split(strings.Join(words, \"|\"), \"|\")\n    var maxCount int\n\
    \    result := \"\"\n    for _, word := range words {\n        count := len(word)\
    \ * len(word) - strings.Count(word, \"\")\n        if count > maxCount {\n   \
    \         maxCount = count\n            result = word\n        }\n    }\n    return\
    \ result", "    // Sort the list of strings lexicographically.\n    var wordCount:\
    \ [String] = words.sorted()\n\n    // Count the number of unique characters in\
    \ the sorted list.\n    var uniqueCharacterCount = 0\n    for word in wordCount\
    \ {\n        for character in word {\n            if character == character {\n\
    \                uniqueCharacterCount++\n            }\n        }\n    }\n\n \
    \   // Find the index of the item with the maximum number of unique characters.\n\
    \    var maximumCount: Int = -1\n    for index in 0..<wordCount.count {\n    \
    \    if wordCount[index] == wordCount[index] {\n            if maximumCount <\
    \ uniqueCharacterCount {\n                maximumCount = uniqueCharacterCount\n\
    \            }\n        } else {\n            if maximumCount > uniqueCharacterCount\
    \ {\n                maximumCount = uniqueCharacterCount\n            }\n    \
    \    }\n    }\n\n    // Return the word that has maximum number of unique characters.\n\
    \    return wordCount[maximumCount]", "    if words.isEmpty {\n        return\
    \ \"\"\n    }\n    var maxCount = 0\n    var maxChar = \"\"\n    var maxPos =\
    \ -1\n    for i := 0; i < words.count; i++ {\n        for _, char := range words[i]\
    \ {\n            count := 0\n            pos := -1\n            for j := 0; j\
    \ < len(maxChar); j++ {\n                if maxChar[j] == char {\n           \
    \         pos++\n                } else {\n                    count++\n     \
    \           }\n            }\n            if count == maxCount {\n           \
    \     if pos < maxPos {\n                    return words[i]\n               \
    \ }\n            } else {\n                if pos < maxPos {\n               \
    \     maxPos = pos\n                    maxChar = char\n                    maxCount\
    \ = count\n                }\n            }\n        }\n    }\n    return words[0]",
  "    let uniques = Array(Set(words))\n    return uniques.first ?? \"?\"", "    var\
    \ result = \"\"\n    var count = [Int]()\n\n    for word in words {\n        let\
    \ count = count(word)\n\n        if count == 0 {\n            result += \"*\"\n\
    \        } else {\n            if count.isEmpty {\n                result = word\n\
    \            } else {\n                if count.max() <= count[0] {\n        \
    \            result = word\n                } else {\n                    result\
    \ = word[0]\n                    for index in 1..<count.count {\n            \
    \            if count[index] > count[index-1] {\n                            result\
    \ = word[index]\n                            break\n                        }\n\
    \                    }\n                }\n            }\n        }\n\n      \
    \  count[word.unicodeScalars.count] = count[word.unicodeScalars.count] + 1\n \
    \   }\n\n    return result", "    // TODO: Work out the actual problem and see\
    \ if this can be done without\n    // sorting the input first\n    let uniqueChars\
    \ = words.reduce([String]()) { $0.append($1), $1 }\n    var max: Int64 = -1\n\
    \    var result: String = \"\"\n    for word in words {\n        max = -99\n \
    \       for char in word.unicodeScalars.filter({ !$0.isControl }).sorted(by: {\
    \ $0.value <  $1.value }).map({ $0.value }) {\n            if max < $0.value.int64Value\
    \ {\n                max = $0.value.int64Value\n                result = word\n\
    \            }\n        }\n    }\n    return result", "    guard words != nil\
    \ else {\n        return \"\"\n    }\n    var max = 0\n    var maxWord = \"\"\n\
    \    for (index, word) in words.enumerated() {\n        let count = countCharacters(word)\n\
    \        if count > max {\n            max = count\n            maxWord = word\n\
    \        }\n    }\n    return maxWord", "    guard words.count > 0 else {\n  \
    \      return \"\"\n    }\n    // The longest word has the maximum number of unique\
    \ characters.\n    var maxWord = words[0]\n    // The word with the maximum number\
    \ of unique characters is first.\n    var minWord = words[0]\n    // The current\
    \ word counts the unique characters in the current word.\n    var count = 0\n\
    \    // Traverse the words and count the unique characters.\n    for i in 1 ..<\
    \ words.count {\n        let word = words[i]\n        // Ignore the empty string.\n\
    \        if word != \"\" {\n            // Count unique characters in the current\
    \ word.\n            count += word.unicodeScalars.filter{ $0.value > 0 }.count\n\
    \            // Find the new word with the maximum number of unique characters.\n\
    \            if count > maxWord.unicodeScalars.filter{ $0.value > 0 }.count {\n\
    \                maxWord = word\n            }\n            // Find the new word\
    \ with the maximum number of unique characters.\n            if count < minWord.unicodeScalars.filter{\
    \ $0.value > 0 }.count {\n                minWord = word\n            }\n    \
    \    }\n    }\n    // Return the result if both words have maximum number of unique\
    \ characters.\n    if maxWord.unicodeScalars.filter{ $0.value > 0 }.count == minWord.unicodeScalars.filter{\
    \ $0.value > 0 }.count {\n        return maxWord\n    }\n    // Return the result\
    \ if the first word has maximum number of unique characters.\n    if maxWord.unicodeScalars.filter{\
    \ $0.value > 0 }.count == 1 {\n        return maxWord\n    }\n    // Return the\
    \ result if the second word has maximum number of unique characters.\n    if minWord.unicodeScalars.filter{\
    \ $0.value > 0 }.count == 1 {\n        return minWord\n    }\n    // Return the\
    \ result if none of them has maximum number of unique characters.\n    return\
    \ \"\"", "    var maxCount: Int = 0\n    var max: String = words[0]\n    for word\
    \ : String in words {\n        let count = countUniqCharacters(word)\n       \
    \ if count > maxCount {\n            maxCount = count\n            max = word\n\
    \        }\n    }\n    return max", '    return find_max(words)', "    if words.isEmpty\
    \ {\n        return \"\"\n    }\n    var maxWord = words[0]\n    var maxCount\
    \ = 1\n    for word in words {\n        if maxCount > word.characters.count {\n\
    \            maxCount = word.characters.count\n            maxWord = word\n  \
    \      }\n    }\n    return maxWord", "    if words.isEmpty() {\n        return\
    \ \"\"\n    }\n    var max: Int64 = 0\n    var maxString: String = \"\"\n    for\
    \ word : String in words {\n        let charCounts = Array(Set(word))\n      \
    \  for charCount : Int64 in charCounts {\n            if charCount > max {\n \
    \               max = charCount\n                maxString = word\n          \
    \  }\n        }\n    }\n    return maxString", "    return words.reduce((max:\
    \ String?, word: String) -> String in\n        guard let maxString = max else\
    \ {\n            return word\n        }\n        var count = maxString.characters.count\n\
    \        for char in word.characters {\n            if count < maxString.characters.count\
    \ {\n                count = maxString.characters.count\n            }\n     \
    \   }\n        return maxString\n    )", '    return find_max(words.sorted())',
  '    return find_max(words.sorted())', "    var max = words[0]\n    for word :=\
    \ 1; word < words.Count; word++ {\n        for character := 0; character < words[word].Count;\
    \ character++ {\n            if max < words[word][character] {\n             \
    \   max = words[word][character]\n            }\n        }\n    }\n    return\
    \ max", "    var wordDict: [String: Int] = [:]\n    for word in words {\n    \
    \    if wordDict[word] != nil {\n            wordDict[word] += 1\n        } else\
    \ {\n            wordDict[word] = 1\n        }\n    }\n    var maxVal = wordDict.values().max()\n\
    \    for word in wordDict.keys {\n        if wordDict[word] == maxVal {\n    \
    \        return word\n        }\n    }\n    return \"\"", '    return find_max(words)',
  "  words.sortInPlace()\n  \n  var result = \"\"\n  var count = 0\n  \n  for word\
    \ in words {\n    if count < word.count {\n      result = word\n      count =\
    \ 1\n    } else {\n      count += 1\n    }\n  }\n  \n  return result", "  var\
    \ maxCount = 0\n  var maxIndex = -1\n  for index in 0..<words.count {\n    var\
    \ count = countCharactersInString(words[index])\n    if count > maxCount {\n \
    \     maxCount = count\n      maxIndex = index\n    }\n  }\n  if maxIndex != -1\
    \ {\n    return words[maxIndex]\n  }\n  return \"\"", "  // O(n)\n  var word =\
    \ words[0]\n  var count = 1\n  for word in words {\n    if count < word.countByCharactersInString().count\
    \ {\n      word = word\n      count = word.countByCharactersInString().count\n\
    \    }\n  }\n  return word"]
stop_tokens:
- "\n}"
