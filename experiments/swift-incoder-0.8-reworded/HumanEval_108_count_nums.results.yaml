language: swift
name: HumanEval_108_count_nums
results:
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var n = 0\n   \
    \ var prev: Int = 0\n    for x in arr {\n        n += x > 0 ? x - prev : 0\n \
    \       prev = x\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpw83na4cg/tmpw83na4cg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b071b368c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b071b05fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b071b05f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b071b05e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw83na4cg                        0x0000563244fb55f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b071b554460 __libc_start_main +
    245

    6    tmpw83na4cg                        0x0000563244fb50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  var total = 0\n \
    \ for n in arr {\n    if n < 0 {\n      n = -n\n    }\n    total += Int(pow(10,\
    \ floor(log10(n))).ceil())\n  }\n  return total\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7ostvb4z.swift:16:7: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n      n = -n\n      ^\n/tmp/tmp7ostvb4z.swift:18:18: error: cannot\
    \ find 'pow' in scope\n    total += Int(pow(10, floor(log10(n))).ceil())\n   \
    \              ^~~\n/tmp/tmp7ostvb4z.swift:18:26: error: cannot find 'floor' in\
    \ scope\n    total += Int(pow(10, floor(log10(n))).ceil())\n                 \
    \        ^~~~~\n/tmp/tmp7ostvb4z.swift:18:32: error: cannot find 'log10' in scope\n\
    \    total += Int(pow(10, floor(log10(n))).ceil())\n                         \
    \      ^~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let len = arr.count\n\
    \    var sum = 0\n    for i in 0..<len {\n        let sum = arr[i]\n        if\
    \ sum < 0 {\n            sum *= -1\n            sum += arr[i]\n        }\n   \
    \     sum += sum % 10\n        sum += arr[i] % 10\n    }\n    return len + sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1q0hx58j.swift:18:17: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n            sum *= -1\n            ~~~ ^\n\
    /tmp/tmp1q0hx58j.swift:16:9: note: change 'let' to 'var' to make it mutable\n\
    \        let sum = arr[i]\n        ^~~\n        var\n/tmp/tmp1q0hx58j.swift:19:17:\
    \ error: left side of mutating operator isn't mutable: 'sum' is a 'let' constant\n\
    \            sum += arr[i]\n            ~~~ ^\n/tmp/tmp1q0hx58j.swift:16:9: note:\
    \ change 'let' to 'var' to make it mutable\n        let sum = arr[i]\n       \
    \ ^~~\n        var\n/tmp/tmp1q0hx58j.swift:21:13: error: left side of mutating\
    \ operator isn't mutable: 'sum' is a 'let' constant\n        sum += sum % 10\n\
    \        ~~~ ^\n/tmp/tmp1q0hx58j.swift:16:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let sum = arr[i]\n        ^~~\n        var\n/tmp/tmp1q0hx58j.swift:22:13:\
    \ error: left side of mutating operator isn't mutable: 'sum' is a 'let' constant\n\
    \        sum += arr[i] % 10\n        ~~~ ^\n/tmp/tmp1q0hx58j.swift:16:9: note:\
    \ change 'let' to 'var' to make it mutable\n        let sum = arr[i]\n       \
    \ ^~~\n        var\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for el in arr {\n        result += el\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp17blkwdi/tmp17blkwdi.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad110f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad10debb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad10deb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad10dea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17blkwdi                        0x00005586bf8d7510 <unavailable> + 5392

    5    libc.so.6                          0x00002aad112e0460 __libc_start_main +
    245

    6    tmp17blkwdi                        0x00005586bf8d70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // Count first\
    \ negative numbers, they are all sums of positives.\n    var nums: Int = 0\n \
    \   for number in arr {\n        if number < 0 {\n            number -= Int(log10(abs(number)))\
    \ + 1\n        }\n        nums += number\n    }\n    // Reverse the array because\
    \ we want positive numbers.\n    for (_, num) in arr.enumerated() {\n        if\
    \ num < 0 {\n            nums += Int(log10(abs(num))) + 1\n        }\n    }\n\
    \    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprv64nh_x.swift:17:27: error: cannot find 'log10' in scope\n   \
    \         number -= Int(log10(abs(number))) + 1\n                          ^~~~~\n\
    /tmp/tmprv64nh_x.swift:24:25: error: cannot find 'log10' in scope\n          \
    \  nums += Int(log10(abs(num))) + 1\n                        ^~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr == nil ||\
    \ arr.isEmpty {\n        return 0\n    }\n    return arr.filter { sumDigits($0)\
    \ >= 1 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvqj3ve2d.swift:13:12: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if arr == nil || arr.isEmpty\
    \ {\n       ~~~ ^  ~~~\n/tmp/tmpvqj3ve2d.swift:16:25: error: cannot find 'sumDigits'\
    \ in scope\n    return arr.filter { sumDigits($0) >= 1 }.count\n             \
    \           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard !arr.isEmpty,\n\
    \        let firstNum = arr.first,\n        let digits = firstNum.digits\n   \
    \     else {\n            return 0\n    }\n    var count = 1\n    for i in 2..<(digits.count)\
    \ {\n        if digits[i-2] > 0 && digits[i-1] > 0 {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjtp6q6ht.swift:15:31: error: value of type 'Int' has no member\
    \ 'digits'\n        let digits = firstNum.digits\n                     ~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var total = 0\n\
    \    for num in arr {\n        if num >= 0 {\n            total += num\n     \
    \   } else if num < 0 {\n            total -= num\n        }\n    }\n    return\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp53crd02d/tmp53crd02d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2fb88bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2fb582b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2fb582988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2fb5817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53crd02d                        0x000055a137e67510 <unavailable> + 5392

    5    libc.so.6                          0x00002ac2fba77460 __libc_start_main +
    245

    6    tmp53crd02d                        0x000055a137e670d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    \n    // 1. Count\
    \ the number of positive sums.\n    var positiveSumCount: Int = 0\n    for number\
    \ in arr {\n        positiveSumCount += count_nums_helper(number: number, numDigits:\
    \ 0)\n    }\n    \n    // 2. Multiply by 10 until there are no sums left (less\
    \ than 9).\n    var remainingSums: Int = 0\n    while remainingSums < 9 {\n  \
    \      remainingSums += count_nums_helper(number: 10, numDigits: remainingSums)\n\
    \    }\n    \n    // 3. Remove any remaining digits from the sum.\n    var sumDigitCount:\
    \ Int = 0\n    for number in arr {\n        sumDigitCount += count_nums_helper(number:\
    \ number, numDigits: sumDigitCount)\n    }\n    \n    // 4. Return the number\
    \ of remaining digits.\n    return sumDigitCount % 9\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8i2ub232.swift:17:29: error: cannot find 'count_nums_helper' in\
    \ scope\n        positiveSumCount += count_nums_helper(number: number, numDigits:\
    \ 0)\n                            ^~~~~~~~~~~~~~~~~\n/tmp/tmp8i2ub232.swift:23:26:\
    \ error: cannot find 'count_nums_helper' in scope\n        remainingSums += count_nums_helper(number:\
    \ 10, numDigits: remainingSums)\n                         ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmp8i2ub232.swift:29:26: error: cannot find 'count_nums_helper' in scope\n\
    \        sumDigitCount += count_nums_helper(number: number, numDigits: sumDigitCount)\n\
    \                         ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr == nil {\n\
    \        return 0\n    }\n    var count = 0\n    for el in arr {\n        if el\
    \ < 0 {\n            el = -el\n        }\n        if el % 10 == 0 {\n        \
    \    count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe5pr8nr5.swift:13:12: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if arr == nil {\n       ~~~\
    \ ^  ~~~\n/tmp/tmpe5pr8nr5.swift:19:13: error: cannot assign to value: 'el' is\
    \ a 'let' constant\n            el = -el\n            ^~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard let a = arr.first\
    \ else {\n        return 0\n    }\n    let arr = arr.dropFirst()\n    var count\
    \ = 0\n    for elem in arr {\n        let num = elem.truncatingRemainder(dividingBy:\
    \ 10)\n        if num > 0 {\n            count += 1\n        }\n    }\n    return\
    \ count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr9f_fanr.swift:19:24: error: value of type 'Int' has no member\
    \ 'truncatingRemainder'\n        let num = elem.truncatingRemainder(dividingBy:\
    \ 10)\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \n    for n in arr {\n        if n < 0 {\n            n = -n\n        }\n    \
    \    let remainder = n % 10\n        if remainder > 0 {\n            count +=\
    \ 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphoj8h_yh.swift:17:13: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n            n = -n\n            ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums2(&arr,\
    \ arr.len())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpimwf7s0i.swift:13:12: error: cannot find 'count_nums2' in scope\n\
    \    return count_nums2(&arr, arr.len())\n           ^~~~~~~~~~~\n/tmp/tmpimwf7s0i.swift:13:24:\
    \ error: cannot pass immutable value as inout argument: 'arr' is a 'let' constant\n\
    \    return count_nums2(&arr, arr.len())\n                       ^~~~\n/tmp/tmpimwf7s0i.swift:13:34:\
    \ error: value of type '[Int]' has no member 'len'\n    return count_nums2(&arr,\
    \ arr.len())\n                             ~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty\
    \ {\n        return 0\n    }\n    var sum = 0\n    for i in arr {\n        sum\
    \ += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmprn4evrtm/tmprn4evrtm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488a831c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488a528b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488a528988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488a5277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprn4evrtm                        0x00005569a9f47560 <unavailable> + 5472

    5    libc.so.6                          0x00002b488aa1d460 __libc_start_main +
    245

    6    tmprn4evrtm                        0x00005569a9f47129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums3(arr:\
    \ arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpeo89dk4z.swift:13:12: error: cannot find 'count_nums3' in scope\n\
    \    return count_nums3(arr: arr)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr == nil {\n\
    \        return 0\n    }\n    var count = 0\n    for a in arr {\n        let val\
    \ = Int(truncating: a)\n        if val > 0 {\n            count += 1\n       \
    \ }\n        else {\n            val %= 10\n            if val > 0 {\n       \
    \         count += 10\n            }\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2h0d3wbj.swift:13:12: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if arr == nil {\n       ~~~\
    \ ^  ~~~\n/tmp/tmp2h0d3wbj.swift:18:22: error: extraneous argument label 'truncating:'\
    \ in call\n        let val = Int(truncating: a)\n                     ^~~~~~~~~~~~~\n\
    \                      \n"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // write your code\
    \ in an appropriate way\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpd1lifnr5/tmpd1lifnr5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1a1500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1a11f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1a11f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1a11f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd1lifnr5                        0x000055a5b9ab3485 <unavailable> + 5253

    5    libc.so.6                          0x00002ad1a16ec460 __libc_start_main +
    245

    6    tmpd1lifnr5                        0x000055a5b9ab2f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_numsUnsorted(arr)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe7g53dch.swift:13:12: error: cannot find 'count_numsUnsorted' in\
    \ scope\n    return count_numsUnsorted(arr)\n           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    for k in arr.indices\
    \ {\n        if arr[k] >= 0 {\n            sumDigitsHelper(arr[k], 0)\n      \
    \  } else {\n            sumDigitsHelper(-arr[k], 1)\n        }\n    }\n    return\
    \ arr.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpes9kh9cf.swift:15:13: error: cannot find 'sumDigitsHelper' in scope\n\
    \            sumDigitsHelper(arr[k], 0)\n            ^~~~~~~~~~~~~~~\n/tmp/tmpes9kh9cf.swift:17:13:\
    \ error: cannot find 'sumDigitsHelper' in scope\n            sumDigitsHelper(-arr[k],\
    \ 1)\n            ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for i in arr {\n        if i > 0 {\n            sum += i\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp4p7n0na6/tmp4p7n0na6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b117fd7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b117fa74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b117fa74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b117fa737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p7n0na6                        0x000055ba3daf85f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b117ff69460 __libc_start_main +
    245

    6    tmp4p7n0na6                        0x000055ba3daf80d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty()\
    \ {\n        return 0\n    }\n\n    var count = 0\n    for i in arr {\n      \
    \  count += count_digits(i)\n    }\n\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp36z17p6u.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp36z17p6u.swift:19:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(i)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  let sign = arr[0]\n\
    \  let nums = arr.dropFirst()\n  return nums.reduce(0, {$0 + $1 > 0})\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3u_j5xn9.swift:15:34: error: cannot convert value of type 'Bool'\
    \ to closure result type 'Int'\n  return nums.reduce(0, {$0 + $1 > 0})\n     \
    \                    ~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return count_nums2(arr,\
    \ nil)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5_udzl5e.swift:13:10: error: cannot find 'count_nums2' in scope\n\
    \  return count_nums2(arr, nil)\n         ^~~~~~~~~~~\n/tmp/tmp5_udzl5e.swift:13:27:\
    \ error: 'nil' requires a contextual type\n  return count_nums2(arr, nil)\n  \
    \                        ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x < 0 {\n            x -= x\n            count++\n\
    \        }\n        else {\n            let digit = Int(truncating: x / 10)\n\
    \            if digit > 0 {\n                count += 1\n            }\n     \
    \       x %= 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmptzlw64hv.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x -= x\n            ~ ^\n/tmp/tmptzlw64hv.swift:17:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n/tmp/tmptzlw64hv.swift:20:28: error: extraneous\
    \ argument label 'truncating:' in call\n            let digit = Int(truncating:\
    \ x / 10)\n                           ^~~~~~~~~~~~~\n                        \
    \    \n/tmp/tmptzlw64hv.swift:24:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x %= 10\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums_(arr)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpv6dzdurl.swift:13:12: error: cannot find 'count_nums_' in scope\n\
    \    return count_nums_(arr)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums3(arr,\
    \ 0).len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmptu_zkuon.swift:13:12: error: cannot find 'count_nums3' in scope\n\
    \    return count_nums3(arr, 0).len\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let maxDigits =\
    \ max(arr.map({ $0.abs() }))\n    let digits = maxDigits.map({ Int(String($0))\
    \ })\n    let digitSums = digits.map({ Int(String($0)) })\n    let result: Int\n\
    \    if digits.count == 0 {\n        result = 0\n    } else if digits.count ==\
    \ 1 {\n        result = 1\n    } else {\n        result = digitSums.reduce(0)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9agege4p.swift:13:46: error: missing argument for parameter #2\
    \ in call\n    let maxDigits = max(arr.map({ $0.abs() }))\n                  \
    \                           ^\n                                             ,\
    \ <#[_]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public func max<T>(_\
    \ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp9agege4p.swift:13:38:\
    \ error: value of type 'Int' has no member 'abs'\n    let maxDigits = max(arr.map({\
    \ $0.abs() }))\n                                  ~~ ^~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums(arr,\
    \ &arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "error: compile command failed due to signal 6 (use -v to see invocation)\n\
    /tmp/tmpy127r23l.swift:13:28: error: extra argument in call\n    return count_nums(arr,\
    \ &arr)\n                     ~~~~~~^~~~~\nswift-frontend: /home/build-user/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:257:\
    \ const T &llvm::ArrayRef<swift::AnyFunctionType::Param>::operator[](size_t) const\
    \ [T = swift::AnyFunctionType::Param]: Assertion `Index < Length && \"Invalid\
    \ index!\"' failed.\nPlease submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project and the crash backtrace.\nStack dump:\n0.\tProgram arguments:\
    \ /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/bin/swift-frontend\
    \ -frontend -c -primary-file /tmp/tmpy127r23l.swift -target x86_64-unknown-linux-gnu\
    \ -disable-objc-interop -new-driver-path /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/bin/swift-driver\
    \ -empty-abi-descriptor -resource-dir /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/lib/swift\
    \ -module-name tmpy127r23l -o /tmp/TemporaryDirectory.hNJq3h/tmpy127r23l-1.o\n\
    1.\tSwift version 5.8-dev (LLVM 07d14852a049e40, Swift 613b3223d9ec5f6)\n2.\t\
    Compiling with the current language version\n3.\tWhile evaluating request TypeCheckSourceFileRequest(source_file\
    \ \"/tmp/tmpy127r23l.swift\")\n4.\tWhile evaluating request TypeCheckFunctionBodyRequest(tmpy127r23l.(file).count_nums(arr:)@/tmp/tmpy127r23l.swift:12:6)\n\
    5.\tWhile type-checking statement at [/tmp/tmpy127r23l.swift:12:36 - line:14:1]\
    \ RangeText=\"{\n    return count_nums(arr, &arr)\n\"\n6.\tWhile type-checking\
    \ statement at [/tmp/tmpy127r23l.swift:13:5 - line:13:32] RangeText=\"return count_nums(arr,\
    \ &arr\"\n7.\tWhile type-checking expression at [/tmp/tmpy127r23l.swift:13:12\
    \ - line:13:32] RangeText=\"count_nums(arr, &arr\"\n8.\tWhile type-checking-target\
    \ starting at /tmp/tmpy127r23l.swift:13:12\nStack dump without symbol names (ensure\
    \ you have llvm-symbolizer in your PATH or set"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n\tvar i, c : Int\n\t\
    c = 1\n\tfor i in arr {\n\t\tif i >= 0 {\n\t\t\tc *= i\n\t\t} else {\n\t\t\tc\
    \ /= abs(i)\n\t\t}\n\t}\n\treturn c\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpc91a6ugb/tmpc91a6ugb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b5bf56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b5bc4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b5bc4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b5bc4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc91a6ugb                        0x00005567c2ee85cb <unavailable> + 5579

    5    libc.so.6                          0x00002b3b5c142460 __libc_start_main +
    245

    6    tmpc91a6ugb                        0x00005567c2ee8259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter(nums).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp58baine5.swift:13:23: error: cannot find 'nums' in scope\n    return\
    \ arr.filter(nums).count\n                      ^~~~\n/tmp/tmp58baine5.swift:13:23:\
    \ error: converting non-escaping value to '(Int) throws -> Bool' may allow it\
    \ to escape\n    return arr.filter(nums).count\n                      ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let counting =\
    \ count_nums(arr: arr, sum: 0)\n    return arr.isEmpty\n        ? 0 : counting.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyqd175z6.swift:13:46: error: extra argument 'sum' in call\n   \
    \ let counting = count_nums(arr: arr, sum: 0)\n                             ~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return sum(arr)\
    \ - count_nums(arr: arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqy38ccdn.swift:13:12: error: cannot find 'sum' in scope\n    return\
    \ sum(arr) - count_nums(arr: arr)\n           ^~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty()\
    \ {\n        return 0\n    }\n    let nums = arr.map(count_digits)\n    return\
    \ count_nums_helper(nums)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpwzsgb7ry.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpwzsgb7ry.swift:16:24: error: cannot find 'count_digits' in scope\n\
    \    let nums = arr.map(count_digits)\n                       ^~~~~~~~~~~~\n/tmp/tmpwzsgb7ry.swift:16:16:\
    \ error: generic parameter 'T' could not be inferred\n    let nums = arr.map(count_digits)\n\
    \               ^\nSwift.Collection:2:28: note: in call to function 'map'\n  \
    \  @inlinable public func map<T>(_ transform: (Self.Element) throws -> T) rethrows\
    \ -> [T]\n                           ^\n/tmp/tmpwzsgb7ry.swift:16:24: error: converting\
    \ non-escaping value to '(Int) throws -> T' may allow it to escape\n    let nums\
    \ = arr.map(count_digits)\n                       ^\n/tmp/tmpwzsgb7ry.swift:17:12:\
    \ error: cannot find 'count_nums_helper' in scope\n    return count_nums_helper(nums)\n\
    \           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  var n = 0\n  for\
    \ value in arr {\n    let digit = value\n    if (digit < 0 || digit > 9) {\n \
    \     break\n    }\n    n += digit < 0 ? -digit : digit\n  }\n  return n\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpak_pit69/tmpak_pit69.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94d169bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94d1392b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94d1392988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94d13917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpak_pit69                        0x000055a1dbb725f5 <unavailable> + 5621

    5    libc.so.6                          0x00002b94d1887460 __libc_start_main +
    245

    6    tmpak_pit69                        0x000055a1dbb720d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        let digit = numDigit(x)\n        if digit > 0 {\n\
    \            sum += digit\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp65iq1cnl.swift:15:21: error: cannot find 'numDigit' in scope\n\
    \        let digit = numDigit(x)\n                    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for i in arr {\n        if i != 0 {\n            sum += i\n        }\n   \
    \ }\n    if sum > 0 {\n        return sum\n    }\n    var sum = 0\n    for i in\
    \ arr {\n        if i < 0 {\n            sum += abs(i)\n        } else {\n   \
    \         sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp34ni6ikf.swift:22:9: error: invalid redeclaration of 'sum'\n  \
    \  var sum = 0\n        ^\n/tmp/tmp34ni6ikf.swift:13:9: note: 'sum' previously\
    \ declared here\n    var sum = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ >= 1, arr.count <= 9 else { return 0 }\n    var result = 0\n    var carry =\
    \ 0\n    for num in arr {\n        let digit = num & (1 << 31) - 1 // get sign\
    \ bit\n        if digit > 0 {\n            result += digit\n        } else {\n\
    \            carry += 1\n            result -= digit\n        }\n    }\n    guard\
    \ carry > 0 else { return 0 }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpotmmvjxf/tmpotmmvjxf.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b971d444c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b971d13bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b971d13b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b971d13a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotmmvjxf                        0x0000558a5db0e560 <unavailable> + 5472

    5    libc.so.6                          0x00002b971d630460 __libc_start_main +
    245

    6    tmpotmmvjxf                        0x0000558a5db0e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums(arr,\
    \ 0) // call itself again to remove leading zeroes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnyh8kz9s.swift:13:28: error: extra argument in call\n    return\
    \ count_nums(arr, 0) // call itself again to remove leading zeroes\n         \
    \            ~~~~~~^~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  var sum = 0\n  for\
    \ n in arr {\n    if n >= 0 {\n      sum += digits(n)\n    }\n  }\n  return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpl11nm33i.swift:16:14: error: cannot find 'digits' in scope\n  \
    \    sum += digits(n)\n             ^~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.count ==\
    \ 0 {\n        return 0\n    }\n    var count = 0\n    var sum = 0\n    for n\
    \ in arr {\n        sum += n\n        if sum > 0 {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp2v3o85vv/tmp2v3o85vv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3562642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3562339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3562339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35623387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2v3o85vv                        0x000055a9079f0645 <unavailable> + 5701

    5    libc.so.6                          0x00002b356282e460 __libc_start_main +
    245

    6    tmp2v3o85vv                        0x000055a9079f0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count : Int\
    \ = 0\n    for x in arr {\n        if x != 0 && is_positive_sum(&x) {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_018sxgr.swift:15:22: error: cannot find 'is_positive_sum' in scope\n\
    \        if x != 0 && is_positive_sum(&x) {\n                     ^~~~~~~~~~~~~~~\n\
    /tmp/tmp_018sxgr.swift:15:38: error: cannot pass immutable value as inout argument:\
    \ 'x' is a 'let' constant\n        if x != 0 && is_positive_sum(&x) {\n      \
    \                               ^~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let s = arr.reduce(0)\
    \ { $0 + $1 }\n    return Int(log2(abs(s))) + 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2j6ge7fl.swift:14:16: error: cannot find 'log2' in scope\n    return\
    \ Int(log2(abs(s))) + 1\n               ^~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums_helper(arr,\
    \ &sums_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpu4o_3j4i.swift:13:12: error: cannot find 'count_nums_helper' in\
    \ scope\n    return count_nums_helper(arr, &sums_arr)\n           ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu4o_3j4i.swift:13:36: error: cannot find 'sums_arr' in scope\n    return\
    \ count_nums_helper(arr, &sums_arr)\n                                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // Initialize variables\n\
    \    var n: Int = 0\n    var s: Int = 0\n    var i: Int = 0\n    var digit: Int\
    \ = 0\n    var count: Int = 0\n\n    // Get number of elements which has a sum\
    \ of digits > 0 and start looping\n    for i in arr {\n        n += i\n    }\n\
    \    for i = n; i > 0; i-- {\n        digit = i % 10\n        if digit > 0 {\n\
    \            s += digit\n        } else {\n            count = i\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdaxxfq16.swift:24:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = n; i > 0; i-- {\n    ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ >= 1 else {\n        return 0\n    }\n\n    var nums = 0\n\n    for n in arr\
    \ {\n        guard n > 0 else {\n            return nums\n        }\n\n      \
    \  if n < 10 {\n            nums += 1\n        } else {\n            for d in\
    \ n.reverse() {\n                if d < 0 {\n                    break\n     \
    \           }\n            }\n\n            if d < 0 {\n                nums +=\
    \ d + 1\n            } else {\n                nums += d\n            }\n    \
    \    }\n    }\n\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpkzw8n51x.swift:27:24: error: value of type 'Int' has no member\
    \ 'reverse'\n            for d in n.reverse() {\n                     ~ ^~~~~~~\n\
    /tmp/tmpkzw8n51x.swift:33:16: error: cannot find 'd' in scope\n            if\
    \ d < 0 {\n               ^\n/tmp/tmpkzw8n51x.swift:34:25: error: cannot find\
    \ 'd' in scope\n                nums += d + 1\n                        ^\n/tmp/tmpkzw8n51x.swift:36:25:\
    \ error: cannot find 'd' in scope\n                nums += d\n               \
    \         ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // base case\n\
    \    if arr.isEmpty {\n        return 0\n    }\n    var num_positives = count_positives(arr:\
    \ arr) + count_positives(arr: arr[1...])\n    for val in arr[2...] {\n       \
    \ if val > 0 {\n            num_positives += count_positives(arr: [val])\n   \
    \     }\n    }\n    return num_positives\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpiipvqhl3.swift:17:25: error: cannot find 'count_positives' in scope\n\
    \    var num_positives = count_positives(arr: arr) + count_positives(arr: arr[1...])\n\
    \                        ^~~~~~~~~~~~~~~\n/tmp/tmpiipvqhl3.swift:17:53: error:\
    \ cannot find 'count_positives' in scope\n    var num_positives = count_positives(arr:\
    \ arr) + count_positives(arr: arr[1...])\n                                   \
    \                 ^~~~~~~~~~~~~~~\n/tmp/tmpiipvqhl3.swift:20:30: error: cannot\
    \ find 'count_positives' in scope\n            num_positives += count_positives(arr:\
    \ [val])\n                             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty\
    \ {\n        return 0\n    }\n\n    let mut total = 0\n\n    for elt in arr {\n\
    \        total += abs(elt)\n    }\n\n    return total\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqxe8kxj_.swift:17:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut total =\
    \ 0\n            ^\n/tmp/tmpqxe8kxj_.swift:17:13: note: join the identifiers together\n\
    \    let mut total = 0\n        ~~~~^~~~~\n        muttotal\n/tmp/tmpqxe8kxj_.swift:17:13:\
    \ note: join the identifiers together with camel-case\n    let mut total = 0\n\
    \        ~~~~^~~~~\n        mutTotal\n/tmp/tmpqxe8kxj_.swift:20:9: error: cannot\
    \ find 'total' in scope\n        total += abs(elt)\n        ^~~~~\n/tmp/tmpqxe8kxj_.swift:23:12:\
    \ error: cannot find 'total' in scope\n    return total\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let len = arr.count\n\
    \    \n    if arr.contains(0) {\n        return 0\n    }\n    \n    var sum =\
    \ 0\n    var sum2 = 0\n    \n    for i in 0 ..< len {\n        sum += arr[i] %\
    \ 10\n        sum2 += arr[i] / 10\n    }\n    \n    return len - sum - sum2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpcw2l127e/tmpcw2l127e.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56640b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5663da7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5663da7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5663da67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcw2l127e                        0x0000556f1717a725 <unavailable> + 5925

    5    libc.so.6                          0x00002b566429c460 __libc_start_main +
    245

    6    tmpcw2l127e                        0x0000556f1717a209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let size = count_digits(arr)\n\
    \    guard arr.count == size else { return 0 }\n    var digitSum = 0\n    for\
    \ i in 0..<size {\n        let d = (arr[i] - '0') % 10\n        digitSum += d\n\
    \    }\n    if digitSum > 0 {\n        return digitSum\n    }\n    if sign ==\
    \ false {\n        return 0\n    }\n    if digitSum < 0 {\n        for i in 0..<size\
    \ {\n            let d = (arr[i] - '0') % 10\n            digitSum += d\n    \
    \    }\n        return digitSum * -1\n    }\n    return digitSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpsf5y239o.swift:17:27: error: single-quoted string literal found,\
    \ use '\"'\n        let d = (arr[i] - '0') % 10\n                          ^~~\n\
    \                          \"0\"\n/tmp/tmpsf5y239o.swift:28:31: error: single-quoted\
    \ string literal found, use '\"'\n            let d = (arr[i] - '0') % 10\n  \
    \                            ^~~\n                              \"0\"\n/tmp/tmpsf5y239o.swift:13:16:\
    \ error: cannot find 'count_digits' in scope\n    let size = count_digits(arr)\n\
    \               ^~~~~~~~~~~~\n/tmp/tmpsf5y239o.swift:23:8: error: cannot find\
    \ 'sign' in scope\n    if sign == false {\n       ^~~~\n/tmp/tmpsf5y239o.swift:17:27:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \        let d = (arr[i] - '0') % 10\n                          ^\n/tmp/tmpsf5y239o.swift:28:31:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \            let d = (arr[i] - '0') % 10\n                              ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // TODO: add an\
    \ efficient implementation to count_nums\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpfvvq9uja/tmpfvvq9uja.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9eb94e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eb91ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9eb91dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9eb91dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfvvq9uja                        0x000055556928c485 <unavailable> + 5253

    5    libc.so.6                          0x00002b9eb96d2460 __libc_start_main +
    245

    6    tmpfvvq9uja                        0x000055556928bf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        count = count + count_digits(num)\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdk2gm9w3.swift:15:25: error: cannot find 'count_digits' in scope\n\
    \        count = count + count_digits(num)\n                        ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num < 0 {\n            num = -num\n        }\n\
    \        if num == 0 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_8s2a7qx.swift:16:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    \n    let sum =\
    \ 0\n    var i = 0\n    var sum1 = 0\n    \n    while i < arr.count {\n      \
    \  if arr[i] > 0 {\n            sum += arr[i]\n            sum1 = sum1 + arr[i]\n\
    \        }\n        i += 1\n    }\n    \n    if sum == 0 {\n        return 0\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpv6jagnq_.swift:20:17: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n            sum += arr[i]\n            ~~~\
    \ ^\n/tmp/tmpv6jagnq_.swift:14:5: note: change 'let' to 'var' to make it mutable\n\
    \    let sum = 0\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \n    for x in arr {\n        if x > 0  {\n            count += 1\n          \
    \  if x % 10 == 0 {\n                count += x\n            }\n        } else\
    \ if x < 0 {\n            count += count_nums(arr.prefix(1).filter { $0 > 0 })\n\
    \        } else {\n            count += count_nums(arr.suffix(1).filter { $0 >\
    \ 0 })\n        }\n    }\n\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp5bmhkxc.swift:22:33: error: missing argument label 'arr:' in call\n\
    \            count += count_nums(arr.prefix(1).filter { $0 > 0 })\n          \
    \                      ^\n                                arr: \n/tmp/tmpp5bmhkxc.swift:24:33:\
    \ error: missing argument label 'arr:' in call\n            count += count_nums(arr.suffix(1).filter\
    \ { $0 > 0 })\n                                ^\n                           \
    \     arr: \n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result : Int\
    \ = 0\n    for i in arr {\n        result += countNums(i)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzrxlkvs1.swift:15:19: error: cannot find 'countNums' in scope\n\
    \        result += countNums(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard let arr =\
    \ arr.map(Int.init) else {\n        return 0;\n    }\n    var cnt: Int = 0;\n\
    \    for n in arr {\n        if n > 0 {\n            cnt += 1;\n        }\n  \
    \      cnt += (n + n / 10 + (n % 10 > 0 ? 1 : 0));\n    }\n    return cnt;\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxe_eio3s.swift:13:29: error: ambiguous use of 'init'\n    guard\
    \ let arr = arr.map(Int.init) else {\n                            ^\nSwift.ExpressibleByIntegerLiteral:2:12:\
    \ note: found this candidate\n    public init(integerLiteral value: Self)\n  \
    \         ^\nSwift.SignedInteger:3:23: note: found this candidate\n    @inlinable\
    \ public init?<T>(exactly source: T) where T : BinaryInteger\n               \
    \       ^\nSwift.SignedInteger:2:23: note: found this candidate\n    @inlinable\
    \ public init<T>(_ source: T) where T : BinaryInteger\n                      ^\n\
    Swift.FixedWidthInteger:6:23: note: found this candidate\n    @inlinable public\
    \ init<T>(truncatingIfNeeded source: T) where T : BinaryInteger\n            \
    \          ^\nSwift.FixedWidthInteger:5:23: note: found this candidate\n    @inlinable\
    \ public init<Other>(clamping source: Other) where Other : BinaryInteger\n   \
    \                   ^\nSwift.FixedWidthInteger:5:23: note: found this candidate\n\
    \    @inlinable public init(bigEndian value: Self)\n                      ^\n\
    Swift.FixedWidthInteger:4:23: note: found this candidate\n    @inlinable public\
    \ init(littleEndian value: Self)\n                      ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    \n    var count\
    \ = 1\n    for x in arr {\n        if x < 0 {\n            x = -x\n        }\n\
    \        \n        if x % 10 == 0 {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcy1trhq9.swift:17:13: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n            x = -x\n            ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr == nil {\n\
    \        return 0\n    }\n    if arr.isEmpty() {\n        return 0\n    }\n\n\
    \    var count = 0\n    for val in arr {\n        if val < 0 {\n            if\
    \ count > 0 {\n                count -= 1\n            }\n            val = -val\n\
    \        }\n        if val > 9 {\n            count += val / 9\n        }\n  \
    \      else {\n            count += val % 9\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmps1azpkqb.swift:13:12: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if arr == nil {\n       ~~~\
    \ ^  ~~~\n/tmp/tmps1azpkqb.swift:16:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmps1azpkqb.swift:26:13: error: cannot assign to value: 'val' is a 'let'\
    \ constant\n            val = -val\n            ^~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var acc: Int =\
    \ 0\n    for i in arr {\n        acc += Int(i)\n    }\n    return acc\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpg3d5u6id/tmpg3d5u6id.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3513069c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3512d60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3512d60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3512d5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg3d5u6id                        0x0000562f09f83650 <unavailable> + 5712

    5    libc.so.6                          0x00002b3513255460 __libc_start_main +
    245

    6    tmpg3d5u6id                        0x0000562f09f83219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   var cnt = 0\n\n    for v in arr {\n        if v < 0 {\n            v = -v\n\
    \        }\n        sum += v\n        if sum < 10 {\n            cnt += 1\n  \
    \      }\n    }\n    return cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp38ii8ssx.swift:18:13: error: cannot assign to value: 'v' is a 'let'\
    \ constant\n            v = -v\n            ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for n in arr {\n        if n > 0 {\n            count += 1\n            n\
    \ /= 10\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxdo72vwy.swift:17:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 10\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  var i = 0\n  var\
    \ sign = 1\n  var sum = 0\n  for n in arr {\n    sum += sign * n\n    if sum >\
    \ 0 {\n      i += 1\n    }\n    sign = -sign\n  }\n  return i\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp5ouxutad/tmp5ouxutad.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0068b8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0068881b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0068881988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00688807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ouxutad                        0x0000564aa30fc510 <unavailable> + 5392

    5    libc.so.6                          0x00002b0068d76460 __libc_start_main +
    245

    6    tmp5ouxutad                        0x0000564aa30fc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard let n = arr.count\
    \ else {\n        return 0\n    }\n    var sum = 0\n    var start = 0\n    var\
    \ i = n - 1\n    var j = n - 1\n    while i >= 0 {\n        sum += arr[i]\n  \
    \      if sum < 0 {\n            if sum == 0 {\n                return sum\n \
    \           }\n            start = i + 1\n            sum = -sum\n        } else\
    \ {\n            start = i + 1\n        }\n        i -= 1\n    }\n    sum = -sum\n\
    \    var count = 0\n    for _ in 0 ..< j {\n        count += count_nums(arr: arr[..<start])\
    \ + count_nums(arr: arr[start..<j])\n        j -= 1\n    }\n    return count +\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzk48lzgc.swift:13:11: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n    guard let n = arr.count else {\n   \
    \       ^       ~~~~~~~~~\n/tmp/tmpzk48lzgc.swift:36:37: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n        count\
    \ += count_nums(arr: arr[..<start]) + count_nums(arr: arr[start..<j])\n      \
    \                              ^\n/tmp/tmpzk48lzgc.swift:36:70: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \        count += count_nums(arr: arr[..<start]) + count_nums(arr: arr[start..<j])\n\
    \                                                                     ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  let sum = arr.reduce(0,\
    \ *)\n  return arr.count { num in num >= 0 && (num % sum) == 0 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpwegz8lvx.swift:14:14: error: cannot call value of non-function\
    \ type 'Int'\n  return arr.count { num in num >= 0 && (num % sum) == 0 }\n   \
    \          ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \n    for number in arr {\n        if number > 0 {\n            count++\n    \
    \    }\n    }\n\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfjtpy0mp.swift:17:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            count++\n                 ^~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let count = (arr[0]\
    \ ~/ 10).reduce(0) { $0 + $1.times(10).bitCountBits() + $2 }\n    if count > 0\
    \ {\n        count += count_nums(arr[1..<arr.count])\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ke8e136.swift:13:25: error: cannot find operator '~/' in scope\n\
    \    let count = (arr[0] ~/ 10).reduce(0) { $0 + $1.times(10).bitCountBits() +\
    \ $2 }\n                        ^~\n/tmp/tmp5ke8e136.swift:15:29: error: missing\
    \ argument label 'arr:' in call\n        count += count_nums(arr[1..<arr.count])\n\
    \                            ^\n                            arr: \n/tmp/tmp5ke8e136.swift:15:32:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n        count += count_nums(arr[1..<arr.count])\n                 \
    \              ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum_count =\
    \ 0\n    for num in arr {\n        let digit = Int(num / 10)\n        if digit\
    \ > 0 {\n            sum_count += 1\n        } else {\n            sum_count +=\
    \ digit * -1\n        }\n    }\n    return sum_count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpr3auxon6/tmpr3auxon6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3fd2eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3fcfe1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3fcfe1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3fcfe07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3auxon6                        0x000055c695a6d7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ad3fd4d6460 __libc_start_main +
    245

    6    tmpr3auxon6                        0x000055c695a6d2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var total = 0\n\
    \    for num in arr {\n        total += num\n    }\n    return total\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpanwttpy8/tmpanwttpy8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea4a5bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea4a2b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea4a2b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea4a2b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanwttpy8                        0x000055acda946510 <unavailable> + 5392

    5    libc.so.6                          0x00002aea4a7a6460 __libc_start_main +
    245

    6    tmpanwttpy8                        0x000055acda9460d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr != nil\
    \ else { return 0 }\n    var n = 0\n    for i in arr {\n        n = n * 10 + Int(abs(i))\n\
    \    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpcnmk3clx/tmpcnmk3clx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9527b5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9527853b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9527853988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95278527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcnmk3clx                        0x000055b4932c8730 <unavailable> + 5936

    5    libc.so.6                          0x00002b9527d48460 __libc_start_main +
    245

    6    tmpcnmk3clx                        0x000055b4932c82f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let n = arr.count\n\
    \    let arr2 = arr.map { $0 }\n    var count = 0\n    var sum = 0\n    for i\
    \ in 0..<n {\n        sum += arr2[i]\n        if sum > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpfz4i9fjn/tmpfz4i9fjn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96d04f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96d01f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96d01f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96d01ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfz4i9fjn                        0x0000562a96c7a765 <unavailable> + 5989

    5    libc.so.6                          0x00002b96d06e5460 __libc_start_main +
    245

    6    tmpfz4i9fjn                        0x0000562a96c7a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var nums = Set([Int]())\n\
    \    for num in arr {\n        nums.insert(num)\n    }\n    return nums.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpjqw5oiju/tmpjqw5oiju.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25b136dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25b1064b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25b1064988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25b10637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjqw5oiju                        0x00005563ce2ae6d0 <unavailable> + 5840

    5    libc.so.6                          0x00002b25b1559460 __libc_start_main +
    245

    6    tmpjqw5oiju                        0x00005563ce2ae299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for v in arr {\n        if v < 0 {\n            v = v * -1\n        }\n \
    \       for d in 0..<v {\n            if v % 10 == 0 {\n                count\
    \ += 1\n            }\n            v /= 10\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppu1qzzgq.swift:16:13: error: cannot assign to value: 'v' is a 'let'\
    \ constant\n            v = v * -1\n            ^\n/tmp/tmppu1qzzgq.swift:22:15:\
    \ error: left side of mutating operator isn't mutable: 'v' is a 'let' constant\n\
    \            v /= 10\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty()\
    \ {\n        return 0\n    }\n    var count = 0\n    for num in arr {\n      \
    \  if num < 0 {\n            num = -num\n        }\n        let digits = String(num,\
    \ radix: 10)\n        if digits.isPadded() && digits.count > 0 && digits.count\
    \ <= maxDigits {\n            if digits.dropFirst().isPadded() {\n           \
    \     if digits.dropFirst().prefix(digits.count - 1).isPadded() {\n          \
    \          count += digits.dropFirst().prefix(digits.count - 1).count\n      \
    \          } else {\n                    count += 1\n                }\n     \
    \       } else {\n                count += 1\n            }\n        } else {\n\
    \            count += digits.count\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpiwsm_yhp.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpiwsm_yhp.swift:19:13: error: cannot assign to value: 'num' is a 'let'\
    \ constant\n            num = -num\n            ^~~\n/tmp/tmpiwsm_yhp.swift:22:69:\
    \ error: cannot find 'maxDigits' in scope\n        if digits.isPadded() && digits.count\
    \ > 0 && digits.count <= maxDigits {\n                                       \
    \                             ^~~~~~~~~\n/tmp/tmpiwsm_yhp.swift:22:19: error:\
    \ value of type 'String' has no member 'isPadded'\n        if digits.isPadded()\
    \ && digits.count > 0 && digits.count <= maxDigits {\n           ~~~~~~ ^~~~~~~~\n\
    /tmp/tmpiwsm_yhp.swift:23:35: error: reference to member 'isPadded' cannot be\
    \ resolved without a contextual type\n            if digits.dropFirst().isPadded()\
    \ {\n                                  ^\n/tmp/tmpiwsm_yhp.swift:24:64: error:\
    \ reference to member 'isPadded' cannot be resolved without a contextual type\n\
    \                if digits.dropFirst().prefix(digits.count - 1).isPadded() {\n\
    \                                                               ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // Count number\
    \ of negative integers first\n    let n = count_nums(arr: arr, neg: true)\n  \
    \  if n == 0 {\n        return n\n    }\n\n    // Count digits in all positive\
    \ numbers\n    var count = 0\n    for x in arr {\n        if x >= 0 {\n      \
    \      count += count_digits(x)\n        }\n    }\n\n    // Multiply by 10 and\
    \ add digit counts\n    return n * 10 + count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnjmw_ze9.swift:14:39: error: extra argument 'neg' in call\n   \
    \ let n = count_nums(arr: arr, neg: true)\n                      ~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpnjmw_ze9.swift:23:22: error: cannot find 'count_digits' in scope\n   \
    \         count += count_digits(x)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 1\n\
    \    for val in arr {\n        // If number is negative, get its first digit and\
    \ add to total\n        if val < 0 {\n            let digit = abs(val)\n     \
    \       count *= digit > 0 ? digits.leadingZeros(digit) : 0\n        } else {\n\
    \            count *= val > 0 ? digits.leadingZeros(val) : 0\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvbw_22co.swift:18:34: error: cannot find 'digits' in scope\n  \
    \          count *= digit > 0 ? digits.leadingZeros(digit) : 0\n             \
    \                    ^~~~~~\n/tmp/tmpvbw_22co.swift:20:32: error: cannot find\
    \ 'digits' in scope\n            count *= val > 0 ? digits.leadingZeros(val) :\
    \ 0\n                               ^~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var ans = Int()\n\
    \    for x in arr {\n        ans += Int(abs(x))\n    }\n    return ans\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpqusjjoqa/tmpqusjjoqa.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af89e4bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af89e1b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af89e1b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af89e1b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqusjjoqa                        0x000056217a754730 <unavailable> + 5936

    5    libc.so.6                          0x00002af89e6ab460 __libc_start_main +
    245

    6    tmpqusjjoqa                        0x000056217a7542f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard let first\
    \ = arr.first else { return 0 }\n    var i = 0\n    var count = 1\n    while i\
    \ < arr.count {\n        if let digit = arr[i] {\n            if digit >= 0 {\n\
    \                if digit < first {\n                    count = -count\n    \
    \            }\n            } else {\n                if digit > first {\n   \
    \                 count = -count\n                }\n            }\n         \
    \   i += 1\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6kjjq9ot.swift:17:12: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n        if let digit = arr[i] {\n      \
    \     ^           ~~~~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for _ in arr {\n        if let n = Int(floor(_ / (10 ** Int(bitWidth - 1)))))\
    \ {\n            count = count + 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6wm2_zia.swift:15:61: error: expected '{' after 'if' condition\n\
    \        if let n = Int(floor(_ / (10 ** Int(bitWidth - 1))))) {\n           \
    \                                                 ^\n/tmp/tmp6wm2_zia.swift:15:24:\
    \ error: cannot find 'floor' in scope\n        if let n = Int(floor(_ / (10 **\
    \ Int(bitWidth - 1))))) {\n                       ^~~~~\n/tmp/tmp6wm2_zia.swift:15:38:\
    \ error: cannot find operator '**' in scope\n        if let n = Int(floor(_ /\
    \ (10 ** Int(bitWidth - 1))))) {\n                                     ^~\n/tmp/tmp6wm2_zia.swift:15:45:\
    \ error: cannot find 'bitWidth' in scope\n        if let n = Int(floor(_ / (10\
    \ ** Int(bitWidth - 1))))) {\n                                            ^~~~~~~~\n\
    /tmp/tmp6wm2_zia.swift:15:30: error: '_' can only appear in a pattern or on the\
    \ left side of an assignment\n        if let n = Int(floor(_ / (10 ** Int(bitWidth\
    \ - 1))))) {\n                             ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count : Int\
    \ = 0\n    var sign = 0\n    for i in arr {\n        if i < 0 {\n            if\
    \ sign != 0 {\n                sign = 0\n                count++\n           \
    \ }\n            sign = i + 1\n        } else {\n            if sign == 0 {\n\
    \                sign = i + 1\n                count++\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpur4pdfiw.swift:19:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                count++\n                     ^~\n/tmp/tmpur4pdfiw.swift:25:22:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      count++\n                     ^~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ >= 0 else {\n        return 0\n    }\n\n    var sum = 0\n    for n in arr {\n\
    \        if n > 0 {\n            sum += Int(n) % 10\n        }\n    }\n\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpgipe0ed9/tmpgipe0ed9.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac073b2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac073821b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac073821988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0738207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgipe0ed9                        0x0000556915c83815 <unavailable> + 6165

    5    libc.so.6                          0x00002ac073d16460 __libc_start_main +
    245

    6    tmpgipe0ed9                        0x0000556915c832f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for n in arr {\n        if n > 0 {\n            sum += Int(n)\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpuzh10e2m/tmpuzh10e2m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b478e15bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b478de52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b478de52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b478de517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuzh10e2m                        0x000055fd551af735 <unavailable> + 5941

    5    libc.so.6                          0x00002b478e347460 __libc_start_main +
    245

    6    tmpuzh10e2m                        0x000055fd551af219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var total = 0\n\
    \    for x in arr {\n        if x > 0{\n            if x > 9 {\n             \
    \   total += x - 10\n            } else {\n                total += x\n      \
    \      }\n        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpkjc5n934/tmpkjc5n934.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae80dd0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae80da05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae80da05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae80da047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkjc5n934                        0x00005640b9aff5f5 <unavailable> + 5621

    5    libc.so.6                          0x00002ae80defa460 __libc_start_main +
    245

    6    tmpkjc5n934                        0x00005640b9aff0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty\
    \ { return 0 }\n    var sum = 0\n    for i in arr {\n        sum += abs(i)\n \
    \   }\n    if sum < 0 {\n        sum = sum + sign(sum)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp55yx6zul.swift:19:21: error: cannot find 'sign' in scope\n    \
    \    sum = sum + sign(sum)\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  var count = 0\n \
    \ arr.forEach { num in if num >= 0 {\n      count += 1\n    } else {\n      num\
    \ *= -1\n    }\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppby6e9jv.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n      num *= -1\n      ~~~ ^\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    var curSum = 0\n    for cur in arr {\n        curSum += cur\n        count\
    \ += int(curSum > 0)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppnq3ssv1.swift:17:18: error: cannot find 'int' in scope\n     \
    \   count += int(curSum > 0)\n                 ^~~\n"
  stdout: ''
  timestamp: 1660013496
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter{\
    \ $0 > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpybx563zl/tmpybx563zl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bb08f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bb05e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bb05e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bb05e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpybx563zl                        0x00005562a4d6687a <unavailable> + 6266

    5    libc.so.6                          0x00002b4bb0ade460 __libc_start_main +
    245

    6    tmpybx563zl                        0x00005562a4d66089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for n in arr {\n        if n > 0 {\n            count += 1\n        }\n \
    \       for d in n%10...0 {\n            if n == 0 {\n                return count\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8e7bcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8e78c4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac8e78c4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac8e78c413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac8e78c3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3a3vr7rg                        0x0000560d16ff2ec9 <unavailable> + 7881

    6    tmp3a3vr7rg                        0x0000560d16ff2707 <unavailable> + 5895

    7    libc.so.6                          0x00002ac8e7db9460 __libc_start_main +
    245

    8    tmp3a3vr7rg                        0x0000560d16ff2269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for v in arr {\n        if v < 0 {\n            result--\n        }\n   \
    \     result = result * 10 + v\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpydxp200v.swift:16:19: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n            result--\n                  ^~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var zeros = Set<Int>()\n\
    \    var counts = Set<Int>()\n    for val in arr {\n        if val < 0 {\n   \
    \         val = -val\n        }\n        let digit = val / 10\n        if let\
    \ _ = zeros.remove(&digit) {\n            counts[digit] += 1\n        } else {\n\
    \            zeros.insert(digit)\n        }\n    }\n    return counts.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp25aola1c.swift:17:13: error: cannot assign to value: 'val' is a\
    \ 'let' constant\n            val = -val\n            ^~~\n/tmp/tmp25aola1c.swift:20:33:\
    \ error: '&' used with non-inout argument of type 'Int'\n        if let _ = zeros.remove(&digit)\
    \ {\n                                ^~~~~~\n                                \n\
    /tmp/tmp25aola1c.swift:20:33: error: cannot pass immutable value as inout argument:\
    \ 'digit' is a 'let' constant\n        if let _ = zeros.remove(&digit) {\n   \
    \                             ^~~~~~\n/tmp/tmp25aola1c.swift:19:9: note: change\
    \ 'let' to 'var' to make it mutable\n        let digit = val / 10\n        ^~~\n\
    \        var\n/tmp/tmp25aola1c.swift:21:20: error: cannot convert value of type\
    \ 'Int' to expected argument type 'Set<Int>.Index'\n            counts[digit]\
    \ += 1\n                   ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else { return 0 }\n    \n    var sum = 0 \n    var i = 0\n    var sumOfDigits\
    \ = 0\n    while i < arr.count {\n        let num = arr[i]\n        if num < 0\
    \ {\n            sumOfDigits += Int(-num)\n        } else {\n            sum +=\
    \ num\n            sumOfDigits += Int(num)\n        }\n        i += 1\n    }\n\
    \    \n    if sumOfDigits == 0 {\n        return sum\n    } else {\n        return\
    \ sum / Int(pow(2, Int(bitCountOne(sumOfDigits))))\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpoyfctgxd.swift:32:26: error: cannot find 'pow' in scope\n     \
    \   return sum / Int(pow(2, Int(bitCountOne(sumOfDigits))))\n                \
    \         ^~~\n/tmp/tmpoyfctgxd.swift:32:37: error: cannot find 'bitCountOne'\
    \ in scope\n        return sum / Int(pow(2, Int(bitCountOne(sumOfDigits))))\n\
    \                                    ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var counter: Int\
    \ = 0\n    for x in arr {\n        guard x > 0 else { continue }\n        let\
    \ remain = divMod(x, 10)\n        counter = counter * 10 + remain\n    }\n   \
    \ return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvo09ts9r.swift:16:22: error: cannot find 'divMod' in scope\n  \
    \      let remain = divMod(x, 10)\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var cnt = 0\n \
    \   for el in arr {\n        if el < 0 {\n            el *= -1\n        }\n  \
    \      if el < 10 { // avoid `arr[0]` which may have 0 sum\n            cnt +=\
    \ 1\n        }\n        cnt += int(el / 10)\n        el %= 10\n    }\n    return\
    \ cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpkihn1elq.swift:16:16: error: left side of mutating operator isn't\
    \ mutable: 'el' is a 'let' constant\n            el *= -1\n            ~~ ^\n\
    /tmp/tmpkihn1elq.swift:21:16: error: cannot find 'int' in scope\n        cnt +=\
    \ int(el / 10)\n               ^~~\n/tmp/tmpkihn1elq.swift:22:12: error: left\
    \ side of mutating operator isn't mutable: 'el' is a 'let' constant\n        el\
    \ %= 10\n        ~~ ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for a in arr {\n        if a < 0 {\n            result = result - a % 10\
    \ + a / 10\n        } else {\n            result += a\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp39k9bse5/tmp39k9bse5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54d676cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54d6463b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54d6463988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54d64627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp39k9bse5                        0x00005597ed8405a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b54d6958460 __libc_start_main +
    245

    6    tmp39k9bse5                        0x00005597ed840169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        sum += x\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeetx7i3s/tmpeetx7i3s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba459b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4597fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4597fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4597fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeetx7i3s                        0x000055d8ce5f3510 <unavailable> + 5392

    5    libc.so.6                          0x00002ba459cf0460 __libc_start_main +
    245

    6    tmpeetx7i3s                        0x000055d8ce5f30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013342
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   var count = 0\n\n    for num in arr {\n        sum += num\n        if sum\
    \ >= 0 {\n            count += 1\n            sum -= num\n        }\n    }\n\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpp_5blq_0/tmpp_5blq_0.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f170b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f16da8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f16da8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f16da77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp_5blq_0                        0x000055834663d6e0 <unavailable> + 5856

    5    libc.so.6                          0x00002b3f1729d460 __libc_start_main +
    245

    6    tmpp_5blq_0                        0x000055834663d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count: Int\
    \ = 0\n    for num in arr {\n        let s = num\n        if s < 0 {\n       \
    \     s *= -1\n        }\n        count += Int(abs(s)) % 10\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxu92m57x.swift:17:15: error: left side of mutating operator isn't\
    \ mutable: 's' is a 'let' constant\n            s *= -1\n            ~ ^\n/tmp/tmpxu92m57x.swift:15:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let s = num\n      \
    \  ^~~\n        var\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // Special case\n\
    \    guard arr.isEmpty else {\n        return arr.count\n    }\n\n    var sum\
    \ = 0\n    for num in arr {\n        if num < 0 {\n            sum += abs(num)\n\
    \        } else {\n            sum += num\n        }\n    }\n\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp2jhu34pl/tmp2jhu34pl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8d2098c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8d1d8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8d1d8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8d1d8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2jhu34pl                        0x000055f711a876a0 <unavailable> + 5792

    5    libc.so.6                          0x00002ab8d2284460 __libc_start_main +
    245

    6    tmp2jhu34pl                        0x000055f711a87269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        count += num > 0 ? digits(num).count : 0\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdirvgg58.swift:15:28: error: cannot find 'digits' in scope\n  \
    \      count += num > 0 ? digits(num).count : 0\n                           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr == nil {\n\
    \        return 0\n    }\n    var result = 1\n    for i in arr {\n        if i\
    \ < 0 {\n            result -= i\n        } else {\n            result += 1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpy2xv61qj/tmpy2xv61qj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d4232dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d42024b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d42024988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d420237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2xv61qj                        0x000055f6c87d844b <unavailable> + 5195

    5    libc.so.6                          0x00002b8d42519460 __libc_start_main +
    245

    6    tmpy2xv61qj                        0x000055f6c87d80d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty\
    \ {\n        return 0\n    }\n\n    var count = 1\n    for n in arr {\n      \
    \  count += count_nums(n: n) * (-1) // multiply by -1 when n is negative\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4s1_hco7.swift:19:28: error: incorrect argument label in call (have\
    \ 'n:', expected 'arr:')\n        count += count_nums(n: n) * (-1) // multiply\
    \ by -1 when n is negative\n                           ^~\n                  \
    \          arr\n/tmp/tmp4s1_hco7.swift:19:32: error: cannot convert value of type\
    \ 'Int' to expected argument type '[Int]'\n        count += count_nums(n: n) *\
    \ (-1) // multiply by -1 when n is negative\n                               ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty()\
    \ {\n        return 0\n    }\n    var i = 0\n    var numsCount = 0\n    while\
    \ i < arr.count {\n        if arr[i] < 0 {\n            numsCount++\n        \
    \    i += arr[i]\n        } else {\n            i += arr[i] + 1\n        }\n \
    \   }\n    return numsCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp4hvjnwu.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpp4hvjnwu.swift:20:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            numsCount++\n                     ^~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ != 0 else { return 0 }\n    return count_nums(arr: arr.reversed()) + count_nums(arr:\
    \ arr.prefix(arr.count - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpywiq9mc6.swift:14:66: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return count_nums(arr: arr.reversed())\
    \ + count_nums(arr: arr.prefix(arr.count - 1))\n                             \
    \                                    ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let len = arr.count\n\
    \n    var countZero = 0\n    for elem in arr {\n        if elem < 0 {\n      \
    \      countZero += 1\n        } else {\n            break\n        }\n    }\n\
    \n    let sum = arr.reduce(0, combine: +)\n    return len - countZero - sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpur1ze4sy.swift:24:25: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = arr.reduce(0, combine: +)\n                        ^\
    \   ~~~~~~~~~\n                            \n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // TODO: use tail\
    \ recursion here\n    if arr.isEmpty { return 0 }\n\n    var count = 0\n    var\
    \ sum = 0\n    for i in arr { sum += i }\n\n    guard sum >= 0 else {\n      \
    \  return count\n    }\n\n    if sum < 10 { return 0 }\n\n    for x in arr {\n\
    \        if sum % 10 == x { count += 1; break }\n    }\n\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp0iugk3el/tmp0iugk3el.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9d91f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9d8ef0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9d8ef0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9d8eef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0iugk3el                        0x000055da6a6116d5 <unavailable> + 5845

    5    libc.so.6                          0x00002af9d93e5460 __libc_start_main +
    245

    6    tmp0iugk3el                        0x000055da6a6111b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let maxDigits =\
    \ maxInt(arr)\n    if maxDigits == -1 && arr[0] < 0 {\n        return 0\n    }\n\
    \    var cnt = 0\n    for i in arr {\n        if i > 0 {\n            cnt += abs(maxDigits\
    \ - i)\n        }\n    }\n    return cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4s8n1kwi.swift:13:21: error: cannot find 'maxInt' in scope\n  \
    \  let maxDigits = maxInt(arr)\n                    ^~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for i in arr {\n        result += (i / 10).truncatingRemainder(dividingBy:\
    \ 10) + !(i % 10)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0g82x906.swift:15:28: error: value of type 'Int' has no member\
    \ 'truncatingRemainder'\n        result += (i / 10).truncatingRemainder(dividingBy:\
    \ 10) + !(i % 10)\n                  ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0g82x906.swift:15:66:\
    \ error: cannot convert value of type 'Bool' to expected argument type 'Int'\n\
    \        result += (i / 10).truncatingRemainder(dividingBy: 10) + !(i % 10)\n\
    \                                                                 ^\n/tmp/tmp0g82x906.swift:15:70:\
    \ error: type 'Int' cannot be used as a boolean; test for '== 0' instead\n   \
    \     result += (i / 10).truncatingRemainder(dividingBy: 10) + !(i % 10)\n   \
    \                                                              ~   ^\n       \
    \                                                           (        == 0)\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for element in arr {\n        if element < 0 {\n            sum -= element\n\
    \        } else {\n            sum += element\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpil5jt1c4/tmpil5jt1c4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad38b2a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad38af9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad38af9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad38af997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpil5jt1c4                        0x000055654964f510 <unavailable> + 5392

    5    libc.so.6                          0x00002ad38b48f460 __libc_start_main +
    245

    6    tmpil5jt1c4                        0x000055654964f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums2(arr)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpu0lh1z2x.swift:13:12: error: cannot find 'count_nums2' in scope\n\
    \    return count_nums2(arr)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_numsHelper(arr,\
    \ 0, arr.count, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfe5lxoib.swift:13:12: error: cannot find 'count_numsHelper' in\
    \ scope\n    return count_numsHelper(arr, 0, arr.count, 0)\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums(arr,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpkbb187kb.swift:13:28: error: extra argument in call\n    return\
    \ count_nums(arr, 0)\n                     ~~~~~~^~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    \n    // Return\
    \ early if arr is empty.\n    \n    if arr.isEmpty {\n        return 0\n    }\n\
    \    \n    // Initialize total to zero, and increment total by 1 every time we\
    \ encounter a number > 0.\n    \n    var total: Int = 0\n    \n    // Iterate\
    \ through all the elements of the array, each element has a signed digit.\n  \
    \  \n    for i in arr.indices {\n        \n        // If the current element has\
    \ a negative sign, then we will need to subtract 1 from it.\n        \n      \
    \  if arr[i] < 0 {\n            \n            total -= 1\n        }\n        \n\
    \        // If current element is positive, then we can add it to the total.\n\
    \        \n        else {\n            \n            total += arr[i]\n       \
    \ }\n    }\n    \n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo_s7cs8j/tmpo_s7cs8j.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2681c79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2681970b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2681970988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b268196f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo_s7cs8j                        0x00005583dbb7f610 <unavailable> + 5648

    5    libc.so.6                          0x00002b2681e65460 __libc_start_main +
    245

    6    tmpo_s7cs8j                        0x00005583dbb7f1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr != nil\
    \ else { return 0 }\n    guard arr.count > 0 else { return 0 }\n\n    // find\
    \ first negative number\n    var firstSign = -1000\n    for i in 0..<arr.count\
    \ {\n        if arr[i] < 0 {\n            firstSign = arr[i]\n            break\n\
    \        }\n    }\n\n    var count = firstSign\n    for i in 0..<arr.count {\n\
    \        let digit = arr[i] % 10\n        // check if this number has a sum of\
    \ digits > 0, otherwise skip\n        if digit > 0 && digit + count > 0 {\n  \
    \          count += 1\n        } else if digit > 0 {\n            // a negative\
    \ number has its first digit\n            // negative number can't get a sum of\
    \ digits, return 0\n            return 0\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpkvc9971d/tmpkvc9971d.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b365b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b362aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b362aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b362a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvc9971d                        0x00005574ff5f45e0 <unavailable> + 5600

    5    libc.so.6                          0x00002b2b3679f460 __libc_start_main +
    245

    6    tmpkvc9971d                        0x00005574ff5f41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum: Int =\
    \ 0\n    for x in arr {\n        sum += x\n        if sum < 0 {\n            sum\
    \ += pow10(-sum)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpaycc1ib5.swift:17:20: error: cannot find 'pow10' in scope\n   \
    \         sum += pow10(-sum)\n                   ^~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let sum = arr.reduce(0)\n\
    \    let negs = arr.count { $0 < 0 }\n    let result = (sum + negs) % 9\n    if\
    \ result < 0 {\n        return 9 - result\n    } else {\n        return result\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_o72y575.swift:13:27: error: missing argument for parameter #2\
    \ in call\n    let sum = arr.reduce(0)\n                          ^\n        \
    \                  , <#(Int, Int) throws -> Int#>\nSwift.Sequence:2:28: note:\
    \ 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n/tmp/tmp_o72y575.swift:14:20:\
    \ error: cannot call value of non-function type 'Int'\n    let negs = arr.count\
    \ { $0 < 0 }\n                   ^\n/tmp/tmp_o72y575.swift:15:23: error: cannot\
    \ convert value of type 'String' to expected argument type 'Int'\n    let result\
    \ = (sum + negs) % 9\n                      ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return count_nums(arr,\
    \ arr.first!, arr.last)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpahtln72h.swift:13:20: error: extra arguments at positions #2, #3\
    \ in call\n  return count_nums(arr, arr.first!, arr.last)\n                  \
    \ ^\n/tmp/tmpahtln72h.swift:12:6: note: 'count_nums(arr:)' declared here\nfunc\
    \ count_nums(arr: [Int]) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums_helper(arr,\
    \ 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7fm6z2sq.swift:13:12: error: cannot find 'count_nums_helper' in\
    \ scope\n    return count_nums_helper(arr, 0, 0)\n           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \n    for x in arr {\n        if x != 0 {\n            count += 1\n        }\n\
    \    }\n\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpc7v7omb4/tmpc7v7omb4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcccedcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcccbd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcccbd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcccbd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7v7omb4                        0x000055589e6ee510 <unavailable> + 5392

    5    libc.so.6                          0x00002afccd0c8460 __libc_start_main +
    245

    6    tmpc7v7omb4                        0x000055589e6ee0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var total = 0\n\
    \    for d in arr {\n        if d >= 0 {\n            total += d % 10\n      \
    \  } else if d < 0 {\n            total -= d % 10\n        }\n    }\n    return\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp1etxxp7v/tmp1etxxp7v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fc02f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fbffefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fbffef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fbffee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1etxxp7v                        0x0000560bf5e705a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b2fc04e4460 __libc_start_main +
    245

    6    tmp1etxxp7v                        0x0000560bf5e70169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty\
    \ { return 0 }\n    \n    let num = arr[0]\n    if num < 0 {\n        // -num\
    \ to signify first positive digit.\n        let firstDigit = -num\n        let\
    \ rest = arr.dropFirst()\n        return count_nums(rest) + count_nums(rest) -\
    \ count_nums(firstDigit)\n    }\n    \n    return 1 + count_nums(arr.dropFirst())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3l5kl9af.swift:20:27: error: missing argument label 'arr:' in call\n\
    \        return count_nums(rest) + count_nums(rest) - count_nums(firstDigit)\n\
    \                          ^\n                          arr: \n/tmp/tmp3l5kl9af.swift:20:27:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n        return count_nums(rest) + count_nums(rest) - count_nums(firstDigit)\n\
    \                          ^\n/tmp/tmp3l5kl9af.swift:20:46: error: missing argument\
    \ label 'arr:' in call\n        return count_nums(rest) + count_nums(rest) - count_nums(firstDigit)\n\
    \                                             ^\n                            \
    \                 arr: \n/tmp/tmp3l5kl9af.swift:20:46: error: cannot convert value\
    \ of type 'ArraySlice<Int>' to expected argument type '[Int]'\n        return\
    \ count_nums(rest) + count_nums(rest) - count_nums(firstDigit)\n             \
    \                                ^\n/tmp/tmp3l5kl9af.swift:20:65: error: missing\
    \ argument label 'arr:' in call\n        return count_nums(rest) + count_nums(rest)\
    \ - count_nums(firstDigit)\n                                                 \
    \               ^\n                                                          \
    \      arr: \n/tmp/tmp3l5kl9af.swift:20:65: error: cannot convert value of type\
    \ 'Int' to expected argument type '[Int]'\n        return count_nums(rest) + count_nums(rest)\
    \ - count_nums(firstDigit)\n                                                 \
    \               ^\n/tmp/tmp3l5kl9af.swift:23:27: error: missing argument label\
    \ 'arr:' in call\n    return 1 + count_nums(arr.dropFirst())\n               \
    \           ^\n                          arr: \n/tmp/tmp3l5kl9af.swift:23:31:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    return 1 + count_nums(arr.dropFirst())\n                      \
    \        ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let sum = 0\n \
    \   for i in arr {\n        sum += abs(i)\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmph_p10py9.swift:15:13: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n        sum += abs(i)\n        ~~~ ^\n/tmp/tmph_p10py9.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let sum = 0\n    ^~~\n \
    \   var\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var cnt = 0\n \
    \   for i in arr {\n        if i > 0 {\n            cnt += 1\n        }\n    }\n\
    \    return cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp3i2f8stu/tmp3i2f8stu.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8108cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8105c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8105c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8105c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3i2f8stu                        0x00005650474258ca <unavailable> + 6346

    5    libc.so.6                          0x00002ab810ab7460 __libc_start_main +
    245

    6    tmp3i2f8stu                        0x00005650474250d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for n in arr {\n        sum += n\n        if sum > 0 {\n            sum +=\
    \ n % 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp1nb561yx/tmp1nb561yx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac388c2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac388923b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac388923988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3889227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1nb561yx                        0x0000556f668de5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002ac388e18460 __libc_start_main +
    245

    6    tmp1nb561yx                        0x0000556f668de169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for n in arr {\n        result += (n - 0) / 9\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp_sjvzex1/tmp_sjvzex1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4af06b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4af03aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4af03aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4af03a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_sjvzex1                        0x00005619515f8685 <unavailable> + 5765

    5    libc.so.6                          0x00002b4af089f460 __libc_start_main +
    245

    6    tmp_sjvzex1                        0x00005619515f8169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let count = arr.reduce(0)\
    \ {\n        if let i = Int($0) {\n            var acc = 0\n            var negated\
    \ = false\n            repeat {\n                acc += i % 10\n             \
    \   i /= 10\n                if i == 0 {\n                    break\n        \
    \        }\n            } while i != 0\n            if acc == 0 && negated {\n\
    \                acc -= 1\n            }\n            return acc > 0 ? acc + 1\
    \ : acc\n        }\n        return 0\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpl593rt1j.swift:13:31: error: contextual closure type '(Int, Int)\
    \ throws -> Int' expects 2 arguments, but 1 was used in closure body\n    let\
    \ count = arr.reduce(0) {\n                              ^\n/tmp/tmpl593rt1j.swift:19:19:\
    \ error: left side of mutating operator isn't mutable: 'i' is a 'let' constant\n\
    \                i /= 10\n                ~ ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr != nil\
    \ else {\n        return 0\n    }\n    var sum = 0\n    for i in arr {\n     \
    \   sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpaj9d9ll2/tmpaj9d9ll2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b362dc76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b362d96db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b362d96d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b362d96c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaj9d9ll2                        0x000055945e7b8510 <unavailable> + 5392

    5    libc.so.6                          0x00002b362de62460 __libc_start_main +
    245

    6    tmpaj9d9ll2                        0x000055945e7b80d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for idx in 0..<arr.count {\n        if idx >= 0 && arr[idx] >= 0 {\n    \
    \        if !result%10 {\n                result += arr[idx]\n            } else\
    \ {\n                result += ((10*result) + arr[idx])%10\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyvois8li.swift:16:16: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            if !result%10 {\n             \
    \  ^\n/tmp/tmpyvois8li.swift:16:23: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n            if !result%10 {\n                     \
    \ ^\n               ((        ) != 0)\n/tmp/tmpyvois8li.swift:16:17: error: type\
    \ 'Int' cannot be used as a boolean; test for '== 0' instead\n            if !result%10\
    \ {\n               ~^\n                (      == 0)\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty\
    \ {\n        return 0\n    }\n    var sum = 0\n    var sign = -1\n    if arr[0]\
    \ < 0 {\n        sign = arr[0]\n        arr[0] = -arr[0]\n    }\n    for i in\
    \ arr {\n        sum += sign * (i % 10) * pow(10, arr.count - i - 1)\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjj4h8x9f.swift:20:12: error: cannot assign through subscript: 'arr'\
    \ is a 'let' constant\n        arr[0] = -arr[0]\n        ~~~^\n/tmp/tmpjj4h8x9f.swift:23:34:\
    \ error: cannot find 'pow' in scope\n        sum += sign * (i % 10) * pow(10,\
    \ arr.count - i - 1)\n                                 ^~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for num in arr {\n        result += int(num.truncatingRemainder(dividingBy:\
    \ 10)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_vsxuz84.swift:15:19: error: cannot find 'int' in scope\n     \
    \   result += int(num.truncatingRemainder(dividingBy: 10)!)\n                \
    \  ^~~\n/tmp/tmp_vsxuz84.swift:15:27: error: value of type 'Int' has no member\
    \ 'truncatingRemainder'\n        result += int(num.truncatingRemainder(dividingBy:\
    \ 10)!)\n                      ~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    switch arr.count\
    \ {\n    case 0:\n        return 0\n    case 1:\n        return arr[0]\n    case\
    \ 2:\n        if arr[0] + arr[1] < arr[2] {\n            return 1\n        }\n\
    \        return arr[1] + arr[2] - arr[0]\n    default:\n        if arr[0] + arr[1]\
    \ < arr[2] {\n            return 1 + count_nums(arr.suffix(2))\n        } else\
    \ {\n            return 1 + count_nums(arr.suffix(3))\n        }\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr9kq78_w.swift:25:35: error: missing argument label 'arr:' in call\n\
    \            return 1 + count_nums(arr.suffix(2))\n                          \
    \        ^\n                                  arr: \n/tmp/tmpr9kq78_w.swift:27:35:\
    \ error: missing argument label 'arr:' in call\n            return 1 + count_nums(arr.suffix(3))\n\
    \                                  ^\n                                  arr: \n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty()\
    \ { return 0 }\n    let sum = arr.reduce(0)\n    let max = Int64(pow10(arr.count))\n\
    \    if sum > max { return 0 }\n    let pow = max - sum\n    var i = arr.count\n\
    \    while i >= 0 {\n        var n = arr[i]\n        n -= i\n        arr[i] =\
    \ (n / 10) as Int\n        i -= 1\n    }\n    let digits = arr.flatMap({ $0 })\n\
    \    let filtered = digits.filter() { $0 >= 0 }\n    return filtered.count ==\
    \ 0 ? 0 : filtered.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0zsxxprq.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() { return 0 }\n           ^      ~~\n     \
    \             \n/tmp/tmp0zsxxprq.swift:14:27: error: missing argument for parameter\
    \ #2 in call\n    let sum = arr.reduce(0)\n                          ^\n     \
    \                     , <#(Int, Int) throws -> Int#>\nSwift.Sequence:2:28: note:\
    \ 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n/tmp/tmp0zsxxprq.swift:15:21:\
    \ error: cannot find 'pow10' in scope\n    let max = Int64(pow10(arr.count))\n\
    \                    ^~~~~\n/tmp/tmp0zsxxprq.swift:22:12: error: cannot assign\
    \ through subscript: 'arr' is a 'let' constant\n        arr[i] = (n / 10) as Int\n\
    \        ~~~^\n/tmp/tmp0zsxxprq.swift:25:22: warning: 'flatMap' is deprecated:\
    \ Please use compactMap(_:) for the case where closure returns an optional value\n\
    \    let digits = arr.flatMap({ $0 })\n                     ^\n/tmp/tmp0zsxxprq.swift:25:22:\
    \ note: use 'compactMap(_:)' instead\n    let digits = arr.flatMap({ $0 })\n \
    \                    ^~~~~~~\n                     compactMap\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var nums = 0\n\
    \    for x in arr {\n        var digit = 0\n        for d in strDigits(x.toString())\
    \ {\n            digit *= 10\n            digit += d\n        }\n        if digit\
    \ > 0 {\n            nums += 1\n        }\n    }\n    return nums\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4inrrkid.swift:16:18: error: cannot find 'strDigits' in scope\n\
    \        for d in strDigits(x.toString()) {\n                 ^~~~~~~~~\n/tmp/tmp4inrrkid.swift:16:30:\
    \ error: value of type 'Int' has no member 'toString'\n        for d in strDigits(x.toString())\
    \ {\n                           ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += count_digits(&x)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpb3s408p0.swift:15:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(&x)\n                 ^~~~~~~~~~~~\n/tmp/tmpb3s408p0.swift:15:31:\
    \ error: cannot pass immutable value as inout argument: 'x' is a 'let' constant\n\
    \        count += count_digits(&x)\n                              ^~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    \n    var count\
    \ = 0\n    \n    for i in arr {\n        let digit = abs(i)\n        \n      \
    \  if digit > 0 {\n            count += 1\n        }\n    }\n    \n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp3f1y3xfb/tmp3f1y3xfb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4c784dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4c7544b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4c7544988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4c75437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3f1y3xfb                        0x00005626ff1e7600 <unavailable> + 5632

    5    libc.so.6                          0x00002ae4c7a39460 __libc_start_main +
    245

    6    tmp3f1y3xfb                        0x00005626ff1e71c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var nums = Set<Int>()\n\
    \    for i in arr {\n        if i >= 0 {\n            if nums.contains(i) {\n\
    \                nums.remove(i)\n            } else {\n                nums.insert(i)\n\
    \            }\n        }\n    }\n    return nums.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpaomcd8ne/tmpaomcd8ne.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cf2767c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cf245eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cf245e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cf245d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaomcd8ne                        0x000055bc9ff98700 <unavailable> + 5888

    5    libc.so.6                          0x00002b2cf2953460 __libc_start_main +
    245

    6    tmpaomcd8ne                        0x000055bc9ff982c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var nums = 0\n\
    \    for num in arr {\n        if num > 0 {\n            var sign = num / 10\n\
    \            var digit = num % 10\n            if num < 0 {\n                sign\
    \ = -sign\n                digit = -digit\n            }\n            if sign\
    \ > num {\n                nums = nums + 1\n            } else {\n           \
    \     nums = nums + (digit > 0)\n            }\n        }\n    }\n    return nums\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj8ab3s52.swift:25:38: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n                nums = nums + (digit > 0)\n\
    \                                     ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    var sign = arr[0] >= 0\n    for value in arr {\n        result += sign *\
    \ (value % 10).count\n        sign = value >= 0\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpm1yxn0vm.swift:16:19: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        result += sign * (value % 10).count\n\
    \                  ^\n/tmp/tmpm1yxn0vm.swift:16:39: error: value of type 'Int'\
    \ has no member 'count'\n        result += sign * (value % 10).count\n       \
    \                  ~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // Convert each\
    \ element to its negative value and sort the array.\n    var nums = arr.map {\
    \ -$0 }\n    nums.sort.reverse()\n\n    // If the first element has at least one\
    \ digit > 0, then the\n    // number is positive. Otherwise, return 0.\n    return\
    \ nums.first >= 0 ? nums.count : 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpx4mi0oku.swift:15:10: error: no exact matches in reference to instance\
    \ method 'sort'\n    nums.sort.reverse()\n         ^\n/tmp/tmpx4mi0oku.swift:15:10:\
    \ note: found candidate with type '() -> ()'\n    nums.sort.reverse()\n      \
    \   ^\n/tmp/tmpx4mi0oku.swift:15:10: note: found candidate with type '((Int, Int)\
    \ throws -> Bool) throws -> ()'\n    nums.sort.reverse()\n         ^\n/tmp/tmpx4mi0oku.swift:15:15:\
    \ error: reference to member 'reverse' cannot be resolved without a contextual\
    \ type\n    nums.sort.reverse()\n              ^\n/tmp/tmpx4mi0oku.swift:19:17:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    return nums.first >= 0 ? nums.count : 0\n                ^\n/tmp/tmpx4mi0oku.swift:19:17:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return nums.first >= 0 ? nums.count : 0\n                ^\n    \
    \                  ?? <#default value#>\n/tmp/tmpx4mi0oku.swift:19:17: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ nums.first >= 0 ? nums.count : 0\n                ^\n                     !\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0\
    \ > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpinr9_30o/tmpinr9_30o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d0873dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d08434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d08434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d084337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinr9_30o                        0x000055fc3acca87a <unavailable> + 6266

    5    libc.so.6                          0x00002b7d08929460 __libc_start_main +
    245

    6    tmpinr9_30o                        0x000055fc3acca089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.isEmpty\
    \ else {\n        return -1\n    }\n\n    var sumOfDigits = 0\n    var negative\
    \ = false\n    for num in arr {\n        if num < 0 {\n            sum += num\n\
    \            negative = true\n        } else {\n            sum += num\n     \
    \       if sumOfDigits == 0 {\n                sumOfDigits = abs(num)\n      \
    \      } else {\n                sumOfDigits = sumOfDigits * 10 + abs(num)\n \
    \           }\n        }\n    }\n    return negative ? -sumOfDigits : sumOfDigits\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6oe4gfa8.swift:21:13: error: cannot find 'sum' in scope\n     \
    \       sum += num\n            ^~~\n/tmp/tmp6oe4gfa8.swift:24:13: error: cannot\
    \ find 'sum' in scope\n            sum += num\n            ^~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var zeros = count_zeroes(arr)\n\
    \    var digits = count_digits(arr)\n    guard digits >= zeros else {\n      \
    \  return 0\n    }\n    return digits - zeros\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0ig0pwfj.swift:13:17: error: cannot find 'count_zeroes' in scope\n\
    \    var zeros = count_zeroes(arr)\n                ^~~~~~~~~~~~\n/tmp/tmp0ig0pwfj.swift:14:18:\
    \ error: cannot find 'count_digits' in scope\n    var digits = count_digits(arr)\n\
    \                 ^~~~~~~~~~~~\n/tmp/tmp0ig0pwfj.swift:18:19: error: cannot convert\
    \ return expression of type 'Duration' to return type 'Int'\n    return digits\
    \ - zeros\n           ~~~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty()\
    \ {\n        return 0\n    }\n    \n    let min = arr.reduce(0) { $0 > $1 ? $1\
    \ : $0 }\n    var count = 0\n    for num in arr {\n        count += (num - min)\
    \ % 10 == 0\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmptapzbvvu.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmptapzbvvu.swift:20:35: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        count += (num - min) % 10 == 0\n  \
    \                                ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for element in arr {\n        sum += (element & -element) + 1\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpsly6ydo_/tmpsly6ydo_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ef003ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7eefd31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7eefd31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7eefd307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsly6ydo_                        0x0000556ce85f8510 <unavailable> + 5392

    5    libc.so.6                          0x00002b7ef0226460 __libc_start_main +
    245

    6    tmpsly6ydo_                        0x0000556ce85f80d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else {\n        return 0\n    }\n\n    var total = 0\n    for num in arr\
    \ {\n        total += num\n    }\n\n    return total / abs(total)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx9b7eybq/tmpx9b7eybq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b997a607c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b997a2feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b997a2fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b997a2fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx9b7eybq                        0x0000562efc6006e0 <unavailable> + 5856

    5    libc.so.6                          0x00002b997a7f3460 __libc_start_main +
    245

    6    tmpx9b7eybq                        0x0000562efc6002a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty()\
    \ {\n        return 0\n    }\n    var count = 0\n    for n in arr {\n        count\
    \ += count_digits(n)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7eb1661b.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp7eb1661b.swift:18:18: error: cannot find 'count_digits' in scope\n\
    \        count += count_digits(n)\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 >= 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp5lzp_5m2/tmp5lzp_5m2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b229b90dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b229b604b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b229b604988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b229b6037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5lzp_5m2                        0x0000562d78fe54c0 <unavailable> + 5312

    5    libc.so.6                          0x00002b229baf9460 __libc_start_main +
    245

    6    tmp5lzp_5m2                        0x0000562d78fe5089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \n    for n in arr {\n        result = count_nums_helper(n, &result)\n    }\n\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8g5ovg49.swift:16:18: error: cannot find 'count_nums_helper' in\
    \ scope\n        result = count_nums_helper(n, &result)\n                 ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    arr.sort()\n  \
    \  var nums = [0]\n    for i in arr {\n        if i < 0 {\n            nums[0]++\n\
    \        } else if nums[0] == 0 {\n            nums[0]++\n        } else if nums[0]\
    \ != 0 {\n            nums[0] = nums[0] / 10\n            nums[0] += i / 10\n\
    \            i %= 10\n            nums[0] += i % 10\n        }\n    }\n    return\
    \ nums[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppbjiu07g.swift:13:9: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    arr.sort()\n    ~~~ ^\n/tmp/tmppbjiu07g.swift:17:20:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  nums[0]++\n                   ^~\n/tmp/tmppbjiu07g.swift:19:20: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            nums[0]++\n \
    \                  ^~\n/tmp/tmppbjiu07g.swift:23:15: error: left side of mutating\
    \ operator isn't mutable: 'i' is a 'let' constant\n            i %= 10\n     \
    \       ~ ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  var sum = 0\n  var\
    \ count = 0\n\n  for elem in arr {\n    sum += Int(abs(elem))\n    count += 1\
    \ if sum > 0 else 0\n  }\n\n  return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1w32dzzy.swift:18:15: error: consecutive statements on a line must\
    \ be separated by ';'\n    count += 1 if sum > 0 else 0\n              ^\n   \
    \           ;\n/tmp/tmp1w32dzzy.swift:18:27: error: unexpected 'else' immediately\
    \ following 'if' condition\n    count += 1 if sum > 0 else 0\n               \
    \           ^\n/tmp/tmp1w32dzzy.swift:18:27: note: remove 'else' to execute the\
    \ braced block of statements when the condition is true\n    count += 1 if sum\
    \ > 0 else 0\n                          ^~~~~\n                          \n/tmp/tmp1w32dzzy.swift:18:32:\
    \ error: expected '{' after 'if' condition\n    count += 1 if sum > 0 else 0\n\
    \                               ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // TODO: replace\
    \ with itertools?\n    var i = 0\n    while i < arr.count {\n        if arr[i]\
    \ > 0 {\n            i += count_nums(arr[i+1..<arr.count])\n        } else {\n\
    \            i += 1\n        }\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq5hnlb2v.swift:17:29: error: missing argument label 'arr:' in call\n\
    \            i += count_nums(arr[i+1..<arr.count])\n                         \
    \   ^\n                            arr: \n/tmp/tmpq5hnlb2v.swift:17:32: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \            i += count_nums(arr[i+1..<arr.count])\n                         \
    \      ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if let firstDigit = num {\n            count +=\
    \ Int(log2(firstDigit))\n        }\n        else {\n            count -= 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpybzsy35v.swift:16:26: error: cannot find 'log2' in scope\n    \
    \        count += Int(log2(firstDigit))\n                         ^~~~\n/tmp/tmpybzsy35v.swift:15:12:\
    \ error: initializer for conditional binding must have Optional type, not 'Int'\n\
    \        if let firstDigit = num {\n           ^                ~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var i = 0\n   \
    \ for x in arr {\n        let y = abs(x)\n        var num = 0\n        \n    \
    \    for _ in 0..<8 {\n            let d = y % 10\n            y = y / 10\n  \
    \          num |= (d < 0 ? -1 : 1<<(8-i)) & 1\n            i += 1\n        }\n\
    \        \n        if num == 0 {\n            continue\n        }\n        \n\
    \        if x > 0 {\n            // x can be negative, so subtract first digit\
    \ and add this digit\n            // to the sum\n            x -= 9\n        }\n\
    \        \n        if x != 0 {\n            x += num\n        }\n    }\n    return\
    \ i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3wzzirdj.swift:20:13: error: cannot assign to value: 'y' is a 'let'\
    \ constant\n            y = y / 10\n            ^\n/tmp/tmp3wzzirdj.swift:15:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let y = abs(x)\n   \
    \     ^~~\n        var\n/tmp/tmp3wzzirdj.swift:32:15: error: left side of mutating\
    \ operator isn't mutable: 'x' is a 'let' constant\n            x -= 9\n      \
    \      ~ ^\n/tmp/tmp3wzzirdj.swift:36:15: error: left side of mutating operator\
    \ isn't mutable: 'x' is a 'let' constant\n            x += num\n            ~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty\
    \ {\n        return 0\n    }\n    var sum = 0\n    var prev: Int = 0\n    for\
    \ val in arr {\n        if val < 0 {\n            if prev < 0 {\n            \
    \    sum += (val * -1)\n            } else {\n                sum += -val\n  \
    \          }\n        } else {\n            if prev > 0 {\n                sum\
    \ += val\n            }\n        }\n        prev = val\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp07rorq73/tmp07rorq73.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b384842ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3848121b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3848121988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38481207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07rorq73                        0x000055f9db7b2560 <unavailable> + 5472

    5    libc.so.6                          0x00002b3848616460 __libc_start_main +
    245

    6    tmp07rorq73                        0x000055f9db7b2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for n in arr {\n        if n > 0 {\n            count += n / 10_0\n     \
    \       n %= 10_0\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpsp6gzrre.swift:17:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n %= 10_0\n            ~ ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // Special case:\
    \ empty array\n    if arr.isEmpty() {\n        return 0\n    }\n    \n    // Special\
    \ case: single number\n    if arr[0] == 0 {\n        return 1\n    }\n    \n \
    \   // Recursion case: non-negative first digit\n    if arr[0] < 0 {\n       \
    \ return 1 + count_nums(arr: arr[1..<arr.count])\n    }\n    \n    // Special\
    \ case: second digit\n    if arr[0] == 1 {\n        return count_nums(arr: arr[1..<arr.count])\n\
    \    }\n    \n    // Recursion case: second and third digit\n    return count_nums(arr:\
    \ arr[1..<arr.count]) + count_nums(arr: arr[2..<arr.count])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyd4inoax.swift:14:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpyd4inoax.swift:25:39: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n        return 1 + count_nums(arr: arr[1..<arr.count])\n\
    \                                      ^\n/tmp/tmpyd4inoax.swift:30:35: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \        return count_nums(arr: arr[1..<arr.count])\n                        \
    \          ^\n/tmp/tmpyd4inoax.swift:34:31: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return count_nums(arr:\
    \ arr[1..<arr.count]) + count_nums(arr: arr[2..<arr.count])\n                \
    \              ^\n/tmp/tmpyd4inoax.swift:34:69: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return count_nums(arr:\
    \ arr[1..<arr.count]) + count_nums(arr: arr[2..<arr.count])\n                \
    \                                                    ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        count += digitSum(x)\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vctm6zi.swift:15:18: error: cannot find 'digitSum' in scope\n\
    \        count += digitSum(x)\n                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums_helper(arr,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpb30dvniq.swift:13:12: error: cannot find 'count_nums_helper' in\
    \ scope\n    return count_nums_helper(arr, 0)\n           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let m = count_digits(arr)\n\
    \    return arr[m...].count(where: { $0 > 0 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpkajhgaq9.swift:13:13: error: cannot find 'count_digits' in scope\n\
    \    let m = count_digits(arr)\n            ^~~~~~~~~~~~\n/tmp/tmpkajhgaq9.swift:14:17:\
    \ error: cannot convert value of type '()' to expected argument type 'Int'\n \
    \   return arr[m...].count(where: { $0 > 0 })\n                ^\n/tmp/tmpkajhgaq9.swift:14:22:\
    \ error: value of type 'Int' has no member 'count'\n    return arr[m...].count(where:\
    \ { $0 > 0 })\n           ~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 < 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp3gor1h4x/tmp3gor1h4x.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79b37f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79b34e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79b34e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79b34e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3gor1h4x                        0x0000563fcc73a4c0 <unavailable> + 5312

    5    libc.so.6                          0x00002b79b39de460 __libc_start_main +
    245

    6    tmp3gor1h4x                        0x0000563fcc73a089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr == nil ||\
    \ arr.isEmpty() {\n        return 0\n    }\n\n    var count = 0\n    for num in\
    \ arr {\n        count += count_digits(num)\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpc7t7yvrq.swift:13:26: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr == nil || arr.isEmpty() {\n                        \
    \ ^      ~~\n                                \n/tmp/tmpc7t7yvrq.swift:19:18: error:\
    \ cannot find 'count_digits' in scope\n        count += count_digits(num)\n  \
    \               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.enumerated().map\
    \ { i, _ in\n        if arr[i].isNegative {\n            return -1\n        }\
    \ else {\n            return arr[i].magnitude\n        }\n    }.sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpf0ij21du.swift:14:19: error: value of type 'Int' has no member\
    \ 'isNegative'\n        if arr[i].isNegative {\n           ~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpf0ij21du.swift:19:7: error: value of type '[T]' has no member 'sum'\n\
    \    }.sum\n~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    switch arr.count\
    \ {\n    case 0: return 0\n    case 1: return arr[0]\n    case 2: return arr[0]\
    \ + arr[1]\n    case 3: return arr[0] + arr[1] + arr[2]\n    default: return arr[0]\
    \ + count_nums(arr.dropFirst())\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjar1jqvj.swift:18:41: error: missing argument label 'arr:' in call\n\
    \    default: return arr[0] + count_nums(arr.dropFirst())\n                  \
    \                      ^\n                                        arr: \n/tmp/tmpjar1jqvj.swift:18:45:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    default: return arr[0] + count_nums(arr.dropFirst())\n        \
    \                                    ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var cnt = 0\n \
    \   for _i in arr {\n        if _i >= 0 {\n            cnt += Int(_i) % 10\n \
    \       }\n    }\n    return cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpahapwjg8/tmpahapwjg8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afedeb99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afede890b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afede890988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afede88f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahapwjg8                        0x000055a14d4c47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002afeded85460 __libc_start_main +
    245

    6    tmpahapwjg8                        0x000055a14d4c42a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums(arr:\
    \ arr, firstDigit: 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyq6tco1u.swift:13:45: error: extra argument 'firstDigit' in call\n\
    \    return count_nums(arr: arr, firstDigit: 0)\n                     ~~~~~~~~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums(arr,\
    \ 0).1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmptt9f66zc.swift:13:28: error: extra argument in call\n    return\
    \ count_nums(arr, 0).1\n                     ~~~~~~^~\n/tmp/tmptt9f66zc.swift:13:31:\
    \ error: value of type 'Int' has no member '1'\n    return count_nums(arr, 0).1\n\
    \           ~~~~~~~~~~~~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let first = arr[0]\n\
    \    if first < 0 {\n        first = -first\n    }\n    return count_nums_helper(arr,\
    \ 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpave2dbif.swift:15:9: error: cannot assign to value: 'first' is\
    \ a 'let' constant\n        first = -first\n        ^~~~~\n/tmp/tmpave2dbif.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let first = arr[0]\n   \
    \ ^~~\n    var\n/tmp/tmpave2dbif.swift:17:12: error: cannot find 'count_nums_helper'\
    \ in scope\n    return count_nums_helper(arr, 0, 0)\n           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013497
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // If there are\
    \ no elements, the sum is 0.\n    if arr.isEmpty { return 0 }\n\n    // Create\
    \ a string from arr to avoid using unsafe pointer access.\n    let str = String(\
    \ arr.map { String($0) } )\n\n    var num = 0\n\n    for char in str.unicodeScalars\
    \ {\n        if let _ = str.getCharacters(\n            from: char.startIndex,\n\
    \            to: char.endIndex\n        ) {\n            let int = Character(char).intValue\n\
    \            if int >= 0 {\n                // Only add the digit if the number\
    \ is positive.\n                num += int % 10\n            }\n        }\n  \
    \  }\n\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgpohp8i2.swift:17:15: error: no exact matches in call to initializer\
    \ \n    let str = String( arr.map { String($0) } )\n              ^\nSwift.String:4:12:\
    \ note: candidate requires that the types 'String' and 'Character' be equivalent\
    \ (requirement specified as 'S.Element' == 'Character')\n    public init<S>(_\
    \ characters: S) where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate requires that the types 'String.Element' (aka 'Character') and\
    \ 'String' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n/tmp/tmpgpohp8i2.swift:26:39: error: value\
    \ of type 'Character' has no member 'intValue'\n            let int = Character(char).intValue\n\
    \                      ~~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // Initialize result\
    \ with number of negative numbers\n    var result = 0\n\n    // Iterate through\
    \ all digits and increment result when digit > 0\n    for d in arr {\n       \
    \ d < 0 ? result = result + d : result\n    }\n\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgqya7m3l.swift:18:24: error: result values in '? :' expression\
    \ have mismatching types '()' and 'Int'\n        d < 0 ? result = result + d :\
    \ result\n                ~~~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    \n    // Count\
    \ the number of positive numbers.\n    var count = 1\n    for a in arr {\n   \
    \     if a > 0 {\n            count += count_nums(arr: [a - 1])\n        }\n \
    \   }\n    \n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp6hfj9qeo/tmp6hfj9qeo.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4663a6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4663761b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4663761988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46637607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6hfj9qeo                        0x000056270640544b <unavailable> + 5195

    5    libc.so.6                          0x00002b4663c56460 __libc_start_main +
    245

    6    tmp6hfj9qeo                        0x00005627064050d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for i in arr {\n        if i >= 0 {\n            sum += (i / 10.0)\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr97wvus7.swift:16:25: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += (i / 10.0)\n           \
    \             ^\n                        Int()\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var nums = arr\n\
    \    if nums.count < 2 {\n        return 0\n    }\n\n    var nums0 = nums\n  \
    \  var nums1 = nums\n    var nums2 = nums\n\n    if nums0.count == 2 {\n     \
    \   if nums0[0] == nums0[1] {\n            swap(&nums0, &nums1)\n        }\n \
    \   }\n\n    if nums1.count == 2 {\n        if nums1[0] == nums1[1] {\n      \
    \      swap(&nums1, &nums2)\n        }\n    }\n\n    if nums2.count == 2 {\n \
    \       if nums2[0] == nums2[1] {\n            swap(&nums2, &nums0)\n        }\n\
    \    }\n\n    // The code below is adapted from Andrew Dunlap's implementation\n\
    \    // of countDigitsInRadix.  It assumes that there is a \"1\" at index 0.\n\
    \    var oneDigitSum = 0\n    var currentDigit = 0\n    for i := 0; i < nums2.count;\
    \ i++ {\n        oneDigitSum += nums2[i]\n        currentDigit += nums2[i]\n \
    \       if currentDigit > 0 && oneDigitSum > 0 {\n            return i + 1 //\
    \ add 1 to count at index i\n        }\n        if currentDigit == 0 {\n     \
    \       oneDigitSum -= nums2[i]\n        }\n    }\n\n    return nums.count //\
    \ count the rest of the numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxigl4lae.swift:44:12: error: expected type\n    for i := 0; i <\
    \ nums2.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpxigl4lae.swift:44:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < nums2.count;\
    \ i++ {\n           ^\n/tmp/tmpxigl4lae.swift:44:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < nums2.count; i++ {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var total = 0\n\
    \    var carry = 0\n    for n in arr {\n        total += n + carry\n        carry\
    \ = total * 10\n        total %= 10\n    }\n    return carry > 0 ? total + 1 :\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp5znxrgv5/tmp5znxrgv5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5cfb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed5cca8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed5cca8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed5cca77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5znxrgv5                        0x000055bf605a25a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aed5d19d460 __libc_start_main +
    245

    6    tmp5znxrgv5                        0x000055bf605a2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else { return 0 }\n    var count = 0\n    let minDigit = arr.first!\n  \
    \  for i in arr {\n        let digit = absdigit(i - minDigit)\n        if digit\
    \ > 0 { count += digit }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmph_o6gevj.swift:17:21: error: cannot find 'absdigit' in scope\n\
    \        let digit = absdigit(i - minDigit)\n                    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums2(arr:\
    \ arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4tjbzzni.swift:13:12: error: cannot find 'count_nums2' in scope\n\
    \    return count_nums2(arr: arr)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty()\
    \ {\n        return 0\n    }\n    let n = arr.count\n    let negative = arr.isEmpty\
    \ || !arr.first < 0\n    var sum = 0\n    var tmp = 0\n    if negative {\n   \
    \     tmp = arr[0]\n    }\n    for n in arr {\n        if tmp > 0 {\n        \
    \    sum += tmp\n        }\n        tmp += n\n    }\n    if negative {\n     \
    \   return n - sum\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp61r75o11.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp61r75o11.swift:17:40: error: optional type 'Int?' cannot be used\
    \ as a boolean; test for '== nil' instead\n    let negative = arr.isEmpty || !arr.first\
    \ < 0\n                                  ~    ^\n                            \
    \       (         == nil)\n/tmp/tmp61r75o11.swift:17:35: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n    let negative = arr.isEmpty\
    \ || !arr.first < 0\n                                  ^\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums_internal(arr)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1h7t5qwn.swift:13:12: error: cannot find 'count_nums_internal'\
    \ in scope\n    return count_nums_internal(arr)\n           ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums(arr,\
    \ 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvtviyg8f.swift:13:22: error: extra arguments at positions #2, #3\
    \ in call\n    return count_nums(arr, 0, 0)\n                     ^\n/tmp/tmpvtviyg8f.swift:12:6:\
    \ note: 'count_nums(arr:)' declared here\nfunc count_nums(arr: [Int]) -> Int {\n\
    \     ^\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr != nil\
    \ else { return 0 }\n    guard arr.count > 0 else { return 0 }\n\n    var sum\
    \ = 0\n    for i in 0..<arr.count {\n        let digit = arr[i] - 0\n        if\
    \ digit > 0 { sum += digit }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp141bx7f3/tmp141bx7f3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0d336ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0d3065b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0d3065988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0d30647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp141bx7f3                        0x0000563ed94e26c5 <unavailable> + 5829

    5    libc.so.6                          0x00002af0d355a460 __libc_start_main +
    245

    6    tmp141bx7f3                        0x0000563ed94e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013498
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var num = 0\n \
    \   for v in arr {\n        num += 1\n        if v < 0 {\n            num += 1\n\
    \            if v < 0 {\n                num += v\n            }\n        }\n\
    \    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpf_h6ajz9/tmpf_h6ajz9.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5a587dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5a5574b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5a5574988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5a55737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_h6ajz9                        0x0000559ad9f78510 <unavailable> + 5392

    5    libc.so.6                          0x00002ab5a5a69460 __libc_start_main +
    245

    6    tmpf_h6ajz9                        0x0000559ad9f780d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013498
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ >= 0 else { return 0 }\n    var count: Int = 0\n    for element in arr {\n \
    \       var element = element >= 0 ? element * 2 : -element * 2\n        var currentSum\
    \ = 0\n        for _ in 0..<10 {\n            currentSum += element\n        \
    \    element /= 10\n        }\n        if currentSum > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmps_aagjc4/tmps_aagjc4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b093016ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b092fe65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b092fe65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b092fe647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_aagjc4                        0x0000561b290b96f0 <unavailable> + 5872

    5    libc.so.6                          0x00002b093035a460 __libc_start_main +
    245

    6    tmps_aagjc4                        0x0000561b290b92b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // Write your code\
    \ here.\n    let length = arr[0].bit_length()\n    var sum = 0\n    for i in 0..<length\
    \ {\n        let digit = arr[i] - 10\n        sum += digit\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp204vyfw7.swift:14:25: error: value of type 'Int' has no member\
    \ 'bit_length'\n    let length = arr[0].bit_length()\n                 ~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x >= 0 {\n            count += 1\n           \
    \ if x > 9 {\n                for y in x % 10 {\n                    if y > 0\
    \ {\n                        count += y > 9\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2s1oxjan.swift:18:28: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n                for y in x % 10 {\n                         ~~^~~~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums(arr:\
    \ arr, digits: 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyzd6czzi.swift:13:41: error: extra argument 'digits' in call\n\
    \    return count_nums(arr: arr, digits: 0)\n                     ~~~~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var nums = Int()\n\
    \    for i : Int in arr {\n        if i >= 0 {\n            nums += 1\n      \
    \  }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpggjfzt6b/tmpggjfzt6b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea23b5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea23852b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea23852988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea238517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggjfzt6b                        0x000055b1275e6510 <unavailable> + 5392

    5    libc.so.6                          0x00002aea23d47460 __libc_start_main +
    245

    6    tmpggjfzt6b                        0x000055b1275e60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  let max = Int(math.pow(2,\
    \ ceil(log2(Float(arr.count))), 2)) - 1\n  var nums = 0\n  for num in arr {\n\
    \    nums = nums + Int(pow(num, floor(log2(Float(num)))))\n  }\n  return nums.clamp(0,\
    \ max)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp42pifjen.swift:13:17: error: cannot find 'math' in scope\n  let\
    \ max = Int(math.pow(2, ceil(log2(Float(arr.count))), 2)) - 1\n              \
    \  ^~~~\n/tmp/tmp42pifjen.swift:13:29: error: cannot find 'ceil' in scope\n  let\
    \ max = Int(math.pow(2, ceil(log2(Float(arr.count))), 2)) - 1\n              \
    \              ^~~~\n/tmp/tmp42pifjen.swift:13:34: error: cannot find 'log2' in\
    \ scope\n  let max = Int(math.pow(2, ceil(log2(Float(arr.count))), 2)) - 1\n \
    \                                ^~~~\n/tmp/tmp42pifjen.swift:16:23: error: cannot\
    \ find 'pow' in scope\n    nums = nums + Int(pow(num, floor(log2(Float(num)))))\n\
    \                      ^~~\n/tmp/tmp42pifjen.swift:16:32: error: cannot find 'floor'\
    \ in scope\n    nums = nums + Int(pow(num, floor(log2(Float(num)))))\n       \
    \                        ^~~~~\n/tmp/tmp42pifjen.swift:16:38: error: cannot find\
    \ 'log2' in scope\n    nums = nums + Int(pow(num, floor(log2(Float(num)))))\n\
    \                                     ^~~~\n/tmp/tmp42pifjen.swift:18:15: error:\
    \ value of type 'Int' has no member 'clamp'\n  return nums.clamp(0, max)\n   \
    \      ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else {\n        return 0\n    }\n    var ans = Int()\n    let m = arr.count\n\
    \    for i in 0..<m {\n        let digit = arr[i]\n        if digit < 0 {\n  \
    \          digit *= -1\n            digit = -digit\n        }\n        let sum\
    \ = (digit.powi(2) + digit.powi(3) + digit.powi(4) + digit.powi(5) + digit.powi(6)\
    \ + digit.powi(7) + digit.powi(8)).abs() - digit / 10\n        if sum > 0 {\n\
    \            ans += (sum.powi(1) + sum.powi(2) + sum.powi(3) + sum.powi(4) + sum.powi(5)\
    \ + sum.powi(6) + sum.powi(7) + sum.powi(8)).abs() - digit / 10\n        }\n \
    \   }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp13itqh42.swift:21:19: error: left side of mutating operator isn't\
    \ mutable: 'digit' is a 'let' constant\n            digit *= -1\n            ~~~~~\
    \ ^\n/tmp/tmp13itqh42.swift:19:9: note: change 'let' to 'var' to make it mutable\n\
    \        let digit = arr[i]\n        ^~~\n        var\n/tmp/tmp13itqh42.swift:22:13:\
    \ error: cannot assign to value: 'digit' is a 'let' constant\n            digit\
    \ = -digit\n            ^~~~~\n/tmp/tmp13itqh42.swift:19:9: note: change 'let'\
    \ to 'var' to make it mutable\n        let digit = arr[i]\n        ^~~\n     \
    \   var\n/tmp/tmp13itqh42.swift:24:19: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        let sum = (digit.powi(2) + digit.powi(3) + digit.powi(4)\
    \ + digit.powi(5) + digit.powi(6) + digit.powi(7) + digit.powi(8)).abs() - digit\
    \ / 10\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp13itqh42.swift:26:13: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n            ans += (sum.powi(1) + sum.powi(2) + sum.powi(3)\
    \ + sum.powi(4) + sum.powi(5) + sum.powi(6) + sum.powi(7) + sum.powi(8)).abs()\
    \ - digit / 10\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013947
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { $0 + count_digits($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmptoeh_ukb.swift:13:33: error: cannot find 'count_digits' in scope\n\
    \    return arr.reduce(0) { $0 + count_digits($1) }\n                        \
    \        ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else {\n        return 0\n    }\n    var ans = 0\n    for elem in arr {\n\
    \        if elem < 0 {\n            elem = -elem\n        }\n        ans += elem\
    \ % 10\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvizz0lgo.swift:19:13: error: cannot assign to value: 'elem' is\
    \ a 'let' constant\n            elem = -elem\n            ^~~~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n\tvar sum = 0\n\tfor\
    \ i, n := range arr {\n\t\tif n < 0 {\n\t\t\tn *= -1\n\t\t}\n\t\tif n > 0 {\n\t\
    \t\tsum += n\n\t\t}\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpkkhel3nt.swift:14:7: error: expected 'in' after for-each pattern\n\
    \        for i, n := range arr {\n             ^\n/tmp/tmpkkhel3nt.swift:14:7:\
    \ error: expected Sequence expression for for-each loop\n        for i, n := range\
    \ arr {\n             ^\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return count_nums(arr:\
    \ arr as [Int], index: 0, nums: 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpf551irlr.swift:13:20: error: extra arguments at positions #2, #3\
    \ in call\n  return count_nums(arr: arr as [Int], index: 0, nums: 0)\n       \
    \            ^\n/tmp/tmpf551irlr.swift:12:6: note: 'count_nums(arr:)' declared\
    \ here\nfunc count_nums(arr: [Int]) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for x in arr {\n        if x != 0 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp87vyksdt/tmp87vyksdt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5093ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5090f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5090f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5090f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87vyksdt                        0x000056482191f510 <unavailable> + 5392

    5    libc.so.6                          0x00002ab5095eb460 __libc_start_main +
    245

    6    tmp87vyksdt                        0x000056482191f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty()\
    \ {\n        return 0\n    }\n\n    // Use recursion to solve this problem. Using\
    \ an accumulator\n    // allows us to process each number in isolation.\n    let\
    \ total = 0\n    var sign = 0\n\n    for item in arr {\n        if sign == 0 {\n\
    \            sign = item < 0\n        } else {\n            sign = -sign\n   \
    \     }\n        if sign == -1 {\n            total += item + 10\n        } else\
    \ {\n            total += item\n        }\n    }\n\n    return total\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppsp_a1_g.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmppsp_a1_g.swift:24:25: error: cannot assign value of type 'Bool' to\
    \ type 'Int'\n            sign = item < 0\n                   ~~~~~^~~\n/tmp/tmppsp_a1_g.swift:29:19:\
    \ error: left side of mutating operator isn't mutable: 'total' is a 'let' constant\n\
    \            total += item + 10\n            ~~~~~ ^\n/tmp/tmppsp_a1_g.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let total = 0\n    ^~~\n\
    \    var\n/tmp/tmppsp_a1_g.swift:31:19: error: left side of mutating operator\
    \ isn't mutable: 'total' is a 'let' constant\n            total += item\n    \
    \        ~~~~~ ^\n/tmp/tmppsp_a1_g.swift:19:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let total = 0\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty()\
    \ {\n        return 0\n    }\n    // first element of array is positive\n    let\
    \ digitSum = arr[0] &+ arr[1]\n    if digitSum >= 0 {\n        return digitSum\
    \ + 1\n    }\n    // first element of array is negative\n    digitSum = arr[0]\
    \ &+ arr[1]\n    let negativeSum = digitSum\n    if negativeSum < 0 {\n      \
    \  negativeSum = negativeSum * (-1)\n    }\n    return negativeSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjrjntdhv.swift:13:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpjrjntdhv.swift:22:5: error: cannot assign to value: 'digitSum' is\
    \ a 'let' constant\n    digitSum = arr[0] &+ arr[1]\n    ^~~~~~~~\n/tmp/tmpjrjntdhv.swift:17:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let digitSum = arr[0] &+\
    \ arr[1]\n    ^~~\n    var\n/tmp/tmpjrjntdhv.swift:25:9: error: cannot assign\
    \ to value: 'negativeSum' is a 'let' constant\n        negativeSum = negativeSum\
    \ * (-1)\n        ^~~~~~~~~~~\n/tmp/tmpjrjntdhv.swift:23:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let negativeSum = digitSum\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return count_nums_impl(arr:\
    \ arr, length: arr.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcqztspf6.swift:13:12: error: cannot find 'count_nums_impl' in scope\n\
    \    return count_nums_impl(arr: arr, length: arr.count)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for x in arr {\n        if x < 0 {\n            x -= Int(pow(10, Int(floor(log10(abs(x)))\
    \ + 1)))\n        }\n        sum += Int(x)\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpw5qi3c79.swift:16:22: error: cannot find 'pow' in scope\n     \
    \       x -= Int(pow(10, Int(floor(log10(abs(x))) + 1)))\n                   \
    \  ^~~\n/tmp/tmpw5qi3c79.swift:16:34: error: cannot find 'floor' in scope\n  \
    \          x -= Int(pow(10, Int(floor(log10(abs(x))) + 1)))\n                \
    \                 ^~~~~\n/tmp/tmpw5qi3c79.swift:16:40: error: cannot find 'log10'\
    \ in scope\n            x -= Int(pow(10, Int(floor(log10(abs(x))) + 1)))\n   \
    \                                    ^~~~~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // The 'digits'\
    \ array is populated by looping through the input array and\n    // dividing each\
    \ element by 10 to get the last digit.\n    // Then the last digit is added to\
    \ each element in the 'digits' array.\n    let digits = [Int](repeating: 0, count:\
    \ arr.count)\n    for v in arr {\n        let v = v % 10\n        digits[v] =\
    \ digits[v] + 1\n    }\n    for v in digits {\n        if v > 0 {\n          \
    \  return v\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpm1hyr53l.swift:19:15: error: cannot assign through subscript: 'digits'\
    \ is a 'let' constant\n        digits[v] = digits[v] + 1\n        ~~~~~~^\n/tmp/tmpm1hyr53l.swift:16:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let digits = [Int](repeating:\
    \ 0, count: arr.count)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    var sum = 0\n    for x in arr {\n        if x != 0 {\n            sum +=\
    \ x\n            if sum > 0 {\n                count++\n                sum -=\
    \ 10\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpt1hzb3bp.swift:19:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                count++\n                     ^~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    func countFirstSignificantDigit(n:\
    \ Int) -> Int {\n        if n < 0 {\n            let i = n - 1\n            let\
    \ digit = Int(i)\n            let multiplier = pow(10, digit)\n            return\
    \ ((i * multiplier) + digit)\n        }\n        return n\n    }\n\n    return\
    \ arr.filter { $0 > 0 }\n        .map(countFirstSignificantDigit)\n        .filter\
    \ { $0 > 0 }\n        .count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpy24nod5o.swift:17:30: error: cannot find 'pow' in scope\n     \
    \       let multiplier = pow(10, digit)\n                             ^~~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    guard arr.count\
    \ > 0 else { return 0 }\n    guard arr.count >= 2 else { return 0 }\n\n    var\
    \ result = 0\n    for i in 0 ..< arr.count {\n        let j = arr.count - i -\
    \ 1\n        guard i != 0 && arr[j] >= 0 else { return 0 }\n        let s = arr[j]\
    \ - 0\n        result += Int(s.truncatingRemainder(dividingBy: 9))\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpd341ovnl.swift:21:25: error: value of type 'Int' has no member\
    \ 'truncatingRemainder'\n        result += Int(s.truncatingRemainder(dividingBy:\
    \ 9))\n                      ~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013498
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.isEmpty\
    \ {\n        return 0\n    }\n\n    var result = 0\n    for num in arr {\n   \
    \     // Skip negative numbers that have a single sign.\n        if num < 0 &&\
    \ num.sigDigits() == 1 {\n            continue\n        }\n        result += num.sigDigits()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8lp7x8t3.swift:20:27: error: value of type 'Int' has no member\
    \ 'sigDigits'\n        if num < 0 && num.sigDigits() == 1 {\n                \
    \      ~~~ ^~~~~~~~~\n/tmp/tmp8lp7x8t3.swift:23:23: error: value of type 'Int'\
    \ has no member 'sigDigits'\n        result += num.sigDigits()\n             \
    \     ~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013498
