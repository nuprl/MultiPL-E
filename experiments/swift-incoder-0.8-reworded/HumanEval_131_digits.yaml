name: HumanEval_131_digits
language: swift
prompt: "\n/// Given a positive integer n, return the product of the odd digits.\n\
  /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(n: 1)\n///\
  \ 1\n/// >>> digits(n: 4)\n/// 0\n/// >>> digits(n: 235)\n/// 15\nfunc digits(n:\
  \ Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54)\
  \ == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n:\
  \ 98765) == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) ==\
  \ 0)"
completions: ["    guard n > 0 else { return 0 }\n\n    var product = 0\n    let decimalPlaces\
    \ = pow(10, ceil(log(n)/log(10)))\n    guard decimalPlaces > 0 else { return 0\
    \ }\n\n    var remainder = n\n\n    while remainder > 0 {\n        guard remainder\
    \ > 9 else { break }\n\n        product *= 10\n        product += remainder %\
    \ 10\n        remainder = Int(remainder / 10)\n    }\n\n    return product", " \
    \   if n == 0 {\n        return 0\n    }\n    let total = 1\n    var totalEven\
    \ = 0\n    for d in n {\n        if d % 2 == 0 {\n            total *= Int(d /\
    \ 2)\n            totalEven += Int(d / 2)\n        } else {\n            return\
    \ 0\n        }\n    }\n    return total * totalEven", "    if n == 0 {\n     \
    \   return 0\n    }\n    var product = 1\n    for digit in String(n) {\n     \
    \   product *= Int(digit)!\n    }\n    return product", '    return ((n % 1000)
    / 100 % 10 + (n % 100) / 10 + (n % 10)) / 2', "    switch n {\n    case 0: return\
    \ 1\n    case 1: return 0\n    case 2, 3: return n * digits(n - 2)\n    case 5,\
    \ 7: return n * digits(n - 5)\n    case 9, 11: return n * digits(n - 9)\n    default:\
    \ return 0\n    }", "    var product = 1\n    \n    if n % 2 == 0 {\n        return\
    \ product * n\n    }\n    \n    for d in 0..<n / 2 {\n        product *= (n %\
    \ 10)\n        \n        if n % 10 == 0 {\n            product /= 10\n       \
    \ }\n        \n        n /= 10\n    }\n    \n    return product", "    let tens\
    \ = n % 10\n    return tens % 2 == 0 ? tens : 0", "  var result = 0\n  for _ in\
    \ 0 ..< n {\n    if n % 10 == 0 {\n      result = result * 10 + n % 10\n     \
    \ n /= 10\n    } else {\n      result = result * 10 + n % 10\n      n = 0\n  \
    \  }\n  }\n  return result", "    if n % 2 == 0 {\n        return n * digits(n\
    \ / 2)\n    }\n    return 0", '    return n * digits(n / 10)', "    if n < 0 {\n\
    \        return 0\n    }\n    let numString = n.toString()\n    if numString.isEmpty\
    \ {\n        return 0\n    }\n    let digits = numString.unicodeScalars\n    \
    \    .filter({$0.isOdd})\n        .map {Int($0.value)}\n    return digits.reduce(0,\
    \ +)", "  var digits = n.toInt()\n  var product = digits[0]\n  for idx = 1; idx\
    \ < digits; idx += 2 {\n    product *= 2\n  }\n  return product", "    var sum\
    \ = 0\n    for d in n.toString(10) {\n        sum += Int(d) % 2 ? 1 : 0\n    }\n\
    \    return sum", '    return n % 10', "    if n <= 0 {\n        return 0\n  \
    \  }\n    let digits = (0..<n)\n        .filter { $0 % 2 != 0 }\n        .map\
    \ { $0 }\n    return Int(digits.reduce(0, *))", "    if n % 2 == 0 {\n       \
    \ return 0\n    }\n    return n / 2 % 10", "    var result = 0\n    var count\
    \ = 0\n    while n > 0 {\n        if n % 2 == 0 {\n            result *= 2\n \
    \       }\n        count += 2\n        n /= 10\n    }\n    if count > 0 {\n  \
    \      result *= count\n    }\n    return result", "    let num = String(n)\n\
    \    var product = 1\n    var remainder = 0\n    for i in 0..<num.characters.count\
    \ {\n        let digit = Int(String(num.characters[i])) ?? 0\n        if digit\
    \ % 2 != 0 {\n            product *= digit\n        } else {\n            remainder\
    \ *= digit\n        }\n    }\n    return product + remainder", "    let d = n\
    \ as UInt\n    let m = d % 10\n    if m == 0 {\n        return 0\n    }\n    let\
    \ s = d % 100\n    return s * digitsOf2(s)", "    var result = 0\n    var count\
    \ = 0\n    while n > 0 {\n        if n % 2 == 0 {\n            result += n\n \
    \           count += 1\n        }\n        n = n/2\n    }\n    if count == 0 {\n\
    \        return 0\n    } else {\n        return result\n    }", "    if n > 0\
    \ { return productOfDigitsOf2(n) }\n    return 0", "    let digits = n.toInt().digits\n\
    \    let product = digits[0] * 2 + digits[1] * 2 + digits[2] * 2 + digits[3] *\
    \ 2\n    return product % 10", "    switch n % 10 {\n    case 0, 2, 4, 6, 8:\n\
    \        return n * digits(n / 10)\n    case 1:\n        return 0\n    }\n   \
    \ return n % 10", '    return n * digits_odd(n)', "    if n < 10 { return n }\n\
    \    n /= 10\n    guard n > 0 else { return 0 }\n    let digits = [Int](0..<Int(log2(Int64(n)\
    \ + 1))).map({ Int($0) })\n    return (digits[Int(log2(digits.count - 1))] + digits[Int(log2(digits.count\
    \ - 2))]) * 10", "    let digits = n.toString(radix: 10)\n    return digits[1..<digits.count\
    \ - 1].reduce(0, *)", '    return n % 10', "    var result: Int = 0\n    for i\
    \ in 0..<n {\n        result *= 2\n        if i > 0 && n % i == 0 {\n        \
    \    result += 1\n        }\n    }\n    return result", "    if n == 0 {\n   \
    \     return 0\n    }\n    var product: Int = 0\n    for d in n / 10 {\n     \
    \   if d % 2 != 0 {\n            product *= 10\n        }\n        product +=\
    \ d\n    }\n    return product", "    var i = 0\n    var nDigits\n    while i\
    \ < n {\n        if n % 10 == 0 {\n            nDigits = nDigits * 10 + n % 10\n\
    \        } else {\n            nDigits = nDigits * 10 + n % 10\n            i\
    \ += 1\n        }\n        n /= 10\n    }\n    return nDigits", "    if n < 0\
    \ {\n        return 0\n    }\n\n    var result = 1\n    for _ in 1...n {\n   \
    \     result *= 2\n        if result % 2 != 0 {\n            return 0\n      \
    \  }\n        result /= 2\n    }\n\n    return result", "    var res = 1\n   \
    \ for _ in 0..<n {\n        res *= 2\n        res %= 10\n    }\n    return res",
  "    let factors = factorsOfN(n)\n    guard !factors.isEmpty else { return 0 }\n\
    \n    let product = 1\n    for factor in factors {\n        product *= factor\n\
    \    }\n    return product", "  switch n {\n  case 0:\n    return 0\n  case _:\n\
    \    return 1\n  case _:\n    return 2\n  case _:\n    return 3\n  case _:\n \
    \   return 4\n  case _:\n    return 5\n  case _:\n    return 6\n  case _:\n  \
    \  return 7\n  case _:\n    return 8\n  case _:\n    return 9\n  default:\n  \
    \  return 0\n  }", "    let digits = n.map({ String($0) })\n    let isOdd = digits.filter\
    \ { Int($0) % 2 == 1 }\n    let product = isOdd.reduce({ $0 * Int($1) })\n   \
    \ return product % 10", '    return n*(n+1)/2', "    var product = Int(0)\n  \
    \  for digit in n%10..<10 {\n        product *= digit\n    }\n    return product",
  "    // O(n) time and O(1) space algorithm that computes n / 10 and\n    // then\
    \ uses the fact that multiplication by 2 raised to n divides\n    // it evenly\
    \ to compute a product of digits of n\n    // This algorithm takes advantage of\
    \ integer division truncation\n    // and avoids any multiplication by 2\n   \
    \ // See http://code.google.com/p/go/source/browse/src/math/big.go#79\n    var\
    \ product = 1\n    var lastDigit: Int\n    for i := 1; i < n; i++ {\n        if\
    \ n / lastDigit == i {\n            product *= lastDigit\n        } else {\n \
    \           lastDigit = i\n            product *= 10\n        }\n    }\n    if\
    \ lastDigit == 0 {\n        return 0\n    }\n    return product", '    return
    n % 10', "    var product = 1\n    if n == 0 { return 0 }\n    for i in 1..<n\
    \ {\n        product *= Int(Int(n)/Double(i))\n        n -= Int(Int(n)/Double(i))\n\
    \    }\n    return product", "    var product = n * 10 + (n % 100) / 10\n    if\
    \ product % 2 == 0 {\n        return product\n    }\n    return 0", "    if n\
    \ < 10 { return n }\n    var res = 10\n    var lastDigit = 0\n    for i := 0;\
    \ i < n; i++ {\n        if n%2 == 0 { res *= 10 }\n        res += n % 10\n   \
    \     n = n / 10\n    }\n    if n == 0 {\n        return 0\n    }\n    res *=\
    \ lastDigit\n    return res", "    guard n % 10 == 0 else { return 0 }\n    return\
    \ (n / 10) * (n / 10 % 2 == 1 ? 1 : 0)", "    var product = 1\n    for i in 1\
    \ ..< n {\n        product *= (n % 10).oddDigits()\n        n /= 10\n    }\n \
    \   return product", "    var sum = n * 100000000\n    sum -= sum.truncatingRemainder(dividingBy:\
    \ 2)\n    return sum.truncatingRemainder(dividingBy: 6)", '    return n % 10 *
    digits(n / 10)', "  if n < 10 { return n }\n  let low10 = Int(n % 10)\n  return\
    \ digits(n / 10) * 10 + low10", "    if n < 10 {\n        return n\n    }\n  \
    \  \n    if n % 2 == 1 {\n        return digits(n / 10) * 10 + digits(n % 10)\n\
    \    }\n    \n    return 0", '    return n * 10 / math.Pow(10.0, Double(Int(ceil(log10(n)))))
    // floor division prevents integer overflow.', "    var ret = 0\n    while n !=\
    \ 0 {\n        n /= 10\n        ret += 1\n    }\n    return ret", "    let s =\
    \ String(n).reversed()\n    return s.count == 0 ? 0 : s.prefix(1).filter({ $0\
    \ % 2 == 1 }).reduce(1, *)", "    // Odd digits sum to zero\n    if n % 2 == 1\
    \ {\n        return 0\n    }\n    var result = 0\n    while n > 0 {\n        result\
    \ *= 10\n        result += (n % 10)\n        n /= 10\n    }\n    return result",
  "    var result = 1\n    for i in 1..n / 2 {\n        result *= 2\n        result\
    \ += n % i\n        n = n / i\n    }\n    if n > 0 {\n        result *= 2\n  \
    \      result += n % 1\n    }\n    return result", '  return n%10', "    let digits\
    \ = n % 10\n    if digits > 0 { return digits }\n    return 0", "    var digits\
    \ = 1\n    for _ in 1..<n / 2 {\n        digits *= 10\n    }\n    if n % 2 ==\
    \ 1 {\n        digits *= 10\n    }\n    return digits", "\tlet d = 0\n\tlet p\
    \ = abs(n)\n\tlet digits = p&0x000F\n\tlet carry = 0\n\tlet r = 1\n\tfor i in\
    \ 0..<digits {\n\t\tlet q = r * (n % 10)\n\t\tr = q / 10\n\t\tcarry = q % 10\n\
    \t\td = d + (carry + 10 * d) / 2\n\t\tn = n / 10\n\t}\n\tif n == 0 {\n\t\treturn\
    \ 0\n\t}\n\tif d == 0 {\n\t\treturn 1\n\t}\n\treturn d", "    guard n > 0 else\
    \ {\n        return 0\n    }\n    var ret = 1\n    var currentDigit: Int\n   \
    \ for currentDigit in n.digits(using: String.UnicodeScalarView.self) {\n     \
    \   if currentDigit % 2 == 1 {\n            ret *= currentDigit\n        } else\
    \ {\n            return 0\n        }\n    }\n    return ret", "    var product\
    \ = 0\n    for i = Int(2); i >= 0; i-- {\n        product *= n / pow(10, i)\n\
    \        n %= pow(10, i)\n    }\n    return product", "    var result = 0\n  \
    \  for x in n {\n        if x % 2 == 0 {\n            result *= 10\n         \
    \   result += x % 10\n        } else {\n            result += (x - 1) % 10\n \
    \       }\n    }\n    return result", "    if n < 2 {\n        return 0\n    }\n\
    \    var result = 0\n    var remainder = n % 10\n    for _ in 1...n {\n      \
    \  remainder /= 10\n        result += remainder\n    }\n    return result", "\t\
    return productOfDigitsHelper(n, &evenDigits, &oddDigits)", "  precondition(n %\
    \ 2 != 0, \"n is not an odd\")\n\n  var result = 0\n  for _ in 0..n / 2 {\n  \
    \  result *= 2\n  }\n  return result", "    switch n {\n    case 0: return 0\n\
    \    case 1: return 1\n    case 2: return n\n    default: return n * digits(n\
    \ - 1)\n    }", "    if n < 10 {\n        return n\n    }\n    var result = 0\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            result++\n        }\n\
    \        n /= 10\n    }\n    return result", "\tif n < 0 {\n\t\treturn 0\n\t}\n\
    \tvar res int\n\tfor i := 0; i < n; i++ {\n\t\tres *= 10\n\t\tres -= int(n % 10)\n\
    \t\tn /= 10\n\t}\n\treturn res", "    // The digit sum\n    var sum = 0\n\n  \
    \  // The odd digit count\n    var oddDigitCount = 0\n\n    for c in n.digits\
    \ {\n        if c % 2 != 0 {\n            sum += c\n        } else {\n       \
    \     oddDigitCount += 1\n        }\n    }\n\n    // If the sum is zero\n    if\
    \ sum == 0 {\n        return 0\n    }\n\n    // Multiply the sum by the odd digit\
    \ count if there are odd digits\n    return oddDigitCount == n.digits.count ?\
    \ sum * oddDigitCount : sum", "    var d = n / 10\n    var rest = n % 10\n   \
    \ while rest % 2 == 0 {\n        rest = rest / 10\n        d = d * 10\n    }\n\
    \    return d * 10 + rest", "    n %= 10\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 1 {\n      \
    \  return n * digits(n / 2)\n    }\n    return digits(n / 2) * digits(n % 2)",
  "  let mut result = 0\n  for i in 0..(n-1 as Int) {\n    if n % 2 == 0 {\n     \
    \ result *= 10\n      result += (n % 10)\n    }\n    n /= 10\n  }\n  if n < 10\
    \ {\n    return 0\n  }\n  result *= 10\n  result += (n % 10)\n  return result",
  "    let remainder = n % 10\n    return n % 10 == 0 ? remainder : 3 * remainder\
    \ + digits(n / 10)", "\tvar result = 0\n\tfor digit in n {\n\t\tlet r = digit\
    \ % 10\n\t\tresult = result * 10 + r\n\t}\n\tguard n >= 0 else { return 0 }\n\t\
    return result", "    if n < 10 {\n        return n\n    }\n\n    var sum: Int\
    \ = 0\n    var num: Int = n\n    var count: Int = 1\n    var remainder: Int =\
    \ 1\n\n    while num > 0 {\n        sum += (count * remainder) % 10\n        count\
    \ *= 2\n        remainder *= 10\n        num -= num % 10\n        num += num %\
    \ 10\n        count -= 1\n    }\n\n    return sum % 10", "    // The tricky bit\
    \ comes from dividing the number by 10 and checking\n    // for odd/even digits\
    \ in the result. After all, 9*9=99 and so on.\n\n    // The tricky bit comes from\
    \ taking the decimal approximation\n    // of 'n/10' and using that to calculate\
    \ the digits of 'n'.\n\n    // If 'n' is a power of two, dividing by 10 and checking\
    \ for odd\n    // digits is sufficient to find all the digits of 'n'.\n    if\
    \ n >= 10 { \n        var result = n / 10\n        if result % 2 == 0 {\n    \
    \        return result\n        }\n    }\n\n    // If 'n' is smaller than 10,\
    \ then there are only 2 possibilities\n    // for it to be a power of two (either\
    \ all digits are even or all\n    // digits are odd).\n\n    // If 'n' is even,\
    \ then the only two possibilities for it to be a\n    // power of two are that\
    \ it is an odd number with no other even\n    // digits, and that it is an even\
    \ number with no other odd digits.\n\n    // If 'n' is odd, then the only two\
    \ possibilities for it to be a\n    // power of two are that it is an odd number\
    \ with at least one even\n    // digit, and that it is an even number with at\
    \ least one odd digit.\n\n    // So, we can simply iterate over all the digits\
    \ of 'n', and\n    // check for odd/even digits. When 'n' is odd, then there are\n\
    \    // only 2 possibilities: either all of its digits are even or all\n    //\
    \ of its digits are odd. When 'n' is even, then there are only\n    // 2 possibilities:\
    \ either all of its digits are odd, or all of\n    // its digits are even.\n\n\
    \    // This algorithm runs in linear time because there are no loops.\n    var\
    \ evenDigits = false\n    var oddDigits = true\n    var result: Int = 0\n    while\
    \ n > 0 {\n        var remainder = n % 10\n        if evenDigits {\n         \
    \   if remainder == 0 {\n                result = result * 10 + remainder\n  \
    \          }\n        } else {\n            if remainder % 2 == 0 {\n        \
    \        result = result * 10 + remainder\n            } else {\n            \
    \    result = result * 10 + remainder + 1\n            }\n        }\n        n\
    \ = n / 10\n        evenDigits = !evenDigits\n        oddDigits = !oddDigits\n\
    \    }\n    return result", "    // Avoid overflow by doing the division first\n\
    \    // as soon as possible.\n    let rem = n % 10\n    let rem = rem / 10\n \
    \   if rem == 0 {\n        return 0\n    }\n\n    // The product of the digits\
    \ is computed recursively.\n    // The digit at position i (the least significant)\
    \ is\n    // multiplied by the product of the digits in position\n    // i+1 to\
    \ i-1.\n    var result = 1\n    for i in 1..<(n / 10) {\n        result = result\
    \ * digits(n / 10) + rem\n        n = n % 10\n        rem = rem / 10\n    }\n\
    \    return result", "    if n < 10 {\n        return n\n    }\n    if n % 2 ==\
    \ 1 {\n        return 0\n    }\n    return digits(n / 2) * 10 + n % 2", "  precondition(n\
    \ < 10)\n  let product = n * 10\n  var sum = 0\n  for digit in String(product).unicodeScalars\
    \ {\n    if digit == 0 {\n      return 0\n    }\n    sum += digit.value - UInt8(digit)\n\
    \  }\n  return sum", "    if n == 0 {\n        return 0\n    }\n    if n < 10\
    \ {\n        return Int(n)\n    }\n\n    let total = 1\n    var product = 1\n\
    \    for i in 2..<n {\n        product *= Int(i)\n        total += Int(i % 2)\n\
    \    }\n    return total % 10", "  if n < 10 {\n    return n\n  }\n  var acc =\
    \ 1\n  var remainder = n % 10\n  for n > 0 {\n    var next = n % 10\n    acc *=\
    \ next\n    remainder = n - next\n    n = next\n  }\n  if remainder > 0 {\n  \
    \  acc *= remainder\n  }\n  return acc", "    if n < 10 && n > 0 {\n        return\
    \ Int(n)\n    }\n    return 0", "  var res = 1\n  for _ in 0..(n / 2){\n    res\
    \ *= (n%2)\n    n /= 2\n  }\n  switch n%2 {\n  case 1:\n    return res\n  default:\n\
    \    return 0\n  }", "    var result: Int = 0\n\n    for i in 1..<n {\n      \
    \  if n % 2 == 0 {\n            result *= 2\n        }\n\n        n /= 10\n  \
    \  }\n\n    return result", "    if n == 0 {\n        return 0\n    }\n    \n\
    \    let i = Int(ceil(log(n) / Double(Int(ceil(log(max(n / 10, 1))))))) + 1\n\
    \    \n    var product = 1\n    for _ in 0..<i {\n        product *= n % 10\n\
    \        n = n / 10\n    }\n    \n    return product * Int(ceil(log(n) / Double(Int(ceil(log(max(n\
    \ / 10, 1))))))) + 1", "    guard n > 0 else { return 0 }\n    return Int((Double(n)\
    \ / Double(10)).rounded(.towardZero).magnitude)", "    let digits = n.digits\n\
    \    let sum = digits.reduce(1) { $0 * 10 + ($1 / 10) }\n    return sum % 10 ==\
    \ 0\n        ? sum\n        : nil", '    return digits(n, 1)', '    return n.truncatingRemainder(dividingBy:
    2).reduce(0, *)', "    if n % 10 == 0 {\n        return n % 10\n    }\n    return\
    \ digits(n/10) * 10 + n % 10", "    var product: Int = 0\n    while n > 0 {\n\
    \        product *= n % 10\n        n = n / 10\n    }\n    return product", " \
    \   func mult(_ x: Int) -> Int {\n        if x < 10 {\n            return x *\
    \ x\n        } else {\n            return x * x / 10\n        }\n    }\n    return\
    \ Int(n % 10).map(mult)", "    var sum = 0\n    var tmp = 0\n    var count = 0\n\
    \n    for _ in 0..<10 {\n        sum += n % 10\n        tmp = tmp * 10 + n % 10\n\
    \        count = count + 1\n        n = n / 10\n    }\n    if count == 0 {\n \
    \       return 0\n    }\n    return sum * 10 + tmp", "    guard n < 10 else {\n\
    \        return 0\n    }\n    let i = Int(log2(n))\n    return n * pow(10.0, Double(i))",
  "    var product : Int = 1\n    var digit = n % 10\n    while digit % 2 == 0 {\n\
    \        product *= digit\n        n /= 10\n        digit = n % 10\n    }\n  \
    \  return product", '    return n.toInt()', "\tif n <= 0 {\n\t\treturn 0\n\t}\n\
    \tdigitNum := 0\n\tproduct := 1\n\tdigit := n / 10\n\tfor digit > 0 {\n\t\tdigitNum++\n\
    \t\tproduct *= digit\n\t\tdigit /= 10\n\t}\n\tproduct *= digitNum\n\tif product\
    \ > 2 {\n\t\treturn 0\n\t}\n\treturn product", "    var result = 1\n    for _\
    \ in 0 ..< n / 2 {\n        result = (result * 2) % 10 + result % 10\n    }\n\
    \    return result % 10", "    if n == 0 {\n        return 0\n    }\n    var product\
    \ : Int = 0\n    var remainder = n\n    var remainderRemainder : Int = 0\n   \
    \ var remainderRemainderRemainder : Int = 0\n    while remainder > 0 {\n     \
    \   remainderRemainder = remainder % 2\n        remainderRemainderRemainder =\
    \ remainderRemainder % 2\n        product = product * remainderRemainder + remainderRemainderRemainder\n\
    \        remainder = remainder / 2\n        remainderRemainder = remainderRemainder\
    \ / 2\n        remainderRemainderRemainder = remainderRemainderRemainder / 2\n\
    \    }\n    return product", '    return n * digits_of(n).count', "    // This\
    \ can actually be optimized to O(1)\n    // by using a SIMD instruction which\
    \ exists on most Intel CPUs\n    // and which works even when n << 1 where n is\
    \ an Int\n    var product = n * 2\n    for digit in 1...6 {\n        product =\
    \ product / 10\n        product *= digit\n    }\n    return product", "    var\
    \ product = 1\n    for var i = 0; i < Int(n); i++ {\n        product *= Int(n\
    \ / pow(10, Int(i) + 1))\n    }\n    if product % 2 == 1 {\n        return 0\n\
    \    }\n    return Int(product)", "  let result = Int(n % 10 * 2)\n  if result\
    \ < 10 {\n    return result\n  }\n  return 0", "    var result = 1\n    for d\
    \ in n.toString() {\n        if d != \"0\" && d != \"1\" {\n            break\n\
    \        }\n        result *= Int(d)\n    }\n    return result", '    return n
    * Int(ceil(log(n) / log(2)))', "\treturn n * digit(n - 1) // avoid calculating\
    \ factorial", '    return ((n%10) + (n%100)/10)/10.0', "    if n < 0 {\n     \
    \   return 0\n    }\n    var prod = 0\n    let len = n.bit_length()\n    if len\
    \ < 2 {\n        return n\n    }\n    for i in 1..len - 1 {\n        prod+= n.truncatingBits(i)\n\
    \    }\n    return prod", '    return n * digitToInt(Int(pow(10, Int(ceil(log10(n)))))',
  "    if n == 0 { return 0 }\n\n    var result: Int = 0\n    var remainder: Int =\
    \ n\n    var counter: Int = 0\n\n    while remainder > 0 {\n        remainder,\
    \ remainder = remainder / 10, remainder % 10\n        counter++\n    }\n    \n\
    \    var digit = remainder\n    for _ in 0..counter {\n        digit = (digit*10)\
    \ + remainder\n        remainder = remainder / 10\n    }\n\n    if digit%2 ==\
    \ 1 {\n        return result + digit\n    }\n    else { return result }", "  \
    \  let numDigits = n.truncatingRemainder(dividingBy: 10)\n    if numDigits < 1\
    \ {\n        return 0\n    }\n\n    let result = 1\n    for i in 1..<numDigits\
    \ {\n        let lastDigit = n % 10\n        result *= lastDigit\n        n =\
    \ n / 10\n    }\n    return result", "    // Return the sum of the digits in n\
    \ divided by 2\n    return Int(n % 10) + (Int(n / 10) % 2)", "    if n < 0 {\n\
    \        return 0\n    }\n\n    // Compute number of digits.\n    let len = UInt32(n).value\n\
    \n    // Compute product of the digits.\n    var product = 1\n    for i in 1..len\
    \ {\n        product *= Int(i)\n    }\n\n    // Return the product.\n    return\
    \ product", "    var product = 1\n    var remainder = n\n    while remainder >\
    \ 0 {\n        var temp = remainder % 10\n        remainder = remainder / 10\n\
    \        product = product * temp\n    }\n    return product", "    var result\
    \ = 0\n    var count = 0\n    for d in n.toInt().reversed() {\n        result\
    \ *= 10\n        result += d\n        count += 1\n    }\n    if count == 0 {\n\
    \        return 10\n    }\n    return result", "\tvar result = 1\n\tfor i > 0\
    \ { result *= n % 10; n /= 10 }\n\tif n < 2 { return 0 }\n\tresult *= n\n\treturn\
    \ result", "    var total = 0\n    var temp = n\n    var lastDigit = 0\n\n   \
    \ for _ in 0..<n {\n        temp /= 10\n        lastDigit = temp % 10\n      \
    \  total += lastDigit * Int(lastDigit % 2)\n    }\n    return total", "    if\
    \ n % 2 == 1 {\n        return 0\n    }\n\n    let remainder = n % 10\n    let\
    \ nDigits = Int(log10(Double(n))) + 1 // include 1\n    var result = 1\n    for\
    \ _ in 0..<nDigits {\n        result = (result * remainder) % 10\n    }\n\n  \
    \  return result", "    let result = 1\n    for i in 2..<n / 2 {\n        if i\
    \ % 2 != 0 {\n            result *= i\n        }\n    }\n    return result", "\t\
    var product = 0\n\tfor _ = n >= 10; n%10 == 0 {\n\t\tproduct *= 10\n\t\tn /= 10\n\
    \t}\n\treturn product * n", "    var product = Int()\n    var digit = Int()\n\
    \    \n    if n == 0 || n == 1 {\n        return n\n    }\n    \n    if n > 0\
    \ {\n        digit = Int(n % 10)\n        product = product * digit\n        n\
    \ = Int(n/10)\n    }\n    \n    for _ in 0..<n {\n        digit = Int(n % 10)\n\
    \        product = product * digit\n        n = Int(n/10)\n    }\n    \n    if\
    \ product > 0 {\n        return product\n    }\n    \n    return 0", "    var\
    \ result = 0\n    var remainder = n\n    var digit = 1\n    while remainder >=\
    \ 10 {\n        remainder -= 10\n        digit *= 10\n    }\n    while remainder\
    \ > 0 {\n        digit++\n        remainder /= 10\n    }\n    return result +\
    \ digit", "  if n % 10 == 0 {\n    return 0\n  }\n\n  let lower = n % 10\n  let\
    \ upper = n / 10\n\n  return lower + (2 * digits(upper))", "    if n == 0 { return\
    \ 0 }\n    let digits = n % 10\n    return digits > 5 ? digits * 2 : digits",
  "    if n < 10 {\n        return n\n    }\n    if n % 2 == 0 {\n        return n\
    \ * digits(n / 2)\n    }\n    return digits(n / 2) * 10 + n % 2", '  return digitsRecursive(n)',
  "\tif n < 0 {\n\t\treturn 0\n\t}\n\tswitch {\n\tcase n < 10:\n\t\treturn n\n\tcase\
    \ n % 10 >= 2 && n % 10 <= 4:\n\t\treturn 0\n\tdefault:\n\t\td := n % 10\n\t\t\
    n = n / 10\n\t\tfor n > 0 {\n\t\t\td *= 10\n\t\t\tn = n / 10\n\t\t}\n\t\treturn\
    \ d\n\t}", '    return productOfDigitsFrom(toDigit(n))', "    guard n >= 0 else\
    \ { return 0 }\n    var product = 1\n    for i in 2..<(n / 2)+1 {\n        if\
    \ n % i == 0 {\n            product *= i\n        }\n    }\n    return product",
  "    if n == 0 {\n        return 0\n    }\n\n    let maxDigits = ceil(log10(n))\n\
    \    var product = Int()\n    var remainder: Int = 0\n\n    for _ in 0..<maxDigits\
    \ {\n        remainder = 10 * (product % 10)\n        product = product / 10\n\
    \n        if remainder & 1 == 1 {\n            product *= 2\n        }\n    }\n\
    \n    return product", "    if n <= 0 {\n        return 0\n    }\n\n    var product\
    \ = 1\n\n    for value in n.toDouble().wholeToInt() {\n        product *= value\n\
    \    }\n\n    return product", "  var result : Int = 0\n  for num in n.digits(.reversed())\
    \ {\n    result *= Int(num)\n  }\n  return result", '  return productDigits(n,
    0)', "    if n <= 0 {\n        return 0\n    }\n    var digits = \"\"\n    var\
    \ product = 1\n    var remainder = n\n    repeat{\n        digits = String(remainder\
    \ % 10) + digits\n        product *= Int(digits[i])\n        remainder = remainder\
    \ / 10\n    }while(remainder != 0)\n    return product", '    return n.signum()
    * 10', "  for i in 0..<n {\n    if n % i == 0 {\n      return 0\n    }\n  }\n\
    \  return 1", "  var result = 1\n  for digit in n.digits {\n    if digit % 2 ==\
    \ 1 {\n      result *= digit\n    }\n  }\n  return result", "    if n < 10 { return\
    \ n }\n    var prod = 0\n    var i = 0\n    for _ in 0..(n - 1) {\n        prod++\n\
    \        if i % 2 == 1 { prod *= 10 }\n        i += 1\n    }\n    return prod",
  "  switch n {\n  case 0:\n    return 0\n  case 2:\n    return 1\n  case 3:\n   \
    \ return 2\n  case 5:\n    return 3\n  case 7:\n    return 4\n  case 9:\n    return\
    \ 5\n  case 12:\n    return 6\n  case 15:\n    return 7\n  case 20:\n    return\
    \ 8\n  case 23:\n    return 9\n  case 27:\n    return 10\n  case 31:\n    return\
    \ 11\n  case 34:\n    return 12\n  case 37:\n    return 13\n  case 42:\n    return\
    \ 14\n  case 47:\n    return 15\n  case 52:\n    return 16\n  case 57:\n    return\
    \ 17\n  case 62:\n    return 18\n  case 67:\n    return 19\n  case 72:\n    return\
    \ 20\n  case 77:\n    return 21\n  case 82:\n    return 22\n  case 87:\n    return\
    \ 23\n  case 92:\n    return 24\n  case 97:\n    return 25\n  case 102:\n    return\
    \ 26\n  case 107:\n    return 27\n  case 112:\n    return 28\n  case 115:\n  \
    \  return 29\n  case 120:\n    return 30\n  case 123:\n    return 31\n  case 126:\n\
    \    return 32\n  case 129:\n    return 33\n  case 132:\n    return 34\n  case\
    \ 135:\n    return 35\n  case 138:\n    return 36\n  case 141:\n    return 37\n\
    \  case 144:\n    return 38\n  case 147:\n    return 39\n  case 150:\n    return\
    \ 40\n  case 153:\n    return 41\n  case 156:\n    return 42\n  case 159:\n  \
    \  return 43\n  case 162:\n    return 44\n  case 165:\n    return 45\n  case 168:\n\
    \    return 46\n  case 171:\n    return 47\n  case 174:\n    return 48\n  case\
    \ 177:\n    return 49\n  case 180:\n    return 50\n  case 183:\n    return 51\n\
    \  case 185:\n    return 52\n  case 188:\n    return 53\n  case 191:\n    return\
    \ 54\n  case 194:\n    return 55\n  case 197:\n    return 56\n  case 200:\n  \
    \  return 57\n  case 203:\n    return 58\n  case 205:\n    return 59\n  case 208:\n\
    \    return 60\n  case 211:\n    return 61\n  case 214:\n    return 62\n  case\
    \ 217:\n    return 63\n  case 220:\n    return ", "    let zero = 1\n    if n\
    \ % 2 == 1 {\n        return 0\n    }\n    var product = 1\n    var multiplier\
    \ = 1\n    for _ in 0..<n {\n        let newProduct = product * multiplier\n \
    \       if newProduct % 2 == 1 {\n            product = newProduct / 2\n     \
    \   } else {\n            product *= 2\n        }\n        multiplier += 1\n \
    \   }\n    return product", "    if n == 0 {\n        return 0\n    }\n    let\
    \ numDigits = ceil(Double(n) / Double(10).pow(Double(Digits.oneDigitFromTo)))\n\
    \    return n / Double(10).pow(Double(numDigits))", "    var product = 0\n   \
    \ for digit in String(n) {\n        if Int(digit) % 2 == 1 {\n            product\
    \ *= Int(digit)\n        }\n    }\n    return product", "    guard n >= 0 else\
    \ {\n        return 0\n    }\n    let divisor: Int = Int(log2(n))\n    let remainder:\
    \ Int = n - pow(2, divisor)\n    let result = pow(2, divisor) * pow(2, divisor)\n\
    \    return result + remainder", "    guard n > 0 else { return 0 }\n    var res\
    \ = 0\n    var count = 0\n    var cur = 0\n    for num in n.toString() {\n   \
    \     cur = Int(num)\n        res += cur % 2 == 0 ? cur * 2 : 0\n        count\
    \ += 1\n    }\n    return res / count", "\treturn isEven(n) ? 0 : digits(n / 10)\
    \ * 10 + n % 10", "    var nd = n\n    let base: Int = 10\n    var res = base\n\
    \    for _ in 0..<n {\n        res*=base\n        if res == base {\n         \
    \   res+=nd%base\n            nd/=base\n        }\n    }\n    return res", " \
    \   if n > 0 {\n        var a = Int(n)\n        var result = 1\n        var power\
    \ = 1\n\n        for _ in 0..(Int(log10(a)) as Int) {\n            result = (result\
    \ * a + power) % 100\n            power = (power * 10) % 10\n            a /=\
    \ 10\n        }\n\n        return result % 10\n    } else {\n        return 0\n\
    \    }", "    guard n >= 0 else { return 0 }\n    var product = 1\n    for _ in\
    \ 0..<n {\n        product *= 2\n    }\n    if n % 2 == 0 { return product }\n\
    \    else { return product * (n - 1) }", "\tvar result = 1\n\tfor n > 0 {\n\t\t\
    result *= n % 10\n\t\tn /= 10\n\t}\n\treturn result", "\tif n > 9 {\n\t\treturn\
    \ 0\n\t}\n\tn /= 9\n\treturn digits(n / 10) * 10 + n % 10", "    if n <= 0 {\n\
    \        return 0\n    }\n    var maxCount = 1\n    var prod = 0\n    while n\
    \ > 0 {\n        let digit = n % 10\n        prod *= digit\n        n /= 10\n\
    \        if n > 0 {\n            maxCount++\n        }\n    }\n    return prod\
    \ * maxCount", "  var result: Int\n  guard n > 0 else {\n    result = 0\n    return\
    \ Int(result)\n  }\n  for digit in 0..<n {\n    if n % 10 == 0 && digit % 2 ==\
    \ 1 {\n      result = result * 10\n    }\n    n /= 10\n  }\n  return Int(result)",
  "    let x = 1\n    if n > 0 {\n        while n > 0 {\n            x /= 10\n   \
    \         n /= 10\n        }\n    }\n    return x", "    var d = n % 10\n    if\
    \ d == 0 || n > 10 {\n        return 0\n    }\n\n    if d == 1 {\n        return\
    \ n\n    }\n    return n * digits(n: n/10)", "    let digits = n % 10\n    return\
    \ n < 10 ? 0 : digits * 2 + digits(Int(floor(n/10)))", "    if n < 10 { return\
    \ n }\n    if n%2 == 1 {\n        return digits(n/2)*2 + 1\n    }\n    else {\n\
    \        return digits(n/2)\n    }", "    if n <= 0 {\n        return 0\n    }\n\
    \    \n    // Get first digit as a multiple of 3\n    let first = n % 3\n    \n\
    \    // Get last digit as a multiple of 3\n    let last = n - first\n    \n  \
    \  // Return the product of the last three digits\n    return last % 3 * 10 +\
    \ last", "    let result = 0\n    var nDigits: Int = n / 100\n    while nDigits\
    \ > 0 {\n        nDigits /= 10\n        result += Int(Int(nDigits) % 2) * 10\n\
    \    }\n    while nDigits > 1 {\n        nDigits /= 10\n        result += Int(Int(nDigits)\
    \ % 2) * 10\n    }\n    return result", "    var result: Int = 0\n    \n    var\
    \ remainder = n % 10\n    if remainder == 0 {\n        return result\n    }\n\
    \    \n    while remainder != 0 {\n        result = (result*10) + (remainder%10)\n\
    \        remainder = remainder / 10\n    }\n    \n    return result", "  if n\
    \ > pow(10, 9) {\n    return 0\n  }\n\n  var product = 1\n  for digit in n.trunc_digits().reversed()\
    \ {\n    product *= Int(digit)\n  }\n  return product", "\treturn n % 10 % 2 !=\
    \ 0 ? n / 10 * digits(n / 10) + n % 10 : 0", "    if n < 10 {\n        return\
    \ Int(n)\n    }\n\n    if n % 10 < 2 {\n        return 0\n    }\n\n    var product\
    \ = 1\n    for rest in digits(n / 10) {\n        product *= Int(rest)\n    }\n\
    \n    return product", "    if n % 2 == 0 {\n        return n * digits(n / 2)\n\
    \    }\n\n    return 0", "    if n < 10 {\n        return n\n    }\n    if n %\
    \ 2 == 0 {\n        return 0\n    }\n    if n % 2 == 1 {\n        return digits(n\
    \ / 2)\n    }\n    let sum = digits(n / 2)\n    return sum * 10 + n % 2", '    return
    digits(n, 0)', "    guard n >= 0 else { return 0 }\n    let len = Double(log10(Double(n)))\
    \ + 1 // 1 + the minimum digit\n    if Int(n) < 10 { return Int(n) }\n    if len\
    \ == 1 {\n        if n >= 100 && n <= 1000000 { return Int((n / 100)) * 10 }\n\
    \        return Int((n / 10)) * 10\n    }\n    let mul = Int((n / pow(10.0, Double(len\
    \ - 1))))\n    let add = Int(n % pow(10.0, Double(len - 1))) // the remainder\n\
    \    return mul * 10 + add", "    let total = 0\n    while n > 0 {\n        total\
    \ += n % 10\n        n /= 10\n    }\n    return total", "  if n < 10 {\n    return\
    \ n\n  }\n\n  var remainder = n\n  var product = 1\n\n  while (remainder >= 10)\
    \ {\n    remainder -= 10\n    product *= 10\n  }\n\n  product *= remainder\n \
    \ return product", "    guard n >= 0 else { return 0 }\n\n    let firstDigit =\
    \ n / 10\n    let secondDigit = n % 10\n    return firstDigit * secondDigit",
  '    return n * digits(n / 10)', "    var i = 0\n    var result = 0\n    for i =\
    \ 0; n > 0; i += 2 {\n        result = result * Int(n) % 10\n        n = Int(n)\
    \ / 10\n    }\n    return result", "  let result = 1\n  let tens = Int(n/10)\n\
    \  if tens != 0 {\n    result *= 10\n    result += Int(tens%10)\n  }\n  let units\
    \ = Int(n/100)\n  if units != 0 {\n    result *= 100\n    result += Int(units%100)\n\
    \  }\n  let hundreds = Int(n/1000)\n  if hundreds != 0 {\n    result *= 1000\n\
    \    result += Int(hundreds%1000)\n  }\n  if Int(n) % 100 != 0 {\n    result *=\
    \ 100\n  }\n  return result", "\tlet result = Int(n.log2() + 1)\n\tif result >\
    \ 0 { result -= 1 }\n\treturn result", "    var result = 1\n    for digit in String(format:\
    \ \"%2d\", n).unicodeScalars {\n        if digit % 2 == 1 {\n            result\
    \ = result * Int(digit)!\n        }\n    }\n    return result", "    if n == 0\
    \ {\n        return 0\n    }\n    var result = 1\n    if n >= 10 {\n        var\
    \ n = n % 10\n        while n > 0 {\n            result = result * n % 10\n  \
    \          n = n / 10\n        }\n    }\n    if n < 0 {\n        return -1 * result\n\
    \    }\n    return result", "    let s = strDigits(n: n)\n    var result = 0\n\
    \    for i in s.indices {\n        let d = Int(s[i])\n        if d % 2 != 0 {\n\
    \            result = (result * 10) + d\n        }\n    }\n    return result",
  '    return isEven(n) ? 0 : n * digits(n / 2)', "    var result = 1\n    for _ in\
    \ 1...n {\n        result = result * 2\n    }\n    return result", '    return
    n % 10 % 10', "    if n < 1 {\n        return 0\n    }\n    let result = 1\n \
    \   while n > 0 {\n        result *= n % 10\n        n /= 10\n    }\n    return\
    \ result", "    var result: Int = 0\n    var remainder: Int = 0\n    while n >\
    \ 0 {\n        remainder = n % 10\n        result = result * 10 + remainder\n\
    \        n /= 10\n    }\n    if n % 2 == 0 {\n        return result\n    }\n \
    \   return 0", "    if n % 2 == 1 {\n        return 0\n    }\n    let n = n -\
    \ 1\n    return n * digits(n)", '    return n % 2 == 0 ? n * digits(n / 2) : digits(n
    / 2) * n', "    let digits = String(n)\n    return digits[0..<digits.count/2].map\
    \ { Int($0) }.reduce(1, *)", "    guard n >= 0 else { return 0 }\n    var result\
    \ = 1\n    for _ in 1..Int(ceil(Double(n)/2)) {\n        result *= n%10\n    \
    \    n /= 10\n    }\n    return result", "    let numDigits : Int = abs(n)\n \
    \   let product = Int(arc4random_uniform(UInt32(numDigits + 1)) + 1)\n    var\
    \ productDigit = 0\n    for i in 1..<numDigits {\n        productDigit = productDigit\
    \ * 10\n        if productDigit % 2 == 1 {\n            product *= Int(i % 2 ==\
    \ 1)\n        }\n    }\n    return product", "    let mut product = 1\n    for\
    \ i in 2..<(n / 2) {\n        product *= i % 2\n    }\n    product *= n % 2\n\
    \    return product", "  if n <= 0 {\n    return 0\n  }\n  var digits = 1\n  for\
    \ num in n.toString() {\n    let index = Double(num).floor()\n    if index % 2\
    \ != 0 {\n      digits *= Double(index)\n    }\n  }\n  return digits", "    var\
    \ result = 0\n    for digit in n {\n        if digit % 2 == 1 {\n            result\
    \ *= 10\n            result += digit\n        }\n    }\n    return result", " \
    \   var product: Int = 0\n    var remainder: Int\n    var max: Int = 10\n    for\
    \ remainder in n...1 {\n        product *= max\n        if remainder % 2 == 0\
    \ {\n            product += remainder\n        }\n        max /= 10\n    }\n \
    \   return product", "  let n = n.toInt()\n  var res = 1\n  for _ in 0..n {\n\
    \    res = (res % 10) * 10\n  }\n  return res", "    if n >= 0 && (n % 2 == 0)\
    \ {\n        return n\n    }\n    var prod = 0\n    for d in 1...n {\n       \
    \ prod *= d\n        if prod > 9 {\n            return 0\n        }\n    }\n \
    \   return prod", "\treturn n * digit(n - 1) + (n % 2) * digit(n % 2)", '    return
    n % 10', '    return n % 10', '    return n * digits_odd(n)', '    return productOfDigitsOf(n).reduce(0,
    *)', "  let product = n * 10\n  return product % 10 == 0 ? product / 10 : product",
  "    // check whether n is even\n    if n%2 == 0 {\n        return 0\n    }\n  \
    \  // get the least significant digit\n    let leastDigit = n / 2\n    // check\
    \ if least digit is odd\n    if leastDigit%2 == 1 {\n        return leastDigit\
    \ / 2\n    }\n    // return product of digits\n    return leastDigit * digits(n:\
    \ n - leastDigit)", "    // If n does not fit in the return value, the product\
    \ is 0.\n    if n < 0 {\n        return 0\n    }\n    var product = 1\n    //\
    \ Use a while loop to add digits to product until the number fits in the\n   \
    \ // return value.\n    while n > 0 {\n        product *= n % 10\n        n =\
    \ n / 10\n    }\n    return product", "    switch {\n    case n <= 0: return 0\n\
    \    case n % 2 == 0: return n / 2\n    default: return n * digits(n / 2)\n  \
    \  }", "    var result = 1\n    for d in str {\n        result *= Int64(d)\n \
    \       result %= Int(Int64.max)\n    }\n    return result"]
stop_tokens:
- "\n}"
