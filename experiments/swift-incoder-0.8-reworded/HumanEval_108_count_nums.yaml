name: HumanEval_108_count_nums
language: swift
prompt: "\n/// Write a function count_nums which takes an array of integers and returns\n\
  /// the number of elements which has a sum of digits > 0.\n/// If a number is negative,\
  \ then its first signed digit will be negative:\n/// e.g. -123 has signed digits\
  \ -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n/// 0\n/// >>> count_nums(arr:\
  \ [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr: [1, 1, 2])\n/// 3\nfunc count_nums(arr:\
  \ [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
  \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
  \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
  \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
  \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
completions: ["    var n = 0\n    var prev: Int = 0\n    for x in arr {\n        n\
    \ += x > 0 ? x - prev : 0\n        prev = x\n    }\n    return n", "  var total\
    \ = 0\n  for n in arr {\n    if n < 0 {\n      n = -n\n    }\n    total += Int(pow(10,\
    \ floor(log10(n))).ceil())\n  }\n  return total", "    let len = arr.count\n \
    \   var sum = 0\n    for i in 0..<len {\n        let sum = arr[i]\n        if\
    \ sum < 0 {\n            sum *= -1\n            sum += arr[i]\n        }\n   \
    \     sum += sum % 10\n        sum += arr[i] % 10\n    }\n    return len + sum",
  "    var result = 0\n    for el in arr {\n        result += el\n    }\n    return\
    \ result", "    // Count first negative numbers, they are all sums of positives.\n\
    \    var nums: Int = 0\n    for number in arr {\n        if number < 0 {\n   \
    \         number -= Int(log10(abs(number))) + 1\n        }\n        nums += number\n\
    \    }\n    // Reverse the array because we want positive numbers.\n    for (_,\
    \ num) in arr.enumerated() {\n        if num < 0 {\n            nums += Int(log10(abs(num)))\
    \ + 1\n        }\n    }\n    return nums", "    if arr == nil || arr.isEmpty {\n\
    \        return 0\n    }\n    return arr.filter { sumDigits($0) >= 1 }.count",
  "    guard !arr.isEmpty,\n        let firstNum = arr.first,\n        let digits\
    \ = firstNum.digits\n        else {\n            return 0\n    }\n    var count\
    \ = 1\n    for i in 2..<(digits.count) {\n        if digits[i-2] > 0 && digits[i-1]\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count", "    var\
    \ total = 0\n    for num in arr {\n        if num >= 0 {\n            total +=\
    \ num\n        } else if num < 0 {\n            total -= num\n        }\n    }\n\
    \    return total", "    \n    // 1. Count the number of positive sums.\n    var\
    \ positiveSumCount: Int = 0\n    for number in arr {\n        positiveSumCount\
    \ += count_nums_helper(number: number, numDigits: 0)\n    }\n    \n    // 2. Multiply\
    \ by 10 until there are no sums left (less than 9).\n    var remainingSums: Int\
    \ = 0\n    while remainingSums < 9 {\n        remainingSums += count_nums_helper(number:\
    \ 10, numDigits: remainingSums)\n    }\n    \n    // 3. Remove any remaining digits\
    \ from the sum.\n    var sumDigitCount: Int = 0\n    for number in arr {\n   \
    \     sumDigitCount += count_nums_helper(number: number, numDigits: sumDigitCount)\n\
    \    }\n    \n    // 4. Return the number of remaining digits.\n    return sumDigitCount\
    \ % 9", "    if arr == nil {\n        return 0\n    }\n    var count = 0\n   \
    \ for el in arr {\n        if el < 0 {\n            el = -el\n        }\n    \
    \    if el % 10 == 0 {\n            count += 1\n        }\n    }\n    return count",
  "    guard let a = arr.first else {\n        return 0\n    }\n    let arr = arr.dropFirst()\n\
    \    var count = 0\n    for elem in arr {\n        let num = elem.truncatingRemainder(dividingBy:\
    \ 10)\n        if num > 0 {\n            count += 1\n        }\n    }\n    return\
    \ count - 1", "    var count = 0\n\n    for n in arr {\n        if n < 0 {\n \
    \           n = -n\n        }\n        let remainder = n % 10\n        if remainder\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count", '    return
    count_nums2(&arr, arr.len())', "    if arr.isEmpty {\n        return 0\n    }\n\
    \    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum",
  '    return count_nums3(arr: arr)', "    if arr == nil {\n        return 0\n   \
    \ }\n    var count = 0\n    for a in arr {\n        let val = Int(truncating:\
    \ a)\n        if val > 0 {\n            count += 1\n        }\n        else {\n\
    \            val %= 10\n            if val > 0 {\n                count += 10\n\
    \            }\n        }\n    }\n    return count", "    // write your code in\
    \ an appropriate way\n    return 0", '    return count_numsUnsorted(arr)', " \
    \   for k in arr.indices {\n        if arr[k] >= 0 {\n            sumDigitsHelper(arr[k],\
    \ 0)\n        } else {\n            sumDigitsHelper(-arr[k], 1)\n        }\n \
    \   }\n    return arr.count", "    var sum = 0\n    for i in arr {\n        if\
    \ i > 0 {\n            sum += i\n        }\n    }\n    return sum", "    if arr.isEmpty()\
    \ {\n        return 0\n    }\n\n    var count = 0\n    for i in arr {\n      \
    \  count += count_digits(i)\n    }\n\n    return count", "  let sign = arr[0]\n\
    \  let nums = arr.dropFirst()\n  return nums.reduce(0, {$0 + $1 > 0})", '  return
    count_nums2(arr, nil)', "    var count = 0\n    for x in arr {\n        if x <\
    \ 0 {\n            x -= x\n            count++\n        }\n        else {\n  \
    \          let digit = Int(truncating: x / 10)\n            if digit > 0 {\n \
    \               count += 1\n            }\n            x %= 10\n        }\n  \
    \  }\n    return count", '    return count_nums_(arr)', '    return count_nums3(arr,
    0).len', "    let maxDigits = max(arr.map({ $0.abs() }))\n    let digits = maxDigits.map({\
    \ Int(String($0)) })\n    let digitSums = digits.map({ Int(String($0)) })\n  \
    \  let result: Int\n    if digits.count == 0 {\n        result = 0\n    } else\
    \ if digits.count == 1 {\n        result = 1\n    } else {\n        result = digitSums.reduce(0)\n\
    \    }\n    return result", '    return count_nums(arr, &arr)', "\tvar i, c :\
    \ Int\n\tc = 1\n\tfor i in arr {\n\t\tif i >= 0 {\n\t\t\tc *= i\n\t\t} else {\n\
    \t\t\tc /= abs(i)\n\t\t}\n\t}\n\treturn c", '    return arr.filter(nums).count',
  "    let counting = count_nums(arr: arr, sum: 0)\n    return arr.isEmpty\n     \
    \   ? 0 : counting.count", '    return sum(arr) - count_nums(arr: arr)', "   \
    \ if arr.isEmpty() {\n        return 0\n    }\n    let nums = arr.map(count_digits)\n\
    \    return count_nums_helper(nums)", "  var n = 0\n  for value in arr {\n   \
    \ let digit = value\n    if (digit < 0 || digit > 9) {\n      break\n    }\n \
    \   n += digit < 0 ? -digit : digit\n  }\n  return n", "    var sum = 0\n    for\
    \ x in arr {\n        let digit = numDigit(x)\n        if digit > 0 {\n      \
    \      sum += digit\n        }\n    }\n    return sum", "    var sum = 0\n   \
    \ for i in arr {\n        if i != 0 {\n            sum += i\n        }\n    }\n\
    \    if sum > 0 {\n        return sum\n    }\n    var sum = 0\n    for i in arr\
    \ {\n        if i < 0 {\n            sum += abs(i)\n        } else {\n       \
    \     sum += i\n        }\n    }\n    return sum", "    guard arr.count >= 1,\
    \ arr.count <= 9 else { return 0 }\n    var result = 0\n    var carry = 0\n  \
    \  for num in arr {\n        let digit = num & (1 << 31) - 1 // get sign bit\n\
    \        if digit > 0 {\n            result += digit\n        } else {\n     \
    \       carry += 1\n            result -= digit\n        }\n    }\n    guard carry\
    \ > 0 else { return 0 }\n    return result", '    return count_nums(arr, 0) //
    call itself again to remove leading zeroes', "  var sum = 0\n  for n in arr {\n\
    \    if n >= 0 {\n      sum += digits(n)\n    }\n  }\n  return sum", "    if arr.count\
    \ == 0 {\n        return 0\n    }\n    var count = 0\n    var sum = 0\n    for\
    \ n in arr {\n        sum += n\n        if sum > 0 {\n            count += 1\n\
    \        }\n    }\n    return count", "    var count : Int = 0\n    for x in arr\
    \ {\n        if x != 0 && is_positive_sum(&x) {\n            count += 1\n    \
    \    }\n    }\n    return count", "    let s = arr.reduce(0) { $0 + $1 }\n   \
    \ return Int(log2(abs(s))) + 1", '    return count_nums_helper(arr, &sums_arr)',
  "    // Initialize variables\n    var n: Int = 0\n    var s: Int = 0\n    var i:\
    \ Int = 0\n    var digit: Int = 0\n    var count: Int = 0\n\n    // Get number\
    \ of elements which has a sum of digits > 0 and start looping\n    for i in arr\
    \ {\n        n += i\n    }\n    for i = n; i > 0; i-- {\n        digit = i % 10\n\
    \        if digit > 0 {\n            s += digit\n        } else {\n          \
    \  count = i\n        }\n    }\n    return count", "    guard arr.count >= 1 else\
    \ {\n        return 0\n    }\n\n    var nums = 0\n\n    for n in arr {\n     \
    \   guard n > 0 else {\n            return nums\n        }\n\n        if n < 10\
    \ {\n            nums += 1\n        } else {\n            for d in n.reverse()\
    \ {\n                if d < 0 {\n                    break\n                }\n\
    \            }\n\n            if d < 0 {\n                nums += d + 1\n    \
    \        } else {\n                nums += d\n            }\n        }\n    }\n\
    \n    return nums", "    // base case\n    if arr.isEmpty {\n        return 0\n\
    \    }\n    var num_positives = count_positives(arr: arr) + count_positives(arr:\
    \ arr[1...])\n    for val in arr[2...] {\n        if val > 0 {\n            num_positives\
    \ += count_positives(arr: [val])\n        }\n    }\n    return num_positives",
  "    if arr.isEmpty {\n        return 0\n    }\n\n    let mut total = 0\n\n    for\
    \ elt in arr {\n        total += abs(elt)\n    }\n\n    return total", "    let\
    \ len = arr.count\n    \n    if arr.contains(0) {\n        return 0\n    }\n \
    \   \n    var sum = 0\n    var sum2 = 0\n    \n    for i in 0 ..< len {\n    \
    \    sum += arr[i] % 10\n        sum2 += arr[i] / 10\n    }\n    \n    return\
    \ len - sum - sum2", "    let size = count_digits(arr)\n    guard arr.count ==\
    \ size else { return 0 }\n    var digitSum = 0\n    for i in 0..<size {\n    \
    \    let d = (arr[i] - '0') % 10\n        digitSum += d\n    }\n    if digitSum\
    \ > 0 {\n        return digitSum\n    }\n    if sign == false {\n        return\
    \ 0\n    }\n    if digitSum < 0 {\n        for i in 0..<size {\n            let\
    \ d = (arr[i] - '0') % 10\n            digitSum += d\n        }\n        return\
    \ digitSum * -1\n    }\n    return digitSum", "    // TODO: add an efficient implementation\
    \ to count_nums\n    return 0", "    var count = 0\n    for num in arr {\n   \
    \     count = count + count_digits(num)\n    }\n    return count", "    var count\
    \ = 0\n    for num in arr {\n        if num < 0 {\n            num = -num\n  \
    \      }\n        if num == 0 {\n            count += 1\n        }\n    }\n  \
    \  return count", "    \n    let sum = 0\n    var i = 0\n    var sum1 = 0\n  \
    \  \n    while i < arr.count {\n        if arr[i] > 0 {\n            sum += arr[i]\n\
    \            sum1 = sum1 + arr[i]\n        }\n        i += 1\n    }\n    \n  \
    \  if sum == 0 {\n        return 0\n    }\n    return sum", "    var count = 0\n\
    \n    for x in arr {\n        if x > 0  {\n            count += 1\n          \
    \  if x % 10 == 0 {\n                count += x\n            }\n        } else\
    \ if x < 0 {\n            count += count_nums(arr.prefix(1).filter { $0 > 0 })\n\
    \        } else {\n            count += count_nums(arr.suffix(1).filter { $0 >\
    \ 0 })\n        }\n    }\n\n    return count", "    var result : Int = 0\n   \
    \ for i in arr {\n        result += countNums(i)\n    }\n    return result", " \
    \   guard let arr = arr.map(Int.init) else {\n        return 0;\n    }\n    var\
    \ cnt: Int = 0;\n    for n in arr {\n        if n > 0 {\n            cnt += 1;\n\
    \        }\n        cnt += (n + n / 10 + (n % 10 > 0 ? 1 : 0));\n    }\n    return\
    \ cnt;", "    \n    var count = 1\n    for x in arr {\n        if x < 0 {\n  \
    \          x = -x\n        }\n        \n        if x % 10 == 0 {\n           \
    \ count += 1\n        }\n    }\n    return count", "    if arr == nil {\n    \
    \    return 0\n    }\n    if arr.isEmpty() {\n        return 0\n    }\n\n    var\
    \ count = 0\n    for val in arr {\n        if val < 0 {\n            if count\
    \ > 0 {\n                count -= 1\n            }\n            val = -val\n \
    \       }\n        if val > 9 {\n            count += val / 9\n        }\n   \
    \     else {\n            count += val % 9\n        }\n    }\n    return count",
  "    var acc: Int = 0\n    for i in arr {\n        acc += Int(i)\n    }\n    return\
    \ acc", "    var sum = 0\n    var cnt = 0\n\n    for v in arr {\n        if v\
    \ < 0 {\n            v = -v\n        }\n        sum += v\n        if sum < 10\
    \ {\n            cnt += 1\n        }\n    }\n    return cnt", "    var count =\
    \ 0\n    for n in arr {\n        if n > 0 {\n            count += 1\n        \
    \    n /= 10\n        }\n    }\n    return count", "  var i = 0\n  var sign =\
    \ 1\n  var sum = 0\n  for n in arr {\n    sum += sign * n\n    if sum > 0 {\n\
    \      i += 1\n    }\n    sign = -sign\n  }\n  return i", "    guard let n = arr.count\
    \ else {\n        return 0\n    }\n    var sum = 0\n    var start = 0\n    var\
    \ i = n - 1\n    var j = n - 1\n    while i >= 0 {\n        sum += arr[i]\n  \
    \      if sum < 0 {\n            if sum == 0 {\n                return sum\n \
    \           }\n            start = i + 1\n            sum = -sum\n        } else\
    \ {\n            start = i + 1\n        }\n        i -= 1\n    }\n    sum = -sum\n\
    \    var count = 0\n    for _ in 0 ..< j {\n        count += count_nums(arr: arr[..<start])\
    \ + count_nums(arr: arr[start..<j])\n        j -= 1\n    }\n    return count +\
    \ sum", "  let sum = arr.reduce(0, *)\n  return arr.count { num in num >= 0 &&\
    \ (num % sum) == 0 }", "    var count = 0\n\n    for number in arr {\n       \
    \ if number > 0 {\n            count++\n        }\n    }\n\n    return count",
  "    let count = (arr[0] ~/ 10).reduce(0) { $0 + $1.times(10).bitCountBits() + $2\
    \ }\n    if count > 0 {\n        count += count_nums(arr[1..<arr.count])\n   \
    \ }\n    return count", "    var sum_count = 0\n    for num in arr {\n       \
    \ let digit = Int(num / 10)\n        if digit > 0 {\n            sum_count +=\
    \ 1\n        } else {\n            sum_count += digit * -1\n        }\n    }\n\
    \    return sum_count", "    var total = 0\n    for num in arr {\n        total\
    \ += num\n    }\n    return total", "    guard arr != nil else { return 0 }\n\
    \    var n = 0\n    for i in arr {\n        n = n * 10 + Int(abs(i))\n    }\n\
    \    return n", "    let n = arr.count\n    let arr2 = arr.map { $0 }\n    var\
    \ count = 0\n    var sum = 0\n    for i in 0..<n {\n        sum += arr2[i]\n \
    \       if sum > 0 {\n            count += 1\n        }\n    }\n    return count",
  "    var nums = Set([Int]())\n    for num in arr {\n        nums.insert(num)\n \
    \   }\n    return nums.count", "    var count = 0\n    for v in arr {\n      \
    \  if v < 0 {\n            v = v * -1\n        }\n        for d in 0..<v {\n \
    \           if v % 10 == 0 {\n                count += 1\n            }\n    \
    \        v /= 10\n        }\n    }\n    return count", "    if arr.isEmpty() {\n\
    \        return 0\n    }\n    var count = 0\n    for num in arr {\n        if\
    \ num < 0 {\n            num = -num\n        }\n        let digits = String(num,\
    \ radix: 10)\n        if digits.isPadded() && digits.count > 0 && digits.count\
    \ <= maxDigits {\n            if digits.dropFirst().isPadded() {\n           \
    \     if digits.dropFirst().prefix(digits.count - 1).isPadded() {\n          \
    \          count += digits.dropFirst().prefix(digits.count - 1).count\n      \
    \          } else {\n                    count += 1\n                }\n     \
    \       } else {\n                count += 1\n            }\n        } else {\n\
    \            count += digits.count\n        }\n    }\n    return count", "   \
    \ // Count number of negative integers first\n    let n = count_nums(arr: arr,\
    \ neg: true)\n    if n == 0 {\n        return n\n    }\n\n    // Count digits\
    \ in all positive numbers\n    var count = 0\n    for x in arr {\n        if x\
    \ >= 0 {\n            count += count_digits(x)\n        }\n    }\n\n    // Multiply\
    \ by 10 and add digit counts\n    return n * 10 + count", "    var count = 1\n\
    \    for val in arr {\n        // If number is negative, get its first digit and\
    \ add to total\n        if val < 0 {\n            let digit = abs(val)\n     \
    \       count *= digit > 0 ? digits.leadingZeros(digit) : 0\n        } else {\n\
    \            count *= val > 0 ? digits.leadingZeros(val) : 0\n        }\n    }\n\
    \    return count", "    var ans = Int()\n    for x in arr {\n        ans += Int(abs(x))\n\
    \    }\n    return ans", "    guard let first = arr.first else { return 0 }\n\
    \    var i = 0\n    var count = 1\n    while i < arr.count {\n        if let digit\
    \ = arr[i] {\n            if digit >= 0 {\n                if digit < first {\n\
    \                    count = -count\n                }\n            } else {\n\
    \                if digit > first {\n                    count = -count\n    \
    \            }\n            }\n            i += 1\n        } else {\n        \
    \    i += 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ _ in arr {\n        if let n = Int(floor(_ / (10 ** Int(bitWidth - 1))))) {\n\
    \            count = count + 1\n        }\n    }\n    return count", "    var\
    \ count : Int = 0\n    var sign = 0\n    for i in arr {\n        if i < 0 {\n\
    \            if sign != 0 {\n                sign = 0\n                count++\n\
    \            }\n            sign = i + 1\n        } else {\n            if sign\
    \ == 0 {\n                sign = i + 1\n                count++\n            }\n\
    \        }\n    }\n    return count", "    var sum = 0\n    for x in arr {\n \
    \       sum += x\n    }\n    return sum", "    guard arr.count >= 0 else {\n \
    \       return 0\n    }\n\n    var sum = 0\n    for n in arr {\n        if n >\
    \ 0 {\n            sum += Int(n) % 10\n        }\n    }\n\n    return sum", " \
    \   var sum = 0\n    for n in arr {\n        if n > 0 {\n            sum += Int(n)\n\
    \        }\n    }\n    return sum", "    var total = 0\n    for x in arr {\n \
    \       if x > 0{\n            if x > 9 {\n                total += x - 10\n \
    \           } else {\n                total += x\n            }\n        }\n \
    \   }\n    return total", "    if arr.isEmpty { return 0 }\n    var sum = 0\n\
    \    for i in arr {\n        sum += abs(i)\n    }\n    if sum < 0 {\n        sum\
    \ = sum + sign(sum)\n    }\n    return sum", "  var count = 0\n  arr.forEach {\
    \ num in if num >= 0 {\n      count += 1\n    } else {\n      num *= -1\n    }\n\
    \  }\n  return count", "    var count = 0\n    var curSum = 0\n    for cur in\
    \ arr {\n        curSum += cur\n        count += int(curSum > 0)\n    }\n    return\
    \ count", '    return arr.filter{ $0 > 0 }.count', "    var count = 0\n    for\
    \ n in arr {\n        if n > 0 {\n            count += 1\n        }\n        for\
    \ d in n%10...0 {\n            if n == 0 {\n                return count\n   \
    \         }\n        }\n    }\n    return count", "    var result = 0\n    for\
    \ v in arr {\n        if v < 0 {\n            result--\n        }\n        result\
    \ = result * 10 + v\n    }\n    return result", "    var zeros = Set<Int>()\n\
    \    var counts = Set<Int>()\n    for val in arr {\n        if val < 0 {\n   \
    \         val = -val\n        }\n        let digit = val / 10\n        if let\
    \ _ = zeros.remove(&digit) {\n            counts[digit] += 1\n        } else {\n\
    \            zeros.insert(digit)\n        }\n    }\n    return counts.count",
  "    guard arr.count > 0 else { return 0 }\n    \n    var sum = 0 \n    var i =\
    \ 0\n    var sumOfDigits = 0\n    while i < arr.count {\n        let num = arr[i]\n\
    \        if num < 0 {\n            sumOfDigits += Int(-num)\n        } else {\n\
    \            sum += num\n            sumOfDigits += Int(num)\n        }\n    \
    \    i += 1\n    }\n    \n    if sumOfDigits == 0 {\n        return sum\n    }\
    \ else {\n        return sum / Int(pow(2, Int(bitCountOne(sumOfDigits))))\n  \
    \  }", "    var counter: Int = 0\n    for x in arr {\n        guard x > 0 else\
    \ { continue }\n        let remain = divMod(x, 10)\n        counter = counter\
    \ * 10 + remain\n    }\n    return counter", "    var cnt = 0\n    for el in arr\
    \ {\n        if el < 0 {\n            el *= -1\n        }\n        if el < 10\
    \ { // avoid `arr[0]` which may have 0 sum\n            cnt += 1\n        }\n\
    \        cnt += int(el / 10)\n        el %= 10\n    }\n    return cnt", "    var\
    \ result = 0\n    for a in arr {\n        if a < 0 {\n            result = result\
    \ - a % 10 + a / 10\n        } else {\n            result += a\n        }\n  \
    \  }\n    return result", "    var sum = 0\n    for x in arr {\n        sum +=\
    \ x\n    }\n    return sum", "    var sum = 0\n    var count = 0\n\n    for num\
    \ in arr {\n        sum += num\n        if sum >= 0 {\n            count += 1\n\
    \            sum -= num\n        }\n    }\n\n    return count", "    var count:\
    \ Int = 0\n    for num in arr {\n        let s = num\n        if s < 0 {\n   \
    \         s *= -1\n        }\n        count += Int(abs(s)) % 10\n    }\n    return\
    \ count", "    // Special case\n    guard arr.isEmpty else {\n        return arr.count\n\
    \    }\n\n    var sum = 0\n    for num in arr {\n        if num < 0 {\n      \
    \      sum += abs(num)\n        } else {\n            sum += num\n        }\n\
    \    }\n\n    return sum", "    var count = 0\n    for num in arr {\n        count\
    \ += num > 0 ? digits(num).count : 0\n    }\n    return count", "    if arr ==\
    \ nil {\n        return 0\n    }\n    var result = 1\n    for i in arr {\n   \
    \     if i < 0 {\n            result -= i\n        } else {\n            result\
    \ += 1\n        }\n    }\n    return result", "    if arr.isEmpty {\n        return\
    \ 0\n    }\n\n    var count = 1\n    for n in arr {\n        count += count_nums(n:\
    \ n) * (-1) // multiply by -1 when n is negative\n    }\n    return count", " \
    \   if arr.isEmpty() {\n        return 0\n    }\n    var i = 0\n    var numsCount\
    \ = 0\n    while i < arr.count {\n        if arr[i] < 0 {\n            numsCount++\n\
    \            i += arr[i]\n        } else {\n            i += arr[i] + 1\n    \
    \    }\n    }\n    return numsCount", "    guard arr.count != 0 else { return\
    \ 0 }\n    return count_nums(arr: arr.reversed()) + count_nums(arr: arr.prefix(arr.count\
    \ - 1))", "    let len = arr.count\n\n    var countZero = 0\n    for elem in arr\
    \ {\n        if elem < 0 {\n            countZero += 1\n        } else {\n   \
    \         break\n        }\n    }\n\n    let sum = arr.reduce(0, combine: +)\n\
    \    return len - countZero - sum", "    // TODO: use tail recursion here\n  \
    \  if arr.isEmpty { return 0 }\n\n    var count = 0\n    var sum = 0\n    for\
    \ i in arr { sum += i }\n\n    guard sum >= 0 else {\n        return count\n \
    \   }\n\n    if sum < 10 { return 0 }\n\n    for x in arr {\n        if sum %\
    \ 10 == x { count += 1; break }\n    }\n\n    return count", "    let maxDigits\
    \ = maxInt(arr)\n    if maxDigits == -1 && arr[0] < 0 {\n        return 0\n  \
    \  }\n    var cnt = 0\n    for i in arr {\n        if i > 0 {\n            cnt\
    \ += abs(maxDigits - i)\n        }\n    }\n    return cnt", "    var result =\
    \ 0\n    for i in arr {\n        result += (i / 10).truncatingRemainder(dividingBy:\
    \ 10) + !(i % 10)\n    }\n    return result", "    var sum = 0\n    for element\
    \ in arr {\n        if element < 0 {\n            sum -= element\n        } else\
    \ {\n            sum += element\n        }\n    }\n    return sum", '    return
    count_nums2(arr)', '    return count_numsHelper(arr, 0, arr.count, 0)', '    return
    count_nums(arr, 0)', "    \n    // Return early if arr is empty.\n    \n    if\
    \ arr.isEmpty {\n        return 0\n    }\n    \n    // Initialize total to zero,\
    \ and increment total by 1 every time we encounter a number > 0.\n    \n    var\
    \ total: Int = 0\n    \n    // Iterate through all the elements of the array,\
    \ each element has a signed digit.\n    \n    for i in arr.indices {\n       \
    \ \n        // If the current element has a negative sign, then we will need to\
    \ subtract 1 from it.\n        \n        if arr[i] < 0 {\n            \n     \
    \       total -= 1\n        }\n        \n        // If current element is positive,\
    \ then we can add it to the total.\n        \n        else {\n            \n \
    \           total += arr[i]\n        }\n    }\n    \n    return total", "    guard\
    \ arr != nil else { return 0 }\n    guard arr.count > 0 else { return 0 }\n\n\
    \    // find first negative number\n    var firstSign = -1000\n    for i in 0..<arr.count\
    \ {\n        if arr[i] < 0 {\n            firstSign = arr[i]\n            break\n\
    \        }\n    }\n\n    var count = firstSign\n    for i in 0..<arr.count {\n\
    \        let digit = arr[i] % 10\n        // check if this number has a sum of\
    \ digits > 0, otherwise skip\n        if digit > 0 && digit + count > 0 {\n  \
    \          count += 1\n        } else if digit > 0 {\n            // a negative\
    \ number has its first digit\n            // negative number can't get a sum of\
    \ digits, return 0\n            return 0\n        }\n    }\n    return count",
  "    var sum: Int = 0\n    for x in arr {\n        sum += x\n        if sum < 0\
    \ {\n            sum += pow10(-sum)\n        }\n    }\n    return sum", "    let\
    \ sum = arr.reduce(0)\n    let negs = arr.count { $0 < 0 }\n    let result = (sum\
    \ + negs) % 9\n    if result < 0 {\n        return 9 - result\n    } else {\n\
    \        return result\n    }", '  return count_nums(arr, arr.first!, arr.last)',
  '    return count_nums_helper(arr, 0, 0)', "    var count = 0\n\n    for x in arr\
    \ {\n        if x != 0 {\n            count += 1\n        }\n    }\n\n    return\
    \ count", "    var total = 0\n    for d in arr {\n        if d >= 0 {\n      \
    \      total += d % 10\n        } else if d < 0 {\n            total -= d % 10\n\
    \        }\n    }\n    return total", "    if arr.isEmpty { return 0 }\n    \n\
    \    let num = arr[0]\n    if num < 0 {\n        // -num to signify first positive\
    \ digit.\n        let firstDigit = -num\n        let rest = arr.dropFirst()\n\
    \        return count_nums(rest) + count_nums(rest) - count_nums(firstDigit)\n\
    \    }\n    \n    return 1 + count_nums(arr.dropFirst())", "    let sum = 0\n\
    \    for i in arr {\n        sum += abs(i)\n    }\n    return sum", "    var cnt\
    \ = 0\n    for i in arr {\n        if i > 0 {\n            cnt += 1\n        }\n\
    \    }\n    return cnt", "    var sum = 0\n    for n in arr {\n        sum +=\
    \ n\n        if sum > 0 {\n            sum += n % 10\n        }\n    }\n    return\
    \ sum", "    var result = 0\n    for n in arr {\n        result += (n - 0) / 9\n\
    \    }\n    return result", "    let count = arr.reduce(0) {\n        if let i\
    \ = Int($0) {\n            var acc = 0\n            var negated = false\n    \
    \        repeat {\n                acc += i % 10\n                i /= 10\n  \
    \              if i == 0 {\n                    break\n                }\n   \
    \         } while i != 0\n            if acc == 0 && negated {\n             \
    \   acc -= 1\n            }\n            return acc > 0 ? acc + 1 : acc\n    \
    \    }\n        return 0\n    }\n    return count", "    guard arr != nil else\
    \ {\n        return 0\n    }\n    var sum = 0\n    for i in arr {\n        sum\
    \ += i\n    }\n    return sum", "    var result = 0\n    for idx in 0..<arr.count\
    \ {\n        if idx >= 0 && arr[idx] >= 0 {\n            if !result%10 {\n   \
    \             result += arr[idx]\n            } else {\n                result\
    \ += ((10*result) + arr[idx])%10\n            }\n        }\n    }\n    return\
    \ result", "    if arr.isEmpty {\n        return 0\n    }\n    var sum = 0\n \
    \   var sign = -1\n    if arr[0] < 0 {\n        sign = arr[0]\n        arr[0]\
    \ = -arr[0]\n    }\n    for i in arr {\n        sum += sign * (i % 10) * pow(10,\
    \ arr.count - i - 1)\n    }\n    return sum", "    var result = 0\n    for num\
    \ in arr {\n        result += int(num.truncatingRemainder(dividingBy: 10)!)\n\
    \    }\n    return result", "    switch arr.count {\n    case 0:\n        return\
    \ 0\n    case 1:\n        return arr[0]\n    case 2:\n        if arr[0] + arr[1]\
    \ < arr[2] {\n            return 1\n        }\n        return arr[1] + arr[2]\
    \ - arr[0]\n    default:\n        if arr[0] + arr[1] < arr[2] {\n            return\
    \ 1 + count_nums(arr.suffix(2))\n        } else {\n            return 1 + count_nums(arr.suffix(3))\n\
    \        }\n    }", "    if arr.isEmpty() { return 0 }\n    let sum = arr.reduce(0)\n\
    \    let max = Int64(pow10(arr.count))\n    if sum > max { return 0 }\n    let\
    \ pow = max - sum\n    var i = arr.count\n    while i >= 0 {\n        var n =\
    \ arr[i]\n        n -= i\n        arr[i] = (n / 10) as Int\n        i -= 1\n \
    \   }\n    let digits = arr.flatMap({ $0 })\n    let filtered = digits.filter()\
    \ { $0 >= 0 }\n    return filtered.count == 0 ? 0 : filtered.count", "    var\
    \ nums = 0\n    for x in arr {\n        var digit = 0\n        for d in strDigits(x.toString())\
    \ {\n            digit *= 10\n            digit += d\n        }\n        if digit\
    \ > 0 {\n            nums += 1\n        }\n    }\n    return nums", "    var count\
    \ = 0\n    for x in arr {\n        count += count_digits(&x)\n    }\n    return\
    \ count", "    \n    var count = 0\n    \n    for i in arr {\n        let digit\
    \ = abs(i)\n        \n        if digit > 0 {\n            count += 1\n       \
    \ }\n    }\n    \n    return count", "    var nums = Set<Int>()\n    for i in\
    \ arr {\n        if i >= 0 {\n            if nums.contains(i) {\n            \
    \    nums.remove(i)\n            } else {\n                nums.insert(i)\n  \
    \          }\n        }\n    }\n    return nums.count", "    var nums = 0\n  \
    \  for num in arr {\n        if num > 0 {\n            var sign = num / 10\n \
    \           var digit = num % 10\n            if num < 0 {\n                sign\
    \ = -sign\n                digit = -digit\n            }\n            if sign\
    \ > num {\n                nums = nums + 1\n            } else {\n           \
    \     nums = nums + (digit > 0)\n            }\n        }\n    }\n    return nums",
  "    var result = 0\n    var sign = arr[0] >= 0\n    for value in arr {\n      \
    \  result += sign * (value % 10).count\n        sign = value >= 0\n    }\n   \
    \ return result", "    // Convert each element to its negative value and sort\
    \ the array.\n    var nums = arr.map { -$0 }\n    nums.sort.reverse()\n\n    //\
    \ If the first element has at least one digit > 0, then the\n    // number is\
    \ positive. Otherwise, return 0.\n    return nums.first >= 0 ? nums.count : 0",
  '    return arr.filter({$0 > 0}).count', "    guard arr.isEmpty else {\n       \
    \ return -1\n    }\n\n    var sumOfDigits = 0\n    var negative = false\n    for\
    \ num in arr {\n        if num < 0 {\n            sum += num\n            negative\
    \ = true\n        } else {\n            sum += num\n            if sumOfDigits\
    \ == 0 {\n                sumOfDigits = abs(num)\n            } else {\n     \
    \           sumOfDigits = sumOfDigits * 10 + abs(num)\n            }\n       \
    \ }\n    }\n    return negative ? -sumOfDigits : sumOfDigits", "    var zeros\
    \ = count_zeroes(arr)\n    var digits = count_digits(arr)\n    guard digits >=\
    \ zeros else {\n        return 0\n    }\n    return digits - zeros", "    if arr.isEmpty()\
    \ {\n        return 0\n    }\n    \n    let min = arr.reduce(0) { $0 > $1 ? $1\
    \ : $0 }\n    var count = 0\n    for num in arr {\n        count += (num - min)\
    \ % 10 == 0\n    }\n    return count", "    var sum = 0\n    for element in arr\
    \ {\n        sum += (element & -element) + 1\n    }\n    return sum", "    guard\
    \ arr.count > 0 else {\n        return 0\n    }\n\n    var total = 0\n    for\
    \ num in arr {\n        total += num\n    }\n\n    return total / abs(total)",
  "    if arr.isEmpty() {\n        return 0\n    }\n    var count = 0\n    for n in\
    \ arr {\n        count += count_digits(n)\n    }\n    return count", '    return
    arr.filter { $0 >= 0 }.count', "    var result = 0\n\n    for n in arr {\n   \
    \     result = count_nums_helper(n, &result)\n    }\n\n    return result", " \
    \   arr.sort()\n    var nums = [0]\n    for i in arr {\n        if i < 0 {\n \
    \           nums[0]++\n        } else if nums[0] == 0 {\n            nums[0]++\n\
    \        } else if nums[0] != 0 {\n            nums[0] = nums[0] / 10\n      \
    \      nums[0] += i / 10\n            i %= 10\n            nums[0] += i % 10\n\
    \        }\n    }\n    return nums[0]", "  var sum = 0\n  var count = 0\n\n  for\
    \ elem in arr {\n    sum += Int(abs(elem))\n    count += 1 if sum > 0 else 0\n\
    \  }\n\n  return count", "    // TODO: replace with itertools?\n    var i = 0\n\
    \    while i < arr.count {\n        if arr[i] > 0 {\n            i += count_nums(arr[i+1..<arr.count])\n\
    \        } else {\n            i += 1\n        }\n    }\n    return i", "    var\
    \ count = 0\n    for num in arr {\n        if let firstDigit = num {\n       \
    \     count += Int(log2(firstDigit))\n        }\n        else {\n            count\
    \ -= 1\n        }\n    }\n    return count", "    var i = 0\n    for x in arr\
    \ {\n        let y = abs(x)\n        var num = 0\n        \n        for _ in 0..<8\
    \ {\n            let d = y % 10\n            y = y / 10\n            num |= (d\
    \ < 0 ? -1 : 1<<(8-i)) & 1\n            i += 1\n        }\n        \n        if\
    \ num == 0 {\n            continue\n        }\n        \n        if x > 0 {\n\
    \            // x can be negative, so subtract first digit and add this digit\n\
    \            // to the sum\n            x -= 9\n        }\n        \n        if\
    \ x != 0 {\n            x += num\n        }\n    }\n    return i", "    if arr.isEmpty\
    \ {\n        return 0\n    }\n    var sum = 0\n    var prev: Int = 0\n    for\
    \ val in arr {\n        if val < 0 {\n            if prev < 0 {\n            \
    \    sum += (val * -1)\n            } else {\n                sum += -val\n  \
    \          }\n        } else {\n            if prev > 0 {\n                sum\
    \ += val\n            }\n        }\n        prev = val\n    }\n    return sum",
  "    var count = 0\n    for n in arr {\n        if n > 0 {\n            count +=\
    \ n / 10_0\n            n %= 10_0\n        }\n    }\n    return count", "    //\
    \ Special case: empty array\n    if arr.isEmpty() {\n        return 0\n    }\n\
    \    \n    // Special case: single number\n    if arr[0] == 0 {\n        return\
    \ 1\n    }\n    \n    // Recursion case: non-negative first digit\n    if arr[0]\
    \ < 0 {\n        return 1 + count_nums(arr: arr[1..<arr.count])\n    }\n    \n\
    \    // Special case: second digit\n    if arr[0] == 1 {\n        return count_nums(arr:\
    \ arr[1..<arr.count])\n    }\n    \n    // Recursion case: second and third digit\n\
    \    return count_nums(arr: arr[1..<arr.count]) + count_nums(arr: arr[2..<arr.count])",
  "    var count = 0\n    for x in arr {\n        count += digitSum(x)\n    }\n  \
    \  return count", '    return count_nums_helper(arr, 0)', "    let m = count_digits(arr)\n\
    \    return arr[m...].count(where: { $0 > 0 })", '    return arr.filter { $0 <
    0 }.count', "    if arr == nil || arr.isEmpty() {\n        return 0\n    }\n\n\
    \    var count = 0\n    for num in arr {\n        count += count_digits(num)\n\
    \    }\n    return count", "    return arr.enumerated().map { i, _ in\n      \
    \  if arr[i].isNegative {\n            return -1\n        } else {\n         \
    \   return arr[i].magnitude\n        }\n    }.sum", "    switch arr.count {\n\
    \    case 0: return 0\n    case 1: return arr[0]\n    case 2: return arr[0] +\
    \ arr[1]\n    case 3: return arr[0] + arr[1] + arr[2]\n    default: return arr[0]\
    \ + count_nums(arr.dropFirst())\n    }", "    var cnt = 0\n    for _i in arr {\n\
    \        if _i >= 0 {\n            cnt += Int(_i) % 10\n        }\n    }\n   \
    \ return cnt", '    return count_nums(arr: arr, firstDigit: 0)', '    return count_nums(arr,
    0).1', "    let first = arr[0]\n    if first < 0 {\n        first = -first\n \
    \   }\n    return count_nums_helper(arr, 0, 0)", "    // If there are no elements,\
    \ the sum is 0.\n    if arr.isEmpty { return 0 }\n\n    // Create a string from\
    \ arr to avoid using unsafe pointer access.\n    let str = String( arr.map { String($0)\
    \ } )\n\n    var num = 0\n\n    for char in str.unicodeScalars {\n        if let\
    \ _ = str.getCharacters(\n            from: char.startIndex,\n            to:\
    \ char.endIndex\n        ) {\n            let int = Character(char).intValue\n\
    \            if int >= 0 {\n                // Only add the digit if the number\
    \ is positive.\n                num += int % 10\n            }\n        }\n  \
    \  }\n\n    return num", "    // Initialize result with number of negative numbers\n\
    \    var result = 0\n\n    // Iterate through all digits and increment result\
    \ when digit > 0\n    for d in arr {\n        d < 0 ? result = result + d : result\n\
    \    }\n\n    return result", "    \n    // Count the number of positive numbers.\n\
    \    var count = 1\n    for a in arr {\n        if a > 0 {\n            count\
    \ += count_nums(arr: [a - 1])\n        }\n    }\n    \n    return count", "  \
    \  var sum = 0\n    for i in arr {\n        if i >= 0 {\n            sum += (i\
    \ / 10.0)\n        }\n    }\n    return sum", "    var nums = arr\n    if nums.count\
    \ < 2 {\n        return 0\n    }\n\n    var nums0 = nums\n    var nums1 = nums\n\
    \    var nums2 = nums\n\n    if nums0.count == 2 {\n        if nums0[0] == nums0[1]\
    \ {\n            swap(&nums0, &nums1)\n        }\n    }\n\n    if nums1.count\
    \ == 2 {\n        if nums1[0] == nums1[1] {\n            swap(&nums1, &nums2)\n\
    \        }\n    }\n\n    if nums2.count == 2 {\n        if nums2[0] == nums2[1]\
    \ {\n            swap(&nums2, &nums0)\n        }\n    }\n\n    // The code below\
    \ is adapted from Andrew Dunlap's implementation\n    // of countDigitsInRadix.\
    \  It assumes that there is a \"1\" at index 0.\n    var oneDigitSum = 0\n   \
    \ var currentDigit = 0\n    for i := 0; i < nums2.count; i++ {\n        oneDigitSum\
    \ += nums2[i]\n        currentDigit += nums2[i]\n        if currentDigit > 0 &&\
    \ oneDigitSum > 0 {\n            return i + 1 // add 1 to count at index i\n \
    \       }\n        if currentDigit == 0 {\n            oneDigitSum -= nums2[i]\n\
    \        }\n    }\n\n    return nums.count // count the rest of the numbers",
  "    var total = 0\n    var carry = 0\n    for n in arr {\n        total += n +\
    \ carry\n        carry = total * 10\n        total %= 10\n    }\n    return carry\
    \ > 0 ? total + 1 : total", "    guard arr.count > 0 else { return 0 }\n    var\
    \ count = 0\n    let minDigit = arr.first!\n    for i in arr {\n        let digit\
    \ = absdigit(i - minDigit)\n        if digit > 0 { count += digit }\n    }\n \
    \   return count", '    return count_nums2(arr: arr)', "    if arr.isEmpty() {\n\
    \        return 0\n    }\n    let n = arr.count\n    let negative = arr.isEmpty\
    \ || !arr.first < 0\n    var sum = 0\n    var tmp = 0\n    if negative {\n   \
    \     tmp = arr[0]\n    }\n    for n in arr {\n        if tmp > 0 {\n        \
    \    sum += tmp\n        }\n        tmp += n\n    }\n    if negative {\n     \
    \   return n - sum\n    }\n    return sum", '    return count_nums_internal(arr)',
  '    return count_nums(arr, 0, 0)', "    guard arr != nil else { return 0 }\n  \
    \  guard arr.count > 0 else { return 0 }\n\n    var sum = 0\n    for i in 0..<arr.count\
    \ {\n        let digit = arr[i] - 0\n        if digit > 0 { sum += digit }\n \
    \   }\n    return sum", "    var num = 0\n    for v in arr {\n        num += 1\n\
    \        if v < 0 {\n            num += 1\n            if v < 0 {\n          \
    \      num += v\n            }\n        }\n    }\n    return num", "    guard\
    \ arr.count >= 0 else { return 0 }\n    var count: Int = 0\n    for element in\
    \ arr {\n        var element = element >= 0 ? element * 2 : -element * 2\n   \
    \     var currentSum = 0\n        for _ in 0..<10 {\n            currentSum +=\
    \ element\n            element /= 10\n        }\n        if currentSum > 0 {\n\
    \            count += 1\n        }\n    }\n    return count", "    // Write your\
    \ code here.\n    let length = arr[0].bit_length()\n    var sum = 0\n    for i\
    \ in 0..<length {\n        let digit = arr[i] - 10\n        sum += digit\n   \
    \ }\n    return sum", "    var count = 0\n    for x in arr {\n        if x >=\
    \ 0 {\n            count += 1\n            if x > 9 {\n                for y in\
    \ x % 10 {\n                    if y > 0 {\n                        count += y\
    \ > 9\n                    }\n                }\n            }\n        }\n  \
    \  }\n    return count", '    return count_nums(arr: arr, digits: 0)', "    var\
    \ nums = Int()\n    for i : Int in arr {\n        if i >= 0 {\n            nums\
    \ += 1\n        }\n    }\n    return nums", "  let max = Int(math.pow(2, ceil(log2(Float(arr.count))),\
    \ 2)) - 1\n  var nums = 0\n  for num in arr {\n    nums = nums + Int(pow(num,\
    \ floor(log2(Float(num)))))\n  }\n  return nums.clamp(0, max)", "    guard arr.count\
    \ > 0 else {\n        return 0\n    }\n    var ans = Int()\n    let m = arr.count\n\
    \    for i in 0..<m {\n        let digit = arr[i]\n        if digit < 0 {\n  \
    \          digit *= -1\n            digit = -digit\n        }\n        let sum\
    \ = (digit.powi(2) + digit.powi(3) + digit.powi(4) + digit.powi(5) + digit.powi(6)\
    \ + digit.powi(7) + digit.powi(8)).abs() - digit / 10\n        if sum > 0 {\n\
    \            ans += (sum.powi(1) + sum.powi(2) + sum.powi(3) + sum.powi(4) + sum.powi(5)\
    \ + sum.powi(6) + sum.powi(7) + sum.powi(8)).abs() - digit / 10\n        }\n \
    \   }\n    return ans", '    return arr.reduce(0) { $0 + count_digits($1) }',
  "    guard arr.count > 0 else {\n        return 0\n    }\n    var ans = 0\n    for\
    \ elem in arr {\n        if elem < 0 {\n            elem = -elem\n        }\n\
    \        ans += elem % 10\n    }\n    return ans", "\tvar sum = 0\n\tfor i, n\
    \ := range arr {\n\t\tif n < 0 {\n\t\t\tn *= -1\n\t\t}\n\t\tif n > 0 {\n\t\t\t\
    sum += n\n\t\t}\n\t}\n\treturn sum", '  return count_nums(arr: arr as [Int], index:
    0, nums: 0)', "    var count = 0\n    for x in arr {\n        if x != 0 {\n  \
    \          count += 1\n        }\n    }\n    return count", "    if arr.isEmpty()\
    \ {\n        return 0\n    }\n\n    // Use recursion to solve this problem. Using\
    \ an accumulator\n    // allows us to process each number in isolation.\n    let\
    \ total = 0\n    var sign = 0\n\n    for item in arr {\n        if sign == 0 {\n\
    \            sign = item < 0\n        } else {\n            sign = -sign\n   \
    \     }\n        if sign == -1 {\n            total += item + 10\n        } else\
    \ {\n            total += item\n        }\n    }\n\n    return total", "    if\
    \ arr.isEmpty() {\n        return 0\n    }\n    // first element of array is positive\n\
    \    let digitSum = arr[0] &+ arr[1]\n    if digitSum >= 0 {\n        return digitSum\
    \ + 1\n    }\n    // first element of array is negative\n    digitSum = arr[0]\
    \ &+ arr[1]\n    let negativeSum = digitSum\n    if negativeSum < 0 {\n      \
    \  negativeSum = negativeSum * (-1)\n    }\n    return negativeSum", '    return
    count_nums_impl(arr: arr, length: arr.count)', "    var sum = 0\n    for x in\
    \ arr {\n        if x < 0 {\n            x -= Int(pow(10, Int(floor(log10(abs(x)))\
    \ + 1)))\n        }\n        sum += Int(x)\n    }\n    return sum", "    // The\
    \ 'digits' array is populated by looping through the input array and\n    // dividing\
    \ each element by 10 to get the last digit.\n    // Then the last digit is added\
    \ to each element in the 'digits' array.\n    let digits = [Int](repeating: 0,\
    \ count: arr.count)\n    for v in arr {\n        let v = v % 10\n        digits[v]\
    \ = digits[v] + 1\n    }\n    for v in digits {\n        if v > 0 {\n        \
    \    return v\n        }\n    }\n    return 0", "    var count = 0\n    var sum\
    \ = 0\n    for x in arr {\n        if x != 0 {\n            sum += x\n       \
    \     if sum > 0 {\n                count++\n                sum -= 10\n     \
    \       }\n        }\n    }\n    return count", "    func countFirstSignificantDigit(n:\
    \ Int) -> Int {\n        if n < 0 {\n            let i = n - 1\n            let\
    \ digit = Int(i)\n            let multiplier = pow(10, digit)\n            return\
    \ ((i * multiplier) + digit)\n        }\n        return n\n    }\n\n    return\
    \ arr.filter { $0 > 0 }\n        .map(countFirstSignificantDigit)\n        .filter\
    \ { $0 > 0 }\n        .count", "    guard arr.count > 0 else { return 0 }\n  \
    \  guard arr.count >= 2 else { return 0 }\n\n    var result = 0\n    for i in\
    \ 0 ..< arr.count {\n        let j = arr.count - i - 1\n        guard i != 0 &&\
    \ arr[j] >= 0 else { return 0 }\n        let s = arr[j] - 0\n        result +=\
    \ Int(s.truncatingRemainder(dividingBy: 9))\n    }\n    return result", "    if\
    \ arr.isEmpty {\n        return 0\n    }\n\n    var result = 0\n    for num in\
    \ arr {\n        // Skip negative numbers that have a single sign.\n        if\
    \ num < 0 && num.sigDigits() == 1 {\n            continue\n        }\n       \
    \ result += num.sigDigits()\n    }\n    return result"]
stop_tokens:
- "\n}"
