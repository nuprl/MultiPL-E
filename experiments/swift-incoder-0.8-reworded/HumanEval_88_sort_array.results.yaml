language: swift
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    array.sort()\n    if array.last! > array.first! {\n        array.reverse()\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpoi46u_p8.swift:17:11: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n    array.sort()\n    ~~~~~ ^\n/tmp/tmpoi46u_p8.swift:19:15:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \        array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var result\
    \ = [Int]()\n    var sum = 0\n    for i in 0..<array.count {\n        sum += array[i]\n\
    \        result.insert(i, sum)\n    }\n    return sort_array_helper(array, result)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp2e8am3zs.swift:24:16: error: no exact matches in call to instance\
    \ method 'insert'\n        result.insert(i, sum)\n               ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp2e8am3zs.swift:26:12:\
    \ error: cannot find 'sort_array_helper' in scope\n    return sort_array_helper(array,\
    \ result)\n           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  var array = array\n  array.sort()\n  return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpsj6oapdm/tmpsj6oapdm.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1edb928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1edb61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1edb61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1edb61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsj6oapdm                        0x0000557bbc9d5894 <unavailable> + 6292

    5    libc.so.6                          0x00002b1edbb14460 __libc_start_main +
    245

    6    tmpsj6oapdm                        0x0000557bbc9d50e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.isEmpty { return array }\n    if array.count <= 1 {\
    \ return array }\n    let sumFirst = array.first ?? 0\n    let sumLast = array.last\
    \ ?? 0\n    guard sumLast - sumFirst > 0 else {\n        return sort_array(array:\
    \ array[1..<array.count])\n    }\n    var result = array\n    result.sortInPlace()\n\
    \    if sumFirst % 2 == 0 {\n        result.reverse()\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp2rpz8gsn.swift:22:39: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n        return sort_array(array: array[1..<array.count])\n\
    \                                      ^\n/tmp/tmp2rpz8gsn.swift:25:12: error:\
    \ value of type '[Int]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.isEmpty {\n        return array\n    }\n\n    let sum\
    \ = array.sum() ?? 0\n    var result: [Int] = []\n\n    if sum % 2 == 1 {\n  \
    \      array.sortInPlace()\n    }\n    else {\n        array.sortInPlace({ $0\
    \ < $1 })\n    }\n\n    for i in 0..<array.count {\n        result.append(array[i])\n\
    \    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpl4gxj071.swift:21:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum() ?? 0\n              ~~~~~ ^~~\n/tmp/tmpl4gxj071.swift:25:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpl4gxj071.swift:28:15: error: value of type\
    \ '[Int]' has no member 'sortInPlace'\n        array.sortInPlace({ $0 < $1 })\n\
    \        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // write your code here\n    let sum = array.sum\n    let newArray\
    \ = array.sorted()\n    if sum % 2 == 1 {\n        newArray.reverse()\n    }\n\
    \    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp41z54voo.swift:18:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n/tmp/tmp41z54voo.swift:21:18:\
    \ error: cannot use mutating member on immutable value: 'newArray' is a 'let'\
    \ constant\n        newArray.reverse()\n        ~~~~~~~~ ^\n/tmp/tmp41z54voo.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let newArray = array.sorted()\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sorted = array.sorted(by: >)\n    let coswift = sorted ==\
    \ sorted ? [] : sorted + sorted[sorted.startIndex]\n    return coswift\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpsl4dbyd3.swift:18:58: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Array<Int>'\n    let coswift = sorted == sorted ?\
    \ [] : sorted + sorted[sorted.startIndex]\n                                  \
    \                       ^\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 { return array }\n    var sum = 0\n    var\
    \ len = array.count\n    for i in 0..<len - 1 {\n        sum += array[i]\n   \
    \ }\n    let isSumOdd = (sum % 2 == 1)\n    var newArray = array\n    for i in\
    \ 0..<len - 1 {\n        if isSumOdd {\n            newArray[newArray.count -\
    \ i - 1] -= 1\n            newArray[newArray.count - i - 1] = newArray[newArray.count\
    \ - i - 1] + 1\n        } else {\n            newArray[newArray.count - i - 1]\
    \ += 1\n            newArray[newArray.count - i - 1] -= 1\n        }\n    }\n\
    \    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpp_docrm5/tmpp_docrm5.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1e9dd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1e9ac9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1e9ac9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1e9ac87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp_docrm5                        0x000055f9583a7876 <unavailable> + 6262

    5    libc.so.6                          0x00002af1e9fbe460 __libc_start_main +
    245

    6    tmpp_docrm5                        0x000055f9583a7259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let result = array.sorted(by: {\n        if $0 % 2 == 0 {\n\
    \            return false\n        } else {\n            return true\n       \
    \ }\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp25eonz3_.swift:17:35: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    let\
    \ result = array.sorted(by: {\n                                  ^\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sum = 0\n    let len = array.count\n    var newArray = array\n\
    \n    for i in 0..<len - 1 {\n        sum += array[i]\n    }\n\n    if sum % 2\
    \ == 1 {\n        newArray.sort(<)\n    } else {\n        newArray.sort(>)\n \
    \   }\n\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpnzbioiln.swift:26:23: error: missing argument label 'by:' in call\n\
    \        newArray.sort(<)\n                      ^\n                      by:\
    \ \n/tmp/tmpnzbioiln.swift:28:23: error: missing argument label 'by:' in call\n\
    \        newArray.sort(>)\n                      ^\n                      by:\
    \ \n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.isEmpty { return array }\n    \n    // sort in ascending\
    \ order if the sum( first index value, last index value) is odd\n    var sumOfFirstIndexValue\
    \ = array[0]\n    var sumOfLastIndexValue = array[0]\n    for element in array\
    \ {\n        sumOfFirstIndexValue += element\n        sumOfLastIndexValue += element\n\
    \    }\n    if sumOfFirstIndexValue % 2 == 1 {\n        array.sorted{ $0 < $1\
    \ }\n    } else {\n        array.sorted{ $0 > $1 }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpvz_vh_wm/tmpvz_vh_wm.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7caa26dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ca9f64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ca9f64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ca9f637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz_vh_wm                        0x000055fe66bcb906 <unavailable> + 6406

    5    libc.so.6                          0x00002b7caa459460 __libc_start_main +
    245

    6    tmpvz_vh_wm                        0x000055fe66bcb2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    var result = array.sort{ $0 > $1 }\n    if result[0] !=\
    \ result[1] {\n        result = result.sorted(by: { $0 < $1 })\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmprsfq6qqv.swift:18:24: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n    var result = array.sort{ $0 > $1 }\n\
    \                 ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted().map { $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6dcl1bg0/tmp6dcl1bg0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7b13a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7b109db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7b109d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7b109c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6dcl1bg0                        0x0000564612f308c4 <unavailable> + 6340

    5    libc.so.6                          0x00002af7b1592460 __libc_start_main +
    245

    6    tmp6dcl1bg0                        0x0000564612f30119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var newArray\
    \ = array\n    var sum: Int = 0\n    for value in array {\n        sum += value\n\
    \    }\n    sum -= array.minElement()\n    sum -= array.maxElement()\n    if sum%2\
    \ == 1 {\n        return newArray.sorted(by: { (a, b) -> Bool in\n           \
    \ return b < a\n        })\n    } else {\n        return newArray.sorted(by: {\
    \ (a, b) -> Bool in\n            return a > b\n        })\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpi5oevw8h.swift:25:18: error: value of type '[Int]' has no member\
    \ 'minElement'\n    sum -= array.minElement()\n           ~~~~~ ^~~~~~~~~~\n/tmp/tmpi5oevw8h.swift:26:18:\
    \ error: value of type '[Int]' has no member 'maxElement'\n    sum -= array.maxElement()\n\
    \           ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = get_sum_array(array: array)\n\n    let sortedArray\
    \ = array.sorted()\n\n    if sum % 2 == 0 {\n        return sortedArray\n    }\
    \ else {\n        sortedArray.reverse()\n        return sortedArray\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpe54bphrk.swift:17:15: error: cannot find 'get_sum_array' in scope\n\
    \    let sum = get_sum_array(array: array)\n              ^~~~~~~~~~~~~\n/tmp/tmpe54bphrk.swift:24:21:\
    \ error: cannot use mutating member on immutable value: 'sortedArray' is a 'let'\
    \ constant\n        sortedArray.reverse()\n        ~~~~~~~~~~~ ^\n/tmp/tmpe54bphrk.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let sortedArray = array.sorted()\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ first = 0\n    var last = array.count - 1\n    var temp = 0\n    guard array.count\
    \ > 1 else { return array }\n    while first < last {\n        if array[first]\
    \ + array[last] % 2 == 1 {\n            temp = array[last]\n            array[last]\
    \ = array[first]\n            array[first] = temp\n            first += 1\n  \
    \          last -= 1\n        } else {\n            first += 1\n        }\n  \
    \  }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpskzuo5ox.swift:27:18: error: cannot assign through subscript: 'array'\
    \ is a 'let' constant\n            array[last] = array[first]\n            ~~~~~^\n\
    /tmp/tmpskzuo5ox.swift:28:18: error: cannot assign through subscript: 'array'\
    \ is a 'let' constant\n            array[first] = temp\n            ~~~~~^\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.isEmpty {\n        return []\n    }\n    var arrayCopy\
    \ = array as! [Int]\n    var leftIndex = 0\n    var rightIndex = arrayCopy.count\
    \ - 1\n    let sumValue = arrayCopy.last! + arrayCopy.first!\n    var leftSum\
    \ = sumValue - arrayCopy.first!\n    var rightSum = sumValue - arrayCopy.last!\n\
    \    \n    while leftIndex <= rightIndex {\n        if leftSum < rightSum {\n\
    \            swap(&arrayCopy[leftIndex], &arrayCopy[rightIndex])\n           \
    \ leftIndex += 1\n            rightIndex -= 1\n            leftSum += arrayCopy[leftIndex]\n\
    \            rightSum -= arrayCopy[rightIndex]\n        }\n        if rightSum\
    \ > leftSum {\n            swap(&arrayCopy[rightIndex], &arrayCopy[leftIndex])\n\
    \            leftIndex += 1\n            rightIndex -= 1\n            leftSum\
    \ -= arrayCopy[leftIndex]\n            rightSum += arrayCopy[rightIndex]\n   \
    \     }\n    }\n    return arrayCopy\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpvtvo3jm8.swift:20:27: warning: forced cast of '[Int]' to same type\
    \ has no effect\n    var arrayCopy = array as! [Int]\n                       \
    \   ^~~~~~~~~\n                          \n/tmp/tmpvtvo3jm8.swift:29:18: error:\
    \ overlapping accesses to 'arrayCopy', but modification requires exclusive access;\
    \ consider calling MutableCollection.swapAt(_:_:)\n            swap(&arrayCopy[leftIndex],\
    \ &arrayCopy[rightIndex])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \            arrayCopy.swapAt(leftIndex, rightIndex)\n/tmp/tmpvtvo3jm8.swift:29:41:\
    \ note: conflicting access is here\n            swap(&arrayCopy[leftIndex], &arrayCopy[rightIndex])\n\
    \                                        ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvtvo3jm8.swift:36:18:\
    \ error: overlapping accesses to 'arrayCopy', but modification requires exclusive\
    \ access; consider calling MutableCollection.swapAt(_:_:)\n            swap(&arrayCopy[rightIndex],\
    \ &arrayCopy[leftIndex])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \            arrayCopy.swapAt(rightIndex, leftIndex)\n/tmp/tmpvtvo3jm8.swift:36:42:\
    \ note: conflicting access is here\n            swap(&arrayCopy[rightIndex], &arrayCopy[leftIndex])\n\
    \                                         ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    var\
    \ sum = 0\n\n    while i < array.count {\n        sum = array[i] + array[j]\n\
    \        i += 1\n        j += 1\n        if sum % 2 == 0 {\n            result.append(sum)\n\
    \            i += 1\n        } else {\n            j -= 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp26i9x9n0/tmp26i9x9n0.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90f7018c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90f6d0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90f6d0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90f6d0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26i9x9n0                        0x000056049140166d <unavailable> + 5741

    5    libc.so.6                          0x00002b90f7204460 __libc_start_main +
    245

    6    tmp26i9x9n0                        0x00005604914011b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var new_array = [Int](repeating: 0, count: array.count)\n  \
    \  new_array = sorted(array) { $0 > $1 }\n    return new_array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpq2kl9wv8.swift:18:17: error: cannot find 'sorted' in scope\n  \
    \  new_array = sorted(array) { $0 > $1 }\n                ^~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count < 2 { return result }\n\
    \    if array.count > 2 {\n        swap(&result[0], &result[1])\n    }\n    var\
    \ sum : Int = 0\n    for i in 0 ..< array.count {\n        sum += array[i]\n \
    \   }\n    if sum % 2 == 1 {\n        swap(&result[0], &result[1])\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp8d9oxn68.swift:20:14: error: overlapping accesses to 'result',\
    \ but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \        swap(&result[0], &result[1])\n        ~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n\
    \        result.swapAt(0, 1)\n/tmp/tmp8d9oxn68.swift:20:26: note: conflicting\
    \ access is here\n        swap(&result[0], &result[1])\n                     \
    \    ^~~~~~~~~~\n/tmp/tmp8d9oxn68.swift:27:14: error: overlapping accesses to\
    \ 'result', but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \        swap(&result[0], &result[1])\n        ~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n\
    \        result.swapAt(0, 1)\n/tmp/tmp8d9oxn68.swift:27:26: note: conflicting\
    \ access is here\n        swap(&result[0], &result[1])\n                     \
    \    ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    let len = array.count\n    var result\
    \ = array.copy()\n    if array.first % 2 == 1 {\n        result = result.sorted(by:\
    \ >)\n    }\n    else {\n        result = result.sorted(by: <)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmphb39foaj.swift:19:24: error: value of type '[Int]' has no member\
    \ 'copy'\n    var result = array.copy()\n                 ~~~~~ ^~~~\n/tmp/tmphb39foaj.swift:20:14:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    if array.first % 2 == 1 {\n             ^\n/tmp/tmphb39foaj.swift:20:14:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    if array.first % 2 == 1 {\n             ^\n       (           ??\
    \ <#default value#>)\n/tmp/tmphb39foaj.swift:20:14: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n    if array.first\
    \ % 2 == 1 {\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    let sum = array.map { $0 + $1 }.sum\n    \n    if sum\
    \ % 2 == 1 {\n        array.sortInPlace()\n    } else {\n        array.sortInPlace{\
    \ $0 < $1 }\n    }\n    \n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp0pzfyltq.swift:18:25: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n    let sum = array.map\
    \ { $0 + $1 }.sum\n                        ^\n/tmp/tmp0pzfyltq.swift:18:37: error:\
    \ value of type '[Int]' has no member 'sum'\n    let sum = array.map { $0 + $1\
    \ }.sum\n              ~~~~~~~~~~~~~~~~~~~~~ ^~~\n/tmp/tmp0pzfyltq.swift:21:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmp0pzfyltq.swift:23:15: error: value of type\
    \ '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{ $0 < $1 }\n\
    \        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { (a, b) -> Bool in\n        let c = a +\
    \ b\n        if c % 2 == 1 {\n            return false\n        } else {\n   \
    \         return true\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpotngphgg/tmpotngphgg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad094b7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad094876b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad094876988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0948757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotngphgg                        0x0000563e8b7f66f6 <unavailable> + 5878

    5    libc.so.6                          0x00002ad094d6b460 __libc_start_main +
    245

    6    tmpotngphgg                        0x0000563e8b7f60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let n = array.count\n    var a = array\n    let res = array.sort\
    \ { (a: Int, b: Int) -> Bool in\n        let res = a+b\n        return res % 2\
    \ == 1 ? true : false\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp_xuszs4p.swift:19:21: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n    let res = array.sort { (a: Int, b: Int)\
    \ -> Bool in\n              ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let maxIndex = array.count - 1\n    let maxValue = array[0]\n\
    \    var array = array\n\n    let sumOfFirstIndexValues = array.prefixSum(from:\
    \ 0, to: maxIndex)\n    let sumOfLastIndexValues = array.suffixSum(from: 0, to:\
    \ maxIndex)\n\n    let sumOfFirstIndexValuesIsEven = sumOfFirstIndexValues.isEven\n\
    \    let sumOfLastIndexValuesIsEven = sumOfLastIndexValues.isEven\n\n    let sumOfFirstIndexValuesIsOdd\
    \ = sumOfFirstIndexValues.isOdd\n    let sumOfLastIndexValuesIsOdd = sumOfLastIndexValues.isOdd\n\
    \n    if sumOfFirstIndexValuesIsOdd && !sumOfLastIndexValuesIsEven {\n       \
    \ array = array.sorted()\n    } else if !sumOfFirstIndexValuesIsEven && sumOfLastIndexValuesIsEven\
    \ {\n        array = array.sorted(by: >)\n    } else if sumOfFirstIndexValuesIsOdd\
    \ && sumOfLastIndexValuesIsEven {\n        array = array.sorted(by: <)\n    }\n\
    \n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpybz7n33d.swift:21:39: error: value of type '[Int]' has no member\
    \ 'prefixSum'\n    let sumOfFirstIndexValues = array.prefixSum(from: 0, to: maxIndex)\n\
    \                                ~~~~~ ^~~~~~~~~\n/tmp/tmpybz7n33d.swift:22:38:\
    \ error: value of type '[Int]' has no member 'suffixSum'\n    let sumOfLastIndexValues\
    \ = array.suffixSum(from: 0, to: maxIndex)\n                               ~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    array.sortInPlace({$0.0 < $0.1})\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp1wba5xiu.swift:17:11: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    array.sortInPlace({$0.0 < $0.1})\n    ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    array.sort()\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp18lrzcka.swift:17:11: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n    array.sort()\n    ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    array.sort { (lhs: Int, rhs: Int) -> Bool in\n        let (as,\
    \ bs) = (lhs, rhs)\n        if as < bs {\n            return true\n        } else\
    \ if as == bs {\n            return 0\n        } else {\n            return false\n\
    \        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmphmn9qv83.swift:18:14: error: expected pattern\n        let (as,\
    \ bs) = (lhs, rhs)\n             ^\n/tmp/tmphmn9qv83.swift:19:12: error: expected\
    \ expression, var, or let in 'if' condition\n        if as < bs {\n          \
    \ ^\n/tmp/tmphmn9qv83.swift:21:19: error: expected expression, var, or let in\
    \ 'if' condition\n        } else if as == bs {\n                  ^\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 + $1 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpav_up_eq/tmpav_up_eq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba69f7eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba69f4e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba69f4e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba69f4e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpav_up_eq                        0x00005618548cc656 <unavailable> + 5718

    5    libc.so.6                          0x00002ba69f9d6460 __libc_start_main +
    245

    6    tmpav_up_eq                        0x00005618548cc039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let n = array.count\n    if n == 0 {\n        return array\n\
    \    }\n    var result = [Int]()\n    var sum: Int = 0\n    for i in 0 ..< n {\n\
    \        sum += array[i]\n        result.append(i)\n    }\n    if sum % 2 == 0\
    \ {\n        result.sort(sortFunction)\n    } else {\n        result.sort(sortFunction.reversed())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpe47aab5u.swift:28:21: error: cannot find 'sortFunction' in scope\n\
    \        result.sort(sortFunction)\n                    ^~~~~~~~~~~~\n/tmp/tmpe47aab5u.swift:28:21:\
    \ error: missing argument label 'by:' in call\n        result.sort(sortFunction)\n\
    \                    ^\n                    by: \n/tmp/tmpe47aab5u.swift:28:21:\
    \ error: converting non-escaping value to '(Int, Int) throws -> Bool' may allow\
    \ it to escape\n        result.sort(sortFunction)\n                    ^\n/tmp/tmpe47aab5u.swift:30:21:\
    \ error: cannot find 'sortFunction' in scope\n        result.sort(sortFunction.reversed())\n\
    \                    ^~~~~~~~~~~~\n/tmp/tmpe47aab5u.swift:30:21: error: missing\
    \ argument label 'by:' in call\n        result.sort(sortFunction.reversed())\n\
    \                    ^\n                    by: \n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    if array.isEmpty {\n        return array\n    }\n    \n\
    \    var result = [Int]()\n    \n    let maxValue = array[0] + array[array.count-1]\n\
    \    \n    for i in (0..<array.count).reversed() {\n        let value = array[i]\n\
    \        let valueToAdd = maxValue - value\n        \n        if valueToAdd >\
    \ 0 {\n            array[i] += valueToAdd\n            array.removeAtIndex(i)\n\
    \        }\n        \n        result.append(value)\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmph2op0q99.swift:31:22: error: left side of mutating operator isn't\
    \ mutable: 'array' is a 'let' constant\n            array[i] += valueToAdd\n \
    \           ~~~~~    ^\n/tmp/tmph2op0q99.swift:32:19: error: value of type '[Int]'\
    \ has no member 'removeAtIndex'\n            array.removeAtIndex(i)\n        \
    \    ~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    \n    if array.count == 0 {\n    \
    \    return sorted\n    }\n    \n    var max = array[0]\n    \n    for value in\
    \ array {\n        sorted.append(value)\n        \n        if value > max {\n\
    \            max = value\n        }\n    }\n    \n    if max%2 == 1 {\n      \
    \  sorted.reverse()\n    } else {\n        sorted.sort()\n    }\n    \n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpje4f1_bo/tmpje4f1_bo.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46fd813c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46fd50ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46fd50a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46fd5097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpje4f1_bo                        0x0000556e0c8ecb06 <unavailable> + 6918

    5    libc.so.6                          0x00002b46fd9ff460 __libc_start_main +
    245

    6    tmpje4f1_bo                        0x0000556e0c8ec4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    let sum : Int?\
    \ = array.last\n    array.sort { $0 < $1 }\n    if sum != nil { array.sort { $0\
    \ < $1 } }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpsycqmhmt.swift:19:11: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n    array.sort { $0 < $1 }\n    ~~~~~ ^\n\
    /tmp/tmpsycqmhmt.swift:20:27: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n    if sum != nil { array.sort { $0 < $1 } }\n\
    \                    ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n\n    let\
    \ (min, max) = array.minMax()\n    if min > 0 {\n        let swap1 = min(max,\
    \ array[array.count - 1])\n        array.swap(&swap1)\n    }\n\n    var sum1 =\
    \ 0, sum2 = 0\n    for i in array.reverse() {\n        sum1 += i\n        sum2\
    \ += i + min\n    }\n\n    sum2 -= min\n    let swap2 = min(sum2, array[array.count\
    \ - 1])\n    array.swap(&swap2)\n\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmps32boqi5.swift:21:28: error: value of type '[Int]' has no member\
    \ 'minMax'\n    let (min, max) = array.minMax()\n                     ~~~~~ ^~~~~~\n\
    /tmp/tmps32boqi5.swift:24:15: error: value of type '[Int]' has no member 'swap'\n\
    \        array.swap(&swap1)\n        ~~~~~ ^~~~\n/tmp/tmps32boqi5.swift:28:20:\
    \ error: for-in loop requires '()' to conform to 'Sequence'\n    for i in array.reverse()\
    \ {\n             ~~~~~~^~~~~~~~~\n/tmp/tmps32boqi5.swift:28:20: error: cannot\
    \ use mutating member on immutable value: 'array' is a 'let' constant\n    for\
    \ i in array.reverse() {\n             ~~~~~ ^\n/tmp/tmps32boqi5.swift:35:11:\
    \ error: value of type '[Int]' has no member 'swap'\n    array.swap(&swap2)\n\
    \    ~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 { return array }\n    guard let first = array.first\
    \ else {\n        array = array.reversed()\n        return sort_array(array: array)\n\
    \    }\n    guard let last = array.last else {\n        array = array.reversed()\n\
    \        return sort_array(array: array)\n    }\n\n    if array[first] % 2 ==\
    \ 0 {\n        array = array.sorted(by: >)\n    } else {\n        array = array.sorted(by:\
    \ <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpdw2s8h9i.swift:19:9: error: cannot assign to value: 'array' is\
    \ a 'let' constant\n        array = array.reversed()\n        ^~~~~\n/tmp/tmpdw2s8h9i.swift:23:9:\
    \ error: cannot assign to value: 'array' is a 'let' constant\n        array =\
    \ array.reversed()\n        ^~~~~\n/tmp/tmpdw2s8h9i.swift:28:9: error: cannot\
    \ assign to value: 'array' is a 'let' constant\n        array = array.sorted(by:\
    \ >)\n        ^~~~~\n/tmp/tmpdw2s8h9i.swift:30:9: error: cannot assign to value:\
    \ 'array' is a 'let' constant\n        array = array.sorted(by: <)\n        ^~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count <= 1 {\n        return array\n    }\n\n    var\
    \ sorted = [Int](repeating: array[0], count: array.count)\n\n    let swiftArray\
    \ = array.sorted()\n    if swiftArray.first % 2 == 1 {\n        sorted = array.sorted().reversed()\n\
    \    } else {\n        sorted = array\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpotevhlzl.swift:24:19: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if swiftArray.first % 2 == 1 {\n\
    \                  ^\n/tmp/tmpotevhlzl.swift:24:19: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n    if swiftArray.first\
    \ % 2 == 1 {\n                  ^\n       (                ?? <#default value#>)\n\
    /tmp/tmpotevhlzl.swift:24:19: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    if swiftArray.first % 2 == 1 {\n \
    \                 ^\n                       !\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // Your code here\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum : Int = 0\n    for i in 0..<array.count {\n      \
    \  sum += array[i]\n    }\n    if sum%2 != 0 {\n        return array.sorted{ $0\
    \ < $1 }\n    }\n    return array.sorted{ $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpgy5ipa2h/tmpgy5ipa2h.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3205d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3202c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3202c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3202c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgy5ipa2h                        0x000055c923946a24 <unavailable> + 6692

    5    libc.so.6                          0x00002ba3207bc460 __libc_start_main +
    245

    6    tmpgy5ipa2h                        0x000055c923946279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = (array.first ?? 0) + array.last!\n    if sum % 2 ==\
    \ 1 {\n        array.sorted { $0 < $1 }\n    } else {\n        array.sorted {\
    \ $0 > $1 }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpo9249635/tmpo9249635.swift:17: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d602cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d5ffc2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2d5ffc2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2d5ffc213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2d5ffc1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpo9249635                        0x000055d8330bdf4d <unavailable> + 8013

    6    tmpo9249635                        0x000055d8330bd4fd <unavailable> + 5373

    7    libc.so.6                          0x00002b2d604b7460 __libc_start_main +
    245

    8    tmpo9249635                        0x000055d8330bd209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sum = 0\n    for x in array {\n        sum += x\n    }\n\
    \    if sum % 2 == 1 {\n        array.sortInPlace()\n    }\n    else {\n     \
    \   array.reverse()\n        array.sortInPlace()\n    }\n    return array\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpbyc_29vm.swift:22:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpbyc_29vm.swift:25:15:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \        array.reverse()\n        ~~~~~ ^\n/tmp/tmpbyc_29vm.swift:26:15: error:\
    \ value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var maxSum\
    \ = 0\n    var minSum = Int64(array.last!)\n    var sum = 0\n    var result =\
    \ [Int]()\n    for number in array {\n        sum += number\n        if sum >\
    \ maxSum {\n            maxSum = sum\n        }\n        if sum < minSum {\n \
    \           minSum = sum\n        }\n    }\n    if maxSum > minSum {\n       \
    \ for number in array {\n            if number > maxSum {\n                result.append(number)\n\
    \                sum -= number\n                maxSum = sum\n            }\n\
    \            if number < minSum {\n                result.insert(number, at: result.endIndex)\n\
    \                sum -= number\n                minSum = sum\n            }\n\
    \        }\n    } else {\n        for number in array {\n            if number\
    \ < minSum {\n                result.insert(number, at: result.endIndex)\n   \
    \             sum -= number\n                minSum = sum\n            }\n   \
    \         if number > maxSum {\n                result.insert(number, at: result.endIndex)\n\
    \                sum -= number\n                maxSum = sum\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp9ycgil1o.swift:30:22: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n            minSum = sum\n                     ^~~\n      \
    \               Int64( )\n/tmp/tmp9ycgil1o.swift:43:26: error: cannot assign value\
    \ of type 'Int' to type 'Int64'\n                minSum = sum\n              \
    \           ^~~\n                         Int64( )\n/tmp/tmp9ycgil1o.swift:51:26:\
    \ error: cannot assign value of type 'Int' to type 'Int64'\n                minSum\
    \ = sum\n                         ^~~\n                         Int64( )\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sortedArray = array.sorted()\n    if sum (array[0], array[array.count-1])\
    \ % 2 == 1 {\n        sortedArray.reverse()\n    }\n    return sortedArray\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmptppczxfp.swift:18:8: error: cannot find 'sum' in scope\n    if\
    \ sum (array[0], array[array.count-1]) % 2 == 1 {\n       ^~~\n/tmp/tmptppczxfp.swift:19:21:\
    \ error: cannot use mutating member on immutable value: 'sortedArray' is a 'let'\
    \ constant\n        sortedArray.reverse()\n        ~~~~~~~~~~~ ^\n/tmp/tmptppczxfp.swift:17:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let sortedArray = array.sorted()\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp59y57hgk.swift:17:18: error: cannot convert return expression of\
    \ type '()' to return type '[Int]'\n    return array.sort()\n           ~~~~~~^~~~~~\n\
    /tmp/tmp59y57hgk.swift:17:18: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n    return array.sort()\n           ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // 1. get sum\n    var sum = array.reduce(0) { $0 + $1 }\n \
    \   // 2. check sum is odd or even\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortDescending()\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmprum5w4o0.swift:21:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmprum5w4o0.swift:23:15:\
    \ error: value of type '[Int]' has no member 'sortDescending'\n        array.sortDescending()\n\
    \        ~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let mut array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count < 2 {\n        return array\n    }\n\n    let\
    \ mid = array.count / 2\n    let midVal = array[mid]\n    array.sortInPlace()\n\
    \n    if sumOfTwoNumbers(array: array) % 2 == 1 {\n        array.reverse()\n \
    \   }\n\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpnlohamak.swift:17:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut array =\
    \ array\n            ^\n/tmp/tmpnlohamak.swift:17:13: note: join the identifiers\
    \ together\n    let mut array = array\n        ~~~~^~~~~\n        mutarray\n/tmp/tmpnlohamak.swift:17:13:\
    \ note: join the identifiers together with camel-case\n    let mut array = array\n\
    \        ~~~~^~~~~\n        mutArray\n/tmp/tmpnlohamak.swift:27:11: error: value\
    \ of type '[Int]' has no member 'sortInPlace'\n    array.sortInPlace()\n    ~~~~~\
    \ ^~~~~~~~~~~\n/tmp/tmpnlohamak.swift:29:8: error: cannot find 'sumOfTwoNumbers'\
    \ in scope\n    if sumOfTwoNumbers(array: array) % 2 == 1 {\n       ^~~~~~~~~~~~~~~\n\
    /tmp/tmpnlohamak.swift:30:15: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n        array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n\n    let\
    \ sum = array.sum()\n    var sorted = [Int]()\n\n    if sum % 2 == 1 {\n     \
    \   sorted = array.sorted(by: { $0 < $1 })\n    }\n    else {\n        sorted\
    \ = array.sorted(by: { $0 > $1 })\n    }\n\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpn5cq9qel.swift:21:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum()\n              ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var new_array = [Int]()\n    new_array.append(array[0])\n  \
    \  new_array.append(array[0])\n    var counter = 1\n    for i in array {\n   \
    \     if i % 2 == 1 {\n            new_array.append(i)\n        } else {\n   \
    \         new_array.append(array[counter])\n        }\n        counter += 1\n\
    \    }\n    return new_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b360e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b35dd9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5b35dd9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5b35dd913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5b35dd8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5b35bd8e83 <unavailable> + 188035

    6    tmpdwuwur62                        0x0000561f8bad3f28 <unavailable> + 7976

    7    tmpdwuwur62                        0x0000561f8bad35bd <unavailable> + 5565

    8    libc.so.6                          0x00002b5b362ce460 __libc_start_main +
    245

    9    tmpdwuwur62                        0x0000561f8bad32c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted().sort()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp4u3xj8gx.swift:17:27: error: cannot convert return expression of\
    \ type '()' to return type '[Int]'\n    return array.sorted().sort()\n       \
    \    ~~~~~~~~~~~~~~~^~~~~~\n/tmp/tmp4u3xj8gx.swift:17:27: error: cannot use mutating\
    \ member on immutable value: function call returns immutable value\n    return\
    \ array.sorted().sort()\n           ~~~~~~~~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var swapped = true\n    var sortedArray: [Int] = []\n    var\
    \ sum = 0\n    for value in array {\n        sum += value\n        if sum > 0\
    \ {\n            sortedArray.append(value)\n        }\n    }\n\n    if sum % 2\
    \ == 0 {\n        for value in array {\n            if value != sortedArray[0]\
    \ {\n                swapped = false\n                sortedArray.removeFirst()\n\
    \                sortedArray.append(value)\n                break\n          \
    \  }\n        }\n    } else {\n        for value in array {\n            if value\
    \ != sortedArray[sortedArray.count - 1] {\n                swapped = false\n \
    \               sortedArray.removeLast()\n                sortedArray.append(value)\n\
    \                break\n            }\n        }\n    }\n    if swapped {\n  \
    \      return sort_array(array: sortedArray)\n    }\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014539
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = [Int]()\n    var sum = 0\n    var first =\
    \ 0\n    var last = array.count - 1\n    while last > first {\n        sum = array[first]\
    \ + array[last]\n        sortedArray.append(sum)\n        if sum % 2 == 1 {\n\
    \            sortedArray = sortedArray.reversed()\n        }\n        first +=\
    \ 1\n        last -= 1\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpmwx_4sx1/tmpmwx_4sx1.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b841f1f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b841eee8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b841eee8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b841eee77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmwx_4sx1                        0x000055bdc1d526dd <unavailable> + 5853

    5    libc.so.6                          0x00002b841f3dd460 __libc_start_main +
    245

    6    tmpmwx_4sx1                        0x000055bdc1d52229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sumArray = array.enumerated().flatMap { $0.element + $1.element\
    \ }\n    return sumArray.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpfk12f52x.swift:17:52: error: value of type 'Int' has no member\
    \ 'element'\n    let sumArray = array.enumerated().flatMap { $0.element + $1.element\
    \ }\n                                                ~~ ^~~~~~~\n/tmp/tmpfk12f52x.swift:17:65:\
    \ error: value of type 'Int' has no member 'element'\n    let sumArray = array.enumerated().flatMap\
    \ { $0.element + $1.element }\n                                              \
    \               ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.sum\n    if sum % 2 == 1 {\n        array.sort()\
    \ { $0 < $1 }\n    } else {\n        array.sort() { $0 > $1 }\n    }\n    return\
    \ array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpx9wy2vs4.swift:17:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n/tmp/tmpx9wy2vs4.swift:19:15:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \        array.sort() { $0 < $1 }\n        ~~~~~ ^\n/tmp/tmpx9wy2vs4.swift:21:15:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \        array.sort() { $0 > $1 }\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    return array.sort{ $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmptydq0w1s.swift:18:18: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n    return array.sort{ $0 < $1 }\n     \
    \      ~~~~~ ^\n/tmp/tmptydq0w1s.swift:18:18: error: cannot convert return expression\
    \ of type '()' to return type '[Int]'\n    return array.sort{ $0 < $1 }\n    \
    \       ~~~~~~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ swiped = false\n    if array.last % 2 == 0 {\n        swiped = true\n      \
    \  array.append(array.last! - 1)\n    }\n    var sum = 0\n    var index = 0\n\
    \    for value in array {\n        sum += value\n        if swiped && sum % 2\
    \ == 0 {\n            sum += value - array[index]\n        } else {\n        \
    \    sum += value - array[array.count - index - 1]\n        }\n        index +=\
    \ 1\n    }\n    if swiped {\n        array = array[1..<array.count - 1]\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp0m_nprm1.swift:21:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if array.last % 2 == 0 {\n      \
    \       ^\n/tmp/tmp0m_nprm1.swift:21:14: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if array.last % 2 == 0\
    \ {\n             ^\n       (          ?? <#default value#>)\n/tmp/tmp0m_nprm1.swift:21:14:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if array.last % 2 == 0 {\n             ^\n                 !\n/tmp/tmp0m_nprm1.swift:23:15:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \        array.append(array.last! - 1)\n        ~~~~~ ^\n/tmp/tmp0m_nprm1.swift:37:9:\
    \ error: cannot assign to value: 'array' is a 'let' constant\n        array =\
    \ array[1..<array.count - 1]\n        ^~~~~\n/tmp/tmp0m_nprm1.swift:37:22: error:\
    \ cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n        array\
    \ = array[1..<array.count - 1]\n                ~~~~~^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sorted = array\n    if sorted.count > 0 {\n        sorted.sortInPlace()\n\
    \    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpzr1091ku.swift:19:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        sorted.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014533
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    let\
    \ sumOfFirstElement = array[0]\n    let sumOfLastElement = array[array.count -\
    \ 1]\n    if sumOfFirstElement % 2 == 1 && sumOfLastElement % 2 == 0 {\n     \
    \   return array.sorted { $0 < $1 }\n    }\n    return array.sorted { $0 > $1\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(array: [] as [Int])\
    \ == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6lr0y89s/tmp6lr0y89s.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac492f04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac492bfbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac492bfb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac492bfa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6lr0y89s                        0x000055db620f5796 <unavailable> + 6038

    5    libc.so.6                          0x00002ac4930f0460 __libc_start_main +
    245

    6    tmp6lr0y89s                        0x000055db620f5179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // 1. \u5C06\u6570\u7EC4\u8F6C\u6362\u4E3A\u5B57\u7B26\u4E32\
    \n    var str = array.map(String.init).joined()\n    // 2. \u6839\u636E\u5B57\u7B26\
    \u4E32\u8BA1\u7B97\u51FA\u6700\u5927\u7684\u6570\n    var max = Int(str.characters.first!)\n\
    \    for character in str.characters.dropFirst() {\n        if character < max\
    \ {\n            max = character\n        }\n    }\n    // 3. \u5C06\u6570\u7EC4\
    \u6309\u7167\u5B57\u7B26\u4E32\u7684\u6700\u5927\u6570\u5BF9\u5E94\u7684\u5143\
    \u7D20\u8FDB\u884C\u6392\u5E8F\n    var arr = array.map {\n        if $0 < max\
    \ {\n            $0\n        } else {\n            -$0\n        }\n    }\n   \
    \ return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpgj5er37t.swift:20:15: error: no exact matches in call to initializer\
    \ \n    var max = Int(str.characters.first!)\n              ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'String.Element' (aka 'Character'))\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'String.Element' (aka 'Character'))\n    public init(_\
    \ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23: note: candidate\
    \ expects value of type 'String' for parameter #1 (got 'String.Element' (aka 'Character'))\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n\
    /tmp/tmpgj5er37t.swift:21:26: error: 'characters' is unavailable: Please use String\
    \ directly\n    for character in str.characters.dropFirst() {\n              \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    precondition(array.count >= 1, \"the array can not be empty.\"\
    )\n\n    let sortedArray = array.sorted { $0 < $1 }\n    let first = sortedArray[0]\n\
    \    let last = sortedArray[sortedArray.count-1]\n    let sumOfFirstAndLast =\
    \ first + last\n\n    if sumOfFirstAndLast % 2 == 0 {\n        sortedArray.sorted\
    \ { $0 < $1 }\n    } else {\n        sortedArray.sorted { $0 > $1 }\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp0n1a1dcv.swift:25:21: warning: result of call to 'sorted(by:)'\
    \ is unused\n        sortedArray.sorted { $0 < $1 }\n                    ^   \
    \   ~~~~~~~~~~~\n/tmp/tmp0n1a1dcv.swift:27:21: warning: result of call to 'sorted(by:)'\
    \ is unused\n        sortedArray.sorted { $0 > $1 }\n                    ^   \
    \   ~~~~~~~~~~~\n/tmp/tmp0n1a1dcv.swift:29:1: error: missing return in global\
    \ function expected to return '[Int]'\n}\n^\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // write your code here\n    \n    var result = array.sorted()\
    \ { $0.0 < $1.0 }\n    if result.isEmpty {\n        result = array.reversed()\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpoc879crc.swift:19:38: error: value of type 'Int' has no member\
    \ '0'\n    var result = array.sorted() { $0.0 < $1.0 }\n                     \
    \             ~~ ^\n/tmp/tmpoc879crc.swift:19:45: error: value of type 'Int' has\
    \ no member '0'\n    var result = array.sorted() { $0.0 < $1.0 }\n           \
    \                              ~~ ^\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count <= 1 {\n        return array\n    }\n    let\
    \ mut sum = 0\n    for i in 0..<array.count {\n        sum += array[i]\n    }\n\
    \    if sum % 2 == 0 {\n        let result = array.sorted()\n        return result\
    \ as! [Int]\n    } else {\n        let result = array.sorted().reversed()\n  \
    \      return result as! [Int]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpj77c67zy.swift:20:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut sum = 0\n\
    \            ^\n/tmp/tmpj77c67zy.swift:20:13: note: join the identifiers together\n\
    \    let mut sum = 0\n        ~~~~^~~\n        mutsum\n/tmp/tmpj77c67zy.swift:20:13:\
    \ note: join the identifiers together with camel-case\n    let mut sum = 0\n \
    \       ~~~~^~~\n        mutSum\n/tmp/tmpj77c67zy.swift:22:9: error: cannot find\
    \ 'sum' in scope\n        sum += array[i]\n        ^~~\n/tmp/tmpj77c67zy.swift:24:8:\
    \ error: cannot find 'sum' in scope\n    if sum % 2 == 0 {\n       ^~~\n/tmp/tmpj77c67zy.swift:26:23:\
    \ warning: forced cast of '[Int]' to same type has no effect\n        return result\
    \ as! [Int]\n                      ^~~~~~~~~\n                      \n/tmp/tmpj77c67zy.swift:29:23:\
    \ warning: cast from 'ReversedCollection<[Int]>' to unrelated type '[Int]' always\
    \ fails\n        return result as! [Int]\n               ~~~~~~ ^   ~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let maxIndex = array.count - 1\n    var maxSum = array[maxIndex]\n\
    \    for i in maxIndex {\n        let sum = array[i].powi(2) + array[i].powf(2)\n\
    \        if sum > maxSum {\n            maxSum = sum\n            maxIndex = i\n\
    \        }\n    }\n    if maxIndex != 0 {\n        if maxSum.lt(maxSum.negate())\
    \ {\n            return array[maxIndex..<0]\n        } else {\n            return\
    \ array[0..<maxIndex].reversed()\n        }\n    } else {\n        return array\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpewr4y5wi.swift:19:14: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n    for i in maxIndex {\n             ^~~~~~~~\n/tmp/tmpewr4y5wi.swift:27:19:\
    \ error: value of type 'Int' has no member 'lt'\n        if maxSum.lt(maxSum.negate())\
    \ {\n           ~~~~~~ ^~\n/tmp/tmpewr4y5wi.swift:28:25: error: cannot convert\
    \ return expression of type 'ArraySlice<Int>' to return type '[Int]'\n       \
    \     return array[maxIndex..<0]\n                   ~~~~~^~~~~~~~~~~~~~\n/tmp/tmpewr4y5wi.swift:20:47:\
    \ error: reference to member 'powf' cannot be resolved without a contextual type\n\
    \        let sum = array[i].powi(2) + array[i].powf(2)\n                     \
    \                         ^\n/tmp/tmpewr4y5wi.swift:20:28: error: reference to\
    \ member 'powi' cannot be resolved without a contextual type\n        let sum\
    \ = array[i].powi(2) + array[i].powf(2)\n                           ^\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard let sum = array.sum() else { return array }\n    var result\
    \ = array.sorted()\n    if sum % 2 == 1 {\n        result = result.sorted { $0\
    \ < $1 }\n    } else {\n        result = result.sorted { $0 > $1 }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpcyvyopm0.swift:17:27: error: value of type '[Int]' has no member\
    \ 'sum'\n    guard let sum = array.sum() else { return array }\n             \
    \       ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.isEmpty { return array }\n    let (firstValue, lastValue)\
    \ = array.first { $0 > $1 }\n    let (first, last) = array.splitFirstLast()\n\
    \    return firstValue > lastValue ? sort_array(array: last) + first : sort_array(array:\
    \ first) + last\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpf7cuq4g3.swift:18:41: error: cannot convert value of type 'Int?'\
    \ to specified type '(_, _)'\n    let (firstValue, lastValue) = array.first {\
    \ $0 > $1 }\n                                  ~~~~~~^~~~~~~~~~~~~~~~~\n/tmp/tmpf7cuq4g3.swift:18:47:\
    \ error: contextual closure type '(Int) throws -> Bool' expects 1 argument, but\
    \ 2 were used in closure body\n    let (firstValue, lastValue) = array.first {\
    \ $0 > $1 }\n                                              ^\n/tmp/tmpf7cuq4g3.swift:19:31:\
    \ error: value of type '[Int]' has no member 'splitFirstLast'\n    let (first,\
    \ last) = array.splitFirstLast()\n                        ~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    let sum\
    \ = (array[0] + array[array.count - 1]).truncatingRemainder(dividingBy: 0)\n \
    \   switch sum {\n    case .odd:\n        return array.sorted { $0 < $1 }\n  \
    \  case .even:\n        return array.sorted { $0 > $1 }\n    default:\n      \
    \  return array\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp_2zlidfl.swift:20:51: error: value of type 'Int' has no member\
    \ 'truncatingRemainder'\n    let sum = (array[0] + array[array.count - 1]).truncatingRemainder(dividingBy:\
    \ 0)\n              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    func swap(a: Int, b: Int) {\n        var tmp = array[a]\n  \
    \      array[a] = array[b]\n        array[b] = tmp\n    }\n\n    if array.count\
    \ <= 1 {\n        return array\n    }\n\n    let sumFirst = array[0] + array[-1]\n\
    \    let sumLast = array[array.count - 1] + array[0]\n    let isFirstSumEven =\
    \ sumFirst % 2 == 0\n    let isLastSumEven = sumLast % 2 == 0\n    var isSorted\
    \ = true\n\n    while isSorted {\n        isSorted = false\n        for i in 0..<array.count\
    \ - 1 {\n            let sum = array[i] + array[i + 1]\n            let isEven\
    \ = sum % 2 == 0\n            let isOdd = !isEven\n            if !isEven && !isOdd\
    \ {\n                isSorted = true\n                swap(i, i + 1)\n       \
    \         swap(array.count - i - 1, array.count - 1)\n            }\n        }\n\
    \    }\n\n    for i in 0..<array.count {\n        swap(i, array.count - 1)\n \
    \   }\n\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpic2idtdl.swift:19:14: error: cannot assign through subscript: 'array'\
    \ is a 'let' constant\n        array[a] = array[b]\n        ~~~~~^\n/tmp/tmpic2idtdl.swift:20:14:\
    \ error: cannot assign through subscript: 'array' is a 'let' constant\n      \
    \  array[b] = tmp\n        ~~~~~^\n/tmp/tmpic2idtdl.swift:41:21: error: missing\
    \ argument labels 'a:b:' in call\n                swap(i, i + 1)\n           \
    \         ^\n                     a: b: \n/tmp/tmpic2idtdl.swift:42:21: error:\
    \ missing argument labels 'a:b:' in call\n                swap(array.count - i\
    \ - 1, array.count - 1)\n                    ^\n                     a:      \
    \             b: \n/tmp/tmpic2idtdl.swift:48:13: error: missing argument labels\
    \ 'a:b:' in call\n        swap(i, array.count - 1)\n            ^\n          \
    \   a: b: \n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7dsg7ozt/tmp7dsg7ozt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb247cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb244c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb244c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb244c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7dsg7ozt                        0x000055d5240d3824 <unavailable> + 6180

    5    libc.so.6                          0x00002afb249b6460 __libc_start_main +
    245

    6    tmp7dsg7ozt                        0x000055d5240d3079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted {\n        if $0 + $1 < $1 {\n         \
    \   return $0 + $1 < $1\n        } else {\n            return $0 + $1 > $1\n \
    \       }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpvl0lpvcj/tmpvl0lpvcj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b682eb55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b682e84cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b682e84c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b682e84b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvl0lpvcj                        0x00005587cc77a656 <unavailable> + 5718

    5    libc.so.6                          0x00002b682ed41460 __libc_start_main +
    245

    6    tmpvl0lpvcj                        0x00005587cc77a039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var swift = [Int]()\n    for value in array {\n        swift.append(value)\n\
    \    }\n    swift.sort()\n    for value in swift {\n        swift[swift.count\
    \ - value - 1] = 0\n    }\n    return swift\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d96d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d93c7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac9d93c7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac9d93c713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac9d93c6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac9d91c67ec <unavailable> + 186348

    6    tmpyffo0opp                        0x000056142040a235 <unavailable> + 8757

    7    tmpyffo0opp                        0x000056142040979d <unavailable> + 6045

    8    libc.so.6                          0x00002ac9d98bc460 __libc_start_main +
    245

    9    tmpyffo0opp                        0x00005614204093b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array == [] {\n        return array\n    }\n    var swaps:\
    \ [(Int, Int)] = []\n    var sum: Int = 0\n    for element in array {\n      \
    \  sum += element\n        if sum % 2 == 0 {\n            swaps.append((sum, element))\n\
    \        } else {\n            swaps.append((sum - element, element))\n      \
    \  }\n    }\n    swaps.sort{ $0.0 < $1.0 }\n    return swaps.map{ $1.0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp97jq0lnh.swift:31:26: error: value of type 'Int' has no member\
    \ '0'\n    return swaps.map{ $1.0 }\n                      ~~ ^\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  return sort_array(array: array, isAscending: true)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpk45z9vm3.swift:17:48: error: extra argument 'isAscending' in call\n\
    \  return sort_array(array: array, isAscending: true)\n                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    guard array.count > 0 else { return array }\n    \n  \
    \  let totalSum = array.map({ $0 + $1 }).reduce(0, +)\n    \n    return array.sorted{\
    \ totalSum > $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmptp73cegk.swift:20:30: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n    let totalSum\
    \ = array.map({ $0 + $1 }).reduce(0, +)\n                             ^\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n\tlet sum = array.last! + array.first!\n\tlet index = array.first!\n\
    \tvar result = array\n\t\n\tif sum % 2 == 1 {\n\t\tresult.sortInPlace()\n\t} else\
    \ {\n\t\tresult.sortInPlace()\n\t\tresult.reverse()\n\t}\n\t\n\treturn result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpv7r0v1j9.swift:22:10: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n                result.sortInPlace()\n                ~~~~~~\
    \ ^~~~~~~~~~~\n/tmp/tmpv7r0v1j9.swift:24:10: error: value of type '[Int]' has\
    \ no member 'sortInPlace'\n                result.sortInPlace()\n            \
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { (a, b) -> Bool in\n        if a+b == 1\
    \ {\n            return a == b\n        }\n        if a + b < 0 {\n          \
    \  return false\n        }\n        if a + b > 1 {\n            return true\n\
    \        }\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp3xdqq6j2/tmp3xdqq6j2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b1084dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b10544b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b10544988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b105437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xdqq6j2                        0x00005588a6a7b656 <unavailable> + 5718

    5    libc.so.6                          0x00002b9b10a39460 __libc_start_main +
    245

    6    tmp3xdqq6j2                        0x00005588a6a7b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: {$0.0 < $1})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpfprlw3fo.swift:17:33: error: value of type 'Int' has no member\
    \ '0'\n    return array.sorted(by: {$0.0 < $1})\n                            \
    \ ~~ ^\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let coswiftArray = array.map { $0 * $0 }\n    return coswiftArray.sort()\n\
    \        .map { $0 - $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpbq8s62nz.swift:19:10: error: value of tuple type '()' has no member\
    \ 'map'\n        .map { $0 - $1 }\n         ^~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var a = array\n    var b = array\n    for i in 0..<(array.count\
    \ - 1) {\n        for j in (i + 1)..<(array.count) {\n            var sum = 0\n\
    \            for k in 0..<(j - i) {\n                sum += a[k] * b[k]\n    \
    \        }\n            if sum > 0 {\n                let temp = sum\n       \
    \         sum = 0\n                for (k) in (i..<j) {\n                    sum\
    \ += a[k] * b[k]\n                }\n                if sum < temp {\n       \
    \             b[i], b[j] = b[j], b[i]\n                }\n            }\n    \
    \    }\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp9wb6zduj.swift:32:25: error: consecutive statements on a line must\
    \ be separated by ';'\n                    b[i], b[j] = b[j], b[i]\n         \
    \               ^\n                        ;\n/tmp/tmp9wb6zduj.swift:32:25: error:\
    \ expected expression\n                    b[i], b[j] = b[j], b[i]\n         \
    \               ^\n/tmp/tmp9wb6zduj.swift:32:22: warning: subscript is accessed\
    \ but result is unused\n                    b[i], b[j] = b[j], b[i]\n        \
    \            ~^~~\n/tmp/tmp9wb6zduj.swift:17:9: warning: variable 'a' was never\
    \ mutated; consider changing to 'let' constant\n    var a = array\n    ~~~ ^\n\
    \    let\n/tmp/tmp9wb6zduj.swift:18:9: warning: variable 'b' was never mutated;\
    \ consider changing to 'let' constant\n    var b = array\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.count\n    let coswift = (array.sortInPlace())\n\
    \    return coswift.prefix(sum).reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpb3e5pyx8.swift:18:26: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    let coswift = (array.sortInPlace())\n                   ~~~~~\
    \ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 > $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4wyqj890/tmp4wyqj890.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c64d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c61ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c61ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c61cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wyqj890                        0x0000557ab8547656 <unavailable> + 5718

    5    libc.so.6                          0x00002ab8c66c3460 __libc_start_main +
    245

    6    tmp4wyqj890                        0x0000557ab8547039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    precondition(array.count != 0, \"The array can't be empty\"\
    )\n    let sum = array.reduce(0, +)\n    if sum%2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace{ $0 < $1 }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpuebw9l7d.swift:20:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpuebw9l7d.swift:22:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    \n \
    \   var sortedArray = array.sorted()\n    let firstIndex = sortedArray.firstIndex(of:\
    \ array.first!)\n    let lastIndex: Int? = sortedArray.lastIndex(of: array.last!)\n\
    \    let sum: Int = firstIndex! + lastIndex!\n    \n    // first case is odd,\
    \ second case is even\n    if sum % 2 == 1 {\n        sortedArray = sortedArray.reversed()\n\
    \    }\n    \n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpdcknvfx0/tmpdcknvfx0.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab00958dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab009284b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab009284988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0092837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdcknvfx0                        0x000055bfb54bb9f6 <unavailable> + 6646

    5    libc.so.6                          0x00002ab009779460 __libc_start_main +
    245

    6    tmpdcknvfx0                        0x000055bfb54bb3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { (ls, rs) in\n        var ld = rs\n   \
    \     var rd = ls\n        if ld == rd {\n            return ls\n        }\n \
    \       if ld > rd {\n            let temp = rd\n            rd = ls\n       \
    \     ls = temp\n        }\n        if ld > rd + 1 {\n            let temp = ld\
    \ + rd - 1\n            rd = temp\n        }\n        if rd > ld + 1 {\n     \
    \       let temp = ld + rd\n            ld = temp\n        }\n        return ld\
    \ > rd ? ld : rd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpds_2skex.swift:21:20: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n            return ls\n                   ^\n     \
    \              (  != 0)\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted().reversed()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp3vrc1cff/tmp3vrc1cff.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fdf821c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fdf518b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fdf518988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fdf5177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vrc1cff                        0x0000559b873166f6 <unavailable> + 5878

    5    libc.so.6                          0x00002b2fdfa0d460 __libc_start_main +
    245

    6    tmp3vrc1cff                        0x0000559b873160d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.isEmpty { return array }\n    var result = [Int](repeating:\
    \ 0, count: array.count)\n    \n    for i in 0..<array.count {\n        result[array.sortedIndex(of:\
    \ array[i])!] = array[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjexw3z2s.swift:21:22: error: value of type '[Int]' has no member\
    \ 'sortedIndex'\n        result[array.sortedIndex(of: array[i])!] = array[i]\n\
    \               ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return []\n    }\n    var sum\
    \ = 0\n    for value in array {\n        sum += value\n    }\n    if sum % 2 ==\
    \ 1 {\n        array.sorted()\n    } else {\n        array.sorted().reversed()\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbhdq5y9s/tmpbhdq5y9s.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c82479c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c82170b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c82170988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c8216f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhdq5y9s                        0x000055e989f81956 <unavailable> + 6486

    5    libc.so.6                          0x00002b4c82665460 __libc_start_main +
    245

    6    tmpbhdq5y9s                        0x000055e989f81339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return sorted(array)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpuee8oy2v.swift:17:12: error: cannot find 'sorted' in scope\n  \
    \  return sorted(array)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    precondition(array.count > 0)\n\n    var sum = array.reduce(0,\
    \ combine: +)\n\n    var isOdd = (sum & 1) == 1\n    var isEven = (sum & 1) ==\
    \ 0\n\n    if isOdd {\n        array = array.sorted{ $0 < $1 }\n    } else {\n\
    \        array = array.sorted{ $0 > $1 }\n    }\n\n    return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp_h6n_o9z.swift:19:27: error: extraneous argument label 'combine:'\
    \ in call\n    var sum = array.reduce(0, combine: +)\n                       \
    \   ^   ~~~~~~~~~\n                              \n/tmp/tmp_h6n_o9z.swift:25:9:\
    \ error: cannot assign to value: 'array' is a 'let' constant\n        array =\
    \ array.sorted{ $0 < $1 }\n        ^~~~~\n/tmp/tmp_h6n_o9z.swift:27:9: error:\
    \ cannot assign to value: 'array' is a 'let' constant\n        array = array.sorted{\
    \ $0 > $1 }\n        ^~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n\n    var\
    \ sum = 0\n\n    var tempArray = [Int]()\n\n    for value in array {\n       \
    \ tempArray.append(value)\n        sum += value\n    }\n\n    if sum % 2 == 1\
    \ {\n        tempArray.sortInPlace()\n    } else {\n        tempArray.sortInPlace()\n\
    \        tempArray.reverse()\n    }\n\n    return tempArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp91w54aq3.swift:31:19: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        tempArray.sortInPlace()\n        ~~~~~~~~~ ^~~~~~~~~~~\n\
    /tmp/tmp91w54aq3.swift:33:19: error: value of type '[Int]' has no member 'sortInPlace'\n\
    \        tempArray.sortInPlace()\n        ~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard let firstItem = array.first else { return array }\n  \
    \  guard let lastItem = array.last else { return array }\n    var newArray = array\n\
    \    let firstItemIsOdd = firstItem % 2 == 1\n    let firstItemIsEven = firstItem\
    \ % 2 == 0\n    let lastItemIsEven = lastItem % 2 == 0\n\n    if firstItemIsOdd\
    \ && lastItemIsEven {\n        newArray = sort_array_odd_even(array: newArray)\n\
    \    } else if firstItemIsEven && lastItemIsOdd {\n        newArray = sort_array_even_odd(array:\
    \ newArray)\n    } else {\n        newArray = sort_array_odd_even(array: newArray)\n\
    \    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpiaxu468w.swift:25:20: error: cannot find 'sort_array_odd_even'\
    \ in scope\n        newArray = sort_array_odd_even(array: newArray)\n        \
    \           ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiaxu468w.swift:26:34: error: cannot find\
    \ 'lastItemIsOdd' in scope\n    } else if firstItemIsEven && lastItemIsOdd {\n\
    \                                 ^~~~~~~~~~~~~\n/tmp/tmpiaxu468w.swift:27:20:\
    \ error: cannot find 'sort_array_even_odd' in scope\n        newArray = sort_array_even_odd(array:\
    \ newArray)\n                   ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiaxu468w.swift:29:20:\
    \ error: cannot find 'sort_array_odd_even' in scope\n        newArray = sort_array_odd_even(array:\
    \ newArray)\n                   ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { (first, second) -> Bool in\n        let\
    \ firstSum = first + second\n        let secondSum = first - second\n        let\
    \ firstSumEven = first % 2 == 0\n        let secondSumEven = second % 2 == 0\n\
    \n        let firstSumOdd = firstSum % 2 == 1\n        let secondSumOdd = secondSum\
    \ % 2 == 1\n\n        return firstSumEven\n            || (secondSumEven && firstSumOdd)\n\
    \            || (secondSumOdd && firstSumEven)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1q7iopw6/tmp1q7iopw6.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b680f91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b680f614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b680f614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b680f6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1q7iopw6                        0x000055e2bfcd46f6 <unavailable> + 5878

    5    libc.so.6                          0x00002b680fb09460 __libc_start_main +
    245

    6    tmp1q7iopw6                        0x000055e2bfcd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    if array.count\
    \ > 2 {\n        if array.first + array.last - 2 * array.count == 0 {\n      \
    \      return array\n        }\n        if array.first + array.last - 2 * array.count\
    \ < 0 {\n            return array.reversed()\n        }\n        if array.first\
    \ + array.last - 2 * array.count == 1 {\n            return array\n        }\n\
    \    }\n    let sum = (array.first ?? 0) + array.last\n    let swap = swap(array:\
    \ array, firstIndex: array.first, lastIndex: array.last)\n    let result = sortArray(array:\
    \ array)\n    if sum % 2 == 0 {\n        return result.reversed()\n    } else\
    \ {\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpsrhm_83v.swift:21:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        if array.first + array.last - 2 * array.count == 0\
    \ {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsrhm_83v.swift:24:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        if array.first\
    \ + array.last - 2 * array.count < 0 {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsrhm_83v.swift:27:12: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        if array.first + array.last - 2 * array.count == 1\
    \ {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsrhm_83v.swift:31:42:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    let sum = (array.first ?? 0) + array.last\n                             \
    \            ^\n/tmp/tmpsrhm_83v.swift:31:42: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    let sum = (array.first\
    \ ?? 0) + array.last\n                                         ^\n           \
    \                        (          ?? <#default value#>)\n/tmp/tmpsrhm_83v.swift:31:42:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    let sum = (array.first ?? 0) + array.last\n                     \
    \                    ^\n                                             !\n/tmp/tmpsrhm_83v.swift:32:77:\
    \ error: extra argument 'lastIndex' in call\n    let swap = swap(array: array,\
    \ firstIndex: array.first, lastIndex: array.last)\n                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpsrhm_83v.swift:32:53: error: cannot convert value of type 'Int?' to expected\
    \ argument type '[Int]'\n    let swap = swap(array: array, firstIndex: array.first,\
    \ lastIndex: array.last)\n                             "
  stdout: ''
  timestamp: 1660014610
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var retVal = [Int]()\n\n    if array.count < 2 {\n        return\
    \ retVal\n    }\n\n    let firstValue = array[0]\n    let lastValue = array[array.count\
    \ - 1]\n\n    if firstValue + lastValue == 0 {\n        return retVal\n    }\n\
    \n    if firstValue + lastValue == 1 {\n        let tempRetVal = sort_array(array:\
    \ array[0..<array.count - 1])\n        retVal = retVal + tempRetVal\n        return\
    \ retVal\n    }\n\n    if firstValue + lastValue % 2 == 0 {\n        retVal =\
    \ retVal + sort_array(array: array[0..<array.count - 1])\n        return retVal\n\
    \    } else {\n        let tempRetVal = sort_array(array: array[1..<array.count])\n\
    \        retVal = retVal + tempRetVal\n        return retVal\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpekamtktd.swift:31:49: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n        let tempRetVal = sort_array(array:\
    \ array[0..<array.count - 1])\n                                              \
    \  ^\n/tmp/tmpekamtktd.swift:37:50: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n        retVal = retVal + sort_array(array:\
    \ array[0..<array.count - 1])\n                                              \
    \   ^\n/tmp/tmpekamtktd.swift:40:49: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n        let tempRetVal = sort_array(array:\
    \ array[1..<array.count])\n                                                ^\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var swift: [Int] = []\n    array.forEach {\n\
    \        sum += $0\n    }\n    swift.reserveCapacity(array.count)\n    if sum%2\
    \ == 1 {\n        array.forEach { swift.append($0 - 1) }\n    } else {\n     \
    \   array.forEach { swift.append($0 + 1) }\n    }\n    swift.sortInPlace({ $0\
    \ < $1 })\n    return swift\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpgeai9zz5.swift:28:11: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    swift.sortInPlace({ $0 < $1 })\n    ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let copy = array\n    copy.sort()\n    return copy\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpm4bh7b5r.swift:18:10: error: cannot use mutating member on immutable\
    \ value: 'copy' is a 'let' constant\n    copy.sort()\n    ~~~~ ^\n/tmp/tmpm4bh7b5r.swift:17:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let copy = array\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sum = array[0]\n    var result = array\n    for i in 1 ..<\
    \ array.count {\n        let last = result[i-1]\n        let first = array[i]\n\
    \        if last + first > sum {\n            result = result.sorted()\n     \
    \   }\n        else {\n            let factor = sum / last\n            result\
    \ = result.sorted().map { (v) -> Int in\n                return v * factor\n \
    \           }\n        }\n        sum = last + first\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b780f382c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b780f079561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b780f079286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b780f07913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b780f078bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b780ee78e83 <unavailable> + 188035

    6    tmpyps7g_2e                        0x000055f34f2a6f9c <unavailable> + 8092

    7    tmpyps7g_2e                        0x000055f34f2a663d <unavailable> + 5693

    8    libc.so.6                          0x00002b780f56e460 __libc_start_main +
    245

    9    tmpyps7g_2e                        0x000055f34f2a6349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for element in array {\n        if\
    \ element % 2 == 1 {\n            result.insert(element, at: 0)\n        } else\
    \ {\n            result.insert(element, at: result.endIndex)\n        }\n    }\n\
    \    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpebfumucx/tmpebfumucx.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a270c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a26dc0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a26dc0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a26dbf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpebfumucx                        0x0000557fde1b5b24 <unavailable> + 6948

    5    libc.so.6                          0x00002b4a272b5460 __libc_start_main +
    245

    6    tmpebfumucx                        0x0000557fde1b5379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let resultArray = array.sorted(by: >)\n    return resultArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpcu0gdeey/tmpcu0gdeey.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b59b88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b5987fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b5987f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b5987e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcu0gdeey                        0x0000561b8fcf2656 <unavailable> + 5718

    5    libc.so.6                          0x00002b9b59d74460 __libc_start_main +
    245

    6    tmpcu0gdeey                        0x0000561b8fcf2039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let swiftArray = array.sorted()\n    let even = swiftArray.first!\n\
    \    let odd = swiftArray.last!\n    return odd...even\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpv08095zq.swift:20:15: error: cannot convert return expression of\
    \ type 'ClosedRange<Int>' to return type '[Int]'\n    return odd...even\n    \
    \       ~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var new_array = Array(array)\n    let array_sum = new_array.sum()\n\
    \    if array_sum % 2 == 0 {\n        for _ in new_array {\n            let idx\
    \ = new_array.index(of: 0)!\n            new_array.removeAtIndex(idx)\n      \
    \      new_array.insert(1, at: idx)\n        }\n    } else {\n        for _ in\
    \ new_array {\n            let idx = new_array.index(of: 0)!\n            new_array.removeLast()\n\
    \            new_array.insert(idx, at: 0)\n        }\n    }\n    return new_array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpa4vgmxq2.swift:18:31: error: value of type '[Int]' has no member\
    \ 'sum'\n    let array_sum = new_array.sum()\n                    ~~~~~~~~~ ^~~\n\
    /tmp/tmpa4vgmxq2.swift:21:33: warning: 'index(of:)' is deprecated: renamed to\
    \ 'firstIndex(of:)'\n            let idx = new_array.index(of: 0)!\n         \
    \                       ^\n/tmp/tmpa4vgmxq2.swift:21:33: note: use 'firstIndex(of:)'\
    \ instead\n            let idx = new_array.index(of: 0)!\n                   \
    \             ^~~~~\n                                firstIndex\n/tmp/tmpa4vgmxq2.swift:22:23:\
    \ error: value of type '[Int]' has no member 'removeAtIndex'\n            new_array.removeAtIndex(idx)\n\
    \            ~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpa4vgmxq2.swift:27:33: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n            let idx = new_array.index(of:\
    \ 0)!\n                                ^\n/tmp/tmpa4vgmxq2.swift:27:33: note:\
    \ use 'firstIndex(of:)' instead\n            let idx = new_array.index(of: 0)!\n\
    \                                ^~~~~\n                                firstIndex\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let mut arr = array.clone();\n    sort_array(&mut arr);\n  \
    \  return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmppuj872r_.swift:17:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut arr = array.clone();\n\
    \            ^\n/tmp/tmppuj872r_.swift:17:13: note: join the identifiers together\n\
    \    let mut arr = array.clone();\n        ~~~~^~~\n        mutarr\n/tmp/tmppuj872r_.swift:17:13:\
    \ note: join the identifiers together with camel-case\n    let mut arr = array.clone();\n\
    \        ~~~~^~~\n        mutArr\n/tmp/tmppuj872r_.swift:18:21: error: expected\
    \ ',' separator\n    sort_array(&mut arr);\n                    ^\n          \
    \         ,\n/tmp/tmppuj872r_.swift:17:25: error: value of type '[Int]' has no\
    \ member 'clone'\n    let mut arr = array.clone();\n                  ~~~~~ ^~~~~\n\
    /tmp/tmppuj872r_.swift:18:21: error: cannot find 'arr' in scope\n    sort_array(&mut\
    \ arr);\n                    ^~~\n/tmp/tmppuj872r_.swift:18:21: error: extra argument\
    \ in call\n    sort_array(&mut arr);\n              ~~~~~~^~~~\n/tmp/tmppuj872r_.swift:18:16:\
    \ error: cannot convert value of type '_' to expected argument type '[Int]'\n\
    \    sort_array(&mut arr);\n               ^\n/tmp/tmppuj872r_.swift:19:12: error:\
    \ cannot find 'arr' in scope\n    return arr\n           ^~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let length = array.count\n    \n    let sum = (array[length-1]\
    \ + array[length]) / 2\n    \n    let isOdd = (sum % 2) != 0\n    \n    var swiftArray\
    \ = array\n    \n    for i in 0..<length - 1 {\n        if isOdd {\n         \
    \   if array[i] > array[i+1] {\n                swiftArray[i] = array[i]\n   \
    \             swiftArray[i+1] = array[i+1]\n            } else {\n           \
    \     swiftArray[i] = array[i+1]\n                swiftArray[i+1] = array[i]\n\
    \            }\n        } else {\n            if array[i] < array[i+1] {\n   \
    \             swiftArray[i] = array[i]\n                swiftArray[i+1] = array[i+1]\n\
    \            } else {\n                swiftArray[i] = array[i+1]\n          \
    \      swiftArray[i+1] = array[i]\n            }\n        }\n    }\n    \n   \
    \ return swiftArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acf14662c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf14359561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acf14359286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acf1435913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acf14358bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acf14158e83 <unavailable> + 188035

    6    tmp918j211z                        0x0000556955a8def7 <unavailable> + 7927

    7    tmp918j211z                        0x0000556955a8d54d <unavailable> + 5453

    8    libc.so.6                          0x00002acf1484e460 __libc_start_main +
    245

    9    tmp918j211z                        0x0000556955a8d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0.swiftySum % 2 == $1.swiftySum % 2 }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmph2ukkd9z.swift:17:30: error: value of type 'Int' has no member\
    \ 'swiftySum'\n    return array.sorted { $0.swiftySum % 2 == $1.swiftySum % 2\
    \ }\n                          ~~ ^~~~~~~~~\n/tmp/tmph2ukkd9z.swift:17:50: error:\
    \ value of type 'Int' has no member 'swiftySum'\n    return array.sorted { $0.swiftySum\
    \ % 2 == $1.swiftySum % 2 }\n                                              ~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ result = array\n    let sumUp = array.reduce(0, { (sum, element) -> Int in\n\
    \        return sum + element\n    })\n    if sumUp % 2 == 1 {\n        result.reverse()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbjqzhf8g/tmpbjqzhf8g.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14d630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba14d327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba14d327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba14d3267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjqzhf8g                        0x0000561bef872826 <unavailable> + 6182

    5    libc.so.6                          0x00002ba14d81c460 __libc_start_main +
    245

    6    tmpbjqzhf8g                        0x0000561bef872209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var coswift = array.sorted()\n    \n    if (coswift.first >\
    \ coswift.last) { return coswift }\n\n    // if the sum of the first and last\
    \ elements is even, sort it in descending order\n    if coswift.first + 1 == coswift.last\
    \ {\n        coswift.reverse()\n    }\n    return coswift\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpofxa06no.swift:19:23: error: binary operator '>' cannot be applied\
    \ to two 'Int?' operands\n    if (coswift.first > coswift.last) { return coswift\
    \ }\n        ~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~\n/tmp/tmpofxa06no.swift:19:23: note:\
    \ overloads for '>' exist with these partially matching parameter lists: (Int,\
    \ Int)\n    if (coswift.first > coswift.last) { return coswift }\n           \
    \           ^\n/tmp/tmpofxa06no.swift:22:16: error: value of optional type 'Int?'\
    \ must be unwrapped to a value of type 'Int'\n    if coswift.first + 1 == coswift.last\
    \ {\n               ^\n/tmp/tmpofxa06no.swift:22:16: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n    if coswift.first\
    \ + 1 == coswift.last {\n               ^\n       (             ?? <#default value#>)\n\
    /tmp/tmpofxa06no.swift:22:16: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    if coswift.first + 1 == coswift.last\
    \ {\n               ^\n                    !\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    _ = array.sorted()\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpgeohq21u/tmpgeohq21u.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7243ec8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7243bbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7243bbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7243bbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgeohq21u                        0x00005555d6408696 <unavailable> + 5782

    5    libc.so.6                          0x00002b72440b4460 __libc_start_main +
    245

    6    tmpgeohq21u                        0x00005555d6408079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted {\n        let firstIndex = $0\n       \
    \ let lastIndex = $1\n\n        let sum = firstIndex + lastIndex\n\n        let\
    \ firstSum = firstIndex * -1\n        let lastSum = lastIndex * -1\n\n       \
    \ // if first index and last index sums are same then it is even\n        if sum\
    \ == firstSum {\n            return $0 < $1\n        }\n        // if first index\
    \ and last index sums are different then it is odd\n        return sum != firstSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1kglj4bb/tmp1kglj4bb.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c15d25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c15a1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c15a1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c15a1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1kglj4bb                        0x000055c53bc65656 <unavailable> + 5718

    5    libc.so.6                          0x00002b6c15f11460 __libc_start_main +
    245

    6    tmp1kglj4bb                        0x000055c53bc65039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sorted = array as [Int]\n    if sorted.isEmpty {\n     \
    \   return array\n    }\n\n    let min = min(sorted)\n    let max = max(sorted)\n\
    \    if min == max {\n        return sorted\n    }\n\n    sorted.sort {\n    \
    \    switch $0 {\n        case .lessThanOrEqualTo(min):\n            return .orderedAscending\n\
    \        case .greaterThanOrEqualTo(max):\n            return .orderedDescending\n\
    \        default:\n            return .orderedAscending\n        }\n    }\n  \
    \  return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp9sacgw1v.swift:22:25: error: missing argument for parameter #2\
    \ in call\n    let min = min(sorted)\n                        ^\n            \
    \            , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable\
    \ public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmp9sacgw1v.swift:23:25: error: missing argument for parameter\
    \ #2 in call\n    let max = max(sorted)\n                        ^\n         \
    \               , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable\
    \ public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmp9sacgw1v.swift:28:12: error: type of expression is ambiguous\
    \ without more context\n    sorted.sort {\n    ~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    sort_array(array: array, start: 0, end: array.count - 1)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpv6r0kojp.swift:17:15: error: extra arguments at positions #2, #3\
    \ in call\n    sort_array(array: array, start: 0, end: array.count - 1)\n    \
    \          ^\n/tmp/tmpv6r0kojp.swift:16:6: note: 'sort_array(array:)' declared\
    \ here\nfunc sort_array(array: [Int]) -> [Int] {\n     ^\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count >= 2 else {\n        return array\n    }\n\
    \    let firstHalf = array.prefix(array.count / 2)\n    let secondHalf = array.suffix(array.count\
    \ / 2)\n    return firstHalf.sorted + secondHalf.sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpadyhpdv7.swift:22:22: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return firstHalf.sorted + secondHalf.sorted\n\
    \           ~~~~~~~~~~^~~~~~\n                           ()\n/tmp/tmpadyhpdv7.swift:22:42:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return firstHalf.sorted + secondHalf.sorted\n                   \
    \           ~~~~~~~~~~~^~~~~~\n                                              \
    \ ()\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    var arraySorted = [Int]()\n    \n    for element in array\
    \ {\n        arraySorted.append(element)\n    }\n    \n    let sumOfFirstIndexElements\
    \ = arraySorted.reduce(0, +)\n    let sumOfLastIndexElements = arraySorted.last!\
    \ * -1\n    let sumOfAllElements = sumOfFirstIndexElements + sumOfLastIndexElements\n\
    \    \n    if sumOfAllElements % 2 == 1 {\n        arraySorted.sort { (first,\
    \ last) -> Bool in\n            return last > first\n        }\n    }\n    else\
    \ {\n        arraySorted.sort { (first, last) -> Bool in\n            return first\
    \ < last\n        }\n    }\n    \n    return arraySorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp8zhxr26b/tmp8zhxr26b.swift:25: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b75639ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75636f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b75636f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b75636f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b75636f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp8zhxr26b                        0x00005651d071134b <unavailable> + 9035

    6    tmp8zhxr26b                        0x00005651d07106fd <unavailable> + 5885

    7    libc.so.6                          0x00002b7563beb460 __libc_start_main +
    245

    8    tmp8zhxr26b                        0x00005651d0710409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    if array.count < 2 {\n        return\
    \ sortedArray\n    }\n    if array.count == 2 {\n        if sortedArray[0] + sortedArray[1]\
    \ % 2 == 1 {\n            sortedArray = sortedArray.reversed()\n        } else\
    \ {\n            sortedArray = sortedArray.sorted()\n        }\n        return\
    \ sortedArray\n    }\n    var pivot = sortedArray[0]\n    for i in 1...array.count\
    \ {\n        if sortedArray[i] == pivot {\n            sortedArray[i] = sortedArray[i\
    \ - 1]\n        }\n    }\n    sortedArray[0] = pivot\n    if sortedArray[0] +\
    \ sortedArray[1] % 2 == 1 {\n        sortedArray = sortedArray.reversed()\n  \
    \  } else {\n        sortedArray = sortedArray.sorted()\n    }\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aabe6fecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabe6ce3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aabe6ce3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aabe6ce313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aabe6ce2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aabe6ae2e83 <unavailable> + 188035

    6    tmpm6dpmlv7                        0x0000564794ecd335 <unavailable> + 9013

    7    tmpm6dpmlv7                        0x0000564794ecc86f <unavailable> + 6255

    8    libc.so.6                          0x00002aabe71d8460 __libc_start_main +
    245

    9    tmpm6dpmlv7                        0x0000564794ecc359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard let first = array.first, last = array.last else {\n  \
    \      return array\n    }\n    let sumFirst = array.map { $0 + $1 }.sum() % 2\
    \ != 0 ? last : first\n    let sumLast = array.map { $0 + $1 }.sum() % 2 == 0\
    \ ? last : first\n    return array\n        .enumerated()\n        .sorted { $0.element\
    \ < $1.element }\n        .map { $0.element + sumFirst }\n        + array\n  \
    \      .enumerated()\n        .sorted { $0.element > $1.element }\n        .map\
    \ { $0.element + sumLast }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpfpu5bnto.swift:17:36: error: expected 'let' in conditional\n  \
    \  guard let first = array.first, last = array.last else {\n                 \
    \                  ^\n                                   let \n/tmp/tmpfpu5bnto.swift:20:30:\
    \ error: contextual closure type '(Int) throws -> Int' expects 1 argument, but\
    \ 2 were used in closure body\n    let sumFirst = array.map { $0 + $1 }.sum()\
    \ % 2 != 0 ? last : first\n                             ^\n/tmp/tmpfpu5bnto.swift:20:42:\
    \ error: value of type '[Int]' has no member 'sum'\n    let sumFirst = array.map\
    \ { $0 + $1 }.sum() % 2 != 0 ? last : first\n                   ~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpfpu5bnto.swift:21:29: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n    let sumLast\
    \ = array.map { $0 + $1 }.sum() % 2 == 0 ? last : first\n                    \
    \        ^\n/tmp/tmpfpu5bnto.swift:21:41: error: value of type '[Int]' has no\
    \ member 'sum'\n    let sumLast = array.map { $0 + $1 }.sum() % 2 == 0 ? last\
    \ : first\n                  ~~~~~~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var index = 0\n    var evenSum = 0\n    var oddSum = 0\n   \
    \ var evenIndex = -1\n    var oddIndex = -1\n    while index < array.count {\n\
    \        if array[index] == 0 {\n            array[index] = -1\n            index\
    \ += 1\n            continue\n        }\n        if evenSum != 0 {\n         \
    \   oddSum += array[index]\n            oddIndex += 1\n        } else {\n    \
    \        evenSum += array[index]\n            evenIndex += 1\n        }\n    \
    \    if oddSum%2 == 1 {\n            array[index], array[oddIndex] = array[oddIndex],\
    \ array[index]\n        }\n        index += 1\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpgvxf_l3p.swift:36:25: error: consecutive statements on a line must\
    \ be separated by ';'\n            array[index], array[oddIndex] = array[oddIndex],\
    \ array[index]\n                        ^\n                        ;\n/tmp/tmpgvxf_l3p.swift:36:25:\
    \ error: expected expression\n            array[index], array[oddIndex] = array[oddIndex],\
    \ array[index]\n                        ^\n/tmp/tmpgvxf_l3p.swift:24:18: error:\
    \ cannot assign through subscript: 'array' is a 'let' constant\n            array[index]\
    \ = -1\n            ~~~~~^\n/tmp/tmpgvxf_l3p.swift:36:18: warning: expression\
    \ of type 'Int' is unused\n            array[index], array[oddIndex] = array[oddIndex],\
    \ array[index]\n            ~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    var newArray = array\n    if array.count > 0 {\n     \
    \   var sum : Int = 0\n        for value in newArray {\n            sum += value\n\
    \        }\n        if sum % 2 == 0 {\n            let sorted = newArray\n   \
    \         newArray = newArray.sorted{ $0 < $1 }\n            return sorted + newArray\n\
    \        }\n        newArray = newArray.sorted{ $0 > $1 }\n        return newArray\n\
    \    }\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp67158k1r/tmp67158k1r.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f3657bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f36272b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f36272988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f362717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp67158k1r                        0x000055669c2b2906 <unavailable> + 6406

    5    libc.so.6                          0x00002b3f36767460 __libc_start_main +
    245

    6    tmp67158k1r                        0x000055669c2b22e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { a, b in\n        if a > b {\n        \
    \    return true\n        }\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmph9sf2g_j/tmph9sf2g_j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a37bc0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a378b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a378b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a378b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph9sf2g_j                        0x0000556c9f57e656 <unavailable> + 5718

    5    libc.so.6                          0x00002b1a37dac460 __libc_start_main +
    245

    6    tmph9sf2g_j                        0x0000556c9f57e039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sorted = array\n    if sorted == [] {\n        return sorted\n\
    \    }\n    let sum: Int = array.reduce(0) {$0 + $1}\n    var sumOdd: Int = 0\n\
    \    var sumEven: Int = 0\n    for i in 0..<array.count {\n        if (((i + 1)\
    \ % 2) == 0) {\n            sumEven += array[i]\n        } else {\n          \
    \  sumOdd += array[i]\n        }\n    }\n    if (sumOdd != 0 && sumEven != 0)\
    \ {\n        sorted = (sorted as NSArray).sortedArrayUsingComparator({(a: Int,\
    \ b: Int) -> Bool in\n            return (a-b) < (b-a)\n        })\n    }\n  \
    \  return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpyhhdplev.swift:32:29: error: cannot find type 'NSArray' in scope\n\
    \        sorted = (sorted as NSArray).sortedArrayUsingComparator({(a: Int, b:\
    \ Int) -> Bool in\n                            ^~~~~~~\n/tmp/tmpyhhdplev.swift:32:38:\
    \ error: value of type '[Int]' has no member 'sortedArrayUsingComparator'\n  \
    \      sorted = (sorted as NSArray).sortedArrayUsingComparator({(a: Int, b: Int)\
    \ -> Bool in\n                 ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  return array.sorted(by: { $0.0 > $1.0 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpmov05cfd.swift:17:32: error: value of type 'Int' has no member\
    \ '0'\n  return array.sorted(by: { $0.0 > $1.0 })\n                          \
    \  ~~ ^\n/tmp/tmpmov05cfd.swift:17:39: error: value of type 'Int' has no member\
    \ '0'\n  return array.sorted(by: { $0.0 > $1.0 })\n                          \
    \         ~~ ^\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.reduce(0, combine: +)\n    let result = (array\
    \ as! [Int]).sorted()\n    return result.isEmpty ? array : result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpuv7rx4g6.swift:17:27: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = array.reduce(0, combine: +)\n                       \
    \   ^   ~~~~~~~~~\n                              \n/tmp/tmpuv7rx4g6.swift:18:25:\
    \ warning: forced cast of '[Int]' to same type has no effect\n    let result =\
    \ (array as! [Int]).sorted()\n                        ^~~~~~~~~\n            \
    \            \n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var newArray = array\n    newArray.sort()\n    return newArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpk_e41rbd/tmpk_e41rbd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4026ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40269d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40269d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40269d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_e41rbd                        0x0000563ac2e39894 <unavailable> + 6292

    5    libc.so.6                          0x00002b4026ece460 __libc_start_main +
    245

    6    tmpk_e41rbd                        0x0000563ac2e390e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var indexArray: [Int] = array\n    let evenSum: Bool = array.sum()\
    \ % 2 == 0\n    var sum: Int = 0\n    let sortedIndexArray: [Int] = Array(repeating:\
    \ -1, count: array.count)\n    for i in 0 ..< indexArray.count {\n        let\
    \ currentSum = indexArray[i]\n        sum += currentSum\n        sortedIndexArray[i]\
    \ = sum\n        if evenSum {\n            if sum > array.count {\n          \
    \      sortedIndexArray[i] = array.count\n            } else {\n             \
    \   break\n            }\n        } else {\n            if sum < 0 {\n       \
    \         sortedIndexArray[i] = 0\n            } else {\n                break\n\
    \            }\n        }\n    }\n    return sortedIndexArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpftwy3cb7.swift:18:31: error: value of type '[Int]' has no member\
    \ 'sum'\n    let evenSum: Bool = array.sum() % 2 == 0\n                      \
    \  ~~~~~ ^~~\n/tmp/tmpftwy3cb7.swift:24:25: error: cannot assign through subscript:\
    \ 'sortedIndexArray' is a 'let' constant\n        sortedIndexArray[i] = sum\n\
    \        ~~~~~~~~~~~~~~~~^\n/tmp/tmpftwy3cb7.swift:20:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let sortedIndexArray: [Int] = Array(repeating:\
    \ -1, count: array.count)\n    ^~~\n    var\n/tmp/tmpftwy3cb7.swift:27:33: error:\
    \ cannot assign through subscript: 'sortedIndexArray' is a 'let' constant\n  \
    \              sortedIndexArray[i] = array.count\n                ~~~~~~~~~~~~~~~~^\n\
    /tmp/tmpftwy3cb7.swift:20:5: note: change 'let' to 'var' to make it mutable\n\
    \    let sortedIndexArray: [Int] = Array(repeating: -1, count: array.count)\n\
    \    ^~~\n    var\n/tmp/tmpftwy3cb7.swift:33:33: error: cannot assign through\
    \ subscript: 'sortedIndexArray' is a 'let' constant\n                sortedIndexArray[i]\
    \ = 0\n                ~~~~~~~~~~~~~~~~^\n/tmp/tmpftwy3cb7.swift:20:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let sortedIndexArray: [Int] = Array(repeating:\
    \ -1, count: array.count)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    switch array.count {\n    case 0: return array\n    case 1:\
    \ return array\n    case 2: return array.sorted()\n    case 3: return array.sorted\
    \ { $0 < $1 }\n    case 4: return array.sorted { $0 == $1 }\n    default:\n  \
    \      var newArray = array\n        var left = newArray.first!\n        var right\
    \ = newArray.last!\n        var sum = 0\n        var isEven = false\n        for\
    \ _ in newArray {\n            sum += newArray[newArray.count - 1]\n         \
    \   if sum%2 == 0 {\n                isEven = true\n                break\n  \
    \          }\n        }\n        if isEven {\n            newArray = newArray.sorted\
    \ { $0 < $1 }\n        } else {\n            newArray = newArray.sorted { $0 >\
    \ $1 }\n        }\n        newArray.append(left)\n        newArray.append(right)\n\
    \        return newArray\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpvdku0vl5/tmpvdku0vl5.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5659cfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56599f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56599f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56599f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvdku0vl5                        0x0000564dbe45eaf6 <unavailable> + 6902

    5    libc.so.6                          0x00002b5659ee9460 __libc_start_main +
    245

    6    tmpvdku0vl5                        0x0000564dbe45e4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    // Find the max value\n    let max_value\
    \ = array.max()!\n    \n    let mut result = array.slice()\n    \n    // Calculate\
    \ the sum of the elements and determine whether the maximum value is odd or even\n\
    \    if max_value % 2 == 1 {\n        result.sortInPlace()\n    } else {\n   \
    \     result.sortInPlace(by: >)\n    }\n    \n    // Sort the result according\
    \ to the previous calculation\n    result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpnrne4nic.swift:26:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut result =\
    \ array.slice()\n            ^\n/tmp/tmpnrne4nic.swift:26:13: note: join the identifiers\
    \ together\n    let mut result = array.slice()\n        ~~~~^~~~~~\n        mutresult\n\
    /tmp/tmpnrne4nic.swift:26:13: note: join the identifiers together with camel-case\n\
    \    let mut result = array.slice()\n        ~~~~^~~~~~\n        mutResult\n/tmp/tmpnrne4nic.swift:26:28:\
    \ error: value of type '[Int]' has no member 'slice'\n    let mut result = array.slice()\n\
    \                     ~~~~~ ^~~~~\n/tmp/tmpnrne4nic.swift:30:9: error: cannot\
    \ find 'result' in scope\n        result.sortInPlace()\n        ^~~~~~\n/tmp/tmpnrne4nic.swift:32:9:\
    \ error: cannot find 'result' in scope\n        result.sortInPlace(by: >)\n  \
    \      ^~~~~~\n/tmp/tmpnrne4nic.swift:36:5: error: cannot find 'result' in scope\n\
    \    result\n    ^~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return []\n    }\n    var sum\
    \ = 0\n    for i in 0..<array.count {\n        sum += array[i]\n    }\n    if\
    \ sum % 2 == 1 {\n        return array.sorted { $0.0 < $1.0 }\n    } else {\n\
    \        return array.sorted { $0.0 < $1.0 }.reversed()\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpvz287_3d.swift:25:34: error: value of type 'Int' has no member\
    \ '0'\n        return array.sorted { $0.0 < $1.0 }\n                         \
    \     ~~ ^\n/tmp/tmpvz287_3d.swift:25:41: error: value of type 'Int' has no member\
    \ '0'\n        return array.sorted { $0.0 < $1.0 }\n                         \
    \            ~~ ^\n/tmp/tmpvz287_3d.swift:27:34: error: value of type 'Int' has\
    \ no member '0'\n        return array.sorted { $0.0 < $1.0 }.reversed()\n    \
    \                          ~~ ^\n/tmp/tmpvz287_3d.swift:27:41: error: value of\
    \ type 'Int' has no member '0'\n        return array.sorted { $0.0 < $1.0 }.reversed()\n\
    \                                     ~~ ^\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { (first, second) -> Bool in\n        //\
    \ Sum of first and last element is the same\n        if first == second {\n  \
    \          return true\n        }\n        // Sum of first and last element is\
    \ not the same\n        let result = first + second\n        // If result is odd,\
    \ swap them\n        if result % 2 != 0 {\n            return false\n        }\n\
    \        // Otherwise swap them if they are reversed\n        if result < 0 {\n\
    \            return true\n        }\n        return false\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7p17f3qk/tmp7p17f3qk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69a2ccec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69a29c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69a29c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69a29c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7p17f3qk                        0x000055a0197ec6f6 <unavailable> + 5878

    5    libc.so.6                          0x00002b69a2eba460 __libc_start_main +
    245

    6    tmp7p17f3qk                        0x000055a0197ec0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    let sum\
    \ = array.filter {$0 >= 0}.sum\n    let oddOrEven = sum % 2 == 0 ? 1 : -1\n  \
    \  return array.sorted { $0 > $1 ? oddOrEven : oddOrEven * -1 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpifbn0k41.swift:20:38: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.filter {$0 >= 0}.sum\n              ~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpifbn0k41.swift:22:35: error: cannot convert value of type 'Int'\
    \ to closure result type 'Bool'\n    return array.sorted { $0 > $1 ? oddOrEven\
    \ : oddOrEven * -1 }\n                          ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n\n    if array.count < 2 {\n       \
    \ return result\n    }\n\n    var sum = 0\n    for i in 0..<array.count {\n  \
    \      sum += array[i]\n    }\n\n    if sum%2 == 1 {\n        array.sort()\n \
    \   } else {\n        array.reverse()\n    }\n\n    for value in array {\n   \
    \     result.append(value)\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmppqjgreli.swift:29:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort()\n        ~~~~~ ^\n\
    /tmp/tmppqjgreli.swift:31:15: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n        array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    let sum = array.map { $0 + $1 }.reduce(0,\
    \ +)\n    let result = array.sortInPlace()\n    result.forEach {\n        if $0\
    \ < sum {\n            result.insert($0 - sum, 1)\n        } else {\n        \
    \    result.insert($0 - sum, -1)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp_tw_vkdr.swift:18:25: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n    let sum = array.map\
    \ { $0 + $1 }.reduce(0, +)\n                        ^\n/tmp/tmp_tw_vkdr.swift:19:24:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n    let result = array.sortInPlace()\n\
    \                 ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = (array.first! + array.last!)\n    if sum % 2 == 1\
    \ {\n        array.sortInPlace()\n    } else {\n        array.sortInPlace({ $0.0\
    \ < $1.0 })\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpyl0f8e32.swift:19:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpyl0f8e32.swift:21:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace({\
    \ $0.0 < $1.0 })\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbpqw_lgu/tmpbpqw_lgu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acef9a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acef9779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acef9779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acef97787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpqw_lgu                        0x00005577392b65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002acef9c6e460 __libc_start_main +
    245

    6    tmpbpqw_lgu                        0x00005577392b5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return sort_array_impl(array: array, func: Swift.min)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpdrvth12i.swift:17:12: error: cannot find 'sort_array_impl' in scope\n\
    \    return sort_array_impl(array: array, func: Swift.min)\n           ^~~~~~~~~~~~~~~\n\
    /tmp/tmpdrvth12i.swift:17:48: error: generic parameter 'T' could not be inferred\n\
    \    return sort_array_impl(array: array, func: Swift.min)\n                 \
    \                              ^\nSwift.min:1:24: note: in call to function 'min'\n\
    @inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n    \
    \                   ^\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let result = array.sorted(by: >)\n    if result.last!%2 == 0\
    \ {\n        return result.reversed()\n    } else {\n        return result\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbe8rpbdl/tmpbe8rpbdl.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b4fd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b4cc9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b74b4cc9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b74b4cc913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b74b4cc8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpbe8rpbdl                        0x0000563c93a89f17 <unavailable> + 7959

    6    tmpbe8rpbdl                        0x0000563c93a894bd <unavailable> + 5309

    7    libc.so.6                          0x00002b74b51be460 __libc_start_main +
    245

    8    tmpbe8rpbdl                        0x0000563c93a891c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n\n    if\
    \ array.count < 2 {\n        return array\n    }\n\n    var num1 = array[0]\n\
    \    var num2 = array[0]\n    var res = [Int]()\n    var j = 0\n\n    for k in\
    \ 0..<array.count {\n        if k%2 == 0 {\n            num1 = array[k]\n    \
    \    } else {\n            num2 = array[k+1]\n            if num1 > num2 {\n \
    \               j--\n                num1 = array[k]\n                num2 = array[k+1]\n\
    \            }\n        }\n\n        res.append(num1)\n        res.append(num2)\n\
    \    }\n\n    array.swapAt(0, j)\n    array.swapAt(j, array.count-1)\n\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpy74zd8rf.swift:36:18: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n                j--\n                 ^~\n/tmp/tmpy74zd8rf.swift:46:11:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \    array.swapAt(0, j)\n    ~~~~~ ^\n/tmp/tmpy74zd8rf.swift:47:11: error: cannot\
    \ use mutating member on immutable value: 'array' is a 'let' constant\n    array.swapAt(j,\
    \ array.count-1)\n    ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if (array.count < 2) {\n        return array\n    }\n    var\
    \ coswiftArray: [Int] = array\n    let left = 0\n    let right = array.count -\
    \ 1\n    while left < right {\n        let sum = array[left] + array[right]\n\
    \        let isEven = sum % 2 == 0\n        var tmp = array[left]\n        if\
    \ isEven {\n            tmp = array[right]\n            array[right] = tmp\n \
    \       }\n        array[left] = sum\n        array[right] = tmp\n        left\
    \ += 1\n        right -= 1\n    }\n    return coswiftArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpkzm5tn_z.swift:29:18: error: cannot assign through subscript: 'array'\
    \ is a 'let' constant\n            array[right] = tmp\n            ~~~~~^\n/tmp/tmpkzm5tn_z.swift:31:14:\
    \ error: cannot assign through subscript: 'array' is a 'let' constant\n      \
    \  array[left] = sum\n        ~~~~~^\n/tmp/tmpkzm5tn_z.swift:32:14: error: cannot\
    \ assign through subscript: 'array' is a 'let' constant\n        array[right]\
    \ = tmp\n        ~~~~~^\n/tmp/tmpkzm5tn_z.swift:33:14: error: left side of mutating\
    \ operator isn't mutable: 'left' is a 'let' constant\n        left += 1\n    \
    \    ~~~~ ^\n/tmp/tmpkzm5tn_z.swift:21:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let left = 0\n    ^~~\n    var\n/tmp/tmpkzm5tn_z.swift:34:15:\
    \ error: left side of mutating operator isn't mutable: 'right' is a 'let' constant\n\
    \        right -= 1\n        ~~~~~ ^\n/tmp/tmpkzm5tn_z.swift:22:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let right = array.count - 1\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    \n    let sum\
    \ = array.reduce(0, combine: {$0 + $1})\n    if sum % 2 == 0 {\n        array.sort\
    \ { $0.0 < $1.0 }\n    }\n    else {\n        array.sort { $0.0 < $1.0 }.reversed()\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjxaocmu9.swift:19:27: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = array.reduce(0, combine: {$0 + $1})\n               \
    \           ^   ~~~~~~~~~\n                              \n/tmp/tmpjxaocmu9.swift:21:15:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \        array.sort { $0.0 < $1.0 }\n        ~~~~~ ^\n/tmp/tmpjxaocmu9.swift:21:25:\
    \ error: value of type 'Int' has no member '0'\n        array.sort { $0.0 < $1.0\
    \ }\n                     ~~ ^\n/tmp/tmpjxaocmu9.swift:21:32: error: value of\
    \ type 'Int' has no member '0'\n        array.sort { $0.0 < $1.0 }\n         \
    \                   ~~ ^\n/tmp/tmpjxaocmu9.swift:24:15: error: cannot use mutating\
    \ member on immutable value: 'array' is a 'let' constant\n        array.sort {\
    \ $0.0 < $1.0 }.reversed()\n        ~~~~~ ^\n/tmp/tmpjxaocmu9.swift:24:25: error:\
    \ value of type 'Int' has no member '0'\n        array.sort { $0.0 < $1.0 }.reversed()\n\
    \                     ~~ ^\n/tmp/tmpjxaocmu9.swift:24:32: error: value of type\
    \ 'Int' has no member '0'\n        array.sort { $0.0 < $1.0 }.reversed()\n   \
    \                         ~~ ^\n/tmp/tmpjxaocmu9.swift:24:36: error: value of\
    \ tuple type '()' has no member 'reversed'\n        array.sort { $0.0 < $1.0 }.reversed()\n\
    \        ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    let n = array.count\n    \n    var swift: [Int] = []\n\
    \    var swift_next = 0\n    \n    for var i = 0; i < n - 1; ++i {\n        let\
    \ j = i + 1\n        \n        for var k = i + 1; k < n; ++k {\n            let\
    \ sum = array[k] + array[j]\n            \n            if sum % 2 == 1 {\n   \
    \             swift_next = k\n                swift.append(sum)\n            \
    \    break\n            }\n            \n            if sum % 2 == 0 {\n     \
    \           if sum < swift_next {\n                    swift_next = k\n      \
    \              swift.append(sum)\n                }\n                break\n \
    \           }\n        }\n    }\n    \n    return swift\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpqkf40lmu.swift:23:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < n - 1; ++i {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqkf40lmu.swift:26:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var k = i + 1; k < n; ++k {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // write your code here\n    if array.count <= 1 {\n       \
    \ return array\n    }\n    var array = array.sorted()\n    return array\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp5afrpq0e/tmp5afrpq0e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfc090c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfbd87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfbd87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfbd867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5afrpq0e                        0x000055d37ae82874 <unavailable> + 6260

    5    libc.so.6                          0x00002b6cfc27c460 __libc_start_main +
    245

    6    tmp5afrpq0e                        0x000055d37ae820c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // Write your code here\n    \n    guard array.count > 0 else\
    \ { return array }\n    guard array.count < 10000 else { return array }\n    let\
    \ sum = array.sum\n    let odd = sum % 2 == 0\n    return array.sorted(by: { $0\
    \ - $1 }).map { $0 + (odd ? -1 : 1) * $1 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp_k4pih_s.swift:21:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n/tmp/tmp_k4pih_s.swift:23:34:\
    \ error: cannot convert value of type 'Int' to closure result type 'Bool'\n  \
    \  return array.sorted(by: { $0 - $1 }).map { $0 + (odd ? -1 : 1) * $1 }\n   \
    \                           ~~~^~~~\n/tmp/tmp_k4pih_s.swift:23:46: error: contextual\
    \ closure type '(Int) throws -> Int' expects 1 argument, but 2 were used in closure\
    \ body\n    return array.sorted(by: { $0 - $1 }).map { $0 + (odd ? -1 : 1) * $1\
    \ }\n                                             ^\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sort { (a, b) -> Bool in\n        return a < b\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp6dfs9tt4.swift:17:18: error: cannot convert return expression of\
    \ type '()' to return type '[Int]'\n    return array.sort { (a, b) -> Bool in\n\
    \           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6dfs9tt4.swift:17:18: error:\
    \ cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \    return array.sort { (a, b) -> Bool in\n           ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n\n    var\
    \ temp = array\n    let leftSum = temp.reduce(0, +)\n    let rightSum = temp.reverse().reduce(0,\
    \ +)\n    if rightSum > leftSum {\n        temp = temp.reverse()\n    }\n\n  \
    \  return temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmphb4p5h6x.swift:23:35: error: value of tuple type '()' has no member\
    \ 'reduce'\n    let rightSum = temp.reverse().reduce(0, +)\n                 \
    \  ~~~~~~~~~~~~~~ ^~~~~~\n/tmp/tmphb4p5h6x.swift:25:21: error: cannot assign value\
    \ of type '()' to type '[Int]'\n        temp = temp.reverse()\n              \
    \ ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    array.sortInPlace()\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp9x3bmfxd.swift:17:11: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    array.sortInPlace()\n    ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr49403sp/tmpr49403sp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25e4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25b43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25b43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa25b427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr49403sp                        0x00005580c8a59656 <unavailable> + 5718

    5    libc.so.6                          0x00002baa26038460 __libc_start_main +
    245

    6    tmpr49403sp                        0x00005580c8a59039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count >= 2 else { return array }\n    let sum =\
    \ (array[array.count - 1] as Int) * (array[array.count - 1] as Int)\n    return\
    \ array.sorted { (x, y) in\n        let sum1 = (x as Int) * (x as Int)\n     \
    \   let sum2 = (y as Int) * (y as Int)\n        return sum1 > sum2 ? true : sum1\
    \ < sum2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4yyedozm/tmp4yyedozm.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ae3cdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ae39d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ae39d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ae39d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4yyedozm                        0x0000559ae932c706 <unavailable> + 5894

    5    libc.so.6                          0x00002b9ae3ec8460 __libc_start_main +
    245

    6    tmp4yyedozm                        0x0000559ae932c0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let tmp = array.slice()\n    tmp.sortInPlace()\n    return tmp\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpzeea1ztm.swift:17:21: error: value of type '[Int]' has no member\
    \ 'slice'\n    let tmp = array.slice()\n              ~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 1 {\n        return array\n    }\n    var sum\
    \ = array[0]\n    for i in 1 ..< array.count {\n        sum += array[i]\n    }\n\
    \    return array.sorted { a, b in\n        let result = a - b\n        return\
    \ result % 2 == 1 ? result : -result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp6_3kvoyp.swift:26:32: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n        return result % 2 == 1 ? result : -result\n\
    \                               ^\n               ((                         \
    \       ) != 0)\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let min = array.min()\n    let max = array.max()\n    let sum\
    \ = min + max\n    let even = (sum % 2) == 0\n    let odd = (sum % 2) == 1\n \
    \   if even {\n        array.sort()\n    } else {\n        array.reverse()\n \
    \   }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmptggx2vzn.swift:19:19: error: binary operator '+' cannot be applied\
    \ to two 'Int?' operands\n    let sum = min + max\n              ~~~ ^ ~~~\n/tmp/tmptggx2vzn.swift:19:19:\
    \ note: overloads for '+' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    let sum = min + max\n                  ^\n/tmp/tmptggx2vzn.swift:23:15:\
    \ error: cannot use mutating member on immutable value: 'array' is a 'let' constant\n\
    \        array.sort()\n        ~~~~~ ^\n/tmp/tmptggx2vzn.swift:25:15: error: cannot\
    \ use mutating member on immutable value: 'array' is a 'let' constant\n      \
    \  array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return sorted(array) { $0 + $1 < $1 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpe6g6ik9s.swift:17:12: error: cannot find 'sorted' in scope\n  \
    \  return sorted(array) { $0 + $1 < $1 }\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return sorted(array)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpuee8oy2v.swift:17:12: error: cannot find 'sorted' in scope\n  \
    \  return sorted(array)\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660014534
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = (array[0] + array[array.count - 1]) / 2\n\n    return\
    \ array.sorted {\n        if $0 + $1 < sum {\n            return true\n      \
    \  }\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4add346c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4add03d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4add03d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4add03d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4add03cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4adce3ce83 <unavailable> + 188035

    6    tmpsgt4nni2                        0x0000556648396d89 <unavailable> + 7561

    7    tmpsgt4nni2                        0x000055664839646d <unavailable> + 5229

    8    libc.so.6                          0x00002b4add532460 __libc_start_main +
    245

    9    tmpsgt4nni2                        0x0000556648396179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 { return array }\n    let sum = array.sum()\n\
    \    let even = sum % 2 == 0\n    let first = array.min()\n    let last = array.max()\n\
    \    let len = array.count\n\n    if even {\n        array.sortInPlace()\n   \
    \     return array\n    } else {\n        array.reverse()\n        array.sortInPlace()\n\
    \        array.reverse()\n        return array\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpvx3utzl6.swift:18:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum()\n              ~~~~~ ^~~\n/tmp/tmpvx3utzl6.swift:25:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpvx3utzl6.swift:28:15: error: cannot use mutating\
    \ member on immutable value: 'array' is a 'let' constant\n        array.reverse()\n\
    \        ~~~~~ ^\n/tmp/tmpvx3utzl6.swift:29:15: error: value of type '[Int]' has\
    \ no member 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n\
    /tmp/tmpvx3utzl6.swift:30:15: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n        array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sortInPlace()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjctdve26.swift:17:18: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    return array.sortInPlace()\n           ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 { return array }\n    array.sort()\n    let\
    \ a = array\n    let b = array\n    if a.last! > b.first! {\n        b.reverse()\n\
    \    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp0zxn0qzz.swift:18:11: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n    array.sort()\n    ~~~~~ ^\n/tmp/tmp0zxn0qzz.swift:22:11:\
    \ error: cannot use mutating member on immutable value: 'b' is a 'let' constant\n\
    \        b.reverse()\n        ~ ^\n/tmp/tmp0zxn0qzz.swift:20:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let b = array\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var swiftArray = [Int]()\n    let sum = array.sum\n\n    if\
    \ sum % 2 == 1 {\n        swiftArray = array.sorted{ $0 < $1 }.map({ $0 + $1 })\n\
    \    } else {\n        swiftArray = array.sorted{ $0 < $1 }.reverse().map({ $0\
    \ + $1 })\n    }\n    return swiftArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpr5x5pmrv.swift:18:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum\n              ~~~~~ ^~~\n/tmp/tmpr5x5pmrv.swift:21:50:\
    \ error: contextual closure type '(Int) throws -> Int' expects 1 argument, but\
    \ 2 were used in closure body\n        swiftArray = array.sorted{ $0 < $1 }.map({\
    \ $0 + $1 })\n                                                 ^\n/tmp/tmpr5x5pmrv.swift:23:56:\
    \ error: value of tuple type '()' has no member 'map'\n        swiftArray = array.sorted{\
    \ $0 < $1 }.reverse().map({ $0 + $1 })\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array + [array[0]]\n    }\n    var sum = 0\n    var even\
    \ = 1\n    var odd = -1\n    for v in array {\n        sum += v\n        if sum\
    \ > 0 {\n            if sum % 2 == 0 {\n                sum += even\n        \
    \    } else {\n                sum += odd\n            }\n        } else {\n \
    \           sum -= v\n            if sum % 2 == 0 {\n                sum += odd\n\
    \            } else {\n                sum += even\n            }\n        }\n\
    \    }\n    let mid = array.count / 2\n    return sort_array(array: Array(self[..<mid]))\
    \ + array + sort_array(array: Array(self[mid...]))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmphis7b09d.swift:44:36: error: cannot find 'self' in scope; did you\
    \ mean to use it in a type or extension context?\n    return sort_array(array:\
    \ Array(self[..<mid])) + array + sort_array(array: Array(self[mid...]))\n    \
    \                               ^~~~\n/tmp/tmphis7b09d.swift:44:85: error: cannot\
    \ find 'self' in scope; did you mean to use it in a type or extension context?\n\
    \    return sort_array(array: Array(self[..<mid])) + array + sort_array(array:\
    \ Array(self[mid...]))\n                                                     \
    \                               ^~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sorted_array = array.sorted()\n    if array.first == 0 &&\
    \ array.last == array.first {\n        return sorted_array\n    }\n    if array.first\
    \ == 0 && array.last == array.last {\n        return array.sorted().reversed()\n\
    \    }\n    if array.first == array.last {\n        return array.sorted().reversed()\n\
    \    }\n    if array.first == array.last - 1 && array.last % 2 == 1 {\n      \
    \  return sorted_array\n    }\n    if array.first == array.last - 1 && array.last\
    \ % 2 == 0 {\n        return array.sorted().reversed()\n    }\n    return sorted_array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpy9zqf37g.swift:27:29: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if array.first == array.last - 1\
    \ && array.last % 2 == 1 {\n                            ^\n/tmp/tmpy9zqf37g.swift:27:29:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    if array.first == array.last - 1 && array.last % 2 == 1 {\n     \
    \                       ^\n                      (          ?? <#default value#>)\n\
    /tmp/tmpy9zqf37g.swift:27:29: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    if array.first == array.last - 1 &&\
    \ array.last % 2 == 1 {\n                            ^\n                     \
    \           !\n/tmp/tmpy9zqf37g.swift:27:47: error: value of optional type 'Int?'\
    \ must be unwrapped to a value of type 'Int'\n    if array.first == array.last\
    \ - 1 && array.last % 2 == 1 {\n                                             \
    \ ^\n/tmp/tmpy9zqf37g.swift:27:47: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n    if array.first == array.last - 1\
    \ && array.last % 2 == 1 {\n                                              ^\n\
    \                                        (          ?? <#default value#>)\n/tmp/tmpy9zqf37g.swift:27:47:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if array.first == array.last - 1 && array.last % 2 == 1 {\n     \
    \                                         ^\n                                \
    \                  !\n/tmp/tmpy9zqf37g.swift:30:29: error: value of optional type\
    \ 'Int?' must be unwrapped to a value of type 'Int'\n    if array.first == array.last\
    \ - 1 && array.last % 2 == 0 {\n                            ^\n/tmp/tmpy9zqf37g.swift:30:29:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    if array.first == array.last - 1 && array.last % 2 == 0 {\n     \
    \                       ^\n                      (          ?? <#default value#>)\n\
    /tmp/tmpy9zqf37g.swift:30:29: note: force-unwrap using '!' to abort execution\
    \ if "
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard let count = array.count else { return array }\n    var\
    \ sum = 0\n    var firstIndex = 0\n    var lastIndex = 0\n    var newArray = array\n\
    \    for i in 0 ..< count {\n        sum += array[i]\n        if sum % 2 == 1\
    \ {\n            newArray[lastIndex] = array[i]\n            lastIndex += 1\n\
    \        } else {\n            newArray[firstIndex] = array[i]\n            firstIndex\
    \ += 1\n        }\n    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpj0g2qmmr.swift:17:11: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n    guard let count = array.count else {\
    \ return array }\n          ^           ~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n\n    //\
    \ find the middle index\n    var middle = array.count / 2\n    if array[middle]\
    \ != 0 {\n        middle--\n    }\n    \n    // calculate the sum of each pair\n\
    \    var sum1 = array[middle]\n    var sum2 = array[middle]\n    for index in\
    \ 0 ..< middle {\n        if index == middle {\n            continue\n       \
    \ }\n        sum1 += array[index]\n        sum2 += array[index + middle]\n   \
    \ }\n\n    var result: [Int] = []\n    \n    if sum1 % 2 == 0 {\n        // if\
    \ the sum is even, sort it in descending order\n        result = array[middle\
    \ ... array.count].reversed()\n    } else {\n        // if the sum is odd, sort\
    \ it in ascending order\n        result = array[middle ... array.count]\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpy3_p49w8.swift:24:15: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n        middle--\n              ^~\n/tmp/tmpy3_p49w8.swift:45:23:\
    \ error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n     \
    \   result = array[middle ... array.count]\n                 ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let result = array.sorted(by: >)\n    return result as! [Int]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp339k7pp_/tmp339k7pp_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b42782c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b42479b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b42479988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b424787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp339k7pp_                        0x000055fa6f7e5656 <unavailable> + 5718

    5    libc.so.6                          0x00002b3b4296e460 __libc_start_main +
    245

    6    tmp339k7pp_                        0x000055fa6f7e5039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var swift = array\n    var sum = 0\n    for i in 0..<swift.count\
    \ {\n        sum += swift[i]\n    }\n    if sum%2 == 1 {\n        swift.sort()\
    \ //descending\n    } else {\n        swift.sort() //ascending\n    }\n    return\
    \ swift\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0lw4xzaz/tmp0lw4xzaz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c85b13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c8580ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c8580a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c858097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0lw4xzaz                        0x000055d1c42a1ac4 <unavailable> + 6852

    5    libc.so.6                          0x00002b4c85cff460 __libc_start_main +
    245

    6    tmp0lw4xzaz                        0x000055d1c42a1319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return sorted(array: array, isOddOrEven: isOddOrEven)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp2uv32ahn.swift:17:12: error: cannot find 'sorted' in scope\n  \
    \  return sorted(array: array, isOddOrEven: isOddOrEven)\n           ^~~~~~\n\
    /tmp/tmp2uv32ahn.swift:17:46: error: cannot find 'isOddOrEven' in scope\n    return\
    \ sorted(array: array, isOddOrEven: isOddOrEven)\n                           \
    \                  ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    let sortedArray = array.sorted { $0 < $1 }\n    return\
    \ sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_oowder1/tmp_oowder1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70dd2e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70dcfd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70dcfd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70dcfd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oowder1                        0x00005587d0acb7e4 <unavailable> + 6116

    5    libc.so.6                          0x00002b70dd4ce460 __libc_start_main +
    245

    6    tmp_oowder1                        0x00005587d0acb039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let result = array.sorted(by: >)\n    return result as! [Int]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp339k7pp_/tmp339k7pp_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b42782c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b42479b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b42479988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b424787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp339k7pp_                        0x000055fa6f7e5656 <unavailable> + 5718

    5    libc.so.6                          0x00002b3b4296e460 __libc_start_main +
    245

    6    tmp339k7pp_                        0x000055fa6f7e5039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: >).reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmps1vigitb/tmps1vigitb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25f1327c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25f101eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25f101e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25f101d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1vigitb                        0x000055d7dc32a854 <unavailable> + 6228

    5    libc.so.6                          0x00002b25f1513460 __libc_start_main +
    245

    6    tmps1vigitb                        0x000055d7dc32a0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: { $0 > $1 })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpq575_pnm/tmpq575_pnm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f829b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f826a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f826a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f826a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq575_pnm                        0x0000563410671656 <unavailable> + 5718

    5    libc.so.6                          0x00002b6f82b9c460 __libc_start_main +
    245

    6    tmpq575_pnm                        0x0000563410671039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    var reversedArray\
    \ = array.reversed()\n    var i = 0\n    var j = 0\n    var n = array.count -\
    \ 1\n    let maxValue = array[0]\n    var sum = 0\n\n    while i < n && j < n\
    \ {\n        let sum = reversedArray[j] + reversedArray[i]\n        if (sum %\
    \ 2 == 0) {\n            reversedArray[j], reversedArray[i] = reversedArray[i],\
    \ reversedArray[j]\n        } else {\n            reversedArray[j], reversedArray[i]\
    \ = reversedArray[i], reversedArray[j]\n        }\n\n        if reversedArray[j]\
    \ < maxValue {\n            sum -= reversedArray[j]\n        }\n        i += 1\n\
    \        j += 1\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpasjs395l.swift:28:29: error: consecutive statements on a line must\
    \ be separated by ';'\n            reversedArray[j], reversedArray[i] = reversedArray[i],\
    \ reversedArray[j]\n                            ^\n                          \
    \  ;\n/tmp/tmpasjs395l.swift:28:29: error: expected expression\n            reversedArray[j],\
    \ reversedArray[i] = reversedArray[i], reversedArray[j]\n                    \
    \        ^\n/tmp/tmpasjs395l.swift:30:29: error: consecutive statements on a line\
    \ must be separated by ';'\n            reversedArray[j], reversedArray[i] = reversedArray[i],\
    \ reversedArray[j]\n                            ^\n                          \
    \  ;\n/tmp/tmpasjs395l.swift:30:29: error: expected expression\n            reversedArray[j],\
    \ reversedArray[i] = reversedArray[i], reversedArray[j]\n                    \
    \        ^\n/tmp/tmpasjs395l.swift:26:52: error: cannot convert value of type\
    \ 'Int' to expected argument type 'ReversedCollection<[Int]>.Index'\n        let\
    \ sum = reversedArray[j] + reversedArray[i]\n                                \
    \                   ^\n/tmp/tmpasjs395l.swift:26:33: error: cannot convert value\
    \ of type 'Int' to expected argument type 'ReversedCollection<[Int]>.Index'\n\
    \        let sum = reversedArray[j] + reversedArray[i]\n                     \
    \           ^\n/tmp/tmpasjs395l.swift:28:26: error: no exact matches in call to\
    \ subscript \n            reversedArray[j], reversedArray[i] = reversedArray[i],\
    \ reversedArray[j]\n                         ^\nSwift.ReversedCollection:9:23:\
    \ note: candidate expects value of type 'ReversedCollection<[Int]>.Index' for\
    \ parameter #1 (got 'Int')\n    @inlinable public subscript(position: ReversedCollection<Base>.Index)\
    \ -> ReversedCollection<Base>.Element { get }\n                      ^\nSwift.Collection:2:23:\
    \ note: candidate expects value of type 'Range<ReversedCollection<[Int]>.Index>'\
    \ for parameter #1 (got 'Int')\n    @inlinable public subscript(bounds: Range<Self.Index>)\
    \ -> Slice<Self> { get }\n                      ^\nSwift.Collection:3:23: note:\
    \ candidate expects value of type '(Unbounde"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted().map { $0.coswift() }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpkdt5py5f.swift:17:36: error: value of type 'Int' has no member\
    \ 'coswift'\n    return array.sorted().map { $0.coswift() }\n                \
    \                ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.isEmpty == false else { return array }\n    var\
    \ newArray = [Int]()\n    var sum = 0\n    for i in 0..<array.count {\n      \
    \  sum += array[i]\n        newArray.append(i)\n    }\n    if sum % 2 == 1 {\n\
    \        newArray.sort {\n            ($0 < $1) || ($0 == $1 && $1 < $2)\n   \
    \     }\n    } else {\n        newArray.sort {\n            ($0 > $1) || ($0 ==\
    \ $1 && $1 > $2)\n        }\n    }\n    return newArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpka5qt05v.swift:25:9: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        newArray.sort {\n        ^~~~~~~~~~~~~~~\n/tmp/tmpka5qt05v.swift:29:23:\
    \ error: contextual closure type '(Int, Int) throws -> Bool' expects 2 arguments,\
    \ but 3 were used in closure body\n        newArray.sort {\n                 \
    \     ^\n"
  stdout: ''
  timestamp: 1660014559
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    var array =\
    \ array\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        array.sort()\
    \ { $0.0 < $1.0 }\n    } else {\n        array.sort() { $0.0 < $1.0 }.reverse()\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpcqxu16gu.swift:20:27: error: value of type 'Int' has no member\
    \ '0'\n        array.sort() { $0.0 < $1.0 }\n                       ~~ ^\n/tmp/tmpcqxu16gu.swift:20:34:\
    \ error: value of type 'Int' has no member '0'\n        array.sort() { $0.0 <\
    \ $1.0 }\n                              ~~ ^\n/tmp/tmpcqxu16gu.swift:22:27: error:\
    \ value of type 'Int' has no member '0'\n        array.sort() { $0.0 < $1.0 }.reverse()\n\
    \                       ~~ ^\n/tmp/tmpcqxu16gu.swift:22:34: error: value of type\
    \ 'Int' has no member '0'\n        array.sort() { $0.0 < $1.0 }.reverse()\n  \
    \                            ~~ ^\n/tmp/tmpcqxu16gu.swift:22:38: error: value\
    \ of tuple type '()' has no member 'reverse'\n        array.sort() { $0.0 < $1.0\
    \ }.reverse()\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    precondition(\n        array.count != 0,\n        \"Array is\
    \ empty\")\n    \n    var sortedArray = array\n    \n    let sum = sortedArray.reduce(0,\
    \ combine: +)\n    \n    if sum % 2 == 0 {\n        sortedArray = sortedArray.sorted(by:\
    \ >)\n    } else {\n        sortedArray = sortedArray.sorted(by: <)\n    }\n \
    \   \n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpzvxjqiwm.swift:23:33: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = sortedArray.reduce(0, combine: +)\n                 \
    \               ^   ~~~~~~~~~\n                                    \n"
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sum = 0\n    for i in 0..<array.count {\n        sum +=\
    \ array[i]\n    }\n    var temp = sum\n    var temp2 = sum\n    if sum % 2 ==\
    \ 1 {\n        temp = -temp\n    }\n    var arrayCopy = array\n    arrayCopy.sort\
    \ { (a, b) -> Bool in\n        return a > b\n    }\n    for i in 0..<arrayCopy.count\
    \ {\n        arrayCopy[i] = (arrayCopy[i] - temp + temp2) % arrayCopy.count\n\
    \    }\n    return arrayCopy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpz7e8_q5u/tmpz7e8_q5u.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad428626c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad42831db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad42831d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad42831c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7e8_q5u                        0x0000555ffecb078d <unavailable> + 6029

    5    libc.so.6                          0x00002ad428812460 __libc_start_main +
    245

    6    tmpz7e8_q5u                        0x0000555ffecb02d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphae361hl/tmphae361hl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee0a088c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee09d7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee09d7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee09d7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphae361hl                        0x000055e6437957e4 <unavailable> + 6116

    5    libc.so.6                          0x00002aee0a274460 __libc_start_main +
    245

    6    tmphae361hl                        0x000055e643795039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    let max\
    \ = array.max()!\n    \n    if array.count % 2 == 1 {\n        let sorted = array.sorted\
    \ { $0 < $1 }\n        return sorted\n    } else {\n        let sorted = array.sorted\
    \ { $0 < $1 && $0 < max }\n        return sorted\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp5inzl_pr/tmp5inzl_pr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cdd3cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cdd0c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cdd0c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cdd0c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5inzl_pr                        0x000055a1ee381974 <unavailable> + 6516

    5    libc.so.6                          0x00002b4cdd5b9460 __libc_start_main +
    245

    6    tmp5inzl_pr                        0x000055a1ee3811c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return []\n    }\n    \n    var\
    \ sum = 0\n    for element in array {\n        sum += element\n    }\n    \n \
    \   var sortedArray = array.sorted()\n    \n    if sum%2 == 0 {\n        sortedArray.reverse()\n\
    \    }\n    \n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpvk8ce1u6/tmpvk8ce1u6.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06101bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b060feb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b060feb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b060feb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvk8ce1u6                        0x0000560a1efa0b54 <unavailable> + 6996

    5    libc.so.6                          0x00002b06103a8460 __libc_start_main +
    245

    6    tmpvk8ce1u6                        0x0000560a1efa03a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    precondition(\n        array.count > 0, \"the given array is\
    \ empty\"\n    )\n\n    let sortedArray = array.sorted()\n    let firstHalf =\
    \ sortedArray.suffix(from: 1)\n    let secondHalf = sortedArray.suffix(from: sortedArray.count\
    \ - 1)\n    return firstHalf.isOdd ? secondHalf.reversed() : secondHalf\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp4hro0dt2.swift:24:22: error: value of type 'ArraySlice<Int>' has\
    \ no member 'isOdd'\n    return firstHalf.isOdd ? secondHalf.reversed() : secondHalf\n\
    \           ~~~~~~~~~ ^~~~~\n/tmp/tmp4hro0dt2.swift:24:28: error: cannot convert\
    \ return expression of type 'ReversedCollection<ArraySlice<Int>>' to return type\
    \ '[Int]'\n    return firstHalf.isOdd ? secondHalf.reversed() : secondHalf\n \
    \          ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count >= 2 else {\n        return array\n    }\n\
    \n    let mid = array.count / 2\n    let leftArray = array[0..<mid]\n    let rightArray\
    \ = array[mid..<array.count]\n\n    var result = leftArray\n    if isOddSum(leftArray:\
    \ leftArray, rightArray: rightArray) {\n        result = leftArray.sorted + rightArray.sorted\n\
    \    }\n    else {\n        result = rightArray.sorted + leftArray.sorted\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp9gm7ztax.swift:26:8: error: cannot find 'isOddSum' in scope\n \
    \   if isOddSum(leftArray: leftArray, rightArray: rightArray) {\n       ^~~~~~~~\n\
    /tmp/tmp9gm7ztax.swift:27:35: error: cannot assign value of type 'Array<Int>'\
    \ to type 'ArraySlice<Int>'\n        result = leftArray.sorted + rightArray.sorted\n\
    \                 ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~\n/tmp/tmp9gm7ztax.swift:27:28:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n        result = leftArray.sorted + rightArray.sorted\n             \
    \    ~~~~~~~~~~^~~~~~\n                                 ()\n/tmp/tmp9gm7ztax.swift:27:48:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n        result = leftArray.sorted + rightArray.sorted\n             \
    \                       ~~~~~~~~~~~^~~~~~\n                                  \
    \                   ()\n/tmp/tmp9gm7ztax.swift:30:36: error: cannot assign value\
    \ of type 'Array<Int>' to type 'ArraySlice<Int>'\n        result = rightArray.sorted\
    \ + leftArray.sorted\n                 ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9gm7ztax.swift:30:29: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n        result = rightArray.sorted + leftArray.sorted\n\
    \                 ~~~~~~~~~~~^~~~~~\n                                  ()\n/tmp/tmp9gm7ztax.swift:30:48:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n        result = rightArray.sorted + leftArray.sorted\n             \
    \                        ~~~~~~~~~~^~~~~~\n                                  \
    \                   ()\n/tmp/tmp9gm7ztax.swift:32:12: error: cannot convert return\
    \ expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return result\n\
    \           ^~~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let result = array.sorted { (n1, n2) -> Bool in\n        if\
    \ n1 > n2 {\n            return false\n        }\n        if n1 < n2 {\n     \
    \       return true\n        }\n        return (n1 + n2) % (2 * UInt32.max) ==\
    \ UInt32.max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpf80xn9ty.swift:24:40: error: cannot convert value of type 'UInt32'\
    \ to expected argument type 'Int'\n        return (n1 + n2) % (2 * UInt32.max)\
    \ == UInt32.max\n                                       ^\n                  \
    \              Int(      )\n"
  stdout: ''
  timestamp: 1660014540
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return sort_array(array: array, ascending: true)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp72585tc1.swift:17:48: error: extra argument 'ascending' in call\n\
    \    return sort_array(array: array, ascending: true)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let length = array.count\n    if length\
    \ > 0 {\n        let mut largest = array[0]\n        for i in 1..length {\n  \
    \          largest = max {largest, array[i]}\n        }\n        if largest %\
    \ 2 == 1 {\n            largest = largest - largest\n            reverse(&result,\
    \ &length)\n        } else {\n            reverse(&result[0..<length-1], &length)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpq7vs2x2f.swift:20:17: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut largest\
    \ = array[0]\n                ^\n/tmp/tmpq7vs2x2f.swift:20:17: note: join the\
    \ identifiers together\n        let mut largest = array[0]\n            ~~~~^~~~~~~\n\
    \            mutlargest\n/tmp/tmpq7vs2x2f.swift:20:17: note: join the identifiers\
    \ together with camel-case\n        let mut largest = array[0]\n            ~~~~^~~~~~~\n\
    \            mutLargest\n/tmp/tmpq7vs2x2f.swift:22:35: error: consecutive statements\
    \ on a line must be separated by ';'\n            largest = max {largest, array[i]}\n\
    \                                  ^\n                                  ;\n/tmp/tmpq7vs2x2f.swift:22:35:\
    \ error: expected expression\n            largest = max {largest, array[i]}\n\
    \                                  ^\n/tmp/tmpq7vs2x2f.swift:21:19: error: cannot\
    \ find operator '..' in scope; did you mean '...'?\n        for i in 1..length\
    \ {\n                  ^~\n                  ...\n/tmp/tmpq7vs2x2f.swift:24:12:\
    \ error: cannot find 'largest' in scope\n        if largest % 2 == 1 {\n     \
    \      ^~~~~~~\n/tmp/tmpq7vs2x2f.swift:25:13: error: cannot find 'largest' in\
    \ scope\n            largest = largest - largest\n            ^~~~~~~\n/tmp/tmpq7vs2x2f.swift:25:23:\
    \ error: cannot find 'largest' in scope\n            largest = largest - largest\n\
    \                      ^~~~~~~\n/tmp/tmpq7vs2x2f.swift:25:33: error: cannot find\
    \ 'largest' in scope\n            largest = largest - largest\n              \
    \                  ^~~~~~~\n/tmp/tmpq7vs2x2f.swift:26:13: error: cannot find 'reverse'\
    \ in scope\n            reverse(&result, &length)\n            ^~~~~~~\n/tmp/tmpq7vs2x2f.swift:26:30:\
    \ error: cannot pass immutable value as inout argument: 'length' is a 'let' constant\n\
    \            reverse(&result, &length)\n                             ^~~~~~~\n\
    /tmp/tmpq7vs2x2f.swift:18:5: note: change 'let' to 'var' to make it mutable\n\
    \    let length = array.count\n    ^~~\n    var\n/tmp/tmpq7vs2x2f.swift:28:13:\
    \ error: cannot find 'reverse' in scope\n  "
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.isEmpty {\n        return array\n    }\n    let len\
    \ = array.count\n    let pivot = array.max()!\n    var left = array\n    var right\
    \ = array\n    var result = [Int]()\n    for (_, value) in array.enumerated()\
    \ {\n        if value < pivot {\n            result.append(value)\n        } else\
    \ {\n            right.removeLast()\n            left.removeLast()\n        }\n\
    \    }\n    if array.max() == pivot {\n        result.appendContentsOf(left)\n\
    \        result.appendContentsOf(right)\n    } else {\n        result.appendContentsOf(right)\n\
    \        result.appendContentsOf(left)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpank2bb3j.swift:34:16: error: value of type '[Int]' has no member\
    \ 'appendContentsOf'\n        result.appendContentsOf(left)\n        ~~~~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpank2bb3j.swift:35:16: error: value of type '[Int]' has no member 'appendContentsOf'\n\
    \        result.appendContentsOf(right)\n        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpank2bb3j.swift:37:16:\
    \ error: value of type '[Int]' has no member 'appendContentsOf'\n        result.appendContentsOf(right)\n\
    \        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpank2bb3j.swift:38:16: error: value of\
    \ type '[Int]' has no member 'appendContentsOf'\n        result.appendContentsOf(left)\n\
    \        ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    let length = array.count\n    \n    if length == 1 {\n\
    \        return array\n    }\n    \n    let sum = array[0] + array[length-1]\n\
    \    \n    var swap : Bool\n    \n    if (sum % 2 == 0) {\n        swap = true\n\
    \    } else {\n        swap = false\n    }\n    \n    var new_array : [Int] =\
    \ Array(0...length)\n    \n    for i in 0..<length {\n        if (swap) {\n  \
    \          new_array[i] = array[i]\n            new_array[i+1] = array[length-i-1]\n\
    \        } else {\n            new_array[i] = array[length-i-1]\n            new_array[i+1]\
    \ = array[i]\n        }\n    }\n    \n    return new_array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1618ec4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1618bbb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1618bbb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1618bbb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1618bbabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b16189bae83 <unavailable> + 188035

    6    tmpz_ba3oap                        0x00005647294f8037 <unavailable> + 8247

    7    tmpz_ba3oap                        0x00005647294f767d <unavailable> + 5757

    8    libc.so.6                          0x00002b16190b0460 __libc_start_main +
    245

    9    tmpz_ba3oap                        0x00005647294f7389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014535
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.reduce([Int](), {\n        var result = $0\n  \
    \      for value in $1 {\n            if value > result[$1.count - 1] {\n    \
    \            result[$1.count - 1] = value\n            } else {\n            \
    \    result.append(value)\n            }\n        }\n        return result\n \
    \   })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpaafz8vh8.swift:19:22: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n        for value in $1 {\n                     ^~\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpd8zeajxb/tmpd8zeajxb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe5a0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe59dd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe59dd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe59dd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8zeajxb                        0x000056196aa33824 <unavailable> + 6180

    5    libc.so.6                          0x00002afe5a2cb460 __libc_start_main +
    245

    6    tmpd8zeajxb                        0x000056196aa33079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014358
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n\n    let\
    \ sum: Int = array[0] + array[array.count - 1]\n    var temp = array[0]\n\n  \
    \  array[0] = 0\n    array[array.count - 1] = 0\n    let result = array.sort{(a,\
    \ b) -> Bool in\n        return b - a >= 0 && sum - a > 0 && sum - b > 0\n   \
    \ }\n    array[0] = temp\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmptspj2rvx.swift:24:10: error: cannot assign through subscript: 'array'\
    \ is a 'let' constant\n    array[0] = 0\n    ~~~~~^\n/tmp/tmptspj2rvx.swift:25:10:\
    \ error: cannot assign through subscript: 'array' is a 'let' constant\n    array[array.count\
    \ - 1] = 0\n    ~~~~~^\n/tmp/tmptspj2rvx.swift:26:24: error: cannot use mutating\
    \ member on immutable value: 'array' is a 'let' constant\n    let result = array.sort{(a,\
    \ b) -> Bool in\n                 ~~~~~ ^\n/tmp/tmptspj2rvx.swift:29:10: error:\
    \ cannot assign through subscript: 'array' is a 'let' constant\n    array[0] =\
    \ temp\n    ~~~~~^\n"
  stdout: ''
  timestamp: 1660014535
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { (firstElement, secondElement) -> Bool\
    \ in\n        return firstElement > secondElement\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpo85k8_0s/tmpo85k8_0s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd8ec0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd8e903b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd8e903988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd8e9027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo85k8_0s                        0x0000563c57bd2656 <unavailable> + 5718

    5    libc.so.6                          0x00002abd8edf8460 __libc_start_main +
    245

    6    tmpo85k8_0s                        0x0000563c57bd2039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014535
