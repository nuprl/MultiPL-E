language: swift
name: HumanEval_101_words_string
results:
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\tlet wordCharacters\
    \ = Array(s.characters)\n\treturn wordCharacters.map { String($0) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj869nd1u.swift:10:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let wordCharacters = Array(s.characters)\n    \
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n\n    let scanner = Scanner(string: s)\n    scanner.scanUpToCharactersFromSet(\"\
    ,\".unicodeScalars.filter { !$0.isASCII }, intoString: nil)\n\n    if scanner.atEnd\
    \ {\n        return words\n    }\n\n    scanner.scanUpToCharactersFromSet(\"\"\
    .unicodeScalars.filter { !$0.isASCII }, intoString: &words)\n\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp77pyds3_.swift:12:19: error: cannot find 'Scanner' in scope\n \
    \   let scanner = Scanner(string: s)\n                  ^~~~~~~\n/tmp/tmp77pyds3_.swift:13:94:\
    \ error: 'nil' requires a contextual type\n    scanner.scanUpToCharactersFromSet(\"\
    ,\".unicodeScalars.filter { !$0.isASCII }, intoString: nil)\n                \
    \                                                                            \
    \ ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvqrwbzmn.swift:10:11: error: value of type 'String' has no member\
    \ 'components'\n        return s.components(separatedBy: \",\")\n            \
    \   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.components(separatedBy: \",\")\n    let result = words.map { String($0)\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6l9zsrjf.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \",\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // Your\
    \ code here\n    \n    return words.wordsString(s.split(separator: \"\\s\"))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5sx5oo21.swift:12:51: error: invalid escape sequence in literal\n\
    \    return words.wordsString(s.split(separator: \"\\s\"))\n                 \
    \                                 ^\n/tmp/tmp5sx5oo21.swift:12:12: error: cannot\
    \ find 'words' in scope\n    return words.wordsString(s.split(separator: \"\\\
    s\"))\n           ^~~~~\n/tmp/tmp5sx5oo21.swift:12:53: error: missing argument\
    \ for parameter 'separator' in call\n    return words.wordsString(s.split(separator:\
    \ \"\\s\"))\n                                                    ^\n         \
    \                                           separator: <#String.Element#>\nSwift.Collection:2:40:\
    \ note: 'split(separator:maxSplits:omittingEmptySubsequences:)' declared here\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let delimiters\
    \ = CharacterSet(charactersIn: \",\")\n    var words = s.components(separatedBy:\
    \ delimiters)\n    words = words.flatMap { $0 }\n    return words\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmplgxtm6nz.swift:10:22: error: cannot find 'CharacterSet' in scope\n\
    \    let delimiters = CharacterSet(charactersIn: \",\")\n                    \
    \ ^~~~~~~~~~~~\n/tmp/tmplgxtm6nz.swift:11:19: error: value of type 'String' has\
    \ no member 'components'\n    var words = s.components(separatedBy: delimiters)\n\
    \                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n    for s in s.components(separatedBy: \", \") {\n        for\
    \ s in s.components(separatedBy: \" \") {\n            words.append(s)\n     \
    \   }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp05o94e5d.swift:11:16: error: value of type 'String' has no member\
    \ 'components'\n    for s in s.components(separatedBy: \", \") {\n           \
    \  ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n    for word, _ in words_chars(s: s) {\n        words.append(word)\n\
    \    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq9596zcc.swift:11:13: error: expected 'in' after for-each pattern\n\
    \    for word, _ in words_chars(s: s) {\n            ^\n/tmp/tmpq9596zcc.swift:11:13:\
    \ error: expected Sequence expression for for-each loop\n    for word, _ in words_chars(s:\
    \ s) {\n            ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n\n    var currentString = \"\"\n    for char in s {\n       \
    \ if char == ' ' || char == ',' {\n            if currentString.isEmpty {\n  \
    \              continue\n            }\n            words.append(currentString)\n\
    \            currentString = \"\"\n        } else {\n            currentString\
    \ += char\n        }\n    }\n    if currentString.isEmpty {\n        words.append(currentString)\n\
    \    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7tbwk79_.swift:14:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == ' ' || char == ',' {\n                   ^~~\n\
    \                   \" \"\n/tmp/tmp7tbwk79_.swift:14:35: error: single-quoted\
    \ string literal found, use '\"'\n        if char == ' ' || char == ',' {\n  \
    \                                ^~~\n                                  \",\"\n\
    /tmp/tmp7tbwk79_.swift:21:30: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            currentString += char\n    \
    \                         ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\tlet a = s.characters.split(separator:\
    \ \",\", omittingEmptySubsequences: false)\n\t\t.map { String($0) }\n\t\t.reduce(into:\
    \ [String]()) { (result, word) in\n\t\t\tif result.last == \"\" {\n\t\t\t\tresult.last.append(word)\n\
    \t\t\t} else {\n\t\t\t\tresult.append(word)\n\t\t\t}\n\t\t}\n\treturn a\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkb59hjhs.swift:14:12: error: value of optional type 'String?' must\
    \ be unwrapped to refer to member 'append' of wrapped base type 'String'\n   \
    \                             result.last.append(word)\n                     \
    \                  ^\n/tmp/tmpkb59hjhs.swift:14:12: note: chain the optional using\
    \ '?' to access member 'append' only for non-'nil' base values\n             \
    \                   result.last.append(word)\n                               \
    \        ^\n                                           ?\n/tmp/tmpkb59hjhs.swift:14:12:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                                result.last.append(word)\n          \
    \                             ^\n                                           !\n\
    /tmp/tmpkb59hjhs.swift:14:17: error: cannot use mutating member on immutable value:\
    \ 'last' is a get-only property\n                                result.last.append(word)\n\
    \                                ~~~~~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1660013225
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.components(separatedBy:\
    \ \", \").map { $0.components(separatedBy: \" \") }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1bpco03x.swift:10:12: error: value of type 'String' has no member\
    \ 'components'\n  return s.components(separatedBy: \", \").map { $0.components(separatedBy:\
    \ \" \") }\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.components(separatedBy: \",\")\n    return words.flatMap { $0.components(separatedBy:\
    \ \" \") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1xqpxx7y.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \",\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn strings.Split(s,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx5wu8n18.swift:10:9: error: cannot find 'strings' in scope\n  \
    \      return strings.Split(s, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n    s.split(separator: \",\").forEach({ (word) in\n        words.append(word)\n\
    \    })\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf7ok1b5x.swift:12:22: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to expected argument type 'String'\n        words.append(word)\n\
    \                     ^\n                     String( )\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    if s ==\
    \ \"\" {\n        return []\n    }\n\n    let chars = s.characters\n    var words\
    \ = [String]()\n    var i = 0\n\n    while i < chars.count {\n        if chars[i]\
    \ == ',' {\n            i += 1\n            if i < chars.count {\n           \
    \     words.append(String(chars[i ..< chars.count]))\n            }\n        }\
    \ else {\n            words.append(String(chars[i]))\n            i += 1\n   \
    \     }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf99nf2sj.swift:19:24: error: single-quoted string literal found,\
    \ use '\"'\n        if chars[i] == ',' {\n                       ^~~\n       \
    \                \",\"\n/tmp/tmpf99nf2sj.swift:14:19: error: 'characters' is unavailable:\
    \ Please use String directly\n    let chars = s.characters\n                 \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpf99nf2sj.swift:19:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if chars[i] == ',' {\n           ^~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpf99nf2sj.swift:22:37:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n                words.append(String(chars[i\
    \ ..< chars.count]))\n                                    ^~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpf99nf2sj.swift:25:33: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            words.append(String(chars[i]))\n                                ^~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \",\").map{ String($0) }.map{ String($0) }.map{ String($0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp7xm_uew7/tmp7xm_uew7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4af238c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4aef2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4aef2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4aef2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xm_uew7                        0x000055e9ce69591f <unavailable> + 6431

    5    libc.so.6                          0x00002af4af424460 __libc_start_main +
    245

    6    tmp7xm_uew7                        0x000055e9ce695489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn s.characters.split(separator:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp486003cl.swift:10:22: error: no 'split' candidates produce the\
    \ expected contextual result type '[String]'\n        return s.characters.split(separator:\
    \ \",\")\n                            ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'),\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual\
    \ result type '[String]'\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var arr\
    \ = [String]()\n    if let split = s.components(separatedBy: \",\").map {\n  \
    \      arr += split\n    }\n\n    if let split = s.components(separatedBy: \"\
    \ \").map {\n        arr += split\n    }\n\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5u3i9ljr.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    if let split = s.components(separatedBy: \",\").map {\n  \
    \                 ~ ^~~~~~~~~~\n/tmp/tmp5u3i9ljr.swift:15:22: error: value of\
    \ type 'String' has no member 'components'\n    if let split = s.components(separatedBy:\
    \ \" \").map {\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    scanner\
    \ := bufio.NewScanner(strings.NewReader(s))\n    var words []string\n\n    for\
    \ scanner.Scan() {\n        words = append(words, scanner.Text())\n    }\n\n \
    \   return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk4i2t148.swift:10:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    scanner := bufio.NewScanner(strings.NewReader(s))\n\
    \           ^\n           ;\n/tmp/tmpk4i2t148.swift:10:13: error: expected expression\n\
    \    scanner := bufio.NewScanner(strings.NewReader(s))\n            ^\n/tmp/tmpk4i2t148.swift:11:14:\
    \ error: consecutive statements on a line must be separated by ';'\n    var words\
    \ []string\n             ^\n             ;\n/tmp/tmpk4i2t148.swift:11:17: error:\
    \ consecutive statements on a line must be separated by ';'\n    var words []string\n\
    \                ^\n                ;\n/tmp/tmpk4i2t148.swift:13:16: error: expected\
    \ 'in' after for-each pattern\n    for scanner.Scan() {\n               ^\n/tmp/tmpk4i2t148.swift:10:5:\
    \ error: cannot find 'scanner' in scope\n    scanner := bufio.NewScanner(strings.NewReader(s))\n\
    \    ^~~~~~~\n/tmp/tmpk4i2t148.swift:11:9: error: type annotation missing in pattern\n\
    \    var words []string\n        ^\n/tmp/tmpk4i2t148.swift:11:15: error: empty\
    \ collection literal requires an explicit type\n    var words []string\n     \
    \         ^~\n/tmp/tmpk4i2t148.swift:11:15: warning: expression of type '[Any]'\
    \ is unused\n    var words []string\n              ^~\n/tmp/tmpk4i2t148.swift:11:17:\
    \ error: cannot find 'string' in scope\n    var words []string\n             \
    \   ^~~~~~\n/tmp/tmpk4i2t148.swift:13:17: error: type 'Sequence' has no member\
    \ 'Scan'\n    for scanner.Scan() {\n               ~^~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return wordsString(s,\
    \ \"\", true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwes4nqhx.swift:10:10: error: cannot find 'wordsString' in scope\n\
    \  return wordsString(s, \"\", true)\n         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // Your\
    \ code here\n    func split(string: String) -> [String] {\n        return string.components(separatedBy:\
    \ \",\")\n    }\n    return split(string: s)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd0tlx_6_.swift:12:23: error: value of type 'String' has no member\
    \ 'components'\n        return string.components(separatedBy: \",\")\n       \
    \        ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpggb_0je9.swift:10:12: error: value of type 'String' has no member\
    \ 'components'\n  return s.components(separatedBy: \",\")\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn s.split(separator:\
    \ \",\", omittingEmptySubsequences: true).flatMap { $0.split(separator: \" \"\
    , omittingEmptySubsequences: true) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkpau30li.swift:10:79: error: cannot convert value of type '[Substring.SubSequence]'\
    \ (aka 'Array<Substring>') to closure result type 'String?'\n        return s.split(separator:\
    \ \",\", omittingEmptySubsequences: true).flatMap { $0.split(separator: \" \"\
    , omittingEmptySubsequences: true) }\n                                       \
    \                                           ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    splitStrings(s,\
    \ \", \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpskq8msjs.swift:10:5: error: cannot find 'splitStrings' in scope\n\
    \    splitStrings(s, \", \").map(String.init)\n    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn strings.Split(s,\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuhp_huhy.swift:10:9: error: cannot find 'strings' in scope\n  \
    \      return strings.Split(s, \", \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // Your\
    \ code here\n\n    let words = s.componentsSeparatedByString(\" \")\n    return\
    \ words.map{\n        String($0)\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2lf8e_1f.swift:12:19: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = s.componentsSeparatedByString(\"\
    \ \")\n                ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return strings.FieldsFunc(s,\
    \ func(r rune) bool {\n    switch r {\n    case ',':\n    case ' ':\n    case\
    \ '.':\n    case ':':\n    case '!':\n      return false\n    }\n    return true\n\
    \  })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmparq3i89p.swift:10:32: error: expected expression in list of expressions\n\
    \  return strings.FieldsFunc(s, func(r rune) bool {\n                        \
    \       ^\n/tmp/tmparq3i89p.swift:10:36: error: expected identifier in function\
    \ declaration\n  return strings.FieldsFunc(s, func(r rune) bool {\n          \
    \                         ^\n/tmp/tmparq3i89p.swift:12:10: error: single-quoted\
    \ string literal found, use '\"'\n    case ',':\n         ^~~\n         \",\"\n\
    /tmp/tmparq3i89p.swift:13:10: error: single-quoted string literal found, use '\"\
    '\n    case ' ':\n         ^~~\n         \" \"\n/tmp/tmparq3i89p.swift:14:10:\
    \ error: single-quoted string literal found, use '\"'\n    case '.':\n       \
    \  ^~~\n         \".\"\n/tmp/tmparq3i89p.swift:15:10: error: single-quoted string\
    \ literal found, use '\"'\n    case ':':\n         ^~~\n         \":\"\n/tmp/tmparq3i89p.swift:16:10:\
    \ error: single-quoted string literal found, use '\"'\n    case '!':\n       \
    \  ^~~\n         \"!\"\n/tmp/tmparq3i89p.swift:10:10: error: cannot find 'strings'\
    \ in scope\n  return strings.FieldsFunc(s, func(r rune) bool {\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\tsplits :=\
    \ strings.Split(s, \",\")\n\tout := make([]string, len(splits))\n\tfor i, s :=\
    \ range splits {\n\t\tout[i] = strings.Trim(s, \"\\\"\")\n\t}\n\treturn out\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpapxr7vqt.swift:10:8: error: consecutive statements on a line must\
    \ be separated by ';'\n        splits := strings.Split(s, \",\")\n           \
    \   ^\n              ;\n/tmp/tmpapxr7vqt.swift:10:9: error: expected expression\n\
    \        splits := strings.Split(s, \",\")\n               ^\n/tmp/tmpapxr7vqt.swift:12:7:\
    \ error: expected 'in' after for-each pattern\n        for i, s := range splits\
    \ {\n             ^\n/tmp/tmpapxr7vqt.swift:12:7: error: expected Sequence expression\
    \ for for-each loop\n        for i, s := range splits {\n             ^\n/tmp/tmpapxr7vqt.swift:10:2:\
    \ error: cannot find 'splits' in scope\n        splits := strings.Split(s, \"\
    ,\")\n        ^~~~~~\n/tmp/tmpapxr7vqt.swift:15:9: error: cannot find 'out' in\
    \ scope\n        return out\n               ^~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = s.characters.split {\n        let char = $0\n        let isSpace = Character(char)\
    \ == \" \" || char == \",\"\n        !isSpace\n    }\n    return Array(words)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt1l2ely4.swift:12:33: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n        let isSpace = Character(char) == \" \" || char == \",\"\n \
    \                               ^\n                                extendedGraphemeClusterLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let s =\
    \ string_split(s, \"\\\\s+\")\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnaka4w3y.swift:10:13: error: cannot find 'string_split' in scope\n\
    \    let s = string_split(s, \"\\\\s+\")\n            ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  let words\
    \ = s.componentsSeparatedByString(\" \")\n  return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvky30itq.swift:10:17: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n  let words = s.componentsSeparatedByString(\"\
    \ \")\n              ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return words.splitEach(s,\
    \ { $0.split(separator: \",\").map(String.init) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy74cn62l.swift:10:10: error: cannot find 'words' in scope\n  return\
    \ words.splitEach(s, { $0.split(separator: \",\").map(String.init) })\n      \
    \   ^~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuvpevcho.swift:10:12: error: value of type 'String' has no member\
    \ 'components'\n  return s.components(separatedBy: \", \")\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return split(s,\
    \ \", \").map{ String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0gua75nz.swift:10:12: error: cannot find 'split' in scope\n   \
    \ return split(s, \", \").map{ String($0) }\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn s.tokenize(\"\
    , \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmprvgae_h9.swift:10:11: error: value of type 'String' has no member\
    \ 'tokenize'\n        return s.tokenize(\", \")\n               ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n    var word = \"\"\n    for c in s {\n        if c != \" \"\
    \ {\n            word += c\n        } else {\n            words.append(word)\n\
    \            word = \"\"\n        }\n    }\n    if word != \"\" {\n        words.append(word)\n\
    \    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmprfmi7r_c.swift:14:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            word += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn s.componentsSeparatedByString(\"\
    , \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpudlre3ko.swift:10:11: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n        return s.componentsSeparatedByString(\"\
    , \")\n               ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words:\
    \ [String] = s.components(separatedBy: \" \")\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp92mq6hfg.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n    let words: [String] = s.components(separatedBy: \" \")\n \
    \                         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.trimmingCharacters(in:\
    \ .whitespacesAndNewlines).components(separatedBy: \", \").filter({ !$0.isEmpty\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpksr30jb1.swift:10:14: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    return s.trimmingCharacters(in: .whitespacesAndNewlines).components(separatedBy:\
    \ \", \").filter({ !$0.isEmpty })\n           ~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpksr30jb1.swift:10:38:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    return s.trimmingCharacters(in: .whitespacesAndNewlines).components(separatedBy:\
    \ \", \").filter({ !$0.isEmpty })\n                                    ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return words.SplitString(s)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvcggnzr5.swift:10:12: error: cannot find 'words' in scope\n   \
    \ return words.SplitString(s)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \",\").map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmphu_j2nts/tmphu_j2nts.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b386f7eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b386f4e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b386f4e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b386f4e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphu_j2nts                        0x00005580e372381f <unavailable> + 6175

    5    libc.so.6                          0x00002b386f9d6460 __libc_start_main +
    245

    6    tmphu_j2nts                        0x00005580e3723389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let chars\
    \ = s.characters.split(separator: \",\")\n    return chars.flatMap({ String($0).characters.split(separator:\
    \ \" \") })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2k20moq1.swift:10:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = s.characters.split(separator: \",\")\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2k20moq1.swift:11:50: error: cannot convert value of type '[String.SubSequence]'\
    \ (aka 'Array<Substring>') to closure result type 'String?'\n    return chars.flatMap({\
    \ String($0).characters.split(separator: \" \") })\n                         \
    \  ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.characters.split{$0\
    \ == \",\"}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmptgipamiz.swift:10:23: error: no 'split' candidates produce the\
    \ expected contextual result type '[String]'\n  return s.characters.split{$0 ==\
    \ \",\"}\n                      ^\nSwift.Sequence:2:40: note: 'split(maxSplits:omittingEmptySubsequences:whereSeparator:)'\
    \ produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'),\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func split(maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true,\
    \ whereSeparator isSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:12:40: note: 'split(maxSplits:omittingEmptySubsequences:whereSeparator:)'\
    \ produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual\
    \ result type '[String]'\n    @inlinable public __consuming func split(maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true, whereSeparator isSeparator:\
    \ (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var result\
    \ = [String]()\n    \n    if let input = s {\n        \n        let components\
    \ = input.components(separatedBy: \", \")\n        \n        for component in\
    \ components {\n            result.append(component)\n        }\n        \n  \
    \  }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpobov8eye.swift:14:32: error: value of type 'String' has no member\
    \ 'components'\n        let components = input.components(separatedBy: \", \"\
    )\n                         ~~~~~ ^~~~~~~~~~\n/tmp/tmpobov8eye.swift:12:8: error:\
    \ initializer for conditional binding must have Optional type, not 'String'\n\
    \    if let input = s {\n       ^           ~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let chars\
    \ = s.characters\n    var words = [String]()\n    var charPos = s.startIndex\n\
    \    while charPos != s.endIndex {\n        if chars[charPos] == ',' || chars[charPos]\
    \ == ' ' {\n            if charPos != s.startIndex {\n                words.append(String(chars[charPos\
    \ - 1]))\n            }\n            charPos = chars[charPos].advanced(by: 1)\n\
    \        } else {\n            charPos = chars[charPos].advanced(by: 1)\n    \
    \    }\n    }\n    if charPos != s.endIndex {\n        words.append(String(chars[charPos\
    \ - 1]))\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7981bnxy.swift:14:30: error: single-quoted string literal found,\
    \ use '\"'\n        if chars[charPos] == ',' || chars[charPos] == ' ' {\n    \
    \                         ^~~\n                             \",\"\n/tmp/tmp7981bnxy.swift:14:55:\
    \ error: single-quoted string literal found, use '\"'\n        if chars[charPos]\
    \ == ',' || chars[charPos] == ' ' {\n                                        \
    \              ^~~\n                                                      \" \"\
    \n/tmp/tmp7981bnxy.swift:10:19: error: 'characters' is unavailable: Please use\
    \ String directly\n    let chars = s.characters\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7981bnxy.swift:16:43:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n                words.append(String(chars[charPos - 1]))\n          \
    \                                ^\n/tmp/tmp7981bnxy.swift:18:38: error: value\
    \ of type 'Character' has no member 'advanced'\n            charPos = chars[charPos].advanced(by:\
    \ 1)\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmp7981bnxy.swift:20:38:\
    \ error: value of type 'Character' has no member 'advanced'\n            charPos\
    \ = chars[charPos].advanced(by: 1)\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n\
    /tmp/tmp7981bnxy.swift:24:35: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n        words.append(String(chars[charPos -\
    \ 1]))\n                                  ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.characters.split{$0\
    \ == \",\"}.map(String.init).filter { !$0.isEmpty }.map { $0.trim() }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmprap9_qbl.swift:10:91: error: value of type 'String' has no member\
    \ 'trim'\n    return s.characters.split{$0 == \",\"}.map(String.init).filter {\
    \ !$0.isEmpty }.map { $0.trim() }\n                                          \
    \                                             ~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let pattern\
    \ = \"\\\\W+\"\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n    return regex.componentsSeparatedByString(s)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvkfeuepf.swift:11:22: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n                     ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.components(separatedBy:\
    \ \",\").flatMap { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkrjs2w6x.swift:10:12: error: value of type 'String' has no member\
    \ 'components'\n  return s.components(separatedBy: \",\").flatMap { String($0)\
    \ }\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\twords := strings.Split(s,\
    \ \" \")\n\tvar output [100]string\n\tfor i := 0; i < len(words); i++ {\n\t\t\
    output[i] = words[i]\n\t}\n\treturn output\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg9zf6syp.swift:10:7: error: consecutive statements on a line must\
    \ be separated by ';'\n        words := strings.Split(s, \" \")\n            \
    \ ^\n             ;\n/tmp/tmpg9zf6syp.swift:10:8: error: expected expression\n\
    \        words := strings.Split(s, \" \")\n              ^\n/tmp/tmpg9zf6syp.swift:11:12:\
    \ error: consecutive statements on a line must be separated by ';'\n        var\
    \ output [100]string\n                  ^\n                  ;\n/tmp/tmpg9zf6syp.swift:11:18:\
    \ error: consecutive statements on a line must be separated by ';'\n        var\
    \ output [100]string\n                        ^\n                        ;\n/tmp/tmpg9zf6syp.swift:12:9:\
    \ error: expected type\n        for i := 0; i < len(words); i++ {\n          \
    \     ^\n                <#type#>\n/tmp/tmpg9zf6syp.swift:12:9: error: expected\
    \ 'in' after for-each pattern\n        for i := 0; i < len(words); i++ {\n   \
    \            ^\n/tmp/tmpg9zf6syp.swift:12:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 0; i < len(words); i++ {\n             \
    \  ^\n/tmp/tmpg9zf6syp.swift:10:2: error: cannot find 'words' in scope\n     \
    \   words := strings.Split(s, \" \")\n        ^~~~~\n/tmp/tmpg9zf6syp.swift:11:6:\
    \ error: type annotation missing in pattern\n        var output [100]string\n\
    \            ^\n/tmp/tmpg9zf6syp.swift:11:13: warning: expression of type '[Int]'\
    \ is unused\n        var output [100]string\n                   ^~~~~\n/tmp/tmpg9zf6syp.swift:11:18:\
    \ error: cannot find 'string' in scope\n        var output [100]string\n     \
    \                   ^~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.characters.split(separator:\
    \ \",\", omittingEmptySubsequences: true)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqu8_ws5w.swift:10:25: error: no 'split' candidates produce the\
    \ expected contextual result type '[String]'\n    return s.characters.split(separator:\
    \ \",\", omittingEmptySubsequences: true)\n                        ^\nSwift.Sequence:2:40:\
    \ note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[ArraySlice<String.Element>]'\
    \ (aka 'Array<ArraySlice<Character>>'), not the expected contextual result type\
    \ '[String]'\n    @inlinable public __consuming func split(separator: Self.Element,\
    \ maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual\
    \ result type '[String]'\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // Split\
    \ string into words.\n    let words = s.components(separatedBy: \" \")\n    //\
    \ Split words back into strings.\n    let strings = words.map { String($0) }\n\
    \    // Return array of words.\n    return strings\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiwtp_u_x.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  var words\
    \ = s.characters.split(\", \")\n  return words.map { String($0) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpavitp2ii.swift:10:34: error: missing argument label 'separator:'\
    \ in call\n  var words = s.characters.split(\", \")\n                        \
    \         ^\n                                 separator: \n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvqrwbzmn.swift:10:11: error: value of type 'String' has no member\
    \ 'components'\n        return s.components(separatedBy: \",\")\n            \
    \   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var result\
    \ = [String]()\n    var words = [String]()\n    var word = String()\n    \n  \
    \  let chars = s.characters.split(separator: \",\")\n    for char in chars {\n\
    \        word = char.trimmingCharacters(in: .whitespacesAndNewlines)\n       \
    \ words.append(word)\n    }\n    \n    words = words.flatMap({ $0.split(separator:\
    \ \" \") })\n    \n    for word in words {\n        result.append(word)\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvnwlj0on.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = s.characters.split(separator: \",\")\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpvnwlj0on.swift:16:21: error: value of type 'String.SubSequence' (aka\
    \ 'Substring') has no member 'trimmingCharacters'\n        word = char.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n               ~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpvnwlj0on.swift:16:45:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \        word = char.trimmingCharacters(in: .whitespacesAndNewlines)\n       \
    \                                    ~^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvnwlj0on.swift:20:32:\
    \ error: cannot convert value of type '[String.SubSequence]' (aka 'Array<Substring>')\
    \ to closure result type 'String?'\n    words = words.flatMap({ $0.split(separator:\
    \ \" \") })\n                            ~~~^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.split(separator: \",\")\n    return words.map{String($0)}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpsxii7d8u/tmpsxii7d8u.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad55a9b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad55a6acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad55a6ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad55a6ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxii7d8u                        0x000055f46474981f <unavailable> + 6175

    5    libc.so.6                          0x00002ad55aba1460 __libc_start_main +
    245

    6    tmpsxii7d8u                        0x000055f464749389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \",\", omittingEmptySubsequences: false).map(String.init)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp9mirzkow/tmp9mirzkow.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72a94c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72a91b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72a91b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72a91b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9mirzkow                        0x000055e17b84781f <unavailable> + 6175

    5    libc.so.6                          0x00002b72a96ad460 __libc_start_main +
    245

    6    tmp9mirzkow                        0x000055e17b847389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words:\
    \ [String] = s.components(separatedBy: CharacterSet(charactersIn: \".,\"))\n \
    \   return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5y_nsp2h.swift:10:53: error: cannot find 'CharacterSet' in scope\n\
    \    let words: [String] = s.components(separatedBy: CharacterSet(charactersIn:\
    \ \".,\"))\n                                                    ^~~~~~~~~~~~\n\
    /tmp/tmp5y_nsp2h.swift:10:29: error: value of type 'String' has no member 'components'\n\
    \    let words: [String] = s.components(separatedBy: CharacterSet(charactersIn:\
    \ \".,\"))\n                          ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\tlet wordList\
    \ = s.components(separatedBy: \",\")\n\twordList.removeLast()\n\treturn wordList\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgk16pzxp.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n        let wordList = s.components(separatedBy: \",\")\n    \
    \                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.componentsSeparatedByString(\"\
    \ \").filter({$0 != \"\"})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmdeoe8yw.swift:10:14: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    return s.componentsSeparatedByString(\" \"\
    ).filter({$0 != \"\"})\n           ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n    var word = String()\n    for ch in s.unicodeScalars {\n \
    \       switch ch {\n        case .Letter:\n            word = String()\n    \
    \    case .OtherLetter:\n            word = String()\n        case .Space:\n \
    \           word = String()\n        case .OtherSpace:\n            word = String()\n\
    \        case .Newline:\n            word = String()\n        case .Control:\n\
    \            word = String()\n        case .OtherControl:\n            word =\
    \ String()\n        case .Delimiter:\n            word = String()\n        case\
    \ .OtherDelimiter:\n            word = String()\n        case .Start:\n      \
    \      word = String()\n        case .OtherStart:\n            word = String()\n\
    \        case .UppercaseLetter:\n            word = String()\n        case .OtherUppercaseLetter:\n\
    \            word = String()\n        case .Mark:\n            word = String()\n\
    \        case .OtherMark:\n            word = String()\n        case .LetterNumber:\n\
    \            word = String()\n        case .OtherLetterNumber:\n            word\
    \ = String()\n        case .DecimalDigit:\n            word = String()\n     \
    \   case .OtherDecimalDigit:\n            word = String()\n        case .Extender:\n\
    \            word = String()\n        case .OtherExtender:\n            word =\
    \ String()\n        }\n        if word != \"\" {\n            words.append(word)\n\
    \        }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi8d3htva.swift:14:15: error: type 'Unicode.Scalar' has no member\
    \ 'Letter'\n        case .Letter:\n             ~^~~~~~\n/tmp/tmpi8d3htva.swift:16:15:\
    \ error: type 'Unicode.Scalar' has no member 'OtherLetter'\n        case .OtherLetter:\n\
    \             ~^~~~~~~~~~~\n/tmp/tmpi8d3htva.swift:18:15: error: type 'Unicode.Scalar'\
    \ has no member 'Space'\n        case .Space:\n             ~^~~~~\n/tmp/tmpi8d3htva.swift:20:15:\
    \ error: type 'Unicode.Scalar' has no member 'OtherSpace'\n        case .OtherSpace:\n\
    \             ~^~~~~~~~~~\n/tmp/tmpi8d3htva.swift:22:15: error: type 'Unicode.Scalar'\
    \ has no member 'Newline'\n        case .Newline:\n             ~^~~~~~~\n/tmp/tmpi8d3htva.swift:24:15:\
    \ error: type 'Unicode.Scalar' has no member 'Control'\n        case .Control:\n\
    \             ~^~~~~~~\n/tmp/tmpi8d3htva.swift:26:15: error: type 'Unicode.Scalar'\
    \ has no member 'OtherControl'\n        case .OtherControl:\n             ~^~~~~~~~~~~~\n\
    /tmp/tmpi8d3htva.swift:28:15: error: type 'Unicode.Scalar' has no member 'Delimiter'\n\
    \        case .Delimiter:\n             ~^~~~~~~~~\n/tmp/tmpi8d3htva.swift:30:15:\
    \ error: type 'Unicode.Scalar' has no member 'OtherDelimiter'\n        case .OtherDelimiter:\n\
    \             ~^~~~~~~~~~~~~~\n/tmp/tmpi8d3htva.swift:32:15: error: type 'Unicode.Scalar'\
    \ has no member 'Start'\n        case .Start:\n             ~^~~~~\n/tmp/tmpi8d3htva.swift:34:15:\
    \ error: type 'Unicode.Scalar' has no member 'OtherStart'\n        case .OtherStart:\n\
    \             ~^~~~~~~~~~\n/tmp/tmpi8d3htva.swift:36:15: error: type 'Unicode.Scalar'\
    \ has no member 'UppercaseLetter'\n        case .UppercaseLetter:\n          \
    \   ~^~~~~~~~~~~~~~~\n/tmp/tmpi8d3htva.swift:38:15: error: type 'Unicode.Scalar'\
    \ has no member 'OtherUppercaseLetter'\n        case .OtherUppercaseLetter:\n\
    \             ~^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpi8d3htva.swift:40:15: error: type\
    \ 'Unicode.Scalar' has no member 'Mark'\n        case .Mark:\n             ~^~~~\n\
    /tmp/tmpi8d3htva.swift:42:15: error: type 'Unicode.Scalar' has no member 'OtherMark'\n\
    \        case .OtherMark:\n             ~^~~~~~~~~\n/tmp/tmpi8d"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    if s ==\
    \ \"\" {\n        return nil\n    }\n    let words = s.components(separatedBy:\
    \ \",\")\n    let arr = words.map {\n        String($0)\n    }\n    return arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb0zjo4xo.swift:11:16: error: 'nil' is incompatible with return\
    \ type '[String]'\n        return nil\n               ^\n/tmp/tmpb0zjo4xo.swift:13:19:\
    \ error: value of type 'String' has no member 'components'\n    let words = s.components(separatedBy:\
    \ \",\")\n                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.componentsSeparatedByCharactersInSet(\n\
    \        NSCharacterSet.whitespaceAndNewlineCharacterSet())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmprfg2uvxg.swift:11:9: error: cannot find 'NSCharacterSet' in scope\n\
    \        NSCharacterSet.whitespaceAndNewlineCharacterSet())\n        ^~~~~~~~~~~~~~\n\
    /tmp/tmprfg2uvxg.swift:10:14: error: value of type 'String' has no member 'componentsSeparatedByCharactersInSet'\n\
    \    return s.componentsSeparatedByCharactersInSet(\n           ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \").filter({ !$0.isEmpty })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmppc2s8nie.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \").filter({ !$0.isEmpty\
    \ })\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  var words\
    \ = s.characters\n  words.removeLast()\n  return words.reversed().map {\n    let\
    \ (index, letter) = String($0).index($0)\n    return String(s[..index]).uppercased()\n\
    \  }.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxeq2dcxx.swift:10:17: error: 'characters' is unavailable: Please\
    \ use String directly\n  var words = s.characters\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxeq2dcxx.swift:14:21:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    return String(s[..index]).uppercased()\n\
    \                    ^~\n                    ...\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\").flatMap(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmplvdzrnly.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\").flatMap(String.init)\n\
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = s.components(separatedBy: \",\")\n    words = words.map(String.init)\n   \
    \ return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpozopci4w.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \",\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    if s ==\
    \ \"\" {\n        return []\n    }\n\n    let words = s.componentsSeparatedByString(\"\
    \ \")\n    if words.count > 1 {\n        return words\n    } else {\n        return\
    \ [s]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe4773afb.swift:14:19: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = s.componentsSeparatedByString(\"\
    \ \")\n                ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvqrwbzmn.swift:10:11: error: value of type 'String' has no member\
    \ 'components'\n        return s.components(separatedBy: \",\")\n            \
    \   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let scanner\
    \ = Scanner(string: s)\n    var words: [String] = []\n\n    if scanner.scanUpTo(whitespace())\
    \ { words.append(scanner.scan()) }\n\n    scanner.scanUpTo(commaOrSpace()) { words.append(scanner.scan())\
    \ }\n\n    if scanner.scanUpTo(whitespace()) { words.append(scanner.scan()) }\n\
    \n    scanner.scanUpTo(whitespace()) { words.append(scanner.scan()) }\n\n    if\
    \ scanner.scanUpTo(whitespace()) { words.append(scanner.scan()) }\n\n    if scanner.scanUpTo(whitespace())\
    \ { words.append(scanner.scan()) }\n\n    if scanner.scanUpTo(whitespace()) {\
    \ words.append(scanner.scan()) }\n\n    return words\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgkzul0dc.swift:10:19: error: cannot find 'Scanner' in scope\n \
    \   let scanner = Scanner(string: s)\n                  ^~~~~~~\n/tmp/tmpgkzul0dc.swift:13:25:\
    \ error: cannot find 'whitespace' in scope\n    if scanner.scanUpTo(whitespace())\
    \ { words.append(scanner.scan()) }\n                        ^~~~~~~~~~\n/tmp/tmpgkzul0dc.swift:15:22:\
    \ error: cannot find 'commaOrSpace' in scope\n    scanner.scanUpTo(commaOrSpace())\
    \ { words.append(scanner.scan()) }\n                     ^~~~~~~~~~~~\n/tmp/tmpgkzul0dc.swift:17:25:\
    \ error: cannot find 'whitespace' in scope\n    if scanner.scanUpTo(whitespace())\
    \ { words.append(scanner.scan()) }\n                        ^~~~~~~~~~\n/tmp/tmpgkzul0dc.swift:19:22:\
    \ error: cannot find 'whitespace' in scope\n    scanner.scanUpTo(whitespace())\
    \ { words.append(scanner.scan()) }\n                     ^~~~~~~~~~\n/tmp/tmpgkzul0dc.swift:21:25:\
    \ error: cannot find 'whitespace' in scope\n    if scanner.scanUpTo(whitespace())\
    \ { words.append(scanner.scan()) }\n                        ^~~~~~~~~~\n/tmp/tmpgkzul0dc.swift:23:25:\
    \ error: cannot find 'whitespace' in scope\n    if scanner.scanUpTo(whitespace())\
    \ { words.append(scanner.scan()) }\n                        ^~~~~~~~~~\n/tmp/tmpgkzul0dc.swift:25:25:\
    \ error: cannot find 'whitespace' in scope\n    if scanner.scanUpTo(whitespace())\
    \ { words.append(scanner.scan()) }\n                        ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    words =\
    \ s.characters.split{$0 == \",\"}\n    if words.count < 1 {\n        words = s.characters.split{$0\
    \ == \" \"}.map(String.init)\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9bav_hxa.swift:10:5: error: cannot find 'words' in scope\n    words\
    \ = s.characters.split{$0 == \",\"}\n    ^~~~~\n/tmp/tmp9bav_hxa.swift:11:8: error:\
    \ cannot find 'words' in scope\n    if words.count < 1 {\n       ^~~~~\n/tmp/tmp9bav_hxa.swift:12:9:\
    \ error: cannot find 'words' in scope\n        words = s.characters.split{$0 ==\
    \ \" \"}.map(String.init)\n        ^~~~~\n/tmp/tmp9bav_hxa.swift:14:12: error:\
    \ cannot find 'words' in scope\n    return words\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    if let split\
    \ = s.components(separatedBy: \",\").map({ $0.trimmingCharacters(in: CharacterSet.whitespaces)\
    \ }) {\n        return split.compactMap { $0.components(separatedBy: \" \") }\n\
    \    } else {\n        return s.split(separator: \" \")\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp88cyzxbc.swift:10:83: error: cannot find 'CharacterSet' in scope\n\
    \    if let split = s.components(separatedBy: \",\").map({ $0.trimmingCharacters(in:\
    \ CharacterSet.whitespaces) }) {\n                                           \
    \                                       ^~~~~~~~~~~~\n/tmp/tmp88cyzxbc.swift:13:18:\
    \ error: no 'split' candidates produce the expected contextual result type '[String]'\n\
    \        return s.split(separator: \" \")\n                 ^\nSwift.Sequence:2:40:\
    \ note: 'split(separator:maxSplits:omittingEmptySubsequences:)' produces '[ArraySlice<String.Element>]'\
    \ (aka 'Array<ArraySlice<Character>>'), not the expected contextual result type\
    \ '[String]'\n    @inlinable public __consuming func split(separator: Self.Element,\
    \ maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual\
    \ result type '[String]'\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = split(s)\n    \n    if words.count > 1 {\n        let lastWord = words[words.count\
    \ - 1]\n        if lastWord.contains(\",\") {\n            words[words.count -\
    \ 1] = lastWord.components(separatedBy: \",\").joined(separator: \" \")\n    \
    \    }\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpogu3l91l.swift:10:17: error: cannot find 'split' in scope\n   \
    \ var words = split(s)\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \",\", maxSplits: Int(math.pow(Double(s.characters.count), Double(3))))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq7fvbl2a.swift:10:51: error: cannot find 'math' in scope\n    return\
    \ s.split(separator: \",\", maxSplits: Int(math.pow(Double(s.characters.count),\
    \ Double(3))))\n                                                  ^~~~\n/tmp/tmpq7fvbl2a.swift:10:14:\
    \ error: no 'split' candidates produce the expected contextual result type '[String]'\n\
    \    return s.split(separator: \",\", maxSplits: Int(math.pow(Double(s.characters.count),\
    \ Double(3))))\n             ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'),\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'),\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'),\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'),\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = "
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.componentsSeparatedByString(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpagvavrrk.swift:10:14: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    return s.componentsSeparatedByString(\" \"\
    )\n           ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words:\
    \ [String] = s.components(separatedBy: \",\")\n    .map { $0.trimmingCharacters(in:\
    \ CharacterSet.whitespaces)}\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpstkjn8vu.swift:11:38: error: cannot find 'CharacterSet' in scope\n\
    \    .map { $0.trimmingCharacters(in: CharacterSet.whitespaces)}\n           \
    \                          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return split(s,\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8ke_xbb0.swift:10:12: error: cannot find 'split' in scope\n   \
    \ return split(s, \", \")\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\tvar result\
    \ = Array<String>()\n\tlet words = s.components(separatedBy: \",\")\n\tfor word\
    \ in words {\n\t\tlet words = word.components(separatedBy: \" \")\n\t\tfor word\
    \ in words {\n\t\t\tresult.append(word)\n\t\t}\n\t}\n\treturn result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdmpl8w23.swift:11:16: error: value of type 'String' has no member\
    \ 'components'\n        let words = s.components(separatedBy: \",\")\n       \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn strings.Split(s,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx5wu8n18.swift:10:9: error: cannot find 'strings' in scope\n  \
    \      return strings.Split(s, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return strings.Fields(s)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8jr_7212.swift:10:10: error: cannot find 'strings' in scope\n \
    \ return strings.Fields(s)\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.components(separatedBy: \", \")\n    return words.map { $0.split(separator:\
    \ \", \").map(String.init) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpukqvite4.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \", \")\n          \
    \      ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n    split(s, \", \").forEach({ words.append(String($0)) })\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn8tnc8va.swift:11:5: error: cannot find 'split' in scope\n    split(s,\
    \ \", \").forEach({ words.append(String($0)) })\n    ^~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn s.trim().split(separator:\
    \ \",\").map { String(($0).trimmingCharacters(in: \" \")).lowercased() }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj_9g13oa.swift:10:11: error: value of type 'String' has no member\
    \ 'trim'\n        return s.trim().split(separator: \",\").map { String(($0).trimmingCharacters(in:\
    \ \" \")).lowercased() }\n               ~ ^~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words:\
    \ [String] = s.components(separatedBy: \",?\")\n    return words\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq2xe51am.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n    let words: [String] = s.components(separatedBy: \",?\")\n\
    \                          ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.componentsSeparatedByString(\" \")\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp209jut8k.swift:10:19: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = s.componentsSeparatedByString(\"\
    \ \")\n                ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    if s.isEmpty\
    \ {\n        return []\n    }\n    var words = s.componentsSeparatedByString(\"\
    \ \")\n    var result = [String]()\n    for word in words {\n        if word.hasPrefix(\"\
    \\\"\") {\n            word = word.dropFirst()\n        }\n        if word.hasSuffix(\"\
    \\\"\") {\n            word = word.dropLast()\n        }\n        if let index\
    \ = word.index(of: \",\", options: .backwards) {\n            word = word.suffix(from:\
    \ index)\n        }\n        word = word.lowercased()\n        result.append(word)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnc2cgc4l.swift:13:19: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    var words = s.componentsSeparatedByString(\"\
    \ \")\n                ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnc2cgc4l.swift:22:54:\
    \ error: cannot infer contextual base in reference to member 'backwards'\n   \
    \     if let index = word.index(of: \",\", options: .backwards) {\n          \
    \                                          ~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var wordsArray:\
    \ [String] = []\n    let words = s.componentsSeparatedByString(\", \")\n    for\
    \ word in words {\n        if !wordsArray.contains(word) {\n            wordsArray.append(word)\n\
    \        }\n    }\n    return wordsArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnyjqw33b.swift:11:19: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = s.componentsSeparatedByString(\"\
    , \")\n                ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let tokens\
    \ = s.characters.split(\", \").map(String.init)\n    return tokens\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp39rrlwhr.swift:10:37: error: missing argument label 'separator:'\
    \ in call\n    let tokens = s.characters.split(\", \").map(String.init)\n    \
    \                                ^\n                                    separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n    var i = 0\n    var word = \"\"\n\n    for i = 0; i <= s.count;\
    \ i++ {\n        word = s.substring(i, i)\n\n        if word != \",\" {\n    \
    \        words.append(word)\n        }\n    }\n\n    return words\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3gilv5e4.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 0; i <= s.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.componentsSeparatedByString(\" \")\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp209jut8k.swift:10:19: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = s.componentsSeparatedByString(\"\
    \ \")\n                ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.components(separatedBy: \",\")\n    let result: [String] = []\n    for word\
    \ in words {\n        let trimmedWord = word.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \        result.append(trimmedWord)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcubsxbk7.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \",\")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpcubsxbk7.swift:13:55: error: cannot find 'CharacterSet'\
    \ in scope\n        let trimmedWord = word.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \                                                      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn s.components(separatedBy:\
    \ \",\".unicodeScalars.map { String($0) })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4dcnwr9r.swift:10:11: error: value of type 'String' has no member\
    \ 'components'\n        return s.components(separatedBy: \",\".unicodeScalars.map\
    \ { String($0) })\n               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    words =\
    \ s.characters.split(separator: \",\", omittingEmptySubsequences: false)\n   \
    \ return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp95_gqnhh.swift:10:5: error: cannot find 'words' in scope\n    words\
    \ = s.characters.split(separator: \",\", omittingEmptySubsequences: false)\n \
    \   ^~~~~\n/tmp/tmp95_gqnhh.swift:11:12: error: cannot find 'words' in scope\n\
    \    return words\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    \n    var\
    \ words = [String]()\n    \n    var words = s.components(separatedBy: \",\")\n\
    \    \n    for word in words {\n        words = words + word.components(separatedBy:\
    \ \" \")\n    }\n    \n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6gk540wk.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \",\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    \n    var\
    \ array: [String] = []\n    \n    if let words: Array<String> = s.components(separatedBy:\
    \ \",\").flatMap({ $0.components(separatedBy: \" \") }) {\n        array = words\n\
    \    }\n    \n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8pf_nam8.swift:13:37: error: value of type 'String' has no member\
    \ 'components'\n    if let words: Array<String> = s.components(separatedBy: \"\
    ,\").flatMap({ $0.components(separatedBy: \" \") }) {\n                      \
    \            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // split\
    \ on space, comma, newline, return, tab\n    let words = s.components(separatedBy:\
    \ CharacterSet.init(charactersIn: \",;\\n\\r\\t\"))\n    return words\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmppfjpuuxy.swift:11:43: error: cannot find 'CharacterSet' in scope\n\
    \    let words = s.components(separatedBy: CharacterSet.init(charactersIn: \"\
    ,;\\n\\r\\t\"))\n                                          ^~~~~~~~~~~~\n/tmp/tmppfjpuuxy.swift:11:19:\
    \ error: value of type 'String' has no member 'components'\n    let words = s.components(separatedBy:\
    \ CharacterSet.init(charactersIn: \",;\\n\\r\\t\"))\n                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.components(separatedBy: \" \")\n    return words.map{ $0.components(separatedBy:\
    \ \",\").map(String.init)}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7_ijpplt.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\tlet a = s.components(separatedBy:\
    \ \" \")\n\tvar a2 = Array(a!)\n\tvar a3 = Array()\n\tfor var i = 0; i < a.count;\
    \ i++ {\n\t\ta3.append(a2[i])\n\t}\n\treturn a3\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv6_kak8d.swift:13:2: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 0; i < a.count; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpv6_kak8d.swift:10:12: error: value of type 'String' has no member 'components'\n\
    \        let a = s.components(separatedBy: \" \")\n                ~ ^~~~~~~~~~\n\
    /tmp/tmpv6_kak8d.swift:12:11: error: generic parameter 'Element' could not be\
    \ inferred\n        var a3 = Array()\n                 ^\n/tmp/tmpv6_kak8d.swift:12:11:\
    \ note: explicitly specify the generic arguments to fix this issue\n        var\
    \ a3 = Array()\n                 ^\n                      <Any>\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn strings.Split(s,\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmplvivk31s.swift:10:9: error: cannot find 'strings' in scope\n  \
    \      return strings.Split(s, \",\")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let arr\
    \ = s.components(separatedBy: \", \")\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuomokjvp.swift:10:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \", \")\n            \
    \  ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    words =\
    \ s.components(separatedBy: \",\")\n    return words\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb0l1ggl3.swift:10:5: error: cannot find 'words' in scope\n    words\
    \ = s.components(separatedBy: \",\")\n    ^~~~~\n/tmp/tmpb0l1ggl3.swift:10:15:\
    \ error: value of type 'String' has no member 'components'\n    words = s.components(separatedBy:\
    \ \",\")\n            ~ ^~~~~~~~~~\n/tmp/tmpb0l1ggl3.swift:11:12: error: cannot\
    \ find 'words' in scope\n    return words\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.componentsSeparatedByString(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpagvavrrk.swift:10:14: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    return s.componentsSeparatedByString(\" \"\
    )\n           ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n    var splits: String = \"\"\n    for char in s {\n        splits\
    \ += char + \",\"\n        if char == ',' {\n            splits += \"\\\\s\"\n\
    \        }\n    }\n    splits += \"\\\\s\"\n    \n    let regex = try! NSRegularExpression(pattern:\
    \ \"^\" + splits, options: [])\n    for match in regex.matchesInString(s, options:\
    \ [], range: NSRange(location: 0, length: s.characters.count)) {\n        words.append(s[Range(match.range,\
    \ in: s)!])\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp89wxepfx.swift:14:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == ',' {\n                   ^~~\n               \
    \    \",\"\n/tmp/tmp89wxepfx.swift:13:19: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n        splits += char + \"\
    ,\"\n                  ^\n/tmp/tmp89wxepfx.swift:20:22: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let regex = try! NSRegularExpression(pattern: \"^\" + splits,\
    \ options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp89wxepfx.swift:21:63:\
    \ error: cannot find 'NSRange' in scope\n    for match in regex.matchesInString(s,\
    \ options: [], range: NSRange(location: 0, length: s.characters.count)) {\n  \
    \                                                            ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return strings.FieldsFunc(s,\
    \ func(s string) bool { return s != \"\" && s != \"\\n\" })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmputtm_dls.swift:10:34: error: expected expression in list of expressions\n\
    \    return strings.FieldsFunc(s, func(s string) bool { return s != \"\" && s\
    \ != \"\\n\" })\n                                 ^\n/tmp/tmputtm_dls.swift:10:38:\
    \ error: expected identifier in function declaration\n    return strings.FieldsFunc(s,\
    \ func(s string) bool { return s != \"\" && s != \"\\n\" })\n                \
    \                     ^\n/tmp/tmputtm_dls.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.FieldsFunc(s, func(s string) bool { return s !=\
    \ \"\" && s != \"\\n\" })\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separators:\
    \ \",\\\\s*\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp26beu4zo.swift:10:19: error: incorrect argument label in call (have\
    \ 'separators:', expected 'separator:')\n    return s.split(separators: \",\\\\\
    s*\")\n                  ^~~~~~~~~~~\n                   separator\n/tmp/tmp26beu4zo.swift:10:14:\
    \ error: cannot convert return expression of type '[String.SubSequence]' (aka\
    \ 'Array<Substring>') to return type '[String]'\n    return s.split(separators:\
    \ \",\\\\s*\")\n             ^\n/tmp/tmp26beu4zo.swift:10:14: note: arguments\
    \ to generic parameter 'Element' ('String.SubSequence' (aka 'Substring') and 'String')\
    \ are expected to be equal\n    return s.split(separators: \",\\\\s*\")\n    \
    \         ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn s.split(\"\
    , \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp58mjf8c9.swift:10:17: error: missing argument label 'separator:'\
    \ in call\n        return s.split(\", \")\n                       ^\n        \
    \               separator: \n/tmp/tmp58mjf8c9.swift:10:11: error: cannot convert\
    \ return expression of type '[String.SubSequence]' (aka 'Array<Substring>') to\
    \ return type '[String]'\n        return s.split(\", \")\n                 ^\n\
    /tmp/tmp58mjf8c9.swift:10:11: note: arguments to generic parameter 'Element' ('String.SubSequence'\
    \ (aka 'Substring') and 'String') are expected to be equal\n        return s.split(\"\
    , \")\n                 ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = [String]()\n    for c in s.unicodeScalars.reversed() {\n        let word =\
    \ [String]()\n        if c.isPlus || c.isComma {\n            words.append(String(c.scalar))\n\
    \        } else {\n            word.extend(words_string(string(s: c)))\n     \
    \   }\n        words = word.reversed()\n    }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyxcstnrv.swift:13:14: error: value of type 'Unicode.Scalar' has\
    \ no member 'isPlus'\n        if c.isPlus || c.isComma {\n           ~ ^~~~~~\n\
    /tmp/tmpyxcstnrv.swift:13:26: error: value of type 'Unicode.Scalar' has no member\
    \ 'isComma'\n        if c.isPlus || c.isComma {\n                       ~ ^~~~~~~\n\
    /tmp/tmpyxcstnrv.swift:14:35: error: value of type 'Unicode.Scalar' has no member\
    \ 'scalar'\n            words.append(String(c.scalar))\n                     \
    \           ~ ^~~~~~\n/tmp/tmpyxcstnrv.swift:16:38: error: cannot find 'string'\
    \ in scope\n            word.extend(words_string(string(s: c)))\n            \
    \                         ^~~~~~\n/tmp/tmpyxcstnrv.swift:16:18: error: value of\
    \ type '[String]' has no member 'extend'\n            word.extend(words_string(string(s:\
    \ c)))\n            ~~~~ ^~~~~~\n/tmp/tmpyxcstnrv.swift:16:38: error: missing\
    \ argument label 's:' in call\n            word.extend(words_string(string(s:\
    \ c)))\n                                     ^\n                             \
    \        s: \n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.components(separatedBy:\
    \ \",\", excludeExtras: true).map {\n    String($0)\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj0pniw2m.swift:10:12: error: value of type 'String' has no member\
    \ 'components'\n  return s.components(separatedBy: \",\", excludeExtras: true).map\
    \ {\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \").filter({ return !$0.isEmpty })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp02ni7b52.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \").filter({ return !$0.isEmpty\
    \ })\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = s.split(separators: \",\", omittingEmptySubsequences: false)\n    if let lastWord\
    \ = words.last {\n        words.append(lastWord)\n    }\n    return words\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9l92s6uh.swift:10:19: error: no exact matches in call to instance\
    \ method 'split'\n    var words = s.split(separators: \",\", omittingEmptySubsequences:\
    \ false)\n                  ^\nSwift.Sequence:2:40: note: incorrect labels for\
    \ candidate (have: '(separators:omittingEmptySubsequences:)', expected: '(separator:omittingEmptySubsequences:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(separators:omittingEmptySubsequences:)', expected:\
    \ '(separator:omittingEmptySubsequences:)')\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \" \"))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp3ihdrnw.swift:10:38: error: cannot find 'CharacterSet' in scope\n\
    \    return s.components(separatedBy: CharacterSet(charactersIn: \" \"))\n   \
    \                                  ^~~~~~~~~~~~\n/tmp/tmpp3ihdrnw.swift:10:14:\
    \ error: value of type 'String' has no member 'components'\n    return s.components(separatedBy:\
    \ CharacterSet(charactersIn: \" \"))\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\tvar a = s.componentsSeparatedByString(\"\
    \ \")\n\tvar b = [String]()\n\tfor var i = 0; i < a.count; i++ {\n\t\tif a.count\
    \ < i {\n\t\t\tbreak\n\t\t}\n\t\tlet a = a[i].componentsSeparatedByString(\",\"\
    )\n\t\tfor i in 0..<a.count {\n\t\t\tb.append(a[i])\n\t\t}\n\t}\n\treturn b\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmprgixq2ep.swift:12:2: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 0; i < a.count; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmprgixq2ep.swift:10:12: error: value of type 'String' has no member 'componentsSeparatedByString'\n\
    \        var a = s.componentsSeparatedByString(\" \")\n                ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    if s ==\
    \ \"\" {\n        return []\n    }\n    let strings = s.components(separatedBy:\
    \ \",\")\n    let words1 = strings.flatMap { $0.components(separatedBy: \" \"\
    ) }\n    let words2 = words1.flatMap { $0.components(separatedBy: \" \") }\n \
    \   return words2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgsdr7dt3.swift:13:21: error: value of type 'String' has no member\
    \ 'components'\n    let strings = s.components(separatedBy: \",\")\n         \
    \         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn strings.Split(s,\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuhp_huhy.swift:10:9: error: cannot find 'strings' in scope\n  \
    \      return strings.Split(s, \", \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words:\
    \ [String]\n\n    switch s.count {\n    case 0:\n        words = []\n    case\
    \ 1:\n        words = [s.split(separator: \",\")]\n    case 2:\n        words\
    \ = [s.split(separator: \",\")] + [\"and\"]\n    case 3:\n        words = [s.split(separator:\
    \ \",\")] + [\"and\", s.split(separator: \" \")[s.split(separator: \",\").count\
    \ - 1]]\n    default:\n        let sep = s.substring(from: s.index(s.endIndex,\
    \ offsetBy: 1))\n        words = [s.split(separator: sep)] + [s.split(separator:\
    \ \" \")[s.split(separator: \",\").count - 1], \"and\", s.split(separator: sep)[s.split(separator:\
    \ \",\").count - 1]]\n    }\n\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmps1q12fgz.swift:16:20: error: cannot convert value of type '[String.SubSequence]'\
    \ (aka 'Array<Substring>') to expected element type 'String'\n        words =\
    \ [s.split(separator: \",\")]\n                   ^\n/tmp/tmps1q12fgz.swift:18:20:\
    \ error: cannot convert value of type '[String.SubSequence]' (aka 'Array<Substring>')\
    \ to expected element type 'String'\n        words = [s.split(separator: \",\"\
    )] + [\"and\"]\n                   ^\n/tmp/tmps1q12fgz.swift:20:20: error: cannot\
    \ convert value of type '[String.SubSequence]' (aka 'Array<Substring>') to expected\
    \ element type 'String'\n        words = [s.split(separator: \",\")] + [\"and\"\
    , s.split(separator: \" \")[s.split(separator: \",\").count - 1]]\n          \
    \         ^\n/tmp/tmps1q12fgz.swift:20:76: error: cannot convert value of type\
    \ 'String.SubSequence' (aka 'Substring') to expected element type 'String'\n \
    \       words = [s.split(separator: \",\")] + [\"and\", s.split(separator: \"\
    \ \")[s.split(separator: \",\").count - 1]]\n                                \
    \                                           ^\n                              \
    \                      String(                                               \
    \    )\n/tmp/tmps1q12fgz.swift:22:21: error: value of type 'String' has no member\
    \ 'substring'\n        let sep = s.substring(from: s.index(s.endIndex, offsetBy:\
    \ 1))\n                  ~ ^~~~~~~~~\n/tmp/tmps1q12fgz.swift:23:20: error: cannot\
    \ convert value of type '[String.SubSequence]' (aka 'Array<Substring>') to expected\
    \ element type 'String'\n        words = [s.split(separator: sep)] + [s.split(separator:\
    \ \" \")[s.split(separator: \",\").count - 1], \"and\", s.split(separator: sep)[s.split(separator:\
    \ \",\").count - 1]]\n                   ^\n/tmp/tmps1q12fgz.swift:23:45: error:\
    \ cannot convert value of type '[Any]' to expected argument type '[String]'\n\
    \        words = [s.split(separator: sep)] + [s.split(separator: \" \")[s.split(separator:\
    \ \",\").count - 1], \"and\", s.split(separator: sep)[s.split(separator: \",\"\
    ).count - 1]]\n                                            ^\n/tmp/tmps1q12fgz.swift:23:45:\
    \ note: arg"
  stdout: ''
  timestamp: 1660013225
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.componentsSeparatedByString(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnl__vb5h.swift:10:12: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n  return s.componentsSeparatedByString(\" \"\
    )\n         ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let chars\
    \ = s.characters()\n    var words = Array<String>()\n\n    for char in chars {\n\
    \        let word = String(char)\n        if word != \",\" && word != \" \" {\n\
    \            words.append(word)\n        }\n    }\n\n    return words\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpekjhnfxi.swift:10:19: error: cannot call value of non-function\
    \ type 'String'\n    let chars = s.characters()\n                  ^         ~~\n\
    \                            \n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    guard let\
    \ str = s.split(separator: \",\", maxSplits: -1) else { return [\"\"] }\n    return\
    \ str.map { $0.trimmingCharacters(in: .whitespacesAndNewlines) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2z6xjyq5.swift:10:11: error: initializer for conditional binding\
    \ must have Optional type, not '[String.SubSequence]' (aka 'Array<Substring>')\n\
    \    guard let str = s.split(separator: \",\", maxSplits: -1) else { return [\"\
    \"] }\n          ^         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2z6xjyq5.swift:11:25:\
    \ error: value of type 'String.SubSequence' (aka 'Substring') has no member 'trimmingCharacters'\n\
    \    return str.map { $0.trimmingCharacters(in: .whitespacesAndNewlines) }\n \
    \                    ~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp2z6xjyq5.swift:11:49: error:\
    \ cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    return str.map { $0.trimmingCharacters(in: .whitespacesAndNewlines) }\n \
    \                                              ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \").flatMap { str -> [String] in\n        return str.components(separatedBy:\
    \ \" \")\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpphaf8vn6.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \").flatMap { str ->\
    \ [String] in\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n    s.characters.split(separator: \",\", omittingEmptySubsequences:\
    \ false).forEach {\n        words.append(String($0))\n    }\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg1m00hbt.swift:11:7: error: 'characters' is unavailable: Please\
    \ use String directly\n    s.characters.split(separator: \",\", omittingEmptySubsequences:\
    \ false).forEach {\n      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = [String]()\n    s = s.trimmingCharacters(in: CharacterSet.whitespaces)\n \
    \   var i = 0\n    var j = s.startIndex\n\n    while i < s.endIndex {\n      \
    \  var k = j\n        if s[i] == ',' || s[i] == ' ' {\n            j = s.index(after:\
    \ j)\n            words.append(String(s[j...]))\n            i = k\n        }\
    \ else {\n            j = s.index(after: j)\n        }\n    }\n    words.append(String(j...))\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpexdul5a5.swift:17:20: error: single-quoted string literal found,\
    \ use '\"'\n        if s[i] == ',' || s[i] == ' ' {\n                   ^~~\n\
    \                   \",\"\n/tmp/tmpexdul5a5.swift:17:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == ',' || s[i] == ' ' {\n  \
    \                                ^~~\n                                  \" \"\n\
    /tmp/tmpexdul5a5.swift:11:34: error: cannot find 'CharacterSet' in scope\n   \
    \ s = s.trimmingCharacters(in: CharacterSet.whitespaces)\n                   \
    \              ^~~~~~~~~~~~\n/tmp/tmpexdul5a5.swift:11:5: error: cannot assign\
    \ to value: 's' is a 'let' constant\n    s = s.trimmingCharacters(in: CharacterSet.whitespaces)\n\
    \    ^\n/tmp/tmpexdul5a5.swift:11:11: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    s = s.trimmingCharacters(in: CharacterSet.whitespaces)\n\
    \        ~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpexdul5a5.swift:15:13: error: operator function\
    \ '<' requires that 'String.Index' conform to 'BinaryInteger'\n    while i < s.endIndex\
    \ {\n            ^\nSwift.BinaryInteger:4:24: note: where 'Other' = 'String.Index'\n\
    \    public static func < <Other>(lhs: Self, rhs: Other) -> Bool where Other :\
    \ BinaryInteger\n                       ^\n/tmp/tmpexdul5a5.swift:17:12: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if s[i] == ',' || s[i] == ' ' {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpexdul5a5.swift:17:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == ',' || s[i] == ' ' {\n     \
    \                     ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpexdul5a5.swift:20:17: error: cannot assign value\
    \ of type 'String.Index' to type 'Int'\n            i = k\n                ^\n\
    /tmp/tmpexdul5a5."
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = [String]()\n    var words = s.components(separatedBy: \",\")\n    for word\
    \ in words {\n        let words = word.components(separatedBy: \" \")\n      \
    \  words = words.joined(separator: \" \")\n        words.append(\" \")\n     \
    \   words = words.joined(separator: \" \")\n        words.append(\" \")\n    \
    \    words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        words.append(\"\
    \ \")\n        words.append(\" \")\n        words.append(\" \")\n        word\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpccgr8me6.swift:128:67: error: expected '}' at end of brace statement\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\n   \
    \                                                               ^\n/tmp/tmpccgr8me6.swift:9:42:\
    \ note: to match this opening '{'\nfunc words_string(s: String) -> [String] {\n\
    \                                         ^\n/tmp/tmpccgr8me6.swift:11:19: error:\
    \ value of type 'String' has no member 'components'\n    var words = s.components(separatedBy:\
    \ \",\")\n                ~ ^~~~~~~~~~\n/tmp/tmpccgr8me6.swift:111:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // Split\
    \ each string separated by a comma or a space.\n    return split(s, \", \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8zyohr8b.swift:11:12: error: cannot find 'split' in scope\n   \
    \ return split(s, \", \")\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // Good\
    \ luck!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: '/tmp/tmpcotix61c.swift:11:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n    if s == \"\" {\n        return words\n    }\n    let items\
    \ = s.componentsSeparatedByString(\" \")\n    for item in items {\n        words.append(item)\n\
    \    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdnl4e6hd.swift:14:19: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let items = s.componentsSeparatedByString(\"\
    \ \")\n                ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\tlet splitter\
    \ = CharacterSet.whitespacesAndNewlines\n\tlet delimiter = \",\"\n\tlet components\
    \ = s.components(separatedBy: splitter)\n\tlet delimiters = components.map({ String(describing:\
    \ $0) })\n\treturn delimiters.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9bl6ri6a.swift:10:17: error: cannot find 'CharacterSet' in scope\n\
    \        let splitter = CharacterSet.whitespacesAndNewlines\n                \
    \       ^~~~~~~~~~~~\n/tmp/tmp9bl6ri6a.swift:12:21: error: value of type 'String'\
    \ has no member 'components'\n        let components = s.components(separatedBy:\
    \ splitter)\n                         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.componentsSeparatedByString(\" \")\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp209jut8k.swift:10:19: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = s.componentsSeparatedByString(\"\
    \ \")\n                ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.characters.split(\"\
    , \").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsrprao8z.swift:10:31: error: missing argument label 'separator:'\
    \ in call\n    return s.characters.split(\", \").map(String.init)\n          \
    \                    ^\n                              separator: \n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // TODO:\
    \ Modify the code below to return a list of strings. Use split\n    // string\
    \ method to convert comma separated string to an array of strings.\n    // If\
    \ your solution uses map function, then modify it to use map function.\n    let\
    \ words = s.components(separatedBy: \",\")\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi1auovns.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \",\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn s.tokenize(\"\
    , \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmprvgae_h9.swift:10:11: error: value of type 'String' has no member\
    \ 'tokenize'\n        return s.tokenize(\", \")\n               ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.characters.split\
    \ { $0 == \",\" || $0 == \" \" }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp09jq9hta.swift:10:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.split { $0 == \",\" || $0 == \"\
    \ \" }.map { String($0) }\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    \n    return\
    \ s.componentsSeparatedByString(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2snmc5tk.swift:11:14: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    return s.componentsSeparatedByString(\" \"\
    )\n           ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\".unicodeScalars).flatMap(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjlh8peba.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\".unicodeScalars).flatMap(String.init)\n\
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn strings.Split(s,\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuhp_huhy.swift:10:9: error: cannot find 'strings' in scope\n  \
    \      return strings.Split(s, \", \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\").map { $0.trimmingCharacters(in: .whitespacesAndNewlines) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk531av8g.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\").map { $0.trimmingCharacters(in:\
    \ .whitespacesAndNewlines) }\n           ~ ^~~~~~~~~~\n/tmp/tmpk531av8g.swift:10:76:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    return s.components(separatedBy: \",\").map { $0.trimmingCharacters(in: .whitespacesAndNewlines)\
    \ }\n                                                                        \
    \  ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.componentsSeparatedByString(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpagvavrrk.swift:10:14: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    return s.componentsSeparatedByString(\" \"\
    )\n           ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9c3whdch.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013118
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\tlet words:\
    \ [String] = s.components(separatedBy: CharacterSet.whitespacesAndNewlines)\n\t\
    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvv759ixk.swift:10:50: error: cannot find 'CharacterSet' in scope\n\
    \        let words: [String] = s.components(separatedBy: CharacterSet.whitespacesAndNewlines)\n\
    \                                                        ^~~~~~~~~~~~\n/tmp/tmpvv759ixk.swift:10:26:\
    \ error: value of type 'String' has no member 'components'\n        let words:\
    \ [String] = s.components(separatedBy: CharacterSet.whitespacesAndNewlines)\n\
    \                              ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\".unicodeScalars)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr3sq0qcy.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\".unicodeScalars)\n \
    \          ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ CharacterSet.whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz95nblkm.swift:10:38: error: cannot find 'CharacterSet' in scope\n\
    \    return s.components(separatedBy: CharacterSet.whitespaces)\n            \
    \                         ^~~~~~~~~~~~\n/tmp/tmpz95nblkm.swift:10:14: error: value\
    \ of type 'String' has no member 'components'\n    return s.components(separatedBy:\
    \ CharacterSet.whitespaces)\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    guard let\
    \ inputString = s.data(using: .utf8) else { return [] }\n    let words = inputString.components(separatedBy:\
    \ CharacterSet.whitespacesAndNewlines)\n    return words.map(String.init)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmplojgwqly.swift:10:31: error: value of type 'String' has no member\
    \ 'data'\n    guard let inputString = s.data(using: .utf8) else { return [] }\n\
    \                            ~ ^~~~\n/tmp/tmplojgwqly.swift:10:44: error: cannot\
    \ infer contextual base in reference to member 'utf8'\n    guard let inputString\
    \ = s.data(using: .utf8) else { return [] }\n                                \
    \          ~^~~~\n/tmp/tmplojgwqly.swift:11:53: error: cannot find 'CharacterSet'\
    \ in scope\n    let words = inputString.components(separatedBy: CharacterSet.whitespacesAndNewlines)\n\
    \                                                    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn split(s,\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmcbj9y1x.swift:10:9: error: cannot find 'split' in scope\n    \
    \    return split(s, \",\")\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    guard !s.isEmpty\
    \ else { return [] }\n    var words = s.characters\n    var newWords = [String]()\n\
    \    var lastWord: String = \"\"\n    var word: String = String()\n    var nextWord:\
    \ String = \"\"\n    var startIndex = 0\n    while startIndex < words.count {\n\
    \        word = String(words[startIndex])\n        if lastWord.isEmpty {\n   \
    \         newWords.append(word)\n            startIndex += 1\n        } else {\n\
    \            if lastWord != word {\n                newWords.append(lastWord)\n\
    \                lastWord = word\n            }\n            nextWord = String(words[startIndex])\n\
    \            newWords.append(nextWord)\n            startIndex += 1\n        }\n\
    \    }\n    if lastWord.isEmpty {\n        newWords.append(String(words[startIndex]))\n\
    \    }\n    return newWords\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3w4aak9t.swift:11:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    var words = s.characters\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp3w4aak9t.swift:18:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        word = String(words[startIndex])\n    \
    \                  ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp3w4aak9t.swift:27:31: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            nextWord = String(words[startIndex])\n                          \
    \    ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmp3w4aak9t.swift:33:32: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        newWords.append(String(words[startIndex]))\n\
    \                               ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp3w4aak9t.swift:11:9: warning: variable\
    \ 'words' was never mutated; consider changing to 'let' constant\n    var words\
    \ = s.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    words =\
    \ split(s, \",\", false)\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd2wy8_j4.swift:10:5: error: cannot find 'words' in scope\n    words\
    \ = split(s, \",\", false)\n    ^~~~~\n/tmp/tmpd2wy8_j4.swift:10:13: error: cannot\
    \ find 'split' in scope\n    words = split(s, \",\", false)\n            ^~~~~\n\
    /tmp/tmpd2wy8_j4.swift:11:12: error: cannot find 'words' in scope\n    return\
    \ words\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let wordRanges:\
    \ [Range<String.Index>] = s.characters.enumerate().map({ (index, char) -> Range<String.Index>\
    \ in\n        let index = index(of: char, in: s)!\n        return index..<index\n\
    \    })\n    let words = compactMap(wordRanges, { s[$0] })\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpevf70fd4.swift:10:58: error: value of type 'String' has no member\
    \ 'enumerate'\n    let wordRanges: [Range<String.Index>] = s.characters.enumerate().map({\
    \ (index, char) -> Range<String.Index> in\n                                  \
    \          ~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpevf70fd4.swift:14:17: error: cannot\
    \ find 'compactMap' in scope\n    let words = compactMap(wordRanges, { s[$0] })\n\
    \                ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let words\
    \ = s.components(separatedBy: CharacterSet.whitespacesAndNewlines)\n        .filter({!$0.isWhitespace\
    \ && $0 != \",\"})\n        .filter({!$0.isWhitespace && $0 != \"\\n\"})\n   \
    \     .map({$0.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)})\n\
    \    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0zs017s9.swift:10:43: error: cannot find 'CharacterSet' in scope\n\
    \    let words = s.components(separatedBy: CharacterSet.whitespacesAndNewlines)\n\
    \                                          ^~~~~~~~~~~~\n/tmp/tmp0zs017s9.swift:13:41:\
    \ error: cannot find 'CharacterSet' in scope\n        .map({$0.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)})\n                                   \
    \     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // Split\
    \ on the string '|', and remove the empty string at the end.\n    return s.components(separatedBy:\
    \ \"|\").dropLast()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjl6x_fl2.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \"|\").dropLast()\n     \
    \      ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    \n    //\
    \ BEGIN PT-SOURCE: words_string\n    // Create a regular expression that matches\
    \ an optional trailing period.\n    // It matches zero or one periods in the string.\n\
    \    \n    let trailing_period_regex = \"\\\\.?\"\n    \n    // Create a regular\
    \ expression that matches a sequence of non-white-space characters that\n    //\
    \ optionally contains a period.\n    // It matches zero or more characters that\
    \ optionally contain a period.\n    \n    let optionalPeriodRegex = \"[^\\\\s\\\
    \\.]+\"\n    \n    // Create a regular expression that matches any sequence of\
    \ non-white-space characters\n    // that optionally begins with an uppercase\
    \ letter and continues with zero or more\n    // non-white-space characters that\
    \ optionally contains a period.\n    \n    let optionalUppercaseLetterRegex =\
    \ \"[A-Z]+[^\\\\s\\\\.]+\"\n    \n    // Create a regular expression that matches\
    \ any sequence of non-white-space characters that\n    // optionally begins with\
    \ an uppercase letter and continues with zero or more\n    // non-white-space\
    \ characters that optionally contains a period, comma, question mark,\n    //\
    \ exclamation point, or underscore.\n    \n    let optionalUppercaseLetterWithPeriodRegex\
    \ = \"[A-Z]+[^\\\\s\\\\.,?_]+\"\n    \n    // The string \"\\\\W\" matches a non-word\
    \ character.\n    // It matches any character that is not a-z, A-Z, 0-9, or a\
    \ period.\n    // If this regular expression matches a character in the string,\
    \ the next expression will\n    // match that same character, and so on.\n   \
    \ \n    let nonWordRegex = \"\\\\W+\"\n    \n    // The string \"\\\\w+\" matches\
    \ a word character\n    // It matches any character that is a letter, digit, underscore,\
    \ or period.\n    \n    let wordRegex = \"\\\\w+\"\n    \n    // Create an array\
    \ of words from a string separated by commas or spaces.\n    // It matches any\
    \ sequence of characters separated by a comma or space\n    // that begins with\
    \ an uppercase letter and continues with zero or more characters\n    // that\
    \ optionally contains a period.\n    \n    let wordArray = s.components(separatedBy:\
    \ \",?\\\\s*\")\n    \n    // Remove all periods from each word in the array.\n\
    \    // It removes periods from the beginning and end of a word.\n    \n    for\
    \ word in wordArray {\n        word.replaceOccurrences(of: \"\\\\.\", with: \"\
    \", options: .regularExpression, range: nil)\n    }\n    \n    // Split each word\
    \ in the array into an array of non-whitespace, non-period, non-letter\n    //\
    \ characters that does not include the period, comma, exclamation point, or underscore.\n\
    \    \n    let wordArrayWithoutPeriods = wordArray.map { (word: String\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp79q50mx4.swift:66:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp79q50mx4.swift:65:51: note: to match this opening '('\n    let wordArrayWithoutPeriods\
    \ = wordArray.map { (word: String\n                                          \
    \        ^\n/tmp/tmp79q50mx4.swift:86:67: error: expected '}' at end of brace\
    \ statement\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"\
    ])\n                                                                  ^\n/tmp/tmp79q50mx4.swift:9:42:\
    \ note: to match this opening '{'\nfunc words_string(s: String) -> [String] {\n\
    \                                         ^\n/tmp/tmp79q50mx4.swift:53:23: error:\
    \ value of type 'String' has no member 'components'\n    let wordArray = s.components(separatedBy:\
    \ \",?\\\\s*\")\n                    ~ ^~~~~~~~~~\n/tmp/tmp79q50mx4.swift:65:52:\
    \ error: cannot create a single-element tuple with an element label\n    let wordArrayWithoutPeriods\
    \ = wordArray.map { (word: String\n                                          \
    \         ^~~~~~\n                                                   \n/tmp/tmp79q50mx4.swift:65:52:\
    \ error: cannot create a single-element tuple with an element label\n    let wordArrayWithoutPeriods\
    \ = wordArray.map { (word: String\n                                          \
    \         ^~~~~~\n                                                   \n/tmp/tmp79q50mx4.swift:69:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = s.componentsSeparatedByString(\" \")\n    words = [String](words.map { $0.stringByTrimmingCharactersInSet(.whitespaceCharacters)\
    \ })\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc5ittqzf.swift:10:19: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    var words = s.componentsSeparatedByString(\"\
    \ \")\n                ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc5ittqzf.swift:11:70:\
    \ error: cannot infer contextual base in reference to member 'whitespaceCharacters'\n\
    \    words = [String](words.map { $0.stringByTrimmingCharactersInSet(.whitespaceCharacters)\
    \ })\n                                                                    ~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // your\
    \ code here\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: '/tmp/tmpfnug9q8n.swift:11:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let mut\
    \ words = s.characters.split(separator: \",\").map(String::init)\n    let mut\
    \ words = words.filter(!{\n        !$0.isBlank\n    })\n    words = words.filter(!{\n\
    \        !$0.isWhitespace\n    })\n    words.reserveCapacity(words.count)\n  \
    \  return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmph2jq9a4b.swift:10:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut words =\
    \ s.characters.split(separator: \",\").map(String::init)\n            ^\n/tmp/tmph2jq9a4b.swift:10:13:\
    \ note: join the identifiers together\n    let mut words = s.characters.split(separator:\
    \ \",\").map(String::init)\n        ~~~~^~~~~\n        mutwords\n/tmp/tmph2jq9a4b.swift:10:13:\
    \ note: join the identifiers together with camel-case\n    let mut words = s.characters.split(separator:\
    \ \",\").map(String::init)\n        ~~~~^~~~~\n        mutWords\n/tmp/tmph2jq9a4b.swift:10:67:\
    \ error: expected expression in list of expressions\n    let mut words = s.characters.split(separator:\
    \ \",\").map(String::init)\n                                                 \
    \                 ^\n/tmp/tmph2jq9a4b.swift:10:68: error: consecutive statements\
    \ on a line must be separated by ';'\n    let mut words = s.characters.split(separator:\
    \ \",\").map(String::init)\n                                                 \
    \                  ^\n                                                       \
    \            ;\n/tmp/tmph2jq9a4b.swift:10:72: error: initializers may only be\
    \ declared within a type\n    let mut words = s.characters.split(separator: \"\
    ,\").map(String::init)\n                                                     \
    \                  ^\n/tmp/tmph2jq9a4b.swift:10:72: error: expected '(' for initializer\
    \ parameters\n    let mut words = s.characters.split(separator: \",\").map(String::init)\n\
    \                                                                       ^\n/tmp/tmph2jq9a4b.swift:11:13:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n    let mut words = words.filter(!{\n            ^\n/tmp/tmph2jq9a4b.swift:11:13:\
    \ note: join the identifiers together\n    let mut words = words.filter(!{\n \
    \       ~~~~^~~~~\n        mutwords\n/tmp/tmph2jq9a4b.swift:11:13: note: join\
    \ the identifiers together with camel-case\n    let mut words = words.filter(!{\n\
    \        ~~~~^~~~~\n        mutWords\n/tmp/tmph2jq9a4b"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // BEGIN\
    \ Practice:\n    // Split words by space, then by comma.\n    let arr = [s.components(separatedBy:\
    \ \" \"), s.components(separatedBy: \", \")]\n    return arr\n    // END Practice\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmppw9_qgn7.swift:12:18: error: value of type 'String' has no member\
    \ 'components'\n    let arr = [s.components(separatedBy: \" \"), s.components(separatedBy:\
    \ \", \")]\n               ~ ^~~~~~~~~~\n/tmp/tmppw9_qgn7.swift:12:50: error:\
    \ value of type 'String' has no member 'components'\n    let arr = [s.components(separatedBy:\
    \ \" \"), s.components(separatedBy: \", \")]\n                               \
    \                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\tvar arr: [String]\
    \ = []\n\tfor word in s.split(separator: \" \") {\n\t\tarr.append(word)\n\t}\n\
    \treturn arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmdzg7j8l.swift:12:7: error: no exact matches in call to instance\
    \ method 'append'\n                arr.append(word)\n                    ^\nSwift.Array:6:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'String.SubSequence'\
    \ (aka 'Substring'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'String.SubSequence'\
    \ (aka 'Substring'))\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Self.Element)\n                                    ^\n/tmp/tmpmdzg7j8l.swift:12:7:\
    \ note: found candidate with type '(__owned String.SubSequence) -> ()' (aka '(__owned\
    \ Substring) -> ()')\n                arr.append(word)\n                    ^\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    if s ==\
    \ \"\" {\n        return []\n    }\n    var words = s.characters\n    var result\
    \ = [String]()\n    var lastWord = \"\"\n    var lastWordIndex = -1\n    for index\
    \ in 0..<s.characters.count {\n        let char = s[index] // Take a character\
    \ in the string s\n        if char == \",\" || char == \" \" {\n            words.append(lastWord)\n\
    \            result.append(lastWord)\n            lastWord = \"\"\n          \
    \  lastWordIndex = index\n        } else if char == \".\" || char == \"!\" ||\
    \ char == \"?\" {\n            words.append(lastWord)\n            lastWord =\
    \ \"\"\n            lastWordIndex = index\n        } else {\n            lastWord\
    \ += String(char)\n        }\n    }\n    words.append(lastWord)\n    result.append(lastWord)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmplb4ilagb.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    var words = s.characters\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmplb4ilagb.swift:17:24:\
    \ error: 'characters' is unavailable: Please use String directly\n    for index\
    \ in 0..<s.characters.count {\n                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmplb4ilagb.swift:18:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let char = s[index] // Take a character in the string s\n           \
    \        ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmplb4ilagb.swift:16:9: warning: variable 'lastWordIndex'\
    \ was written to, but never read\n    var lastWordIndex = -1\n        ^\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpibryqn2h.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\").map(String.init)\n\
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var splitStrings\
    \ = s\n    let delimiter = \", \"\n    var components: [String] = []\n    var\
    \ component = \"\"\n    var word = \"\"\n    var words = [:]\n\n    while splitStrings.characters.count\
    \ > 0 {\n        component = splitStrings.characters.prefix(delimiter)\n     \
    \   splitStrings = splitStrings.substring(component!.characters.count)\n\n   \
    \     if component.isEmpty {\n            words[component!] = word\n         \
    \   components.append(component!)\n            word = \"\"\n            continue\n\
    \        }\n\n        word += component! + \",\"\n    }\n\n    for component in\
    \ components {\n        if let value = words[component] {\n            words[component]\
    \ = nil\n            words[value] = nil\n        }\n    }\n\n    return components.flatMap\
    \ { $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpasp3ju69.swift:15:17: error: empty collection literal requires\
    \ an explicit type\n    var words = [:]\n                ^~~\n/tmp/tmpasp3ju69.swift:17:24:\
    \ error: 'characters' is unavailable: Please use String directly\n    while splitStrings.characters.count\
    \ > 0 {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpasp3ju69.swift:18:52: error: cannot convert value of\
    \ type 'String' to expected argument type 'Int'\n        component = splitStrings.characters.prefix(delimiter)\n\
    \                                                   ^\n/tmp/tmpasp3ju69.swift:18:45:\
    \ error: no 'prefix' candidates produce the expected contextual result type 'String'\n\
    \        component = splitStrings.characters.prefix(delimiter)\n             \
    \                               ^\nSwift.Sequence:7:40: note: 'prefix' produces\
    \ 'PrefixSequence<String>', not the expected contextual result type 'String'\n\
    \    @inlinable public __consuming func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n\
    \                                       ^\nSwift.Collection:6:40: note: 'prefix'\
    \ produces 'String.SubSequence' (aka 'Substring'), not the expected contextual\
    \ result type 'String'\n    @inlinable public __consuming func prefix(_ maxLength:\
    \ Int) -> Self.SubSequence\n                                       ^\n/tmp/tmpasp3ju69.swift:19:37:\
    \ error: value of type 'String' has no member 'substring'\n        splitStrings\
    \ = splitStrings.substring(component!.characters.count)\n                    \
    \   ~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpasp3ju69.swift:22:28: error: cannot force\
    \ unwrap value of non-optional type 'String'\n            words[component!] =\
    \ word\n                  ~~~~~~~~~^\n                           \n/tmp/tmpasp3ju69.swift:23:40:\
    \ error: cannot force unwrap value of non-optional type 'String'\n           \
    \ components.append(component!)\n                              ~~~~~~~~~^\n  \
    \                                     \n/tmp/tmpasp3ju69.swift:28:26: error: cannot\
    \ force unwrap"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    let split\
    \ = s.componentsSeparatedByString(\", \")\n    return split\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg5dia4j5.swift:10:19: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let split = s.componentsSeparatedByString(\"\
    , \")\n                ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = s.components(separatedBy: \",\")\n    return words.map(String.init)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpft68r122.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \",\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn s.componentsSeparatedByString(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaa9ge4ah.swift:10:11: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n        return s.componentsSeparatedByString(\"\
    \ \")\n               ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words\
    \ = s.componentsSeparatedByString(\" \")\n    words.removeFirst()\n    return\
    \ words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp383ao5px.swift:10:19: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    var words = s.componentsSeparatedByString(\"\
    \ \")\n                ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.split(separator:\
    \ \",\").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmpcquwjk_t/tmpcquwjk_t.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90ce43bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ce132b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90ce132988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90ce1317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcquwjk_t                        0x000055cf2640d81f <unavailable> + 6175

    5    libc.so.6                          0x00002b90ce627460 __libc_start_main +
    245

    6    tmpcquwjk_t                        0x000055cf2640d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // Split\
    \ on white space and comma\n    let wordsArray = s.components(separatedBy: \"\
    \ ,\").map { String($0) }\n    return wordsArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp211b6sah.swift:11:24: error: value of type 'String' has no member\
    \ 'components'\n    let wordsArray = s.components(separatedBy: \" ,\").map { String($0)\
    \ }\n                     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n  return s.characters.split(separator:\
    \ \",\", maxSplit: Int.max, omittingEmptySubsequences: false)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmplswuaadl.swift:10:23: error: no exact matches in call to instance\
    \ method 'split'\n  return s.characters.split(separator: \",\", maxSplit: Int.max,\
    \ omittingEmptySubsequences: false)\n                      ^\n/tmp/tmplswuaadl.swift:10:23:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]'\
    \ (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n  return s.characters.split(separator:\
    \ \",\", maxSplit: Int.max, omittingEmptySubsequences: false)\n              \
    \        ^\n/tmp/tmplswuaadl.swift:10:23: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \  return s.characters.split(separator: \",\", maxSplit: Int.max, omittingEmptySubsequences:\
    \ false)\n                      ^\n/tmp/tmplswuaadl.swift:10:23: error: no 'split'\
    \ candidates produce the expected contextual result type '[String]'\n  return\
    \ s.characters.split(separator: \",\", maxSplit: Int.max, omittingEmptySubsequences:\
    \ false)\n                      ^\nSwift.Sequence:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ produces '[ArraySlice<String.Element>]' (aka 'Array<ArraySlice<Character>>'),\
    \ not the expected contextual result type '[String]'\n    @inlinable public __consuming\
    \ func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: 'split(separator:maxSplits:omittingEmptySubsequences:)'\
    \ produces '[String.SubSequence]' (aka 'Array<Substring>'), not the expected contextual\
    \ result type '[String]'\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy:\
    \ \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf4rialds.swift:10:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \",\")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824784
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // Split\
    \ on commas.\n    let words = s.components(separatedBy: \",\")\n    return words\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4bre7l8t.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \",\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var result\
    \ = [String]()\n    for word in s.split(separators: \",\".unicodeScalars) {\n\
    \        result.insert(word, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl999bsz6.swift:11:19: error: no exact matches in call to instance\
    \ method 'split'\n    for word in s.split(separators: \",\".unicodeScalars) {\n\
    \                  ^\n/tmp/tmpl999bsz6.swift:11:19: note: found candidate with\
    \ type '(String.UnicodeScalarView, Int, Bool) -> [String.SubSequence]' (aka '(String.UnicodeScalarView,\
    \ Int, Bool) -> Array<Substring>')\n    for word in s.split(separators: \",\"\
    .unicodeScalars) {\n                  ^\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn split(s,\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf7k6e4sm.swift:10:9: error: cannot find 'split' in scope\n    \
    \    return split(s, \", \")\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\tlet words:\
    \ [String] = []\n\tlet word: String = \"\"\n\tlet words = s.characters.split{$0\
    \ == \",\"}\n\t\n\tfor w in words {\n\t\tword += w\n\t\tif w == \"\\n\" {\n\t\t\
    \twords.append(word)\n\t\t\tword = \"\"\n\t\t}\n\t}\n\t\n\twords.append(word)\n\
    \t\n\treturn words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_string(s: \"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmptron7edy.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n        let words = s.characters.split{$0 == \",\"}\n \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmptron7edy.swift:12:6: error: invalid redeclaration of 'words'\n  \
    \      let words = s.characters.split{$0 == \",\"}\n            ^\n/tmp/tmptron7edy.swift:10:6:\
    \ note: 'words' previously declared here\n        let words: [String] = []\n \
    \           ^\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return split(s.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five, six\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgjkovepv.swift:10:12: error: cannot find 'split' in scope\n   \
    \ return split(s.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines))\n\
    \           ^~~~~\n/tmp/tmpgjkovepv.swift:10:43: error: cannot find 'CharacterSet'\
    \ in scope\n    return split(s.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines))\n\
    \                                          ^~~~~~~~~~~~\n/tmp/tmpgjkovepv.swift:10:20:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ split(s.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines))\n     \
    \            ~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n    var current: String = \"\"\n    for letter in s {\n     \
    \   current = letter\n        if letter == \" \" {\n            words.append(current)\n\
    \            current = \"\"\n        }\n    }\n    if current != \"\" {\n    \
    \    words.append(current)\n    }\n    return words\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiqoszjyh.swift:13:19: error: cannot assign value of type 'Character'\
    \ to type 'String'\n        current = letter\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.componentsSeparatedByString(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(words_string(s: \"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s:\
    \ \"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"\
    my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four, five, six,\"\
    ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"\") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"\
    ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpagvavrrk.swift:10:14: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    return s.componentsSeparatedByString(\" \"\
    )\n           ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    guard let\
    \ wordArray = s.components(separatedBy: \",\") else {\n        return []\n   \
    \ }\n    return wordArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(words_string(s:\
    \ \"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\
    assert(words_string(s: \"One, two, three, four, five, six\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"Hi, my name\"\
    ) == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,, two, three, four,\
    \ five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    assert(words_string(s: \"\") == [] as [String])\nassert(words_string(s: \"ahmed\
    \     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0gq880ki.swift:10:29: error: value of type 'String' has no member\
    \ 'components'\n    guard let wordArray = s.components(separatedBy: \",\") else\
    \ {\n                          ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // Split\
    \ string s into words\n    return s.components(separatedBy: \", \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfjayrnzo.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \", \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n\treturn tokenize(stringToArray(s))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
    ])\nassert(words_string(s: \"One,, two, three, four, five, six,\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s: \"\
    \") == [] as [String])\nassert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpduimpfiz.swift:10:9: error: cannot find 'tokenize' in scope\n \
    \       return tokenize(stringToArray(s))\n               ^~~~~~~~\n/tmp/tmpduimpfiz.swift:10:18:\
    \ error: cannot find 'stringToArray' in scope\n        return tokenize(stringToArray(s))\n\
    \                        ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: -4
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words:\
    \ [String] = []\n    for word in s.split(separator: \",\").map(String.init) {\n\
    \        words.append(String(word))\n    }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\nassert(words_string(s: \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s:\
    \ \"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\n\
    assert(words_string(s: \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: Exception
  stderr: 'tmp1wydlamx/tmp1wydlamx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac2fc98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac2f98fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac2f98f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac2f98e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1wydlamx                        0x0000564152d13aaf <unavailable> + 6831

    5    libc.so.6                          0x00002aac2fe84460 __libc_start_main +
    245

    6    tmp1wydlamx                        0x0000564152d13619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "\n/// You will be given a string of words separated by commas or spaces.\
    \ Your task is\n/// to split the string into words and return an array of the\
    \ words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n\
    /// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One,\
    \ two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    // split\
    \ on comma and remove leading and trailing space\n    let words = s.componentsSeparatedByString(\"\
    , \").map { $0.trimmingCharacters(in: .whitespaces) }\n    // map to array of\
    \ strings\n    return words.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(words_string(s: \"Hi, my name is John\") == [\"Hi\", \"my\", \"\
    name\", \"is\", \"John\"])\nassert(words_string(s: \"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\nassert(words_string(s:\
    \ \"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\nassert(words_string(s: \"One,,\
    \ two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\nassert(words_string(s: \"\") == [] as [String])\nassert(words_string(s:\
    \ \"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqxl23htx.swift:11:19: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = s.componentsSeparatedByString(\"\
    , \").map { $0.trimmingCharacters(in: .whitespaces) }\n                ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqxl23htx.swift:11:86: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    let words = s.componentsSeparatedByString(\", \"\
    ).map { $0.trimmingCharacters(in: .whitespaces) }\n                          \
    \                                                          ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013224
