language: swift
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tsort.Sort(arr) // Sort\
    \ from low to high\n\tlet count = arr.count\n\tlet start = 1\n\tlet end = arr.count\
    \ - 1\n\tvar result = Array<String>(count: count, repeatedValue: \"\")\n\tlet\
    \ current = arr[start]\n\tlet direction = true // \"True\" is bigger than \"False\"\
    \n\tfor index in start .. end {\n\t\tif index == end {\n\t\t\tif current >= 10\
    \ {\n\t\t\t\tdirection = false // \"False\" is bigger than \"True\"\n\t\t\t} else\
    \ {\n\t\t\t\tdirection = true // \"True\" is bigger than \"False\"\n\t\t\t}\n\t\
    \t}\n\n\t\tlet next = arr[index]\n\t\tlet number = \"\"\n\t\tif direction {\n\t\
    \t\tif next > current {\n\t\t\t\tnumber += \"9\"\n\t\t\t}\n\t\t} else {\n\t\t\t\
    if next < current {\n\t\t\t\tnumber += \"0\"\n\t\t\t}\n\t\t}\n\t\tif number ==\
    \ \"\" {\n\t\t\tnumber += \"0\"\n\t\t}\n\n\t\tresult[index] = number\n\t\tcurrent\
    \ = next\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp39mg137s.swift:15:2: error: cannot find 'sort' in scope\n     \
    \   sort.Sort(arr) // Sort from low to high\n        ^~~~\n/tmp/tmp39mg137s.swift:19:15:\
    \ error: no exact matches in call to initializer \n        var result = Array<String>(count:\
    \ count, repeatedValue: \"\")\n                     ^\n/tmp/tmp39mg137s.swift:19:15:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        var result = Array<String>(count: count, repeatedValue: \"\")\n\
    \                     ^\n/tmp/tmp39mg137s.swift:19:15: note: candidate has partially\
    \ matching parameter list (repeating: String, count: Int)\n        var result\
    \ = Array<String>(count: count, repeatedValue: \"\")\n                     ^\n\
    /tmp/tmp39mg137s.swift:22:21: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n        for index in start .. end {\n                         \
    \  ^~\n                           ...\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  switch len(arr) {\n\
    \  case 0:\n    return []\n  case 1:\n    return [get_name_by_index(arr[0])]\n\
    \  default:\n    return reverse(reverse(arr))\n      .map { get_name_by_index($0)\
    \ }\n      .concat(reverse(arr))\n      .map { get_name_by_index($0) }\n  }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiqmhrspb.swift:15:10: error: cannot find 'len' in scope\n  switch\
    \ len(arr) {\n         ^~~\n/tmp/tmpiqmhrspb.swift:19:13: error: cannot find 'get_name_by_index'\
    \ in scope\n    return [get_name_by_index(arr[0])]\n            ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpiqmhrspb.swift:21:12: error: cannot find 'reverse' in scope\n    return\
    \ reverse(reverse(arr))\n           ^~~~~~~\n/tmp/tmpiqmhrspb.swift:21:20: error:\
    \ cannot find 'reverse' in scope\n    return reverse(reverse(arr))\n         \
    \          ^~~~~~~\n/tmp/tmpiqmhrspb.swift:22:14: error: cannot find 'get_name_by_index'\
    \ in scope\n      .map { get_name_by_index($0) }\n             ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpiqmhrspb.swift:23:15: error: cannot find 'reverse' in scope\n      .concat(reverse(arr))\n\
    \              ^~~~~~~\n/tmp/tmpiqmhrspb.swift:24:14: error: cannot find 'get_name_by_index'\
    \ in scope\n      .map { get_name_by_index($0) }\n             ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // convert input\
    \ from [Int] to [String]\n    var arrString = ArraySlice(arr)\n    \n    // filter\
    \ all numbers that are not between 1 and 9\n    let validArr = arrString.filter{\n\
    \        // convert from [Int] to [String]\n        let strNumber = strFromInt($0)\n\
    \        let number  = Int(strNumber)\n        return 1 <= number && number <=\
    \ 9\n    }\n\n    // convert from [String] to [String]\n    let resultString =\
    \ ArraySlice(validArr).map{\n        let strNumber = strFromInt($0)\n        let\
    \ number  = Int(strNumber)\n        \n        switch number {\n        case 1:\n\
    \            return \"One\"\n        case 2:\n            return \"Two\"\n   \
    \     case 3:\n            return \"Three\"\n        case 4:\n            return\
    \ \"Four\"\n        case 5:\n            return \"Five\"\n        case 6:\n  \
    \          return \"Six\"\n        case 7:\n            return \"Seven\"\n   \
    \     case 8:\n            return \"Eight\"\n        case 9:\n            return\
    \ \"Nine\"\n        default:\n            return strNumber\n        }\n    }\n\
    \n    return resultString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiv4lxq3x.swift:21:25: error: cannot find 'strFromInt' in scope\n\
    \        let strNumber = strFromInt($0)\n                        ^~~~~~~~~~\n\
    /tmp/tmpiv4lxq3x.swift:28:25: error: cannot find 'strFromInt' in scope\n     \
    \   let strNumber = strFromInt($0)\n                        ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  let (min, max) = arr.minmaxElement()\n\
    \  let start = min == min ? \"\" : min.stringValue\n  let end = max == max ? \"\
    \" : max.stringValue\n  let result = arr.reverse().map({\n    if $0 < 10 { let\
    \ s = String($0); return s + start } else { return \"nine\" }\n  }).map({\n  \
    \  if $0 == 0 { return \"zero\" }\n    else { return String($0) + end }\n  })\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjp2sna4w.swift:15:24: error: value of type '[Int]' has no member\
    \ 'minmaxElement'\n  let (min, max) = arr.minmaxElement()\n                  \
    \ ~~~ ^~~~~~~~~~~~~\n/tmp/tmpjp2sna4w.swift:18:30: error: value of tuple type\
    \ '()' has no member 'map'\n  let result = arr.reverse().map({\n             \
    \  ~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    \n    var newArr = arr\n    \n    for index in newArr.indices\
    \ {\n        let digit = Int((index + 1) % 10)\n        let name = DIGITS[digit]\n\
    \        newArr[index] = name\n    }\n    \n    return newArr.reversed().map {\n\
    \        $0.isEmpty ? \"Zero\" : $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpymnrret3.swift:21:20: error: cannot find 'DIGITS' in scope\n  \
    \      let name = DIGITS[digit]\n                   ^~~~~~\n/tmp/tmpymnrret3.swift:26:12:\
    \ error: value of type 'Int' has no member 'isEmpty'\n        $0.isEmpty ? \"\
    Zero\" : $0\n        ~~ ^~~~~~~\n/tmp/tmpymnrret3.swift:26:20: error: cannot convert\
    \ value of type 'Int' to closure result type 'String'\n        $0.isEmpty ? \"\
    Zero\" : $0\n        ~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmpymnrret3.swift:26:22: error:\
    \ result values in '? :' expression have mismatching types 'String' and 'Int'\n\
    \        $0.isEmpty ? \"Zero\" : $0\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n\n    let result = arr.filter { it in 1..9 }\n\
    \        .map { Int(\"\\($0)\") }\n        .reversed()\n        .map { $0.description\
    \ }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp57d7n_hs.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp57d7n_hs.swift:19:38: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    let result = arr.filter { it in 1..9 }\n          \
    \                           ^~\n                                     ...\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let ints = arr.filter{\
    \ $0 > 0 && $0 < 10 }.sorted().reverse()\n    guard ints.count > 0 else { return\
    \ [] }\n    return ints.map{ String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmph6pte0ys.swift:15:57: error: cannot use mutating member on immutable\
    \ value: function call returns immutable value\n    let ints = arr.filter{ $0\
    \ > 0 && $0 < 10 }.sorted().reverse()\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // The first digit\
    \ must be in the \"One\" group because it is 1 greater than the other digits.\n\
    \    // \"One\" is the first group that is 1 greater than the rest\n    let firstGroupFirstDigit\
    \ = arr[firstIndex(arr, 1)]\n    let firstGroupLastDigit = arr[lastIndex(arr,\
    \ 1)]\n    let firstGroupCount = count(arr)\n\n    // The last digit must be in\
    \ the \"Nine\" group because it is 1 less than the other digits.\n    // \"Nine\"\
    \ is the last group that is 1 less than the rest\n    let lastGroupFirstDigit\
    \ = arr[firstIndex(arr, 9)]\n    let lastGroupLastDigit = arr[lastIndex(arr, 9)]\n\
    \    let lastGroupCount = count(arr)\n\n    if firstGroupCount == 0 && lastGroupCount\
    \ == 0 {\n        return arr\n    }\n\n    // If we have 1 digit, return it in\
    \ the \"One\" group\n    if lastGroupCount == 0 {\n        return append(arr,\
    \ firstGroupFirstDigit)\n    }\n\n    // We have at least one digit, so we must\
    \ add the digits between the \"One\" and \"Nine\" groups\n    var str = \"\"\n\
    \n    // If we have 1 or more \"One\" groups put the first digit in the \"One\"\
    \ group\n    if firstGroupCount > 0 {\n        str = append(str, firstGroupFirstDigit)\n\
    \    }\n\n    // If we have 1 or more \"Nine\" groups put the lastDigit in the\
    \ \"Nine\" group\n    if lastGroupCount > 0 {\n        str = append(str, lastGroupLastDigit)\n\
    \    }\n\n    // For each group of digits, put them in the correct order in the\
    \ \"One\" and \"Nine\" groups\n    var i = firstGroupFirstDigit\n    for _ in\
    \ 0..<firstGroupCount {\n        str = append(str, arr[i])\n        i += 1\n \
    \   }\n\n    i = lastGroupFirstDigit\n    for _ in 0..<lastGroupCount {\n    \
    \    str = append(str, arr[i])\n        i += 1\n    }\n\n    return str\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1aanal_k.swift:17:36: error: cannot find 'firstIndex' in scope\n\
    \    let firstGroupFirstDigit = arr[firstIndex(arr, 1)]\n                    \
    \               ^~~~~~~~~~\n/tmp/tmp1aanal_k.swift:18:35: error: cannot find 'lastIndex'\
    \ in scope\n    let firstGroupLastDigit = arr[lastIndex(arr, 1)]\n           \
    \                       ^~~~~~~~~\n/tmp/tmp1aanal_k.swift:19:27: error: cannot\
    \ find 'count' in scope\n    let firstGroupCount = count(arr)\n              \
    \            ^~~~~\n/tmp/tmp1aanal_k.swift:23:35: error: cannot find 'firstIndex'\
    \ in scope\n    let lastGroupFirstDigit = arr[firstIndex(arr, 9)]\n          \
    \                        ^~~~~~~~~~\n/tmp/tmp1aanal_k.swift:24:34: error: cannot\
    \ find 'lastIndex' in scope\n    let lastGroupLastDigit = arr[lastIndex(arr, 9)]\n\
    \                                 ^~~~~~~~~\n/tmp/tmp1aanal_k.swift:25:26: error:\
    \ cannot find 'count' in scope\n    let lastGroupCount = count(arr)\n        \
    \                 ^~~~~\n/tmp/tmp1aanal_k.swift:28:16: error: cannot convert return\
    \ expression of type '[Int]' to return type '[String]'\n        return arr\n \
    \              ^\n/tmp/tmp1aanal_k.swift:28:16: note: arguments to generic parameter\
    \ 'Element' ('Int' and 'String') are expected to be equal\n        return arr\n\
    \               ^\n/tmp/tmp1aanal_k.swift:33:16: error: cannot find 'append' in\
    \ scope\n        return append(arr, firstGroupFirstDigit)\n               ^~~~~~\n\
    /tmp/tmp1aanal_k.swift:41:15: error: cannot find 'append' in scope\n        str\
    \ = append(str, firstGroupFirstDigit)\n              ^~~~~~\n/tmp/tmp1aanal_k.swift:46:15:\
    \ error: cannot find 'append' in scope\n        str = append(str, lastGroupLastDigit)\n\
    \              ^~~~~~\n/tmp/tmp1aanal_k.swift:62:12: error: cannot convert return\
    \ expression of type 'String' to return type '[String]'\n    return str\n    \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    \n    // The \"base\" array contains all numbers between\
    \ 1 and 9 (inclusive)\n    var base: [Int] = [1...9]\n    \n    // The \"values\"\
    \ array contains all original numbers from arr\n    var values: [String] = []\n\
    \    \n    // The \"result\" array contains all \"reversed\" numbers from arr\n\
    \    var result: [String] = []\n    \n    // Add each element of arr into the\
    \ \"values\" array\n    for element in arr {\n        values.append(String(element))\n\
    \    }\n    \n    // Add each element of base into the \"result\" array\n    for\
    \ element in base {\n        result.append(String(element))\n    }\n    \n   \
    \ // Add each element of \"values\" into the \"result\" array\n    for element\
    \ in values {\n        if let match = result.firstIndex(of: String(element)) {\n\
    \            result[match] = String(element)\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfguiaukl.swift:18:25: error: cannot convert value of type 'ClosedRange<Int>'\
    \ to expected element type 'Int'\n    var base: [Int] = [1...9]\n            \
    \            ^\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >=\
    \ 1 else {\n        return arr\n    }\n\n    let maxDigit = log10(Float(arr.count)).ceiling()\n\
    \    return arr.sorted().map {\n        switch $0 {\n        case Int(pow(2, $0.signum())):\n\
    \            return \"\\(Int(pow(2, $0.signum())))\"\n        default:\n     \
    \       return String($0)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwzwc9e2x.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpwzwc9e2x.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmpwzwc9e2x.swift:19:20: error: cannot find 'log10' in scope\n    let maxDigit\
    \ = log10(Float(arr.count)).ceiling()\n                   ^~~~~\n/tmp/tmpwzwc9e2x.swift:23:27:\
    \ error: cannot find 'pow' in scope\n            return \"\\(Int(pow(2, $0.signum())))\"\
    \n                          ^~~\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n\n    if arr.first >= 1 && arr.first <= 9 {\n \
    \       let mut buf = [String]()\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"0\" ? \"One\" : \"Two\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"1\" ? \"Two\" : \"One\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"2\" ? \"Three\" : \"Two\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"3\" ? \"Four\" : \"Three\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"4\" ? \"Five\" : \"Four\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"5\" ? \"Six\" : \"Five\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"6\" ? \"Seven\" : \"Six\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"7\" ? \"Eight\" : \"Seven\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"8\" ? \"Nine\" : \"Eight\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"9\" ? \"Nine\" : \"Nine\" })\n        return buf\n    }\n\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcrw5o3qm.swift:20:17: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut buf\
    \ = [String]()\n                ^\n/tmp/tmpcrw5o3qm.swift:20:17: note: join the\
    \ identifiers together\n        let mut buf = [String]()\n            ~~~~^~~\n\
    \            mutbuf\n/tmp/tmpcrw5o3qm.swift:20:17: note: join the identifiers\
    \ together with camel-case\n        let mut buf = [String]()\n            ~~~~^~~\n\
    \            mutBuf\n/tmp/tmpcrw5o3qm.swift:21:35: error: expected expression\
    \ in list of expressions\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"0\" ? \"One\" : \"Two\" })\n                                  ^\n\
    /tmp/tmpcrw5o3qm.swift:22:35: error: expected expression in list of expressions\n\
    \        buf.append(arr.map(String::from).reversed().map { $1 == \"1\" ? \"Two\"\
    \ : \"One\" })\n                                  ^\n/tmp/tmpcrw5o3qm.swift:23:35:\
    \ error: expected expression in list of expressions\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"2\" ? \"Three\" : \"Two\" })\n                                  ^\n\
    /tmp/tmpcrw5o3qm.swift:24:35: error: expected expression in list of expressions\n\
    \        buf.append(arr.map(String::from).reversed().map { $1 == \"3\" ? \"Four\"\
    \ : \"Three\" })\n                                  ^\n/tmp/tmpcrw5o3qm.swift:25:35:\
    \ error: expected expression in list of expressions\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"4\" ? \"Five\" : \"Four\" })\n                                  ^\n\
    /tmp/tmpcrw5o3qm.swift:26:35: error: expected expression in list of expressions\n\
    \        buf.append(arr.map(String::from).reversed().map { $1 == \"5\" ? \"Six\"\
    \ : \"Five\" })\n                                  ^\n/tmp/tmpcrw5o3qm.swift:27:35:\
    \ error: expected expression in list of expressions\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"6\" ? \"Seven\" : \"Six\" })\n                                  ^\n\
    /tmp/tmpcrw5o3qm.swift:28:35: error: expected expression in list of expressions\n\
    \        buf.append(arr.map(String::from).reversed().map { $1 == "
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count !=\
    \ 0 else {\n        return []\n    }\n    // Calculate the max length\n    let\
    \ maxLength : Int = maxElement(arr)\n    var arrayWithoutZeros : [Int] = []\n\
    \    for i in arr {\n        if i != 0 {\n            arrayWithoutZeros.append(i)\n\
    \        }\n    }\n    // Now we know all the numbers are different\n    var finalArray\
    \ : [String] = []\n    for num in arrayWithoutZeros {\n        finalArray.append(getDigitName(num))\n\
    \    }\n    // Reverse the array\n    for i in 0..<maxLength {\n        finalArray\
    \ = finalArray.reverse()\n    }\n    // Replace the elements\n    for i in 0..<maxLength\
    \ {\n        finalArray[i] = getDigitName(arr[i])\n    }\n    return finalArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxqaou349.swift:19:27: error: cannot find 'maxElement' in scope\n\
    \    let maxLength : Int = maxElement(arr)\n                          ^~~~~~~~~~\n\
    /tmp/tmpxqaou349.swift:29:27: error: cannot find 'getDigitName' in scope\n   \
    \     finalArray.append(getDigitName(num))\n                          ^~~~~~~~~~~~\n\
    /tmp/tmpxqaou349.swift:33:33: error: cannot assign value of type '()' to type\
    \ '[String]'\n        finalArray = finalArray.reverse()\n                    \
    \ ~~~~~~~~~~~^~~~~~~~~\n/tmp/tmpxqaou349.swift:37:25: error: cannot find 'getDigitName'\
    \ in scope\n        finalArray[i] = getDigitName(arr[i])\n                   \
    \     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr\n    \
    \    .filter({$0 < 9 && $0 > 1})\n        .map { name -> [String] in\n       \
    \     let num = Int($0)\n            var digits = [String]()\n            while\
    \ num > 0 {\n                digits.append(String(num % 10)) // [\"5\", \"4\"\
    , \"3\", \"2\", \"1\", \"1\", \"0\"]\n                num = Int(num / 10)\n  \
    \          }\n            digits.reverse()\n            let index = digits.count\n\
    \            let number = String(digits[index])\n            return [\n      \
    \          name.lowercased() + \"\\($0)\",\n                name.lowercased()\
    \ + \"\\($1)\",\n                name.lowercased() + \"\\($2)\",\n           \
    \     name.lowercased() + \"\\($3)\",\n                name.lowercased() + \"\\\
    ($4)\",\n                name.lowercased() + \"\\($5)\",\n                name.lowercased()\
    \ + \"\\($6)\",\n                name.lowercased() + \"\\($7)\",\n           \
    \     name.lowercased() + \"\\($8)\",\n                name.lowercased() + \"\\\
    ($9)\",\n            ][index]\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp110altaq.swift:18:27: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments; did you mean 'name'?\n\
    \            let num = Int($0)\n                          ^~\n               \
    \           name\n/tmp/tmp110altaq.swift:28:40: error: anonymous closure arguments\
    \ cannot be used inside a closure that has explicit arguments; did you mean 'name'?\n\
    \                name.lowercased() + \"\\($0)\",\n                           \
    \            ^~\n                                       name\n/tmp/tmp110altaq.swift:29:40:\
    \ error: anonymous closure arguments cannot be used inside a closure that has\
    \ explicit arguments\n                name.lowercased() + \"\\($1)\",\n      \
    \                                 ^\n/tmp/tmp110altaq.swift:30:40: error: anonymous\
    \ closure arguments cannot be used inside a closure that has explicit arguments\n\
    \                name.lowercased() + \"\\($2)\",\n                           \
    \            ^\n/tmp/tmp110altaq.swift:31:40: error: anonymous closure arguments\
    \ cannot be used inside a closure that has explicit arguments\n              \
    \  name.lowercased() + \"\\($3)\",\n                                       ^\n\
    /tmp/tmp110altaq.swift:32:40: error: anonymous closure arguments cannot be used\
    \ inside a closure that has explicit arguments\n                name.lowercased()\
    \ + \"\\($4)\",\n                                       ^\n/tmp/tmp110altaq.swift:33:40:\
    \ error: anonymous closure arguments cannot be used inside a closure that has\
    \ explicit arguments\n                name.lowercased() + \"\\($5)\",\n      \
    \                                 ^\n/tmp/tmp110altaq.swift:34:40: error: anonymous\
    \ closure arguments cannot be used inside a closure that has explicit arguments\n\
    \                name.lowercased() + \"\\($6)\",\n                           \
    \            ^\n/tmp/tmp110altaq.swift:35:40: error: anonymous closure arguments\
    \ cannot be used inside a closure that has explicit arguments\n              \
    \  name.lowercased() + \"\\($7)\",\n                                       ^\n\
    /tmp/tmp110altaq.swift:36:40: error: anonymous closure a"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\
    \ return [] }\n    var result = \"\"\n\n    for i in arr.indices {\n        var\
    \ name = \"\"\n        switch i {\n        case 0: name = \"One\"; break\n   \
    \     case 1: name = \"Two\"; break\n        case 2: name = \"Three\"; break\n\
    \        case 3: name = \"Four\"; break\n        case 4: name = \"Five\"; break\n\
    \        case 5: name = \"Six\"; break\n        case 6: name = \"Seven\"; break\n\
    \        case 7: name = \"Eight\"; break\n        case 8: name = \"Nine\"; break\n\
    \        default: continue\n        }\n\n        if arr[i] > 9 { name = \"\\(arr[i])\"\
    \n        } else {\n            if arr[i] < 10 {\n                result.append(String(arr[i]))\n\
    \            } else { result.append(name) }\n        }\n    }\n\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpglipp9q4.swift:41:19: error: value of type 'String' has no member\
    \ 'reverse'\n    return result.reverse()\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    defer { debug() }\n\
    \    var strs: [String] = []\n    for num in arr {\n        strs.append(from_num(num))\n\
    \    }\n    if strs.count > 0 {\n        sort(strs)\n    }\n    strs.reverse()\n\
    \    return strs\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmvpl4lhe.swift:15:13: error: cannot find 'debug' in scope\n   \
    \ defer { debug() }\n            ^~~~~\n/tmp/tmpmvpl4lhe.swift:18:21: error: cannot\
    \ find 'from_num' in scope\n        strs.append(from_num(num))\n             \
    \       ^~~~~~~~\n/tmp/tmpmvpl4lhe.swift:21:9: error: cannot find 'sort' in scope\n\
    \        sort(strs)\n        ^~~~\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if !arr.isEmpty {\n\
    \        let start = min(arr.startIndex, arr.endIndex)\n        let end = max(arr.startIndex,\
    \ arr.endIndex)\n        let result = Array(0..<end-start).map { arr[it]; return\
    \ \"\\(arr[it])\" }.joinWithSeparator(\" \")\n        guard let number = Int(result)\
    \ else { return [] }\n        switch number {\n        case 1...9:\n         \
    \   return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n        case 10...19:\n            return [\"Ten\", \"\
    Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"\
    Seventeen\", \"Eighteen\", \"Nineteen\"]\n        case 20...29:\n            return\
    \ [\"Twenty\", \"Twenty-one\", \"Twenty-two\", \"Twenty-three\", \"Twenty-four\"\
    , \"Twenty-five\", \"Twenty-six\", \"Twenty-seven\", \"Twenty-eight\", \"Twenty-nine\"\
    ]\n        case 30...39:\n            return [\"Thirty\", \"Thirty-one\", \"Thirty-two\"\
    , \"Thirty-three\", \"Thirty-four\", \"Thirty-five\", \"Thirty-six\", \"Thirty-seven\"\
    , \"Thirty-eight\", \"Thirty-nine\"]\n        case 40...49:\n            return\
    \ [\"Fourty\", \"Fourty-one\", \"Fourty-two\", \"Fourty-three\", \"Fourty-four\"\
    , \"Fourty-five\", \"Fourty-six\", \"Fourty-seven\", \"Fourty-eight\", \"Fourty-nine\"\
    ]\n        case 50...59:\n            return [\"Fifty\", \"Fifty-one\", \"Fifty-two\"\
    , \"Fifty-three\", \"Fifty-four\", \"Fifty-five\", \"Fifty-six\", \"Fifty-seven\"\
    , \"Fifty-eight\", \"Fifty-nine\"]\n        case 60...69:\n            return\
    \ [\"Sixty\", \"Sixty-one\", \"Sixty-two\", \"Sixty-three\", \"Sixty-four\", \"\
    Sixty-five\", \"Sixty-six\", \"Sixty-seven\", \"Sixty-eight\", \"Sixty-nine\"\
    ]\n        case 70...79:\n            return [\"Seventy\", \"Seventy-one\", \"\
    Seventy-two\", \"Seventy-three\", \"Seventy-four\", \"Seventy-five\", \"Seventy-six\"\
    , \"Seventy-seven\", \"Seventy-eight\", \"Seventy-\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxy62jojc.swift:36:160: error: unterminated string literal\n   \
    \         return [\"Seventy\", \"Seventy-one\", \"Seventy-two\", \"Seventy-three\"\
    , \"Seventy-four\", \"Seventy-five\", \"Seventy-six\", \"Seventy-seven\", \"Seventy-eight\"\
    , \"Seventy-\n                                                               \
    \                                                                            \
    \                    ^\n/tmp/tmpxy62jojc.swift:56:63: error: expected '}' at end\
    \ of brace statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])\n                                                              ^\n\
    /tmp/tmpxy62jojc.swift:15:21: note: to match this opening '{'\n    if !arr.isEmpty\
    \ {\n                    ^\n/tmp/tmpxy62jojc.swift:56:63: error: expected '}'\
    \ at end of brace statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"\
    Eight\", \"Four\"])\n                                                        \
    \      ^\n/tmp/tmpxy62jojc.swift:14:40: note: to match this opening '{'\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n                                      \
    \ ^\n/tmp/tmpxy62jojc.swift:18:53: error: cannot find 'it' in scope\n        let\
    \ result = Array(0..<end-start).map { arr[it]; return \"\\(arr[it])\" }.joinWithSeparator(\"\
    \ \")\n                                                    ^~\n/tmp/tmpxy62jojc.swift:18:72:\
    \ error: cannot find 'it' in scope\n        let result = Array(0..<end-start).map\
    \ { arr[it]; return \"\\(arr[it])\" }.joinWithSeparator(\" \")\n             \
    \                                                          ^~\n/tmp/tmpxy62jojc.swift:40:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  let sorted = arr.sorted()\n\
    \  let first = sorted[0]\n  switch first {\n  case 1:\n    return [\"One\"]\n\
    \  case 2:\n    return [\"Two\", \"One\"]\n  case 3:\n    return [\"Three\", \"\
    Two\", \"One\"]\n  case 4:\n    return [\"Four\", \"Three\", \"Two\", \"One\"\
    ]\n  case 5:\n    return [\"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n \
    \ case 6:\n    return [\"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"\
    ]\n  case 7:\n    return [\"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"One\"]\n  case 8:\n    return [\"Eight\", \"Seven\", \"Six\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"One\"]\n  case 9:\n    return [\"Nine\", \"\
    Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n\
    \  default:\n    return []\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8fb2hez6/tmp8fb2hez6.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefe647dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefe6174b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefe6174988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefe61737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fb2hez6                        0x0000557f0d330721 <unavailable> + 5921

    5    libc.so.6                          0x00002aefe6669460 __libc_start_main +
    245

    6    tmp8fb2hez6                        0x0000557f0d3301c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ { return [] }\n    let min = arr[0]\n    let max = arr[arr.count - 1]\n    return\
    \ (0..<arr.count).map { i in\n        let val = arr[i]\n        if val < min {\
    \ return \"One\" }\n        if val > max { return \"Nine\" }\n        return String(i)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpabje1xyt.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() { return [] }\n           ^      ~~\n    \
    \              \n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let maxLen = arr.count\n\
    \    return (0..<maxLen).map { i in\n        return String(i == 0 ? 1 : arr[i])\n\
    \    }.reverse().map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzcy5ntjz.swift:18:17: error: value of tuple type '()' has no member\
    \ 'map'\n    }.reverse().map { String($0) }\n~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr\n    \
    \    .filter { $0 < 10 }\n        .sorted()\n        .reversed()\n        .map\
    \ {\n            switch $0 {\n            case 0: return \"Zero\"\n          \
    \  case 1: return \"One\"\n            case 2: return \"Two\"\n            case\
    \ 3: return \"Three\"\n            case 4: return \"Four\"\n            case 5:\
    \ return \"Five\"\n            case 6: return \"Six\"\n            case 7: return\
    \ \"Seven\"\n            case 8: return \"Eight\"\n            case 9: return\
    \ \"Nine\"\n            }\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp97b2z9qt.swift:20:13: error: switch must be exhaustive\n      \
    \      switch $0 {\n            ^\n/tmp/tmp97b2z9qt.swift:20:13: note: do you\
    \ want to add a default clause?\n            switch $0 {\n            ^\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let map = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    if arr.isEmpty {\n        return []\n    }\n    if arr.count != 9 {\n \
    \       return arr\n    }\n\n    var result = arr\n    for var i = 0; i <= 9;\
    \ i++ {\n        var index = 0\n        if i < 10 {\n            index = i\n \
    \       }\n        else {\n            index = i - 10\n        }\n        let\
    \ name = map[arr[index]]\n        if i == 0 {\n            result = name\n   \
    \         continue\n        }\n        result = result.map({\n            $0 ==\
    \ index ? name : $0\n        })\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpun82euz1.swift:24:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i <= 9; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpun82euz1.swift:20:16: error: cannot convert return expression of type\
    \ '[Int]' to return type '[String]'\n        return arr\n               ^\n/tmp/tmpun82euz1.swift:20:16:\
    \ note: arguments to generic parameter 'Element' ('Int' and 'String') are expected\
    \ to be equal\n        return arr\n               ^\n/tmp/tmpun82euz1.swift:41:12:\
    \ error: cannot convert return expression of type '[Int]' to return type '[String]'\n\
    \    return result\n           ^\n/tmp/tmpun82euz1.swift:41:12: note: arguments\
    \ to generic parameter 'Element' ('Int' and 'String') are expected to be equal\n\
    \    return result\n           ^\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    // Create a map from digits to names\n    var\
    \ names = [String: String]()\n    for i in arr {\n        names[String(i)] = String(i)\n\
    \    }\n\n    // Build a list from the map\n    var list: [String] = []\n    for\
    \ (digit, name) in names {\n        for _ in 0..<arr.count {\n            if arr[_]\
    \ < 1 {\n                break\n            }\n            if digit <= arr[Int(arr[_])]\
    \ {\n                list.append(name)\n                break\n            }\n\
    \        }\n    }\n\n    // Reverse the list\n    list.reverse()\n\n    // Convert\
    \ to an array of strings\n    return list.map { $0.string }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp2p7sw3d.swift:29:20: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n            if arr[_] < 1 {\n           \
    \        ^\n/tmp/tmpp2p7sw3d.swift:32:37: error: '_' can only appear in a pattern\
    \ or on the left side of an assignment\n            if digit <= arr[Int(arr[_])]\
    \ {\n                                    ^\n/tmp/tmpp2p7sw3d.swift:43:26: error:\
    \ value of type 'String' has no member 'string'\n    return list.map { $0.string\
    \ }\n                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let digits = Array(Set(arr))\n\
    \    let reversedDigits = reverse(digits)\n    let names = Array(Set(reversedDigits).reversed())\n\
    \    return zip(names, reversedDigits).map { $0.description }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5tkys0rg.swift:16:26: error: cannot find 'reverse' in scope\n \
    \   let reversedDigits = reverse(digits)\n                         ^~~~~~~\n/tmp/tmp5tkys0rg.swift:18:48:\
    \ error: value of tuple type '(Sequence1.Element, Sequence2.Element)' has no member\
    \ 'description'\n    return zip(names, reversedDigits).map { $0.description }\n\
    \                                            ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014502
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    \n    let result = arr.map {\n        let digit\
    \ = String($0)\n        guard let index = digit.index(of: \"1\"),\n          \
    \  digit.index(of: \"2\"),\n            digit.index(of: \"3\"),\n            digit.index(of:\
    \ \"4\"),\n            digit.index(of: \"5\"),\n            digit.index(of: \"\
    6\"),\n            digit.index(of: \"7\"),\n            digit.index(of: \"8\"\
    ),\n            digit.index(of: \"9\") else { continue }\n        return digit[index..<digit.endIndex].reversed()\n\
    \    }\n    \n    return result.map({ $0.isEmpty ? \"\" : $0 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpan5my814.swift:22:19: error: optional type 'String.Index?' cannot\
    \ be used as a boolean; test for '!= nil' instead\n            digit.index(of:\
    \ \"2\"),\n                  ^\n            (                    != nil)\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let arr = arr\n \
    \       .filter { $0 >= 1 } //filter all numbers in arr between 1 and 9 inclusive\n\
    \        .sorted() //sort the array\n        .reverse() //reverse the order\n\
    \        .map{ [1...9] }\n        .filter { $0 <= $1 } //filter out all the number\
    \ whose name less than the length of the array\n        .map { $0 == $1 ? nil\
    \ : String($0 % 10) }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4m2725mr.swift:15:15: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let arr = arr\n              ^~~\n"
  stdout: ''
  timestamp: 1660014525
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  let mut result = [String]()\n\
    \n  if arr.is_empty() {\n    return result\n  }\n\n  if arr.len() != 1 {\n   \
    \ return result\n  }\n\n  let min = arr[0]\n  let max = arr[0]\n\n  let mut index\
    \ = 0\n  let mut value = min + 9\n\n  while index < arr.len() {\n    let current\
    \ = arr[index]\n    if current < min {\n      min = current\n    }\n    if current\
    \ > max {\n      max = current\n    }\n\n    index += 1\n  }\n\n  let firstDigit\
    \ = min + 9\n\n  let numbersToBeReversed = max / 10 + 1\n\n  let reversedNumbers\
    \ = Array(0..<numbersToBeReversed)\n    .map(|n| reversedNumbers[Int(n)])\n\n\
    \  let currentDigit = min\n  let currentNumbers = reversedNumbers\n\n  let nextDigit\
    \ = firstDigit % 10\n  let nextNumbers = reversedNumbers.skip(nextDigit + 1)\n\
    \n  for _ in 0..<numbersToBeReversed {\n    currentDigit = (currentDigit + 9)\
    \ % 10\n    currentNumbers = nextNumbers\n\n    nextDigit = (nextDigit + 9) %\
    \ 10\n    nextNumbers = nextNumbers.skip(nextDigit + 1)\n  }\n\n  for index in\
    \ 0..<arr.len() {\n    let current = arr[index]\n    let currentDigit = current\
    \ % 10\n\n    let currentNumbersElement = currentNumbers[index].to_string()\n\n\
    \    let reversedNumbersElement = currentNumbersElement.reversed()\n\n    let\
    \ firstDigit = currentDigit\n    let firstNumbersElement = reversedNumbersElement[firstDigit]\n\
    \n    let secondDigit = (firstDigit + 9) % 10\n    let secondNumbersElement =\
    \ reversedNumbersElement.skip(secondDigit + 1).collect()\n\n    let thirdDigit\
    \ = (secondDigit + 9) % 10\n    let thirdNumbersElement = reversedNumbersElement.skip(thirdDigit\
    \ + 1).collect()\n\n    let fourthDigit = (thirdDigit + 9) % 10\n    let fourthNumbersElement\
    \ = reversedNumbersElement.skip(fourthDigit + 1).collect()\n\n    let fifthDigit\
    \ = (fourthDigit + 9) % 10\n    let fifthNumbersElement = reversedNumbersElement.skip(fifthDigit\
    \ + 1).collect()\n\n    let sixthDigit = (fifthDigit + 9) % 10\n    let sixthNumbersElement\
    \ = reversedNumbersElement.skip(sixthDigit + 1).collect()\n\n    let seventhDigit\
    \ = (sixthDigit + 9) % 10\n    let seventhNumbersElement = \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3x4n3eeu.swift:15:11: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n  let mut result = [String]()\n\
    \          ^\n/tmp/tmp3x4n3eeu.swift:15:11: note: join the identifiers together\n\
    \  let mut result = [String]()\n      ~~~~^~~~~~\n      mutresult\n/tmp/tmp3x4n3eeu.swift:15:11:\
    \ note: join the identifiers together with camel-case\n  let mut result = [String]()\n\
    \      ~~~~^~~~~~\n      mutResult\n/tmp/tmp3x4n3eeu.swift:28:11: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n  let mut index = 0\n          ^\n/tmp/tmp3x4n3eeu.swift:28:11: note:\
    \ join the identifiers together\n  let mut index = 0\n      ~~~~^~~~~\n      mutindex\n\
    /tmp/tmp3x4n3eeu.swift:28:11: note: join the identifiers together with camel-case\n\
    \  let mut index = 0\n      ~~~~^~~~~\n      mutIndex\n/tmp/tmp3x4n3eeu.swift:29:11:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n  let mut value = min + 9\n          ^\n/tmp/tmp3x4n3eeu.swift:29:11:\
    \ note: join the identifiers together\n  let mut value = min + 9\n      ~~~~^~~~~\n\
    \      mutvalue\n/tmp/tmp3x4n3eeu.swift:29:11: note: join the identifiers together\
    \ with camel-case\n  let mut value = min + 9\n      ~~~~^~~~~\n      mutValue\n\
    /tmp/tmp3x4n3eeu.swift:48:14: error: expected ',' separator\n    .map(|n| reversedNumbers[Int(n)])\n\
    \             ^\n            ,\n/tmp/tmp3x4n3eeu.swift:91:32: error: expected\
    \ initial value after '='\n    let seventhNumbersElement = \n                \
    \               ^\n/tmp/tmp3x4n3eeu.swift:111:63: error: expected '}' at end of\
    \ brace statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"\
    Four\"])\n                                                              ^\n/tmp/tmp3x4n3eeu.swift:14:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmp3x4n3eeu.swift:17:10: error:\
    \ value of type '[Int]' has no member 'is_empty'\n  if arr.is_empty() {\n    \
    \ ~~~ ^~~~~~~~\n/tmp/tmp3x4n3eeu.swift:18"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  guard !arr.isEmpty\
    \ else { return [] }\n  func by_length(arr: [Int], index: Int) -> [String] {\n\
    \    if arr[index] >= 1 && arr[index] <= 9 {\n      return [\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][arr[index]\
    \ - 1]\n    } else {\n      return []\n    }\n  }\n  return arr.sort(by_length).reduce([],\
    \ by: by_length)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_6j9vbn1.swift:18:86: error: type of expression is ambiguous without\
    \ more context\n      return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"][arr[index] - 1]\n             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    /tmp/tmp_6j9vbn1.swift:23:14: error: cannot use mutating member on immutable value:\
    \ 'arr' is a 'let' constant\n  return arr.sort(by_length).reduce([], by: by_length)\n\
    \         ~~~ ^\n/tmp/tmp_6j9vbn1.swift:23:19: error: missing argument label 'by:'\
    \ in call\n  return arr.sort(by_length).reduce([], by: by_length)\n          \
    \        ^\n                  by: \n/tmp/tmp_6j9vbn1.swift:23:19: error: cannot\
    \ convert value of type '([Int], Int) -> [String]' to expected argument type '(Int,\
    \ Int) throws -> Bool'\n  return arr.sort(by_length).reduce([], by: by_length)\n\
    \                  ^\n/tmp/tmp_6j9vbn1.swift:23:19: error: cannot convert value\
    \ of type '([Int], Int) -> [String]' to expected argument type '(Int, Int) throws\
    \ -> Bool'\n  return arr.sort(by_length).reduce([], by: by_length)\n         \
    \         ^\n/tmp/tmp_6j9vbn1.swift:23:30: error: value of tuple type '()' has\
    \ no member 'reduce'\n  return arr.sort(by_length).reduce([], by: by_length)\n\
    \         ~~~~~~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr == [] {\n\
    \        return []\n    }\n    var result = [String]()\n    for x in arr {\n \
    \       if x != 0 && x % 10 == 0 {\n            switch x % 10 {\n            case\
    \ 1:\n                result.append(\"One\")\n            case 2:\n          \
    \      result.append(\"Two\")\n            case 3:\n                result.append(\"\
    Three\")\n            case 4:\n                result.append(\"Four\")\n     \
    \       case 5:\n                result.append(\"Five\")\n            case 6:\n\
    \                result.append(\"Six\")\n            case 7:\n               \
    \ result.append(\"Seven\")\n            case 8:\n                result.append(\"\
    Eight\")\n            case 9:\n                result.append(\"Nine\")\n     \
    \       default:\n                break\n            }\n        } else {\n   \
    \         result.append(String(x))\n        }\n    }\n    return result.reverse().map\
    \ { $0.string }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnas1mzod.swift:47:29: error: value of tuple type '()' has no member\
    \ 'map'\n    return result.reverse().map { $0.string }\n           ~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n\n    var numbers = arr.map { $0.description(withLocale:\
    \ nil) }\n    let minStr = numbers.min().description(withLocale: nil)\n    let\
    \ maxStr = numbers.max().description(withLocale: nil)\n\n    if minStr == maxStr\
    \ {\n        return numbers[0...]\n    }\n\n    var reversed = Array(numbers.suffix(from:\
    \ numbers.index(of: maxStr)))\n    reversed.append(minStr)\n    return reversed\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4di3tp_v.swift:17:32: error: cannot call value of non-function\
    \ type 'String'\n    var numbers = arr.map { $0.description(withLocale: nil) }\n\
    \                               ^\n/tmp/tmp4di3tp_v.swift:17:56: error: 'nil'\
    \ requires a contextual type\n    var numbers = arr.map { $0.description(withLocale:\
    \ nil) }\n                                                       ^\n/tmp/tmp4di3tp_v.swift:18:56:\
    \ error: 'nil' requires a contextual type\n    let minStr = numbers.min().description(withLocale:\
    \ nil)\n                                                       ^\n/tmp/tmp4di3tp_v.swift:19:56:\
    \ error: 'nil' requires a contextual type\n    let maxStr = numbers.max().description(withLocale:\
    \ nil)\n                                                       ^\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let minInt = arr[0]\n    let maxInt = arr[arr.count\
    \ - 1]\n    let sortedInts = arr.sort().map {\n        if $0 >= minInt && $0 <=\
    \ maxInt {\n            String($0)\n        } else {\n            \"\"\n     \
    \   }\n    }\n    let reversedInts = sortedInts.reverse()\n    return reversedInts.map\
    \ { String(by_length(arr: $0)) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5edf96ae.swift:20:33: error: value of tuple type '()' has no member\
    \ 'map'\n    let sortedInts = arr.sort().map {\n                     ~~~~~~~~~~\
    \ ^~~\n/tmp/tmp5edf96ae.swift:28:31: error: no exact matches in call to initializer\
    \ \n    return reversedInts.map { String(by_length(arr: $0)) }\n             \
    \                 ^\n/tmp/tmp5edf96ae.swift:28:31: note: found candidate with\
    \ type '([String]) -> String'\n    return reversedInts.map { String(by_length(arr:\
    \ $0)) }\n                              ^\n/tmp/tmp5edf96ae.swift:28:31: note:\
    \ found candidate with type '([String]) -> String'\n    return reversedInts.map\
    \ { String(by_length(arr: $0)) }\n                              ^\n/tmp/tmp5edf96ae.swift:28:31:\
    \ note: found candidate with type '([String]) -> String'\n    return reversedInts.map\
    \ { String(by_length(arr: $0)) }\n                              ^\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return sortAndReverse(arr).map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpntmdg12a.swift:15:12: error: cannot find 'sortAndReverse' in scope\n\
    \    return sortAndReverse(arr).map { String($0) }\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr == nil ||\
    \ arr.length == 0 || arr[0] == -1 || arr[0] == 1 || arr[0] == 0 {\n        return\
    \ []\n    }\n\n    var result = [String]()\n    var length = arr.count\n    if\
    \ length == 0 {\n        return arr\n    }\n\n    for i in 0..<length {\n    \
    \    if arr[i] < 1 || arr[i] > 9 {\n            continue\n        }\n\n      \
    \  var index = length - 1\n        var currentChar = String()\n        while (index\
    \ >= 0) {\n            currentChar = String.fromCharCode(arr[index--])\n     \
    \       if index == 0 {\n                break\n            }\n            if\
    \ currentChar == \"1\" {\n                result.append(formatter.one())\n   \
    \         } else if currentChar == \"2\" {\n                result.append(formatter.two())\n\
    \            } else if currentChar == \"3\" {\n                result.append(formatter.three())\n\
    \            } else if currentChar == \"4\" {\n                result.append(formatter.four())\n\
    \            } else if currentChar == \"5\" {\n                result.append(formatter.five())\n\
    \            } else if currentChar == \"6\" {\n                result.append(formatter.six())\n\
    \            } else if currentChar == \"7\" {\n                result.append(formatter.seven())\n\
    \            } else if currentChar == \"8\" {\n                result.append(formatter.eight())\n\
    \            } else if currentChar == \"9\" {\n                result.append(formatter.nine())\n\
    \            }\n        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcsna1t8c.swift:15:26: error: value of type '[Int]' has no member\
    \ 'length'\n    if arr == nil || arr.length == 0 || arr[0] == -1 || arr[0] ==\
    \ 1 || arr[0] == 0 {\n                     ~~~ ^~~~~~\n/tmp/tmpcsna1t8c.swift:22:16:\
    \ error: cannot convert return expression of type '[Int]' to return type '[String]'\n\
    \        return arr\n               ^\n/tmp/tmpcsna1t8c.swift:22:16: note: arguments\
    \ to generic parameter 'Element' ('Int' and 'String') are expected to be equal\n\
    \        return arr\n               ^\n/tmp/tmpcsna1t8c.swift:33:56: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            currentChar =\
    \ String.fromCharCode(arr[index--])\n                                        \
    \               ^~\n/tmp/tmpcsna1t8c.swift:33:34: error: type 'String' has no\
    \ member 'fromCharCode'\n            currentChar = String.fromCharCode(arr[index--])\n\
    \                          ~~~~~~ ^~~~~~~~~~~~\n/tmp/tmpcsna1t8c.swift:38:31:\
    \ error: cannot find 'formatter' in scope\n                result.append(formatter.one())\n\
    \                              ^~~~~~~~~\n/tmp/tmpcsna1t8c.swift:40:31: error:\
    \ cannot find 'formatter' in scope\n                result.append(formatter.two())\n\
    \                              ^~~~~~~~~\n/tmp/tmpcsna1t8c.swift:42:31: error:\
    \ cannot find 'formatter' in scope\n                result.append(formatter.three())\n\
    \                              ^~~~~~~~~\n/tmp/tmpcsna1t8c.swift:44:31: error:\
    \ cannot find 'formatter' in scope\n                result.append(formatter.four())\n\
    \                              ^~~~~~~~~\n/tmp/tmpcsna1t8c.swift:46:31: error:\
    \ cannot find 'formatter' in scope\n                result.append(formatter.five())\n\
    \                              ^~~~~~~~~\n/tmp/tmpcsna1t8c.swift:48:31: error:\
    \ cannot find 'formatter' in scope\n                result.append(formatter.six())\n\
    \                              ^~~~~~~~~\n/tmp/tmpcsna1t8c.swift:50:31: error:\
    \ cannot find 'formatter' in scope\n                result.append(formatter.seven())\n\
    \                              ^~~~~~~~~\n/tmp/tmpcsna1t8c.swift:52:31: error:\
    \ ca"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = Array<String>()\n\
    \    for element in arr {\n        if element >= 1 && element <= 9 {\n       \
    \     let index = element - 1\n            result.append(strings[index])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3vvyohs9.swift:19:27: error: cannot find 'strings' in scope\n \
    \           result.append(strings[index])\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let len = arr.count\n\
    \    guard len > 0 else { return [] }\n    let min = arr.min()!\n    let max =\
    \ arr.max()!\n    \n    let digits = Int32(max).digitsString(\n        withWidth:\
    \ 4,\n        padding: .left,\n        minimumIntegerDigits: 6,\n        usesGrouping:\
    \ false)\n    let digitsCount = digits.count\n\n    var res = [String]()\n\n \
    \   for i in 0..<digitsCount {\n        let digit = Int(digits[i])\n        guard\
    \ digit > 0 && digit < 10 else { continue }\n        \n        let name = digits[digit]\n\
    \        if digit == min {\n            res.append(name + \" One\")\n        }\
    \ else if digit == max {\n            res.append(name + \" Nine\")\n        }\
    \ else {\n            res.append(name + digits[digit])\n        }\n    }\n   \
    \ \n    res.reverse()\n    \n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4znl65vy.swift:20:29: error: value of type 'Int32' has no member\
    \ 'digitsString'\n    let digits = Int32(max).digitsString(\n                \
    \ ~~~~~~~~~~ ^~~~~~~~~~~~\n/tmp/tmp4znl65vy.swift:22:19: error: cannot infer contextual\
    \ base in reference to member 'left'\n        padding: .left,\n              \
    \   ~^~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for element in arr {\n        guard element >= 0 && element <= 9 else {\n\
    \            continue\n        }\n        switch element {\n        case 1:\n\
    \            append(\"One\")\n        case 2:\n            append(\"Two\")\n \
    \       case 3:\n            append(\"Three\")\n        case 4:\n            append(\"\
    Four\")\n        case 5:\n            append(\"Five\")\n        case 6:\n    \
    \        append(\"Six\")\n        case 7:\n            append(\"Seven\")\n   \
    \     case 8:\n            append(\"Eight\")\n        case 9:\n            append(\"\
    Nine\")\n        default:\n            append(element)\n        }\n    }\n   \
    \ return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpph9xu9eh.swift:22:13: error: cannot find 'append' in scope\n  \
    \          append(\"One\")\n            ^~~~~~\n/tmp/tmpph9xu9eh.swift:24:13:\
    \ error: cannot find 'append' in scope\n            append(\"Two\")\n        \
    \    ^~~~~~\n/tmp/tmpph9xu9eh.swift:26:13: error: cannot find 'append' in scope\n\
    \            append(\"Three\")\n            ^~~~~~\n/tmp/tmpph9xu9eh.swift:28:13:\
    \ error: cannot find 'append' in scope\n            append(\"Four\")\n       \
    \     ^~~~~~\n/tmp/tmpph9xu9eh.swift:30:13: error: cannot find 'append' in scope\n\
    \            append(\"Five\")\n            ^~~~~~\n/tmp/tmpph9xu9eh.swift:32:13:\
    \ error: cannot find 'append' in scope\n            append(\"Six\")\n        \
    \    ^~~~~~\n/tmp/tmpph9xu9eh.swift:34:13: error: cannot find 'append' in scope\n\
    \            append(\"Seven\")\n            ^~~~~~\n/tmp/tmpph9xu9eh.swift:36:13:\
    \ error: cannot find 'append' in scope\n            append(\"Eight\")\n      \
    \      ^~~~~~\n/tmp/tmpph9xu9eh.swift:38:13: error: cannot find 'append' in scope\n\
    \            append(\"Nine\")\n            ^~~~~~\n/tmp/tmpph9xu9eh.swift:40:13:\
    \ error: cannot find 'append' in scope\n            append(element)\n        \
    \    ^~~~~~\n/tmp/tmpph9xu9eh.swift:43:19: error: cannot convert return expression\
    \ of type '()' to return type '[String]'\n    return result.reverse()\n      \
    \     ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  var result = [String]()\n\
    \  for n in arr {\n    if n < 1 {\n      continue\n    }\n    switch n {\n   \
    \ case 1:\n      result.append(getNameFromNumber(1))\n    case 2:\n      result.append(getNameFromNumber(2))\n\
    \    case 3:\n      result.append(getNameFromNumber(3))\n    case 4:\n      result.append(getNameFromNumber(4))\n\
    \    case 5:\n      result.append(getNameFromNumber(5))\n    case 6:\n      result.append(getNameFromNumber(6))\n\
    \    case 7:\n      result.append(getNameFromNumber(7))\n    case 8:\n      result.append(getNameFromNumber(8))\n\
    \    case 9:\n      result.append(getNameFromNumber(9))\n    default:\n      break\n\
    \    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy70kva1i.swift:22:21: error: cannot find 'getNameFromNumber' in\
    \ scope\n      result.append(getNameFromNumber(1))\n                    ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpy70kva1i.swift:24:21: error: cannot find 'getNameFromNumber' in scope\n\
    \      result.append(getNameFromNumber(2))\n                    ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpy70kva1i.swift:26:21: error: cannot find 'getNameFromNumber' in scope\n\
    \      result.append(getNameFromNumber(3))\n                    ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpy70kva1i.swift:28:21: error: cannot find 'getNameFromNumber' in scope\n\
    \      result.append(getNameFromNumber(4))\n                    ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpy70kva1i.swift:30:21: error: cannot find 'getNameFromNumber' in scope\n\
    \      result.append(getNameFromNumber(5))\n                    ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpy70kva1i.swift:32:21: error: cannot find 'getNameFromNumber' in scope\n\
    \      result.append(getNameFromNumber(6))\n                    ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpy70kva1i.swift:34:21: error: cannot find 'getNameFromNumber' in scope\n\
    \      result.append(getNameFromNumber(7))\n                    ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpy70kva1i.swift:36:21: error: cannot find 'getNameFromNumber' in scope\n\
    \      result.append(getNameFromNumber(8))\n                    ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpy70kva1i.swift:38:21: error: cannot find 'getNameFromNumber' in scope\n\
    \      result.append(getNameFromNumber(9))\n                    ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    let arr2 = arr.map{ $0 < 0 ? -$0 : $0 }\n \
    \   guard arr2.count > 0 else {\n        return []\n    }\n    let max = arr2.max()\n\
    \    guard max < 10 else {\n        return []\n    }\n    let tens = (0..9).map{\
    \ Int(\"\\(max)\\($0)\", radix: 16) }\n    let zeros = (max * 10..<max).map{ Int(\"\
    \\($0)\", radix: 16) }\n    guard max <= 9 else {\n        return []\n    }\n\
    \    arr2.forEach { i in\n        if i >= 1 && i <= 9 {\n            arr2.remove(at:\
    \ i)\n            arr2.insert(i, tens[i-1]!)\n            arr2.insert(i, zeros[i-9]!)\n\
    \        }\n    }\n    return arr2.map{ String(i) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvzln69wj.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpvzln69wj.swift:23:11: error: value of optional type 'Int?' must be\
    \ unwrapped to a value of type 'Int'\n    guard max < 10 else {\n          ^\n\
    /tmp/tmpvzln69wj.swift:23:11: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    guard max < 10 else {\n          ^\n\
    \              ?? <#default value#>\n/tmp/tmpvzln69wj.swift:23:11: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    guard\
    \ max < 10 else {\n          ^\n             !\n/tmp/tmpvzln69wj.swift:26:18:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    let tens\
    \ = (0..9).map{ Int(\"\\(max)\\($0)\", radix: 16) }\n                 ^~\n   \
    \              ...\n/tmp/tmpvzln69wj.swift:27:18: error: value of optional type\
    \ 'Int?' must be unwrapped to a value of type 'Int'\n    let zeros = (max * 10..<max).map{\
    \ Int(\"\\($0)\", radix: 16) }\n                 ^\n/tmp/tmpvzln69wj.swift:27:18:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    let zeros = (max * 10..<max).map{ Int(\"\\($0)\", radix: 16) }\n\
    \                 ^\n                 (   ?? <#default value#>)\n/tmp/tmpvzln69wj.swift:27:18:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    let zeros = (max * 10..<max).map{ Int(\"\\($0)\", radix: 16) }\n\
    \                 ^\n                    !\n/tmp/tmpvzln69wj.swift:27:29: error:\
    \ value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n \
    \   let zeros = (max * 10..<max).map{ Int(\"\\($0)\", radix: 16) }\n         \
    \                   ^\n/tmp/tmpvzln69wj.swift:27:29: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n    let zeros =\
    \ (max * 10..<max).map{ Int(\"\\($0)\", radix: 16) }\n                       \
    \     ^\n                            (   ?? <#default value#>)\n/tmp/tmpvzln69wj.swift:27:29:\
    \ note: force-unwrap using '!' to abort execution if "
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let digits = String(arr)\n\
    \    let startsWithOne = digits[digits.startIndex..<digits.startIndex.advancedBy(2)]\
    \ == \"10\"\n    return startsWithOne ?\n        [\n            digits[digits.startIndex.advancedBy(0)..<digits.startIndex.advancedBy(1)],\n\
    \            digits[digits.startIndex.advancedBy(1)..<digits.startIndex.advancedBy(2)],\n\
    \            digits[digits.startIndex.advancedBy(2)..<digits.startIndex.advancedBy(3)],\n\
    \            digits[digits.startIndex.advancedBy(3)..<digits.startIndex.advancedBy(4)],\n\
    \            digits[digits.startIndex.advancedBy(4)..<digits.startIndex.advancedBy(5)],\n\
    \            digits[digits.startIndex.advancedBy(5)..<digits.startIndex.advancedBy(6)],\n\
    \            digits[digits.startIndex.advancedBy(6)..<digits.startIndex.advancedBy(7)],\n\
    \            digits[digits.startIndex.advancedBy(7)..<digits.startIndex.advancedBy(8)],\n\
    \            digits[digits.startIndex.advancedBy(8)..<digits.startIndex.advancedBy(9)],\n\
    \            digits[digits.startIndex.advancedBy(9)..<digits.startIndex.advancedBy(10)],\n\
    \        ] :\n        [\n            digits[digits.startIndex.advancedBy(0)..<digits.startIndex.advancedBy(1)],\n\
    \            digits[digits.startIndex.advancedBy(1)..<digits.startIndex.advancedBy(2)],\n\
    \            digits[digits.startIndex.advancedBy(2)..<digits.startIndex.advancedBy(3)],\n\
    \            digits[digits.startIndex.advancedBy(3)..<digits.startIndex.advancedBy(4)],\n\
    \            digits[digits.startIndex.advancedBy(4)..<digits.startIndex.advancedBy(5)],\n\
    \            digits[digits.startIndex.advancedBy(5)..<digits.startIndex.advancedBy(6)],\n\
    \            digits[digits.startIndex.advancedBy(6)..<digits.startIndex.advancedBy(7)],\n\
    \            digits[digits.startIndex.advancedBy(7)..<digits.startIndex.advancedBy(8)],\n\
    \            digits[digits.startIndex.advancedBy(8)..<digits.startIndex.advancedBy(9)],\n\
    \            digits[digits.startIndex.advancedBy(9)..<digits.startIndex.advancedBy(10)],\n\
    \        ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmphuu80xkl.swift:15:18: error: no exact matches in call to initializer\
    \ \n    let digits = String(arr)\n                 ^\nSwift.String:4:12: note:\
    \ candidate requires that the types 'Int' and 'Character' be equivalent (requirement\
    \ specified as 'S.Element' == 'Character')\n    public init<S>(_ characters: S)\
    \ where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate requires that the types 'String.Element' (aka 'Character') and\
    \ 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tsort.Sort(func(i, j\
    \ int) bool {\n\t\treturn arr[i] >= 1\n\t\t\t&& arr[j] >= 9\n\t\t\t&& arr[i] <=\
    \ 9\n\t\t\t&& arr[j] <= 9\n\t})\n\tsort.Sort(func(i, j int) bool {\n\t\treturn\
    \ arr[i] >= 2\n\t\t\t&& arr[j] >= 8\n\t\t\t&& arr[i] <= 8\n\t\t\t&& arr[j] <=\
    \ 8\n\t})\n\tfor idx, val := range arr {\n\t\tarr[idx] = StringInt(val)\n\t}\n\
    \treturn arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpymx1t5p8.swift:15:12: error: expected expression in list of expressions\n\
    \        sort.Sort(func(i, j int) bool {\n                  ^\n/tmp/tmpymx1t5p8.swift:15:16:\
    \ error: expected identifier in function declaration\n        sort.Sort(func(i,\
    \ j int) bool {\n                      ^\n/tmp/tmpymx1t5p8.swift:27:9: error:\
    \ expected 'in' after for-each pattern\n        for idx, val := range arr {\n\
    \               ^\n/tmp/tmpymx1t5p8.swift:27:9: error: expected Sequence expression\
    \ for for-each loop\n        for idx, val := range arr {\n               ^\n/tmp/tmpymx1t5p8.swift:15:2:\
    \ error: cannot find 'sort' in scope\n        sort.Sort(func(i, j int) bool {\n\
    \        ^~~~\n/tmp/tmpymx1t5p8.swift:30:9: error: cannot convert return expression\
    \ of type '[Int]' to return type '[String]'\n        return arr\n            \
    \   ^\n/tmp/tmpymx1t5p8.swift:30:9: note: arguments to generic parameter 'Element'\
    \ ('Int' and 'String') are expected to be equal\n        return arr\n        \
    \       ^\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var numbers = [Int]()\n\
    \    for number in arr {\n        if number <= 9 {\n            numbers.append(number)\n\
    \        } else {\n            numbers.append(Int64(number))\n        }\n    }\n\
    \    let numbers = numbers.sorted(by: <)\n    let reverse = numbers.reversed()\n\
    \    var result = reverse.map{\n        switch Int($0) {\n        case 1, -1:\
    \ return\n        case 9: return \"Nine\"\n        default:\n            return\
    \ String($0)\n        }\n    }\n    if result.count == 0 {\n        return nil\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpknsmlmpa.swift:20:28: error: cannot convert value of type 'Int64'\
    \ to expected argument type 'Int'\n            numbers.append(Int64(number))\n\
    \                           ^\n                           Int(         )\n/tmp/tmpknsmlmpa.swift:23:9:\
    \ error: invalid redeclaration of 'numbers'\n    let numbers = numbers.sorted(by:\
    \ <)\n        ^\n/tmp/tmpknsmlmpa.swift:15:9: note: 'numbers' previously declared\
    \ here\n    var numbers = [Int]()\n        ^\n/tmp/tmpknsmlmpa.swift:34:16: error:\
    \ 'nil' is incompatible with return type '[String]'\n        return nil\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if !arr.isEmpty {\n        arr.sortInPlace(&compareNumber)\n        arr.reverse()\n\
    \        for idx in 0..<arr.count {\n            let num = arr[idx]\n        \
    \    if num != -1 {\n                result.append(numberToName(num))\n      \
    \      }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsa1p310f.swift:17:26: error: cannot find 'compareNumber' in scope\n\
    \        arr.sortInPlace(&compareNumber)\n                         ^~~~~~~~~~~~~\n\
    /tmp/tmpsa1p310f.swift:17:13: error: value of type '[Int]' has no member 'sortInPlace'\n\
    \        arr.sortInPlace(&compareNumber)\n        ~~~ ^~~~~~~~~~~\n/tmp/tmpsa1p310f.swift:18:13:\
    \ error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n\
    \        arr.reverse()\n        ~~~ ^\n/tmp/tmpsa1p310f.swift:22:31: error: cannot\
    \ find 'numberToName' in scope\n                result.append(numberToName(num))\n\
    \                              ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >=\
    \ 1 else {\n        return []\n    }\n    \n    switch arr.count {\n    case 1...9:\
    \ //Nothing to do here\n        return arr\n    case 0...8:\n        if arr[0]\
    \ == 1 {\n            return [\"One\"]\n        } else {\n            return [\"\
    Zero\", \"One\"]\n        }\n    case 7...13:\n        return [\"Seven\", \"Eight\"\
    , \"Nine\"]\n    case 12...18:\n        if arr[0] == 1 {\n            return [\"\
    Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\"\
    ]\n        } else {\n            return [\"Twelve\", \"Ten\", \"Eleven\", \"Fourteen\"\
    , \"Eightteen\", \"Sixteen\", \"Seventeen\", \"Nineteen\"]\n        }\n    case\
    \ 19...23:\n        return [\"Nineteen\", \"Twenty\", \"Thirty\", \"Forty\", \"\
    Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n    case 24...29:\n\
    \        return [\"Twenty\", \"Forty\", \"Eighty\", \"Ninety\"]\n    default:\n\
    \        let reversed = reverse(arr)\n        return by_length(reversed)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfwd43t6d.swift:21:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpfwd43t6d.swift:21:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmpfwd43t6d.swift:41:24: error: cannot find 'reverse' in scope\n        let\
    \ reversed = reverse(arr)\n                       ^~~~~~~\n/tmp/tmpfwd43t6d.swift:42:26:\
    \ error: missing argument label 'arr:' in call\n        return by_length(reversed)\n\
    \                         ^\n                         arr: \n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ { return [] }\n    var output = [String]()\n    let low = arr[0]\n    let high\
    \ = arr[arr.count-1]\n    \n    func by_number(n: Int, arr: [Int]) -> [String]\
    \ {\n        if n == 1 {\n            output = append(output, \"One\")\n     \
    \       return output\n        }\n        \n        if n == 2 {\n            output\
    \ = append(output, \"Two\")\n            return output\n        }\n        \n\
    \        if n == 3 {\n            output = append(output, \"Three\")\n       \
    \     return output\n        }\n        \n        if n == 4 {\n            output\
    \ = append(output, \"Four\")\n            return output\n        }\n        \n\
    \        if n == 5 {\n            output = append(output, \"Five\")\n        \
    \    return output\n        }\n        \n        if n == 6 {\n            output\
    \ = append(output, \"Six\")\n            return output\n        }\n        \n\
    \        if n == 7 {\n            output = append(output, \"Seven\")\n       \
    \     return output\n        }\n        \n        if n == 8 {\n            output\
    \ = append(output, \"Eight\")\n            return output\n        }\n        \n\
    \        if n == 9 {\n            output = append(output, \"Nine\")\n        \
    \    return output\n        }\n        \n        if n >= 10 && n <= 9 {\n    \
    \        let lower = arr[(n - 1)]\n            let upper = arr[n - 2]\n      \
    \      \n            if lower < n && n < high {\n                output.append(by_number(n,\
    \ arr))\n            }\n            else if lower >= n && lower < high {\n   \
    \             output = append(output, \"One\")\n                return output\n\
    \            }\n            else if n > lower && n < high {\n                output\
    \ = append(output, \"Two\")\n                return output\n            }\n  \
    \          else if lower >= n {\n                output = append(output, \"One\"\
    )\n                return output\n            }\n            else if n > lower\
    \ {\n                output = append(output, \"Two\")\n                return\
    \ output\n            }\n            else if upper >= n {\n                output\
    \ = append(output, \"Three\")\n                return output\n            }\n\
    \            else {\n                output = append(output, \"Four\")\n     \
    \           return output\n            }\n        }\n        \n        return\
    \ []\n    }\n    \n    output = by_number(low, arr)\n    output = by_number(high,\
    \ output)\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk6x_oil7.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() { return [] }\n           ^      ~~\n    \
    \              \n/tmp/tmpk6x_oil7.swift:22:22: error: cannot find 'append' in\
    \ scope\n            output = append(output, \"One\")\n                     ^~~~~~\n\
    /tmp/tmpk6x_oil7.swift:27:22: error: cannot find 'append' in scope\n         \
    \   output = append(output, \"Two\")\n                     ^~~~~~\n/tmp/tmpk6x_oil7.swift:32:22:\
    \ error: cannot find 'append' in scope\n            output = append(output, \"\
    Three\")\n                     ^~~~~~\n/tmp/tmpk6x_oil7.swift:37:22: error: cannot\
    \ find 'append' in scope\n            output = append(output, \"Four\")\n    \
    \                 ^~~~~~\n/tmp/tmpk6x_oil7.swift:42:22: error: cannot find 'append'\
    \ in scope\n            output = append(output, \"Five\")\n                  \
    \   ^~~~~~\n/tmp/tmpk6x_oil7.swift:47:22: error: cannot find 'append' in scope\n\
    \            output = append(output, \"Six\")\n                     ^~~~~~\n/tmp/tmpk6x_oil7.swift:52:22:\
    \ error: cannot find 'append' in scope\n            output = append(output, \"\
    Seven\")\n                     ^~~~~~\n/tmp/tmpk6x_oil7.swift:57:22: error: cannot\
    \ find 'append' in scope\n            output = append(output, \"Eight\")\n   \
    \                  ^~~~~~\n/tmp/tmpk6x_oil7.swift:62:22: error: cannot find 'append'\
    \ in scope\n            output = append(output, \"Nine\")\n                  \
    \   ^~~~~~\n/tmp/tmpk6x_oil7.swift:71:24: error: no exact matches in call to instance\
    \ method 'append'\n                output.append(by_number(n, arr))\n        \
    \               ^\n/tmp/tmpk6x_oil7.swift:71:24: note: candidate has partially\
    \ matching parameter list (contentsOf: __owned [String])\n                output.append(by_number(n,\
    \ arr))\n                       ^\n/tmp/tmpk6x_oil7.swift:71:24: note: candidate\
    \ has partially matching parameter list (contentsOf: __owned [String])\n     \
    \           output.append(by_number(n, arr))\n                       ^\n/tmp/tmpk6x_oil7.swift:71:40:\
    \ error: missing argument labels 'n:arr:' in call\n                out"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    func next_to_one_digit_string(num:\
    \ Int) -> String {\n        let str = String(num)\n        let zeroCount = str.prefix(3).count\n\
    \        let zeroStr = String(count: zeroCount < 1 ? zeroCount * 3 - 1 : zeroCount\
    \ - 1, repeatedValue: \"Zero\")\n        return zeroStr + str\n    }\n\n    func\
    \ get_digit(current: Int, arr: [Int]) -> String {\n        let digit = String(arr[current])\n\
    \        if current < 9 { // if the current character is 9 or less than 9, then\
    \ it's an empty digit, don't append it\n            return digit\n        }\n\
    \        let remainder = current % 10\n        let isFirstDigit = current == 0\n\
    \        let isLastDigit = current == arr.count\n        if isFirstDigit || isLastDigit\
    \ { // if the current character is the first or last digit, then add \"One\" or\
    \ \"Two\", if possible\n            let first = String(arr[current - 1])\n   \
    \         let second = String(arr[current + 1])\n            if current == arr.count\
    \ - 1 { // if the current character is the last digit, then add \"Nine\"\n   \
    \             return \"Nine\"\n            }\n            if first != \"\" {\n\
    \                return \"One\"\n            }\n            if second != \"\"\
    \ {\n                return \"Two\"\n            }\n            return digit\n\
    \        }\n        if current == 9 { // if the current character is 9, then add\
    \ \"Nine\"\n            return \"Nine\"\n        }\n        return digit\n   \
    \ }\n\n    func getSorted(input: [Int]) -> [String] {\n        var output = input\n\
    \        let isLast = output.count == 9\n        if !isLast {\n            for\
    \ index in 0..<output.count {\n                output[index] = Int(output[index])!\n\
    \                output[index] = getDigit(index, output)\n            }\n    \
    \        output = output.reversed()\n        }\n        return isLast ? output\
    \ : output.map {\n            let zeroCount = $0.prefix(3).count\n           \
    \ let zeroStr = String(count: zeroCount < 1 ? zeroCount * 3 - 1 : zeroCount -\
    \ 1, repeatedValue: \"Zero\")\n            return zeroStr + $0\n        }\n  \
    \  }\n\n    return getSorted(arr).map {\n        let zeroCount = $0.prefix(3).count\n\
    \        let zeroStr = String(count: zeroCount < 1 ? zeroCount * 3 - 1 : zeroCount\
    \ - 1, repeatedValue: \"Zero\")\n        return zeroStr + $0\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuulsk35j.swift:18:103: error: extra argument 'repeatedValue' in\
    \ call\n        let zeroStr = String(count: zeroCount < 1 ? zeroCount * 3 - 1\
    \ : zeroCount - 1, repeatedValue: \"Zero\")\n                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~\n\
    /tmp/tmpuulsk35j.swift:55:37: error: missing argument label 'exactly:' in call\n\
    \                output[index] = Int(output[index])!\n                       \
    \             ^\n                                    exactly: \n/tmp/tmpuulsk35j.swift:56:33:\
    \ error: cannot find 'getDigit' in scope\n                output[index] = getDigit(index,\
    \ output)\n                                ^~~~~~~~\n/tmp/tmpuulsk35j.swift:61:32:\
    \ error: value of type 'Int' has no member 'prefix'\n            let zeroCount\
    \ = $0.prefix(3).count\n                            ~~ ^~~~~~\n/tmp/tmpuulsk35j.swift:67:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return getSorted(arr).map\
    \ {\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014543
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let (first, last)\
    \ = arr.span(where: {\n        $0 > 0 && $0 < 10\n    })\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n\n    let reversed = last.reverse()\n    let firstString\
    \ = first.map {\n        switch $0 {\n        case 1: return \"One\"\n       \
    \ case 2: return \"Two\"\n        case 3: return \"Three\"\n        case 4: return\
    \ \"Four\"\n        case 5: return \"Five\"\n        case 6: return \"Six\"\n\
    \        case 7: return \"Seven\"\n        case 8: return \"Eight\"\n        case\
    \ 9: return \"Nine\"\n        }\n    }\n\n    return firstString.append(reversed)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0bl2t1bh.swift:15:29: error: value of type '[Int]' has no member\
    \ 'span'\n    let (first, last) = arr.span(where: {\n                        ~~~\
    \ ^~~~\n/tmp/tmp0bl2t1bh.swift:18:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.reduce([String]())\
    \ { $0 + [One[$1]] + [$0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpog_blgks.swift:15:43: error: cannot find 'One' in scope\n    return\
    \ arr.reduce([String]()) { $0 + [One[$1]] + [$0] }\n                         \
    \                 ^~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr == nil ||\
    \ len(arr) == 0 {\n        return []\n    }\n    var names = [String]()\n    for\
    \ i in arr {\n        names.append(stringWithDigits(i))\n    }\n    let sortedNames\
    \ = names.sorted(by: { (lhs, rhs) -> Bool in\n        return lhs.utf8.count <\
    \ rhs.utf8.count\n    })\n    let reversedNames = sortedNames.reversed()\n   \
    \ return reversedNames.map { nameWithDigits($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdifp7x57.swift:15:22: error: cannot find 'len' in scope\n    if\
    \ arr == nil || len(arr) == 0 {\n                     ^~~\n/tmp/tmpdifp7x57.swift:20:22:\
    \ error: cannot find 'stringWithDigits' in scope\n        names.append(stringWithDigits(i))\n\
    \                     ^~~~~~~~~~~~~~~~\n/tmp/tmpdifp7x57.swift:26:32: error: cannot\
    \ find 'nameWithDigits' in scope\n    return reversedNames.map { nameWithDigits($0)\
    \ }\n                               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    switch len(arr) {\n\
    \    case 0:\n        return []\n    case 1:\n        return [\"One\"]\n    case\
    \ 2:\n        return [\"One\", \"Two\"]\n    case 3:\n        return [\"One\"\
    , \"Two\", \"Three\"]\n    case 4:\n        return [\"One\", \"Two\", \"Three\"\
    , \"Four\"]\n    case 5:\n        return [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\"]\n    case 6:\n        return [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\"]\n    case 7:\n        return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\"]\n    case 8:\n        return [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"]\n   \
    \ case 9:\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"]\n    default:\n        let start = arr[0]\n\
    \        let end = arr[arr.count - 1]\n        return reverse_sort(arr.prefix(start)).map\
    \ { $0.map(String.init(describing:)) ?? \"One\" }\n            .map { \"\\($0)\"\
    .lowercased() } + reverse_sort(arr.suffix(end)).map { $0.map(String.init(describing:))\
    \ ?? \"One\" }\n            .map { \"\\($0)\".lowercased() }\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmps43qzpbp.swift:15:12: error: cannot find 'len' in scope\n    switch\
    \ len(arr) {\n           ^~~\n/tmp/tmps43qzpbp.swift:39:16: error: cannot find\
    \ 'reverse_sort' in scope\n        return reverse_sort(arr.prefix(start)).map\
    \ { $0.map(String.init(describing:)) ?? \"One\" }\n               ^~~~~~~~~~~~\n\
    /tmp/tmps43qzpbp.swift:40:45: error: cannot find 'reverse_sort' in scope\n   \
    \         .map { \"\\($0)\".lowercased() } + reverse_sort(arr.suffix(end)).map\
    \ { $0.map(String.init(describing:)) ?? \"One\" }\n                          \
    \                  ^~~~~~~~~~~~\n/tmp/tmps43qzpbp.swift:39:16: error: the compiler\
    \ is unable to type-check this expression in reasonable time; try breaking up\
    \ the expression into distinct sub-expressions\n        return reverse_sort(arr.prefix(start)).map\
    \ { $0.map(String.init(describing:)) ?? \"One\" }\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014527
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty()\
    \ else {\n        return []\n    }\n    var names = [String]()\n    var i = arr.firstIndex(of:\
    \ 0)\n    while i < arr.endIndex {\n        var name = \"\"\n        if i > 0\
    \ {\n            name += names[i]\n        }\n        if i == arr.firstIndex(of:\
    \ 9) {\n            name += \"Nine\"\n        } else {\n            name += names[i]\n\
    \        }\n        i += 1\n        if i >= arr.endIndex {\n            name +=\
    \ \"Zero\"\n        } else {\n            name += names[i]\n        }\n      \
    \  names.append(name)\n    }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjhrf6rcq.swift:15:16: error: cannot call value of non-function\
    \ type 'Bool'\n    guard !arr.isEmpty() else {\n               ^      ~~\n   \
    \                   \n/tmp/tmpjhrf6rcq.swift:20:11: error: value of optional type\
    \ 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped to a value of type\
    \ 'Array<Int>.Index' (aka 'Int')\n    while i < arr.endIndex {\n          ^\n\
    /tmp/tmpjhrf6rcq.swift:20:11: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    while i < arr.endIndex {\n          ^\n\
    \            ?? <#default value#>\n/tmp/tmpjhrf6rcq.swift:20:11: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    while\
    \ i < arr.endIndex {\n          ^\n           !\n/tmp/tmpjhrf6rcq.swift:22:12:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n        if i\
    \ > 0 {\n           ^\n/tmp/tmpjhrf6rcq.swift:22:12: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        if i >\
    \ 0 {\n           ^\n             ?? <#default value#>\n/tmp/tmpjhrf6rcq.swift:22:12:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if i > 0 {\n           ^\n            !\n/tmp/tmpjhrf6rcq.swift:23:27:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n           \
    \ name += names[i]\n                          ^\n/tmp/tmpjhrf6rcq.swift:23:27:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            name += names[i]\n                          ^\n         \
    \                   ?? <#default value#>\n/tmp/tmpjhrf6rcq.swift:23:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            name += names[i]\n                          ^\n                 \
    \          !\n/tmp/tmpjhrf6rcq.swift:28:27: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped "
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  return sort(arr).reverse().map\
    \ { numberToString($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmploc7ie0q.swift:15:10: error: cannot find 'sort' in scope\n  return\
    \ sort(arr).reverse().map { numberToString($0) }\n         ^~~~\n/tmp/tmploc7ie0q.swift:15:36:\
    \ error: cannot find 'numberToString' in scope\n  return sort(arr).reverse().map\
    \ { numberToString($0) }\n                                   ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tif arr.isEmpty() {\n\
    \t\treturn []\n\t}\n\tnums := arr.sorted()\n\tvar arr2 : [String] = []\n\tswitch\
    \ nums.last {\n\tcase 1:\n\t\tarr2 = append(arr2, \"One\")\n\tcase 2:\n\t\tarr2\
    \ = append(arr2, \"Two\")\n\tcase 3:\n\t\tarr2 = append(arr2, \"Three\")\n\tcase\
    \ 4:\n\t\tarr2 = append(arr2, \"Four\")\n\tcase 5:\n\t\tarr2 = append(arr2, \"\
    Five\")\n\tcase 6:\n\t\tarr2 = append(arr2, \"Six\")\n\tcase 7:\n\t\tarr2 = append(arr2,\
    \ \"Seven\")\n\tcase 8:\n\t\tarr2 = append(arr2, \"Eight\")\n\tcase 9:\n\t\tarr2\
    \ = append(arr2, \"Nine\")\n\tdefault:\n\t\tbreak\n\t}\n\treturn arr2\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoaj3tukv.swift:18:6: error: consecutive statements on a line must\
    \ be separated by ';'\n        nums := arr.sorted()\n            ^\n         \
    \   ;\n/tmp/tmpoaj3tukv.swift:18:7: error: expected expression\n        nums :=\
    \ arr.sorted()\n             ^\n/tmp/tmpoaj3tukv.swift:15:9: error: cannot call\
    \ value of non-function type 'Bool'\n        if arr.isEmpty() {\n            \
    \   ^      ~~\n                      \n/tmp/tmpoaj3tukv.swift:18:2: error: cannot\
    \ find 'nums' in scope\n        nums := arr.sorted()\n        ^~~~\n/tmp/tmpoaj3tukv.swift:20:9:\
    \ error: cannot find 'nums' in scope\n        switch nums.last {\n           \
    \    ^~~~\n/tmp/tmpoaj3tukv.swift:22:10: error: cannot find 'append' in scope\n\
    \                arr2 = append(arr2, \"One\")\n                       ^~~~~~\n\
    /tmp/tmpoaj3tukv.swift:24:10: error: cannot find 'append' in scope\n         \
    \       arr2 = append(arr2, \"Two\")\n                       ^~~~~~\n/tmp/tmpoaj3tukv.swift:26:10:\
    \ error: cannot find 'append' in scope\n                arr2 = append(arr2, \"\
    Three\")\n                       ^~~~~~\n/tmp/tmpoaj3tukv.swift:28:10: error:\
    \ cannot find 'append' in scope\n                arr2 = append(arr2, \"Four\"\
    )\n                       ^~~~~~\n/tmp/tmpoaj3tukv.swift:30:10: error: cannot\
    \ find 'append' in scope\n                arr2 = append(arr2, \"Five\")\n    \
    \                   ^~~~~~\n/tmp/tmpoaj3tukv.swift:32:10: error: cannot find 'append'\
    \ in scope\n                arr2 = append(arr2, \"Six\")\n                   \
    \    ^~~~~~\n/tmp/tmpoaj3tukv.swift:34:10: error: cannot find 'append' in scope\n\
    \                arr2 = append(arr2, \"Seven\")\n                       ^~~~~~\n\
    /tmp/tmpoaj3tukv.swift:36:10: error: cannot find 'append' in scope\n         \
    \       arr2 = append(arr2, \"Eight\")\n                       ^~~~~~\n/tmp/tmpoaj3tukv.swift:38:10:\
    \ error: cannot find 'append' in scope\n                arr2 = append(arr2, \"\
    Nine\")\n                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  let minLen = min(arr),\
    \ maxLen = max(arr)\n  if maxLen > 10 {\n    // A trick here is to sort by length\
    \ first, then sort by value, which is\n    // faster than sort by value, then\
    \ sort by length. Because this is\n    // sorted by length, the minimum length\
    \ is 1.\n    arr = arr.sorted(by: { (a: Int, b: Int) -> Bool in\n      return\
    \ b - a <= 0\n    })\n  }\n\n  var res: [String] = []\n  for (i in arr) {\n  \
    \  let len = (10 - i) as Int\n    if len >= minLen && len <= maxLen {\n      res.append(String(i))\n\
    \    }\n  }\n\n  // reverse result array\n  return res.reversed()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmph4_z10kv.swift:26:10: error: expected ',' separator\n  for (i in\
    \ arr) {\n         ^\n        ,\n/tmp/tmph4_z10kv.swift:26:10: error: expected\
    \ pattern\n  for (i in arr) {\n         ^\n/tmp/tmph4_z10kv.swift:26:18: error:\
    \ expected 'in' after for-each pattern\n  for (i in arr) {\n                 ^\n\
    /tmp/tmph4_z10kv.swift:26:18: error: expected Sequence expression for for-each\
    \ loop\n  for (i in arr) {\n                 ^\n/tmp/tmph4_z10kv.swift:15:23:\
    \ error: missing argument for parameter #2 in call\n  let minLen = min(arr), maxLen\
    \ = max(arr)\n                      ^\n                      , <#[Int]#>\nSwift.min:1:24:\
    \ note: 'min' declared here\n@inlinable public func min<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmph4_z10kv.swift:15:42:\
    \ error: missing argument for parameter #2 in call\n  let minLen = min(arr), maxLen\
    \ = max(arr)\n                                         ^\n                   \
    \                      , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n\
    @inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n    \
    \                   ^\n/tmp/tmph4_z10kv.swift:20:5: error: cannot assign to value:\
    \ 'arr' is a 'let' constant\n    arr = arr.sorted(by: { (a: Int, b: Int) -> Bool\
    \ in\n    ^~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var sorted = [Int]()\n    for i in 0..<arr.count {\n\
    \        if arr[i] == Int(min) {\n            sorted.append(Int(min))\n      \
    \  } else {\n            sorted.append(arr[i])\n        }\n    }\n    sorted.sort()\n\
    \    return sorted.map{\n        if $0 == Int(min) {\n            return \"One\"\
    \n        } else if $0 == Int(max) {\n            return \"Nine\"\n        } else\
    \ {\n            return String($0)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk1xp1rjd.swift:18:22: error: no exact matches in call to initializer\
    \ \n        if arr[i] == Int(min) {\n                     ^\n/tmp/tmpk1xp1rjd.swift:18:22:\
    \ note: found candidate with type '(@escaping (_, _) -> _) -> Int'\n        if\
    \ arr[i] == Int(min) {\n                     ^\n/tmp/tmpk1xp1rjd.swift:18:26:\
    \ error: generic parameter 'T' could not be inferred\n        if arr[i] == Int(min)\
    \ {\n                         ^\nSwift.min:1:24: note: in call to function 'min'\n\
    @inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n    \
    \                   ^\n/tmp/tmpk1xp1rjd.swift:19:27: error: no exact matches in\
    \ call to initializer \n            sorted.append(Int(min))\n                \
    \          ^\n/tmp/tmpk1xp1rjd.swift:19:27: note: found candidate with type '(@escaping\
    \ (_, _) -> _) -> Int'\n            sorted.append(Int(min))\n                \
    \          ^\n/tmp/tmpk1xp1rjd.swift:19:31: error: generic parameter 'T' could\
    \ not be inferred\n            sorted.append(Int(min))\n                     \
    \         ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpk1xp1rjd.swift:26:18: error: no exact matches in call to initializer\
    \ \n        if $0 == Int(min) {\n                 ^\n/tmp/tmpk1xp1rjd.swift:26:18:\
    \ note: found candidate with type '(@escaping (_, _) -> _) -> Int'\n        if\
    \ $0 == Int(min) {\n                 ^\n/tmp/tmpk1xp1rjd.swift:26:22: error: generic\
    \ parameter 'T' could not be inferred\n        if $0 == Int(min) {\n         \
    \            ^\nSwift.min:1:24: note: in call to function 'min'\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let max = max_index_in_array(arr)\n\
    \n    var result = [String]()\n    for i in 0..<max {\n        let number = arr[i]\n\
    \        if number <= 9 {\n            let name = arr[number]\n            result.append(name)\n\
    \        }\n    }\n\n    result.reverse()\n\n    for index in 0..<max {\n    \
    \    let name = result[index]\n        if name == nil {\n            continue\n\
    \        }\n        let index = index * 10 + Int(name!)!\n        let name = names[index]\n\
    \        result[index] = name\n    }\n\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpehscx6v_.swift:15:15: error: cannot find 'max_index_in_array' in\
    \ scope\n    let max = max_index_in_array(arr)\n              ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpehscx6v_.swift:34:20: error: cannot find 'names' in scope\n        let\
    \ name = names[index]\n                   ^~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr == nil {\n\
    \        return nil\n    }\n    var result = [String]()\n    var lengths = [Int]()\n\
    \    var lastLength = 0\n    for number in arr {\n        if number == -1 {\n\
    \            lastLength = 0\n            continue\n        }\n        switch number\
    \ {\n        case 0:\n            lengths = append(lengths, 0)\n        case 1,\
    \ 10, 11:\n            lengths = append(lengths, 0)\n        case 2, 9:\n    \
    \        lengths = append(lengths, 1)\n        case 3, 8, 7:\n            lengths\
    \ = append(lengths, 1)\n        case 4:\n            lengths = append(lengths,\
    \ 2)\n        case 5, 6:\n            lengths = append(lengths, 2)\n        case\
    \ 8, 6:\n            lengths = append(lengths, 3)\n        case 9:\n         \
    \   lengths = append(lengths, 3)\n        default:\n            lengths = append(lengths,\
    \ number - lastLength + 1)\n        }\n        lastLength = number\n    }\n  \
    \  for index, length := range lengths {\n        if length > 0 {\n           \
    \ if length > 1 {\n                switch length - 1 {\n                case 2,\
    \ 3:\n                    result = append(result, getName(1))\n              \
    \  case 4, 5:\n                    result = append(result, getName(2))\n     \
    \           case 6, 7:\n                    result = append(result, getName(3))\n\
    \                default:\n                    result = append(result, getName(length\
    \ - 1))\n                }\n            } else {\n                result = append(result,\
    \ getName(length))\n            }\n        } else {\n            if index != 0\
    \ {\n                result = append(result, \"One\")\n            } else {\n\
    \                result = append(result, \"Zero\")\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgfx3gdoz.swift:48:14: error: expected 'in' after for-each pattern\n\
    \    for index, length := range lengths {\n             ^\n/tmp/tmpgfx3gdoz.swift:48:14:\
    \ error: expected Sequence expression for for-each loop\n    for index, length\
    \ := range lengths {\n             ^\n/tmp/tmpgfx3gdoz.swift:15:12: warning: comparing\
    \ non-optional value of type '[Int]' to 'nil' always returns false\n    if arr\
    \ == nil {\n       ~~~ ^  ~~~\n/tmp/tmpgfx3gdoz.swift:16:16: error: 'nil' is incompatible\
    \ with return type '[String]'\n        return nil\n               ^\n/tmp/tmpgfx3gdoz.swift:28:23:\
    \ error: cannot find 'append' in scope\n            lengths = append(lengths,\
    \ 0)\n                      ^~~~~~\n/tmp/tmpgfx3gdoz.swift:30:23: error: cannot\
    \ find 'append' in scope\n            lengths = append(lengths, 0)\n         \
    \             ^~~~~~\n/tmp/tmpgfx3gdoz.swift:32:23: error: cannot find 'append'\
    \ in scope\n            lengths = append(lengths, 1)\n                      ^~~~~~\n\
    /tmp/tmpgfx3gdoz.swift:34:23: error: cannot find 'append' in scope\n         \
    \   lengths = append(lengths, 1)\n                      ^~~~~~\n/tmp/tmpgfx3gdoz.swift:36:23:\
    \ error: cannot find 'append' in scope\n            lengths = append(lengths,\
    \ 2)\n                      ^~~~~~\n/tmp/tmpgfx3gdoz.swift:38:23: error: cannot\
    \ find 'append' in scope\n            lengths = append(lengths, 2)\n         \
    \             ^~~~~~\n/tmp/tmpgfx3gdoz.swift:40:23: error: cannot find 'append'\
    \ in scope\n            lengths = append(lengths, 3)\n                      ^~~~~~\n\
    /tmp/tmpgfx3gdoz.swift:42:23: error: cannot find 'append' in scope\n         \
    \   lengths = append(lengths, 3)\n                      ^~~~~~\n/tmp/tmpgfx3gdoz.swift:44:23:\
    \ error: cannot find 'append' in scope\n            lengths = append(lengths,\
    \ number - lastLength + 1)\n                      ^~~~~~\n/tmp/tmpgfx3gdoz.swift:39:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case 8, 6:\n             ^\n/tmp/tmpgfx3gdoz.swift:33:17: note:\
    \ first occurrence of identical literal pattern is here\n        ca"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\
    \ return [] }\n    var lens = [Int]()\n    for n in arr {\n        if n < 0 ||\
    \ n > 9 {\n            continue\n        }\n        lens.append(n)\n    }\n  \
    \  if lens.isEmpty() { return [] }\n    sort.Sort(func(x, y Int) bool { return\
    \ x > y })\n    let reversed = rev(revn(arr))\n    var i = 0\n    for n in lens\
    \ {\n        if n < 1 || n > 9 {\n            continue\n        }\n        if\
    \ i > 0 {\n            reversed[i] = reversed[i-1]\n        }\n        i = i +\
    \ 1\n    }\n    lens.reverse()\n    i = 0\n    var result = [String]()\n    for\
    \ n in lens {\n        if n < 1 || n > 9 {\n            continue\n        }\n\
    \        if i > 0 {\n            result.append(reversed[i])\n        }\n     \
    \   i = i + 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpefxr748i.swift:24:15: error: expected expression in list of expressions\n\
    \    sort.Sort(func(x, y Int) bool { return x > y })\n              ^\n/tmp/tmpefxr748i.swift:24:19:\
    \ error: expected identifier in function declaration\n    sort.Sort(func(x, y\
    \ Int) bool { return x > y })\n                  ^\n/tmp/tmpefxr748i.swift:23:13:\
    \ error: cannot call value of non-function type 'Bool'\n    if lens.isEmpty()\
    \ { return [] }\n            ^      ~~\n                   \n/tmp/tmpefxr748i.swift:24:5:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(func(x, y Int) bool { return\
    \ x > y })\n    ^~~~\n/tmp/tmpefxr748i.swift:25:20: error: cannot find 'rev' in\
    \ scope\n    let reversed = rev(revn(arr))\n                   ^~~\n/tmp/tmpefxr748i.swift:25:24:\
    \ error: cannot find 'revn' in scope\n    let reversed = rev(revn(arr))\n    \
    \                   ^~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr == [] {\n\
    \        return arr\n    }\n    let mut arr2 = arr\n    arr2.reverse()\n    let\
    \ mut name = \"\"\n    for i in arr2 {\n        name += stringFromDigit(i)\n \
    \   }\n    return arr == arr2 ? [\"\"] : name\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9buffrxh.swift:18:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut arr2 = arr\n\
    \            ^\n/tmp/tmp9buffrxh.swift:18:13: note: join the identifiers together\n\
    \    let mut arr2 = arr\n        ~~~~^~~~\n        mutarr2\n/tmp/tmp9buffrxh.swift:18:13:\
    \ note: join the identifiers together with camel-case\n    let mut arr2 = arr\n\
    \        ~~~~^~~~\n        mutArr2\n/tmp/tmp9buffrxh.swift:20:13: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n    let mut name = \"\"\n            ^\n/tmp/tmp9buffrxh.swift:20:13:\
    \ note: join the identifiers together\n    let mut name = \"\"\n        ~~~~^~~~\n\
    \        mutname\n/tmp/tmp9buffrxh.swift:20:13: note: join the identifiers together\
    \ with camel-case\n    let mut name = \"\"\n        ~~~~^~~~\n        mutName\n\
    /tmp/tmp9buffrxh.swift:16:16: error: cannot convert return expression of type\
    \ '[Int]' to return type '[String]'\n        return arr\n               ^\n/tmp/tmp9buffrxh.swift:16:16:\
    \ note: arguments to generic parameter 'Element' ('Int' and 'String') are expected\
    \ to be equal\n        return arr\n               ^\n/tmp/tmp9buffrxh.swift:19:5:\
    \ error: cannot find 'arr2' in scope\n    arr2.reverse()\n    ^~~~\n/tmp/tmp9buffrxh.swift:20:9:\
    \ error: invalid redeclaration of 'mut'\n    let mut name = \"\"\n        ^\n\
    /tmp/tmp9buffrxh.swift:18:9: note: 'mut' previously declared here\n    let mut\
    \ arr2 = arr\n        ^\n/tmp/tmp9buffrxh.swift:21:14: error: cannot find 'arr2'\
    \ in scope\n    for i in arr2 {\n             ^~~~\n/tmp/tmp9buffrxh.swift:24:19:\
    \ error: cannot find 'arr2' in scope\n    return arr == arr2 ? [\"\"] : name\n\
    \                  ^~~~\n/tmp/tmp9buffrxh.swift:24:33: error: cannot find 'name'\
    \ in scope\n    return arr == arr2 ? [\"\"] : name\n                         \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  if len(arr) == 0 {\n\
    \    return []\n  }\n  if arr.len() == 1 {\n    return [\"One\"]\n  }\n  var result:\
    \ [String] = []\n  for i in 0..<arr.count {\n    if i > 0 {\n      result = append(result,\
    \ String(arr[i]))\n    } else {\n      result = append(result, String(arr[i]))\n\
    \    }\n  }\n  return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnuefce1b.swift:15:6: error: cannot find 'len' in scope\n  if len(arr)\
    \ == 0 {\n     ^~~\n/tmp/tmpnuefce1b.swift:18:10: error: value of type '[Int]'\
    \ has no member 'len'\n  if arr.len() == 1 {\n     ~~~ ^~~\n/tmp/tmpnuefce1b.swift:24:16:\
    \ error: cannot find 'append' in scope\n      result = append(result, String(arr[i]))\n\
    \               ^~~~~~\n/tmp/tmpnuefce1b.swift:26:16: error: cannot find 'append'\
    \ in scope\n      result = append(result, String(arr[i]))\n               ^~~~~~\n\
    /tmp/tmpnuefce1b.swift:29:17: error: cannot convert return expression of type\
    \ '()' to return type '[String]'\n  return result.reverse()\n         ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr == nil {\n\
    \        return nil\n    }\n    var names = Array(zip(range(1,10), [\n       \
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\",\n    ]))\n    var reversed = reverse(arr)\n    var result = Array(names)\n\
    \    for i in reversed.indices {\n        result[reversed.startIndex + i] = names[i].1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwjnhx6b_.swift:15:12: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if arr == nil {\n       ~~~\
    \ ^  ~~~\n/tmp/tmpwjnhx6b_.swift:16:16: error: 'nil' is incompatible with return\
    \ type '[String]'\n        return nil\n               ^\n/tmp/tmpwjnhx6b_.swift:18:27:\
    \ error: cannot find 'range' in scope\n    var names = Array(zip(range(1,10),\
    \ [\n                          ^~~~~\n/tmp/tmpwjnhx6b_.swift:21:20: error: cannot\
    \ find 'reverse' in scope\n    var reversed = reverse(arr)\n                 \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    sort.Sort(IntSliceAscending(arr))\n    for i := 0; i < len(arr); i++\
    \ {\n        var current = \"\"\n        if i < 10 {\n            current = \"\
    One\"\n        } else if i < 18 {\n            current = \"Two\"\n        } else\
    \ if i < 36 {\n            current = \"Three\"\n        } else if i < 45 {\n \
    \           current = \"Four\"\n        } else if i < 54 {\n            current\
    \ = \"Five\"\n        } else if i < 63 {\n            current = \"Six\"\n    \
    \    } else if i < 72 {\n            current = \"Seven\"\n        } else if i\
    \ < 81 {\n            current = \"Eight\"\n        } else if i < 90 {\n      \
    \      current = \"Nine\"\n        } else {\n            continue\n        }\n\
    \        result = append(result, current)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmplcgkkv0c.swift:17:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmplcgkkv0c.swift:17:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmplcgkkv0c.swift:17:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmplcgkkv0c.swift:16:5:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(IntSliceAscending(arr))\n\
    \    ^~~~\n/tmp/tmplcgkkv0c.swift:16:15: error: cannot find 'IntSliceAscending'\
    \ in scope\n    sort.Sort(IntSliceAscending(arr))\n              ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return [:] as [String]\n    }\n    var index = 0\n    var result = [String]()\n\
    \    while index < arr.count {\n        guard let first = arr[index] else {\n\
    \            return result\n        }\n        if first >= 1 && first <= 9 {\n\
    \            var temp = first\n            result.append(map[temp])\n        }\n\
    \        index++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7gyp9j7a.swift:16:20: error: cannot convert value of type '[AnyHashable\
    \ : Any]' to type '[String]' in coercion\n        return [:] as [String]\n   \
    \            ~~~~^~~~~~~~~~~\n/tmp/tmp7gyp9j7a.swift:21:15: error: initializer\
    \ for conditional binding must have Optional type, not 'Int'\n        guard let\
    \ first = arr[index] else {\n              ^           ~~~~~~~~~~\n/tmp/tmp7gyp9j7a.swift:26:27:\
    \ error: cannot find 'map' in scope\n            result.append(map[temp])\n  \
    \                        ^~~\n/tmp/tmp7gyp9j7a.swift:28:14: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        index++\n            \
    \ ^~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result = Array<String>(repeating: \"\", count: arr.count)\n\
    \n    // sort the array\n    let sorted = arr.sorted()\n    let range = sorted.first!...sorted.last!\n\
    \n    // reverse the array\n    var reversed = Array<Int>(repeating: Int.max,\
    \ count: arr.count)\n    for i in 0..<arr.count {\n        reversed[i] = sorted[range.index(range.startIndex,\
    \ offsetBy: i)]\n    }\n\n    // convert the integers to string and assign it\
    \ to the array\n    for i in 0..<arr.count {\n        result[i] = String(reversed[i])\n\
    \    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvd1le1s2.swift:25:29: error: no exact matches in call to subscript\
    \ \n        reversed[i] = sorted[range.index(range.startIndex, offsetBy: i)]\n\
    \                            ^\nSwift.Array:16:23: note: candidate expects value\
    \ of type 'Int' for parameter #1 (got 'ClosedRange<Int>.Index')\n    @inlinable\
    \ public subscript(index: Int) -> Element { get set }\n                      ^\n\
    /tmp/tmpvd1le1s2.swift:25:29: note: found candidate with type '(ClosedRange<Int>.Index)\
    \ -> ArraySlice<Int>'\n        reversed[i] = sorted[range.index(range.startIndex,\
    \ offsetBy: i)]\n                            ^\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let (mut ls, mut\
    \ rs) = ([], []);\n    for n in arr {\n        if n > 0 && n < 9 {\n         \
    \   ls.append(names[n]);\n        } else {\n            rs.append(names[n]);\n\
    \        }\n    }\n    rs.reverse();\n    ls.extend(rs);\n    return ls;\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpde3zkch5.swift:15:14: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let (mut ls, mut\
    \ rs) = ([], []);\n             ^\n/tmp/tmpde3zkch5.swift:15:14: note: join the\
    \ identifiers together\n    let (mut ls, mut rs) = ([], []);\n         ~~~~^~\n\
    \         mutls\n/tmp/tmpde3zkch5.swift:15:14: note: join the identifiers together\
    \ with camel-case\n    let (mut ls, mut rs) = ([], []);\n         ~~~~^~\n   \
    \      mutLs\n/tmp/tmpde3zkch5.swift:15:22: error: found an unexpected second\
    \ identifier in constant declaration; is there an accidental break?\n    let (mut\
    \ ls, mut rs) = ([], []);\n                     ^\n/tmp/tmpde3zkch5.swift:15:22:\
    \ note: join the identifiers together\n    let (mut ls, mut rs) = ([], []);\n\
    \                 ~~~~^~\n                 mutrs\n/tmp/tmpde3zkch5.swift:15:22:\
    \ note: join the identifiers together with camel-case\n    let (mut ls, mut rs)\
    \ = ([], []);\n                 ~~~~^~\n                 mutRs\n/tmp/tmpde3zkch5.swift:15:18:\
    \ error: invalid redeclaration of 'mut'\n    let (mut ls, mut rs) = ([], []);\n\
    \                 ^\n/tmp/tmpde3zkch5.swift:15:10: note: 'mut' previously declared\
    \ here\n    let (mut ls, mut rs) = ([], []);\n         ^\n/tmp/tmpde3zkch5.swift:18:13:\
    \ error: cannot find 'ls' in scope\n            ls.append(names[n]);\n       \
    \     ^~\n/tmp/tmpde3zkch5.swift:18:23: error: cannot find 'names' in scope\n\
    \            ls.append(names[n]);\n                      ^~~~~\n/tmp/tmpde3zkch5.swift:20:13:\
    \ error: cannot find 'rs' in scope\n            rs.append(names[n]);\n       \
    \     ^~\n/tmp/tmpde3zkch5.swift:20:23: error: cannot find 'names' in scope\n\
    \            rs.append(names[n]);\n                      ^~~~~\n/tmp/tmpde3zkch5.swift:23:5:\
    \ error: cannot find 'rs' in scope\n    rs.reverse();\n    ^~\n/tmp/tmpde3zkch5.swift:24:5:\
    \ error: cannot find 'ls' in scope\n    ls.extend(rs);\n    ^~\n/tmp/tmpde3zkch5.swift:24:15:\
    \ error: cannot find 'rs' in scope\n    ls.extend(rs);\n              ^~\n/tmp/tmpde3zkch5.swift:25:12:\
    \ error: cannot find 'ls' in scope\n    return ls;\n         "
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var n = arr[0]\n    var digits = [String]()\n    var tens = [String]()\n\
    \    var hundreds = [String]()\n    var thousands = [String]()\n    var ones =\
    \ [String]()\n    var names = [String]()\n    var i = 0\n    while i < arr.count\
    \ {\n        n = arr[i]\n        switch n {\n        case 1:\n            ones.append(\"\
    One\")\n        case 2:\n            ones.append(\"Two\")\n        case 3:\n \
    \           ones.append(\"Three\")\n        case 4:\n            ones.append(\"\
    Four\")\n        case 5:\n            ones.append(\"Five\")\n        case 6:\n\
    \            ones.append(\"Six\")\n        case 7:\n            ones.append(\"\
    Seven\")\n        case 8:\n            ones.append(\"Eight\")\n        case 9:\n\
    \            ones.append(\"Nine\")\n        case 10:\n            tens.append(\"\
    Ten\")\n        case 11:\n            tens.append(\"Eleven\")\n        case 12:\n\
    \            tens.append(\"Twelve\")\n        case 13:\n            tens.append(\"\
    Thirteen\")\n        case 14:\n            tens.append(\"Fourteen\")\n       \
    \ case 15:\n            tens.append(\"Fifteen\")\n        case 16:\n         \
    \   tens.append(\"Sixteen\")\n        case 17:\n            tens.append(\"Seventeen\"\
    )\n        case 18:\n            tens.append(\"Eighteen\")\n        case 19:\n\
    \            tens.append(\"Nineteen\")\n        case 20:\n            hundreds.append(\"\
    Hundred\")\n        case 30:\n            hundreds.append(\"Thousand\")\n    \
    \    case 40:\n            hundreds.append(\"Thousand\")\n        case 50:\n \
    \           hundreds.append(\"Fifty\")\n        case 60:\n            hundreds.append(\"\
    Sixty\")\n        case 70:\n            hundreds.append(\"Seventy\")\n       \
    \ case 80:\n            hundreds.append(\"Hundred\")\n        case 90:\n     \
    \       thousands.append(\"Hundred\")\n        case 100:\n            thousands.append(\"\
    Thousand\")\n        case 200:\n            thousands.append(\"Thousand\")\n \
    \       case 300:\n            thousands.append(\"Fifty\")\n        case 400:\n\
    \            thousands.append(\"Fifty\")\n        case 500:\n            thousands.append(\"\
    Sixty\")\n        case 600:\n            thousands.append(\"Sixty\")\n       \
    \ case 700:\n            thousands.append(\"Seventy\")\n        case 800:\n  \
    \          thousands.append(\"Seventy\")\n        case 900:\n            thousands.append(\"\
    Eighty\")\n        case 1000:\n            thousands.append(\"Eighty\")\n    \
    \    case 2000:\n            thousands.append(\"Ninety\")\n        case 3000:\n\
    \            thousands.append(\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptehf_twe.swift:104:30: error: unterminated string literal\n   \
    \         thousands.append(\"\n                             ^\n/tmp/tmptehf_twe.swift:124:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmptehf_twe.swift:24:25: note: to match this\
    \ opening '{'\n    while i < arr.count {\n                        ^\n/tmp/tmptehf_twe.swift:124:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmptehf_twe.swift:14:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmptehf_twe.swift:104:30: error: missing argument\
    \ for parameter #1 in call\n            thousands.append(\"\n                \
    \             ^\n                             <#String#>\nSwift.Array:6:37: note:\
    \ 'append' declared here\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\n/tmp/tmptehf_twe.swift:26:9:\
    \ error: switch must be exhaustive\n        switch n {\n        ^\n/tmp/tmptehf_twe.swift:26:9:\
    \ note: do you want to add a default clause?\n        switch n {\n        ^\n\
    /tmp/tmptehf_twe.swift:108:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var result = [String]()\n    var reversed =\
    \ arr[1..<arr.count].sorted()\n    var reversedReversed = reversed.reversed()\n\
    \    for i in 0..<reversed.count {\n        if reversed[i] != 0 {\n          \
    \  let number = reversedReversed[i]\n            if number > 0 {\n           \
    \     result.append(\"\\(number)\")\n            } else {\n                result.append(Int(number\
    \ / 10).descriptionFromOneToTen)\n                result.append(number % 10.toString())\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfg_0xnyx.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpfg_0xnyx.swift:23:42: error: no exact matches in call to subscript\
    \ \n            let number = reversedReversed[i]\n                           \
    \              ^\nSwift.ReversedCollection:9:23: note: candidate expects value\
    \ of type 'ReversedCollection<[Int]>.Index' for parameter #1 (got 'Int')\n   \
    \ @inlinable public subscript(position: ReversedCollection<Base>.Index) -> ReversedCollection<Base>.Element\
    \ { get }\n                      ^\nSwift.Collection:2:23: note: candidate expects\
    \ value of type 'Range<ReversedCollection<[Int]>.Index>' for parameter #1 (got\
    \ 'Int')\n    @inlinable public subscript(bounds: Range<Self.Index>) -> Slice<Self>\
    \ { get }\n                      ^\nSwift.Collection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\n/tmp/tmpfg_0xnyx.swift:27:48: error: value of type 'Int'\
    \ has no member 'descriptionFromOneToTen'\n                result.append(Int(number\
    \ / 10).descriptionFromOneToTen)\n                              ~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfg_0xnyx.swift:28:24: error: no exact matches\
    \ in call to instance method 'append'\n                result.append(number %\
    \ 10.toString())\n                       ^\n/tmp/tmpfg_0xnyx.swift:28:24: note:\
    \ found candidate with type '(__owned _) -> ()'\n                result.append(number\
    \ % 10.toString())\n                       ^\n/tmp/tmpfg_0xnyx.swift:28:43: error:\
    \ value of type 'Int' has no member 'toString'\n                result.append(number\
    \ % 10.toString())\n                                       ~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  var strs: [String]\
    \ = []\n  for n in arr {\n    if n > 0 && n < 10 {\n      strs.append(\"\\(names[n])\"\
    )\n    }\n  }\n  if strs.isEmpty {\n    return []\n  }\n  strs.reverse()\n  return\
    \ strs\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpciw2e6p6.swift:18:22: error: cannot find 'names' in scope\n   \
    \   strs.append(\"\\(names[n])\")\n                     ^~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tvar result = [String]()\n\
    \tvar startIndex = 0\n\tvar endIndex = 0\n\tvar isOddNumber = false\n\tfor index,\
    \ number in arr.enumerated() {\n\t\tendIndex = index\n\t\tisOddNumber = number\
    \ % 2 == 1\n\t\tif startIndex == 0 && number != 0 {\n\t\t\tstartIndex = 1\n\t\t\
    \tisOddNumber = false\n\t\t}\n\t\tif !isOddNumber && number >= 1 && number <=\
    \ 9 {\n\t\t\tresult.append(arr[startIndex])\n\t\t\tstartIndex++\n\t\t}\n\t\tif\
    \ isOddNumber && number < 10 {\n\t\t\tresult.append(array[startIndex])\n\t\t\t\
    startIndex++\n\t\t}\n\t\tif startIndex == endIndex {\n\t\t\tbreak\n\t\t}\n\t}\n\
    \treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmplkan6hp7.swift:19:11: error: expected 'in' after for-each pattern\n\
    \        for index, number in arr.enumerated() {\n                 ^\n/tmp/tmplkan6hp7.swift:19:11:\
    \ error: expected Sequence expression for for-each loop\n        for index, number\
    \ in arr.enumerated() {\n                 ^\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    if arr.count == 0 {\n        return nil\n    }\n\
    \    if arr.count == 1 {\n        return [\"One\"]\n    }\n    var arrRev = [Int]()\n\
    \    arr.rev()\n    var arrDig = arr\n    arrDig.reverse()\n    for digit in arrDig\
    \ {\n        arrRev.append(Int(digit))\n    }\n    var resultArr = [String]()\n\
    \    var index = 0\n    while index < arrRev.count {\n        let digit = arrRev[index]\n\
    \        switch digit {\n        case 1:\n            resultArr.append(arr[index])\n\
    \        case 2:\n            resultArr.append(arr[index])\n        case 3:\n\
    \            resultArr.append(arr[index])\n        case 4:\n            resultArr.append(arr[index])\n\
    \        case 5:\n            resultArr.append(arr[index])\n        case 6:\n\
    \            resultArr.append(arr[index])\n        case 7:\n            resultArr.append(arr[index])\n\
    \        case 8:\n            resultArr.append(arr[index])\n        case 9:\n\
    \            resultArr.append(arr[index])\n        default:\n            resultArr.append(\"\
    \")\n        }\n        index += 1\n    }\n    return resultArr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_qt8lr61.swift:19:16: error: 'nil' is incompatible with return\
    \ type '[String]'\n        return nil\n               ^\n/tmp/tmp_qt8lr61.swift:25:9:\
    \ error: value of type '[Int]' has no member 'rev'\n    arr.rev()\n    ~~~ ^~~\n\
    /tmp/tmp_qt8lr61.swift:37:33: error: cannot convert value of type 'Int' to expected\
    \ argument type 'String'\n            resultArr.append(arr[index])\n         \
    \                       ^\n/tmp/tmp_qt8lr61.swift:39:33: error: cannot convert\
    \ value of type 'Int' to expected argument type 'String'\n            resultArr.append(arr[index])\n\
    \                                ^\n/tmp/tmp_qt8lr61.swift:41:33: error: cannot\
    \ convert value of type 'Int' to expected argument type 'String'\n           \
    \ resultArr.append(arr[index])\n                                ^\n/tmp/tmp_qt8lr61.swift:43:33:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String'\n\
    \            resultArr.append(arr[index])\n                                ^\n\
    /tmp/tmp_qt8lr61.swift:45:33: error: cannot convert value of type 'Int' to expected\
    \ argument type 'String'\n            resultArr.append(arr[index])\n         \
    \                       ^\n/tmp/tmp_qt8lr61.swift:47:33: error: cannot convert\
    \ value of type 'Int' to expected argument type 'String'\n            resultArr.append(arr[index])\n\
    \                                ^\n/tmp/tmp_qt8lr61.swift:49:33: error: cannot\
    \ convert value of type 'Int' to expected argument type 'String'\n           \
    \ resultArr.append(arr[index])\n                                ^\n/tmp/tmp_qt8lr61.swift:51:33:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String'\n\
    \            resultArr.append(arr[index])\n                                ^\n\
    /tmp/tmp_qt8lr61.swift:53:33: error: cannot convert value of type 'Int' to expected\
    \ argument type 'String'\n            resultArr.append(arr[index])\n         \
    \                       ^\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return map(by_len_2,\
    \ arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmsqftvv_.swift:15:12: error: cannot find 'map' in scope\n    return\
    \ map(by_len_2, arr)\n           ^~~\n/tmp/tmpmsqftvv_.swift:15:16: error: cannot\
    \ find 'by_len_2' in scope\n    return map(by_len_2, arr)\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr == nil {\n        return result\n    }\n    if !arr.removeFirst()\
    \ {\n        return result\n    }\n    let base = [\n        One: \"One\",\n \
    \       Two: \"Two\",\n        Three: \"Three\",\n        Four: \"Four\",\n  \
    \      Five: \"Five\",\n        Six: \"Six\",\n        Seven: \"Seven\",\n   \
    \     Eight: \"Eight\",\n        Nine: \"Nine\"\n    ]\n    var result2 = [String]()\n\
    \    for i in arr {\n        let num = (10 * i) + 1 as Int\n        let num =\
    \ String(i).replacingOccurrences(of: \"0\", with: \"9\")\n        if let idx =\
    \ base[num] {\n            result2.append(idx)\n        } else {\n           \
    \ result2.append(num)\n        }\n    }\n    result.reverse()\n    for i in result2\
    \ {\n        result.append(i)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0yui3rrx.swift:16:12: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if arr == nil {\n       ~~~\
    \ ^  ~~~\n/tmp/tmp0yui3rrx.swift:19:13: error: type 'Int' cannot be used as a\
    \ boolean; test for '== 0' instead\n    if !arr.removeFirst() {\n       ~    ^\n\
    \        (                 == 0)\n/tmp/tmp0yui3rrx.swift:19:13: error: cannot\
    \ use mutating member on immutable value: 'arr' is a 'let' constant\n    if !arr.removeFirst()\
    \ {\n        ~~~ ^\n/tmp/tmp0yui3rrx.swift:23:9: error: cannot find 'One' in scope\n\
    \        One: \"One\",\n        ^~~\n/tmp/tmp0yui3rrx.swift:24:9: error: cannot\
    \ find 'Two' in scope\n        Two: \"Two\",\n        ^~~\n/tmp/tmp0yui3rrx.swift:25:9:\
    \ error: cannot find 'Three' in scope\n        Three: \"Three\",\n        ^~~~~\n\
    /tmp/tmp0yui3rrx.swift:26:9: error: cannot find 'Four' in scope\n        Four:\
    \ \"Four\",\n        ^~~~\n/tmp/tmp0yui3rrx.swift:27:9: error: cannot find 'Five'\
    \ in scope\n        Five: \"Five\",\n        ^~~~\n/tmp/tmp0yui3rrx.swift:28:9:\
    \ error: cannot find 'Six' in scope\n        Six: \"Six\",\n        ^~~\n/tmp/tmp0yui3rrx.swift:29:9:\
    \ error: cannot find 'Seven' in scope\n        Seven: \"Seven\",\n        ^~~~~\n\
    /tmp/tmp0yui3rrx.swift:30:9: error: cannot find 'Eight' in scope\n        Eight:\
    \ \"Eight\",\n        ^~~~~\n/tmp/tmp0yui3rrx.swift:31:9: error: cannot find 'Nine'\
    \ in scope\n        Nine: \"Nine\"\n        ^~~~\n/tmp/tmp0yui3rrx.swift:36:29:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ let num = String(i).replacingOccurrences(of: \"0\", with: \"9\")\n         \
    \         ~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    \n    var result: [String] = []\n    \n   \
    \ let min = min(arr.map { $0 })\n    let max = max(arr.map { $0 })\n    \n   \
    \ let arrLen = arr.count\n    var i: Int\n    for i = min + 1; i <= max; i++ {\n\
    \        let tmp = i\n        if i > arrLen {\n            continue\n        }\n\
    \        result.append((arr[tmp - min] / 10).string() + arr[tmp - min].string()\
    \ + name(i))\n    }\n    \n    return result.reversed().map { $0.substringWithRange($0.startIndex...)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmfje56hv.swift:26:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = min + 1; i <= max; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmfje56hv.swift:15:12: error: cannot call value of non-function type 'Bool'\n\
    \    if arr.isEmpty() {\n           ^      ~~\n                  \n/tmp/tmpmfje56hv.swift:21:33:\
    \ error: missing argument for parameter #2 in call\n    let min = min(arr.map\
    \ { $0 })\n                                ^\n                               \
    \ , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public func\
    \ min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n\
    /tmp/tmpmfje56hv.swift:22:33: error: missing argument for parameter #2 in call\n\
    \    let max = max(arr.map { $0 })\n                                ^\n      \
    \                          , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n\
    @inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n    \
    \                   ^\n/tmp/tmpmfje56hv.swift:34:39: error: value of type 'String'\
    \ has no member 'substringWithRange'\n    return result.reversed().map { $0.substringWithRange($0.startIndex...)\
    \ }\n                                   ~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  return arr.sort.reverse.map\
    \ { name_to_number[$0] ?? \"\" }.filter({ $0 != \"\" })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqzghpxw8.swift:15:33: error: cannot find 'name_to_number' in scope\n\
    \  return arr.sort.reverse.map { name_to_number[$0] ?? \"\" }.filter({ $0 != \"\
    \" })\n                                ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let ints = arr.compactMap { String($0) }\n    ints.sort\
    \ { $0 < $1 }\n    ints.reverse()\n    var results = [String]()\n    var first:\
    \ Int = 0\n    var last: Int = 0\n    for _ in ints {\n        results.append(String(arr[first...last]))\n\
    \        first++\n        if first > last {\n            last++\n        }\n \
    \   }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8lk5q58u.swift:17:10: error: cannot use mutating member on immutable\
    \ value: 'ints' is a 'let' constant\n    ints.sort { $0 < $1 }\n    ~~~~ ^\n/tmp/tmp8lk5q58u.swift:16:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let ints = arr.compactMap\
    \ { String($0) }\n    ^~~\n    var\n/tmp/tmp8lk5q58u.swift:18:10: error: cannot\
    \ use mutating member on immutable value: 'ints' is a 'let' constant\n    ints.reverse()\n\
    \    ~~~~ ^\n/tmp/tmp8lk5q58u.swift:16:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let ints = arr.compactMap { String($0) }\n    ^~~\n    var\n\
    /tmp/tmp8lk5q58u.swift:23:24: error: no exact matches in call to initializer \n\
    \        results.append(String(arr[first...last]))\n                       ^\n\
    Swift.String:4:12: note: candidate requires that the types 'Int' and 'Character'\
    \ be equivalent (requirement specified as 'S.Element' == 'Character')\n    public\
    \ init<S>(_ characters: S) where S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires that\
    \ the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement\
    \ specified as 'Self.Element' == 'S.Element')\n    @inlinable public init<S>(_\
    \ elements: S) where S : Sequence, Self.Element == S.Element\n               \
    \       ^\nSwift.String:2:12: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(describing:)')\n    public init<Subject>(describing instance: Subject)\n\
    \           ^\nSwift.String:3:23: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(describing:)')\n    @inlinable public init<Subject>(describing\
    \ instance: Subject) where Subject : CustomStringConvertible\n               \
    \       ^\nSwift.String:6:12: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(reflecting:)')\n    public init<Subject>(reflecting subject: Subject)\n\
    \           ^\n/tmp/tmp8lk5q58u.swift:24:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        first++\n             ^~\n/tmp/tmp8lk5q58u.swift:26:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n  "
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    arr.sort() { a, b in\n        // Ignore any strange number\n        let l\
    \ = abs(a - b)\n        return l <= 9\n    }\n    for num in arr {\n        if\
    \ num < 1 || num > 9 {\n            continue\n        }\n        result.append(name[num\
    \ - 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd90l9bhe.swift:16:9: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    arr.sort() { a, b in\n    ~~~ ^\n/tmp/tmpd90l9bhe.swift:25:23:\
    \ error: cannot find 'name' in scope\n        result.append(name[num - 1])\n \
    \                     ^~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr == nil ||\
    \ arr.isEmpty {\n        return []\n    }\n\n    var result = [String]()\n\n \
    \   var currentString = String(arr[0])\n    result.append(self)\n\n    for _ in\
    \ 1...arr.count {\n        var next = String(arr[_])\n        switch next {\n\
    \        case \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\":\n\
    \            switch currentString {\n            case \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\":\n            case \"0\", \"0\":\n    \
    \            currentString = currentString + next\n            case others:\n\
    \                currentString = currentString + others\n            }\n     \
    \   default:\n            currentString = currentString + next\n        }\n  \
    \  }\n\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp33fytitr.swift:29:13: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n            case \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\":\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \                                                              break\n/tmp/tmp33fytitr.swift:15:12:\
    \ warning: comparing non-optional value of type '[Int]' to 'nil' always returns\
    \ false\n    if arr == nil || arr.isEmpty {\n       ~~~ ^  ~~~\n/tmp/tmp33fytitr.swift:22:19:\
    \ error: cannot find 'self' in scope; did you mean to use it in a type or extension\
    \ context?\n    result.append(self)\n                  ^~~~\n/tmp/tmp33fytitr.swift:25:31:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \        var next = String(arr[_])\n                              ^\n/tmp/tmp33fytitr.swift:32:18:\
    \ error: cannot find 'others' in scope\n            case others:\n           \
    \      ^~~~~~\n/tmp/tmp33fytitr.swift:33:49: error: cannot find 'others' in scope\n\
    \                currentString = currentString + others\n                    \
    \                            ^~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    \n    var nums = arr.sorted()\n    var result =\
    \ nums.reverse()\n    \n    var strings = [String]()\n    \n    for num in nums\
    \ {\n        let num = String(num)\n        let index = result .index(of: num)\n\
    \        \n        if index != nil {\n            let index = index(before: index)\n\
    \            \n            let str = String(by(index: index, length: num.count))\n\
    \            \n            strings.append(str)\n        }\n    }\n    \n    return\
    \ strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpotj2h09s.swift:20:9: warning: variable 'result' inferred to have\
    \ type '()', which may be unexpected\n    var result = nums.reverse()\n      \
    \  ^\n/tmp/tmpotj2h09s.swift:20:9: note: add an explicit type annotation to silence\
    \ this warning\n    var result = nums.reverse()\n        ^\n              : ()\n\
    /tmp/tmpotj2h09s.swift:26:29: error: value of tuple type '()' has no member 'index'\n\
    \        let index = result .index(of: num)\n                    ~~~~~~  ^~~~~\n\
    /tmp/tmpotj2h09s.swift:31:30: error: cannot find 'by' in scope\n            let\
    \ str = String(by(index: index, length: num.count))\n                        \
    \     ^~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // check empty case\n\
    \    if arr == nil {\n        return []\n    }\n\n    var result = [String]()\n\
    \n    for number in arr {\n        let num = Int(number) - 1\n        let digitName\
    \ = digits[num]\n        result.append(digitName)\n    }\n\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnfv6_tm7.swift:16:12: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if arr == nil {\n       ~~~\
    \ ^  ~~~\n/tmp/tmpnfv6_tm7.swift:24:25: error: cannot find 'digits' in scope\n\
    \        let digitName = digits[num]\n                        ^~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    if arr.count < 1 {\n        return []\n    }\n\
    \    if arr.count > 9 {\n        let rev = arr.slice().reversed()\n        var\
    \ out: [String] = []\n        var i = 0\n        while i < arr.count {\n     \
    \       if i == 0 || arr[i-1] < arr[i] {\n                out.append(String(arr[i]))\n\
    \                i += 1\n            } else {\n                out.append(String(arr[i-1]))\n\
    \            }\n        }\n        return out.concat(rev)\n    }\n    var names:\
    \ [String] = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    var out = [String]()\n    var i = 0\n    while i <\
    \ arr.count {\n        if i == 0 || arr[i-1] < arr[i] {\n            out.append(names[i])\n\
    \            i += 1\n        } else {\n            out.append(String(arr[i-1]))\n\
    \        }\n    }\n    return out.concat(arr.slice().reversed())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsco4w1mh.swift:22:23: error: value of type '[Int]' has no member\
    \ 'slice'\n        let rev = arr.slice().reversed()\n                  ~~~ ^~~~~\n\
    /tmp/tmpsco4w1mh.swift:33:20: error: value of type '[String]' has no member 'concat'\n\
    \        return out.concat(rev)\n               ~~~ ^~~~~~\n/tmp/tmpsco4w1mh.swift:46:16:\
    \ error: value of type '[String]' has no member 'concat'\n    return out.concat(arr.slice().reversed())\n\
    \           ~~~ ^~~~~~\n/tmp/tmpsco4w1mh.swift:46:27: error: value of type '[Int]'\
    \ has no member 'slice'\n    return out.concat(arr.slice().reversed())\n     \
    \                 ~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr == nil ||\
    \ arr.isEmpty() {\n        return []\n    }\n    let array = arr.map { String($0)\
    \ }\n    let oneToNine = \"One\".characters.map { String.init(\"\\($0)\") }\n\
    \    let reverseArray = Array(array.reverse())\n    return reverseArray\n    \
    \    .map { oneToNine[$0] }\n        .append(reverse(array))\n        .filter\
    \ { $0 != \"One\" && $0 != \"Two\" && $0 != \"Three\" && $0 != \"Four\" && $0\
    \ != \"Five\" && $0 != \"Six\" && $0 != \"Seven\" && $0 != \"Eight\" && $0 !=\
    \ \"Nine\" }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg2l4ws3_.swift:15:26: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr == nil || arr.isEmpty() {\n                        \
    \ ^      ~~\n                                \n/tmp/tmpg2l4ws3_.swift:19:27: error:\
    \ 'characters' is unavailable: Please use String directly\n    let oneToNine =\
    \ \"One\".characters.map { String.init(\"\\($0)\") }\n                       \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpg2l4ws3_.swift:20:30:\
    \ error: missing argument label 'arrayLiteral:' in call\n    let reverseArray\
    \ = Array(array.reverse())\n                             ^\n                 \
    \            arrayLiteral: \n/tmp/tmpg2l4ws3_.swift:20:36: error: cannot use mutating\
    \ member on immutable value: 'array' is a 'let' constant\n    let reverseArray\
    \ = Array(array.reverse())\n                             ~~~~~ ^\n/tmp/tmpg2l4ws3_.swift:18:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let array = arr.map { String($0)\
    \ }\n    ^~~\n    var\n/tmp/tmpg2l4ws3_.swift:23:17: error: cannot find 'reverse'\
    \ in scope\n        .append(reverse(array))\n                ^~~~~~~\n/tmp/tmpg2l4ws3_.swift:21:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return reverseArray\n\
    \           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014547
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    \n    if arr.isEmpty\
    \ { return [] }\n    \n    let reversedArr = reverseArr(arr: arr)\n    \n    let\
    \ reversedStrings = reversedArr.map { $0.description.first }\n    \n    return\
    \ reversedStrings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaefm9ys7.swift:18:23: error: cannot find 'reverseArr' in scope\n\
    \    let reversedArr = reverseArr(arr: arr)\n                      ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var names = [String]()\n\
    \    if !arr.isEmpty {\n        var ints = [Int]()\n        for i in arr {\n \
    \           ints.append(i)\n        }\n        \n        var reversed = ints.reverse()\n\
    \        var length = reversed.count\n        var i = 0\n        var num = 0\n\
    \        \n        var index = 0\n        for _ in 0..<length {\n            index\
    \ = reversed[i]\n            num = (num*10 + index) as Int\n            i += 1\n\
    \            if num < 9 {\n                names.append(\"One\")\n           \
    \ }\n            else if (num < 99) {\n                names.append(\"Two\")\n\
    \            }\n            else if (num < 999) {\n                names.append(\"\
    Three\")\n            }\n            else {\n                names.append(\"Four\"\
    )\n            }\n        }\n    }\n    return names\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_m0blreo.swift:22:13: warning: variable 'reversed' inferred to\
    \ have type '()', which may be unexpected\n        var reversed = ints.reverse()\n\
    \            ^\n/tmp/tmp_m0blreo.swift:22:13: note: add an explicit type annotation\
    \ to silence this warning\n        var reversed = ints.reverse()\n           \
    \ ^\n                    : ()\n/tmp/tmp_m0blreo.swift:23:31: error: value of tuple\
    \ type '()' has no member 'count'\n        var length = reversed.count\n     \
    \                ~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  if arr == nil {\n \
    \   return []\n  }\n  var result: [String] = []\n  var len = -1\n  for elem in\
    \ arr {\n    if elem < 0 || elem > 9 {\n      continue\n    }\n    len += 1\n\
    \    if len >= 2 {\n      result.append(String(elem))\n    }\n  }\n\n  if len\
    \ < 2 {\n    return result\n  }\n\n  var len2 = 0\n  var resLen2 = 0\n  for i,\
    \ elem in enumerate(result) {\n    if elem == String(arr[resLen2]) {\n      result[i]\
    \ = \"One \"\n      resLen2 += 1\n      len2 += 1\n    }\n  }\n\n  for elem in\
    \ result {\n    if len2 == 0 {\n      elem = elem[1:]\n    }\n    if len2 > 1\
    \ {\n      elem = elem + \" \" + String(arr[(len2 - 2)])\n      len2 -= 1\n  \
    \  }\n  }\n\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnys8s_om.swift:36:8: error: expected 'in' after for-each pattern\n\
    \  for i, elem in enumerate(result) {\n       ^\n/tmp/tmpnys8s_om.swift:36:8:\
    \ error: expected Sequence expression for for-each loop\n  for i, elem in enumerate(result)\
    \ {\n       ^\n/tmp/tmpnys8s_om.swift:46:20: error: expected ',' separator\n \
    \     elem = elem[1:]\n                   ^\n                   ,\n/tmp/tmpnys8s_om.swift:46:20:\
    \ error: expected expression in list of expressions\n      elem = elem[1:]\n \
    \                  ^\n/tmp/tmpnys8s_om.swift:15:10: warning: comparing non-optional\
    \ value of type '[Int]' to 'nil' always returns false\n  if arr == nil {\n   \
    \  ~~~ ^  ~~~\n/tmp/tmpnys8s_om.swift:46:7: error: cannot assign to value: 'elem'\
    \ is a 'let' constant\n      elem = elem[1:]\n      ^~~~\n/tmp/tmpnys8s_om.swift:46:18:\
    \ error: cannot assign value of type 'Character' to type 'String'\n      elem\
    \ = elem[1:]\n             ~~~~^~~~\n/tmp/tmpnys8s_om.swift:49:7: error: cannot\
    \ assign to value: 'elem' is a 'let' constant\n      elem = elem + \" \" + String(arr[(len2\
    \ - 2)])\n      ^~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tcheckParams(len(arr)\
    \ > 0)\n\tvar ret [String]\n\tvar lastOne = arr[0] - 1\n\tfor i, e := range arr\
    \ {\n\t\tif lastOne == 1 {\n\t\t\tret.append(names[e])\n\t\t\tcontinue\n\t\t}\n\
    \t\tif lastOne > 0 {\n\t\t\tret.append(names[lastOne])\n\t\t}\n\t\tret.append(names[e])\n\
    \t\tlastOne = e\n\t}\n\tif lastOne > 0 {\n\t\tret.append(names[lastOne])\n\t}\n\
    \treturn ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm0jymels.swift:16:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        var ret [String]\n               ^\n          \
    \     ;\n/tmp/tmpm0jymels.swift:18:7: error: expected 'in' after for-each pattern\n\
    \        for i, e := range arr {\n             ^\n/tmp/tmpm0jymels.swift:18:7:\
    \ error: expected Sequence expression for for-each loop\n        for i, e := range\
    \ arr {\n             ^\n/tmp/tmpm0jymels.swift:15:2: error: cannot find 'checkParams'\
    \ in scope\n        checkParams(len(arr) > 0)\n        ^~~~~~~~~~~\n/tmp/tmpm0jymels.swift:15:14:\
    \ error: cannot find 'len' in scope\n        checkParams(len(arr) > 0)\n     \
    \               ^~~\n/tmp/tmpm0jymels.swift:16:6: error: type annotation missing\
    \ in pattern\n        var ret [String]\n            ^\n/tmp/tmpm0jymels.swift:16:10:\
    \ error: expected member name or constructor call after type name\n        var\
    \ ret [String]\n                ^\n/tmp/tmpm0jymels.swift:16:17: note: add arguments\
    \ after the type to construct a value of the type\n        var ret [String]\n\
    \                       ^\n                        ()\n/tmp/tmpm0jymels.swift:16:17:\
    \ note: use '.self' to reference the type object\n        var ret [String]\n \
    \                      ^\n                        .self\n/tmp/tmpm0jymels.swift:16:10:\
    \ warning: expression of type '[String].Type' is unused\n        var ret [String]\n\
    \                ^~~~~~~~\n/tmp/tmpm0jymels.swift:30:14: error: cannot find 'names'\
    \ in scope\n                ret.append(names[lastOne])\n                     \
    \      ^~~~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tsorted, err := quickSort(arr)\n\
    \tif err != nil {\n\t\tpanic(err)\n\t}\n\trev := make([]string, len(sorted))\n\
    \tfor i, v := range sorted {\n\t\tif v <= 9 {\n\t\t\trev[i] = \"One\"\n\t\t} else\
    \ if v >= 10 {\n\t\t\trev[i] = \"Nine\"\n\t\t} else {\n\t\t\trev[i] = \"Five\"\
    \n\t\t}\n\t}\n\treturn rev\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk6j3x3ox.swift:15:8: error: consecutive statements on a line must\
    \ be separated by ';'\n        sorted, err := quickSort(arr)\n              ^\n\
    \              ;\n/tmp/tmpk6j3x3ox.swift:15:8: error: expected expression\n  \
    \      sorted, err := quickSort(arr)\n              ^\n/tmp/tmpk6j3x3ox.swift:19:5:\
    \ error: consecutive statements on a line must be separated by ';'\n        rev\
    \ := make([]string, len(sorted))\n           ^\n           ;\n/tmp/tmpk6j3x3ox.swift:19:6:\
    \ error: expected expression\n        rev := make([]string, len(sorted))\n   \
    \         ^\n/tmp/tmpk6j3x3ox.swift:20:7: error: expected 'in' after for-each\
    \ pattern\n        for i, v := range sorted {\n             ^\n/tmp/tmpk6j3x3ox.swift:20:7:\
    \ error: expected Sequence expression for for-each loop\n        for i, v := range\
    \ sorted {\n             ^\n/tmp/tmpk6j3x3ox.swift:15:2: error: cannot find 'sorted'\
    \ in scope\n        sorted, err := quickSort(arr)\n        ^~~~~~\n/tmp/tmpk6j3x3ox.swift:16:5:\
    \ error: cannot find 'err' in scope\n        if err != nil {\n           ^~~\n\
    /tmp/tmpk6j3x3ox.swift:17:3: error: cannot find 'panic' in scope\n           \
    \     panic(err)\n                ^~~~~\n/tmp/tmpk6j3x3ox.swift:17:9: error: cannot\
    \ find 'err' in scope\n                panic(err)\n                      ^~~\n\
    /tmp/tmpk6j3x3ox.swift:19:2: error: cannot find 'rev' in scope\n        rev :=\
    \ make([]string, len(sorted))\n        ^~~\n/tmp/tmpk6j3x3ox.swift:29:9: error:\
    \ cannot find 'rev' in scope\n        return rev\n               ^~~\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    if arr.count > 0 {\n        for (i, v) in arr.enumerated() {\n   \
    \         if v >= 1 && v <= 9 {\n                result += [ \"\\(v)\", \"\\((i\
    \ + 1) % 10 + 1)\", \"\\((i + 2) % 10 + 1)\", \"\\((i + 3) % 10 + 1)\", \"\\((i\
    \ + 4) % 10 + 1)\", \"\\((i + 5) % 10 + 1)\", \"\\((i + 6) % 10 + 1)\", \"\\((i\
    \ + 7) % 10 + 1)\", \"\\((i + 8) % 10 + 1)\", \"\\((i + 9) % 10 + 1)\" ]\n   \
    \         } else {\n                result += [ \"\\(v)\" ]\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkd13545x/tmpkd13545x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41fc441c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41fc138b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41fc138988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41fc1377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkd13545x                        0x0000556b3ea67be1 <unavailable> + 7137

    5    libc.so.6                          0x00002b41fc62d460 __libc_start_main +
    245

    6    tmpkd13545x                        0x0000556b3ea67689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return map_reduce(arr,\
    \ { $0 < 10 ? $0 : String($0) % 10 }, { String($0) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjv0w29ex.swift:15:12: error: cannot find 'map_reduce' in scope\n\
    \    return map_reduce(arr, { $0 < 10 ? $0 : String($0) % 10 }, { String($0) })\n\
    \           ^~~~~~~~~~\n/tmp/tmpjv0w29ex.swift:15:45: error: cannot convert value\
    \ of type 'String' to expected argument type 'Int'\n    return map_reduce(arr,\
    \ { $0 < 10 ? $0 : String($0) % 10 }, { String($0) })\n                      \
    \                      ^\n"
  stdout: ''
  timestamp: 1660014511
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let mut numbers =\
    \ arr.to_vec();\n    if numbers == nil {\n        return [];\n    }\n    numbers.sort_by(|a,\
    \ b| a.cmp(b));\n    let rev = numbers.into_iter().map(|n| {\n        match n\
    \ {\n            0 => \"Zero\",\n            1 => \"One\",\n            2 => \"\
    Two\",\n            3 => \"Three\",\n            4 => \"Four\",\n            5\
    \ => \"Five\",\n            6 => \"Six\",\n            7 => \"Seven\",\n     \
    \       8 => \"Eight\",\n            9 => \"Nine\",\n            _ => return \"\
    \".to_string(),\n        }\n    }).collect::<Vec<_>>();\n    let result = (0..10).map(|n|\
    \ {\n        match rev[n % 10] {\n            \"\" => return \"\".to_string(),\n\
    \            \"\" => return \"Zero\".to_string(),\n            \"\" => return\
    \ \"One\".to_string(),\n            \"\" => return \"Two\".to_string(),\n    \
    \        \"\" => return \"Three\".to_string(),\n            \"\" => return \"\
    Four\".to_string(),\n            \"\" => return \"Five\".to_string(),\n      \
    \      \"\" => return \"Six\".to_string(),\n            \"\" => return \"Seven\"\
    .to_string(),\n            \"\" => return \"Eight\".to_string(),\n           \
    \ \"\" => return \"Nine\".to_string(),\n            _ => return \"\".to_string(),\n\
    \        }\n    }).collect::<Vec<_>>();\n    result.reverse();\n    return result.map(|x|\
    \ x.to_string()).collect();\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpstzpv0fc.swift:15:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut numbers\
    \ = arr.to_vec();\n            ^\n/tmp/tmpstzpv0fc.swift:15:13: note: join the\
    \ identifiers together\n    let mut numbers = arr.to_vec();\n        ~~~~^~~~~~~\n\
    \        mutnumbers\n/tmp/tmpstzpv0fc.swift:15:13: note: join the identifiers\
    \ together with camel-case\n    let mut numbers = arr.to_vec();\n        ~~~~^~~~~~~\n\
    \        mutNumbers\n/tmp/tmpstzpv0fc.swift:19:28: error: expected ',' separator\n\
    \    numbers.sort_by(|a, b| a.cmp(b));\n                           ^\n       \
    \                   ,\n/tmp/tmpstzpv0fc.swift:21:14: error: consecutive statements\
    \ on a line must be separated by ';'\n        match n {\n             ^\n    \
    \         ;\n/tmp/tmpstzpv0fc.swift:22:24: error: consecutive statements on a\
    \ line must be separated by ';'\n            0 => \"Zero\",\n                \
    \       ^\n                       ;\n/tmp/tmpstzpv0fc.swift:22:24: error: expected\
    \ expression\n            0 => \"Zero\",\n                       ^\n/tmp/tmpstzpv0fc.swift:32:39:\
    \ error: consecutive statements on a line must be separated by ';'\n         \
    \   _ => return \"\".to_string(),\n                                      ^\n \
    \                                     ;\n/tmp/tmpstzpv0fc.swift:32:39: error:\
    \ expected expression\n            _ => return \"\".to_string(),\n           \
    \                           ^\n/tmp/tmpstzpv0fc.swift:34:15: error: consecutive\
    \ statements on a line must be separated by ';'\n    }).collect::<Vec<_>>();\n\
    \              ^\n              ;\n/tmp/tmpstzpv0fc.swift:34:15: error: expected\
    \ expression\n    }).collect::<Vec<_>>();\n              ^\n/tmp/tmpstzpv0fc.swift:36:14:\
    \ error: consecutive statements on a line must be separated by ';'\n        match\
    \ rev[n % 10] {\n             ^\n             ;\n/tmp/tmpstzpv0fc.swift:37:19:\
    \ error: expected expression after operator\n            \"\" => return \"\".to_string(),\n\
    \                  ^\n/tmp/tmpstzpv0fc.swift:37:40: error: consecutive statements\
    \ on a line must be separated by ';'\n      "
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var len = [Int]()\n\
    \    for num in arr {\n        len[num] = len[num] + 1\n    }\n    sort.Ints(len)\n\
    \    var newArr = make([][String], len.count)\n    for num in len {\n        newArr[num]\
    \ = names[num] ?? num.String()\n    }\n    return newArr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9f24lunl.swift:19:5: error: cannot find 'sort' in scope\n    sort.Ints(len)\n\
    \    ^~~~\n/tmp/tmp9f24lunl.swift:20:18: error: cannot find 'make' in scope\n\
    \    var newArr = make([][String], len.count)\n                 ^~~~\n/tmp/tmp9f24lunl.swift:20:25:\
    \ error: no exact matches in call to subscript \n    var newArr = make([][String],\
    \ len.count)\n                        ^\n/tmp/tmp9f24lunl.swift:20:25: note: found\
    \ candidate with type '(Int) -> Any'\n    var newArr = make([][String], len.count)\n\
    \                        ^\n/tmp/tmp9f24lunl.swift:20:25: note: found candidate\
    \ with type '(Range<Int>) -> ArraySlice<Any>'\n    var newArr = make([][String],\
    \ len.count)\n                        ^\n/tmp/tmp9f24lunl.swift:20:25: note: found\
    \ candidate with type '(String.Type) -> ArraySlice<Any>'\n    var newArr = make([][String],\
    \ len.count)\n                        ^\n/tmp/tmp9f24lunl.swift:20:25: note: found\
    \ candidate with type '((UnboundedRange_) -> ()) -> ArraySlice<Any>'\n    var\
    \ newArr = make([][String], len.count)\n                        ^\n/tmp/tmp9f24lunl.swift:22:23:\
    \ error: cannot find 'names' in scope\n        newArr[num] = names[num] ?? num.String()\n\
    \                      ^~~~~\n/tmp/tmp9f24lunl.swift:22:41: error: value of type\
    \ 'Int' has no member 'String'\n        newArr[num] = names[num] ?? num.String()\n\
    \                                    ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var result: [String] = []\n    for v in arr {\n    \
    \    if v < 1 || v > 9 {\n            continue\n        }\n        let str = String(v)\n\
    \        result.append(String.init(cString: str.reversed()))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdipr97oc.swift:22:30: error: no exact matches in call to initializer\
    \ \n        result.append(String.init(cString: str.reversed()))\n            \
    \                 ^\nSwift.String:3:23: note: found candidate with type '[String.Element]'\
    \ (aka 'Array<Character>')\n    @inlinable public init(cString nullTerminatedUTF8:\
    \ [CChar])\n                      ^\nSwift.String:7:23: note: found candidate\
    \ with type '[String.Element]' (aka 'Array<Character>')\n    @inlinable public\
    \ init(cString nullTerminatedUTF8: [UInt8])\n                      ^\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var names: [String]\
    \ = []\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > 9 {\n       \
    \     arr[i] -= 10\n            arr[i] += 10\n        }\n        names.append(\n\
    \            arr[arr[i] as Int]\n                ? names[arr[i] as Int]\n    \
    \            : arr[i].description)\n    }\n    return names\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo6upxbim.swift:16:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpo6upxbim.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpo6upxbim.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014503
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let one = \"One\"\
    \n    let two = \"Two\"\n    let three = \"Three\"\n    let four = \"Four\"\n\
    \    let five = \"Five\"\n    let six = \"Six\"\n    let seven = \"Seven\"\n \
    \   let eight = \"Eight\"\n    let nine = \"Nine\"\n    var res = arr\n    for\
    \ i in 0 ..< arr.count {\n        if i <= 9 {\n            if arr[i] > 9 {\n \
    \               let j = i - 1\n                while arr[j] > 9 && j >= 0 {\n\
    \                    arr[j] = arr[j] - 10\n                    j -= 1\n      \
    \          }\n            }\n            if arr[i] > 0 {\n                res[i]\
    \ = one\n            } else {\n                res[i] = two\n            }\n \
    \       } else {\n            if arr[i] > 9 {\n                res[i] = five\n\
    \            } else {\n                res[i] = eight\n            }\n       \
    \ }\n    }\n    if arr.count == 0 {\n        return nil\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2u21q6mk.swift:30:24: error: cannot assign through subscript: 'arr'\
    \ is a 'let' constant\n                    arr[j] = arr[j] - 10\n            \
    \        ~~~^\n/tmp/tmp2u21q6mk.swift:31:23: error: left side of mutating operator\
    \ isn't mutable: 'j' is a 'let' constant\n                    j -= 1\n       \
    \             ~ ^\n/tmp/tmp2u21q6mk.swift:28:17: note: change 'let' to 'var' to\
    \ make it mutable\n                let j = i - 1\n                ^~~\n      \
    \          var\n/tmp/tmp2u21q6mk.swift:35:26: error: cannot assign value of type\
    \ 'String' to subscript of type 'Int'\n                res[i] = one\n        \
    \                 ^~~\n/tmp/tmp2u21q6mk.swift:37:26: error: cannot assign value\
    \ of type 'String' to subscript of type 'Int'\n                res[i] = two\n\
    \                         ^~~\n/tmp/tmp2u21q6mk.swift:41:26: error: cannot assign\
    \ value of type 'String' to subscript of type 'Int'\n                res[i] =\
    \ five\n                         ^~~~\n/tmp/tmp2u21q6mk.swift:43:26: error: cannot\
    \ assign value of type 'String' to subscript of type 'Int'\n                res[i]\
    \ = eight\n                         ^~~~~\n/tmp/tmp2u21q6mk.swift:48:16: error:\
    \ 'nil' is incompatible with return type '[String]'\n        return nil\n    \
    \           ^\n/tmp/tmp2u21q6mk.swift:50:12: error: cannot convert return expression\
    \ of type '[Int]' to return type '[String]'\n    return res\n           ^\n/tmp/tmp2u21q6mk.swift:50:12:\
    \ note: arguments to generic parameter 'Element' ('Int' and 'String') are expected\
    \ to be equal\n    return res\n           ^\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.reduce([String]())\
    \ { names, num in\n        let names = names.filter() { $0 != \"One\" && $0 !=\
    \ \"Two\" && $0 != \"Three\" && $0 != \"Four\" && $0 != \"Five\" && $0 != \"Six\"\
    \ && $0 != \"Seven\" && $0 != \"Eight\" && $0 != \"Nine\" }\n        return names.map\
    \ { $0 + String(num) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpi0m4lqnd/tmpi0m4lqnd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9deac29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9dea920b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9dea920988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9dea91f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0m4lqnd                        0x0000558f2c8919d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b9deae15460 __libc_start_main +
    245

    6    tmpi0m4lqnd                        0x0000558f2c891479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tif arr == nil {\n\t\
    \treturn []\n\t}\n\tvar result = [String]()\n\tfor _, e := range arr {\n\t\tswitch\
    \ e {\n\t\tcase 1:\n\t\t\tresult = append(result, \"One\")\n\t\tcase 2:\n\t\t\t\
    result = append(result, \"Two\")\n\t\tcase 3:\n\t\t\tresult = append(result, \"\
    Three\")\n\t\tcase 4:\n\t\t\tresult = append(result, \"Four\")\n\t\tcase 5:\n\t\
    \t\tresult = append(result, \"Five\")\n\t\tcase 6:\n\t\t\tresult = append(result,\
    \ \"Six\")\n\t\tcase 7:\n\t\t\tresult = append(result, \"Seven\")\n\t\tcase 8:\n\
    \t\t\tresult = append(result, \"Eight\")\n\t\tcase 9:\n\t\t\tresult = append(result,\
    \ \"Nine\")\n\t\tdefault:\n\t\t\tcontinue\n\t\t}\n\t}\n\treturn result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdf_6jt9d.swift:19:7: error: expected 'in' after for-each pattern\n\
    \        for _, e := range arr {\n             ^\n/tmp/tmpdf_6jt9d.swift:19:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, e := range\
    \ arr {\n             ^\n/tmp/tmpdf_6jt9d.swift:15:9: warning: comparing non-optional\
    \ value of type '[Int]' to 'nil' always returns false\n        if arr == nil {\n\
    \           ~~~ ^  ~~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    var arrCopy = arr\n    guard let minValue = min(arrCopy)\
    \ else {\n        return []\n    }\n    arrCopy.remove(at: 0)\n    let maxValue\
    \ = max(arrCopy)\n    let strDigits = [\n        \"min\",\n        \"max\",\n\
    \        \"ten\",\n        \"twenty\",\n        \"thirty\",\n        \"forty\"\
    ,\n        \"fifty\",\n        \"sixty\",\n        \"seventy\",\n        \"eighty\"\
    ,\n        \"ninety\",\n    ]\n    var result = [String]()\n    for (i, value)\
    \ in arrCopy.enumerated() {\n        guard let digit = Int(String(value).prefix(maxValue-i))\
    \ else {\n            continue\n        }\n        result.append(strDigits[digit])\n\
    \    }\n    result.reverse()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmphisg1xwn.swift:20:37: error: missing argument for parameter #2\
    \ in call\n    guard let minValue = min(arrCopy) else {\n                    \
    \                ^\n                                    , <#[Int]?#>\nSwift.min:1:24:\
    \ note: 'min' declared here\n@inlinable public func min<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmphisg1xwn.swift:24:31:\
    \ error: missing argument for parameter #2 in call\n    let maxValue = max(arrCopy)\n\
    \                              ^\n                              , <#[Int]#>\n\
    Swift.max:1:24: note: 'max' declared here\n@inlinable public func max<T>(_ x:\
    \ T, _ y: T) -> T where T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let arrSize = arr.count\n\
    \    var result = [String]()\n    guard arrSize >= 1 else {\n        return result\n\
    \    }\n    let startIndex = 0\n    let endIndex = arrSize - 1\n    while startIndex\
    \ < endIndex {\n        let startIndex = startIndex + (startIndex < endIndex ?\
    \ 1 : -1)\n        if arr[startIndex] == 9 && startIndex >= endIndex {\n     \
    \       startIndex += 1\n        }\n        if startIndex >= endIndex {\n    \
    \        continue\n        }\n        result.append(names[startIndex])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgb2rar9g.swift:25:24: error: left side of mutating operator isn't\
    \ mutable: 'startIndex' is a 'let' constant\n            startIndex += 1\n   \
    \         ~~~~~~~~~~ ^\n/tmp/tmpgb2rar9g.swift:23:9: note: change 'let' to 'var'\
    \ to make it mutable\n        let startIndex = startIndex + (startIndex < endIndex\
    \ ? 1 : -1)\n        ^~~\n        var\n/tmp/tmpgb2rar9g.swift:30:23: error: cannot\
    \ find 'names' in scope\n        result.append(names[startIndex])\n          \
    \            ^~~~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  var sorted = [Int]()\n\
    \  var result = [String]()\n  for n in arr {\n    if n >= 1 && n <= 9 {\n    \
    \  sorted = sorted.sorted()\n      sorted.append(n)\n      sorted = sorted.reversed()\n\
    \      sorted.forEach { result.append(String($0)) }\n    }\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpreu0x5dk/tmpreu0x5dk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba97b21bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba97af12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba97af12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba97af117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpreu0x5dk                        0x000055c196f74b11 <unavailable> + 6929

    5    libc.so.6                          0x00002ba97b407460 __libc_start_main +
    245

    6    tmpreu0x5dk                        0x000055c196f745b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014504
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var stringArray =\
    \ [String]()\n    for element in arr {\n        if element > 9 || element < 1\
    \ {\n            continue\n        }\n        let firstLetter = String(element\
    \ % 10)\n        let firstString = firstLetter + \"One\"\n        let secondLetter\
    \ = String(element % 100)\n        let secondString = secondLetter + \"Two\"\n\
    \        let thirdLetter = String(element % 1000)\n        let thirdString = thirdLetter\
    \ + \"Three\"\n        let fourthLetter = String(element % 10000)\n        let\
    \ fourthString = fourthLetter + \"Four\"\n        let fifthLetter = String(element\
    \ % 100000)\n        let fifthString = fifthLetter + \"Five\"\n        let sixthLetter\
    \ = String(element % 1000000)\n        let sixthString = sixthLetter + \"Six\"\
    \n        let seventhLetter = String(element % 10000000)\n        let seventhString\
    \ = seventhLetter + \"Seven\"\n        let eighthLetter = String(element % 100000000)\n\
    \        let eighthString = eighthLetter + \"Eight\"\n        let ninthLetter\
    \ = String(element % 1000000000)\n        let ninthString = ninthLetter + \"Nine\"\
    \n        stringArray.append(firstString)\n        stringArray.append(secondString)\n\
    \        stringArray.append(thirdString)\n        stringArray.append(fourthString)\n\
    \        stringArray.append(fifthString)\n        stringArray.append(sixthString)\n\
    \        stringArray.append(seventhString)\n        stringArray.append(eighthString)\n\
    \        stringArray.append(ninthString)\n    }\n    return stringArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp47k2rgir/tmp47k2rgir.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4924d32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4924a29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4924a29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4924a287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47k2rgir                        0x000056135232c9e1 <unavailable> + 6625

    5    libc.so.6                          0x00002b4924f1e460 __libc_start_main +
    245

    6    tmp47k2rgir                        0x000056135232c489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let mut names = [\n\
    \        \"Zero\",\n        \"One\",\n        \"Two\",\n        \"Three\",\n \
    \       \"Four\",\n        \"Five\",\n        \"Six\",\n        \"Seven\",\n \
    \       \"Eight\",\n        \"Nine\",\n    ]\n    let mut digits = [String]()\n\
    \    let len = arr.count\n    if len > 0 {\n        digits.append(names[(arr[len\
    \ - 1] - 1) as usize])\n        if len > 1 {\n            digits.append(names[(arr[len\
    \ - 2] - 1) as usize])\n        }\n        for d in arr.into_iter().skip(len -\
    \ 1) {\n            digits.append(names[(d - 1) as usize])\n        }\n    }\n\
    \    digits.reverse()\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2e4oe_aa.swift:15:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut names =\
    \ [\n            ^\n/tmp/tmp2e4oe_aa.swift:15:13: note: join the identifiers together\n\
    \    let mut names = [\n        ~~~~^~~~~\n        mutnames\n/tmp/tmp2e4oe_aa.swift:15:13:\
    \ note: join the identifiers together with camel-case\n    let mut names = [\n\
    \        ~~~~^~~~~\n        mutNames\n/tmp/tmp2e4oe_aa.swift:27:13: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n    let mut digits = [String]()\n            ^\n/tmp/tmp2e4oe_aa.swift:27:13:\
    \ note: join the identifiers together\n    let mut digits = [String]()\n     \
    \   ~~~~^~~~~~\n        mutdigits\n/tmp/tmp2e4oe_aa.swift:27:13: note: join the\
    \ identifiers together with camel-case\n    let mut digits = [String]()\n    \
    \    ~~~~^~~~~~\n        mutDigits\n/tmp/tmp2e4oe_aa.swift:27:9: error: invalid\
    \ redeclaration of 'mut'\n    let mut digits = [String]()\n        ^\n/tmp/tmp2e4oe_aa.swift:15:9:\
    \ note: 'mut' previously declared here\n    let mut names = [\n        ^\n/tmp/tmp2e4oe_aa.swift:30:9:\
    \ error: cannot find 'digits' in scope\n        digits.append(names[(arr[len -\
    \ 1] - 1) as usize])\n        ^~~~~~\n/tmp/tmp2e4oe_aa.swift:30:23: error: cannot\
    \ find 'names' in scope\n        digits.append(names[(arr[len - 1] - 1) as usize])\n\
    \                      ^~~~~\n/tmp/tmp2e4oe_aa.swift:30:51: error: cannot find\
    \ type 'usize' in scope\n        digits.append(names[(arr[len - 1] - 1) as usize])\n\
    \                                                  ^~~~~\n/tmp/tmp2e4oe_aa.swift:32:13:\
    \ error: cannot find 'digits' in scope\n            digits.append(names[(arr[len\
    \ - 2] - 1) as usize])\n            ^~~~~~\n/tmp/tmp2e4oe_aa.swift:32:27: error:\
    \ cannot find 'names' in scope\n            digits.append(names[(arr[len - 2]\
    \ - 1) as usize])\n                          ^~~~~\n/tmp/tmp2e4oe_aa.swift:32:55:\
    \ error: cannot find type 'usize' in scope\n            digits.append(names[(arr[len\
    \ - 2] - 1) as usize])\n                                  "
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    \n    // Find the minimum value.\n    let minNum\
    \ = min(arr)\n    \n    // Find the maximum value.\n    let maxNum = max(arr)\n\
    \    \n    // Find the range from 1 to 9.\n    let minNumTo9 = (9 - minNum) +\
    \ 1\n    \n    // Initialize a [String] to store our new array.\n    var newArr:\
    \ [String] = []\n    \n    // Find the largest digit by dividing by the largest\
    \ power of 10.\n    var largestPower = 1\n    for i in minNumTo9.stride(through:\
    \ 0, by: 1) {\n        if arr[i] > 0 {\n            largestPower = i\n       \
    \     break\n        }\n    }\n    \n    // Find the smallest digit by dividing\
    \ by the smallest power of 10.\n    var smallestPower = 1\n    for i in minNumTo9.stride(through:\
    \ 0, by: -1) {\n        if arr[i] < 0 {\n            smallestPower = i\n     \
    \       break\n        }\n    }\n    \n    // Loop through the digits between\
    \ 1 and 9.\n    for i in minNumTo9.stride(through: 0, by: 1) {\n        // Figure\
    \ out the new digits based on dividing by 10 and multiplying by 10\n        //\
    \ for the smallest and largest digits.\n        var newDigit1 = (arr[i]*10)/largestPower\n\
    \        var newDigit2 = (arr[i]*10)/smallestPower\n        \n        // Append\
    \ a name based on the digit and add it to the new array.\n        let newDigitName1\
    \ = String(newDigit1)\n        let newDigitName2 = String(newDigit2)\n       \
    \ newArr.append(digitNameDict[newDigitName1])\n        newArr.append(digitNameDict[newDigitName2])\n\
    \    }\n    \n    // Reverse the new array since we're about to modify it.\n \
    \   newArr = newArr.reverse()\n    \n    // Replace the digits in the original\
    \ array with the new digits.\n    for i in minNumTo9.stride(through: 0, by: -1)\
    \ {\n        let currentDigit = arr[i]\n        let currentDigitName = String(currentDigit)\n\
    \        let newDigitIndex = newArr.firstIndex(where: { $0 == currentDigitName\
    \ })!\n        let newDigit = Int(newArr[newDigitIndex])\n        arr[i] = newDigit\n\
    \    }\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyfd1nbne.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpyfd1nbne.swift:20:25: error: missing argument for parameter #2 in\
    \ call\n    let minNum = min(arr)\n                        ^\n               \
    \         , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpyfd1nbne.swift:23:25: error: missing argument for parameter #2\
    \ in call\n    let maxNum = max(arr)\n                        ^\n            \
    \            , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable\
    \ public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmpyfd1nbne.swift:64:21: error: cannot assign value of type\
    \ '()' to type '[String]'\n    newArr = newArr.reverse()\n             ~~~~~~~^~~~~~~~~\n\
    /tmp/tmpyfd1nbne.swift:75:12: error: cannot convert return expression of type\
    \ '[Int]' to return type '[String]'\n    return arr\n           ^\n/tmp/tmpyfd1nbne.swift:75:12:\
    \ note: arguments to generic parameter 'Element' ('Int' and 'String') are expected\
    \ to be equal\n    return arr\n           ^\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let maxLen = arr.reduce(0){$0\
    \ + $1}\n    if maxLen == 0 {\n        return []\n    }\n    var res: [String]\
    \ = []\n    var curLen = 1\n    for ele in arr {\n        let len: Int = int(ele)\n\
    \        curLen *= 10\n        if curLen > maxLen {\n            res[res.length\
    \ - 1] = \"One\"\n            res.insert(0, \"One\")\n            curLen = maxLen\n\
    \        } else {\n            let idx = int((maxLen - curLen) / len) + 1\n  \
    \          res[res.length - idx] = \"One\"\n            res.insert(0, \"One\"\
    )\n            res.insert(idx, \"One\")\n            curLen = maxLen\n       \
    \ }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa6eyzdt0.swift:22:24: error: cannot find 'int' in scope\n     \
    \   let len: Int = int(ele)\n                       ^~~\n/tmp/tmpa6eyzdt0.swift:25:21:\
    \ error: value of type '[String]' has no member 'length'\n            res[res.length\
    \ - 1] = \"One\"\n                ~~~ ^~~~~~\n/tmp/tmpa6eyzdt0.swift:26:17: error:\
    \ no exact matches in call to instance method 'insert'\n            res.insert(0,\
    \ \"One\")\n                ^\n/tmp/tmpa6eyzdt0.swift:26:17: note: candidate has\
    \ partially matching parameter list (__owned String, at: Int)\n            res.insert(0,\
    \ \"One\")\n                ^\n/tmp/tmpa6eyzdt0.swift:26:17: note: candidate has\
    \ partially matching parameter list (__owned String, at: Array<String>.Index)\n\
    \            res.insert(0, \"One\")\n                ^\n/tmp/tmpa6eyzdt0.swift:29:23:\
    \ error: cannot find 'int' in scope\n            let idx = int((maxLen - curLen)\
    \ / len) + 1\n                      ^~~\n/tmp/tmpa6eyzdt0.swift:30:28: error:\
    \ cannot convert value of type 'Duration' to expected argument type 'Int'\n  \
    \          res[res.length - idx] = \"One\"\n                           ^\n/tmp/tmpa6eyzdt0.swift:30:21:\
    \ error: value of type '[String]' has no member 'length'\n            res[res.length\
    \ - idx] = \"One\"\n                ~~~ ^~~~~~\n/tmp/tmpa6eyzdt0.swift:31:17:\
    \ error: no exact matches in call to instance method 'insert'\n            res.insert(0,\
    \ \"One\")\n                ^\n/tmp/tmpa6eyzdt0.swift:31:17: note: candidate has\
    \ partially matching parameter list (__owned String, at: Int)\n            res.insert(0,\
    \ \"One\")\n                ^\n/tmp/tmpa6eyzdt0.swift:31:17: note: candidate has\
    \ partially matching parameter list (__owned String, at: Array<String>.Index)\n\
    \            res.insert(0, \"One\")\n                ^\n/tmp/tmpa6eyzdt0.swift:32:17:\
    \ error: no exact matches in call to instance method 'insert'\n            res.insert(idx,\
    \ \"One\")\n                ^\n/tmp/tmpa6eyzdt0.swift:32:17: note: found candidate\
    \ with type '(__owned String, Int) -> ()'\n            res.insert(idx, \"One\"\
    )\n                ^\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return map_reduce(arr,\
    \ { $0...3 }.sorted(), { $0 + 1 }.sorted(), { $0 + $1 }.sorted())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqb0qim9b.swift:15:12: error: cannot find 'map_reduce' in scope\n\
    \    return map_reduce(arr, { $0...3 }.sorted(), { $0 + 1 }.sorted(), { $0 + $1\
    \ }.sorted())\n           ^~~~~~~~~~\n/tmp/tmpqb0qim9b.swift:15:39: error: value\
    \ of type '(Int) -> ClosedRange<Int>' has no member 'sorted'\n    return map_reduce(arr,\
    \ { $0...3 }.sorted(), { $0 + 1 }.sorted(), { $0 + $1 }.sorted())\n          \
    \                 ~~~~~~~~~~ ^~~~~~\n/tmp/tmpqb0qim9b.swift:15:60: error: value\
    \ of type '(Int) -> Int' has no member 'sorted'\n    return map_reduce(arr, {\
    \ $0...3 }.sorted(), { $0 + 1 }.sorted(), { $0 + $1 }.sorted())\n            \
    \                                    ~~~~~~~~~~ ^~~~~~\n/tmp/tmpqb0qim9b.swift:15:82:\
    \ error: reference to member 'sorted' cannot be resolved without a contextual\
    \ type\n    return map_reduce(arr, { $0...3 }.sorted(), { $0 + 1 }.sorted(), {\
    \ $0 + $1 }.sorted())\n                                                      \
    \                           ^\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return arr\n    }\n\n    if let first = arr.first {\n        let\
    \ one = mapToOne(first)\n        let rest = arr.rest()\n        let two = mapToTwo(first)\n\
    \        let three = mapToThree(first)\n        let four = mapToFour(first)\n\
    \        let five = mapToFive(first)\n        let six = mapToSix(first)\n    \
    \    let seven = mapToSeven(first)\n        let eight = mapToEight(first)\n  \
    \      let nine = mapToNine(first)\n        return append(one, rest, two, three,\
    \ four, five, six, seven, eight, nine)\n    }\n\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwo85xeap.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpwo85xeap.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpwo85xeap.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmpwo85xeap.swift:20:19: error: cannot find 'mapToOne' in scope\n       \
    \ let one = mapToOne(first)\n                  ^~~~~~~~\n/tmp/tmpwo85xeap.swift:21:24:\
    \ error: value of type '[Int]' has no member 'rest'\n        let rest = arr.rest()\n\
    \                   ~~~ ^~~~\n/tmp/tmpwo85xeap.swift:22:19: error: cannot find\
    \ 'mapToTwo' in scope\n        let two = mapToTwo(first)\n                  ^~~~~~~~\n\
    /tmp/tmpwo85xeap.swift:23:21: error: cannot find 'mapToThree' in scope\n     \
    \   let three = mapToThree(first)\n                    ^~~~~~~~~~\n/tmp/tmpwo85xeap.swift:24:20:\
    \ error: cannot find 'mapToFour' in scope\n        let four = mapToFour(first)\n\
    \                   ^~~~~~~~~\n/tmp/tmpwo85xeap.swift:25:20: error: cannot find\
    \ 'mapToFive' in scope\n        let five = mapToFive(first)\n                \
    \   ^~~~~~~~~\n/tmp/tmpwo85xeap.swift:26:19: error: cannot find 'mapToSix' in\
    \ scope\n        let six = mapToSix(first)\n                  ^~~~~~~~\n/tmp/tmpwo85xeap.swift:27:21:\
    \ error: cannot find 'mapToSeven' in scope\n        let seven = mapToSeven(first)\n\
    \                    ^~~~~~~~~~\n/tmp/tmpwo85xeap.swift:28:21: error: cannot find\
    \ 'mapToEight' in scope\n        let eight = mapToEight(first)\n             \
    \       ^~~~~~~~~~\n/tmp/tmpwo85xeap.swift:29:20: error: cannot find 'mapToNine'\
    \ in scope\n        let nine = mapToNine(first)\n                   ^~~~~~~~~\n\
    /tmp/tmpwo85xeap.swift:30:16: error: cannot find 'append' in scope\n        return\
    \ append(one, rest, two, three, four, five, six, seven, eight, nine)\n       \
    \        ^~~~~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // We don't care\
    \ about negative numbers.\n    let arrayIsSorted = arr\n        .sort()\n    \
    \    .filter{$0 > 0 && $0 < 10}\n        .sorted { $0 > $1 }\n    let arrayWithOnesReversed\
    \ = arrayIsSorted\n        .reversed()\n        .map { NSString(string: $0).substring(with:\
    \ NSRange.init(location: 0, length: $0.count)) }\n        .sorted()\n    return\
    \ arrayWithOnesReversed\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8ns07t5e.swift:18:10: error: value of tuple type '()' has no member\
    \ 'filter'\n        .filter{$0 > 0 && $0 < 10}\n         ^~~~~~\n/tmp/tmp8ns07t5e.swift:22:16:\
    \ error: cannot find 'NSString' in scope\n        .map { NSString(string: $0).substring(with:\
    \ NSRange.init(location: 0, length: $0.count)) }\n               ^~~~~~~~\n/tmp/tmp8ns07t5e.swift:22:53:\
    \ error: cannot find 'NSRange' in scope\n        .map { NSString(string: $0).substring(with:\
    \ NSRange.init(location: 0, length: $0.count)) }\n                           \
    \                         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    \n    var result: [String] = []\n    var max: Int\
    \ = 1\n    for num in arr {\n        if max < num {\n            max = num\n \
    \       }\n    }\n    var index = 0\n    for num in arr {\n        if max < num\
    \ {\n            max = num\n            result[index] = \"One\"\n            index\
    \ += 1\n        } else if num == max {\n            result[index] = \"Two\"\n\
    \            index += 1\n        } else if num == max / 10 {\n            result[index]\
    \ = \"Three\"\n            index += 1\n        } else if num == max / 100 {\n\
    \            result[index] = \"Four\"\n            index += 1\n        } else\
    \ if num == max / 1000 {\n            result[index] = \"Five\"\n            index\
    \ += 1\n        } else if num == max / 10000 {\n            result[index] = \"\
    Six\"\n            index += 1\n        } else if num == max / 100000 {\n     \
    \       result[index] = \"Seven\"\n            index += 1\n        } else if num\
    \ == max / 1000000 {\n            result[index] = \"Eight\"\n            index\
    \ += 1\n        } else if num == max / 10000000 {\n            result[index] =\
    \ \"Nine\"\n            index += 1\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d6d3d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d6d0ca561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4d6d0ca286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4d6d0ca13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4d6d0c9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4d6cec99a0 specialized Array.subscript.modify
    + 0

    6    tmpsj0j2ydn                        0x000055abc5df425d <unavailable> + 8797

    7    tmpsj0j2ydn                        0x000055abc5df36c0 <unavailable> + 5824

    8    libc.so.6                          0x00002b4d6d5bf460 __libc_start_main +
    245

    9    tmpsj0j2ydn                        0x000055abc5df3379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tif arr == nil {\n\t\
    \treturn []\n\t}\n\tsort.Ints(arr)\n\tarr.reverse()\n\tvar result [String]\n\t\
    for _, item := range arr {\n\t\tif item == 1 {\n\t\t\tresult[0] = \"One\"\n\t\t\
    } else if item == 2 {\n\t\t\tresult[1] = \"Two\"\n\t\t} else if item == 3 {\n\t\
    \t\tresult[2] = \"Three\"\n\t\t} else if item == 4 {\n\t\t\tresult[3] = \"Four\"\
    \n\t\t} else if item == 5 {\n\t\t\tresult[4] = \"Five\"\n\t\t} else if item ==\
    \ 6 {\n\t\t\tresult[5] = \"Six\"\n\t\t} else if item == 7 {\n\t\t\tresult[6] =\
    \ \"Seven\"\n\t\t} else if item == 8 {\n\t\t\tresult[7] = \"Eight\"\n\t\t} else\
    \ if item == 9 {\n\t\t\tresult[8] = \"Nine\"\n\t\t} else {\n\t\t\tcontinue\n\t\
    \t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3f90s03e.swift:20:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        var result [String]\n                  ^\n    \
    \              ;\n/tmp/tmp3f90s03e.swift:21:7: error: expected 'in' after for-each\
    \ pattern\n        for _, item := range arr {\n             ^\n/tmp/tmp3f90s03e.swift:21:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, item :=\
    \ range arr {\n             ^\n/tmp/tmp3f90s03e.swift:15:9: warning: comparing\
    \ non-optional value of type '[Int]' to 'nil' always returns false\n        if\
    \ arr == nil {\n           ~~~ ^  ~~~\n/tmp/tmp3f90s03e.swift:18:2: error: cannot\
    \ find 'sort' in scope\n        sort.Ints(arr)\n        ^~~~\n/tmp/tmp3f90s03e.swift:19:6:\
    \ error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n\
    \        arr.reverse()\n        ~~~ ^\n/tmp/tmp3f90s03e.swift:20:6: error: type\
    \ annotation missing in pattern\n        var result [String]\n            ^\n\
    /tmp/tmp3f90s03e.swift:20:13: error: expected member name or constructor call\
    \ after type name\n        var result [String]\n                   ^\n/tmp/tmp3f90s03e.swift:20:20:\
    \ note: add arguments after the type to construct a value of the type\n      \
    \  var result [String]\n                          ^\n                        \
    \   ()\n/tmp/tmp3f90s03e.swift:20:20: note: use '.self' to reference the type\
    \ object\n        var result [String]\n                          ^\n         \
    \                  .self\n/tmp/tmp3f90s03e.swift:20:13: warning: expression of\
    \ type '[String].Type' is unused\n        var result [String]\n              \
    \     ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let mut str = vec![];\n\
    \    for i in arr {\n        if i <= 9 {\n            let s = to_str(i);\n   \
    \         str.extend(s.chars());\n        } else {\n            let s = to_str(9\
    \ - i);\n            str.extend(s.chars());\n        }\n    }\n    if str.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut reversed = str.iter().rev().collect::<Vec<&str>>();\n\
    \    let mut i = 0;\n    for s in reversed {\n        swap(&mut str[i], s, &mut\
    \ i);\n        i += 1;\n    }\n    return str.into_iter().map(|s| s.to_string()).collect();\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgv5wgrjl.swift:15:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut str = vec![];\n\
    \            ^\n/tmp/tmpgv5wgrjl.swift:15:13: note: join the identifiers together\n\
    \    let mut str = vec![];\n        ~~~~^~~\n        mutstr\n/tmp/tmpgv5wgrjl.swift:15:13:\
    \ note: join the identifiers together with camel-case\n    let mut str = vec![];\n\
    \        ~~~~^~~\n        mutStr\n/tmp/tmpgv5wgrjl.swift:28:13: error: found an\
    \ unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n    let mut reversed = str.iter().rev().collect::<Vec<&str>>();\n  \
    \          ^\n/tmp/tmpgv5wgrjl.swift:28:13: note: join the identifiers together\n\
    \    let mut reversed = str.iter().rev().collect::<Vec<&str>>();\n        ~~~~^~~~~~~~\n\
    \        mutreversed\n/tmp/tmpgv5wgrjl.swift:28:13: note: join the identifiers\
    \ together with camel-case\n    let mut reversed = str.iter().rev().collect::<Vec<&str>>();\n\
    \        ~~~~^~~~~~~~\n        mutReversed\n/tmp/tmpgv5wgrjl.swift:28:48: error:\
    \ consecutive statements on a line must be separated by ';'\n    let mut reversed\
    \ = str.iter().rev().collect::<Vec<&str>>();\n                               \
    \                ^\n                                               ;\n/tmp/tmpgv5wgrjl.swift:28:48:\
    \ error: expected expression\n    let mut reversed = str.iter().rev().collect::<Vec<&str>>();\n\
    \                                               ^\n/tmp/tmpgv5wgrjl.swift:29:13:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n    let mut i = 0;\n            ^\n/tmp/tmpgv5wgrjl.swift:29:13:\
    \ note: join the identifiers together\n    let mut i = 0;\n        ~~~~^\n   \
    \     muti\n/tmp/tmpgv5wgrjl.swift:29:13: note: join the identifiers together\
    \ with camel-case\n    let mut i = 0;\n        ~~~~^\n        mutI\n/tmp/tmpgv5wgrjl.swift:31:19:\
    \ error: expected ',' separator\n        swap(&mut str[i], s, &mut i);\n     \
    \             ^\n                 ,\n/tmp/tmpgv5wgrjl.swift:34:36: error: expected\
    \ ',' separator\n    return str.into_ite"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.isEmpty\
    \ else { return [] }\n    let ones = arr.filter { $0 <= 1 && $0 <= 9 }\n    return\
    \ reverse(ones)\n        .map { String($0 % 10 + 10 + ones[$0 - 1].count ?? 0)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmparja4dtd.swift:17:12: error: cannot find 'reverse' in scope\n \
    \   return reverse(ones)\n           ^~~~~~~\n/tmp/tmparja4dtd.swift:17:12: error:\
    \ the compiler is unable to type-check this expression in reasonable time; try\
    \ breaking up the expression into distinct sub-expressions\n    return reverse(ones)\n\
    \           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014531
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  guard arr.isEmpty else\
    \ { return arr }\n  var newArr = [String]()\n  for i in 0 ..< arr.count {\n  \
    \  let idx = findIndex(arr: arr, reversed: false, index: i)\n    if idx != -1\
    \ {\n      newArr.append(nameFromIdx(idx: idx))\n    }\n  }\n  return newArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4no7nclg.swift:15:35: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n  guard arr.isEmpty else { return arr\
    \ }\n                                  ^\n/tmp/tmp4no7nclg.swift:15:35: note:\
    \ arguments to generic parameter 'Element' ('Int' and 'String') are expected to\
    \ be equal\n  guard arr.isEmpty else { return arr }\n                        \
    \          ^\n/tmp/tmp4no7nclg.swift:18:15: error: cannot find 'findIndex' in\
    \ scope\n    let idx = findIndex(arr: arr, reversed: false, index: i)\n      \
    \        ^~~~~~~~~\n/tmp/tmp4no7nclg.swift:20:21: error: cannot find 'nameFromIdx'\
    \ in scope\n      newArr.append(nameFromIdx(idx: idx))\n                    ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return reverse_by(arr)\
    \ { Int($0) >= 10 && Int($0) < 20 }\n        .map { String($0) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmphcj5pj4n.swift:15:12: error: cannot find 'reverse_by' in scope\n\
    \    return reverse_by(arr) { Int($0) >= 10 && Int($0) < 20 }\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    arr.sort(<)\n   \
    \ return arr.reverse().map(<).map(<).get()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8v29g2dv.swift:15:14: error: missing argument label 'by:' in call\n\
    \    arr.sort(<)\n             ^\n             by: \n/tmp/tmp8v29g2dv.swift:15:9:\
    \ error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n\
    \    arr.sort(<)\n    ~~~ ^\n/tmp/tmp8v29g2dv.swift:16:26: error: value of tuple\
    \ type '()' has no member 'map'\n    return arr.reverse().map(<).map(<).get()\n\
    \           ~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard let numbers\
    \ = arr.filter {\n        $0 >= 1 &&\n            $0 <= 9\n    } else { return\
    \ [] }\n\n    var result = [String]()\n    for i in 0..<numbers.count {\n    \
    \    result.append(Int(numbers[i]).description)\n    }\n    result.reverse()\n\
    \n    result.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7ie2dgys.swift:15:36: error: expected 'else' after 'guard' condition\n\
    \    guard let numbers = arr.filter {\n                                   ^\n\
    \                                   else \n/tmp/tmp7ie2dgys.swift:16:9: error:\
    \ anonymous closure argument not contained in a closure\n        $0 >= 1 &&\n\
    \        ^\n/tmp/tmp7ie2dgys.swift:17:13: error: anonymous closure argument not\
    \ contained in a closure\n            $0 <= 9\n            ^\n/tmp/tmp7ie2dgys.swift:18:6:\
    \ error: consecutive statements on a line must be separated by ';'\n    } else\
    \ { return [] }\n     ^\n     ;\n/tmp/tmp7ie2dgys.swift:18:7: error: expected\
    \ expression\n    } else { return [] }\n      ^\n/tmp/tmp7ie2dgys.swift:15:11:\
    \ error: initializer for conditional binding must have Optional type, not '((Int)\
    \ throws -> Bool) throws -> [Int]'\n    guard let numbers = arr.filter {\n   \
    \       ^             ~~~~~~~~~~\n/tmp/tmp7ie2dgys.swift:21:26: error: value of\
    \ type '((Int) throws -> Bool) throws -> [Int]' has no member 'count'\n    for\
    \ i in 0..<numbers.count {\n                 ~~~~~~~ ^~~~~\n/tmp/tmp7ie2dgys.swift:26:12:\
    \ warning: result of call to 'map' is unused\n    result.map { String($0) }\n\
    \           ^   ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    defer func() {\n\
    \        if r := recover(); r != nil {\n            fmt.Fprintln(os.Stderr, \"\
    recovered\", r)\n        }\n    }()\n\n    if arr == nil {\n        return []\n\
    \    }\n\n    let arrString = String(arr)\n    if arrString == \"\" {\n      \
    \  return []\n    }\n\n    let len = arrString.count\n    var arrStringLen = arrString.length\n\
    \    var resLen = len * 9\n\n    var lastDigitIdx = 0\n    for idx3 = 0; idx3\
    \ < len; idx3++ {\n        if idx3 == 0 {\n            resLen += idx3\n      \
    \  } else {\n            resLen += idx3 - lastDigitIdx\n        }\n        lastDigitIdx\
    \ = idx3\n    }\n\n    var str = [String](count: resLen, repeatedValue: \"\")\n\
    \    str.shuffle()\n\n    for idx2 = 0; idx2 < len; idx2++ {\n        switch idx2\
    \ * 9 {\n        case 0:\n            str[0] = String(arr[idx2])\n        case\
    \ 1:\n            str[1] = String(arr[idx2])\n        case 2:\n            str[2]\
    \ = String(arr[idx2])\n        case 3:\n            str[3] = String(arr[idx2])\n\
    \        case 4:\n            str[4] = String(arr[idx2])\n        case 5:\n  \
    \          str[5] = String(arr[idx2])\n        case 6:\n            str[6] = String(arr[idx2])\n\
    \        case 7:\n            str[7] = String(arr[idx2])\n        case 8:\n  \
    \          str[8] = String(arr[idx2])\n        case 9:\n            str[9] = String(arr[idx2])\n\
    \        default:\n            fmt.Fprintln(os.Stderr, \"bad case in by_length\"\
    )\n        }\n\n        str.shuffle()\n    }\n\n    return str\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl5myepu8.swift:15:11: error: expected '{' after 'defer'\n    defer\
    \ func() {\n          ^\n/tmp/tmpl5myepu8.swift:16:14: error: expected '{' after\
    \ 'if' condition\n        if r := recover(); r != nil {\n             ^\n/tmp/tmpl5myepu8.swift:19:6:\
    \ error: consecutive statements on a line must be separated by ';'\n    }()\n\
    \     ^\n     ;\n/tmp/tmpl5myepu8.swift:35:5: error: C-style for statement has\
    \ been removed in Swift 3\n    for idx3 = 0; idx3 < len; idx3++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpl5myepu8.swift:47:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for idx2 = 0; idx2 < len; idx2++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpl5myepu8.swift:16:12: error: cannot find 'r' in scope\n        if r :=\
    \ recover(); r != nil {\n           ^\n/tmp/tmpl5myepu8.swift:17:13: error: cannot\
    \ find 'fmt' in scope\n            fmt.Fprintln(os.Stderr, \"recovered\", r)\n\
    \            ^~~\n/tmp/tmpl5myepu8.swift:17:26: error: cannot find 'os' in scope\n\
    \            fmt.Fprintln(os.Stderr, \"recovered\", r)\n                     \
    \    ^~\n/tmp/tmpl5myepu8.swift:17:50: error: cannot find 'r' in scope\n     \
    \       fmt.Fprintln(os.Stderr, \"recovered\", r)\n                          \
    \                       ^\n/tmp/tmpl5myepu8.swift:21:12: warning: comparing non-optional\
    \ value of type '[Int]' to 'nil' always returns false\n    if arr == nil {\n \
    \      ~~~ ^  ~~~\n/tmp/tmpl5myepu8.swift:25:21: error: no exact matches in call\
    \ to initializer \n    let arrString = String(arr)\n                    ^\nSwift.String:4:12:\
    \ note: candidate requires that the types 'Int' and 'Character' be equivalent\
    \ (requirement specified as 'S.Element' == 'Character')\n    public init<S>(_\
    \ characters: S) where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate requires that the types 'String.Element' (aka 'Character') and\
    \ 'Int' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\nS"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var arr2 = arr\n\
    \    if arr2.isEmpty {\n        return []\n    }\n    arr2.sort{ $0 < $1 }\n \
    \   var newArr = [String]()\n    for number in arr2 {\n        if number < 1 {\n\
    \            continue\n        }\n        var lastDigit = number % 10\n      \
    \  if lastDigit == 0 {\n            newArr += [\"One\"]\n        }\n        if\
    \ lastDigit < 2 {\n            newArr += [\"Two\", \"Three\"]\n        } else\
    \ {\n            newArr += [\"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n        }\n    }\n    arr2 = arr2.reverse()\n    for number in arr2\
    \ {\n        let index = newArr.index(of: String(number))!\n        newArr.remove(at:\
    \ index)\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdbw91pvr.swift:35:17: error: cannot assign value of type '()' to\
    \ type '[Int]'\n    arr2 = arr2.reverse()\n           ~~~~~^~~~~~~~~\n/tmp/tmpdbw91pvr.swift:37:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = newArr.index(of: String(number))!\n                           ^\n/tmp/tmpdbw91pvr.swift:37:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = newArr.index(of: String(number))!\n\
    \                           ^~~~~\n                           firstIndex\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let low = Int(arr.min())\n\
    \    let high = Int(arr.max())\n    var result = Array(count: high - low + 1,\
    \ repeatedValue: \"\")\n    for (i in 0..<result.count) {\n        result[i] =\
    \ IntToStr(low+i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2f57cb5u.swift:18:12: error: expected ',' separator\n    for (i\
    \ in 0..<result.count) {\n           ^\n          ,\n/tmp/tmp2f57cb5u.swift:18:12:\
    \ error: expected pattern\n    for (i in 0..<result.count) {\n           ^\n/tmp/tmp2f57cb5u.swift:18:33:\
    \ error: expected 'in' after for-each pattern\n    for (i in 0..<result.count)\
    \ {\n                                ^\n/tmp/tmp2f57cb5u.swift:18:33: error: expected\
    \ Sequence expression for for-each loop\n    for (i in 0..<result.count) {\n \
    \                               ^\n/tmp/tmp2f57cb5u.swift:15:23: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n    let\
    \ low = Int(arr.min())\n                      ^\n/tmp/tmp2f57cb5u.swift:15:23:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    let low = Int(arr.min())\n                      ^\n             \
    \               ?? <#default value#>\n/tmp/tmp2f57cb5u.swift:15:23: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    let low\
    \ = Int(arr.min())\n                      ^\n                           !\n/tmp/tmp2f57cb5u.swift:16:24:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    let high = Int(arr.max())\n                       ^\n/tmp/tmp2f57cb5u.swift:16:24:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    let high = Int(arr.max())\n                       ^\n           \
    \                  ?? <#default value#>\n/tmp/tmp2f57cb5u.swift:16:24: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    let high\
    \ = Int(arr.max())\n                       ^\n                            !\n\
    /tmp/tmp2f57cb5u.swift:17:62: error: extra argument 'repeatedValue' in call\n\
    \    var result = Array(count: high - low + 1, repeatedValue: \"\")\n        \
    \              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n/tmp/tmp2f57cb5u.swift:17:24:\
    \ error: missing argument for parameter 'repeating' in call\n    var result =\
    \ Array(count: high - low + 1, repeatedValue: \"\")\n           "
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tif arr == nil {\n\t\
    \treturn []\n\t}\n\n\tvar result [String]\n\tfor i := 0; i < len(arr); i++ {\n\
    \t\tif i >= 9 {\n\t\t\tresult[i] = \"Nine\"\n\t\t\tcontinue\n\t\t}\n\n\t\tif arr[i]\
    \ < 10 {\n\t\t\tresult[i] = \"One\"\n\t\t\tcontinue\n\t\t}\n\n\t\tvar last [String]\n\
    \t\tfor j := i; j < len(arr); j++ {\n\t\t\tif arr[j] < 10 {\n\t\t\t\tlast[j] =\
    \ result[j]\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tlast[j] = by_length(arr[last[j]])\
    \ + \"-\" + result[j]\n\t\t}\n\n\t\tresult = last\n\t}\n\n\treturn result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpicdy5bko.swift:19:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        var result [String]\n                  ^\n    \
    \              ;\n/tmp/tmpicdy5bko.swift:20:9: error: expected type\n        for\
    \ i := 0; i < len(arr); i++ {\n               ^\n                <#type#>\n/tmp/tmpicdy5bko.swift:20:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(arr);\
    \ i++ {\n               ^\n/tmp/tmpicdy5bko.swift:20:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(arr); i++ {\n    \
    \           ^\n/tmp/tmpicdy5bko.swift:31:11: error: consecutive statements on\
    \ a line must be separated by ';'\n                var last [String]\n       \
    \                 ^\n                        ;\n/tmp/tmpicdy5bko.swift:32:10:\
    \ error: expected type\n                for j := i; j < len(arr); j++ {\n    \
    \                   ^\n                        <#type#>\n/tmp/tmpicdy5bko.swift:32:10:\
    \ error: expected 'in' after for-each pattern\n                for j := i; j <\
    \ len(arr); j++ {\n                       ^\n/tmp/tmpicdy5bko.swift:32:10: error:\
    \ expected Sequence expression for for-each loop\n                for j := i;\
    \ j < len(arr); j++ {\n                       ^\n/tmp/tmpicdy5bko.swift:15:9:\
    \ warning: comparing non-optional value of type '[Int]' to 'nil' always returns\
    \ false\n        if arr == nil {\n           ~~~ ^  ~~~\n/tmp/tmpicdy5bko.swift:19:6:\
    \ error: type annotation missing in pattern\n        var result [String]\n   \
    \         ^\n/tmp/tmpicdy5bko.swift:19:13: error: expected member name or constructor\
    \ call after type name\n        var result [String]\n                   ^\n/tmp/tmpicdy5bko.swift:19:20:\
    \ note: add arguments after the type to construct a value of the type\n      \
    \  var result [String]\n                          ^\n                        \
    \   ()\n/tmp/tmpicdy5bko.swift:19:20: note: use '.self' to reference the type\
    \ object\n        var result [String]\n                          ^\n         \
    \                  .self\n/tmp/tmpicdy5bko.swift:19:13: warning: expression of\
    \ type '[String].Type' is"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr == nil {\n\
    \        return arr\n    }\n    let sortedArr = arr.sorted()\n    return Array(sortedArr)\n\
    \        .enumerated()\n        .map {\n            switch $1 {\n            case\
    \ .first: return \"One\"\n            case .second: return \"Two\"\n         \
    \   case .third: return \"Three\"\n            case .fourth: return \"Four\"\n\
    \            case .fifth: return \"Five\"\n            case .fifth: return \"\
    Six\"\n            case .fifth: return \"Seven\"\n            case .fifth: return\
    \ \"Eight\"\n            case .fifth: return \"Nine\"\n            case .third:\
    \ return \"One\"\n            case .third: return \"Two\"\n            case .third:\
    \ return \"One\"\n            case .second: return \"Two\"\n            default:\
    \ return \"\"\n            }\n        }\n        .reversed()\n        .map {\n\
    \            switch $0 {\n            case 0: return \"One\"\n            case\
    \ 1: return \"Two\"\n            case 2: return \"Three\"\n            case 3:\
    \ return \"Four\"\n            case 4: return \"Five\"\n            case 5: return\
    \ \"Six\"\n            case 6: return \"Seven\"\n            case 7: return \"\
    Eight\"\n            case 8: return \"Nine\"\n            default: return \"\"\
    \n            }\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "error: compile command failed due to signal 6 (use -v to see invocation)\n\
    /tmp/tmpd4lohi6s.swift:15:12: warning: comparing non-optional value of type '[Int]'\
    \ to 'nil' always returns false\n    if arr == nil {\n       ~~~ ^  ~~~\n/tmp/tmpd4lohi6s.swift:16:16:\
    \ error: cannot convert return expression of type '[Int]' to return type '[String]'\n\
    \        return arr\n               ^\n/tmp/tmpd4lohi6s.swift:16:16: note: arguments\
    \ to generic parameter 'Element' ('Int' and 'String') are expected to be equal\n\
    \        return arr\n               ^\n/tmp/tmpd4lohi6s.swift:40:14: error: unable\
    \ to infer type of a closure parameter '$0' in the current context\n        .map\
    \ {\n             ^\nswift-frontend: /home/build-user/swift/include/swift/Sema/ConstraintSystem.h:3595:\
    \ swift::Type swift::constraints::ConstraintSystem::getType(swift::ASTNode) const:\
    \ Assertion `hasType(node) && \"Expected type to have been set!\"' failed.\nPlease\
    \ submit a bug report (https://swift.org/contributing/#reporting-bugs) and include\
    \ the project and the crash backtrace.\nStack dump:\n0.\tProgram arguments: /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/bin/swift-frontend\
    \ -frontend -c -primary-file /tmp/tmpd4lohi6s.swift -target x86_64-unknown-linux-gnu\
    \ -disable-objc-interop -new-driver-path /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/bin/swift-driver\
    \ -empty-abi-descriptor -resource-dir /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/lib/swift\
    \ -module-name tmpd4lohi6s -o /tmp/TemporaryDirectory.lrilUF/tmpd4lohi6s-1.o\n\
    1.\tSwift version 5.8-dev (LLVM 07d14852a049e40, Swift 613b3223d9ec5f6)\n2.\t\
    Compiling with the current language version\n3.\tWhile evaluating request TypeCheckSourceFileRequest(source_file\
    \ \"/tmp/tmpd4lohi6s.swift\")\n4.\tWhile evaluating request TypeCheckFunctionBodyRequest(tmpd4lohi6s.(file).by_length(arr:)@/tmp/tmpd4lohi6s.swift:14:6)\n\
    5.\tWhile type-checking statement at [/tmp/tmpd4lohi6s.swift:14:40 "
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr != nil\
    \ else {\n        return []\n    }\n\n    var result = arr\n    var length = 0\n\
    \    for i in result {\n        length += 1\n    }\n    result = result.sorted()\n\
    \    result.reverse()\n    result = result.reduce([String]()) { $0 + [(names[$1]\
    \ as String)] }\n\n    if length == 0 {\n        return result\n    }\n\n    for\
    \ _ in 0..<length {\n        result.removeLast()\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt52ubrdu.swift:15:15: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns true\n    guard arr != nil else {\n   \
    \       ~~~ ^  ~~~\n/tmp/tmpt52ubrdu.swift:26:49: error: cannot find 'names' in\
    \ scope\n    result = result.reduce([String]()) { $0 + [(names[$1] as String)]\
    \ }\n                                                ^~~~~\n/tmp/tmpt52ubrdu.swift:29:16:\
    \ error: cannot convert return expression of type '[Int]' to return type '[String]'\n\
    \        return result\n               ^\n/tmp/tmpt52ubrdu.swift:29:16: note:\
    \ arguments to generic parameter 'Element' ('Int' and 'String') are expected to\
    \ be equal\n        return result\n               ^\n/tmp/tmpt52ubrdu.swift:35:12:\
    \ error: cannot convert return expression of type '[Int]' to return type '[String]'\n\
    \    return result\n           ^\n/tmp/tmpt52ubrdu.swift:35:12: note: arguments\
    \ to generic parameter 'Element' ('Int' and 'String') are expected to be equal\n\
    \    return result\n           ^\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.isEmpty\
    \ || arr.count > 10 else { return [] }\n    let arr = arr.map({ Int($0) })\n \
    \   let min = arr.min()\n    let max = arr.max()\n\n    var output = String()\n\
    \    var isFirst = true\n\n    for i in arr {\n        if min <= i && i <= max\
    \ {\n            if isFirst { isFirst = false }\n            else { output +=\
    \ \", \" }\n            output += \"\\(digitToName(i))\"\n        }\n    }\n\n\
    \    return output.split(separator: \", \") as [String]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvfw95c7x.swift:24:12: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min <= i && i <= max {\n \
    \          ^\n/tmp/tmpvfw95c7x.swift:17:9: note: short-circuit using 'guard' to\
    \ exit this function early if the optional value contains 'nil'\n    let min =\
    \ arr.min()\n        ^\n    guard               else { return <#default value#>\
    \ }\n/tmp/tmpvfw95c7x.swift:17:19: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n    let min = arr.min()\n          \
    \        ^\n                        ?? <#default value#>\n/tmp/tmpvfw95c7x.swift:17:19:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    let min = arr.min()\n                  ^\n                      \
    \ !\n/tmp/tmpvfw95c7x.swift:24:12: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n        if min <= i && i <= max {\n\
    \           ^\n               ?? <#default value#>\n/tmp/tmpvfw95c7x.swift:24:12:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if min <= i && i <= max {\n           ^\n              !\n/tmp/tmpvfw95c7x.swift:24:29:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        if min <= i && i <= max {\n                            ^\n/tmp/tmpvfw95c7x.swift:18:9:\
    \ note: short-circuit using 'guard' to exit this function early if the optional\
    \ value contains 'nil'\n    let max = arr.max()\n        ^\n    guard        \
    \       else { return <#default value#> }\n/tmp/tmpvfw95c7x.swift:18:19: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \    let max = arr.max()\n                  ^\n                        ?? <#default\
    \ value#>\n/tmp/tmpvfw95c7x.swift:18:19: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n    let max = arr.max()\n  \
    \                ^\n                       !\n/tmp/tmpvfw95c7x.swift:24:29: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \      "
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n\n    var chars = [String]()\n\n    let min = arr.min()\n\
    \    let max = arr.max()\n    \n    guard min <= max && min <= 9 && max >= 1 &&\
    \ max >= 9 else { return chars }\n    \n    var cur = min\n    while cur <= max\
    \ {\n        guard let index = arr.index(of: cur) else {\n            break\n\
    \        }\n        chars.append(arr[index])\n        cur += 1\n    }\n    \n\
    \    chars.reverse()\n    return chars\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6gkums7t.swift:22:11: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    guard min <= max && min <= 9 && max\
    \ >= 1 && max >= 9 else { return chars }\n          ^\n/tmp/tmp6gkums7t.swift:22:11:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    guard min <= max && min <= 9 && max >= 1 && max >= 9 else { return\
    \ chars }\n          ^\n              ?? <#default value#>\n/tmp/tmp6gkums7t.swift:22:11:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    guard min <= max && min <= 9 && max >= 1 && max >= 9 else { return\
    \ chars }\n          ^\n             !\n/tmp/tmp6gkums7t.swift:22:18: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n    guard\
    \ min <= max && min <= 9 && max >= 1 && max >= 9 else { return chars }\n     \
    \            ^\n/tmp/tmp6gkums7t.swift:22:18: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    guard min <= max && min\
    \ <= 9 && max >= 1 && max >= 9 else { return chars }\n                 ^\n   \
    \                  ?? <#default value#>\n/tmp/tmp6gkums7t.swift:22:18: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    guard\
    \ min <= max && min <= 9 && max >= 1 && max >= 9 else { return chars }\n     \
    \            ^\n                    !\n/tmp/tmp6gkums7t.swift:22:25: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n    guard\
    \ min <= max && min <= 9 && max >= 1 && max >= 9 else { return chars }\n     \
    \                   ^\n/tmp/tmp6gkums7t.swift:22:25: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n    guard min <=\
    \ max && min <= 9 && max >= 1 && max >= 9 else { return chars }\n            \
    \            ^\n                            ?? <#default value#>\n/tmp/tmp6gkums7t.swift:22:25:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    guard min <= max && min <= 9 && max >= 1 && max >= 9 else { return\
    \ chars }\n      "
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr == nil { return\
    \ [] }\n    \n    var result: [String] = []\n    var first: Int = Int(arr[0])\n\
    \    if first < 1 && first > 9 {\n        return arr\n    }\n    \n    for v in\
    \ arr {\n        if v < 1 || v > 9 {\n            continue\n        }\n      \
    \  \n        let digit = Int(v)\n        \n        if digit == first {\n     \
    \       result.append(one())\n            continue\n        }\n        \n    \
    \    let index = digit/10\n        result.append(digit.named[Int(index)])\n  \
    \  }\n    \n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmphea_hdr1.swift:15:12: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if arr == nil { return [] }\n\
    \       ~~~ ^  ~~~\n/tmp/tmphea_hdr1.swift:20:16: error: cannot convert return\
    \ expression of type '[Int]' to return type '[String]'\n        return arr\n \
    \              ^\n/tmp/tmphea_hdr1.swift:20:16: note: arguments to generic parameter\
    \ 'Element' ('Int' and 'String') are expected to be equal\n        return arr\n\
    \               ^\n/tmp/tmphea_hdr1.swift:31:27: error: cannot find 'one' in scope\n\
    \            result.append(one())\n                          ^~~\n/tmp/tmphea_hdr1.swift:36:29:\
    \ error: value of type 'Int' has no member 'named'\n        result.append(digit.named[Int(index)])\n\
    \                      ~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var arr2 = [String]()\n    for num in arr.reverse()\
    \ {\n        switch num {\n        case 1: arr2.append(\"One\")\n        case\
    \ 2: arr2.append(\"Two\")\n        case 3: arr2.append(\"Three\")\n        case\
    \ 4: arr2.append(\"Four\")\n        case 5: arr2.append(\"Five\")\n        case\
    \ 6: arr2.append(\"Six\")\n        case 7: arr2.append(\"Seven\")\n        case\
    \ 8: arr2.append(\"Eight\")\n        case 9: arr2.append(\"Nine\")\n        default:\n\
    \            break\n        }\n    }\n    return arr2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpegk_yb09.swift:19:20: error: for-in loop requires '()' to conform\
    \ to 'Sequence'\n    for num in arr.reverse() {\n               ~~~~^~~~~~~~~\n\
    /tmp/tmpegk_yb09.swift:19:20: error: cannot use mutating member on immutable value:\
    \ 'arr' is a 'let' constant\n    for num in arr.reverse() {\n               ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    if arr.isEmpty {\n        return result\n    }\n    var first = true\n\
    \    for integer in arr {\n        if first {\n            first = false\n   \
    \         continue\n        }\n        switch integer {\n        case 1:\n   \
    \         result.append(contentsOf: [\"One\", \"Two\"])\n        case 2:\n   \
    \         result.append(contentsOf: [\"Two\", \"One\"])\n        case 3:\n   \
    \         result.append(contentsOf: [\"Three\", \"Two\"])\n        case 4:\n \
    \           result.append(contentsOf: [\"Four\", \"Two\"])\n        case 5:\n\
    \            result.append(contentsOf: [\"Five\", \"Two\"])\n        case 6:\n\
    \            result.append(contentsOf: [\"Six\", \"Two\"])\n        case 7:\n\
    \            result.append(contentsOf: [\"Seven\", \"Two\"])\n        case 8:\n\
    \            result.append(contentsOf: [\"Eight\", \"Two\"])\n        case 9:\n\
    \            result.append(contentsOf: [\"Nine\", \"Two\"])\n        case 10:\n\
    \            result.append(contentsOf: [\"Ten\", \"Two\"])\n        case 11:\n\
    \            result.append(contentsOf: [\"Eleven\", \"Two\"])\n        case 12:\n\
    \            result.append(contentsOf: [\"Twelve\", \"Two\"])\n        case 13:\n\
    \            result.append(contentsOf: [\"Thirteen\", \"Two\"])\n        case\
    \ 14:\n            result.append(contentsOf: [\"Fourteen\", \"Two\"])\n      \
    \  case 15:\n            result.append(contentsOf: [\"Fifteen\", \"Two\"])\n \
    \       case 16:\n            result.append(contentsOf: [\"Sixteen\", \"Two\"\
    ])\n        case 17:\n            result.append(contentsOf: [\"Seventeen\", \"\
    Two\"])\n        case 18:\n            result.append(contentsOf: [\"Eighteen\"\
    , \"Two\"])\n        case 19:\n            result.append(contentsOf: [\"Nineteen\"\
    , \"Two\"])\n        case 20:\n            result.append(contentsOf: [\"Twenty\"\
    , \"Two\"])\n        case 21:\n            result.append(contentsOf: [\"Twenty\
    \ One\", \"Two\"])\n        case 22:\n            result.append(contentsOf: [\"\
    Twenty-one\", \"Two\"])\n        case 23:\n            result.append(contentsOf:\
    \ [\"Twenty-two\", \"Two\"])\n        case 24:\n            result.append(contentsOf:\
    \ [\"Twenty-three\", \"Two\"])\n        case 25:\n            result.append(contentsOf:\
    \ [\"Twenty-four\", \"Two\"])\n        case 26:\n            result.append(contentsOf:\
    \ [\"Twenty-five\", \"Two\"])\n        case 27:\n            result.append(contentsOf:\
    \ [\"Twenty-six\", \"Two\"])\n        case 28:\n            result.append(contentsOf:\
    \ [\"Twenty-seven\", \"Two\"])\n        case 29:\n            result.append(contentsOf:\
    \ [\"Twenty-eight\", \"Two\"])\n        case 30:\n            result.append(contentsOf:\
    \ [\"Twenty-nine\", \"Two\"])\n        case 31:\n            result.append(contentsOf:\
    \ [\"Thirty\", \"Two\"])\n        case 32:\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuzccieof.swift:88:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 32:\n        ^~~~~~~~\n    \
    \             break\n/tmp/tmpuzccieof.swift:109:63: error: expected '}' at end\
    \ of brace statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])\n                                                              ^\n\
    /tmp/tmpuzccieof.swift:20:24: note: to match this opening '{'\n    for integer\
    \ in arr {\n                       ^\n/tmp/tmpuzccieof.swift:109:63: error: expected\
    \ '}' at end of brace statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\n                                                    \
    \          ^\n/tmp/tmpuzccieof.swift:14:40: note: to match this opening '{'\n\
    func by_length(arr: [Int]) -> [String] {\n                                   \
    \    ^\n/tmp/tmpuzccieof.swift:25:9: error: switch must be exhaustive\n      \
    \  switch integer {\n        ^\n/tmp/tmpuzccieof.swift:25:9: note: do you want\
    \ to add a default clause?\n        switch integer {\n        ^\n/tmp/tmpuzccieof.swift:93:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    \n    var arr: [Int]\
    \ = arr\n    \n    if arr.isEmpty {\n        return []\n    }\n    \n    var result:\
    \ [String] = []\n    \n    for i in 0..<arr.count {\n        if i <= 9 {\n   \
    \         result.append(String(arr[i]))\n        } else {\n            result.append(getName(arr[i]))\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf9qyl7e6.swift:28:27: error: cannot find 'getName' in scope\n \
    \           result.append(getName(arr[i]))\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  if arr.isEmpty { return\
    \ [] }\n  defer { _ = arr.reverse() }\n  var result = [String]()\n  var index\
    \ = 0\n  for val in arr {\n    switch val {\n    case 1 ...9:\n      result.append(one[index\
    \ % 10])\n      index += 1\n    case 10, 11:\n      result.append(ten[index %\
    \ 10])\n      index += 1\n    case 12:\n      result.append(twelve[index % 12])\n\
    \      index += 1\n    case 13:\n      result.append(thirteen[index % 13])\n \
    \     index += 1\n    case 14, 15:\n      result.append(fourteen[index % 14])\n\
    \      index += 1\n    case 16, 17:\n      result.append(fifteen[index % 16])\n\
    \      index += 1\n    case 18:\n      result.append(sixteen[index % 18])\n  \
    \    index += 1\n    case 19:\n      result.append(seventeen[index % 19])\n  \
    \    index += 1\n    case 20:\n      result.append(eighteen[index % 20])\n   \
    \   index += 1\n    case 21:\n      result.append(nineteen[index % 21])\n    \
    \  index += 1\n    default:\n      break\n    }\n  }\n  return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp45faz_mw.swift:21:12: error: expected ':' after 'case'\n    case\
    \ 1 ...9:\n           ^\n/tmp/tmp45faz_mw.swift:21:16: error: consecutive statements\
    \ on a line must be separated by ';'\n    case 1 ...9:\n               ^\n   \
    \            ;\n/tmp/tmp45faz_mw.swift:21:16: error: expected expression\n   \
    \ case 1 ...9:\n               ^\n/tmp/tmp45faz_mw.swift:16:19: error: cannot\
    \ use mutating member on immutable value: 'arr' is a 'let' constant\n  defer {\
    \ _ = arr.reverse() }\n              ~~~ ^\n/tmp/tmp45faz_mw.swift:21:12: warning:\
    \ result of operator '...' is unused\n    case 1 ...9:\n           ^  ~\n/tmp/tmp45faz_mw.swift:25:21:\
    \ error: cannot find 'ten' in scope\n      result.append(ten[index % 10])\n  \
    \                  ^~~\n/tmp/tmp45faz_mw.swift:28:21: error: cannot find 'twelve'\
    \ in scope\n      result.append(twelve[index % 12])\n                    ^~~~~~\n\
    /tmp/tmp45faz_mw.swift:31:21: error: cannot find 'thirteen' in scope\n      result.append(thirteen[index\
    \ % 13])\n                    ^~~~~~~~\n/tmp/tmp45faz_mw.swift:34:21: error: cannot\
    \ find 'fourteen' in scope\n      result.append(fourteen[index % 14])\n      \
    \              ^~~~~~~~\n/tmp/tmp45faz_mw.swift:37:21: error: cannot find 'fifteen'\
    \ in scope\n      result.append(fifteen[index % 16])\n                    ^~~~~~~\n\
    /tmp/tmp45faz_mw.swift:40:21: error: cannot find 'sixteen' in scope\n      result.append(sixteen[index\
    \ % 18])\n                    ^~~~~~~\n/tmp/tmp45faz_mw.swift:43:21: error: cannot\
    \ find 'seventeen' in scope\n      result.append(seventeen[index % 19])\n    \
    \                ^~~~~~~~~\n/tmp/tmp45faz_mw.swift:46:21: error: cannot find 'eighteen'\
    \ in scope\n      result.append(eighteen[index % 20])\n                    ^~~~~~~~\n\
    /tmp/tmp45faz_mw.swift:49:21: error: cannot find 'nineteen' in scope\n      result.append(nineteen[index\
    \ % 21])\n                    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // This implementation\
    \ is O(n log n)\n    if arr.isEmpty {\n        return []\n    }\n    \n    var\
    \ nums = arr\n    var reversed = reverse(nums)\n    let minLength = 1\n    let\
    \ maxLength = 9\n    var reversedString = \"\"\n    for length in minLength..<maxLength\
    \ {\n        let index = min(0..<reversed.count)\n        if reversed[index] ==\
    \ length {\n            let word = words[reversed[index]]\n            reversedString\
    \ += word\n            reversed[index] = reversed.count\n        }\n    }\n  \
    \  \n    arr.reverse()\n    arr.map { arr.append($0) }\n    return arr + reversedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwmuy5v2m.swift:21:20: error: cannot find 'reverse' in scope\n \
    \   var reversed = reverse(nums)\n                   ^~~~~~~\n/tmp/tmpwmuy5v2m.swift:26:21:\
    \ error: global function 'min' requires that 'Range<Int>' conform to 'Comparable'\n\
    \        let index = min(0..<reversed.count)\n                    ^\nSwift.min:1:24:\
    \ note: where 'T' = 'Range<Int>'\n@inlinable public func min<T>(_ x: T, _ y: T)\
    \ -> T where T : Comparable\n                       ^\n/tmp/tmpwmuy5v2m.swift:26:43:\
    \ error: missing argument for parameter #2 in call\n        let index = min(0..<reversed.count)\n\
    \                                          ^\n                               \
    \           , <#Range<Int>#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable\
    \ public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmpwmuy5v2m.swift:28:24: error: cannot find 'words' in scope\n\
    \            let word = words[reversed[index]]\n                       ^~~~~\n\
    /tmp/tmpwmuy5v2m.swift:34:9: error: cannot use mutating member on immutable value:\
    \ 'arr' is a 'let' constant\n    arr.reverse()\n    ~~~ ^\n/tmp/tmpwmuy5v2m.swift:35:19:\
    \ error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n\
    \    arr.map { arr.append($0) }\n              ~~~ ^\n/tmp/tmpwmuy5v2m.swift:36:16:\
    \ error: binary operator '+' cannot be applied to operands of type '[Int]' and\
    \ 'String'\n    return arr + reversedString\n           ~~~ ^ ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let digits = Array(0..<arr.count)\n\
    \    let result = Array(0..<arr.count)\n    var i = 0\n    while i < arr.count\
    \ {\n        if arr[i] > 9 {\n            return []\n        }\n        result[i++]\
    \ = names[arr[i] - 1]\n    }\n    return result.map { String(x) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxfb4gzr_.swift:22:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        result[i++] = names[arr[i] - 1]\n            \
    \    ^~\n/tmp/tmpxfb4gzr_.swift:22:23: error: cannot find 'names' in scope\n \
    \       result[i++] = names[arr[i] - 1]\n                      ^~~~~\n/tmp/tmpxfb4gzr_.swift:24:32:\
    \ error: cannot find 'x' in scope\n    return result.map { String(x) }\n     \
    \                          ^\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tlet len = arr.count\n\
    \tvar result : [String] = []\n\tfor i in 0 ..< len {\n\t\tif arr[len-1-i] == 9\
    \ {\n\t\t\tresult.append(\"Nine\")\n\t\t} else {\n\t\t\tresult.append(digits[arr[len-1-i]])\n\
    \t\t}\n\t}\n\tresult.reverse()\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwgnjma3o.swift:21:18: error: cannot find 'digits' in scope\n  \
    \                      result.append(digits[arr[len-1-i]])\n                 \
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let result = [String]()\n\
    \    if arr.count == 0 {\n        return result\n    }\n\n    // Sort the numbers\
    \ from low to high\n    let sortedArray = arr.sorted(by: <)\n    // Reverse\n\
    \    let reversedArray = sortedArray.reversed()\n    // Replace each digit by\
    \ its corresponding string\n    let replacedArray = reversedArray.reduce(into:\
    \ []) { result, number in\n        let numString: String\n        if number <\
    \ 10 {\n            numString = \"\\(number)\"\n        } else if number == 10\
    \ {\n            numString = \"Ten\"\n        } else {\n            numString\
    \ = \"\\(number % 10)\"\n        }\n        result.append(numString)\n    }\n\n\
    \    // Convert string to array of string\n    let strArray = replacedArray\n\
    \        .map { $0.string }\n        .reduce(into: []) { result, str in\n    \
    \        result.append(str)\n        }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpth15dod4.swift:39:19: error: value of type 'Any' has no member\
    \ 'string'\n        .map { $0.string }\n               ~~ ^~~~~~\n/tmp/tmpth15dod4.swift:39:19:\
    \ note: cast 'Any' to 'AnyObject' or use 'as!' to force downcast to a more specific\
    \ type to access members\n        .map { $0.string }\n                  ^\n  \
    \             (  as AnyObject)\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let reverse = arr.rev()\n    var result = [String]()\n\
    \    for value in reverse {\n        switch value {\n        case 1:\n       \
    \     append(&result, \"One\")\n            break\n        case 2:\n         \
    \   append(&result, \"Two\")\n            break\n        case 3:\n           \
    \ append(&result, \"Three\")\n            break\n        case 4:\n           \
    \ append(&result, \"Four\")\n            break\n        case 5:\n            append(&result,\
    \ \"Five\")\n            break\n        case 6:\n            append(&result, \"\
    Six\")\n            break\n        case 7:\n            append(&result, \"Seven\"\
    )\n            break\n        case 8:\n            append(&result, \"Eight\")\n\
    \            break\n        case 9:\n            append(&result, \"Nine\")\n \
    \           break\n        default:\n            break\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2duniukb.swift:16:23: error: value of type '[Int]' has no member\
    \ 'rev'\n    let reverse = arr.rev()\n                  ~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014504
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    if !arr.isEmpty {\n        let min = min(arr)\n        let max = max(arr)\n\
    \        for index in 0..<arr.count {\n            let value = arr[index]\n  \
    \          if value < min || value > max {\n                continue\n       \
    \     }\n            result.append(String(value))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuzv2c2hh.swift:17:26: error: missing argument for parameter #2\
    \ in call\n        let min = min(arr)\n                         ^\n          \
    \               , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable\
    \ public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmpuzv2c2hh.swift:18:26: error: missing argument for parameter\
    \ #2 in call\n        let max = max(arr)\n                         ^\n       \
    \                  , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable\
    \ public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let result = arr.sorted()\n\
    \    if result.isEmpty() {\n        return []\n    }\n    switch arr.count {\n\
    \    case 0:\n        return []\n    case 1:\n        return result\n    case\
    \ 2:\n        if result[0] == 1 {\n            return [\"One\"]\n        }\n \
    \       return [\"One\", \"Two\"]\n    case 3:\n        if result[0] == 1 && result[1]\
    \ == 0 {\n            return [\"One\"]\n        }\n        if result[0] == 0 {\n\
    \            return [\"One\", \"Two\"]\n        }\n        if result[1] != 0 {\n\
    \            return [\"One\", \"Two\", \"Three\"]\n        }\n        return [\"\
    One\", \"Two\", \"Three\", \"Four\"]\n    case 4:\n        if result[0] == 0 &&\
    \ result[1] == 1 && result[2] == 0 {\n            return [\"One\", \"Two\"]\n\
    \        }\n        if result[0] == 0 && result[1] == 0 {\n            return\
    \ [\"One\", \"Two\", \"Three\"]\n        }\n        if result[1] != 0 && result[2]\
    \ != 0 {\n            return [\"One\", \"Two\", \"Three\", \"Four\"]\n       \
    \ }\n        if result[3] == 1 {\n            return [\"One\", \"Two\", \"Three\"\
    ]\n        }\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\"]\n    case 5:\n        if result[0] == 0 && result[1] == 0 && result[2]\
    \ == 0 && result[3] == 1 {\n            return [\"One\", \"Two\", \"Three\"]\n\
    \        }\n        if result[0] == 0 && result[1] == 0 && result[2] == 0 {\n\
    \            return [\"One\", \"Two\", \"Three\", \"Four\"]\n        }\n     \
    \   if result[1] == 0 && result[3] == 1 {\n            return [\"One\", \"Two\"\
    , \"Three\", \"Four\"]\n        }\n        if result[0] == 0 && result[3] == 1\
    \ {\n            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    ]\n        }\n        if result[0] == 0 && result[3] == 0 && result[2] == 0 {\n\
    \            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    ]\n        }\n        if result[0] == 0 && result[3] == 0 && result[2] == 1 {\n\
    \            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"]\n        }\n        if result[0] == 0 && result[3] == 0 && result[2]\
    \ == 2 {\n            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\"]\n        }\n        if result[0] == 0 && result[3]\
    \ == 0 && result[2] == 3 {\n            return [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        }\n      \
    \  if result[0] == 0 && result[3] == 1 && result[2] == 0 {\n            return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n        }\n        if result[3] == 1 && result[2] == 0 {\n      \
    \      return [\"One\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdj9c5x9y.swift:83:21: error: unterminated string literal\n    \
    \        return [\"One\n                    ^\n/tmp/tmpdj9c5x9y.swift:103:63:\
    \ error: expected '}' at end of 'switch' statement\nassert(by_length(arr: [9,\
    \ 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                               \
    \                               ^\n/tmp/tmpdj9c5x9y.swift:19:22: note: to match\
    \ this opening '{'\n    switch arr.count {\n                     ^\n/tmp/tmpdj9c5x9y.swift:103:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmpdj9c5x9y.swift:14:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmpdj9c5x9y.swift:16:15: error: cannot call value\
    \ of non-function type 'Bool'\n    if result.isEmpty() {\n              ^    \
    \  ~~\n                     \n/tmp/tmpdj9c5x9y.swift:23:16: error: cannot convert\
    \ return expression of type '[Int]' to return type '[String]'\n        return\
    \ result\n               ^\n/tmp/tmpdj9c5x9y.swift:23:16: note: arguments to generic\
    \ parameter 'Element' ('Int' and 'String') are expected to be equal\n        return\
    \ result\n               ^\n/tmp/tmpdj9c5x9y.swift:87:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpdj9c5x9y.swift:19:5: error:\
    \ switch must be exhaustive\n    switch arr.count {\n    ^\n/tmp/tmpdj9c5x9y.swift:19:5:\
    \ note: do you want to add a default clause?\n    switch arr.count {\n    ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  return _arr_by_length(arr,\
    \ 0, arr.count, 0, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf2tou2dc.swift:15:10: error: cannot find '_arr_by_length' in scope\n\
    \  return _arr_by_length(arr, 0, arr.count, 0, \"\")\n         ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr == nil {\n\
    \        return []\n    }\n    var str = String(arr[0])\n    var newArr = Array<String>(count:\
    \ arr.count, repeatedValue: \"\")\n    for i in 0 ..< arr.count {\n        let\
    \ num = Int(arr[i])\n        if num <= 9 {\n            newArr[i] = \"One\"\n\
    \        } else if num >= 10 && num <= 99 {\n            newArr[i] = \"Two\"\n\
    \        } else if num >= 100 && num <= 999 {\n            newArr[i] = \"Three\"\
    \n        } else if num >= 1000 && num <= 9999 {\n            newArr[i] = \"Four\"\
    \n        } else if num >= 10000 && num <= 99999 {\n            newArr[i] = \"\
    Five\"\n        } else if num >= 100000 && num <= 999999 {\n            newArr[i]\
    \ = \"Six\"\n        } else if num >= 1000000 && num <= 9999999 {\n          \
    \  newArr[i] = \"Seven\"\n        } else if num >= 10000000 && num <= 999999999\
    \ {\n            newArr[i] = \"Eight\"\n        } else if num >= 100000000 &&\
    \ num <= 99999999999 {\n            newArr[i] = \"Nine\"\n        } else {\n \
    \           newArr[i] = str\n            str = String(arr[i - 1])\n        }\n\
    \    }\n    if str != \"\" {\n        newArr.append(str)\n    }\n    return newArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyny39zdj.swift:15:12: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if arr == nil {\n       ~~~\
    \ ^  ~~~\n/tmp/tmpyny39zdj.swift:19:18: error: no exact matches in call to initializer\
    \ \n    var newArr = Array<String>(count: arr.count, repeatedValue: \"\")\n  \
    \               ^\n/tmp/tmpyny39zdj.swift:19:18: note: candidate has partially\
    \ matching parameter list (repeating: String, count: Int)\n    var newArr = Array<String>(count:\
    \ arr.count, repeatedValue: \"\")\n                 ^\n/tmp/tmpyny39zdj.swift:19:18:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n    var newArr = Array<String>(count: arr.count, repeatedValue: \"\")\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return arr\n    }\n    var result: [String] = []\n    let min = arr[0]\n\
    \    let max = arr[0]\n    for element in arr {\n        if element == min {\n\
    \            min = element\n        } else if element == max {\n            max\
    \ = element\n        } else {\n            if element < min || element > max {\n\
    \                break\n            }\n            if element == 1 {\n       \
    \         result.append(one)\n            }\n            if element == 2 {\n \
    \               result.append(two)\n            }\n            if element == 3\
    \ {\n                result.append(three)\n            }\n            if element\
    \ == 4 {\n                result.append(four)\n            }\n            if element\
    \ == 5 {\n                result.append(five)\n            }\n            if element\
    \ == 6 {\n                result.append(six)\n            }\n            if element\
    \ == 7 {\n                result.append(seven)\n            }\n            if\
    \ element == 8 {\n                result.append(eight)\n            }\n      \
    \      if element == 9 {\n                result.append(nine)\n            }\n\
    \        }\n    }\n    if min > 0 {\n        if max > 0 {\n            result\
    \ = result.reverse()\n        }\n        result.append(min)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3mmhw_1t.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp3mmhw_1t.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmp3mmhw_1t.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmp3mmhw_1t.swift:23:13: error: cannot assign to value: 'min' is a 'let'\
    \ constant\n            min = element\n            ^~~\n/tmp/tmp3mmhw_1t.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp3mmhw_1t.swift:25:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = element\n            ^~~\n/tmp/tmp3mmhw_1t.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp3mmhw_1t.swift:31:31: error: cannot find 'one' in scope\n  \
    \              result.append(one)\n                              ^~~\n/tmp/tmp3mmhw_1t.swift:34:31:\
    \ error: cannot find 'two' in scope\n                result.append(two)\n    \
    \                          ^~~\n/tmp/tmp3mmhw_1t.swift:37:31: error: cannot find\
    \ 'three' in scope\n                result.append(three)\n                   \
    \           ^~~~~\n/tmp/tmp3mmhw_1t.swift:40:31: error: cannot find 'four' in\
    \ scope\n                result.append(four)\n                              ^~~~\n\
    /tmp/tmp3mmhw_1t.swift:43:31: error: cannot find 'five' in scope\n           \
    \     result.append(five)\n                              ^~~~\n/tmp/tmp3mmhw_1t.swift:46:31:\
    \ error: cannot find 'six' in scope\n                result.append(six)\n    \
    \                          ^~~\n/tmp/tmp3mmhw_1t.swift:49:31: error: cannot find\
    \ 'seven' in scope\n                result.append(seven)\n                   \
    \           ^~~~~\n/tmp/tmp3mmhw_1t.swift:52:31: error: cannot find 'eight' in\
    \ scope\n                result.append(eight)\n                              ^~~~~\n\
    /tmp/tmp3mmhw_1t.swift:"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  guard !arr.isEmpty\
    \ else { return [] }\n  let min: Int = 1\n  let max: Int = 9\n  var result: [String]\
    \ = []\n  for _ in 0 ..< arr.count {\n    let value = arr.removeFirst()!\n   \
    \ if min > value { min = 1; max *= 10 }\n    else if max < value { max = 9; min\
    \ *= 10 }\n    else { break }\n  }\n  var digits = String(max - min) + String(min)\n\
    \  if digits.isEmpty, let firstDigit = digits.first {\n    result += [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][firstDigit - min]\n  } else {\n    result += digits\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvtex7apv.swift:20:21: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    let value = arr.removeFirst()!\n     \
    \           ~~~ ^\n/tmp/tmpvtex7apv.swift:20:34: error: cannot force unwrap value\
    \ of non-optional type 'Int'\n    let value = arr.removeFirst()!\n           \
    \     ~~~~~~~~~~~~~~~~~^\n                                 \n/tmp/tmpvtex7apv.swift:21:22:\
    \ error: cannot assign to value: 'min' is a 'let' constant\n    if min > value\
    \ { min = 1; max *= 10 }\n                     ^~~\n/tmp/tmpvtex7apv.swift:16:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let min: Int = 1\n  ^~~\n\
    \  var\n/tmp/tmpvtex7apv.swift:21:35: error: left side of mutating operator isn't\
    \ mutable: 'max' is a 'let' constant\n    if min > value { min = 1; max *= 10\
    \ }\n                              ~~~ ^\n/tmp/tmpvtex7apv.swift:17:3: note: change\
    \ 'let' to 'var' to make it mutable\n  let max: Int = 9\n  ^~~\n  var\n/tmp/tmpvtex7apv.swift:22:27:\
    \ error: cannot assign to value: 'max' is a 'let' constant\n    else if max <\
    \ value { max = 9; min *= 10 }\n                          ^~~\n/tmp/tmpvtex7apv.swift:17:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let max: Int = 9\n  ^~~\n\
    \  var\n/tmp/tmpvtex7apv.swift:22:40: error: left side of mutating operator isn't\
    \ mutable: 'min' is a 'let' constant\n    else if max < value { max = 9; min *=\
    \ 10 }\n                                   ~~~ ^\n/tmp/tmpvtex7apv.swift:16:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let min: Int = 1\n  ^~~\n\
    \  var\n/tmp/tmpvtex7apv.swift:27:16: error: cannot convert value of type 'String'\
    \ to expected element type 'Array<String>'\n    result += [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][firstDigit\
    \ - min]\n               ^\n/tmp/tmpvtex7apv.swift:27:23: error: cannot convert\
    \ value of type 'String' to expected element type 'Array<String>'\n    result\
    \ += [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"][firstDigit - min]\n                      ^\n/tmp/tmpvtex7apv.swift:27:30:\
    \ error: cannot convert value of type 'String'"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc4qk_gre.swift:15:12: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n    return arr\n           ^\n/tmp/tmpc4qk_gre.swift:15:12:\
    \ note: arguments to generic parameter 'Element' ('Int' and 'String') are expected\
    \ to be equal\n    return arr\n           ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let maxlen = max(arr)\
    \ + 1\n    if arr == nil {\n        return nil\n    }\n    var result = [String]()\n\
    \    for n in arr {\n        switch n {\n        case 1, 10, 11:\n           \
    \ switch maxlen {\n            case 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20:\n\
    \                result.append(\"One\")\n            case 30, 31, 32, 33, 34,\
    \ 35, 36, 37, 38, 39, 40:\n                result.append(\"Ten\")\n          \
    \  case 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61:\n                result.append(\"\
    Twenty\")\n            case 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80:\n    \
    \            result.append(\"Thirty\")\n            case 90, 91, 92, 93, 94, 95,\
    \ 96, 97, 98, 99:\n                result.append(\"Forty\")\n            case\
    \ 100, 101, 102, 103, 104, 105, 106, 107, 108, 109:\n                result.append(\"\
    Fifty\")\n            case 110, 111, 112, 113, 114, 115, 116, 117, 118, 119:\n\
    \                result.append(\"Seventy\")\n            case 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130:\n                result.append(\"Eighty\"\
    )\n            case 131, 132, 133, 134, 135, 136, 137, 138, 139, 140:\n      \
    \          result.append(\"Ninety\")\n            }\n        case 2, 20, 21, 22,\
    \ 23:\n            switch maxlen {\n            case 20, 21, 22, 23, 24, 25, 26,\
    \ 27, 28, 29, 30:\n                result.append(\"Two\")\n            case 50,\
    \ 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61:\n                result.append(\"\
    Twenty\")\n            case 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80:\n    \
    \            result.append(\"Thirty\")\n            case 90, 91, 92, 93, 94, 95,\
    \ 96, 97, 98, 99:\n                result.append(\"Forty\")\n            case\
    \ 100, 101, 102, 103, 104, 105, 106, 107, 108, 109:\n                result.append(\"\
    Fifty\")\n            case 110, 111, 112, 113, 114, 115, 116, 117, 118, 119:\n\
    \                result.append(\"Seventy\")\n            case 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130:\n                result.append(\"Eighty\"\
    )\n            case 131, 132, 133, 134, 135, 136, 137, 138, 139, 140:\n      \
    \          result.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw62s_b9g.swift:60:23: error: expected member name following '.'\n\
    \                result.\n                      ^\n/tmp/tmpw62s_b9g.swift:80:63:\
    \ error: expected '}' at end of 'switch' statement\nassert(by_length(arr: [9,\
    \ 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                               \
    \                               ^\n/tmp/tmpw62s_b9g.swift:21:18: note: to match\
    \ this opening '{'\n        switch n {\n                 ^\n/tmp/tmpw62s_b9g.swift:80:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmpw62s_b9g.swift:20:18: note: to match this\
    \ opening '{'\n    for n in arr {\n                 ^\n/tmp/tmpw62s_b9g.swift:80:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmpw62s_b9g.swift:14:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmpw62s_b9g.swift:15:25: error: missing argument for\
    \ parameter #2 in call\n    let maxlen = max(arr) + 1\n                      \
    \  ^\n                        , <#Int#>\nSwift.max:1:24: note: 'max' declared\
    \ here\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n\
    \                       ^\n/tmp/tmpw62s_b9g.swift:15:22: error: cannot convert\
    \ value of type '[Int]' to expected argument type 'Int'\n    let maxlen = max(arr)\
    \ + 1\n                     ^\n/tmp/tmpw62s_b9g.swift:16:12: warning: comparing\
    \ non-optional value of type '[Int]' to 'nil' always returns false\n    if arr\
    \ == nil {\n       ~~~ ^  ~~~\n/tmp/tmpw62s_b9g.swift:17:16: error: 'nil' is incompatible\
    \ with return type '[String]'\n        return nil\n               ^\n/tmp/tmpw62s_b9g.swift:64:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpw62s_b9g.swift:21:9:\
    \ error: switch must be exhaustive"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  if arr == nil || arr[0]\
    \ == -1 {\n    return []\n  }\n  var result = [String]()\n  for i in arr {\n \
    \   result.append(from_digits(i))\n  }\n  result.reverse()\n  for i in result\
    \ {\n    switch_to_digits(&i, 1)\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyqi_vh_q.swift:15:10: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n  if arr == nil || arr[0] == -1\
    \ {\n     ~~~ ^  ~~~\n/tmp/tmpyqi_vh_q.swift:20:19: error: cannot find 'from_digits'\
    \ in scope\n    result.append(from_digits(i))\n                  ^~~~~~~~~~~\n\
    /tmp/tmpyqi_vh_q.swift:24:5: error: cannot find 'switch_to_digits' in scope\n\
    \    switch_to_digits(&i, 1)\n    ^~~~~~~~~~~~~~~~\n/tmp/tmpyqi_vh_q.swift:24:22:\
    \ error: cannot pass immutable value as inout argument: 'i' is a 'let' constant\n\
    \    switch_to_digits(&i, 1)\n                     ^~\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  var res = make([][String],\
    \ 9)\n  for idx, val := range arr {\n    res[idx] = arr[idx].isDigit() ? arr[idx]\
    \ : \"\\(arr[idx])\"\n  }\n  for idx, val := range res {\n    if val.isDigit()\
    \ {\n      res[idx] = \"\\(val)\"\n    }\n  }\n  return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp42hrnhsp.swift:16:10: error: expected 'in' after for-each pattern\n\
    \  for idx, val := range arr {\n         ^\n/tmp/tmp42hrnhsp.swift:16:10: error:\
    \ expected Sequence expression for for-each loop\n  for idx, val := range arr\
    \ {\n         ^\n/tmp/tmp42hrnhsp.swift:19:10: error: expected 'in' after for-each\
    \ pattern\n  for idx, val := range res {\n         ^\n/tmp/tmp42hrnhsp.swift:19:10:\
    \ error: expected Sequence expression for for-each loop\n  for idx, val := range\
    \ res {\n         ^\n/tmp/tmp42hrnhsp.swift:15:13: error: cannot find 'make' in\
    \ scope\n  var res = make([][String], 9)\n            ^~~~\n/tmp/tmp42hrnhsp.swift:15:20:\
    \ error: no exact matches in call to subscript \n  var res = make([][String],\
    \ 9)\n                   ^\n/tmp/tmp42hrnhsp.swift:15:20: note: found candidate\
    \ with type '(Int) -> Any'\n  var res = make([][String], 9)\n                \
    \   ^\n/tmp/tmp42hrnhsp.swift:15:20: note: found candidate with type '(Range<Int>)\
    \ -> ArraySlice<Any>'\n  var res = make([][String], 9)\n                   ^\n\
    /tmp/tmp42hrnhsp.swift:15:20: note: found candidate with type '(String.Type) ->\
    \ ArraySlice<Any>'\n  var res = make([][String], 9)\n                   ^\n/tmp/tmp42hrnhsp.swift:15:20:\
    \ note: found candidate with type '((UnboundedRange_) -> ()) -> ArraySlice<Any>'\n\
    \  var res = make([][String], 9)\n                   ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return by_length_inner(arr,\
    \ nil)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8o3z1y9_.swift:15:12: error: cannot find 'by_length_inner' in scope\n\
    \    return by_length_inner(arr, nil)\n           ^~~~~~~~~~~~~~~\n/tmp/tmp8o3z1y9_.swift:15:33:\
    \ error: 'nil' requires a contextual type\n    return by_length_inner(arr, nil)\n\
    \                                ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n\n    if let first = arr.first {\n        let range\
    \ = (first + 1...9)\n        let reversed = range.map {\n            String($0)\n\
    \        }.reverse()\n        return reversed.map {\n            one_digit.rawValue($0)\
    \ as String\n        }\n    }\n\n    return arr.map {\n        one_digit.rawValue($0)\
    \ as String\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbu4_x1pq.swift:23:11: error: cannot use mutating member on immutable\
    \ value: function call returns immutable value\n        }.reverse()\n~~~~~~~~~\
    \ ^\n/tmp/tmpbu4_x1pq.swift:25:13: error: cannot find 'one_digit' in scope\n \
    \           one_digit.rawValue($0) as String\n            ^~~~~~~~~\n/tmp/tmpbu4_x1pq.swift:30:9:\
    \ error: cannot find 'one_digit' in scope\n        one_digit.rawValue($0) as String\n\
    \        ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // The maximum length\
    \ of each array.\n    var max_lengths = [0, 9] as [Int]\n    for n in arr {\n\
    \        if n >= 10 {\n            max_lengths[0] += 1\n        }\n        if\
    \ n <= 9 {\n            max_lengths[1] += 1\n        }\n    }\n    var results\
    \ = [String]()\n    if arr.isEmpty {\n        return results\n    }\n    for n,\
    \ _ in\n        zip(max_lengths, arr.indices) {\n        results.append(arr[n\
    \ - 1])\n    }\n    for n in arr {\n        results[n - 1] = results[n - 1].stringByReplacingCharactersInRange(\n\
    \            NSMakeRange(n - 1, 1),\n            NSMakeRange(max_lengths[n - 1],\
    \ 1))\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8x5dzxsc.swift:29:10: error: expected 'in' after for-each pattern\n\
    \    for n, _ in\n         ^\n/tmp/tmp8x5dzxsc.swift:29:10: error: expected Sequence\
    \ expression for for-each loop\n    for n, _ in\n         ^\n/tmp/tmp8x5dzxsc.swift:35:13:\
    \ error: cannot find 'NSMakeRange' in scope\n            NSMakeRange(n - 1, 1),\n\
    \            ^~~~~~~~~~~\n/tmp/tmp8x5dzxsc.swift:36:13: error: cannot find 'NSMakeRange'\
    \ in scope\n            NSMakeRange(max_lengths[n - 1], 1))\n            ^~~~~~~~~~~\n\
    /tmp/tmp8x5dzxsc.swift:34:41: error: value of type 'String' has no member 'stringByReplacingCharactersInRange'\n\
    \        results[n - 1] = results[n - 1].stringByReplacingCharactersInRange(\n\
    \                         ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ { return [] }\n    var result = [String]()\n    var i = 0\n    var last = 0\n\
    \    for val in arr {\n        if val > last {\n            for (low, high) in\
    \ zip(last, val-1) {\n                let digit = String(low)\n              \
    \  if digit == \"1\" {\n                    result.append(\"One\")\n         \
    \           break\n                } else if digit == \"2\" {\n              \
    \      result.append(\"Two\")\n                    break\n                } else\
    \ if digit == \"3\" {\n                    result.append(\"Three\")\n        \
    \            break\n                } else if digit == \"4\" {\n             \
    \       result.append(\"Four\")\n                    break\n                }\
    \ else if digit == \"5\" {\n                    result.append(\"Five\")\n    \
    \                break\n                } else if digit == \"6\" {\n         \
    \           result.append(\"Six\")\n                    break\n              \
    \  } else if digit == \"7\" {\n                    result.append(\"Seven\")\n\
    \                    break\n                } else if digit == \"8\" {\n     \
    \               result.append(\"Eight\")\n                    break\n        \
    \        } else if digit == \"9\" {\n                    result.append(\"Nine\"\
    )\n                    break\n                }\n            }\n            i\
    \ = 0\n            last += 1\n        } else {\n            i += 1\n        }\n\
    \        result.append(String(val))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkzisnmq0.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() { return [] }\n           ^      ~~\n    \
    \              \n/tmp/tmpkzisnmq0.swift:21:32: error: global function 'zip' requires\
    \ that 'Int' conform to 'Sequence'\n            for (low, high) in zip(last, val-1)\
    \ {\n                               ^\nSwift.zip:1:24: note: where 'Sequence1'\
    \ = 'Int'\n@inlinable public func zip<Sequence1, Sequence2>(_ sequence1: Sequence1,\
    \ _ sequence2: Sequence2) -> Zip2Sequence<Sequence1, Sequence2> where Sequence1\
    \ : Sequence, Sequence2 : Sequence\n                       ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    \n    var result = arr\n    result.reverse()\n\
    \    \n    for index in 0..<result.count {\n        let value = result[index]\n\
    \        \n        if value < 10 {\n            result[index] = \"One\"\n    \
    \    } else if value < 100 {\n            result[index] = \"Two\"\n        } else\
    \ if value < 1000 {\n            result[index] = \"Three\"\n        } else if\
    \ value < 10000 {\n            result[index] = \"Four\"\n        } else if value\
    \ < 100000 {\n            result[index] = \"Five\"\n        } else if value <\
    \ 1000000 {\n            result[index] = \"Six\"\n        } else if value < 10000000\
    \ {\n            result[index] = \"Seven\"\n        } else if value < 100000000\
    \ {\n            result[index] = \"Eight\"\n        } else if value < 1000000000\
    \ {\n            result[index] = \"Nine\"\n        } else {\n            result[index]\
    \ = \"Unknown\"\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5ib8ommp.swift:26:29: error: cannot assign value of type 'String'\
    \ to subscript of type 'Int'\n            result[index] = \"One\"\n          \
    \                  ^~~~~\n/tmp/tmp5ib8ommp.swift:28:29: error: cannot assign value\
    \ of type 'String' to subscript of type 'Int'\n            result[index] = \"\
    Two\"\n                            ^~~~~\n/tmp/tmp5ib8ommp.swift:30:29: error:\
    \ cannot assign value of type 'String' to subscript of type 'Int'\n          \
    \  result[index] = \"Three\"\n                            ^~~~~~~\n/tmp/tmp5ib8ommp.swift:32:29:\
    \ error: cannot assign value of type 'String' to subscript of type 'Int'\n   \
    \         result[index] = \"Four\"\n                            ^~~~~~\n/tmp/tmp5ib8ommp.swift:34:29:\
    \ error: cannot assign value of type 'String' to subscript of type 'Int'\n   \
    \         result[index] = \"Five\"\n                            ^~~~~~\n/tmp/tmp5ib8ommp.swift:36:29:\
    \ error: cannot assign value of type 'String' to subscript of type 'Int'\n   \
    \         result[index] = \"Six\"\n                            ^~~~~\n/tmp/tmp5ib8ommp.swift:38:29:\
    \ error: cannot assign value of type 'String' to subscript of type 'Int'\n   \
    \         result[index] = \"Seven\"\n                            ^~~~~~~\n/tmp/tmp5ib8ommp.swift:40:29:\
    \ error: cannot assign value of type 'String' to subscript of type 'Int'\n   \
    \         result[index] = \"Eight\"\n                            ^~~~~~~\n/tmp/tmp5ib8ommp.swift:42:29:\
    \ error: cannot assign value of type 'String' to subscript of type 'Int'\n   \
    \         result[index] = \"Nine\"\n                            ^~~~~~\n/tmp/tmp5ib8ommp.swift:44:29:\
    \ error: cannot assign value of type 'String' to subscript of type 'Int'\n   \
    \         result[index] = \"Unknown\"\n                            ^~~~~~~~~\n\
    /tmp/tmp5ib8ommp.swift:48:12: error: cannot convert return expression of type\
    \ '[Int]' to return type '[String]'\n    return result\n           ^\n/tmp/tmp5ib8ommp.swift:48:12:\
    \ note: arguments to generic parameter 'Element' ('Int' and 'String') are expected\
    \ to be equal\n    return result\n           ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let size = arr.count\n\
    \    var strs = [String]()\n    if size <= 1 {\n        return strs\n    }\n \
    \   var prev = 0\n    for v in arr {\n        let cur = prev\n        prev = v\n\
    \        strs.append(arr[cur])\n    }\n    return strs\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnsymdugt.swift:24:24: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String'\n        strs.append(arr[cur])\n        \
    \               ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  if arr.isEmpty() {\n\
    \    return []\n  }\n  let arr = arr.sorted()\n  var result = Array<String>()\n\
    \  for x in arr {\n    if x < 1 || x > 9 {\n      continue\n    }\n    let n =\
    \ x - 1\n    let str = String(n)\n    let index = Int(str[0])\n    result.append(names[index])\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi2p9p0x1.swift:15:10: error: cannot call value of non-function\
    \ type 'Bool'\n  if arr.isEmpty() {\n         ^      ~~\n                \n/tmp/tmpi2p9p0x1.swift:26:24:\
    \ error: no exact matches in call to subscript \n    let index = Int(str[0])\n\
    \                       ^\nSwift.String:3:12: note: candidate expects value of\
    \ type 'Range<String.Index>' for parameter #1 (got 'Int')\n    public subscript(r:\
    \ Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n/tmp/tmpi2p9p0x1.swift:27:19:\
    \ error: cannot find 'names' in scope\n    result.append(names[index])\n     \
    \             ^~~~~\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = arr.sorted()\n\
    \    if numbers.isEmpty() {\n        return []\n    }\n    if numbers.count ==\
    \ 1 {\n        return [\"One\"]\n    }\n    var result = [String]()\n    var current\
    \ = numbers[0]\n    let max = numbers.max() ?? 0\n    if current == 1 {\n    \
    \    result.append([\"One\"])\n        current = 2\n    }\n    if current == 2\
    \ {\n        result.append([\"Two\"])\n        current = 3\n    }\n    if current\
    \ == 3 {\n        result.append([\"Three\"])\n        current = 4\n    }\n   \
    \ if current == 4 {\n        result.append([\"Four\"])\n        current = 5\n\
    \    }\n    if current == 5 {\n        result.append([\"Five\"])\n        current\
    \ = 6\n    }\n    if current == 6 {\n        result.append([\"Six\"])\n      \
    \  current = 7\n    }\n    if current == 7 {\n        result.append([\"Seven\"\
    ])\n        current = 8\n    }\n    if current == 8 {\n        result.append([\"\
    Eight\"])\n        current = 9\n    }\n    if current == 9 {\n        result.append([\"\
    Nine\"])\n        current = 0\n    }\n    if current != 0 {\n        result.append([\"\
    Zero\"])\n    }\n    if current > max {\n        return result\n    }\n    return\
    \ result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0lwyy2hy.swift:16:16: error: cannot call value of non-function\
    \ type 'Bool'\n    if numbers.isEmpty() {\n               ^      ~~\n        \
    \              \n/tmp/tmp0lwyy2hy.swift:26:16: error: no exact matches in call\
    \ to instance method 'append'\n        result.append([\"One\"])\n            \
    \   ^\nSwift.Array:7:37: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(contentsOf:)')\n    @inlinable public mutating func append<S>(contentsOf newElements:\
    \ __owned S) where Element == S.Element, S : Sequence\n                      \
    \              ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public\
    \ mutating func append<S>(contentsOf newElements: __owned S) where S : Sequence,\
    \ Self.Element == S.Element\n                                    ^\n/tmp/tmp0lwyy2hy.swift:30:16:\
    \ error: no exact matches in call to instance method 'append'\n        result.append([\"\
    Two\"])\n               ^\nSwift.Array:7:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where Element == S.Element, S :\
    \ Sequence\n                                    ^\nSwift.RangeReplaceableCollection:5:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where S : Sequence, Self.Element == S.Element\n                         \
    \           ^\n/tmp/tmp0lwyy2hy.swift:34:16: error: no exact matches in call to\
    \ instance method 'append'\n        result.append([\"Three\"])\n             \
    \  ^\nSwift.Array:7:37: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(contentsOf:)')\n    @inlinable public mutating func append<S>(contentsOf newElements:\
    \ __owned S) where Element == S.Element, S : Sequence\n                      \
    \              ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable publ"
  stdout: ''
  timestamp: 1660014505
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \n    for value in arr {\n        switch value {\n        case 1:\n          \
    \  result.append(\"One\")\n        case 2:\n            result.append(\"Two\"\
    )\n        case 3:\n            result.append(\"Three\")\n        case 4:\n  \
    \          result.append(\"Four\")\n        case 5:\n            result.append(\"\
    Five\")\n        case 6:\n            result.append(\"Six\")\n        case 7:\n\
    \            result.append(\"Seven\")\n        case 8:\n            result.append(\"\
    Eight\")\n        case 9:\n            result.append(\"Nine\")\n        default:\n\
    \            continue\n        }\n    }\n    result.reverse()\n\n    return result.map\
    \ {\n        String($0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmptfanfmeb/tmptfanfmeb.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4229bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4226b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4226b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4226b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfanfmeb                        0x000055d43ea8ca91 <unavailable> + 6801

    5    libc.so.6                          0x00002af422ba6460 __libc_start_main +
    245

    6    tmptfanfmeb                        0x000055d43ea8c539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr == nil {\n\
    \        return nil\n    }\n\n    var result: [String] = []\n\n    var current\
    \ = 0\n    var previous = -1\n    var next = -1\n\n    for idx in arr.indices\
    \ {\n        switch arr[idx] {\n        case 1:\n            current = current\
    \ + 1\n            if previous > -1 {\n                result.append(names[previous])\n\
    \            }\n            previous = current\n        case 2:\n            current\
    \ = current + 1\n            next = current + 1\n            if next > 9 {\n \
    \               result.append(names[next])\n            }\n            previous\
    \ = current\n        case 3:\n            current = current + 1\n            if\
    \ current > 0 {\n                result.append(names[current])\n            }\n\
    \            previous = current\n        case 4:\n            current = current\
    \ + 1\n            if current > 0 {\n                result.append(names[current])\n\
    \            }\n            previous = current\n        case 5:\n            current\
    \ = current + 1\n            if current > 0 {\n                result.append(names[current])\n\
    \            }\n            previous = current\n        case 6:\n            current\
    \ = current + 1\n            if current > 0 {\n                result.append(names[current])\n\
    \            }\n            previous = current\n        case 7:\n            current\
    \ = current + 1\n            if current > 0 {\n                result.append(names[current])\n\
    \            }\n            previous = current\n        case 8:\n            current\
    \ = current + 1\n            if current > 0 {\n                result.append(names[current])\n\
    \            }\n            previous = current\n        case 9:\n            current\
    \ = current + 1\n            if current > 0 {\n                result.append(names[current])\n\
    \            }\n            previous = current\n        default:\n           \
    \ break\n        }\n    }\n\n    if current > 0 {\n        result.append(names[current])\n\
    \    }\n\n    if previous > -1 {\n        result.append(names[previous])\n   \
    \ }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9dov694r.swift:15:12: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if arr == nil {\n       ~~~\
    \ ^  ~~~\n/tmp/tmp9dov694r.swift:16:16: error: 'nil' is incompatible with return\
    \ type '[String]'\n        return nil\n               ^\n/tmp/tmp9dov694r.swift:30:31:\
    \ error: cannot find 'names' in scope\n                result.append(names[previous])\n\
    \                              ^~~~~\n/tmp/tmp9dov694r.swift:37:31: error: cannot\
    \ find 'names' in scope\n                result.append(names[next])\n        \
    \                      ^~~~~\n/tmp/tmp9dov694r.swift:43:31: error: cannot find\
    \ 'names' in scope\n                result.append(names[current])\n          \
    \                    ^~~~~\n/tmp/tmp9dov694r.swift:49:31: error: cannot find 'names'\
    \ in scope\n                result.append(names[current])\n                  \
    \            ^~~~~\n/tmp/tmp9dov694r.swift:55:31: error: cannot find 'names' in\
    \ scope\n                result.append(names[current])\n                     \
    \         ^~~~~\n/tmp/tmp9dov694r.swift:61:31: error: cannot find 'names' in scope\n\
    \                result.append(names[current])\n                             \
    \ ^~~~~\n/tmp/tmp9dov694r.swift:67:31: error: cannot find 'names' in scope\n \
    \               result.append(names[current])\n                              ^~~~~\n\
    /tmp/tmp9dov694r.swift:73:31: error: cannot find 'names' in scope\n          \
    \      result.append(names[current])\n                              ^~~~~\n/tmp/tmp9dov694r.swift:79:31:\
    \ error: cannot find 'names' in scope\n                result.append(names[current])\n\
    \                              ^~~~~\n/tmp/tmp9dov694r.swift:88:23: error: cannot\
    \ find 'names' in scope\n        result.append(names[current])\n             \
    \         ^~~~~\n/tmp/tmp9dov694r.swift:92:23: error: cannot find 'names' in scope\n\
    \        result.append(names[previous])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.sort.reverse().map({\
    \ numbers[$0] })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0ri1u9yh.swift:15:37: error: cannot find 'numbers' in scope\n \
    \   return arr.sort.reverse().map({ numbers[$0] })\n                         \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var lengths: [Int]\
    \ = []\n    for i in arr {\n        if i == 0 {\n            continue\n      \
    \  }\n        switch i {\n        case 1, 10, 11:\n            lengths.append(1)\n\
    \        case 2, 11:\n            lengths.append(2)\n        case 3:\n       \
    \     lengths.append(3)\n        case 4, 10:\n            lengths.append(4)\n\
    \        case 5, 11:\n            lengths.append(5)\n        case 6:\n       \
    \     lengths.append(6)\n        case 7:\n            lengths.append(7)\n    \
    \    case 8, 9:\n            lengths.append(8)\n        case 10, 11:\n       \
    \     lengths.append(9)\n        default:\n            lengths.append(0)\n   \
    \     }\n    }\n    var arr = [String]()\n    for _ in lengths {\n        arr.append(\"\
    \")\n    }\n    var i = 0\n    for length in lengths {\n        arr[i] = \"One\"\
    \n        i += 1\n        if length == 2 {\n            arr[i] = \"Two\"\n   \
    \         i += 1\n        }\n        if length == 3 {\n            arr[i] = \"\
    Three\"\n            i += 1\n        }\n        if length == 4 {\n           \
    \ arr[i] = \"Four\"\n            i += 1\n        }\n        if length == 5 {\n\
    \            arr[i] = \"Five\"\n            i += 1\n        }\n        if length\
    \ == 6 {\n            arr[i] = \"Six\"\n            i += 1\n        }\n      \
    \  if length == 7 {\n            arr[i] = \"Seven\"\n            i += 1\n    \
    \    }\n        if length == 8 {\n            arr[i] = \"Eight\"\n           \
    \ i += 1\n        }\n        if length == 9 {\n            arr[i] = \"Nine\"\n\
    \            i += 1\n        }\n        if length == 10 {\n            arr[i]\
    \ = \"Ten\"\n            i += 1\n        }\n        if length == 11 {\n      \
    \      arr[i] = \"Eleven\"\n            i += 1\n        }\n    }\n    return arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b775248ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7752185561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7752185286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b775218513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7752184bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7751f849a0 specialized Array.subscript.modify
    + 0

    6    tmp_ak7xqip                        0x0000561eaa5db48c <unavailable> + 9356

    7    tmp_ak7xqip                        0x0000561eaa5da6e0 <unavailable> + 5856

    8    libc.so.6                          0x00002b775267a460 __libc_start_main +
    245

    9    tmp_ak7xqip                        0x0000561eaa5da399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  var result = Array<String>()\n\
    \  for i := 0; i < arr.count; i++ {\n    let value = arr[i]\n    if value < 1\
    \ || value > 9 {\n      continue\n    }\n    let index = value - 10\n    result.append(strings[index])\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmplhbwr4dt.swift:16:10: error: expected type\n  for i := 0; i < arr.count;\
    \ i++ {\n         ^\n          <#type#>\n/tmp/tmplhbwr4dt.swift:16:10: error:\
    \ expected 'in' after for-each pattern\n  for i := 0; i < arr.count; i++ {\n \
    \        ^\n/tmp/tmplhbwr4dt.swift:16:10: error: expected Sequence expression\
    \ for for-each loop\n  for i := 0; i < arr.count; i++ {\n         ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    switch arr.count/3\
    \ {\n    case 0: return []\n    case 1: return [\"One\"]\n    case 2: return [\"\
    One\", \"Two\"]\n    case 3: return [\"One\", \"Two\", \"Three\"]\n    case 4:\
    \ return [\"One\", \"Two\", \"Three\", \"Four\"]\n    case 5: return [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\"]\n    case 6: return [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\"]\n    case 7: return [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"]\n    case 8: return [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"]\n   \
    \ case 9: return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"]\n    default:\n        fatalError(\"Unexpected input\"\
    )\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmps3tnlenj/tmps3tnlenj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81610dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8160dd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8160dd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8160dd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3tnlenj                        0x000055fb1ac77711 <unavailable> + 5905

    5    libc.so.6                          0x00002b81612c6460 __libc_start_main +
    245

    6    tmps3tnlenj                        0x000055fb1ac771b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var ret = [String]()\n\
    \    if arr.isEmpty {\n        return ret\n    }\n    firstStr := \"\"\n    lastStr\
    \ := \"\"\n    for i := 0; i < len(arr); i++ {\n        if i < (len(arr) - 1)\
    \ && (arr[i] < 9) {\n            if lastStr != \"\" {\n                ret.append(lastStr)\n\
    \            }\n            firstStr = \"\"\n            lastStr = \"\"\n    \
    \        if arr[i] < 1 {\n                firstStr = \"One\"\n            } else\
    \ {\n                firstStr = \"Two\"\n            }\n            firstStr +=\
    \ String(arr[i])\n        } else if i > (len(arr) - 1) && (arr[i] > 9) {\n   \
    \         if lastStr != \"\" {\n                ret.append(lastStr)\n        \
    \    }\n            lastStr = \"\"\n            if arr[i] < 1 {\n            \
    \    lastStr = \"One\"\n            } else {\n                lastStr = \"Two\"\
    \n            }\n            lastStr += String(arr[i])\n        } else {\n   \
    \         if lastStr != \"\" {\n                ret.append(lastStr)\n        \
    \    }\n            lastStr = \"\"\n            if arr[i] < 1 {\n            \
    \    lastStr = \"One\"\n            } else {\n                lastStr = \"Two\"\
    \n            }\n            lastStr += String(arr[i])\n        }\n    }\n   \
    \ if lastStr != \"\" {\n        ret.append(lastStr)\n    }\n    return ret\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1xlrqk28.swift:19:13: error: consecutive statements on a line must\
    \ be separated by ';'\n    firstStr := \"\"\n            ^\n            ;\n/tmp/tmp1xlrqk28.swift:19:14:\
    \ error: expected expression\n    firstStr := \"\"\n             ^\n/tmp/tmp1xlrqk28.swift:21:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp1xlrqk28.swift:21:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp1xlrqk28.swift:21:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n/tmp/tmp1xlrqk28.swift:19:5: error: cannot find 'firstStr'\
    \ in scope\n    firstStr := \"\"\n    ^~~~~~~~\n/tmp/tmp1xlrqk28.swift:58:8: error:\
    \ cannot find 'lastStr' in scope\n    if lastStr != \"\" {\n       ^~~~~~~\n/tmp/tmp1xlrqk28.swift:59:20:\
    \ error: cannot find 'lastStr' in scope\n        ret.append(lastStr)\n       \
    \            ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return arr\n    }\n    \n    let arr = arr\n        .filter{ $0 < 10\
    \ }\n        .sorted()\n        .reversed()\n        .map{ ($0 % 10) + 1\n   \
    \         .map{ String($0) }\n            .reduce({ ($0 + \"_\" + $1) }) // \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"\n        }\n        \n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbktwtlhl.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpbktwtlhl.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmpbktwtlhl.swift:19:15: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let arr = arr\n              ^~~\n"
  stdout: ''
  timestamp: 1660014536
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let len = arr.count\n\
    \    if len == 0 {\n        return []\n    }\n\n    var result = [String]()\n\
    \    for i in 0..<len {\n        if i+1 < len {\n            result.append(String(arr[i]))\n\
    \            result.append(String(arr[i+1]))\n        } else {\n            result.append(String(arr[i]))\n\
    \        }\n    }\n    for index in 0..<len {\n        let digit = String(arr[index])\n\
    \        result[index] = digitToName[digit]\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyam42gcl.swift:31:25: error: cannot find 'digitToName' in scope\n\
    \        result[index] = digitToName[digit]\n                        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let maxLen = min(arr.count,\
    \ 10)\n    var result = [String]()\n    var length = 0\n    for num in arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        let\
    \ digit = num % 10\n        if length < maxLen {\n            result[length] =\
    \ names[digit]\n            length += 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3njpldm3.swift:24:30: error: cannot find 'names' in scope\n   \
    \         result[length] = names[digit]\n                             ^~~~~\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tif arr.isEmpty {\n\t\
    \treturn []\n\t} else if arr.reduce(false) { $0 || $1.isInfiniteNumber || $1.isNaN\
    \ }\n\t\treturn [\"One\"]\n\t} else {\n\t\tlet min = arr.min()!\n\t\tlet max =\
    \ arr.max()!\n\t\tlet result = [String]()\n\n\t\tfor x in arr {\n\t\t\tif x.isInfiniteNumber\
    \ || x.isNaN {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif x > max {\n\t\t\t\tresult.append(\"\
    Ten\")\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif x < min {\n\t\t\t\tresult.append(\"\
    One\")\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tlet digit = String(x)\n\t\t\tswitch x\
    \ {\n\t\t\tcase 10:\n\t\t\t\tresult.append(\"Ten\")\n\t\t\tcase 11:\n\t\t\t\t\
    result.append(\"Eleven\")\n\t\t\tcase 12:\n\t\t\t\tresult.append(\"Twelve\")\n\
    \t\t\tcase 13:\n\t\t\t\tresult.append(\"Thirteen\")\n\t\t\tcase 14:\n\t\t\t\t\
    result.append(\"Fourteen\")\n\t\t\tcase 15:\n\t\t\t\tresult.append(\"Fifteen\"\
    )\n\t\t\tcase 16:\n\t\t\t\tresult.append(\"Sixteen\")\n\t\t\tcase 17:\n\t\t\t\t\
    result.append(\"Seventeen\")\n\t\t\tcase 18:\n\t\t\t\tresult.append(\"Eighteen\"\
    )\n\t\t\tcase 19:\n\t\t\t\tresult.append(\"Nineteen\")\n\t\t\tdefault:\n\t\t\t\
    \tswitch digit {\n\t\t\t\tcase \"0\":\n\t\t\t\t\tresult.append(\"Zero\")\n\t\t\
    \t\tcase \"1\":\n\t\t\t\t\tresult.append(\"One\")\n\t\t\t\tcase \"2\":\n\t\t\t\
    \t\tresult.append(\"Two\")\n\t\t\t\tcase \"3\":\n\t\t\t\t\tresult.append(\"Three\"\
    )\n\t\t\t\tcase \"4\":\n\t\t\t\t\tresult.append(\"Four\")\n\t\t\t\tcase \"5\"\
    :\n\t\t\t\t\tresult.append(\"Five\")\n\t\t\t\tcase \"6\":\n\t\t\t\t\tresult.append(\"\
    Six\")\n\t\t\t\tcase \"7\":\n\t\t\t\t\tresult.append(\"Seven\")\n\t\t\t\tcase\
    \ \"8\":\n\t\t\t\t\tresult.append(\"Eight\")\n\t\t\t\tcase \"9\":\n\t\t\t\t\t\
    result.append(\"Nine\")\n\t\t\t\tdefault:\n\t\t\t\t\tlet result = digit.substring(1)\n\
    \t\t\t\t\tresult.forEach { result.append(lookup[it]) }\n\t\t\t\t}\n\t\t\t}\n\t\
    \t}\n\t\treturn result\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg3n_7ly4.swift:17:32: error: anonymous closure argument not contained\
    \ in a closure\n        } else if arr.reduce(false) { $0 || $1.isInfiniteNumber\
    \ || $1.isNaN }\n                                      ^\n/tmp/tmpg3n_7ly4.swift:17:38:\
    \ error: anonymous closure argument not contained in a closure\n        } else\
    \ if arr.reduce(false) { $0 || $1.isInfiniteNumber || $1.isNaN }\n           \
    \                                 ^\n/tmp/tmpg3n_7ly4.swift:17:61: error: anonymous\
    \ closure argument not contained in a closure\n        } else if arr.reduce(false)\
    \ { $0 || $1.isInfiniteNumber || $1.isNaN }\n                                \
    \                                   ^\n/tmp/tmpg3n_7ly4.swift:19:3: error: consecutive\
    \ statements on a line must be separated by ';'\n        } else {\n         ^\n\
    \         ;\n/tmp/tmpg3n_7ly4.swift:19:4: error: expected expression\n       \
    \ } else {\n          ^\n/tmp/tmpg3n_7ly4.swift:88:1: error: extraneous '}' at\
    \ top level\n}\n^\n/tmp/tmpg3n_7ly4.swift:17:28: error: missing argument for parameter\
    \ #2 in call\n        } else if arr.reduce(false) { $0 || $1.isInfiniteNumber\
    \ || $1.isNaN }\n                                  ^\n                       \
    \           , <#(Bool, Int) throws -> Bool#>\nSwift.Sequence:2:28: note: 'reduce'\
    \ declared here\n    @inlinable public func reduce<Result>(_ initialResult: Result,\
    \ _ nextPartialResult: (_ partialResult: Result, Self.Element) throws -> Result)\
    \ rethrows -> Result\n                           ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = arr.map { $0 == 0 ? \"Zero\" : String($0)\
    \ }\n    if arr.first == 0 {\n        result = result[0..<result.count]\n    }\n\
    \    let digits = UInt8(9) - 1\n    for i in result.reversed() {\n        if i\
    \ >= digits {\n            let index = Int(i)\n            result.remove(at: index)\n\
    \            result.remove(at: index)\n            arr[index] = String(digits)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpno3z3cbt.swift:18:24: error: cannot assign value of type 'ArraySlice<String>'\
    \ to type '[String]'\n        result = result[0..<result.count]\n            \
    \     ~~~~~~^~~~~~~~~~~~~~~~~~\n/tmp/tmpno3z3cbt.swift:22:14: error: binary operator\
    \ '>=' cannot be applied to operands of type 'String' and 'UInt8'\n        if\
    \ i >= digits {\n           ~ ^  ~~~~~~\n/tmp/tmpno3z3cbt.swift:22:14: note: overloads\
    \ for '>=' exist with these partially matching parameter lists: (UInt8, UInt8)\n\
    \        if i >= digits {\n             ^\n/tmp/tmpno3z3cbt.swift:24:31: error:\
    \ value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n \
    \           result.remove(at: index)\n                              ^\n/tmp/tmpno3z3cbt.swift:24:31:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result.remove(at: index)\n                              ^\n\
    \                                    ?? <#default value#>\n/tmp/tmpno3z3cbt.swift:24:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result.remove(at: index)\n                              ^\n\
    \                                   !\n/tmp/tmpno3z3cbt.swift:25:31: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n       \
    \     result.remove(at: index)\n                              ^\n/tmp/tmpno3z3cbt.swift:25:31:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result.remove(at: index)\n                              ^\n\
    \                                    ?? <#default value#>\n/tmp/tmpno3z3cbt.swift:25:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            result.remove(at: index)\n                              ^\n\
    \                                   !\n/tmp/tmpno3z3cbt.swift:26:17: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n       \
    \     arr[index] = String(digits)\n                ^\n/tmp/tmpno3z3cbt.swift:26:17:\
    \ note: coalesce using '??' to provide a default wh"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty()\
    \ {\n        return arr\n    }\n    let sorted = arr.sorted()\n    var result\
    \ = [String]()\n    for index in 0..<sorted.count {\n        var index = sorted[index]\n\
    \        if index < 10 {\n            result.append(String(index))\n        }\
    \ else if index < 100 {\n            result.append(String(index / 10))\n     \
    \       result.append(String(index % 10))\n        } else if index < 1000 {\n\
    \            let index = index / 100\n            result.append(String(index))\n\
    \            result.append(String(index % 10))\n            result.append(String(index\
    \ % 100))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbc81z92u.swift:15:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmpbc81z92u.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpbc81z92u.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for i : Int in arr {\n        if i <= 9 {\n            result += [\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\" ][i]\n        } else {\n            result += [ \"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\" ][i]\n        }\n    }\n    if !arr.isEmpty {\n \
    \       return arr\n    } else {\n        return result\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptsgtxt74.swift:18:20: error: operator function '+=' requires the\
    \ types 'String' and 'String.Element' (aka 'Character') be equivalent\n      \
    \      result += [ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\" ][i]\n                   ^\nSwift.RangeReplaceableCollection:4:35:\
    \ note: where 'Self.Element' = 'String', 'Other.Element' = 'String.Element' (aka\
    \ 'Character')\n    @inlinable public static func += <Other>(lhs: inout Self,\
    \ rhs: Other) where Other : Sequence, Self.Element == Other.Element\n        \
    \                          ^\n/tmp/tmptsgtxt74.swift:20:20: error: operator function\
    \ '+=' requires the types 'String' and 'String.Element' (aka 'Character') be equivalent\n\
    \            result += [ \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\"\
    , \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\" ][i]\n \
    \                  ^\nSwift.RangeReplaceableCollection:4:35: note: where 'Self.Element'\
    \ = 'String', 'Other.Element' = 'String.Element' (aka 'Character')\n    @inlinable\
    \ public static func += <Other>(lhs: inout Self, rhs: Other) where Other : Sequence,\
    \ Self.Element == Other.Element\n                                  ^\n/tmp/tmptsgtxt74.swift:24:16:\
    \ error: cannot convert return expression of type '[Int]' to return type '[String]'\n\
    \        return arr\n               ^\n/tmp/tmptsgtxt74.swift:24:16: note: arguments\
    \ to generic parameter 'Element' ('Int' and 'String') are expected to be equal\n\
    \        return arr\n               ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var lengths: [Int]\
    \ = []\n    var length: Int = 1\n    for element in arr {\n        switch element\
    \ {\n        case 1:\n            lengths.append(1)\n        case 2:\n       \
    \     lengths.append(2)\n        case 3:\n            lengths.append(3)\n    \
    \    case 4:\n            lengths.append(4)\n        case 5:\n            lengths.append(5)\n\
    \        case 6:\n            lengths.append(6)\n        case 7:\n           \
    \ lengths.append(7)\n        case 8:\n            lengths.append(8)\n        case\
    \ 9:\n            lengths.append(9)\n        default:\n            break\n   \
    \     }\n        length += 1\n    }\n    var result: [String] = []\n    for length\
    \ in lengths {\n        if length == 1 {\n            result.append(\"One\")\n\
    \        } else if length == 2 { // 1\n            result.append(\"Two\")\n  \
    \      } else if length == 3 { // 2\n            result.append(\"Three\")\n  \
    \      } else if length == 4 { // 3\n            result.append(\"Four\")\n   \
    \     } else if length == 5 { // 4\n            result.append(\"Five\")\n    \
    \    } else if length == 6 { // 5\n            result.append(\"Six\")\n      \
    \  } else if length == 7 { // 6\n            result.append(\"Seven\")\n      \
    \  } else if length == 8 { // 7\n            result.append(\"Eight\")\n      \
    \  } else if length == 9 { // 8\n            result.append(\"Nine\")\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpnz5y3t2u/tmpnz5y3t2u.swift:80: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8441814c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b844150bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b844150b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b844150a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnz5y3t2u                        0x0000561695d06841 <unavailable> + 6209

    5    libc.so.6                          0x00002b8441a00460 __libc_start_main +
    245

    6    tmpnz5y3t2u                        0x0000561695d062e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014505
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tlet arr = arr\n\tlet\
    \ len = arr.count\n\tif len == 0 {\n\t\treturn []\n\t}\n\n\tlet result = (0..<len).map\
    \ { i -> String in\n\t\tif arr[i] >= 1 && arr[i] <= 9 {\n\t\t\treturn \"One\"\n\
    \t\t}\n\t\tif arr[i] >= 10 && arr[i] <= 99 {\n\t\t\treturn \"Two\"\n\t\t}\n\t\t\
    if arr[i] >= 100 && arr[i] <= 999 {\n\t\t\treturn \"Three\"\n\t\t}\n\t\tif arr[i]\
    \ >= 1000 && arr[i] <= 9999 {\n\t\t\treturn \"Four\"\n\t\t}\n\t\tif arr[i] >=\
    \ 10000 && arr[i] <= 99999 {\n\t\t\treturn \"Five\"\n\t\t}\n\t\tif arr[i] >= 100000\
    \ && arr[i] <= 999999 {\n\t\t\treturn \"Six\"\n\t\t}\n\t\tif arr[i] >= 1000000\
    \ && arr[i] <= 9999999 {\n\t\t\treturn \"Seven\"\n\t\t}\n\t\tif arr[i] >= 10000000\
    \ && arr[i] <= 99999999 {\n\t\t\treturn \"Eight\"\n\t\t}\n\t\tif arr[i] >= 100000000\
    \ && arr[i] <= 999999999 {\n\t\t\treturn \"Nine\"\n\t\t}\n\t\treturn \"\"\n\t\
    }\n\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpc2u7yqpr/tmpc2u7yqpr.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcb6373c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcb606ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcb606a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcb60697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc2u7yqpr                        0x000055d64e1c98a1 <unavailable> + 6305

    5    libc.so.6                          0x00002abcb655f460 __libc_start_main +
    245

    6    tmpc2u7yqpr                        0x000055d64e1c9349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014506
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tvar names = [String]()\n\
    \n\tif arr.isEmpty {\n\t\treturn names\n\t}\n\n\tlet firstDigit = arr[0]\n\tlet\
    \ lastDigit = arr[arr.count - 1]\n\n\tfor i in 0..<arr.count {\n\t\tif arr[i]\
    \ >= 1 && arr[i] <= 9 {\n\t\t\tif i == 0 || arr[i-1] < arr[i] || arr[i] > arr[i+1]\
    \ {\n\t\t\t\tlet name = names[Int(arr[i])]\n\t\t\t\tnames.append(name)\n\t\t\t\
    }\n\t\t}\n\t}\n\n\tif firstDigit > lastDigit {\n\t\tnames.reverse()\n\t} else\
    \ {\n\t\tnames.sort(by: <)\n\t}\n\n\tnames.reverse()\n\treturn names\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2eb8273c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2eb7f6a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2eb7f6a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2eb7f6a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2eb7f69bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2eb7d69fc3 <unavailable> + 188355

    6    tmp_7g2qr34                        0x000055cc5fdad829 <unavailable> + 10281

    7    tmp_7g2qr34                        0x000055cc5fdacac0 <unavailable> + 6848

    8    libc.so.6                          0x00002b2eb845f460 __libc_start_main +
    245

    9    tmp_7g2qr34                        0x000055cc5fdac779 <unavailable> + 6009

    '
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  if arr.isEmpty() {\n\
    \    return []\n  }\n\n  if arr.count() != 9 {\n    return []\n  }\n\n  let result\
    \ = arr.sorted(by: { $0 < $1 })\n\n  let newStrings = Array(result.reversed()).map({\n\
    \    switch $0 {\n    case 0: return \"Zero\"\n    case 1: return \"One\"\n  \
    \  case 2: return \"Two\"\n    case 3: return \"Three\"\n    case 4: return \"\
    Four\"\n    case 5: return \"Five\"\n    case 6: return \"Six\"\n    case 7: return\
    \ \"Seven\"\n    case 8: return \"Eight\"\n    case 9: return \"Nine\"\n    }\n\
    \  })\n\n  return newStrings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp35vceflj.swift:15:10: error: cannot call value of non-function\
    \ type 'Bool'\n  if arr.isEmpty() {\n         ^      ~~\n                \n/tmp/tmp35vceflj.swift:19:10:\
    \ error: cannot call value of non-function type 'Int'\n  if arr.count() != 9 {\n\
    \         ^    ~~\n              \n/tmp/tmp35vceflj.swift:26:5: error: switch\
    \ must be exhaustive\n    switch $0 {\n    ^\n/tmp/tmp35vceflj.swift:26:5: note:\
    \ do you want to add a default clause?\n    switch $0 {\n    ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  guard arr.isEmpty ==\
    \ false else {\n    return []\n  }\n  \n  return arr.reduce(into: []) {\n    (result,\
    \ i) -> in\n    guard i >= 1 && i <= 9 else {\n      result.append(\"\")\n   \
    \   return\n    }\n    let name = String(describing: i)\n    let index = Int(name)\
    \ - 1\n    let value = index == 0 ? \"Zero\" : String(name)\n    result.append(value)\n\
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf9a01pm9.swift:20:20: error: expected expression\n    (result,\
    \ i) -> in\n                   ^\n/tmp/tmpf9a01pm9.swift:21:11: error: cannot\
    \ find 'i' in scope\n    guard i >= 1 && i <= 9 else {\n          ^\n/tmp/tmpf9a01pm9.swift:21:21:\
    \ error: cannot find 'i' in scope\n    guard i >= 1 && i <= 9 else {\n       \
    \             ^\n/tmp/tmpf9a01pm9.swift:22:7: error: cannot find 'result' in scope\n\
    \      result.append(\"\")\n      ^~~~~~\n/tmp/tmpf9a01pm9.swift:25:35: error:\
    \ cannot find 'i' in scope\n    let name = String(describing: i)\n           \
    \                       ^\n/tmp/tmpf9a01pm9.swift:28:5: error: cannot find 'result'\
    \ in scope\n    result.append(value)\n    ^~~~~~\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let minLength = min(arr.count)\n\
    \    var newArr = [String]()\n    for i in 0..<minLength {\n        let element\
    \ = arr[i]\n        let index = String(element)\n        let result = array[index]\n\
    \        newArr.append(result)\n    }\n    for element in arr {\n        let index\
    \ = String(element)\n        let result = array[index]\n        newArr.remove(at:\
    \ newArr.index(of: result)!)\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa_tdup1v.swift:15:34: error: missing argument for parameter #2\
    \ in call\n    let minLength = min(arr.count)\n                              \
    \   ^\n                                 , <#Int#>\nSwift.min:1:24: note: 'min'\
    \ declared here\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T :\
    \ Comparable\n                       ^\n/tmp/tmpa_tdup1v.swift:25:22: error: cannot\
    \ find 'array' in scope\n        let result = array[index]\n                 \
    \    ^~~~~\n/tmp/tmpa_tdup1v.swift:20:22: error: cannot find 'array' in scope\n\
    \        let result = array[index]\n                     ^~~~~\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  return sort(arr).reverse().map(str_to_digit)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu0u8pcuy.swift:15:10: error: cannot find 'sort' in scope\n  return\
    \ sort(arr).reverse().map(str_to_digit)\n         ^~~~\n/tmp/tmpu0u8pcuy.swift:15:34:\
    \ error: cannot find 'str_to_digit' in scope\n  return sort(arr).reverse().map(str_to_digit)\n\
    \                                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for val in arr {\n        if val < 10 {\n            result.append(String(val))\n\
    \        } else {\n            for letter in \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" {\n                if val\
    \ == Int(letter) {\n                    result.append(letter)\n              \
    \      break\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzt58qk2k.swift:20:32: error: expected '{' to start the body of\
    \ for-each loop\n            for letter in \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" {\n                      \
    \         ^\n/tmp/tmpzt58qk2k.swift:21:27: error: no exact matches in call to\
    \ initializer \n                if val == Int(letter) {\n                    \
    \      ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float16)\n       \
    \    ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float)\n           ^\nSwift.Int:12:12:\
    \ note: candidate expects value of type 'Double' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate\
    \ expects value of type 'Float80' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate expects\
    \ value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n    public\
    \ init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate\
    \ expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n  \
    \  public init(_ _v: Builtin.Word)\n           ^\n/tmp/tmpzt58qk2k.swift:22:35:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                    result.append(letter)\n                                 \
    \ ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return arr\n    }\n    var output = [String]()\n    let maxLength = max(arr)\
    \ + 10\n    var prev = 0\n    for val in arr {\n        if val < 1 || val > maxLength\
    \ {\n            continue\n        }\n        let str = String(arr[prev...val])\n\
    \        output.append(str)\n        prev = val\n    }\n    return output\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprgn499lu.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmprgn499lu.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmprgn499lu.swift:19:28: error: missing argument for parameter #2 in call\n\
    \    let maxLength = max(arr) + 10\n                           ^\n           \
    \                , <#Int#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable\
    \ public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmprgn499lu.swift:19:25: error: cannot convert value of type\
    \ '[Int]' to expected argument type 'Int'\n    let maxLength = max(arr) + 10\n\
    \                        ^\n/tmp/tmprgn499lu.swift:25:19: error: no exact matches\
    \ in call to initializer \n        let str = String(arr[prev...val])\n       \
    \           ^\nSwift.String:4:12: note: candidate requires that the types 'Int'\
    \ and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')\n\
    \    public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n\
    \           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires\
    \ that the types 'String.Element' (aka 'Character') and 'Int' be equivalent (requirement\
    \ specified as 'Self.Element' == 'S.Element')\n    @inlinable public init<S>(_\
    \ elements: S) where S : Sequence, Self.Element == S.Element\n               \
    \       ^\nSwift.String:2:12: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(describing:)')\n    public init<Subject>(describing instance: Subject)\n\
    \           ^\nSwift.String:3:23: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(describing:)')\n    @inlinable public init<Subject>(describing\
    \ instance: Subject) where Subject : CustomStringConvertible\n               \
    \       ^\nSwift.String:6:12: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(reflecting:)')\n    public init<Subject>(reflecting subject: Subject)\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var current = 0\n   \
    \ let upperBound = arr.count - 1\n    guard arr.count >= 1 else {\n        return\
    \ result\n    }\n    guard arr.count <= 9 else {\n        return result\n    }\n\
    \    while current < upperBound {\n        var reversedIndex: Int = 0\n      \
    \  let reversedIndexOne = current + 1\n        let reversedIndexTwo = current\
    \ + 2\n        let reversedIndexThree = current + 3\n        let reversedIndexFour\
    \ = current + 4\n        let reversedIndexFive = current + 5\n        let reversedIndexSix\
    \ = current + 6\n        let reversedIndexSeven = current + 7\n        let reversedIndexEight\
    \ = current + 8\n        let reversedIndexNine = current + 9\n        let one\
    \ = reversedIndexOne\n        let two = reversedIndexTwo\n        let three =\
    \ reversedIndexThree\n        let four = reversedIndexFour\n        let five =\
    \ reversedIndexFive\n        let six = reversedIndexSix\n        let seven = reversedIndexSeven\n\
    \        let eight = reversedIndexEight\n        let nine = reversedIndexNine\n\
    \        let oneIndex = reversedIndexOne\n        if oneIndex <= arr.count &&\
    \ arr[oneIndex] > 0 {\n            result += [\"One\"]\n            current +=\
    \ 1 // now that we've appended \"One\", we're done\n            continue\n   \
    \     } else {\n            // append \"Two\"\n            result += [\"Two\"\
    ]\n            current += 2 // now that we've appended \"Two\", we're done\n \
    \           if arr[oneIndex] > 0 {\n                continue\n            }\n\
    \            guard twoIndex <= arr.count && arr[twoIndex] > 0 else {\n       \
    \         return result\n            }\n            result += [\"Two\"]\n    \
    \        current += 2 // now that we've appended \"Two\", we're done\n       \
    \     if arr[twoIndex] > 0 {\n                continue\n            }\n      \
    \      guard threeIndex <= arr.count && arr[threeIndex] > 0 else {\n         \
    \       return result\n            }\n            result += [\"Three\"]\n    \
    \        current += 3 // now that we've appended \"Three\", we're done\n     \
    \       if arr[threeIndex] > 0 {\n                continue\n            }\n  \
    \          guard fourIndex <= arr.count && arr[fourIndex] > 0 else {\n       \
    \         return result\n            }\n            result += [\"Four\"]\n   \
    \         current += 4 // now that we've appended \"Four\", we're done\n     \
    \       if arr[fourIndex] > 0 {\n                continue\n            }\n   \
    \         guard fiveIndex <= arr.count && arr[fiveIndex] > 0 else {\n        \
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_jt3n0_3.swift:104:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp_jt3n0_3.swift:52:16:\
    \ note: to match this opening '{'\n        } else {\n               ^\n/tmp/tmp_jt3n0_3.swift:104:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmp_jt3n0_3.swift:27:32: note: to match this\
    \ opening '{'\n    while current < upperBound {\n                            \
    \   ^\n/tmp/tmp_jt3n0_3.swift:104:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp_jt3n0_3.swift:14:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmp_jt3n0_3.swift:59:19: error:\
    \ cannot find 'twoIndex' in scope\n            guard twoIndex <= arr.count &&\
    \ arr[twoIndex] > 0 else {\n                  ^~~~~~~~\n/tmp/tmp_jt3n0_3.swift:59:48:\
    \ error: cannot find 'twoIndex' in scope\n            guard twoIndex <= arr.count\
    \ && arr[twoIndex] > 0 else {\n                                              \
    \ ^~~~~~~~\n/tmp/tmp_jt3n0_3.swift:64:20: error: cannot find 'twoIndex' in scope\n\
    \            if arr[twoIndex] > 0 {\n                   ^~~~~~~~\n/tmp/tmp_jt3n0_3.swift:67:19:\
    \ error: cannot find 'threeIndex' in scope\n            guard threeIndex <= arr.count\
    \ && arr[threeIndex] > 0 else {\n                  ^~~~~~~~~~\n/tmp/tmp_jt3n0_3.swift:67:50:\
    \ error: cannot find 'threeIndex' in scope\n            guard threeIndex <= arr.count\
    \ && arr[threeIndex] > 0 else {\n                                            \
    \     ^~~~~~~~~~\n/tmp/tmp_jt3n0_3.swift:72:20: error: cannot find 'threeIndex'\
    \ in scope\n            if arr[threeIndex] > 0 {\n                   ^~~~~~~~~~\n\
    /tmp/tmp_jt3n0_3.swift:75:19: error: cannot find 'fourIndex' in sc"
  stdout: ''
  timestamp: 1660014505
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr == nil {\n\
    \        return arr\n    }\n    \n    if arr.isEmpty {\n        return arr\n \
    \   }\n    \n    let arrCopy = arr.map(Int)\n    let size = arrCopy.count\n  \
    \  \n    let reversedArray = arrCopy.reverse()\n    var result = reversedArray\n\
    \    \n    for index in 0..<size {\n        if index % 10 == 0 {\n           \
    \ result = reversedArray.map({$0.toInt()})\n        } else {\n            result\
    \ = reversedArray\n        }\n        \n        if index % 10 == 0 {\n       \
    \     let index = arrCopy.count - 1\n            let key = reversedArray[index].toInt()\n\
    \            if key < 10 && key >= 0 {\n                result[index] = String.fromCharCode(key)\n\
    \            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbyywkyjm.swift:15:12: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if arr == nil {\n       ~~~\
    \ ^  ~~~\n/tmp/tmpbyywkyjm.swift:16:16: error: cannot convert return expression\
    \ of type '[Int]' to return type '[String]'\n        return arr\n            \
    \   ^\n/tmp/tmpbyywkyjm.swift:16:16: note: arguments to generic parameter 'Element'\
    \ ('Int' and 'String') are expected to be equal\n        return arr\n        \
    \       ^\n/tmp/tmpbyywkyjm.swift:20:16: error: cannot convert return expression\
    \ of type '[Int]' to return type '[String]'\n        return arr\n            \
    \   ^\n/tmp/tmpbyywkyjm.swift:20:16: note: arguments to generic parameter 'Element'\
    \ ('Int' and 'String') are expected to be equal\n        return arr\n        \
    \       ^\n/tmp/tmpbyywkyjm.swift:23:23: error: no exact matches in call to instance\
    \ method 'map'\n    let arrCopy = arr.map(Int)\n                      ^\n/tmp/tmpbyywkyjm.swift:23:23:\
    \ note: found candidate with type '((Int) throws -> _) throws -> Array<_>'\n \
    \   let arrCopy = arr.map(Int)\n                      ^\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    defer { assert(arr.isNotEmpty(),\
    \ \"no arr given\") }\n    var result = [String]()\n    for number in arr {\n\
    \        if number < 1 || number > 9 {\n            continue\n        }\n    \
    \    // sort the arr in ascending order\n        arr.sort(ascending: <@-^Int,\
    \ @-^Int@->)\n        // reverse the arr\n        arr.reverse()\n        // convert\
    \ the arr to string and append it\n        result.append(\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[number]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpykcecke0.swift:22:30: error: expected expression in list of expressions\n\
    \        arr.sort(ascending: <@-^Int, @-^Int@->)\n                           \
    \  ^\n/tmp/tmpykcecke0.swift:22:38: error: expected expression in list of expressions\n\
    \        arr.sort(ascending: <@-^Int, @-^Int@->)\n                           \
    \          ^\n/tmp/tmpykcecke0.swift:15:24: error: value of type '[Int]' has no\
    \ member 'isNotEmpty'\n    defer { assert(arr.isNotEmpty(), \"no arr given\")\
    \ }\n                   ~~~ ^~~~~~~~~~\n/tmp/tmpykcecke0.swift:22:13: error: cannot\
    \ use mutating member on immutable value: 'arr' is a 'let' constant\n        arr.sort(ascending:\
    \ <@-^Int, @-^Int@->)\n        ~~~ ^\n/tmp/tmpykcecke0.swift:24:13: error: cannot\
    \ use mutating member on immutable value: 'arr' is a 'let' constant\n        arr.reverse()\n\
    \        ~~~ ^\n/tmp/tmpykcecke0.swift:26:22: error: extra arguments at positions\
    \ #2, #3, #4, #5, #6, #7, #8, #9 in call\n        result.append(\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[number]\n\
    \                     ^\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmpykcecke0.swift:26:94: error: value of type '()'\
    \ has no subscripts\n        result.append(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[number]\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        let n = i + 9\n        if n < 10 {\n            result.append(String(format:\
    \ \"%c\", n))\n        } else if n < 36 {\n            result.append(String(format:\
    \ \"%c\", n + 10))\n        } else {\n            result.append(String(format:\
    \ \"%c\", n + 36))\n        }\n    }\n    result.reverse()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpplrcxl9i.swift:19:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%c\", n))\n                                ^~~~~~~\n                     \
    \            repeating     count: \n/tmp/tmpplrcxl9i.swift:21:33: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \          result.append(String(format: \"%c\", n + 10))\n                   \
    \             ^~~~~~~\n                                 repeating     count: \n\
    /tmp/tmpplrcxl9i.swift:23:33: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n            result.append(String(format: \"%c\"\
    , n + 36))\n                                ^~~~~~~\n                        \
    \         repeating     count: \n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for i in arr {\n        if i <= 9 {\n            result.append(\"One\")\n\
    \        } else if i == 10 {\n            result.append(\"Ten\")\n        } else\
    \ if i == 11 {\n            result.append(\"Eleven\")\n        } else if i ==\
    \ 12 {\n            result.append(\"Twelve\")\n        } else if i == 13 {\n \
    \           result.append(\"Thirteen\")\n        } else if i == 14 {\n       \
    \     result.append(\"Fourteen\")\n        } else if i == 15 {\n            result.append(\"\
    Fifteen\")\n        } else if i == 16 {\n            result.append(\"Sixteen\"\
    )\n        } else if i == 17 {\n            result.append(\"Seventeen\")\n   \
    \     } else if i == 18 {\n            result.append(\"Eighteen\")\n        }\
    \ else if i == 19 {\n            result.append(\"Nineteen\")\n        } else {\n\
    \            result.append(\"Hundred\")\n        }\n    }\n    result.reverse()\n\
    \    for index in 0..<result.count {\n        result[index] = result[index][index.startIndex]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq1h_k83h.swift:45:45: error: value of type 'Int' has no member\
    \ 'startIndex'\n        result[index] = result[index][index.startIndex]\n    \
    \                                  ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tif arr.isEmpty() {\n\
    \t\treturn []\n\t}\n\t\n\tarr.sort{ a, b in\n\t\treturn a >= 9 && a <= 9 + b ?\
    \ b - a + 1 : a - b\n\t}\n\t\n\treversed_arr := arr.reverse()\n\t\n\tmap ({ arr.removeLast()\
    \ }) reversed_arr\n\t\n\treturn arr.map({ name in\n\t\tswitch name {\n\t\tcase\
    \ 0:\n\t\t\treturn \"One\"\n\t\tcase 1:\n\t\t\treturn \"Two\"\n\t\tcase 2:\n\t\
    \t\treturn \"Three\"\n\t\tcase 3:\n\t\t\treturn \"Four\"\n\t\tcase 4:\n\t\t\t\
    return \"Five\"\n\t\tcase 5:\n\t\t\treturn \"Six\"\n\t\tcase 6:\n\t\t\treturn\
    \ \"Seven\"\n\t\tcase 7:\n\t\t\treturn \"Eight\"\n\t\tcase 8:\n\t\t\treturn \"\
    Nine\"\n\t\t}\n\t\t\n\t\tnil\n\t}) as [String]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5fpvthwp.swift:23:14: error: consecutive statements on a line must\
    \ be separated by ';'\n        reversed_arr := arr.reverse()\n               \
    \     ^\n                    ;\n/tmp/tmp5fpvthwp.swift:23:15: error: expected\
    \ expression\n        reversed_arr := arr.reverse()\n                     ^\n\
    /tmp/tmp5fpvthwp.swift:15:9: error: cannot call value of non-function type 'Bool'\n\
    \        if arr.isEmpty() {\n               ^      ~~\n                      \n\
    /tmp/tmp5fpvthwp.swift:19:6: error: cannot use mutating member on immutable value:\
    \ 'arr' is a 'let' constant\n        arr.sort{ a, b in\n        ~~~ ^\n/tmp/tmp5fpvthwp.swift:20:31:\
    \ error: cannot convert value of type 'Int' to closure result type 'Bool'\n  \
    \              return a >= 9 && a <= 9 + b ? b - a + 1 : a - b\n             \
    \          ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5fpvthwp.swift:23:2:\
    \ error: cannot find 'reversed_arr' in scope\n        reversed_arr := arr.reverse()\n\
    \        ^~~~~~~~~~~~\n/tmp/tmp5fpvthwp.swift:49:3: error: 'nil' requires a contextual\
    \ type\n                nil\n                ^\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  return arr.sorted().map({\
    \ $0 < 0 ? \"One\" : $1 < 0 ? \"Two\" : $1 < 10 ? \"Three\" : $1 < 100 ? \"Four\"\
    \ : $1 < 1000 ? \"Five\" : $1 < 10000 ? \"Six\" : $1 < 100000 ? \"Seven\" : $1\
    \ < 1000000 ? \"Eight\" : $1 < 10000000 ? \"Nine\" : String($1) }).reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoez2ha_6.swift:15:10: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n  return arr.sorted().map({ $0 < 0 ? \"One\" : $1 < 0 ? \"\
    Two\" : $1 < 10 ? \"Three\" : $1 < 100 ? \"Four\" : $1 < 1000 ? \"Five\" : $1\
    \ < 10000 ? \"Six\" : $1 < 100000 ? \"Seven\" : $1 < 1000000 ? \"Eight\" : $1\
    \ < 10000000 ? \"Nine\" : String($1) }).reverse()\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660015088
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var len = [String]()\n\
    \    for _, v := range arr {\n        len.append(numberToName[v])\n    }\n   \
    \ sort.Sort(ByLength(len))\n    return len\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9abadeza.swift:16:10: error: expected 'in' after for-each pattern\n\
    \    for _, v := range arr {\n         ^\n/tmp/tmp9abadeza.swift:16:10: error:\
    \ expected Sequence expression for for-each loop\n    for _, v := range arr {\n\
    \         ^\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let len = arr.count\n\
    \    var result: [String] = []\n    let bases = (\"One\", \"Two\", \"Three\",\
    \ \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\").sorted()\n    for\
    \ i in 0..<len {\n        if arr[len-i-1] < 0 || arr[len-i-1] > 9 {\n        \
    \    continue\n        }\n        let base = bases[arr[len-i-1]]\n        result.append(\"\
    \\(base)\") // append the base if it's a valid digit\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3arz3ter.swift:17:90: error: value of tuple type '(String, String,\
    \ String, String, String, String, String, String, String)' has no member 'sorted'\n\
    \    let bases = (\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\").sorted()\n                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n    var newArr = arr.sorted()\n    if newArr.first > 9 {\n\
    \        newArr = newArr.suffix(1)\n    }\n    var result = [String]()\n    for\
    \ i in 0 ..< newArr.count {\n        switch i {\n        case 0:\n           \
    \ result.append(\"One\")\n        case 1:\n            result.append(\"Two\")\n\
    \        case 2:\n            result.append(\"Three\")\n        case 3:\n    \
    \        result.append(\"Four\")\n        case 4:\n            result.append(\"\
    Five\")\n        case 5:\n            result.append(\"Six\")\n        case 6:\n\
    \            result.append(\"Seven\")\n        case 7:\n            result.append(\"\
    Eight\")\n        case 8:\n            result.append(\"Nine\")\n        default:\n\
    \            result.append(\"\\(newArr[i])\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3acqfhkr.swift:17:15: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if newArr.first > 9 {\n         \
    \     ^\n/tmp/tmp3acqfhkr.swift:17:15: note: coalesce using '??' to provide a\
    \ default when the optional value contains 'nil'\n    if newArr.first > 9 {\n\
    \              ^\n                    ?? <#default value#>\n/tmp/tmp3acqfhkr.swift:17:15:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if newArr.first > 9 {\n              ^\n                   !\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty\
    \ else { return [] }\n\n    // Reverse the array, then map each digit to its corresponding\
    \ digit name.\n    let result = reverseArray(arr).map { nameByDigit($0) }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw0knz11u.swift:18:18: error: cannot find 'reverseArray' in scope\n\
    \    let result = reverseArray(arr).map { nameByDigit($0) }\n                \
    \ ^~~~~~~~~~~~\n/tmp/tmpw0knz11u.swift:18:42: error: cannot find 'nameByDigit'\
    \ in scope\n    let result = reverseArray(arr).map { nameByDigit($0) }\n     \
    \                                    ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // if the array is\
    \ empty\n    if arr.isEmpty() {\n        return arr\n    }\n\n    // sort the\
    \ array (ascending)\n    let arrSorted = arr.sorted { $0 < $1 }\n\n    // reverse\
    \ the array\n    let arrReversed = arrSorted.reverse()\n\n    // go through the\
    \ reversed array and assign each element to the name \"One\", \"Two\"...\n   \
    \ var names = [String]()\n    for i in 0..<arrReversed.count {\n        switch\
    \ i {\n        case 0..<5:\n            names.append(\"One\")\n        case 6..<10:\n\
    \            names.append(\"Two\")\n        case 11..<15:\n            names.append(\"\
    Three\")\n        case 16..<20:\n            names.append(\"Four\")\n        case\
    \ 21:\n            names.append(\"Five\")\n        case 22..<25:\n           \
    \ names.append(\"Six\")\n        case 26..<30:\n            names.append(\"Seven\"\
    )\n        case 31..<35:\n            names.append(\"Eight\")\n        case 36..<40:\n\
    \            names.append(\"Nine\")\n        case 41..<45:\n            names.append(\"\
    Ten\")\n        default:\n            break\n        }\n        names.append(arrReversed[i])\n\
    \    }\n\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5ikjt6la.swift:16:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n/tmp/tmp5ikjt6la.swift:17:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmp5ikjt6la.swift:17:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmp5ikjt6la.swift:24:33: error: cannot use mutating member on immutable value:\
    \ 'arrSorted' is a 'let' constant\n    let arrReversed = arrSorted.reverse()\n\
    \                      ~~~~~~~~~ ^\n/tmp/tmp5ikjt6la.swift:21:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let arrSorted = arr.sorted { $0 < $1\
    \ }\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tif arr.isEmpty {\n\t\
    \treturn []\n\t}\n\n\tswitch arr[0] {\n\tcase 1: return [\"One\"]\n\tcase 2: return\
    \ [\"Two\", \"One\"]\n\tcase 3: return [\"Three\", \"Two\", \"One\"]\n\tcase 4:\
    \ return [\"Four\", \"Three\", \"Two\", \"One\"]\n\tcase 5: return [\"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"One\"]\n\tcase 6: return [\"Six\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"One\"]\n\tcase 7: return [\"Seven\", \"Six\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n\tcase 8: return [\"Eight\"\
    , \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n\tcase\
    \ 9: return [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"One\"]\n\tdefault:\n\t\treturn []\n\t}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpoqn_a3it/tmpoqn_a3it.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca8723ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca86f35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca86f35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca86f347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoqn_a3it                        0x000055d081911711 <unavailable> + 5905

    5    libc.so.6                          0x00002aca8742a460 __libc_start_main +
    245

    6    tmpoqn_a3it                        0x000055d0819111b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    arr.sortInPlace()\n\
    \    var result = [String]()\n    if arr.isEmpty() {\n        return result\n\
    \    }\n    let maxLength = max(arr.count, 9)\n    for i in 1..maxLength {\n \
    \       let index = findIndex(arr, i)\n        if index == -1 {\n            continue\n\
    \        }\n        let n = arr[arr.index(index, offsetBy: i)]\n        if n !=\
    \ n {\n            result.append(n)\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqtp6cy0i.swift:15:9: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    arr.sortInPlace()\n    ~~~ ^~~~~~~~~~~\n/tmp/tmpqtp6cy0i.swift:17:12:\
    \ error: cannot call value of non-function type 'Bool'\n    if arr.isEmpty() {\n\
    \           ^      ~~\n                  \n/tmp/tmpqtp6cy0i.swift:21:15: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n    for i in 1..maxLength\
    \ {\n              ^~\n              ...\n/tmp/tmpqtp6cy0i.swift:22:21: error:\
    \ cannot find 'findIndex' in scope\n        let index = findIndex(arr, i)\n  \
    \                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var res = make([]string,\
    \ len(arr))\n    sort_by(arr, func(i Int) -> Bool { // Sort by length, descending\n\
    \        return i <= 9\n    })\n    var inc = 1 // Increment by one\n    for i\
    \ := 0; i < len(arr); i++ {\n        res[i] = string(arr[inc-1])\n        if i\
    \ < 9 {\n            inc++\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp71afhmbf.swift:15:22: error: expected ',' separator\n    var res\
    \ = make([]string, len(arr))\n                     ^\n                     ,\n\
    /tmp/tmp71afhmbf.swift:16:18: error: expected expression in list of expressions\n\
    \    sort_by(arr, func(i Int) -> Bool { // Sort by length, descending\n      \
    \           ^\n/tmp/tmp71afhmbf.swift:16:22: error: expected identifier in function\
    \ declaration\n    sort_by(arr, func(i Int) -> Bool { // Sort by length, descending\n\
    \                     ^\n/tmp/tmp71afhmbf.swift:20:12: error: expected type\n\
    \    for i := 0; i < len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp71afhmbf.swift:20:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp71afhmbf.swift:20:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp71afhmbf.swift:15:15:\
    \ error: cannot find 'make' in scope\n    var res = make([]string, len(arr))\n\
    \              ^~~~\n/tmp/tmp71afhmbf.swift:15:22: error: cannot find 'string'\
    \ in scope\n    var res = make([]string, len(arr))\n                     ^~~~~~\n\
    /tmp/tmp71afhmbf.swift:15:30: error: cannot find 'len' in scope\n    var res =\
    \ make([]string, len(arr))\n                             ^~~\n/tmp/tmp71afhmbf.swift:16:5:\
    \ error: cannot find 'sort_by' in scope\n    sort_by(arr, func(i Int) -> Bool\
    \ { // Sort by length, descending\n    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  if arr == nil || arr[0]\
    \ == 0 {\n    return []\n  }\n  // check length\n  if arr.count < 2 || arr.count\
    \ > 9 {\n    return []\n  }\n  // check all numbers are between 1 and 9\n  let\
    \ arr1 = arr.map({ $0 })\n  for element in arr1 {\n    if element < 1 || element\
    \ > 9 {\n      continue\n    }\n  }\n  \n  var reversed: [Int] = []\n  for element\
    \ in arr {\n    reversed.append(9 - element)\n  }\n  \n  var result: [String]\
    \ = []\n  for element in arr1 {\n    guard element < 10 else { return result }\n\
    \    guard let index = reversed.index(of: element) else { return result }\n  \
    \  let result = reversed[index].description ?? \"\"\n    result.append(result)\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwnwzxbc4.swift:15:10: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n  if arr == nil || arr[0] == 0 {\n\
    \     ~~~ ^  ~~~\n/tmp/tmpwnwzxbc4.swift:38:32: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n    guard let index = reversed.index(of: element)\
    \ else { return result }\n                               ^\n/tmp/tmpwnwzxbc4.swift:38:32:\
    \ note: use 'firstIndex(of:)' instead\n    guard let index = reversed.index(of:\
    \ element) else { return result }\n                               ^~~~~\n    \
    \                           firstIndex\n/tmp/tmpwnwzxbc4.swift:39:46: warning:\
    \ left side of nil coalescing operator '??' has non-optional type 'String', so\
    \ the right side is never used\n    let result = reversed[index].description ??\
    \ \"\"\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~\n                 \
    \                            \n/tmp/tmpwnwzxbc4.swift:40:12: error: cannot use\
    \ mutating member on immutable value: 'result' is a 'let' constant\n    result.append(result)\n\
    \    ~~~~~~ ^\n/tmp/tmpwnwzxbc4.swift:39:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let result = reversed[index].description ?? \"\"\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var index = 0\n \
    \   var strs = [String]()\n    for n in arr {\n        if index % 10 == 1 && n\
    \ >= 1 && n <= 9 {\n            strs.append(n.description)\n        }\n      \
    \  index++\n    }\n    if strs.isEmpty {\n        return []\n    }\n    for str\
    \ in strs {\n        strs[strs.indexWhere({ \"One\" ~= str })!] = \"One\"\n  \
    \      strs[strs.indexWhere({ \"Two\" ~= str })!] = \"Two\"\n        strs[strs.indexWhere({\
    \ \"Three\" ~= str })!] = \"Three\"\n        strs[strs.indexWhere({ \"Four\" ~=\
    \ str })!] = \"Four\"\n        strs[strs.indexWhere({ \"Five\" ~= str })!] = \"\
    Five\"\n        strs[strs.indexWhere({ \"Six\" ~= str })!] = \"Six\"\n       \
    \ strs[strs.indexWhere({ \"Seven\" ~= str })!] = \"Seven\"\n        strs[strs.indexWhere({\
    \ \"Eight\" ~= str })!] = \"Eight\"\n        strs[strs.indexWhere({ \"Nine\" ~=\
    \ str })!] = \"Nine\"\n    }\n    strs.reverse()\n    return strs\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6zgbvt26.swift:21:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n/tmp/tmp6zgbvt26.swift:27:19:\
    \ error: value of type '[String]' has no member 'indexWhere'\n        strs[strs.indexWhere({\
    \ \"One\" ~= str })!] = \"One\"\n             ~~~~ ^~~~~~~~~~\n/tmp/tmp6zgbvt26.swift:28:19:\
    \ error: value of type '[String]' has no member 'indexWhere'\n        strs[strs.indexWhere({\
    \ \"Two\" ~= str })!] = \"Two\"\n             ~~~~ ^~~~~~~~~~\n/tmp/tmp6zgbvt26.swift:29:19:\
    \ error: value of type '[String]' has no member 'indexWhere'\n        strs[strs.indexWhere({\
    \ \"Three\" ~= str })!] = \"Three\"\n             ~~~~ ^~~~~~~~~~\n/tmp/tmp6zgbvt26.swift:30:19:\
    \ error: value of type '[String]' has no member 'indexWhere'\n        strs[strs.indexWhere({\
    \ \"Four\" ~= str })!] = \"Four\"\n             ~~~~ ^~~~~~~~~~\n/tmp/tmp6zgbvt26.swift:31:19:\
    \ error: value of type '[String]' has no member 'indexWhere'\n        strs[strs.indexWhere({\
    \ \"Five\" ~= str })!] = \"Five\"\n             ~~~~ ^~~~~~~~~~\n/tmp/tmp6zgbvt26.swift:32:19:\
    \ error: value of type '[String]' has no member 'indexWhere'\n        strs[strs.indexWhere({\
    \ \"Six\" ~= str })!] = \"Six\"\n             ~~~~ ^~~~~~~~~~\n/tmp/tmp6zgbvt26.swift:33:19:\
    \ error: value of type '[String]' has no member 'indexWhere'\n        strs[strs.indexWhere({\
    \ \"Seven\" ~= str })!] = \"Seven\"\n             ~~~~ ^~~~~~~~~~\n/tmp/tmp6zgbvt26.swift:34:19:\
    \ error: value of type '[String]' has no member 'indexWhere'\n        strs[strs.indexWhere({\
    \ \"Eight\" ~= str })!] = \"Eight\"\n             ~~~~ ^~~~~~~~~~\n/tmp/tmp6zgbvt26.swift:35:19:\
    \ error: value of type '[String]' has no member 'indexWhere'\n        strs[strs.indexWhere({\
    \ \"Nine\" ~= str })!] = \"Nine\"\n             ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var arr2 = []\n \
    \   var str = \"\"\n    for num in arr {\n        arr2.append(num)\n    }\n  \
    \  if arr2.count > 9 {\n        for index in 0..<(9 - arr2.count) {\n        \
    \    str += \"One\"\n        }\n    }\n    if arr2.count > 9 {\n        for index\
    \ in 1..<(9 - arr2.count) {\n            str += \"Two\"\n        }\n    }\n  \
    \  if arr2.count > 9 {\n        for index in 2..<(9 - arr2.count) {\n        \
    \    str += \"Three\"\n        }\n    }\n    if arr2.count > 9 {\n        for\
    \ index in 3..<(9 - arr2.count) {\n            str += \"Four\"\n        }\n  \
    \  }\n    if arr2.count > 9 {\n        for index in 4..<(9 - arr2.count) {\n \
    \           str += \"Five\"\n        }\n    }\n    if arr2.count > 9 {\n     \
    \   for index in 5..<(9 - arr2.count) {\n            str += \"Six\"\n        }\n\
    \    }\n    if arr2.count > 9 {\n        for index in 6..<(9 - arr2.count) {\n\
    \            str += \"Seven\"\n        }\n    }\n    if arr2.count > 9 {\n   \
    \     for index in 7..<(9 - arr2.count) {\n            str += \"Eight\"\n    \
    \    }\n    }\n    if arr2.count > 9 {\n        for index in 8..<(9 - arr2.count)\
    \ {\n            str += \"Nine\"\n        }\n    }\n    if arr2.count == 9 {\n\
    \        for index in 0..<(9 - arr2.count) {\n            str += \"One\"\n   \
    \     }\n    }\n    if arr2.count == 9 {\n        for index in 1..<(9 - arr2.count)\
    \ {\n            str += \"Two\"\n        }\n    }\n    if arr2.count == 9 {\n\
    \        for index in 2..<(9 - arr2.count) {\n            str += \"Three\"\n \
    \       }\n    }\n    if arr2.count == 9 {\n        for index in 3..<(9 - arr2.count)\
    \ {\n            str += \"Four\"\n        }\n    }\n    if arr2.count == 9 {\n\
    \        for index in 4..<(9 - arr2.count) {\n            str += \"Five\"\n  \
    \      }\n    }\n    if arr2.count == 9 {\n        for index in 5..<(9 - arr2.count)\
    \ {\n            str += \"Six\"\n        }\n    }\n    if arr2.count == 9 {\n\
    \        for index in 6..<(9 - arr2.count) {\n            str += \"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp97j9x6xv.swift:97:20: error: unterminated string literal\n    \
    \        str += \"\n                   ^\n/tmp/tmp97j9x6xv.swift:117:63: error:\
    \ expected '}' at end of brace statement\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\n                                         \
    \                     ^\n/tmp/tmp97j9x6xv.swift:95:24: note: to match this opening\
    \ '{'\n    if arr2.count == 9 {\n                       ^\n/tmp/tmp97j9x6xv.swift:117:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmp97j9x6xv.swift:14:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmp97j9x6xv.swift:15:16: error: empty collection literal\
    \ requires an explicit type\n    var arr2 = []\n               ^~\n/tmp/tmp97j9x6xv.swift:101:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr == nil {\n\
    \        return nil\n    }\n    \n    var names = [String]()\n    if arr.count\
    \ != 0 {\n        let arr = arr as! [Int]\n        \n        if arr.count < 9\
    \ {\n            for i in 0..<arr.count {\n                names.append(\"One\"\
    )\n            }\n            \n            for i in arr.reversed() {\n      \
    \          switch i {\n                case 1: names.append(\"Two\")\n       \
    \         case 2: names.append(\"Three\")\n                case 3: names.append(\"\
    Four\")\n                case 4: names.append(\"Five\")\n                case\
    \ 5: names.append(\"Six\")\n                case 6: names.append(\"Seven\")\n\
    \                case 7: names.append(\"Eight\")\n                case 8: names.append(\"\
    Nine\")\n                default: break\n                }\n            }\n  \
    \      } else {\n            for i in arr.reversed() {\n                switch\
    \ i {\n                case 1: names.append(\"Twelve\")\n                case\
    \ 2: names.append(\"Thirty\")\n                case 3: names.append(\"Fourty\"\
    )\n                case 4: names.append(\"Fifty\")\n                case 5: names.append(\"\
    Sixty\")\n                case 6: names.append(\"Seventy\")\n                case\
    \ 7: names.append(\"Eighty\")\n                case 8: names.append(\"Ninety\"\
    )\n                default: break\n                }\n            }\n        }\n\
    \    }\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmph02sxchy.swift:15:12: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if arr == nil {\n       ~~~\
    \ ^  ~~~\n/tmp/tmph02sxchy.swift:16:16: error: 'nil' is incompatible with return\
    \ type '[String]'\n        return nil\n               ^\n/tmp/tmph02sxchy.swift:21:23:\
    \ warning: forced cast of '[Int]' to same type has no effect\n        let arr\
    \ = arr as! [Int]\n                      ^~~~~~~~~\n                      \n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var output = \"\"\
    \n    for value in arr {\n        if value < 10 {\n            output += \"\\\
    (nameMap[value])\"\n        } else {\n            output += \"\\(nameMap[value\
    \ - 10]), \\(nameMap[value % 10])\"\n        }\n    }\n    return output.characters.split{$0\
    \ == \",\"}.map{String($0)}.filter({ !$0.isEmpty}).reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqwwn5x90.swift:18:26: error: cannot find 'nameMap' in scope\n \
    \           output += \"\\(nameMap[value])\"\n                         ^~~~~~~\n\
    /tmp/tmpqwwn5x90.swift:20:26: error: cannot find 'nameMap' in scope\n        \
    \    output += \"\\(nameMap[value - 10]), \\(nameMap[value % 10])\"\n        \
    \                 ^~~~~~~\n/tmp/tmpqwwn5x90.swift:20:50: error: cannot find 'nameMap'\
    \ in scope\n            output += \"\\(nameMap[value - 10]), \\(nameMap[value\
    \ % 10])\"\n                                                 ^~~~~~~\n/tmp/tmpqwwn5x90.swift:23:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    return output.characters.split{$0\
    \ == \",\"}.map{String($0)}.filter({ !$0.isEmpty}).reversed()\n              \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.sorted()\n\
    \    let reversed = sorted.reverse()\n    return reversed.map { String($0) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqfz4ewox.swift:16:27: error: cannot use mutating member on immutable\
    \ value: 'sorted' is a 'let' constant\n    let reversed = sorted.reverse()\n \
    \                  ~~~~~~ ^\n/tmp/tmpqfz4ewox.swift:15:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let sorted = arr.sorted()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.sorted(by:\
    \ { $0 < $1 })\n    return arr.isEmpty\n        ? []\n        : sorted\n     \
    \       .reversed()\n            .map {\n                let digit = String($0)\n\
    \                let index = Int(digit) - 1\n                if index >= 1 &&\
    \ index <= 9 {\n                    return [String]([\n                      \
    \  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\n    \
    \                    \"Eight\", \"Nine\", \"Zero\"\n                    ][index])\n\
    \                }\n                return digit\n            }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzro_usu8.swift:22:29: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                let index = Int(digit)\
    \ - 1\n                            ^\n/tmp/tmpzro_usu8.swift:22:29: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \             let index = Int(digit) - 1\n                            ^\n    \
    \                        (          ?? <#default value#>)\n/tmp/tmpzro_usu8.swift:22:29:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                let index = Int(digit) - 1\n                        \
    \    ^\n                                      !\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var str = arr[0] as String\n    for i := 1; i <\
    \ len(arr); i++ {\n        str = str + arr[i] as String + arr[i] as String\n \
    \   }\n    return str.characters.reversed().map { String($0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5meaxja2.swift:19:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp5meaxja2.swift:19:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp5meaxja2.swift:19:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n/tmp/tmp5meaxja2.swift:18:22:\
    \ error: cannot convert value of type 'Int' to type 'String' in coercion\n   \
    \ var str = arr[0] as String\n              ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  if arr.isEmpty {\n\
    \    return []\n  }\n\n  // If there is no digit, just return it.\n  if let i\
    \ = find(arr) {\n    return []\n  }\n\n  let res = [\n    \"\",\n    \"One\",\n\
    \    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n  \
    \  \"Seven\",\n    \"Eight\",\n    \"Nine\"\n  ]\n  var lastDigit: Int = 0\n \
    \ var lastChar: String = \"\"\n  for i in 0 ..< arr.count {\n    lastChar = res[i]\n\
    \    if i == arr.count - 1 {\n      if lastChar == \"\" {\n        lastChar =\
    \ \"One\"\n      }\n    } else if i == 0 && lastChar == \"\" {\n      lastChar\
    \ = \"One\"\n    }\n    let num = arr[i]\n\n    if lastDigit == 0 {\n      if\
    \ num == 1 {\n        lastDigit = 1\n      } else if (num >= 2 && num <= 9) {\n\
    \        lastDigit = num\n      }\n    } else {\n      lastDigit = 0\n      if\
    \ num == 1 {\n        lastChar = \"One\"\n      } else if num >= 2 && num <= 9\
    \ {\n        lastChar = String(num - 2)\n      }\n    }\n    res[i] = lastChar\n\
    \  }\n  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp28k0r2fr.swift:20:14: error: cannot find 'find' in scope\n  if\
    \ let i = find(arr) {\n             ^~~~\n/tmp/tmp28k0r2fr.swift:63:8: error:\
    \ cannot assign through subscript: 'res' is a 'let' constant\n    res[i] = lastChar\n\
    \    ~~~^\n/tmp/tmp28k0r2fr.swift:24:3: note: change 'let' to 'var' to make it\
    \ mutable\n  let res = [\n  ^~~\n  var\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr != nil\
    \ || arr.isEmpty, arr.count == 0 else {\n        return []\n    }\n    \n    var\
    \ result = [String]()\n    \n    for num in arr {\n        \n        if num <\
    \ 10 {\n            result.append(num.description)\n        }\n        \n    \
    \    else {\n            \n            if num % 10 == 0 {\n                result.append(String(num\
    \ / 10))\n            }\n            \n            else {\n                result.append(String(num\
    \ / 10) + String(num % 10))\n            }\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpog3egazt/tmpog3egazt.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ce1172c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ce0e69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ce0e69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ce0e687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpog3egazt                        0x0000555ce2595b21 <unavailable> + 6945

    5    libc.so.6                          0x00002b0ce135e460 __libc_start_main +
    245

    6    tmpog3egazt                        0x0000555ce25955c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    switch arr.count {\n    case 0:\n        return result\n    case 1:\n   \
    \     if arr[0] == 1 {\n            return [\"One\"]\n        } else if arr[0]\
    \ == 2 {\n            return [\"Two\"]\n        } else if arr[0] == 3 {\n    \
    \        return [\"Three\"]\n        } else if arr[0] == 4 {\n            return\
    \ [\"Four\"]\n        } else if arr[0] == 5 {\n            return [\"Five\"]\n\
    \        } else if arr[0] == 6 {\n            return [\"Six\"]\n        } else\
    \ if arr[0] == 7 {\n            return [\"Seven\"]\n        } else if arr[0] ==\
    \ 8 {\n            return [\"Eight\"]\n        } else if arr[0] == 9 {\n     \
    \       return [\"Nine\"]\n        }\n    case 2:\n        if arr[0] > 1 && arr[1]\
    \ > 9 {\n            return arr.reverse()\n        } else if arr[0] > 9 {\n  \
    \          return [\"Nine\", \"One\"]\n        }\n    case 3:\n        if arr[0]\
    \ > 1 && arr[1] > 9 && arr[2] > 9 {\n            return arr.reverse()\n      \
    \  } else if arr[0] > 9 && arr[1] > 9 {\n            return [\"Nine\", \"One\"\
    ]\n        }\n    case 4:\n        if arr[0] > 1 && arr[1] > 9 && arr[2] > 9 &&\
    \ arr[3] > 9 {\n            return arr.reverse()\n        } else if arr[0] > 9\
    \ && arr[1] > 9 && arr[2] > 9 {\n            return [\"Nine\", \"One\"]\n    \
    \    }\n    case 5:\n        if arr[0] > 1 && arr[1] > 9 && arr[2] > 9 && arr[3]\
    \ > 9 && arr[4] > 9 {\n            return arr.reverse()\n        } else if arr[0]\
    \ > 9 && arr[1] > 9 && arr[2] > 9 && arr[3] > 9 {\n            return [\"Nine\"\
    , \"One\"]\n        }\n    case 6:\n        if arr[0] > 1 && arr[1] > 9 && arr[2]\
    \ > 9 && arr[3] > 9 && arr[4] > 9 && arr[5] > 9 {\n            return arr.reverse()\n\
    \        } else if arr[0] > 9 && arr[1] > 9 && arr[2] > 9 && arr[3] > 9 && arr[4]\
    \ > 9 {\n            return [\"Nine\", \"One\"]\n        }\n    case 7:\n    \
    \    if arr[0] > 1 && arr[1] > 9 && arr[2] > 9 && arr[3] > 9 && arr[4] > 9 &&\
    \ arr[5] > 9 && arr[6] > 9 {\n            return arr.reverse()\n        } else\
    \ if arr[0] > 9 && arr[1] > 9 && arr[2] > 9 && arr[3] > 9 && arr[4] > 9 && arr[5]\
    \ > 9 {\n            return [\"Nine\", \"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgm6of_p_.swift:73:29: error: unterminated string literal\n    \
    \        return [\"Nine\", \"\n                            ^\n/tmp/tmpgm6of_p_.swift:93:63:\
    \ error: expected '}' at end of 'switch' statement\nassert(by_length(arr: [9,\
    \ 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                               \
    \                               ^\n/tmp/tmpgm6of_p_.swift:16:22: note: to match\
    \ this opening '{'\n    switch arr.count {\n                     ^\n/tmp/tmpgm6of_p_.swift:93:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmpgm6of_p_.swift:14:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmpgm6of_p_.swift:41:24: error: cannot use mutating\
    \ member on immutable value: 'arr' is a 'let' constant\n            return arr.reverse()\n\
    \                   ~~~ ^\n/tmp/tmpgm6of_p_.swift:41:24: error: cannot convert\
    \ return expression of type '()' to return type '[String]'\n            return\
    \ arr.reverse()\n                   ~~~~^~~~~~~~~\n/tmp/tmpgm6of_p_.swift:47:24:\
    \ error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n\
    \            return arr.reverse()\n                   ~~~ ^\n/tmp/tmpgm6of_p_.swift:47:24:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \            return arr.reverse()\n                   ~~~~^~~~~~~~~\n/tmp/tmpgm6of_p_.swift:53:24:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \            return arr.reverse()\n                   ~~~~^~~~~~~~~\n/tmp/tmpgm6of_p_.swift:53:24:\
    \ error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n\
    \            return arr.reverse()\n                   ~~~ ^\n/tmp/tmpgm6of_p_.swift:59:24:\
    \ error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n\
    \            return arr.reverse()\n                   ~~~ ^\n/tmp/tmpgm6of_p_.swift:59:24:\
    \ error: cannot convert return expres"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return reverse_by(arr)\
    \ { $0 < $1 }.map({ name($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2kp9jwsj.swift:15:12: error: cannot find 'reverse_by' in scope\n\
    \    return reverse_by(arr) { $0 < $1 }.map({ name($0) })\n           ^~~~~~~~~~\n\
    /tmp/tmp2kp9jwsj.swift:15:46: error: cannot find 'name' in scope\n    return reverse_by(arr)\
    \ { $0 < $1 }.map({ name($0) })\n                                            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr_to_str(arr,\
    \ reverse(arr), ones, tens, onesAndTens)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpenel0_ox.swift:15:12: error: cannot find 'arr_to_str' in scope\n\
    \    return arr_to_str(arr, reverse(arr), ones, tens, onesAndTens)\n         \
    \  ^~~~~~~~~~\n/tmp/tmpenel0_ox.swift:15:28: error: cannot find 'reverse' in scope\n\
    \    return arr_to_str(arr, reverse(arr), ones, tens, onesAndTens)\n         \
    \                  ^~~~~~~\n/tmp/tmpenel0_ox.swift:15:42: error: cannot find 'ones'\
    \ in scope\n    return arr_to_str(arr, reverse(arr), ones, tens, onesAndTens)\n\
    \                                         ^~~~\n/tmp/tmpenel0_ox.swift:15:48:\
    \ error: cannot find 'tens' in scope\n    return arr_to_str(arr, reverse(arr),\
    \ ones, tens, onesAndTens)\n                                               ^~~~\n\
    /tmp/tmpenel0_ox.swift:15:54: error: cannot find 'onesAndTens' in scope\n    return\
    \ arr_to_str(arr, reverse(arr), ones, tens, onesAndTens)\n                   \
    \                                  ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    guard !arr.isEmpty,\
    \ arr.count >= 1 else {\n        return []\n    }\n    var arr = arr\n    // sort\
    \ numbers, sort with reverse to get biggest first\n    guard let sorted = arr.sorted\
    \ else {\n        return []\n    }\n    return sorted.reversed().map { $0.description(withAbbreviations:\
    \ false, withOffsets: false) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5n5i4n0s.swift:20:11: error: initializer for conditional binding\
    \ must have Optional type, not '() -> [Int]'\n    guard let sorted = arr.sorted\
    \ else {\n          ^            ~~~~~~~~~~\n/tmp/tmp5n5i4n0s.swift:23:19: error:\
    \ no exact matches in call to instance method 'reversed'\n    return sorted.reversed().map\
    \ { $0.description(withAbbreviations: false, withOffsets: false) }\n         \
    \         ^\n/tmp/tmp5n5i4n0s.swift:23:19: note: found candidate with type '()\
    \ -> [Int]'\n    return sorted.reversed().map { $0.description(withAbbreviations:\
    \ false, withOffsets: false) }\n                  ^\n/tmp/tmp5n5i4n0s.swift:23:19:\
    \ note: found candidate with type '() -> ReversedCollection<[Int]>'\n    return\
    \ sorted.reversed().map { $0.description(withAbbreviations: false, withOffsets:\
    \ false) }\n                  ^\n/tmp/tmp5n5i4n0s.swift:23:39: error: cannot call\
    \ value of non-function type 'String'\n    return sorted.reversed().map { $0.description(withAbbreviations:\
    \ false, withOffsets: false) }\n                                      ^\n"
  stdout: ''
  timestamp: 1660014506
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n\tvar arr2 = arr\n\t\
    var count = 0\n\tfor num in arr2 {\n\t\tif num > 0 && num < 10 {\n\t\t\tif count\
    \ == 0 {\n\t\t\t\tarr2 = append(arr2, One)\n\t\t\t}\n\t\t\tarr2 = append(arr2,\
    \ Two)\n\t\t\tarr2 = append(arr2, Three)\n\t\t\tarr2 = append(arr2, Four)\n\t\t\
    \tarr2 = append(arr2, Five)\n\t\t\tarr2 = append(arr2, Six)\n\t\t\tarr2 = append(arr2,\
    \ Seven)\n\t\t\tarr2 = append(arr2, Eight)\n\t\t\tarr2 = append(arr2, Nine)\n\t\
    \t}\n\t\tcount = count + 1\n\t}\n\tif count == 0 {\n\t\treturn []\n\t}\n\tarr2\
    \ = reverse(arr2)\n\tarr2 = replace_digits(arr2)\n\treturn arr2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf9jajfvd.swift:20:12: error: cannot find 'append' in scope\n  \
    \                              arr2 = append(arr2, One)\n                    \
    \                   ^~~~~~\n/tmp/tmpf9jajfvd.swift:20:25: error: cannot find 'One'\
    \ in scope\n                                arr2 = append(arr2, One)\n       \
    \                                             ^~~\n/tmp/tmpf9jajfvd.swift:22:11:\
    \ error: cannot find 'append' in scope\n                        arr2 = append(arr2,\
    \ Two)\n                               ^~~~~~\n/tmp/tmpf9jajfvd.swift:22:24: error:\
    \ cannot find 'Two' in scope\n                        arr2 = append(arr2, Two)\n\
    \                                            ^~~\n/tmp/tmpf9jajfvd.swift:23:11:\
    \ error: cannot find 'append' in scope\n                        arr2 = append(arr2,\
    \ Three)\n                               ^~~~~~\n/tmp/tmpf9jajfvd.swift:23:24:\
    \ error: cannot find 'Three' in scope\n                        arr2 = append(arr2,\
    \ Three)\n                                            ^~~~~\n/tmp/tmpf9jajfvd.swift:24:11:\
    \ error: cannot find 'append' in scope\n                        arr2 = append(arr2,\
    \ Four)\n                               ^~~~~~\n/tmp/tmpf9jajfvd.swift:24:24:\
    \ error: cannot find 'Four' in scope\n                        arr2 = append(arr2,\
    \ Four)\n                                            ^~~~\n/tmp/tmpf9jajfvd.swift:25:11:\
    \ error: cannot find 'append' in scope\n                        arr2 = append(arr2,\
    \ Five)\n                               ^~~~~~\n/tmp/tmpf9jajfvd.swift:25:24:\
    \ error: cannot find 'Five' in scope\n                        arr2 = append(arr2,\
    \ Five)\n                                            ^~~~\n/tmp/tmpf9jajfvd.swift:26:11:\
    \ error: cannot find 'append' in scope\n                        arr2 = append(arr2,\
    \ Six)\n                               ^~~~~~\n/tmp/tmpf9jajfvd.swift:26:24: error:\
    \ cannot find 'Six' in scope\n                        arr2 = append(arr2, Six)\n\
    \                                            ^~~\n/tmp/tmpf9jajfvd.swift:27:11:\
    \ error: cannot find 'append' in scope\n                        arr2 = append(arr2,"
  stdout: ''
  timestamp: 1660014506
