language: swift
name: HumanEval_76_is_simple_power
results:
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 1 {\n        return false\n    }\n   \
    \ if x <= n {\n        return is_simple_power(x * x, n)\n    } else {\n      \
    \  return is_simple_power(x / n, n + 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0qdwpo3v.swift:26:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x * x, n)\n                           \
    \   ^\n                               x:     n: \n/tmp/tmp0qdwpo3v.swift:28:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x\
    \ / n, n + 1)\n                              ^\n                             \
    \  x:     n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n\n    if n == 1 {\n        return true\n    }\n\n\
    \    if n%x == 0 {\n        return true\n    }\n\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpjlyr02em/tmpjlyr02em.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b885562ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8855325b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8855325988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88553247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjlyr02em                        0x000055a50fdc5246 <unavailable> + 4678

    5    libc.so.6                          0x00002b885581a460 __libc_start_main +
    245

    6    tmpjlyr02em                        0x000055a50fdc4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if (n == 1) { return\
    \ true }\n    if x < (1<<(n-1)) || x > (1<<n) {\n        return false\n    }\n\
    \    // this part can be optimized by remembering the last n results and avoiding\
    \ unnecessary multiplications\n    var last_n_1 = is_simple_power(x, n-1)\n  \
    \  var last_n_2 = is_simple_power(x, n-2)\n    return last_n_1 && last_n_2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpioh8sasy.swift:24:35: error: missing argument labels 'x:n:' in\
    \ call\n    var last_n_1 = is_simple_power(x, n-1)\n                         \
    \         ^\n                                   x: n: \n/tmp/tmpioh8sasy.swift:25:35:\
    \ error: missing argument labels 'x:n:' in call\n    var last_n_2 = is_simple_power(x,\
    \ n-2)\n                                  ^\n                                \
    \   x: n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var p = 2\n   \
    \ while p < n {\n        if n%p == 0 {\n            return false\n        }\n\
    \        p += 1\n    }\n    return n%p == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp33mqco4p/tmp33mqco4p.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b131aa17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b131a70eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b131a70e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b131a70d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33mqco4p                        0x00005608c55a342c <unavailable> + 5164

    5    libc.so.6                          0x00002b131ac03460 __libc_start_main +
    245

    6    tmp33mqco4p                        0x00005608c55a2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_recursive(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8i2yy0rg.swift:19:12: error: cannot find 'is_simple_power_recursive'\
    \ in scope\n    return is_simple_power_recursive(x, n)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let a = Int(x)\n\
    \    let b = Int(n)\n    return ((a & (a - b)) & (a - b)) == b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpnuxyjobd/tmpnuxyjobd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15758a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1575598b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1575598988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15755977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnuxyjobd                        0x000055fb5b1992e6 <unavailable> + 4838

    5    libc.so.6                          0x00002b1575a8d460 __libc_start_main +
    245

    6    tmpnuxyjobd                        0x000055fb5b198f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x<=0 || n<1\
    \ {\n        return false\n    }\n    let base: Double = Double(x)\n    let power:\
    \ Double = Double(n)\n    if base*power == x {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphikih_xu.swift:24:19: error: binary operator '==' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if base*power == x {\n       ~~~~~~~~~~\
    \ ^  ~\n/tmp/tmphikih_xu.swift:24:19: note: overloads for '==' exist with these\
    \ partially matching parameter lists: (Int, Int)\n    if base*power == x {\n \
    \                 ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp2wkubtbg/tmp2wkubtbg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada12b60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada12857b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada12857988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada128567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2wkubtbg                        0x00005582d6b08231 <unavailable> + 4657

    5    libc.so.6                          0x00002ada12d4c460 __libc_start_main +
    245

    6    tmp2wkubtbg                        0x00005582d6b07e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978955
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    guard n >= 1 else\
    \ {\n        return false\n    }\n    return is_square(x) == true && is_power_of_two(n)\
    \ && is_power_of_two(int(x)) && is_equal_to_power_of_two(n, n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpinpsipit.swift:22:12: error: cannot find 'is_square' in scope\n\
    \    return is_square(x) == true && is_power_of_two(n) && is_power_of_two(int(x))\
    \ && is_equal_to_power_of_two(n, n)\n           ^~~~~~~~~\n/tmp/tmpinpsipit.swift:22:36:\
    \ error: cannot find 'is_power_of_two' in scope\n    return is_square(x) == true\
    \ && is_power_of_two(n) && is_power_of_two(int(x)) && is_equal_to_power_of_two(n,\
    \ n)\n                                   ^~~~~~~~~~~~~~~\n/tmp/tmpinpsipit.swift:22:58:\
    \ error: cannot find 'is_power_of_two' in scope\n    return is_square(x) == true\
    \ && is_power_of_two(n) && is_power_of_two(int(x)) && is_equal_to_power_of_two(n,\
    \ n)\n                                                         ^~~~~~~~~~~~~~~\n\
    /tmp/tmpinpsipit.swift:22:74: error: cannot find 'int' in scope\n    return is_square(x)\
    \ == true && is_power_of_two(n) && is_power_of_two(int(x)) && is_equal_to_power_of_two(n,\
    \ n)\n                                                                       \
    \  ^~~\n/tmp/tmpinpsipit.swift:22:85: error: cannot find 'is_equal_to_power_of_two'\
    \ in scope\n    return is_square(x) == true && is_power_of_two(n) && is_power_of_two(int(x))\
    \ && is_equal_to_power_of_two(n, n)\n                                        \
    \                                            ^~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let x = Int(x)\n\
    \    let n = Int(n)\n    if x == 1 {\n        return n == 1\n    }\n    return\
    \ (x == n*n) && (x == n*n*n) && is_simple_power(x, n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_jmpoxc8.swift:24:57: error: missing argument labels 'x:n:' in\
    \ call\n    return (x == n*n) && (x == n*n*n) && is_simple_power(x, n-1)\n   \
    \                                                     ^\n                    \
    \                                     x: n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n  // TODO: check assertion\n\
    \  if n <= 1 {\n    return true\n  }\n\n  if n%x == 0 {\n    return true\n  }\n\
    \n  return is_simple_power(x, n/2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmz1l_ap6.swift:28:25: error: missing argument labels 'x:n:' in\
    \ call\n  return is_simple_power(x, n/2)\n                        ^\n        \
    \                 x: n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x % n != 0 {\n        return false\n    }\n    if x == 1 {\n        return is_simple_power(x,\
    \ n+1)\n    }\n    return is_simple_power(x//n, n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprcs2m1kx.swift:32:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmprcs2m1kx.swift:31:27: note: to match this opening '('\n    return is_simple_power(x//n,\
    \ n)\n                          ^\n/tmp/tmprcs2m1kx.swift:29:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n+1)\n   \
    \                           ^\n                               x: n: \n/tmp/tmprcs2m1kx.swift:31:28:\
    \ error: missing argument label 'x:' in call\n    return is_simple_power(x//n,\
    \ n)\n                           ^\n                           x: \n/tmp/tmprcs2m1kx.swift:31:29:\
    \ error: missing argument for parameter 'n' in call\n    return is_simple_power(x//n,\
    \ n)\n                            ^\n                            , n: <#Int#>\n\
    /tmp/tmprcs2m1kx.swift:18:6: note: 'is_simple_power(x:n:)' declared here\nfunc\
    \ is_simple_power(x: Int, n: Int) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let r = n\n   \
    \ for _ in 0..<Int(Int(n) / x) {\n        r = x * r\n    }\n    return r == x\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpotef3wux.swift:21:9: error: cannot assign to value: 'r' is a 'let'\
    \ constant\n        r = x * r\n        ^\n/tmp/tmpotef3wux.swift:19:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let r = n\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // TODO: Write\
    \ your code here\n    if x == 1 {\n        return true\n    }\n    if n%x == 0\
    \ {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmptzcxbeki/tmptzcxbeki.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b958ce6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b958cb63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b958cb63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b958cb627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptzcxbeki                        0x000055cb3a528246 <unavailable> + 4678

    5    libc.so.6                          0x00002b958d058460 __libc_start_main +
    245

    6    tmptzcxbeki                        0x000055cb3a527ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n **\
    \ Int(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpta66txj3.swift:19:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    switch {\n    case\
    \ n == 1 -> x == 1\n    case n == 2 -> x == 2\n    case n == 3 -> x == 8\n   \
    \ case n == 4 -> x == 2\n    case n == 5 -> x == 8\n    case n == 6 -> x == 1\n\
    \    case n == 7 -> x == 8\n    case n == 8 -> x == 2\n    case n == 9 -> x ==\
    \ 9\n    case n == 10 -> x == 10\n    case n == 11 -> x == 11\n    case n == 12\
    \ -> x == 12\n    case n == 13 -> x == 13\n    case n == 14 -> x == 14\n    case\
    \ n == 15 -> x == 15\n    case n == 16 -> x == 16\n    case n == 17 -> x == 17\n\
    \    case n == 18 -> x == 18\n    case n == 19 -> x == 19\n    case n == 20 ->\
    \ x == 20\n    case n == 21 -> x == 21\n    case n == 22 -> x == 22\n    case\
    \ n%2==1 -> x%2==1\n    case n%2==0 -> x%2==0\n    default: return false\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmu5t0ys7.swift:19:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n/tmp/tmpmu5t0ys7.swift:20:26: error: expected ':'\
    \ after 'case'\n    case n == 1 -> x == 1\n                         ^\n/tmp/tmpmu5t0ys7.swift:21:26:\
    \ error: expected ':' after 'case'\n    case n == 2 -> x == 2\n              \
    \           ^\n/tmp/tmpmu5t0ys7.swift:22:26: error: expected ':' after 'case'\n\
    \    case n == 3 -> x == 8\n                         ^\n/tmp/tmpmu5t0ys7.swift:23:26:\
    \ error: expected ':' after 'case'\n    case n == 4 -> x == 2\n              \
    \           ^\n/tmp/tmpmu5t0ys7.swift:24:26: error: expected ':' after 'case'\n\
    \    case n == 5 -> x == 8\n                         ^\n/tmp/tmpmu5t0ys7.swift:25:26:\
    \ error: expected ':' after 'case'\n    case n == 6 -> x == 1\n              \
    \           ^\n/tmp/tmpmu5t0ys7.swift:26:26: error: expected ':' after 'case'\n\
    \    case n == 7 -> x == 8\n                         ^\n/tmp/tmpmu5t0ys7.swift:27:26:\
    \ error: expected ':' after 'case'\n    case n == 8 -> x == 2\n              \
    \           ^\n/tmp/tmpmu5t0ys7.swift:28:26: error: expected ':' after 'case'\n\
    \    case n == 9 -> x == 9\n                         ^\n/tmp/tmpmu5t0ys7.swift:29:28:\
    \ error: expected ':' after 'case'\n    case n == 10 -> x == 10\n            \
    \               ^\n/tmp/tmpmu5t0ys7.swift:30:28: error: expected ':' after 'case'\n\
    \    case n == 11 -> x == 11\n                           ^\n/tmp/tmpmu5t0ys7.swift:31:28:\
    \ error: expected ':' after 'case'\n    case n == 12 -> x == 12\n            \
    \               ^\n/tmp/tmpmu5t0ys7.swift:32:28: error: expected ':' after 'case'\n\
    \    case n == 13 -> x == 13\n                           ^\n/tmp/tmpmu5t0ys7.swift:33:28:\
    \ error: expected ':' after 'case'\n    case n == 14 -> x == 14\n            \
    \               ^\n/tmp/tmpmu5t0ys7.swift:34:28: error: expected ':' after 'case'\n\
    \    case n == 15 -> x == 15\n                           ^\n/tmp/tmpmu5t0ys7.swift:35:28:\
    \ error: expected ':' after 'case'\n    case n == 16 -> x == 16\n            \
    \               ^\n/tmp/tmpmu5t0ys7.swift:36:28: error: expected ':' after 'ca"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 0 {\n \
    \       return n == 1\n    }\n    if n % x == 0 {\n        let d = n / x\n   \
    \     return is_simple_power(x, d) == is_simple_power(x, n-1)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp39rzs_lf.swift:24:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, d) == is_simple_power(x, n-1)\n    \
    \                          ^\n                               x: n: \n/tmp/tmp39rzs_lf.swift:24:56:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ d) == is_simple_power(x, n-1)\n                                            \
    \           ^\n                                                        x: n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    switch n {\n  \
    \  case 2:\n        return is_pow(x, 2)\n    case 4:\n        return is_pow(x,\
    \ 4)\n    case 8:\n        return is_pow(x, 8)\n    case 16:\n        return is_pow(x,\
    \ 16)\n    case 32:\n        return is_pow(x, 32)\n    case 64:\n        return\
    \ is_pow(x, 64)\n    case 128:\n        return is_pow(x, 128)\n    case 256:\n\
    \        return is_pow(x, 256)\n    case 512:\n        return is_pow(x, 512)\n\
    \    case 1024:\n        return is_pow(x, 1024)\n    case 2048:\n        return\
    \ is_pow(x, 2048)\n    case 4096:\n        return is_pow(x, 4096)\n    case 8192:\n\
    \        return is_pow(x, 8192)\n    case 16384:\n        return is_pow(x, 16384)\n\
    \    case 32768:\n        return is_pow(x, 32768)\n    case 65536:\n        return\
    \ is_pow(x, 65536)\n    case 131072:\n        return is_pow(x, 131072)\n    case\
    \ 262144:\n        return is_pow(x, 262144)\n    case 524288:\n        return\
    \ is_pow(x, 524288)\n    case 1048576:\n        return is_pow(x, 1048576)\n  \
    \  case 2097152:\n        return is_pow(x, 2097152)\n    case 4194304:\n     \
    \   return is_pow(x, 4194304)\n    case 8388608:\n        return is_pow(x, 8388608)\n\
    \    case 16777216:\n        return is_pow(x, 16777216)\n    case 33554432:\n\
    \        return is_pow(x, 33554432)\n    case 67108864:\n        return is_pow(x,\
    \ 67108864)\n    case 134217728:\n        return is_pow(x, 134217728)\n    case\
    \ 268435456:\n        return is_pow(x, 268435456)\n    case 536870912:\n     \
    \   return is_pow(x, 536870912)\n    case 1073741824:\n        return is_pow(x,\
    \ 1073741824)\n    case 2147483648:\n        return is_pow(x, 2147483648)\n  \
    \  case 4294967296:\n        return is_pow(x, 4294967296)\n    case 8589934592:\n\
    \        return is_pow(x, 8589934592)\n    case 17179869184:\n        return is_pow(x,\
    \ 17179869184)\n    case 34359738368:\n        return is_pow(x, 34359738368)\n\
    \    case 68719476736:\n        return is_pow(x, 68719476736)\n    case 13743895347216:\n\
    \        return is_pow(x, 137438953472\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpi9_mdbl1.swift:94:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpi9_mdbl1.swift:93:22: note: to match this opening '('\n        return\
    \ is_pow(x, 137438953472\n                     ^\n/tmp/tmpi9_mdbl1.swift:118:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpi9_mdbl1.swift:18:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpi9_mdbl1.swift:21:16:\
    \ error: cannot find 'is_pow' in scope\n        return is_pow(x, 2)\n        \
    \       ^~~~~~\n/tmp/tmpi9_mdbl1.swift:23:16: error: cannot find 'is_pow' in scope\n\
    \        return is_pow(x, 4)\n               ^~~~~~\n/tmp/tmpi9_mdbl1.swift:25:16:\
    \ error: cannot find 'is_pow' in scope\n        return is_pow(x, 8)\n        \
    \       ^~~~~~\n/tmp/tmpi9_mdbl1.swift:27:16: error: cannot find 'is_pow' in scope\n\
    \        return is_pow(x, 16)\n               ^~~~~~\n/tmp/tmpi9_mdbl1.swift:29:16:\
    \ error: cannot find 'is_pow' in scope\n        return is_pow(x, 32)\n       \
    \        ^~~~~~\n/tmp/tmpi9_mdbl1.swift:31:16: error: cannot find 'is_pow' in\
    \ scope\n        return is_pow(x, 64)\n               ^~~~~~\n/tmp/tmpi9_mdbl1.swift:33:16:\
    \ error: cannot find 'is_pow' in scope\n        return is_pow(x, 128)\n      \
    \         ^~~~~~\n/tmp/tmpi9_mdbl1.swift:35:16: error: cannot find 'is_pow' in\
    \ scope\n        return is_pow(x, 256)\n               ^~~~~~\n/tmp/tmpi9_mdbl1.swift:37:16:\
    \ error: cannot find 'is_pow' in scope\n        return is_pow(x, 512)\n      \
    \         ^~~~~~\n/tmp/tmpi9_mdbl1.swift:39:16: error: cannot find 'is_pow' in\
    \ scope\n        return is_pow(x, 1024)\n               ^~~~~~\n/tmp/tmpi9_mdbl1.swift:41:16:\
    \ error: cannot find 'is_pow' in scope\n        return is_pow(x, 2048)\n     \
    \          ^~~~~~\n/tmp/tmpi9_mdbl1.swift:43:16: error: cannot find 'is_pow' in\
    \ scope\n        return is_pow(x, 4096)\n               ^~~~~~\n/tmp/tmpi9_mdbl1.swift:45:16:\
    \ error: cannot find 'is_pow' in scope\n        return is_pow(x, 8192)\n     \
    \    "
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n < 2 {\n  \
    \      return false\n    }\n    let x_pow_n = x * n\n    if x == x_pow_n {\n \
    \       return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpg32epm5y/tmpg32epm5y.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6d5034c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6d4d2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6d4d2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6d4d2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg32epm5y                        0x0000560a023a61b6 <unavailable> + 4534

    5    libc.so.6                          0x00002af6d5220460 __libc_start_main +
    245

    6    tmpg32epm5y                        0x0000560a023a5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if (x%n == 0) {\n\
    \        let res = is_simple_power(x, n-1)\n        if res {\n            return\
    \ true\n        }\n        else {\n            return false\n        }\n    }\
    \ else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9e6djc_8.swift:20:34: error: missing argument labels 'x:n:' in\
    \ call\n        let res = is_simple_power(x, n-1)\n                          \
    \       ^\n                                  x: n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_power_of_two(x)\
    \ && is_power_of_two(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfa0j_wah.swift:19:12: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n)\n           ^~~~~~~~~~~~~~~\n\
    /tmp/tmpfa0j_wah.swift:19:34: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n)\n                       \
    \          ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n//2)\n    }\n    return is_simple_power(x, n//2) && is_simple_power(x*x, n/2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzyubvs_l.swift:24:5: error: expected ')' in expression list\n \
    \   }\n    ^\n/tmp/tmpzyubvs_l.swift:23:31: note: to match this opening '('\n\
    \        return is_simple_power(x, n//2)\n                              ^\n/tmp/tmpzyubvs_l.swift:26:1:\
    \ error: expected ')' in expression list\n}\n^\n/tmp/tmpzyubvs_l.swift:25:27:\
    \ note: to match this opening '('\n    return is_simple_power(x, n//2) && is_simple_power(x*x,\
    \ n/2)\n                          ^\n/tmp/tmpzyubvs_l.swift:23:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n//2)\n  \
    \                            ^\n                               x: n: \n/tmp/tmpzyubvs_l.swift:25:27:\
    \ error: missing argument labels 'x:n:' in call\n    return is_simple_power(x,\
    \ n//2) && is_simple_power(x*x, n/2)\n                          ^\n          \
    \                 x: n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n >= 1 {\n \
    \       let d = n % n\n        return x == x * (n//n) * n//n\n    } else {\n \
    \       return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvovnlxyp.swift:22:5: error: expected ')' in expression list\n \
    \   } else {\n    ^\n/tmp/tmpvovnlxyp.swift:21:25: note: to match this opening\
    \ '('\n        return x == x * (n//n) * n//n\n                        ^\n/tmp/tmpvovnlxyp.swift:20:13:\
    \ warning: initialization of immutable value 'd' was never used; consider replacing\
    \ with assignment to '_' or removing it\n        let d = n % n\n        ~~~~^\n\
    \        _\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return ((1<<(n-1))*((1<<(n-1))-1))&(x)\
    \ == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp5pzzui73/tmp5pzzui73.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2718c5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2718956b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2718956988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27189557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5pzzui73                        0x000055f4ffdc31b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b2718e4b460 __libc_start_main +
    245

    6    tmp5pzzui73                        0x000055f4ffdc2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == 1\n\
    \        || (n == 1 && is_simple_power(x, n-1))\n        || (n == x && is_simple_power(x,\
    \ n-1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxc5x_ok9.swift:20:38: error: missing argument labels 'x:n:' in\
    \ call\n        || (n == 1 && is_simple_power(x, n-1))\n                     \
    \                ^\n                                      x: n: \n/tmp/tmpxc5x_ok9.swift:21:38:\
    \ error: missing argument labels 'x:n:' in call\n        || (n == x && is_simple_power(x,\
    \ n-1))\n                                     ^\n                            \
    \          x: n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n  assert(n >= 0)\n\
    \  \n  // if n is zero, x is simple\n  if n == 0 {\n    return true\n  }\n  \n\
    \  // if n is 1 or less, x is power of 1\n  if n == 1 {\n    return x == 1\n \
    \ }\n  \n  // if n is 2, x is power of 2\n  if n == 2 {\n    return x == 1\n \
    \ }\n  \n  // if n is 3, x is power of 3\n  if n == 3 {\n    return x == 1\n \
    \ }\n  \n  // if n is 4, x is power of 4\n  if n == 4 {\n    return x == 1\n \
    \ }\n  \n  // if n is 5, x is power of 5\n  if n == 5 {\n    return x == 1\n \
    \ }\n  \n  // if n is greater than 5, x is power of n\n  return pow(x, n, n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp40pszosz.swift:52:10: error: cannot find 'pow' in scope\n  return\
    \ pow(x, n, n)\n         ^~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n <= 0 {\n \
    \       return false\n    }\n\n    if n == 1 {\n        return true\n    }\n \
    \   if x == 1 {\n        return true\n    }\n\n    if x&1 == 1 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n\n    return is_simple_power(x*x, n-1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvunep586.swift:31:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpvunep586.swift:34:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x*x, n-1)\n\
    \                          ^\n                           x:   n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return n%x == 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpl9k58o2n/tmpl9k58o2n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac176c3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac176935b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac176935988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1769347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl9k58o2n                        0x00005602ca124246 <unavailable> + 4678

    5    libc.so.6                          0x00002ac176e2a460 __libc_start_main +
    245

    6    tmpl9k58o2n                        0x00005602ca123ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var product = n\n\
    \    for _ in 0..<x {\n        product *= n\n    }\n    return product == x\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpyo8evtg4/tmpyo8evtg4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b263710bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2636e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2636e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2636e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyo8evtg4                        0x000056318d251336 <unavailable> + 4918

    5    libc.so.6                          0x00002b26372f7460 __libc_start_main +
    245

    6    tmpyo8evtg4                        0x000056318d250fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return n == 0\n\
    \        ? true\n        : n % x == 0 && is_simple_power(x, n-1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpolplpzi0.swift:21:40: error: missing argument labels 'x:n:' in\
    \ call\n        : n % x == 0 && is_simple_power(x, n-1)\n                    \
    \                   ^\n                                        x: n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x < 0 {\n  \
    \      return false\n    }\n    if n < 1 {\n        return true\n    }\n    if\
    \ x == 1 {\n        return true\n    }\n    if x < n {\n        return is_simple_power(x,\
    \ n/2)\n    } else {\n        return is_simple_power(x, 3*n-1)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpivo215bd.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpivo215bd.swift:31:31: error:\
    \ missing argument labels 'x:n:' in call\n        return is_simple_power(x, 3*n-1)\n\
    \                              ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var temp = x\n\
    \    if temp < 1 {\n        return false\n    }\n    if n%temp != 0 {\n      \
    \  return false\n    }\n    var power = n\n    for _ in 0..<n {\n        temp\
    \ = temp * x\n        power = power * n\n    }\n    return temp == power\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp49aze2zd/tmp49aze2zd.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74355ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74352d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74352d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74352d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49aze2zd                        0x000055ea30371336 <unavailable> + 4918

    5    libc.so.6                          0x00002b74357c9460 __libc_start_main +
    245

    6    tmp49aze2zd                        0x000055ea30370fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return pow(x, n)\
    \ == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmi0_e3qx.swift:19:12: error: cannot find 'pow' in scope\n    return\
    \ pow(x, n) == x\n           ^~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n\n    // Find a power of n that's smaller than x\n\
    \    var power = x\n    for _ in 1...n {\n        if power%n == 0 {\n        \
    \    return false\n        }\n        power *= n\n    }\n\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp2iqm7pyr/tmp2iqm7pyr.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0031e3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0031b31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0031b31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0031b307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2iqm7pyr                        0x000055940ad25336 <unavailable> + 4918

    5    libc.so.6                          0x00002b0032026460 __libc_start_main +
    245

    6    tmp2iqm7pyr                        0x000055940ad24fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    guard x > 0 &&\
    \ n > 0 else {\n        return false\n    }\n\n    // x mod n = 1\n    // n**x\
    \ mod n = x\n    // x mod n**0 = 1\n    // x mod n**1 = x\n    // x mod n**2 =\
    \ x mod n\n    // x mod n**3 = x mod n mod n\n    // ...\n    // x mod n**(n-1)\
    \ = x mod n mod n\n    // x mod n**n = 1 mod n\n    //\n    // So, use prime number\
    \ theory to get all numbers mod n\n    // and check if x is equal to any of them\n\
    \    let primeModN: Int = Int.max\n    while x > primeModN {\n        primeModN\
    \ *= primeModN\n    }\n\n    return (x % n == 1 && n % x == 0) ||\n        ((x\
    \ % n == 1 && n % x == 1) || is_simple_power(x % n, n))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxu_5hjud.swift:37:19: error: left side of mutating operator isn't\
    \ mutable: 'primeModN' is a 'let' constant\n        primeModN *= primeModN\n \
    \       ~~~~~~~~~ ^\n/tmp/tmpxu_5hjud.swift:35:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let primeModN: Int = Int.max\n    ^~~\n    var\n/tmp/tmpxu_5hjud.swift:41:55:\
    \ error: missing argument labels 'x:n:' in call\n        ((x % n == 1 && n % x\
    \ == 1) || is_simple_power(x % n, n))\n                                      \
    \                ^\n                                                       x:\
    \     n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x <= n {\n \
    \       return false\n    }\n    let r = n % x\n    guard r == 0 else { return\
    \ true }\n    for i in 1...n {\n        if x == i * n {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpiesh4v82/tmpiesh4v82.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3aa3655c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3aa334cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3aa334c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3aa334b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiesh4v82                        0x000055c7e88d33b1 <unavailable> + 5041

    5    libc.so.6                          0x00002b3aa3841460 __libc_start_main +
    245

    6    tmpiesh4v82                        0x000055c7e88d2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 { return\
    \ n == 1 }\n    if x == n { return n == 1 }\n\n    if n%x == 0 {\n        return\
    \ is_simple_power(x, n-1)\n    } else {\n        return false\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpp7umcraa.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n  var a = x.powi(n)\n\
    \  var b = x.powi(n+1)\n  return a == b\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpashj7jbt.swift:19:13: error: value of type 'Int' has no member\
    \ 'powi'\n  var a = x.powi(n)\n          ~ ^~~~\n/tmp/tmpashj7jbt.swift:20:13:\
    \ error: value of type 'Int' has no member 'powi'\n  var b = x.powi(n+1)\n   \
    \       ~ ^~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let exp = log2(n)\n\
    \    return exp == Int(x) && exp%x == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpafgh343r.swift:19:15: error: cannot find 'log2' in scope\n    let\
    \ exp = log2(n)\n              ^~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var a = x // set\
    \ a\n    var b = n // set b\n    if a < 0 {\n        return false\n    }\n   \
    \ if b < 0 {\n        return true\n    }\n    \n    while b > 0 {\n        var\
    \ c = a // set c\n        if b%2 == 1 {\n            c = a*a\n        }\n    \
    \    a = c\n        b = b/2\n    }\n    return a == x\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpau6ejq8m/tmpau6ejq8m.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a47e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a44deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a44de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a44dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpau6ejq8m                        0x000055da864c3246 <unavailable> + 4678

    5    libc.so.6                          0x00002ba2a49d3460 __libc_start_main +
    245

    6    tmpau6ejq8m                        0x000055da864c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let s = pow(x,\
    \ n)\n    return (s == x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpn7ab8wf1.swift:19:13: error: cannot find 'pow' in scope\n    let\
    \ s = pow(x, n)\n            ^~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // YOUR CODE HERE\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: '/tmp/tmp2o4tg9ur.swift:20:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let x = abs(x)\n\
    \    let n = abs(n)\n    let ln = log2(Double(n))\n    let s = ln + ln\n    return\
    \ x <= n && (n - 1) * (n - 1) <= s\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp530lupx6.swift:21:14: error: cannot find 'log2' in scope\n    let\
    \ ln = log2(Double(n))\n             ^~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    guard n > 0 else\
    \ {\n        return false\n    }\n    guard n == pow(x, Int(ceil(n))) else {\n\
    \        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpz61d4865.swift:22:16: error: cannot find 'pow' in scope\n    guard\
    \ n == pow(x, Int(ceil(n))) else {\n               ^~~\n/tmp/tmpz61d4865.swift:22:27:\
    \ error: cannot find 'ceil' in scope\n    guard n == pow(x, Int(ceil(n))) else\
    \ {\n                          ^~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n&n == 0 {\n        return true\n    }\n  \
    \  if x == 1 {\n        return true\n    }\n    if x % n == 0 {\n        return\
    \ true\n    }\n    if n % x == 0 {\n        return true\n    }\n    if x != 1\
    \ && x != n {\n        return false\n    }\n    if n % x == 1 {\n        return\
    \ false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpbnr40wzz/tmpbnr40wzz.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b92a91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b92788b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b92788988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b927877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbnr40wzz                        0x00005645850534a7 <unavailable> + 5287

    5    libc.so.6                          0x00002b7b92c7d460 __libc_start_main +
    245

    6    tmpbnr40wzz                        0x0000564585052ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n%2 == 0 {\n        if is_simple_power(x/(2.0),\
    \ n-1) == true {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpx9jiba2o.swift:29:27: error: missing argument labels 'x:n:' in\
    \ call\n        if is_simple_power(x/(2.0), n-1) == true {\n                 \
    \         ^\n                           x:       n: \n/tmp/tmpx9jiba2o.swift:29:31:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        if is_simple_power(x/(2.0), n-1) == true {\n                        \
    \      ^\n                             Int( )\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var result = true\n\
    \    // TODO: Use `if n**x = x` here\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmplzhszu34/tmplzhszu34.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b320114fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3200e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3200e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3200e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplzhszu34                        0x000055af67afa231 <unavailable> + 4657

    5    libc.so.6                          0x00002b320133b460 __libc_start_main +
    245

    6    tmplzhszu34                        0x000055af67af9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return n == x &&\
    \ n > 0 && n % x == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpnx43lqr6/tmpnx43lqr6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff3ea03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff3e6fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff3e6fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff3e6f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnx43lqr6                        0x000055a065717246 <unavailable> + 4678

    5    libc.so.6                          0x00002aff3ebef460 __libc_start_main +
    245

    6    tmpnx43lqr6                        0x000055a065716ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var power = 1\n\
    \    for _ in 0..<n {\n        if (x * power == x) {\n            return true\n\
    \        }\n        power *= x\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8xumiykk/tmp8xumiykk.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d24277c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d23f6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d23f6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d23f6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8xumiykk                        0x0000557c9b16e3b1 <unavailable> + 5041

    5    libc.so.6                          0x00002b6d24463460 __libc_start_main +
    245

    6    tmp8xumiykk                        0x0000557c9b16dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    switch n {\n  \
    \  case 0: return true\n    case 1: return x % n == 0\n    case 2: return (x %\
    \ n) == 0\n    case 3: return (x % n) == 0 && is_simple_power(x, n/2)\n    case\
    \ 4: return (x % n) == 0 && is_simple_power(x, n/2)\n    case 5: return (x % n)\
    \ == 0 && is_simple_power(x, n/2)\n    case 6: return (x % n) == 0 && is_simple_power(x,\
    \ n/2)\n    case 7: return (x % n) == 0 && is_simple_power(x, n/2)\n    case 8:\
    \ return (x % n) == 0 && is_simple_power(x, n/2)\n    case 9: return (x % n) ==\
    \ 0 && is_simple_power(x, n/2)\n    case 10: return (x % n) == 0 && is_simple_power(x,\
    \ n/2)\n    case 11: return (x % n) == 0 && is_simple_power(x, n/2)\n    case\
    \ 12: return (x % n) == 0 && is_simple_power(x, n/2)\n    case 13: return (x %\
    \ n) == 0 && is_simple_power(x, n/2)\n    case 14: return (x % n) == 0 && is_simple_power(x,\
    \ n/2)\n    case 15: return (x % n) == 0 && is_simple_power(x, n/2)\n    case\
    \ 16: return (x % n) == 0 && is_simple_power(x, n/2)\n    case 17: return (x %\
    \ n) == 0 && is_simple_power(x, n/2)\n    case 18: return (x % n) == 0 && is_simple_power(x,\
    \ n/2)\n    case 19: return (x % n) == 0 && is_simple_power(x, n/2)\n    case\
    \ 20: return (x % n) == 0 && is_simple_power(x, n/2)\n    case 21: return (x %\
    \ n) == 0 && is_simple_power(x, n/2)\n    case 22: return (x % n) == 0 && is_simple_power(x,\
    \ n/2)\n    case 23: return (x % n) == 0 && is_simple_power(x, n/2)\n    case\
    \ 24: return (x % n) == 0 && is_simple_power(x, n/2)\n    case 25: return (x %\
    \ n) == 0 && is_simple_power(x, n/2)\n    case 26: return (x % n) == 0 && is_simple_power(x,\
    \ n/2)\n    case 27: return (x % n) == 0 && is_simple_power(x, n/2)\n    case\
    \ 28: return (x % n) == 0 && is_simple_power(x, n/2)\n    case 29: return (x %\
    \ n) == 0 && is_simple_power(x, n/2)\n    case 30: return (x % n) == 0 && is_simple_power(x,\
    \ n/2)\n    case 31: return (x % n) == 0 && is_simple_power(x, n/2)\n    case\
    \ 32: return (x % n) == 0 && is_simple_power(x, n/2)\n    case 33: return (x \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2x985nch.swift:54:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp2x985nch.swift:53:21: note: to match this opening '('\n    case 33:\
    \ return (x \n                    ^\n/tmp/tmp2x985nch.swift:78:45: error: expected\
    \ '}' at end of brace statement\nassert(is_simple_power(x: 1, n: 12) == true)\n\
    \                                            ^\n/tmp/tmp2x985nch.swift:18:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmp2x985nch.swift:23:51:\
    \ error: missing argument labels 'x:n:' in call\n    case 3: return (x % n) ==\
    \ 0 && is_simple_power(x, n/2)\n                                             \
    \     ^\n                                                   x: n: \n/tmp/tmp2x985nch.swift:24:51:\
    \ error: missing argument labels 'x:n:' in call\n    case 4: return (x % n) ==\
    \ 0 && is_simple_power(x, n/2)\n                                             \
    \     ^\n                                                   x: n: \n/tmp/tmp2x985nch.swift:25:51:\
    \ error: missing argument labels 'x:n:' in call\n    case 5: return (x % n) ==\
    \ 0 && is_simple_power(x, n/2)\n                                             \
    \     ^\n                                                   x: n: \n/tmp/tmp2x985nch.swift:26:51:\
    \ error: missing argument labels 'x:n:' in call\n    case 6: return (x % n) ==\
    \ 0 && is_simple_power(x, n/2)\n                                             \
    \     ^\n                                                   x: n: \n/tmp/tmp2x985nch.swift:27:51:\
    \ error: missing argument labels 'x:n:' in call\n    case 7: return (x % n) ==\
    \ 0 && is_simple_power(x, n/2)\n                                             \
    \     ^\n                                                   x: n: \n/tmp/tmp2x985nch.swift:28:51:\
    \ error: missing argument labels 'x:n:' in call\n    case 8: return (x % n) ==\
    \ 0 && is_simple_power(x, n/2)\n                                             \
    \     ^\n                                                   x: n: \n/tmp/tmp2x985nch.swift:29:51:\
    \ error: missing argument labels 'x:n:' in call"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n  if n == 0 {\n   \
    \ return true\n  }\n  return (x**int) % (Int)n == x\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp444bje86.swift:22:26: error: consecutive statements on a line must\
    \ be separated by ';'\n  return (x**int) % (Int)n == x\n                     \
    \    ^\n                         ;\n/tmp/tmp444bje86.swift:22:12: error: cannot\
    \ find operator '**' in scope\n  return (x**int) % (Int)n == x\n           ^~\n\
    /tmp/tmp444bje86.swift:22:14: error: cannot find 'int' in scope\n  return (x**int)\
    \ % (Int)n == x\n             ^~~\n/tmp/tmp444bje86.swift:22:19: error: binary\
    \ operator '%' cannot be applied to operands of type 'UInt8' and '(Int).Type'\n\
    \  return (x**int) % (Int)n == x\n         ~~~~~~~~ ^ ~~~~~\n/tmp/tmp444bje86.swift:22:19:\
    \ note: overloads for '%' exist with these partially matching parameter lists:\
    \ (Int, Int), (Int16, Int16), (Int32, Int32), (Int64, Int64), (Int8, Int8), (UInt,\
    \ UInt), (UInt16, UInt16), (UInt32, UInt32), (UInt64, UInt64), (UInt8, UInt8)\n\
    \  return (x**int) % (Int)n == x\n                  ^\n/tmp/tmp444bje86.swift:22:19:\
    \ error: no '%' candidates produce the expected contextual result type 'Bool'\n\
    \  return (x**int) % (Int)n == x\n                  ^\nSwift.UInt8:11:24: note:\
    \ '%' produces 'UInt8', not the expected contextual result type 'Bool'\n    public\
    \ static func % (lhs: UInt8, rhs: UInt8) -> UInt8\n                       ^\n\
    Swift.Int8:11:24: note: '%' produces 'Int8', not the expected contextual result\
    \ type 'Bool'\n    public static func % (lhs: Int8, rhs: Int8) -> Int8\n     \
    \                  ^\nSwift.UInt16:11:24: note: '%' produces 'UInt16', not the\
    \ expected contextual result type 'Bool'\n    public static func % (lhs: UInt16,\
    \ rhs: UInt16) -> UInt16\n                       ^\nSwift.Int16:11:24: note: '%'\
    \ produces 'Int16', not the expected contextual result type 'Bool'\n    public\
    \ static func % (lhs: Int16, rhs: Int16) -> Int16\n                       ^\n\
    Swift.UInt32:11:24: note: '%' produces 'UInt32', not the expected contextual result\
    \ type 'Bool'\n    public static func % (lhs: UInt32, rhs: UInt32) -> UInt32\n\
    \                       ^\nSwift.Int32:11:24: note: '%' produces 'Int32', not\
    \ the expected contextual result type 'B"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var result = is_simple_power(x,\
    \ n)\n    return !result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnfkrliym.swift:19:33: error: missing argument labels 'x:n:' in\
    \ call\n    var result = is_simple_power(x, n)\n                             \
    \   ^\n                                 x: n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n%x == 0 {\n        return true\n    }\n  \
    \  if n%x%x == 0 {\n        return is_simple_power(x, n-1)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplxeezrso.swift:26:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 2 {\n        return x.isPrime\n    }\n\
    \    return x.isPrime && is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphx6qlelf.swift:23:18: error: value of type 'Int' has no member\
    \ 'isPrime'\n        return x.isPrime\n               ~ ^~~~~~~\n/tmp/tmphx6qlelf.swift:25:14:\
    \ error: value of type 'Int' has no member 'isPrime'\n    return x.isPrime &&\
    \ is_simple_power(x, n-1)\n           ~ ^~~~~~~\n/tmp/tmphx6qlelf.swift:25:40:\
    \ error: missing argument labels 'x:n:' in call\n    return x.isPrime && is_simple_power(x,\
    \ n-1)\n                                       ^\n                           \
    \             x: n: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x != 1 {\n \
    \       for d in 2..Int(Int(n)) {\n            if d == n {\n                return\
    \ true\n            }\n            if x % d == 0 {\n                return false\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3tea4xu3.swift:20:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for d in 2..Int(Int(n)) {\n                  ^~\n\
    \                  ...\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return (x < n)\
    \ && (is_power(x, n) == true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgn45s4go.swift:19:24: error: cannot find 'is_power' in scope\n\
    \    return (x < n) && (is_power(x, n) == true)\n                       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == (n\
    \ * n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmplzhsboo4/tmplzhsboo4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed53164c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed52e5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed52e5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed52e5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplzhsboo4                        0x000055565b8d51b6 <unavailable> + 4534

    5    libc.so.6                          0x00002aed53350460 __libc_start_main +
    245

    6    tmplzhsboo4                        0x000055565b8d4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n *\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpkd89w9hm/tmpkd89w9hm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb8fa81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb8f778b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb8f778988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb8f7777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkd89w9hm                        0x000055660029f1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002acb8fc6d460 __libc_start_main +
    245

    6    tmpkd89w9hm                        0x000055660029ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978956
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x > 0 && n >\
    \ 1 {\n        if pow(x, Int(n)) == x {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpymbme0n8.swift:20:12: error: cannot find 'pow' in scope\n     \
    \   if pow(x, Int(n)) == x {\n           ^~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var power = 1\n\
    \    for _ in 0..<n {\n        if (x%power != 0) {\n            return false\n\
    \        }\n        power *= x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8pn1_hzu/tmp8pn1_hzu.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261942fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2619126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2619126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26191257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8pn1_hzu                        0x0000557d348894a3 <unavailable> + 5283

    5    libc.so.6                          0x00002b261961b460 __libc_start_main +
    245

    6    tmp8pn1_hzu                        0x0000557d34888fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let mut m = Int.min;\n\
    \    for _ in 0..<n {\n        if x == 1<<m {\n            return true;\n    \
    \    }\n        m--;\n    }\n    return false;\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7jec99y8.swift:19:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut m = Int.min;\n\
    \            ^\n/tmp/tmp7jec99y8.swift:19:13: note: join the identifiers together\n\
    \    let mut m = Int.min;\n        ~~~~^\n        mutm\n/tmp/tmp7jec99y8.swift:19:13:\
    \ note: join the identifiers together with camel-case\n    let mut m = Int.min;\n\
    \        ~~~~^\n        mutM\n/tmp/tmp7jec99y8.swift:21:20: error: cannot find\
    \ 'm' in scope\n        if x == 1<<m {\n                   ^\n/tmp/tmp7jec99y8.swift:24:10:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n        m--;\n\
    \         ^~\n/tmp/tmp7jec99y8.swift:24:9: error: cannot find 'm' in scope\n \
    \       m--;\n        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n\treturn ((n**int)\
    \ ==  x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8bt_nt7m.swift:19:12: error: cannot find operator '**' in scope\n\
    \        return ((n**int) ==  x)\n                  ^~\n/tmp/tmp8bt_nt7m.swift:19:14:\
    \ error: cannot find 'int' in scope\n        return ((n**int) ==  x)\n       \
    \             ^~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    guard x < n else\
    \ {\n        return false\n    }\n\n    let xpower = x ** (n - 1)\n    let result\
    \ = n == xpower\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp925q62ml.swift:23:20: error: cannot find operator '**' in scope\n\
    \    let xpower = x ** (n - 1)\n                   ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n  return is_simple_power_of_n(x:\
    \ x, n: n) && is_simple(n: n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpn123gfm5.swift:19:10: error: cannot find 'is_simple_power_of_n'\
    \ in scope\n  return is_simple_power_of_n(x: x, n: n) && is_simple(n: n)\n   \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn123gfm5.swift:19:46: error: cannot find\
    \ 'is_simple' in scope\n  return is_simple_power_of_n(x: x, n: n) && is_simple(n:\
    \ n)\n                                             ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // TODO: Write\
    \ a smart algorithm that determines whether a number is a simple power of\n  \
    \  //       another number.\n    if n ** int == x {\n        return true\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7w8lpxjq.swift:21:10: error: cannot find operator '**' in scope\n\
    \    if n ** int == x {\n         ^~\n/tmp/tmp7w8lpxjq.swift:21:13: error: cannot\
    \ find 'int' in scope\n    if n ** int == x {\n            ^~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0:\n  \
    \      return true\n    } else if n == 1:\n        return n == x\n    } else if\
    \ n < 0:\n        return false\n    }\n    return pow(x, Int(n)) != x\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkr0hdo1_.swift:19:14: error: expected '{' after 'if' condition\n\
    \    if n == 0:\n             ^\n/tmp/tmpkr0hdo1_.swift:21:6: error: consecutive\
    \ statements on a line must be separated by ';'\n    } else if n == 1:\n     ^\n\
    \     ;\n/tmp/tmpkr0hdo1_.swift:21:7: error: expected expression\n    } else if\
    \ n == 1:\n      ^\n/tmp/tmpkr0hdo1_.swift:21:21: error: expected '{' after 'if'\
    \ condition\n    } else if n == 1:\n                    ^\n/tmp/tmpkr0hdo1_.swift:23:5:\
    \ error: extraneous '}' at top level\n    } else if n < 0:\n    ^~\n    \n/tmp/tmpkr0hdo1_.swift:23:6:\
    \ error: consecutive statements on a line must be separated by ';'\n    } else\
    \ if n < 0:\n     ^\n     ;\n/tmp/tmpkr0hdo1_.swift:23:7: error: expected expression\n\
    \    } else if n < 0:\n      ^\n/tmp/tmpkr0hdo1_.swift:23:20: error: expected\
    \ '{' after 'if' condition\n    } else if n < 0:\n                   ^\n/tmp/tmpkr0hdo1_.swift:25:5:\
    \ error: extraneous '}' at top level\n    }\n    ^\n    \n/tmp/tmpkr0hdo1_.swift:27:1:\
    \ error: extraneous '}' at top level\n}\n^\n/tmp/tmpkr0hdo1_.swift:21:15: error:\
    \ cannot find 'n' in scope\n    } else if n == 1:\n              ^\n/tmp/tmpkr0hdo1_.swift:22:9:\
    \ error: return invalid outside of a func\n        return n == x\n        ^\n\
    /tmp/tmpkr0hdo1_.swift:23:15: error: cannot find 'n' in scope\n    } else if n\
    \ < 0:\n              ^\n/tmp/tmpkr0hdo1_.swift:24:9: error: return invalid outside\
    \ of a func\n        return false\n        ^\n/tmp/tmpkr0hdo1_.swift:26:5: error:\
    \ return invalid outside of a func\n    return pow(x, Int(n)) != x\n    ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    func is_power_of_two_with_decimal(x:\
    \ Int) -> Bool {\n        return x && (x & (x-1)) == 0\n    }\n\n    guard x ==\
    \ 0 || n == 0 else { return false}\n\n    // Base case\n    if (n == 1) {return\
    \ true}\n\n    // Recursion step\n    if x == 1 {\n        return true\n    }\
    \ else {\n        if x % n == 0 {\n            return true\n        }\n      \
    \  return is_power_of_two_with_decimal(x / n)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9x91p2rr.swift:20:16: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n        return x && (x & (x-1)) == 0\n            \
    \   ^\n               ( != 0)\n/tmp/tmp9x91p2rr.swift:35:45: error: missing argument\
    \ label 'x:' in call\n        return is_power_of_two_with_decimal(x / n)\n   \
    \                                         ^\n                                \
    \            x: \n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == Int(pow(x,\
    \ Float(Int64(n))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpm8xz5vx5.swift:19:21: error: cannot find 'pow' in scope\n    return\
    \ x == Int(pow(x, Float(Int64(n))))\n                    ^~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    guard n >= 0 else\
    \ {\n        return false\n    }\n    if n&n&n&n&n == x {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpi927gqna/tmpi927gqna.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388681ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3886515b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3886515988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38865147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi927gqna                        0x000055b2d1fa11b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b3886a0a460 __libc_start_main +
    245

    6    tmpi927gqna                        0x000055b2d1fa0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var power = 1\n\
    \    for _ in 0..<n {\n        power *= x\n    }\n    return x == power\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmptqobw6rr/tmptqobw6rr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1af704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1af3fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1af3fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1af3fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqobw6rr                        0x00005640eabca336 <unavailable> + 4918

    5    libc.so.6                          0x00002af1af8f0460 __libc_start_main +
    245

    6    tmptqobw6rr                        0x00005640eabc9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n  if n < x {\n    return\
    \ false\n  }\n  if x == 1 {\n    return true\n  }\n\n  for i in 1..Int(log2(x))\
    \ {\n    if x & 1 == 1 {\n      if n == i {\n        return true\n      }\n  \
    \  } else {\n      if n == Int(log2(x)) {\n        return true\n      }\n    }\n\
    \    x >>= 1\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0nro_jtx.swift:26:13: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n  for i in 1..Int(log2(x)) {\n            ^~\n        \
    \    ...\n/tmp/tmp0nro_jtx.swift:26:19: error: cannot find 'log2' in scope\n \
    \ for i in 1..Int(log2(x)) {\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if x == n {\n        return true\n    }\n    if x < n {\n        return false\n\
    \    }\n    return is_simple_power(x, n-1) && is_simple_power(n-1, x)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpstcqskxq.swift:31:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n-1) && is_simple_power(n-1, x)\n      \
    \                    ^\n                           x: n: \n/tmp/tmpstcqskxq.swift:31:54:\
    \ error: missing argument labels 'x:n:' in call\n    return is_simple_power(x,\
    \ n-1) && is_simple_power(n-1, x)\n                                          \
    \           ^\n                                                      x:   n: \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return n == 0 ||\
    \ is_power_of_two(x) && is_power_of_two(n) && (x % n == 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf5cg9y0v.swift:19:22: error: cannot find 'is_power_of_two' in scope\n\
    \    return n == 0 || is_power_of_two(x) && is_power_of_two(n) && (x % n == 0)\n\
    \                     ^~~~~~~~~~~~~~~\n/tmp/tmpf5cg9y0v.swift:19:44: error: cannot\
    \ find 'is_power_of_two' in scope\n    return n == 0 || is_power_of_two(x) &&\
    \ is_power_of_two(n) && (x % n == 0)\n                                       \
    \    ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x <= 0 || n\
    \ <= 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    var tmp: Int\n    if n <= 3 {\n        tmp = 1\n    }\n    else {\n\
    \        for i := 1; i <= n; i++ {\n            tmp *= x\n        }\n    }\n \
    \   return (tmp == x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0hs_p6bl.swift:30:16: error: expected type\n        for i := 1;\
    \ i <= n; i++ {\n               ^\n                <#type#>\n/tmp/tmp0hs_p6bl.swift:30:16:\
    \ error: expected 'in' after for-each pattern\n        for i := 1; i <= n; i++\
    \ {\n               ^\n/tmp/tmp0hs_p6bl.swift:30:16: error: expected Sequence\
    \ expression for for-each loop\n        for i := 1; i <= n; i++ {\n          \
    \     ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var isSimplePower:\
    \ Bool = false\n    if x == 1 {\n        isSimplePower = true\n    } else {\n\
    \        for n in 1...x {\n            if n == x * x {\n                isSimplePower\
    \ = true\n                break\n            } else if n % n == 0 {\n        \
    \        isSimplePower = false\n                break\n            }\n       \
    \ }\n    }\n    return isSimplePower\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp99nambpw/tmp99nambpw.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa7f617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa7f30eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa7f30e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa7f30d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp99nambpw                        0x000055cb1517a336 <unavailable> + 4918

    5    libc.so.6                          0x00002afa7f803460 __libc_start_main +
    245

    6    tmp99nambpw                        0x000055cb15179fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // TODO: ...\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: '/tmp/tmpzx_4z_fy.swift:20:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 2 && x != 1 {\n        return true\n \
    \   }\n    if n == 2 {\n        return x == x * x\n    }\n    if n > 2 {\n   \
    \     return is_simple_power(x, n / 2)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbacv7b3_.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n / 2)\n                           \
    \   ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_exact(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnyy915e1.swift:19:12: error: cannot find 'is_simple_power_exact'\
    \ in scope\n    return is_simple_power_exact(x, n)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // TODO: implement\
    \ this\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8r7kta_k/tmp8r7kta_k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91608dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91605d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91605d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91605d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8r7kta_k                        0x000055dc019ad1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b9160aca460 __libc_start_main +
    245

    6    tmp8r7kta_k                        0x000055dc019ace69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n\treturn is_power_of_two(n)\
    \ && is_power_of_two(x) && is_same(n, n*x)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpo34eabsu.swift:19:9: error: cannot find 'is_power_of_two' in scope\n\
    \        return is_power_of_two(n) && is_power_of_two(x) && is_same(n, n*x)\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpo34eabsu.swift:19:31: error: cannot find\
    \ 'is_power_of_two' in scope\n        return is_power_of_two(n) && is_power_of_two(x)\
    \ && is_same(n, n*x)\n                                     ^~~~~~~~~~~~~~~\n/tmp/tmpo34eabsu.swift:19:53:\
    \ error: cannot find 'is_same' in scope\n        return is_power_of_two(n) &&\
    \ is_power_of_two(x) && is_same(n, n*x)\n                                    \
    \                       ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n < 1 {\n  \
    \      return false\n    }\n\n    let mut i = 1\n    var temp = 0\n    var result\
    \ = true\n\n    while i * i <= x {\n        if x > i * n {\n            temp =\
    \ i\n        } else {\n            temp = i / n\n        }\n\n        if temp\
    \ != x {\n            result = false\n        }\n\n        i += temp\n    }\n\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphzki9a38.swift:23:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 1\n\
    \            ^\n/tmp/tmphzki9a38.swift:23:13: note: join the identifiers together\n\
    \    let mut i = 1\n        ~~~~^\n        muti\n/tmp/tmphzki9a38.swift:23:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 1\n   \
    \     ~~~~^\n        mutI\n/tmp/tmphzki9a38.swift:27:11: error: cannot find 'i'\
    \ in scope\n    while i * i <= x {\n          ^\n/tmp/tmphzki9a38.swift:27:15:\
    \ error: cannot find 'i' in scope\n    while i * i <= x {\n              ^\n/tmp/tmphzki9a38.swift:27:13:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    while i * i <= x {\n            ^\n/tmp/tmphzki9a38.swift:28:16: error: cannot\
    \ find 'i' in scope\n        if x > i * n {\n               ^\n/tmp/tmphzki9a38.swift:29:20:\
    \ error: cannot find 'i' in scope\n            temp = i\n                   ^\n\
    /tmp/tmphzki9a38.swift:31:20: error: cannot find 'i' in scope\n            temp\
    \ = i / n\n                   ^\n/tmp/tmphzki9a38.swift:38:9: error: cannot find\
    \ 'i' in scope\n        i += temp\n        ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n&1 == 1 {\n\
    \        return true\n    } else {\n        var res = 1\n        var tmp = 0\n\
    \        var limit = (1<<n)\n        for i = 1<<(n-1); i < limit; i++ {\n    \
    \        tmp = tmp * i + (1<<(n-1))\n            if tmp == x {\n             \
    \   return true\n            }\n        }\n        if x == tmp {\n           \
    \ return true\n        }\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphuqzs522.swift:25:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for i = 1<<(n-1); i < limit; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let exponent =\
    \ pow(Double(x), Double(n))\n    return exponent == Double(x)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpamuwrw2g.swift:19:20: error: cannot find 'pow' in scope\n    let\
    \ exponent = pow(Double(x), Double(n))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return (n * n)\
    \ == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpzzc2sfn6/tmpzzc2sfn6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0871557c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b087124eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b087124e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b087124d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzzc2sfn6                        0x00005590cabb31b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b0871743460 __libc_start_main +
    245

    6    tmpzzc2sfn6                        0x00005590cabb2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let x = Int.max(x\
    \ * Int(n), 1)\n    let m = Int(n) * Int(n)\n    return (Int(x) == Int(x) || x\
    \ == m) // x == m**2 ?\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjqm32t_g.swift:19:17: error: cannot call value of non-function\
    \ type 'Int'\n    let x = Int.max(x * Int(n), 1)\n                ^\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var result = 1\n\
    \    for _ in 0..<(n - 1) {\n        result = result * x\n    }\n    return result\
    \ == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // TODO: Use math\
    \ library instead\n\n    var result = false\n    for _ in 0..<n {\n        if\
    \ x == Int(pow(Double(x), Double(n))) {\n            result = true\n         \
    \   break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbk2ke4ck.swift:23:21: error: cannot find 'pow' in scope\n     \
    \   if x == Int(pow(Double(x), Double(n))) {\n                    ^~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    switch n {\n  \
    \  case 0: return true\n    case 1: return x == 1\n    case 2: return x == 1\n\
    \    case 3: return x == 1\n    case 4: return x == 1\n    case 5: return x ==\
    \ 1\n    case 6: return x == 1\n    case 7: return x == 1\n    case 8: return\
    \ x == 1\n    case 9: return x == 1\n    case 10: return x == 1\n    case 11:\
    \ return x == 1\n    case 12: return x == 1\n    case 13: return x == 1\n    case\
    \ 14: return x == 1\n    case 15: return x == 1\n    case 16: return x == 1\n\
    \    case 17: return x == 1\n    case 18: return x == 1\n    case 19: return x\
    \ == 1\n    case 20: return x == 1\n    case 21: return x == 1\n    case 22: return\
    \ x == 1\n    case 23: return x == 1\n    case 24: return x == 1\n    case 25:\
    \ return x == 1\n    case 26: return x == 1\n    case 27: return x == 1\n    case\
    \ 28: return x == 1\n    case 29: return x == 1\n    case 30: return x == 1\n\
    \    case 31: return x == 1\n    case 32: return x == 1\n    case 33: return x\
    \ == 1\n    case 34: return x == 1\n    case 35: return x == 1\n    case 36: return\
    \ x == 1\n    case 37: return x == 1\n    case 38: return x == 1\n    case 39:\
    \ return x == 1\n    case 40: return x == 1\n    case 41: return x == 1\n    case\
    \ 42: return x == 1\n    case 43: return x == 1\n    case 44: return x == 1\n\
    \    case 45: return x == 1\n    case 46: return x == 1\n    case 47: return x\
    \ == 1\n    case 48: return x == 1\n    case 49: return x == 1\n    case 50: return\
    \ x == 1\n    case 51: return x == 1\n    case 52: return x == 1\n    case 53:\
    \ return x == 1\n    case 54: return x == 1\n    case 55: return x == 1\n    case\
    \ 56: return x == 1\n    case 57: return x == 1\n    case 58: return x == 1\n\
    \    case 59: return x == 1\n    case 60: return x == 1\n    case 61: return x\
    \ == 1\n    case 62: return x == 1\n    case 63: return x == 1\n    case 64: return\
    \ x == 1\n    case 65: return x == 1\n    case 66: return x == 1\n    case 67:\
    \ return x == 1\n    case 68: return x == 1\n    case 69: return x == 1\n    case\
    \ 70: return x == 1\n    case 71: return x == 1\n    case 72: return x == 1\n\
    \    case 73: return x == 1\n    case 74: return x == 1\n    case 75: return x\
    \ == 1\n    case 76: return x == 1\n    case 77: return x == 1\n    case 78: return\
    \ x == 1\n    case 79: return x == 1\n    case 80: return x == 1\n    case 81:\
    \ return x == 1\n    case 82: return x == 1\n    case 83: return x == 1\n    case\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl3ws71a7.swift:104:9: error: expected pattern\n    case \n    \
    \    ^\n/tmp/tmpl3ws71a7.swift:104:9: error: expected ':' after 'case'\n    case\
    \ \n        ^\n/tmp/tmpl3ws71a7.swift:129:45: error: expected '}' at end of brace\
    \ statement\nassert(is_simple_power(x: 1, n: 12) == true)\n                  \
    \                          ^\n/tmp/tmpl3ws71a7.swift:18:46: note: to match this\
    \ opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n              \
    \                               ^\n/tmp/tmpl3ws71a7.swift:108:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_fj6cwic.swift:19:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if x < n {\n        return false\n    }\n    if\
    \ x <= n * x {\n        return is_simple_power(x, n - 1)\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_npuptm4.swift:26:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n - 1)\n                           \
    \   ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    \n    func isPowerOfN(number: Int) -> Bool {\n\
    \        var temp = 0\n        \n        if number == 1 {\n            return\
    \ true\n        }\n        \n        while number > 0 {\n            temp = number\
    \ % n\n            number = number/Int64(n)\n            if temp == 0 {\n    \
    \            return true\n            }\n        }\n        \n        return false\n\
    \    }\n    \n    return isPowerOfN(x)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplhgr9n94.swift:32:13: error: cannot assign to value: 'number' is\
    \ a 'let' constant\n            number = number/Int64(n)\n            ^~~~~~\n\
    /tmp/tmplhgr9n94.swift:32:29: error: cannot convert value of type 'Int64' to expected\
    \ argument type 'Int'\n            number = number/Int64(n)\n                \
    \            ^\n                            Int(    )\n/tmp/tmplhgr9n94.swift:41:23:\
    \ error: missing argument label 'number:' in call\n    return isPowerOfN(x)\n\
    \                      ^\n                      number: \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n\n    if n == 0 {\n        return false\n    }\n\n\
    \    if x == n {\n        return true\n    }\n\n    if n % 2 == 0 {\n        return\
    \ is_simple_power(x, n/2)\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmper6ocjcv.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return n**x ==\
    \ x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpses4ebc6.swift:19:13: error: cannot find operator '**' in scope\n\
    \    return n**x == x\n            ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 0 || n == x {\n        return true\n \
    \   }\n    if n % x == 0 {\n        return is_simple_power(x, n + 1)\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7lyp_9iv.swift:26:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n + 1)\n                           \
    \   ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 0 || n\
    \ == 0 {\n        return true\n    }\n\n    if x == 1 {\n        return n == 0\n\
    \    }\n\n    return is_simple_power(x, n-1) * x == n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps9kxhqk9.swift:27:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n-1) * x == n\n                        \
    \  ^\n                           x: n: \n/tmp/tmps9kxhqk9.swift:27:12: error:\
    \ cannot convert value of type 'Bool' to expected argument type 'Int'\n    return\
    \ is_simple_power(x, n-1) * x == n\n           ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_and_remainder(x,\
    \ n, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2geko662.swift:19:12: error: cannot find 'is_simple_power_and_remainder'\
    \ in scope\n    return is_simple_power_and_remainder(x, n, 0)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n < 2 {\n  \
    \      return false\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x > 1 {\n        if n % x == 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp_weccb9p/tmp_weccb9p.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b530f8ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b530f5d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b530f5d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b530f5d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_weccb9p                        0x000055c27d77d246 <unavailable> + 4678

    5    libc.so.6                          0x00002b530fac9460 __libc_start_main +
    245

    6    tmp_weccb9p                        0x000055c27d77cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // TODO: Your code\
    \ here\n    var power = 1\n    var power = n\n    \n    for num in 1...n {\n \
    \       if x%power == 0 {\n            return true\n        } else {\n       \
    \     power = power * n\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmwyfaqat.swift:21:9: error: invalid redeclaration of 'power'\n\
    \    var power = n\n        ^\n/tmp/tmpmwyfaqat.swift:20:9: note: 'power' previously\
    \ declared here\n    var power = 1\n        ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let mut current\
    \ = 1\n    for _ in 0..<n {\n        if current * x == x {\n            return\
    \ true\n        }\n        current *= x\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprjwkgxdw.swift:19:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut current\
    \ = 1\n            ^\n/tmp/tmprjwkgxdw.swift:19:13: note: join the identifiers\
    \ together\n    let mut current = 1\n        ~~~~^~~~~~~\n        mutcurrent\n\
    /tmp/tmprjwkgxdw.swift:19:13: note: join the identifiers together with camel-case\n\
    \    let mut current = 1\n        ~~~~^~~~~~~\n        mutCurrent\n/tmp/tmprjwkgxdw.swift:21:12:\
    \ error: cannot find 'current' in scope\n        if current * x == x {\n     \
    \      ^~~~~~~\n/tmp/tmprjwkgxdw.swift:24:9: error: cannot find 'current' in scope\n\
    \        current *= x\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n  if n == 1 {\n   \
    \ return true\n  }\n\n  if n&n-1 == 0{\n    return is_simple_power(x, n-1)\n \
    \ }\n\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpk14ld2f5.swift:24:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n-1)\n                          ^\n    \
    \                       x: n: \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n\tswitch x {\n\tcase\
    \ 0:\n\t\treturn true\n\tcase x & 1 == 1 && x != n-1: // check if n**int==x\n\t\
    \treturn true\n\tcase n%2 == 0: // check if n is even\n\t\treturn is_simple_power(x,\
    \ n/2)\n\tcase n > 1: // check if n is odd\n\t\treturn !is_simple_power(x, n/2)\n\
    \t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpi_4rdw8l.swift:22:18: error: expression pattern of type 'Bool'\
    \ cannot match values of type 'Int'\n        case x & 1 == 1 && x != n-1: // check\
    \ if n**int==x\n             ~~~~~~~~~~~^~~~~~~~~~~\n/tmp/tmpi_4rdw8l.swift:24:11:\
    \ error: expression pattern of type 'Bool' cannot match values of type 'Int'\n\
    \        case n%2 == 0: // check if n is even\n             ~~~~^~~~\n/tmp/tmpi_4rdw8l.swift:26:9:\
    \ error: expression pattern of type 'Bool' cannot match values of type 'Int'\n\
    \        case n > 1: // check if n is odd\n             ~~^~~\n/tmp/tmpi_4rdw8l.swift:25:25:\
    \ error: missing argument labels 'x:n:' in call\n                return is_simple_power(x,\
    \ n/2)\n                                      ^\n                            \
    \           x: n: \n/tmp/tmpi_4rdw8l.swift:27:26: error: missing argument labels\
    \ 'x:n:' in call\n                return !is_simple_power(x, n/2)\n          \
    \                             ^\n                                        x: n:\
    \ \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var temp = x *\
    \ n\n    if temp == x {\n        return true\n    }\n    if temp < x {\n     \
    \   return false\n    }\n    if temp % x == 0 {\n        return is_simple_power(x,\
    \ temp / x)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpi0ig8zhg.swift:27:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, temp / x)\n                        \
    \      ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n  var powerOfN = 1\n\
    \  var isSimple = true\n  for _ in 0..<n {\n    powerOfN *= x\n    isSimple =\
    \ powerOfN == x\n  }\n  return isSimple\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpsfhqpe0v/tmpsfhqpe0v.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fbf222c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fbef19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fbef19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fbef187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfhqpe0v                        0x000055c49c54b336 <unavailable> + 4918

    5    libc.so.6                          0x00002b2fbf40e460 __libc_start_main +
    245

    6    tmpsfhqpe0v                        0x000055c49c54afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    switch n {\n  \
    \  case 1: return true\n    case 2: return x == 1\n    case 3: return x == x &&\
    \ x == 1\n    case 4: return x == x * x\n    default: return false\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmppogzpzo1/tmppogzpzo1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee34df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee34ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee34ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee34ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppogzpzo1                        0x0000558e7e30c1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002aee34fde460 __libc_start_main +
    245

    6    tmppogzpzo1                        0x0000558e7e30be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    if n%2 == 1 {\n        return is_simple_power(x*x,\
    \ n/2)\n    }\n    else {\n        return is_simple_power(x*x, n/2)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprrqo_d8t.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x*x, n/2)\n                           \
    \   ^\n                               x:   n: \n/tmp/tmprrqo_d8t.swift:26:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x*x,\
    \ n/2)\n                              ^\n                               x:   n:\
    \ \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return n == x ||\
    \ is_simple_power(x, n-1) * is_simple_power(x, n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4df_xaqk.swift:19:37: error: missing argument labels 'x:n:' in\
    \ call\n    return n == x || is_simple_power(x, n-1) * is_simple_power(x, n)\n\
    \                                    ^\n                                     x:\
    \ n: \n/tmp/tmp4df_xaqk.swift:19:46: error: binary operator '*' cannot be applied\
    \ to two 'Bool' operands\n    return n == x || is_simple_power(x, n-1) * is_simple_power(x,\
    \ n)\n                                             ^\nSwift.FloatingPoint:1:17:\
    \ note: candidate requires that 'Bool' conform to 'FloatingPoint' (requirement\
    \ specified as 'Self' : 'FloatingPoint')\npublic protocol FloatingPoint : Hashable,\
    \ SignedNumeric, Strideable where Self == Self.Magnitude {\n                ^\n\
    /tmp/tmp4df_xaqk.swift:19:63: error: missing argument labels 'x:n:' in call\n\
    \    return n == x || is_simple_power(x, n-1) * is_simple_power(x, n)\n      \
    \                                                        ^\n                 \
    \                                              x: n: \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return n == 0 &&\
    \ x == 0 || n&x == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp2s_kjiwq/tmp2s_kjiwq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b577aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b574a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b574a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b574a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2s_kjiwq                        0x00005602ae5761b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b8b5799a460 __libc_start_main +
    245

    6    tmp2s_kjiwq                        0x00005602ae575e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n == Int.max {\n        return\
    \ true\n    }\n    if n % x == 0 {\n        return is_simple_power(x, n / x)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdnccq908.swift:32:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n / x)\n                           \
    \   ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var result = true\n\
    \    for _ in 0 ..< n {\n        result = result && false\n    }\n    return result\
    \ == (x == pow(x, n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp99dh36pu.swift:23:28: error: cannot find 'pow' in scope\n    return\
    \ result == (x == pow(x, n))\n                           ^~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n==1 {\n   \
    \     return true\n    }\n    if n%2==0 {\n        return true\n    }\n    return\
    \ is_simple_power(x, n/2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpz28c_kxi.swift:25:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n/2)\n                          ^\n    \
    \                       x: n: \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var power = 1\n\
    \    for _ in 0 ..< n {\n        power = power * x\n    }\n    return power ==\
    \ x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpgepsz9np/tmpgepsz9np.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6174ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6171f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6171f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6171f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgepsz9np                        0x000055bde4f84336 <unavailable> + 4918

    5    libc.so.6                          0x00002af6176eb460 __libc_start_main +
    245

    6    tmpgepsz9np                        0x000055bde4f83fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var temp = Int(x)\n\
    \    while n > 0 {\n        temp *= Int((n - 1))\n        n -= 1\n    }\n    return\
    \ x == temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnh3pe9gq.swift:22:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let power = pow(x,\
    \ n)\n    let power = power.rounded()\n    return power * power == x\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppg5pba9z.swift:19:17: error: cannot find 'pow' in scope\n    let\
    \ power = pow(x, n)\n                ^~~\n/tmp/tmppg5pba9z.swift:21:26: error:\
    \ binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n\
    \    return power * power == x\n           ~~~~~~~~~~~~~ ^  ~\n/tmp/tmppg5pba9z.swift:21:26:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Duration, Duration), (Int, Int)\n    return power * power == x\n          \
    \               ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n\t\n\tlet pow: Int\
    \ = pow(x, Int(n))\n\t\n\treturn (n * pow == x)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpc1zykb3f.swift:20:17: error: use of local variable 'pow' before\
    \ its declaration\n        let pow: Int = pow(x, Int(n))\n                   \
    \    ^\n/tmp/tmpc1zykb3f.swift:20:6: note: 'pow' declared here\n        let pow:\
    \ Int = pow(x, Int(n))\n            ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n < 0 {\n  \
    \      return false\n    }\n    if n == 0 {\n        return true\n    }\n    if\
    \ n%2 == 0 {\n        return is_simple_power(x, n/2)\n    }\n    if n%3 == 0 {\n\
    \        return is_simple_power(x, n/3)\n    }\n    return is_simple_power(x,\
    \ n/2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwfvn5b_k.swift:26:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpwfvn5b_k.swift:29:31: error:\
    \ missing argument labels 'x:n:' in call\n        return is_simple_power(x, n/3)\n\
    \                              ^\n                               x: n: \n/tmp/tmpwfvn5b_k.swift:31:27:\
    \ error: missing argument labels 'x:n:' in call\n    return is_simple_power(x,\
    \ n/2)\n                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x < 0 {\n  \
    \      return false\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if n <= 0 {\n        return false\n\
    \    }\n    \n    var result = false\n    \n    if n > x {\n        n = n - x\n\
    \        result = is_simple_power(x, n)\n    } else {\n        n = n - x\n   \
    \     result = is_simple_power(x, n)\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2sitfht0.swift:35:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n - x\n        ^\n/tmp/tmp2sitfht0.swift:36:33: error:\
    \ missing argument labels 'x:n:' in call\n        result = is_simple_power(x,\
    \ n)\n                                ^\n                                 x: n:\
    \ \n/tmp/tmp2sitfht0.swift:38:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n - x\n        ^\n/tmp/tmp2sitfht0.swift:39:33: error:\
    \ missing argument labels 'x:n:' in call\n        result = is_simple_power(x,\
    \ n)\n                                ^\n                                 x: n:\
    \ \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x < 0 || n <=\
    \ 1 {\n        return false\n    }\n    if n == 1 {\n        return true\n   \
    \ }\n    if x % n == 0 {\n        return is_simple_power(x, n - 1)\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxbe1s7g5.swift:26:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n - 1)\n                           \
    \   ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n  // todo: implement\
    \ this function\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmppdxvxott/tmppdxvxott.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef2c3fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef2c0f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef2c0f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef2c0f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdxvxott                        0x0000560eae0091b6 <unavailable> + 4534

    5    libc.so.6                          0x00002aef2c5e7460 __libc_start_main +
    245

    6    tmppdxvxott                        0x0000560eae008e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var pow = pow(x,\
    \ n)\n    if pow != x {\n        return false\n    }\n    while n != 0 {\n   \
    \     if n & 1 == 1 {\n            return true\n        }\n        n = n >> 1\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjkqwim_1.swift:19:15: error: use of local variable 'pow' before\
    \ its declaration\n    var pow = pow(x, n)\n              ^\n/tmp/tmpjkqwim_1.swift:19:9:\
    \ note: 'pow' declared here\n    var pow = pow(x, n)\n        ^\n/tmp/tmpjkqwim_1.swift:27:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n >> 1\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n  switch {\n    case\
    \ x%n == 0: return true\n    case n == 1: return x == 1\n    default: return false\n\
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqbi1jkxy.swift:19:10: error: expected expression in 'switch' statement\n\
    \  switch {\n         ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n\tguard n != 0 else\
    \ { return true }\n\tlet d = Int(log2(n))\n\tswitch d {\n\tcase 0:\n\t\treturn\
    \ x == pow(Double(x), Double(n))\n\tcase 1:\n\t\treturn x == pow(Double(n), Double(n))\n\
    \tcase 2:\n\t\treturn x == pow(Double(n), Double(n/2))\n\tdefault:\n\t\tlet r\
    \ = pow(Double(n), Double(d-1))\n\t\treturn x == pow(Double(x), Double(d-1))\n\
    \t\t\t&& (x == r || x == r / Double(n))\n\t\t\t&& (x == r / Double(2) || x ==\
    \ r / Double(3))\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwwk4ru3a.swift:20:14: error: cannot find 'log2' in scope\n    \
    \    let d = Int(log2(n))\n                    ^~~~\n/tmp/tmpwwk4ru3a.swift:23:15:\
    \ error: cannot find 'pow' in scope\n                return x == pow(Double(x),\
    \ Double(n))\n                            ^~~\n/tmp/tmpwwk4ru3a.swift:25:15: error:\
    \ cannot find 'pow' in scope\n                return x == pow(Double(n), Double(n))\n\
    \                            ^~~\n/tmp/tmpwwk4ru3a.swift:27:15: error: cannot\
    \ find 'pow' in scope\n                return x == pow(Double(n), Double(n/2))\n\
    \                            ^~~\n/tmp/tmpwwk4ru3a.swift:29:11: error: cannot\
    \ find 'pow' in scope\n                let r = pow(Double(n), Double(d-1))\n \
    \                       ^~~\n/tmp/tmpwwk4ru3a.swift:30:15: error: cannot find\
    \ 'pow' in scope\n                return x == pow(Double(x), Double(d-1))\n  \
    \                          ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n&1 == 0 {\n        return true\n    }\n  \
    \  if x == 1 {\n        return false\n    }\n    let x = pow(x, Double(n).big())\n\
    \    return x == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpegl1o2q3.swift:28:13: error: cannot find 'pow' in scope\n    let\
    \ x = pow(x, Double(n).big())\n            ^~~\n/tmp/tmpegl1o2q3.swift:28:30:\
    \ error: value of type 'Double' has no member 'big'\n    let x = pow(x, Double(n).big())\n\
    \                   ~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    switch {\n    case\
    \ n == 0 ||\n        n == 1 {\n        return true\n    }\n    if n < 0 {\n  \
    \      return false\n    }\n    if x == 1 {\n        return true\n    }\n    switch\
    \ x {\n    case 2:\n        return is_simple_power(x, n - 1)\n    case 3:\n  \
    \      return is_simple_power(x, n - 2)\n    case 5:\n        return is_simple_power(x,\
    \ n - 3)\n    case 7:\n        return is_simple_power(x, n - 5)\n    case 10:\n\
    \        return is_simple_power(x, n - 7)\n    case 12:\n        return is_simple_power(x,\
    \ n - 10)\n    case 15:\n        return is_simple_power(x, n - 12)\n    case 19:\n\
    \        return is_simple_power(x, n - 15)\n    case 24:\n        return is_simple_power(x,\
    \ n - 19)\n    case 31:\n        return is_simple_power(x, n - 24)\n    case 38:\n\
    \        return is_simple_power(x, n - 31)\n    case 43:\n        return is_simple_power(x,\
    \ n - 38)\n    case 49:\n        return is_simple_power(x, n - 43)\n    case 56:\n\
    \        return is_simple_power(x, n - 49)\n    case 63:\n        return is_simple_power(x,\
    \ n - 56)\n    case 70:\n        return is_simple_power(x, n - 63)\n    case 79:\n\
    \        return is_simple_power(x, n - 70)\n    case 86:\n        return is_simple_power(x,\
    \ n - 79)\n    case 93:\n        return is_simple_power(x, n - 86)\n    default:\n\
    \        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpu9kxlw9o.swift:19:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n/tmp/tmpu9kxlw9o.swift:21:16: error: expected ':'\
    \ after 'case'\n        n == 1 {\n               ^\n/tmp/tmpu9kxlw9o.swift:96:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpu9kxlw9o.swift:18:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpu9kxlw9o.swift:21:16:\
    \ error: closure expression is unused\n        n == 1 {\n               ^\n/tmp/tmpu9kxlw9o.swift:21:16:\
    \ note: did you mean to use a 'do' statement?\n        n == 1 {\n            \
    \   ^\n               do \n/tmp/tmpu9kxlw9o.swift:32:31: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n - 1)\n          \
    \                    ^\n                               x: n: \n/tmp/tmpu9kxlw9o.swift:34:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n - 2)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpu9kxlw9o.swift:36:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n - 3)\n                              ^\n \
    \                              x: n: \n/tmp/tmpu9kxlw9o.swift:38:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n - 5)\n \
    \                             ^\n                               x: n: \n/tmp/tmpu9kxlw9o.swift:40:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n - 7)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpu9kxlw9o.swift:42:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n - 10)\n                              ^\n\
    \                               x: n: \n/tmp/tmpu9kxlw9o.swift:44:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n - 12)\n\
    \                              ^\n                       "
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n  guard n > 0 else\
    \ {\n    return false\n  }\n  if n == 1 {\n    return true\n  }\n  if x % (n-1)\
    \ != 0 {\n    return false\n  }\n  return is_simple_power(x: x, n: n-1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqrxumt10/tmpqrxumt10.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad98297bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad982672b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad982672988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9826717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqrxumt10                        0x00005592088003b3 <unavailable> + 5043

    5    libc.so.6                          0x00002ad982b67460 __libc_start_main +
    245

    6    tmpqrxumt10                        0x00005592087ffef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x**n ==\
    \ x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpplhir2ab.swift:19:13: error: cannot find operator '**' in scope\n\
    \    return x**n == x\n            ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x < n {\n  \
    \      return false\n    }\n    \n    var power = x\n    \n    for _ in 1..n {\n\
    \        power = power * x\n    }\n    \n    return x == power\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgpc0lvde.swift:25:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for _ in 1..n {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    var x = Int64(x)\n    if x < n {\n        return\
    \ false\n    }\n    if n > 0 { \n        let t = x / n\n        return is_simple_power(x,\
    \ n - t) == true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphb0pm92o.swift:27:19: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int64' and 'Int'\n        let t = x / n\n             \
    \   ~ ^ ~\n/tmp/tmphb0pm92o.swift:27:19: note: overloads for '/' exist with these\
    \ partially matching parameter lists: (Int, Int), (Int64, Int64)\n        let\
    \ t = x / n\n                  ^\n/tmp/tmphb0pm92o.swift:28:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n - t) ==\
    \ true\n                              ^\n                               x: n:\
    \ \n/tmp/tmphb0pm92o.swift:28:32: error: cannot convert value of type 'Int64'\
    \ to expected argument type 'Int'\n        return is_simple_power(x, n - t) ==\
    \ true\n                               ^\n                               Int(\
    \ )\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var power: Int\n\
    \n    power = Int(Int(x) ** Int(n))\n    if power == x {\n        return true\n\
    \    }\n    if power == (x * x) {\n        return true\n    }\n    if power ==\
    \ (x * x * x) {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpw833k64l.swift:21:24: error: cannot find operator '**' in scope\n\
    \    power = Int(Int(x) ** Int(n))\n                       ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return x == 1\n    }\n  \
    \  return is_simple_power(x, n-1) * x == x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_c8qrsg5.swift:25:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n-1) * x == x\n                        \
    \  ^\n                           x: n: \n/tmp/tmp_c8qrsg5.swift:25:12: error:\
    \ cannot convert value of type 'Bool' to expected argument type 'Int'\n    return\
    \ is_simple_power(x, n-1) * x == x\n           ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return (x % n)\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpxw5f5cmp/tmpxw5f5cmp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2608cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2605c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2605c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2605c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxw5f5cmp                        0x000055de68f6f4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002ad260abb460 __libc_start_main +
    245

    6    tmpxw5f5cmp                        0x000055de68f6eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // Fill in the\
    \ blanks\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpg_qm0jha/tmpg_qm0jha.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44806bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44803b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44803b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44803b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_qm0jha                        0x0000562351edc231 <unavailable> + 4657

    5    libc.so.6                          0x00002b44808aa460 __libc_start_main +
    245

    6    tmpg_qm0jha                        0x0000562351edbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n%x == 0 {\n\
    \        return true\n    }\n    else {\n        return false\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpoju8vpd9/tmpoju8vpd9.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae227744c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae22743bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae22743b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae22743a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoju8vpd9                        0x0000558220467246 <unavailable> + 4678

    5    libc.so.6                          0x00002ae227930460 __libc_start_main +
    245

    6    tmpoju8vpd9                        0x0000558220466ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // TODO: fill this\
    \ in\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpc8k86nh6/tmpc8k86nh6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2289e68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2289b5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2289b5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2289b5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc8k86nh6                        0x00005614c00e21b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b228a054460 __libc_start_main +
    245

    6    tmpc8k86nh6                        0x00005614c00e1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ||\
    \ (x & (n - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp32imbbtt/tmp32imbbtt.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b0d4f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b0d1e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b0d1e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b0d1e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32imbbtt                        0x0000556a277c3417 <unavailable> + 5143

    5    libc.so.6                          0x00002b0b0d6de460 __libc_start_main +
    245

    6    tmp32imbbtt                        0x0000556a277c2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let x = Int(x)\n\
    \    let n = Int(n)\n    if x != 1 {\n        if x == n { return false }\n   \
    \     if n >= (x >> 1) { return false }\n        if n >= (x & -x) { return false\
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpu7g1iagu/tmpu7g1iagu.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b871aa09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b871a700b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b871a700988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b871a6ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7g1iagu                        0x00005616540b43da <unavailable> + 5082

    5    libc.so.6                          0x00002b871abf5460 __libc_start_main +
    245

    6    tmpu7g1iagu                        0x00005616540b3f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power(x,\
    \ n: &n, Int64(x))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmvozybzw.swift:19:38: error: extra argument in call\n    return\
    \ is_simple_power(x, n: &n, Int64(x))\n                          ~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpmvozybzw.swift:19:34: error: '&' used with non-inout argument of type\
    \ 'Int'\n    return is_simple_power(x, n: &n, Int64(x))\n                    \
    \             ^~\n                                 \n/tmp/tmpmvozybzw.swift:19:34:\
    \ error: cannot pass immutable value as inout argument: 'n' is a 'let' constant\n\
    \    return is_simple_power(x, n: &n, Int64(x))\n                            \
    \     ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    func is_power_of(n,\
    \ x: Int) -> Bool {\n        if x == 1 {\n            return true\n        }\n\
    \        var remain = x / n\n        if remain == 0 {\n            return true\n\
    \        }\n        if remain == 1 {\n            return is_power_of(n, x)\n \
    \       }\n        return false\n    }\n    return is_power_of(n, x)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpy77418s5.swift:19:22: error: unnamed parameters must be written\
    \ with the empty name '_'\n    func is_power_of(n, x: Int) -> Bool {\n       \
    \              ^\n                     _: \n/tmp/tmpy77418s5.swift:19:22: error:\
    \ cannot find type 'n' in scope\n    func is_power_of(n, x: Int) -> Bool {\n \
    \                    ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    \n    var res = true\n    \n    for _ in 0..<n\
    \ {\n        if x%n != 0 {\n            res = false\n            break\n     \
    \   }\n        x = x/n\n    }\n    \n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplbpa6us4.swift:30:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = x/n\n        ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x > n { return\
    \ false }\n    if x == 1 { return true }\n    if x % n == 0 { return true }\n\
    \    if x > n { return false }\n    let y = x\n    for _ in 0..<n {\n        y\
    \ = y * n\n    }\n    return y == x\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpaum86_ri.swift:25:9: error: cannot assign to value: 'y' is a 'let'\
    \ constant\n        y = y * n\n        ^\n/tmp/tmpaum86_ri.swift:23:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let y = x\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 0 || x\
    \ == n {\n        return true\n    }\n    var x_square = x*x\n    while x_square\
    \ < n {\n        x_square *= x\n    }\n    if x_square == n {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp7ty659dh/tmp7ty659dh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ee9834c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ee952bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ee952b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ee952a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ty659dh                        0x00005610de48b1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b1ee9a20460 __libc_start_main +
    245

    6    tmp7ty659dh                        0x00005610de48ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return n**x ==\
    \ x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpses4ebc6.swift:19:13: error: cannot find operator '**' in scope\n\
    \    return n**x == x\n            ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let x: Double =\
    \ Double(x)\n    let n: Double = Double(n)\n    return x * n == n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmptntlxh5z/tmptntlxh5z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0feb71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0fe868b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0fe868988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0fe8677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptntlxh5z                        0x000055849488b1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002ac0fed5d460 __libc_start_main +
    245

    6    tmptntlxh5z                        0x000055849488ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // TODO: use the\
    \ is_power_of_x function\n    if n == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x == 1 {\n        return false\n\
    \    }\n    if x > n {\n        return false\n    }\n    if x < 1 {\n        return\
    \ false\n    }\n    var remain = Int(x)\n    for _ in 0..<n {\n        if remain\
    \ == 0 {\n            return false\n        }\n        remain /= Int(n)\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpczu6nk_l/tmpczu6nk_l.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc4d777c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc4d46eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc4d46e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc4d46d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpczu6nk_l                        0x00005641900e9476 <unavailable> + 5238

    5    libc.so.6                          0x00002adc4d963460 __libc_start_main +
    245

    6    tmpczu6nk_l                        0x00005641900e9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // TODO: Write\
    \ your code in Swift\n    let y = Int(pow(Double(x), Double(n)))\n    return y\
    \ == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpb071501w.swift:20:17: error: cannot find 'pow' in scope\n    let\
    \ y = Int(pow(Double(x), Double(n)))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n\n    let sq = n * n\n    let sqx = x * x\n    return\
    \ sq == sqx || sqx == (x * sq) % (n * n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpll079trc/tmpll079trc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9359c6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9359965b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9359965988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93599647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpll079trc                        0x000055adcea33246 <unavailable> + 4678

    5    libc.so.6                          0x00002b9359e5a460 __libc_start_main +
    245

    6    tmpll079trc                        0x000055adcea32ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // Your code here\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpf6btue8p/tmpf6btue8p.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22de603c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22de2fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22de2fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22de2f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf6btue8p                        0x000056119f76c231 <unavailable> + 4657

    5    libc.so.6                          0x00002b22de7ef460 __libc_start_main +
    245

    6    tmpf6btue8p                        0x000056119f76be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978954
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x**n ==\
    \ x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpplhir2ab.swift:19:13: error: cannot find operator '**' in scope\n\
    \    return x**n == x\n            ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n < 1 {\n  \
    \      return false\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ n == 1 {\n        return false\n    }\n    if n == x {\n        return true\n\
    \    }\n    if x != Int(pow(Double(x), Double(n))) && is_simple_power(x, Int(pow(Double(x),\
    \ Double(n - 1)))){\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmwj0tvlf.swift:31:17: error: cannot find 'pow' in scope\n    if\
    \ x != Int(pow(Double(x), Double(n))) && is_simple_power(x, Int(pow(Double(x),\
    \ Double(n - 1)))){\n                ^~~\n/tmp/tmpmwj0tvlf.swift:31:70: error:\
    \ cannot find 'pow' in scope\n    if x != Int(pow(Double(x), Double(n))) && is_simple_power(x,\
    \ Int(pow(Double(x), Double(n - 1)))){\n                                     \
    \                                ^~~\n/tmp/tmpmwj0tvlf.swift:31:62: error: missing\
    \ argument labels 'x:n:' in call\n    if x != Int(pow(Double(x), Double(n))) &&\
    \ is_simple_power(x, Int(pow(Double(x), Double(n - 1)))){\n                  \
    \                                           ^\n                              \
    \                                x: n: \n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    return is_power2(n) && is_power(x, n)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplca_mxgp.swift:22:12: error: cannot find 'is_power2' in scope\n\
    \    return is_power2(n) && is_power(x, n)\n           ^~~~~~~~~\n/tmp/tmplca_mxgp.swift:22:28:\
    \ error: cannot find 'is_power' in scope\n    return is_power2(n) && is_power(x,\
    \ n)\n                           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let is_pow = pow(n,\
    \ x)\n    return is_pow == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpn3z3j01l.swift:19:18: error: cannot find 'pow' in scope\n    let\
    \ is_pow = pow(n, x)\n                 ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let pow = pow(x,\
    \ n)\n    return pow == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7bdptxzq.swift:19:15: error: use of local variable 'pow' before\
    \ its declaration\n    let pow = pow(x, n)\n              ^\n/tmp/tmp7bdptxzq.swift:19:9:\
    \ note: 'pow' declared here\n    let pow = pow(x, n)\n        ^\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return n == 1\n    } else {\n        return false\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp9oxzmte6/tmp9oxzmte6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b941c026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b941bd1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b941bd1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b941bd1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9oxzmte6                        0x0000557687b591b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b941c212460 __libc_start_main +
    245

    6    tmp9oxzmte6                        0x0000557687b58e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // TODO: implement\
    \ this function\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpvl9no3uw/tmpvl9no3uw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec2d22bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec2cf22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec2cf22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec2cf217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvl9no3uw                        0x00005564779c8231 <unavailable> + 4657

    5    libc.so.6                          0x00002aec2d417460 __libc_start_main +
    245

    6    tmpvl9no3uw                        0x00005564779c7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    // if n**int == x, it is simple power\n    return\
    \ is_power_of_two_x(n, x) || is_power_of_two_x(x, n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbu2u6anm.swift:23:12: error: cannot find 'is_power_of_two_x' in\
    \ scope\n    return is_power_of_two_x(n, x) || is_power_of_two_x(x, n)\n     \
    \      ^~~~~~~~~~~~~~~~~\n/tmp/tmpbu2u6anm.swift:23:39: error: cannot find 'is_power_of_two_x'\
    \ in scope\n    return is_power_of_two_x(n, x) || is_power_of_two_x(x, n)\n  \
    \                                    ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    switch x {\n    case n / 1:\n        return true\n\
    \    case n * (n - 1):\n        return true\n    default:\n        return false\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp90ymk6lb/tmp90ymk6lb.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b507dd18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b507da0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b507da0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b507da0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90ymk6lb                        0x00005587718e9246 <unavailable> + 4678

    5    libc.so.6                          0x00002b507df04460 __libc_start_main +
    245

    6    tmp90ymk6lb                        0x00005587718e8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ x < 0 {\n        return false\n    }\n    \n    // 1**x==n\n    if x == 1 {\n\
    \        return true\n    }\n    // x**n==x\n    if x == n {\n        return true\n\
    \    }\n    // n**int=x\n    if x * n == x {\n        return true\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpz4rn162l/tmpz4rn162l.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad35788dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad357584b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad357584988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3575837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4rn162l                        0x000055ff483961b6 <unavailable> + 4534

    5    libc.so.6                          0x00002ad357a79460 __libc_start_main +
    245

    6    tmpz4rn162l                        0x000055ff48395e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n <= 0 {\n \
    \       return false\n    }\n    if x == 1 {\n        return true\n    }\n   \
    \ let r = Int(log_10(x)) % n\n    return r == Int(floor(log_10(x) / n))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdz20w9z7.swift:25:17: error: cannot find 'log_10' in scope\n  \
    \  let r = Int(log_10(x)) % n\n                ^~~~~~\n/tmp/tmpdz20w9z7.swift:26:21:\
    \ error: cannot find 'floor' in scope\n    return r == Int(floor(log_10(x) / n))\n\
    \                    ^~~~~\n/tmp/tmpdz20w9z7.swift:26:27: error: cannot find 'log_10'\
    \ in scope\n    return r == Int(floor(log_10(x) / n))\n                      \
    \    ^~~~~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    \n    var i = n / x\n    for _ in 0..<i {\n  \
    \      if n%x == 0 {\n            return true\n        }\n        n = n/x\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpb5gzcb_x.swift:28:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n/x\n        ^\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return pow(x, Double(n))\
    \ ===  x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq1tfifkw.swift:19:12: error: cannot find 'pow' in scope\n    return\
    \ pow(x, Double(n)) ===  x\n           ^~~\n/tmp/tmpq1tfifkw.swift:19:35: error:\
    \ argument type 'Int' expected to be an instance of a class or class-constrained\
    \ type\n    return pow(x, Double(n)) ===  x\n                                \
    \  ^\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    guard x != 0 else {\n        return false\n  \
    \  }\n    var temp = pow(x, Int(n))\n    return temp == x\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptf9hmaig.swift:25:16: error: cannot find 'pow' in scope\n    var\
    \ temp = pow(x, Int(n))\n               ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let n = abs(n)\n\
    \    if n <= 1 {\n        return true\n    }\n    if x < 1 {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n   \
    \     return false\n    }\n    let k = x >> 1\n    return k == (n >> 1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp69ybo0_l/tmp69ybo0_l.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf95558c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf9524fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf9524f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf9524e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69ybo0_l                        0x000055baec380336 <unavailable> + 4918

    5    libc.so.6                          0x00002adf95744460 __libc_start_main +
    245

    6    tmp69ybo0_l                        0x000055baec37ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n\tlet log2 = log2Int(n)\n\
    \tlet c = Int(round(x))\n\treturn (x & (1 << (log2 - 1))) == (x >> (log2 - 1))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplwfzlyo0.swift:19:13: error: cannot find 'log2Int' in scope\n \
    \       let log2 = log2Int(n)\n                   ^~~~~~~\n/tmp/tmplwfzlyo0.swift:20:14:\
    \ error: cannot find 'round' in scope\n        let c = Int(round(x))\n       \
    \             ^~~~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if x == 0 {\n        return false\n    }\n   \
    \ let x_sqrt = Pow(x, Int(n))\n    return x_sqrt == n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1bw83jis.swift:25:18: error: cannot find 'Pow' in scope\n    let\
    \ x_sqrt = Pow(x, Int(n))\n                 ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return true\n    }\n    var i = 2\n    var r = x\n    var m = n\n    for\
    \ ; ; i++ {\n        if (r != 0 && r != 1) {\n            if m == 1 {\n      \
    \          if r == 0 {\n                    return true\n                }\n \
    \               else {\n                    return false\n                }\n\
    \            }\n            if m == i {\n                return true\n       \
    \     }\n        }\n        if r != 0 {\n            r = r / n\n        }\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpo4v7idvs.swift:25:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for ; ; i++ {\n    ^   ~~~~~~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    \n    func helper(_\
    \ x: Int, _ n: Int) -> Bool {\n        if (n <= 0) || (x == 0) {\n           \
    \ return false\n        }\n        \n        return (x == pow(x, Float(n), Float(1.0)))\
    \ || helper(x, n-1)\n    }\n    \n    return helper(x, n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgas65u4s.swift:25:22: error: cannot find 'pow' in scope\n     \
    \   return (x == pow(x, Float(n), Float(1.0))) || helper(x, n-1)\n           \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x==0 || n==0\
    \ || n==1 {\n        return true\n    }\n    if n<1 {\n        return false\n\
    \    }\n    return is_simple_power(x, n-1) == pow(x, n-1, n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpeo5d5p7s.swift:25:39: error: cannot find 'pow' in scope\n    return\
    \ is_simple_power(x, n-1) == pow(x, n-1, n)\n                                \
    \      ^~~\n/tmp/tmpeo5d5p7s.swift:25:27: error: missing argument labels 'x:n:'\
    \ in call\n    return is_simple_power(x, n-1) == pow(x, n-1, n)\n            \
    \              ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n \
    \       return n == 1\n    }\n    return n == pow(x, Int(n))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkb80iu4r.swift:22:17: error: cannot find 'pow' in scope\n    return\
    \ n == pow(x, Int(n))\n                ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n ** int ==\
    \ x {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpprzz3q0i.swift:19:10: error: cannot find operator '**' in scope\n\
    \    if n ** int == x {\n         ^~\n/tmp/tmpprzz3q0i.swift:19:13: error: cannot\
    \ find 'int' in scope\n    if n ** int == x {\n            ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n\tswitch x {\n\tcase\
    \ 1:\n\t\treturn true\n\tcase 2:\n\t\treturn n == 1\n\tcase 3:\n\t\treturn n ==\
    \ 2 || n == 1\n\tcase 4:\n\t\treturn n == 4 || n == 3\n\tcase 5:\n\t\treturn n\
    \ == 4 || n == 3 || n == 2\n\tcase 6:\n\t\treturn n == 4 || n == 3 || n == 2 ||\
    \ n == 1 || n == 1\n\tcase 7:\n\t\treturn n == 6 || n == 5 || n == 4 || n == 3\
    \ || n == 2\n\tcase 8:\n\t\treturn n == 8 || n == 7 || n == 6 || n == 5 || n ==\
    \ 4 || n == 3 || n == 2\n\tcase 9:\n\t\treturn n == 8 || n == 7 || n == 6 || n\
    \ == 5 || n == 4 || n == 3 || n == 2 || n == 1 || n == 1\n\tdefault:\n\t\treturn\
    \ false\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp0gknxehy/tmp0gknxehy.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae07d8edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae07d5e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae07d5e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae07d5e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0gknxehy                        0x0000562ae40871b6 <unavailable> + 4534

    5    libc.so.6                          0x00002ae07dad9460 __libc_start_main +
    245

    6    tmp0gknxehy                        0x0000562ae4086e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var result = (pow(x,\
    \ n) == x) // True\n    for _ in 1 ..< n {\n        result = result || (pow(x,\
    \ n) == x)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpv555dpzw.swift:19:19: error: cannot find 'pow' in scope\n    var\
    \ result = (pow(x, n) == x) // True\n                  ^~~\n/tmp/tmpv555dpzw.swift:21:29:\
    \ error: cannot find 'pow' in scope\n        result = result || (pow(x, n) ==\
    \ x)\n                            ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return n == 0 ||\
    \ x == 0 || (n % x == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpa2c7zdzx/tmpa2c7zdzx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a4b979c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a4b670b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a4b670988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a4b66f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2c7zdzx                        0x000055e86fba3246 <unavailable> + 4678

    5    libc.so.6                          0x00002b9a4bb65460 __libc_start_main +
    245

    6    tmpa2c7zdzx                        0x000055e86fba2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // TODO: implement\
    \ me\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp_fkbuarm/tmp_fkbuarm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4496a7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4496775b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4496775988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44967747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_fkbuarm                        0x000055d86e9a51b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b4496c6a460 __libc_start_main +
    245

    6    tmp_fkbuarm                        0x000055d86e9a4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n    if n == 0 {\n        return false\n    }\n   \
    \ if n & n == 0 {\n        return n == x * x\n    }\n    return is_simple_power(x,\
    \ n / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp79d4dx_u.swift:28:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n / 2)\n                          ^\n  \
    \                         x: n: \n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let base = 1\n\
    \    let mut acc = base\n    var pow_x = x\n    for _ in 0..<n {\n        acc\
    \ = acc * pow_x\n        pow_x /= base\n    }\n    return acc == x\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpyi2lxbzu.swift:20:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut acc = base\n\
    \            ^\n/tmp/tmpyi2lxbzu.swift:20:13: note: join the identifiers together\n\
    \    let mut acc = base\n        ~~~~^~~\n        mutacc\n/tmp/tmpyi2lxbzu.swift:20:13:\
    \ note: join the identifiers together with camel-case\n    let mut acc = base\n\
    \        ~~~~^~~\n        mutAcc\n/tmp/tmpyi2lxbzu.swift:23:9: error: cannot find\
    \ 'acc' in scope\n        acc = acc * pow_x\n        ^~~\n/tmp/tmpyi2lxbzu.swift:23:15:\
    \ error: cannot find 'acc' in scope\n        acc = acc * pow_x\n             \
    \ ^~~\n/tmp/tmpyi2lxbzu.swift:26:12: error: cannot find 'acc' in scope\n    return\
    \ acc == x\n           ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    guard x > 0 &&\
    \ n > 0 else { return false }\n    var power = 1\n    var npower = n\n    for\
    \ _ in 0..<(npower) {\n        if x == power * npower {\n            return true\n\
    \        }\n        power *= x\n        npower *= n\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8mo1pcg_/tmp8mo1pcg_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b442fc72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b442f969b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b442f969988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b442f9687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mo1pcg_                        0x0000562ab0aa1336 <unavailable> + 4918

    5    libc.so.6                          0x00002b442fe5e460 __libc_start_main +
    245

    6    tmp8mo1pcg_                        0x0000562ab0aa0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var result = false\n\
    \    switch n {\n    case 1:\n        result = x == n\n    case 2:\n        result\
    \ = x != 0\n    case 3:\n        result = x == (n ^ 3)\n    case 4:\n        result\
    \ = x != 0\n    case 5:\n        result = x == (n ^ 5)\n    case 6:\n        result\
    \ = x != 0\n    case 7:\n        result = x == (n ^ 7)\n    case 8:\n        result\
    \ = x != 0\n    case 9:\n        result = x == (n ^ 9)\n    case 10:\n       \
    \ result = x != 0\n    case 11:\n        result = x == (n ^ 11)\n    case 12:\n\
    \        result = x != 0\n    case 13:\n        result = x == (n ^ 13)\n    case\
    \ 14:\n        result = x != 0\n    case 15:\n        result = x == (n ^ 15)\n\
    \    case 16:\n        result = x != 0\n    case 17:\n        result = x == (n\
    \ ^ 17)\n    case 18:\n        result = x != 0\n    case 19:\n        result =\
    \ x == (n ^ 19)\n    case 20:\n        result = x != 0\n    case 21:\n       \
    \ result = x == (n ^ 21)\n    case 22:\n        result = x != 0\n    case 23:\n\
    \        result = x == (n ^ 23)\n    case 24:\n        result = x != 0\n    case\
    \ 25:\n        result = x == (n ^ 25)\n    case 26:\n        result = x != 0\n\
    \    case 27:\n        result = x == (n ^ 27)\n    case 28:\n        result =\
    \ x != 0\n    case 29:\n        result = x == (n ^ 29)\n    case 30:\n       \
    \ result = x != 0\n    case 31:\n        result = x == (n ^ 31)\n    case 32:\n\
    \        result = x != 0\n    case 33:\n        result = x == (n ^ 33)\n    case\
    \ 34:\n        result = x != 0\n    case 35:\n        result = x == (n ^ 35)\n\
    \    case 36:\n        result = x != 0\n    case 37:\n        result = x == (n\
    \ ^ 37)\n    case 38:\n        result = x != 0\n    case 39:\n        result =\
    \ x == (n ^ 39)\n    case 40:\n        result = x != 0\n    case 41:\n       \
    \ result = x == (n ^ 41)\n    case 42:\n        result = x != 0\n    case 43:\n\
    \        result = x == (n ^ 43)\n    case 44:\n        result = x != 0\n    case\
    \ 45:\n        result = x == (n ^ 45)\n    case 46:\n        result = x != 0\n\
    \    case 47:\n        result = x == (n ^ 47)\n    case 48:\n        result =\
    \ x != 0\n    case 49:\n        result = x == (n ^ 49)\n    case 50:\n       \
    \ result = x != 0\n    case 51:\n        result = x == (n ^ 51)\n    case 52:\n\
    \        result = x != \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp76t2keaw.swift:125:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmp76t2keaw.swift:149:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmp76t2keaw.swift:18:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmp76t2keaw.swift:20:5: error: switch must be exhaustive\n\
    \    switch n {\n    ^\n/tmp/tmp76t2keaw.swift:20:5: note: do you want to add\
    \ a default clause?\n    switch n {\n    ^\n/tmp/tmp76t2keaw.swift:128:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return (Int.log(x)/Int.log(n))*Int.log(n)\
    \ == Int((x/n)*(n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpopo5wja8.swift:19:17: error: type 'Int' has no member 'log'\n \
    \   return (Int.log(x)/Int.log(n))*Int.log(n) == Int((x/n)*(n))\n            ~~~\
    \ ^~~\n/tmp/tmpopo5wja8.swift:19:28: error: type 'Int' has no member 'log'\n \
    \   return (Int.log(x)/Int.log(n))*Int.log(n) == Int((x/n)*(n))\n            \
    \           ~~~ ^~~\n/tmp/tmpopo5wja8.swift:19:40: error: type 'Int' has no member\
    \ 'log'\n    return (Int.log(x)/Int.log(n))*Int.log(n) == Int((x/n)*(n))\n   \
    \                                ~~~ ^~~\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n < 0 {\n  \
    \      return false\n    }\n    if n == 0 {\n        return true\n    }\n    if\
    \ x % n == 0 {\n        return is_simple_power(x, n-1)\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfmp_15qb.swift:26:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n < 1 {\n  \
    \      return false\n    }\n    let s = pow(Double(x), Double(n))\n    return\
    \ s == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpy6d1j4t4.swift:22:13: error: cannot find 'pow' in scope\n    let\
    \ s = pow(Double(x), Double(n))\n            ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n  var power = pow(x,\
    \ Int(n))\n  while n > 1 { power = pow(x, n) }\n  return power == x\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1pjj045s.swift:19:15: error: cannot find 'pow' in scope\n  var\
    \ power = pow(x, Int(n))\n              ^~~\n/tmp/tmp1pjj045s.swift:20:25: error:\
    \ cannot find 'pow' in scope\n  while n > 1 { power = pow(x, n) }\n          \
    \              ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    // TODO: check\
    \ math\n    if n==0 {\n        return true\n    }\n    if n<0 {\n        return\
    \ false\n    }\n    if x<=1 {\n        return false\n    }\n    if x%n==0 {\n\
    \        return true\n    }\n    return is_simple_power(x, n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjcmhxf6j.swift:32:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n-1)\n                          ^\n    \
    \                       x: n: \n"
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 0 || n\
    \ == 0 {\n        return true\n    }\n    return x & (n - 1) == 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpqgq7jr2q/tmpqgq7jr2q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3a7aa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3a779ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3a779a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3a77997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqgq7jr2q                        0x000055a8fab9c417 <unavailable> + 5143

    5    libc.so.6                          0x00002ab3a7c8f460 __libc_start_main +
    245

    6    tmpqgq7jr2q                        0x000055a8fab9be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n  // TODO: Implement\
    \ me\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpnea4cnx_/tmpnea4cnx_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9274099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9273d90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9273d90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9273d8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnea4cnx_                        0x000055f7b5a561b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b9274285460 __libc_start_main +
    245

    6    tmpnea4cnx_                        0x000055f7b5a55e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    guard x <= n &&\
    \ n > 0 else { return false }\n    if n == 1 { return true }\n    if n == 2 {\
    \ return x == n }\n    if n % 2 == 0 { return is_simple_power(x * x, n / 2) }\n\
    \    return is_simple_power(x * x, n / 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq24brrox.swift:22:43: error: missing argument labels 'x:n:' in\
    \ call\n    if n % 2 == 0 { return is_simple_power(x * x, n / 2) }\n         \
    \                                 ^\n                                        \
    \   x:     n: \n/tmp/tmpq24brrox.swift:23:27: error: missing argument labels 'x:n:'\
    \ in call\n    return is_simple_power(x * x, n / 2)\n                        \
    \  ^\n                           x:     n: \n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    guard n > 0 else\
    \ {\n        return true\n    }\n    guard n % x == 0 else {\n        return false\n\
    \    }\n    return is_simple_power(x, n / x)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpo3oybg76.swift:25:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n / x)\n                          ^\n  \
    \                         x: n: \n"
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n  switch n {\n  case\
    \ 0:\n    return false\n  case 1:\n    return true\n  default:\n    return x*n\
    \ == x;\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp5lm2sggr/tmp5lm2sggr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8d769bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8d7392b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8d7392988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8d73917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5lm2sggr                        0x000055ea4f4da1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002ac8d7887460 __libc_start_main +
    245

    6    tmp5lm2sggr                        0x000055ea4f4d9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n%2 == 0 { return\
    \ true}\n    if n%2 == 1 {\n        return x > 1 && !is_simple_power(x, n/2)\n\
    \    }\n    return is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptaipg32n.swift:21:41: error: missing argument labels 'x:n:' in\
    \ call\n        return x > 1 && !is_simple_power(x, n/2)\n                   \
    \                     ^\n                                         x: n: \n/tmp/tmptaipg32n.swift:23:27:\
    \ error: missing argument labels 'x:n:' in call\n    return is_simple_power(x,\
    \ n-1)\n                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var ret: Bool\n\
    \    if n >= x.trunc() {\n        if n == 0 {\n            ret = true\n      \
    \  } else {\n            if pow(x, Int(n)) != x {\n                ret = false\n\
    \            }\n        }\n    } else {\n        if pow(x, Int(n)) == x {\n  \
    \          ret = true\n        }\n    }\n    return ret\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpt9qqf2mw.swift:20:15: error: value of type 'Int' has no member\
    \ 'trunc'\n    if n >= x.trunc() {\n            ~ ^~~~~\n/tmp/tmpt9qqf2mw.swift:24:16:\
    \ error: cannot find 'pow' in scope\n            if pow(x, Int(n)) != x {\n  \
    \             ^~~\n/tmp/tmpt9qqf2mw.swift:29:12: error: cannot find 'pow' in scope\n\
    \        if pow(x, Int(n)) == x {\n           ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x <= 1 &&\
    \ x >= 0 && n == Int(pow(Double(x), Double(n)))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpz4sanju6.swift:19:41: error: cannot find 'pow' in scope\n    return\
    \ x <= 1 && x >= 0 && n == Int(pow(Double(x), Double(n)))\n                  \
    \                      ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return (x == Int(pow(Double(x),\
    \ Double(n))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpyl7em5k0.swift:19:22: error: cannot find 'pow' in scope\n    return\
    \ (x == Int(pow(Double(x), Double(n))))\n                     ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n\tswitch {\n\tcase\
    \ x == n:\n\t\treturn true\n\tcase x % n == 0 || x == 1:\n\t\treturn false\n\t\
    case x == (n << 1):\n\t\treturn is_simple_power(x, n >> 1)\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpm_dx0k4v.swift:19:9: error: expected expression in 'switch' statement\n\
    \        switch {\n               ^\n/tmp/tmpm_dx0k4v.swift:25:25: error: missing\
    \ argument labels 'x:n:' in call\n                return is_simple_power(x, n\
    \ >> 1)\n                                      ^\n                           \
    \            x: n: \n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    guard n >= 1 else\
    \ { return false }\n    var power = 1\n    var x_pow_n = x\n    var result = true\n\
    \    while n != 0 {\n        if (x_pow_n % n == 0) {\n            result = false\n\
    \            break\n        }\n        power = power + 1\n        x_pow_n = x_pow_n\
    \ * x\n        n = n / 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpt655s7h8.swift:30:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n *\
    \ (n + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpbves42n3/tmpbves42n3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b038ec11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b038e908b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b038e908988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b038e9077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbves42n3                        0x0000556f007ec1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b038edfd460 __libc_start_main +
    245

    6    tmpbves42n3                        0x0000556f007ebe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    return x != 1 &&\
    \ is_simple_power_of_n(x) && (x & (n - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphe_pz7c1.swift:19:22: error: cannot find 'is_simple_power_of_n'\
    \ in scope\n    return x != 1 && is_simple_power_of_n(x) && (x & (n - 1)) == 0\n\
    \                     ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    let result = ((n)\
    \ ** int(x) == x)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpznc6i20r.swift:19:23: error: cannot find operator '**' in scope\n\
    \    let result = ((n) ** int(x) == x)\n                      ^~\n/tmp/tmpznc6i20r.swift:19:26:\
    \ error: cannot find 'int' in scope\n    let result = ((n) ** int(x) == x)\n \
    \                        ^~~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    switch {\n    case\
    \ n == 0, x % n == 0: return true\n    default:\n        return is_simple_power(x,\
    \ n-1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpa5fz5nez.swift:19:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n/tmp/tmpa5fz5nez.swift:22:31: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-1)\n            \
    \                  ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n<2 {\n    \
    \    return true\n    }\n    if n%2 != 0 {\n        return false\n    }\n    return\
    \ is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1imcko31.swift:25:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n-1)\n                          ^\n    \
    \                       x: n: \n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 0 {\n \
    \       return true\n    }\n    if n == 1 {\n        return true\n    }\n    if\
    \ n % 2 == 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    return is_simple_power(x, n / 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpi7exx0oi.swift:31:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n / 2)\n                          ^\n  \
    \                         x: n: \n"
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var x = x\n   \
    \ var n = n\n    \n    while n > 0 {\n        if x * n == x {\n            return\
    \ true\n        }\n        \n        x /= n\n        n -= 1\n    }\n    \n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp6pi2kcyf/tmp6pi2kcyf.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae14cedec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae14cbd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae14cbd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae14cbd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6pi2kcyf                        0x000055b98d1692c1 <unavailable> + 4801

    5    libc.so.6                          0x00002ae14d0ca460 __libc_start_main +
    245

    6    tmp6pi2kcyf                        0x000055b98d168ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979139
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n///\
    \ true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x:\
    \ 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>>\
    \ is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n\
    /// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n \
    \       return true\n    }\n\n    // n is power of x\n    if x%n == 0 {\n    \
    \    return true\n    }\n\n    // n is not power of x\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp1lpygzkq/tmp1lpygzkq.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b813c8e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b813c5d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b813c5d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b813c5d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1lpygzkq                        0x00005577627044a7 <unavailable> + 5287

    5    libc.so.6                          0x00002b813cacc460 __libc_start_main +
    245

    6    tmp1lpygzkq                        0x0000557762703ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979138
