name: HumanEval_56_correct_bracketing
language: swift
prompt: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
  \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
  \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n///\
  \ >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
  \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") ==\
  \ true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
  \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
  ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
  \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
  \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\nassert(correct_bracketing(brackets:\
  \ \"<<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>><<>\")\
  \ == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)"
completions: ["    let startIdx = 0\n    let endIdx = brackets.characters.count\n\
    \    for idx in 0..<endIdx {\n        guard brackets[idx] == '<' else {\n    \
    \        return false\n        }\n        if idx < startIdx {\n            return\
    \ false\n        }\n    }\n    return true", "    for opening, closing := range\
    \ brackets {\n        if opening != closing {\n            return false\n    \
    \    }\n    }\n    return true", "    var bracket_pairs = brackets.characters.split{$0\
    \ == \"<\"}\n    for pair in bracket_pairs {\n        var first = pair.characters.split{$0\
    \ == \"<\"}.first!\n        var second = pair.characters.split{$0 == \">\"}.last!\n\
    \        guard first != second else {\n            return false\n        }\n \
    \   }\n    return true", "    if brackets.isEmpty {\n        return true\n   \
    \ }\n    var result: CharacterSet = .init()\n    brackets = brackets.lowercased()\n\
    \    var opening = false\n    for c in brackets {\n        if opening = !opening\
    \ {\n            if c == \">\" {\n                result.insert(\"<\")\n     \
    \       } else if c == \"<\" {\n                result.insert(\">\")\n       \
    \     } else if c == \"{\" {\n                result.insert(\"{\")\n         \
    \   } else if c == \"}\" {\n                result.insert(\"}\")\n           \
    \ } else if c == \"(\" {\n                result.insert(\"(\")\n            }\
    \ else if c == \")\" {\n                result.insert(\")\")\n            }\n\
    \        }\n    }\n    return !result.isEmpty", "    // The brackets parameter\
    \ is guaranteed to be non-empty and\n    // contain at least one pair of \"<\"\
    \ and \">\" characters.\n    var bracketCount = 0\n    for i in 0..<brackets.characters.count\
    \ {\n        if brackets.characters[i] == '<' {\n            bracketCount += 1\n\
    \        } else if brackets.characters[i] == '>' {\n            bracketCount -=\
    \ 1\n        }\n    }\n    return bracketCount == 0", "    brackets = brackets.replacingOccurrences(of:\
    \ \"<<\", with: \"<\")\n    brackets = brackets.replacingOccurrences(of: \">>\"\
    , with: \">\")\n    brackets = brackets.replacingOccurrences(of: \"<<=\", with:\
    \ \"<=\")\n    brackets = brackets.replacingOccurrences(of: \">>=\", with: \"\
    >=\")\n    brackets = brackets.replacingOccurrences(of: \"<<->\", with: \"<->\"\
    )\n    brackets = brackets.replacingOccurrences(of: \">>->\", with: \">->\")\n\
    \    brackets = brackets.replacingOccurrences(of: \"<<<\", with: \"<<\")\n   \
    \ brackets = brackets.replacingOccurrences(of: \">>>\", with: \">>\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \"<<<=\", with: \"<<=\")\n    brackets =\
    \ brackets.replacingOccurrences(of: \">>>=\", with: \">>>=\")\n    brackets =\
    \ brackets.replacingOccurrences(of: \"<<->=\", with: \"<<->=\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \">>->=\", with: \">>->=\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \"<<<->\", with: \"<<<->\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \">>>->\", with: \">>>->\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \"<<->->\", with: \"<<->->\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \">>->->\", with: \">>->->\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \"<<<->=\", with: \"<<<->=\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \">>>->=\", with: \">>>->=\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \"<<->->=\", with: \"<<->->=\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \">>->->=\", with: \">>->->=\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \"<<<->->\", with: \"<<<->->\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \">>>->->\", with: \">>>->->\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \"<<->->->\", with", "    brackets = brackets.replacingOccurrences(of:\
    \ \"<\", with: \"<\")\n    brackets = brackets.replacingOccurrences(of: \">\"\
    , with: \">\")\n    brackets = brackets.replacingOccurrences(of: \"<<\", with:\
    \ \"<\")\n    brackets = brackets.replacingOccurrences(of: \">>\", with: \">\"\
    )\n    brackets = brackets.replacingOccurrences(of: \"<>\", with: \"<>\")\n  \
    \  brackets = brackets.replacingOccurrences(of: \"<<<\", with: \"<\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \">>>\", with: \">\")\n    brackets = brackets.replacingOccurrences(of:\
    \ \"<>\", with: \"<>\")\n    brackets = brackets.replacingOccurrences(of: \"<<<\"\
    , with: \"<\")\n    brackets = brackets.replacingOccurrences(of: \">>>\", with:\
    \ \">\")\n    brackets = brackets.replacingOccurrences(of: \"<<<\", with: \"<\"\
    )\n    brackets = brackets.replacingOccurrences(of: \">>>\", with: \">\")\n  \
    \  brackets = brackets.replacingOccurrences(of: \"<<<\", with: \"<\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \">>>\", with: \">\")\n    brackets = brackets.replacingOccurrences(of:\
    \ \"<<<\", with: \"<\")\n    brackets = brackets.replacingOccurrences(of: \">>>\"\
    , with: \">\")\n    brackets = brackets.replacingOccurrences(of: \"<<<\", with:\
    \ \"<\")\n    brackets = brackets.replacingOccurrences(of: \">>>\", with: \">\"\
    )\n    brackets = brackets.replacingOccurrences(of: \"<<<\", with: \"<\")\n  \
    \  brackets = brackets.replacingOccurrences(of: \">>>\", with: \">\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \"<<<\", with: \"<\")\n    brackets = brackets.replacingOccurrences(of:\
    \ \">>>\", with: \">\")\n    brackets = brackets.replacingOccurrences(of: \"<<<\"\
    , with: \"<\")\n    brackets = brackets.replacingOccurrences(of: \">>>\", with:\
    \ \">\")\n    brackets = brackets.replacingOccurrences(of: \"<<<\", with: \"<\"\
    )\n    brackets = brackets.replacingOccurrences(of: \">>>\", with: ", "    var\
    \ hasCorrectlyBracketing = 0\n    var i = 0\n    var lastOpeningBracket: String\
    \ = \"\"\n    var lastClosingBracket: String = \"\"\n\n    while i < brackets.characters.count\
    \ {\n        let current = brackets.characters[i]\n\n        switch current {\n\
    \        case \"<\":\n            lastOpeningBracket = brackets.substringWithRange(i..<brackets.endIndex).lowercaseString\n\
    \            i = i + 1\n            lastClosingBracket = \"\"\n        case \"\
    <\":\n            lastClosingBracket = brackets.substringWithRange(i..<brackets.endIndex).lowercaseString\n\
    \            i = i + 1\n            lastOpeningBracket = \"\"\n        case \"\
    <\":\n            lastClosingBracket = brackets.substringWithRange(i..<brackets.endIndex).lowercaseString\n\
    \            i = i + 1\n            lastOpeningBracket = \"\"\n        case \"\
    <\":\n            lastClosingBracket = brackets.substringWithRange(i..<brackets.endIndex).lowercaseString\n\
    \            i = i + 1\n            lastOpeningBracket = \"\"\n        case \"\
    <\":\n            lastClosingBracket = brackets.substringWithRange(i..<brackets.endIndex).lowercaseString\n\
    \            i = i + 1\n            lastOpeningBracket = \"\"\n        default:\n\
    \            lastClosingBracket = brackets.substringWithRange(i..<brackets.endIndex).lowercaseString\n\
    \            i = i + 1\n            lastOpeningBracket = \"\"\n        }\n\n \
    \       if lastOpeningBracket != lastClosingBracket {\n            hasCorrectlyBracketing\
    \ += 1\n        }\n    }\n\n    return hasCorrectlyBracketing == brackets.characters.count",
  "    var bracketMap = Dictionary<String, String>()\n    for character in brackets\
    \ {\n        if character == \"<\" {\n            bracketMap[\"<\"] = \"{\"\n\
    \        } else if character == \">\" {\n            bracketMap[\">\"] = \"}\"\
    \n        } else {\n            bracketMap[character] = \"{\"\n        }\n   \
    \ }\n    var isCorrupt = true\n    for character in bracketMap {\n        if character\
    \ == \"{\" {\n            isCorrupt = false\n        } else if character == \"\
    }\" {\n            isCorrupt = false\n        } else {\n            isCorrupt\
    \ = true\n        }\n    }\n    return !isCorrupt", "    let expectedBrackets\
    \ = brackets.characters\n    guard expectedBrackets.count >= 1 else {\n      \
    \  return false\n    }\n    var bracketCount = 0\n    var openBracket: Character\n\
    \    var isOpenBracket: Bool\n    for openBracket in brackets {\n        bracketCount\
    \ += 1\n        if openBracket == \"<\" {\n            isOpenBracket = false\n\
    \        } else if openBracket == \">\" {\n            isOpenBracket = true\n\
    \        } else {\n            return false\n        }\n    }\n    if bracketCount\
    \ != expectedBrackets.count {\n        return false\n    }\n    if bracketCount\
    \ > 0 && !(isOpenBracket) {\n        return false\n    }\n    if bracketCount\
    \ <= 0 && !(isOpenBracket) {\n        return true\n    }\n    var isFirst = true\n\
    \    for openBracket in brackets {\n        bracketCount -= 1\n        if bracketCount\
    \ == 0 {\n            if isFirst {\n                isFirst = false\n        \
    \    } else {\n                return false\n            }\n        } else {\n\
    \            isFirst = true\n        }\n        if openBracket == \"<\" {\n  \
    \          isOpenBracket = true\n        } else {\n            isOpenBracket =\
    \ false\n        }\n    }\n    return true", "    guard brackets.count > 0 &&\
    \ brackets.contains(\"<\") && brackets.contains(\">\") else { return false }\n\
    \    var openingBracketsSeen = [Int]()\n    var closingBracketsSeen = [Int]()\n\
    \    for i in 1..<brackets.count {\n        let c = brackets[i]\n        if openingBracketsSeen.contains(c)\
    \ {\n            openingBracketsSeen.removeAtIndex(0)\n        }\n        openingBracketsSeen.insert(c,\
    \ at: 0)\n        if closingBracketsSeen.contains(c) {\n            closingBracketsSeen.removeAtIndex(0)\n\
    \        }\n        closingBracketsSeen.insert(c, at: 0)\n    }\n\n    // There\
    \ can't be an equal number of opening brackets and closing brackets\n    // or\
    \ they're all equal.\n    if openingBracketsSeen.count == closingBracketsSeen.count\
    \ {\n        return true\n    }\n\n    // If all brackets are equal, there can\
    \ be an equal number of left brackets\n    // and right brackets, so that left\
    \ brackets are on the same line as\n    // right brackets.\n    var leftBrackets\
    \ = openingBracketsSeen.count\n    var rightBrackets = closingBracketsSeen.count\n\
    \    var numEqual = 0\n    while leftBrackets > rightBrackets && numEqual < leftBrackets\
    \ {\n        leftBrackets -= 1\n        rightBrackets -= 1\n        numEqual++\n\
    \    }\n    if leftBrackets == rightBrackets {\n        return true\n    }\n\n\
    \    // If they're not equal, there can't be an equal number of left brackets\n\
    \    // and right brackets anyway, so no bracketing can be corrected.\n    return\
    \ false", "    var openingBracketCount = 0\n    var lastOpeningBracket = String.Empty\n\
    \    var openingBracket = \"\"\n\n    for i := 0; i < len(brackets); i++ {\n \
    \       openingBracket := brackets[i]\n\n        // Handle the case where we've\
    \ started a bracket\n        if openingBracket == lastOpeningBracket {\n     \
    \       openingBracketCount++\n        } else {\n            // Check to see if\
    \ the current opening bracket is the last one\n            // we saw and if so,\
    \ we're done\n            if openingBracketCount > 0 {\n                // If\
    \ we're not done with opening brackets, fail\n                if openingBracketCount\
    \ == 1 {\n                    return false\n                }\n            }\n\
    \            lastOpeningBracket = openingBracket\n            openingBracketCount\
    \ = 0\n        }\n    }\n\n    // Check to see if we had any brackets left open\n\
    \    if openingBracketCount > 0 {\n        return false\n    }\n\n    // The brackets\
    \ are all closed\n    return true", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n        .filter { $0.characters.count != 0 }\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n        .filter { $0.characters.count\
    \ != 0 }\n\n    return openingBrackets.count == closingBrackets.count", "\tif\
    \ brackets.count == 0 {\n\t\treturn true\n\t}\n\tvar openingBrackets = [String]()\n\
    \tvar closingBrackets = [String]()\n\tbrackets = brackets.replacingOccurrences(of:\
    \ \"<\", with: \"\")\n\tbrackets = brackets.replacingOccurrences(of: \">\", with:\
    \ \"\")\n\tbrackets = brackets.replacingOccurrences(of: \"<>\", with: \"<\")\n\
    \tbrackets = brackets.replacingOccurrences(of: \"<<>>\", with: \">>\")\n\tbrackets\
    \ = brackets.replacingOccurrences(of: \">>\", with: \">\")\n\tbrackets = brackets.replacingOccurrences(of:\
    \ \"<=\", with: \"<<\")\n\tbrackets = brackets.replacingOccurrences(of: \"<=>\"\
    , with: \"<\")\n\tbrackets = brackets.replacingOccurrences(of: \"==\", with: \"\
    =\")\n\tbrackets = brackets.replacingOccurrences(of: \":=\", with: \"==\")\n\t\
    brackets = brackets.replacingOccurrences(of: \"=>\", with: \"==\")\n\tbrackets\
    \ = brackets.replacingOccurrences(of: \">=\", with: \"==\")\n\tbrackets = brackets.replacingOccurrences(of:\
    \ \"<<=\", with: \"<<\")\n\tbrackets = brackets.replacingOccurrences(of: \"<=>=\"\
    , with: \"<\")\n\tbrackets = brackets.replacingOccurrences(of: \"=>=\", with:\
    \ \"==\")\n\tbrackets = brackets.replacingOccurrences(of: \">=>\", with: \"<\"\
    )\n\tbrackets = brackets.replacingOccurrences(of: \"<<=>\", with: \">>\")\n\t\
    brackets = brackets.replacingOccurrences(of: \"<>=\", with: \"<\")\n\tbrackets\
    \ = brackets.replacingOccurrences(of: \"!==\", with: \"!=\")\n\tbrackets = brackets.replacingOccurrences(of:\
    \ \"<!=>\", with: \"<\")\n\tbrackets = brackets.replacingOccurrences(of: \"!=>\"\
    , with: \"!=\")\n\tbrackets = brackets.replacingOccurrences(of: \"!<=>\", with:\
    \ \"!\")\n\tbrackets = brackets.replacingOccurrences(of: \"!=\", with: \"\")\n\
    \tbrackets = brackets.replacingOccurrences(of: \"!=>=\", with: \"!\")\n\tbrackets\
    \ = brackets.replacingOccurrences(of: \"!=\", with: \"\")\n\tbrackets = brackets.replacingOccurrences(of",
  "    let stack = brackets.characters.makeIterator()\n    var last = 0\n    while\
    \ stack.next() != nil {\n        let c = String(stack.next())\n        let isOpen\
    \ = c != \"<\"\n        if last+1 < stack.end() {\n            let next = String(stack.next())\n\
    \            if isOpen {\n                guard next != \"<\" else {\n       \
    \             return false\n                }\n                last = stack.end()\
    \ - 1\n            } else {\n                guard next != \">\" else {\n    \
    \                return false\n                }\n                last = stack.end()\
    \ - 1\n            }\n        } else {\n            guard isOpen else {\n    \
    \            return false\n            }\n            last = stack.end() - 1\n\
    \        }\n    }\n    return stack.next() == nil", "    let first = brackets.characters.first!\n\
    \    let last = brackets.characters.last!\n    if first == \"<\" {\n        return\
    \ last == \">\"\n    }\n    if first == \">\" {\n        return last == \"<\"\n\
    \    }\n    return false", "    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    for opening in openingBrackets {\n        if closing == \"\" {\n        \
    \    return true\n        }\n        for closing in closingBrackets {\n      \
    \      if opening == closing {\n                continue\n            }\n    \
    \        if opening.unicodeScalars.first != closing.unicodeScalars.first {\n \
    \               return false\n            }\n        }\n    }\n    return true",
  "    var didChange = false\n    for openingBracket in brackets.characters {\n  \
    \      let index = brackets.index(of: openingBracket)\n        let closingBracket\
    \ = brackets.substring(from: index)?.dropLast()\n        if let closingBracket\
    \ = closingBracket, openingBracket == closingBracket {\n            didChange\
    \ = true\n        }\n    }\n    return didChange", "    if brackets.isEmpty {\n\
    \        return false\n    }\n    var bracketOpen = String()\n    var bracketClose\
    \ = String()\n    var lastIndex = brackets.characters.count\n    for b in brackets.characters\
    \ {\n        bracketOpen.append(String(b))\n        if b == brackets.characters.last!\
    \ {\n            bracketClose.append(String(b))\n            lastIndex--\n   \
    \     } else {\n            bracketClose.append(String(b))\n        }\n    }\n\
    \    if lastIndex != brackets.characters.count {\n        return false\n    }\n\
    \    if bracketOpen != bracketClose {\n        return false\n    }\n    return\
    \ true", "    if let brackets = brackets.components(separatedBy: \"<\") {\n  \
    \      if let lastIndex = brackets.count - 1 {\n            return brackets[lastIndex]\
    \ == \">\"\n        }\n    }\n    return false", "\tbrackets = brackets.lowercased()\n\
    \tbrackets = brackets.replacingOccurrences(of: \"<\", with: \">\")\n\tbrackets\
    \ = brackets.replacingOccurrences(of: \">>\", with: \"<\")\n\tbrackets = brackets.replacingOccurrences(of:\
    \ \"><\", with: \"<<\")\n\tbrackets = brackets.replacingOccurrences(of: \"<>\"\
    , with: \"<\")\n\tbrackets = brackets.replacingOccurrences(of: \"<<<\", with:\
    \ \"<<\")\n\tbrackets = brackets.replacingOccurrences(of: \">>>\", with: \">>\"\
    )\n\tbrackets = brackets.replacingOccurrences(of: \"<<<<\", with: \">>\")\n\t\
    return brackets.characters.count == brackets.utf16.count", "    let open = brackets.characters\n\
    \        .filter { $0 != \">\" && $0 != \"<\" } // remove > and <\n        .map\
    \ { String($0) } // convert to a string\n    let closed = brackets.characters.filter\
    \ { $0 == \"<\" || $0 == \">\" } // remove <> and >\n    return open.count ==\
    \ closed.count", "    var isCorrect = false\n    brackets.split(\"\").forEach({\n\
    \        var isBracket = false\n        let character = $0\n        if let openingCharIndex\
    \ = brackets.characters.index(of: character) {\n            isBracket = (openingCharIndex\
    \ + 1 != brackets.characters.count)\n        } else {\n            isBracket =\
    \ false\n        }\n        if isBracket {\n            if let closingCharIndex\
    \ = brackets.characters.index(of: \">\") {\n                if brackets.characters.count\
    \ > openingCharIndex {\n                    isCorrect = isCorrect || (openingCharIndex\
    \ < closingCharIndex)\n                }\n            } else {\n             \
    \   isCorrect = false\n            }\n        }\n    })\n    return isCorrect",
  "\tvar firstBracket = brackets.startIndex\n\tvar lastBracket = brackets.endIndex\n\
    \tfor firstBracket < lastBracket {\n\t\tswitch brackets.characters[firstBracket]\
    \ {\n\t\tcase '<':\n\t\t\tfirstBracket++\n\t\t\tbreak\n\t\tcase '>':\n\t\t\tfirstBracket++\n\
    \t\t\tbreak\n\t\tdefault:\n\t\t\tbreak\n\t\t}\n\t}\n\tfirstBracket += 1\n\tfor\
    \ firstBracket < lastBracket {\n\t\tswitch brackets.characters[firstBracket] {\n\
    \t\tcase '<':\n\t\t\tfirstBracket++\n\t\t\tbreak\n\t\tcase '>':\n\t\t\tfirstBracket++\n\
    \t\t\tbreak\n\t\tdefault:\n\t\t\tbreak\n\t\t}\n\t}\n\treturn firstBracket == lastBracket",
  "    let lenghtOfBrackets = brackets.characters.count\n    guard lenghtOfBrackets\
    \ > 0 else {\n        return true\n    }\n    let openingBracketCount = brackets.characters.reduce(0,\
    \ {$0 + $1 == \"<\"})\n    let closingBracketCount = brackets.characters.reduce(0,\
    \ {$0 + $1 == \"<\"}) + 1\n    return (openingBracketCount == lenghtOfBrackets\
    \ - closingBracketCount)", "    // If brackets is empty, no bracketing is necessary.\n\
    \    if brackets.characters.count == 0 {\n        return true\n    }\n\n    //\
    \ If there are any characters in brackets other than \"<\" or \"<\", bracketing\
    \ is necessary.\n    if brackets.rangeOfCharacter(from: CharacterSet.any) != nil\
    \ {\n        return true\n    }\n\n    // For every opening bracket, check whether\
    \ there is a corresponding closing bracket.\n    for i in 0..<brackets.characters.count\
    \ {\n        if brackets.characters.count <= i + 1 {\n            return false\n\
    \        }\n\n        if brackets.characters.count > i + 1 {\n            if brackets[i\
    \ + 1] != '<' && brackets[i + 1] != '>' {\n                return false\n    \
    \        }\n        }\n    }\n\n    return true", "    guard let openingBracketsStrings\
    \ = brackets.split(separator: \">\").map { String($0) },\n        let closingBracketsStrings\
    \ = brackets.split(separator: \"<\").map { String($0) },\n        openingBracketsStrings.count\
    \ == closingBracketsStrings.count,\n        openingBracketsStrings.count == openingBracketsStrings.count\
    \ {\n        return true\n    }\n    return false", "    var open = brackets.characters\n\
    \    var closed = brackets.characters.reverse()\n    var isOpening = true\n  \
    \  var hasCorrectlyClosed = false\n    var startIndex = 0\n    var endIndex =\
    \ 0\n\n    // iterate through brackets\n    while open.isEmpty {\n        // increment\
    \ indexes until we find a new opening bracket\n        if !isOpening {\n     \
    \       startIndex = brackets.startIndex\n        }\n        endIndex = brackets.endIndex\n\
    \        isOpening = open.removeLast()\n        // if we found a new opening bracket,\
    \ check to see if it has a closing bracket\n        if isOpening {\n         \
    \   if !closed.isEmpty {\n                hasCorrectlyClosed = true\n        \
    \        break\n            }\n        }\n    }\n\n    // if we have a correctly\
    \ closed bracket, check that the last characters are a correctly closed bracket\n\
    \    if hasCorrectlyClosed {\n        let lastChar = brackets.characters.last!\n\
    \        let lastCharIsCloser = lastChar == closed.first!\n        if !lastCharIsCloser\
    \ {\n            return false\n        }\n    }\n\n    // if we have a correctly\
    \ closed bracket, check that the last characters are a correctly closed bracket\n\
    \    if hasCorrectlyClosed {\n        let lastChar = brackets.characters.last!\n\
    \        let lastCharIsOpener = lastChar == open.first!\n        if !lastCharIsOpener\
    \ {\n            return false\n        }\n    }\n\n    return true", "    \n \
    \   let openingBrackets = brackets.components(separatedBy: CharacterSet.symbols)\n\
    \    \n    if openingBrackets.count == 0 {\n        return true\n    }\n    \n\
    \    let closingBrackets = brackets.components(separatedBy: CharacterSet.symbols).reversed()\n\
    \    \n    if closingBrackets.count == 0 {\n        return true\n    }\n    \n\
    \    for i in 0..<openingBrackets.count {\n        let openingBracket = openingBrackets[i]\n\
    \        let closingBracket = closingBrackets[i]\n        \n        if openingBracket\
    \ != closingBracket {\n            return false\n        }\n    }\n    \n    return\
    \ true", "    var stack = [String]()\n    for ch in brackets {\n        switch\
    \ ch {\n        case \"<\":\n            stack.append(ch)\n        case \"<=\"\
    :\n            stack.pop()\n        default:\n            if stack.last! != nil\
    \ {\n                stack.removeLast()\n            }\n        }\n    }\n   \
    \ return stack.count == 0", "    guard brackets.count >= 1 else { return false\
    \ }\n    var firstOpeningBracket = brackets.startIndex\n    var lastClosingBracket\
    \ = brackets.endIndex\n    var openingBracketCount = 1\n    var closingBracketCount\
    \ = 1\n    while openingBracketCount > 0 || closingBracketCount > 0 {\n      \
    \  var newOpeningBracket = brackets[firstOpeningBracket]\n        if firstOpeningBracket\
    \ == lastClosingBracket {\n            break\n        }\n        if newOpeningBracket\
    \ == \"<\" {\n            openingBracketCount += 1\n        } else if newOpeningBracket\
    \ == \">\" {\n            closingBracketCount += 1\n        } else {\n       \
    \     return false\n        }\n        firstOpeningBracket += 1\n        lastClosingBracket\
    \ -= 1\n    }\n    return firstOpeningBracket == brackets.endIndex", "    if brackets\
    \ == \"\" {\n        return true\n    }\n    var openingBrackets: String = \"\"\
    \n    var closingBrackets: String = \"\"\n\n    // Iterate over string and determine\
    \ if any brackets match.\n    for _, bracket in brackets.characters.enumerated()\
    \ {\n        if bracket == '<' {\n            openingBrackets += \"<\"\n     \
    \   } else {\n            openingBrackets += bracket\n        }\n        if bracket\
    \ == '>' {\n            closingBrackets += \">\"\n        } else {\n         \
    \   closingBrackets += bracket\n        }\n    }\n    return openingBrackets ==\
    \ closingBrackets", "    var correct = true\n    for opening, closing := range\
    \ brackets {\n        if opening != closing {\n            correct = false\n \
    \           break\n        }\n    }\n    return correct", "    if brackets.count\
    \ < 2 {\n        return false\n    }\n    \n    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    \n    openingBrackets.remove(at:\
    \ 0)\n    closingBrackets.remove(at: 0)\n    \n    if openingBrackets.count !=\
    \ closingBrackets.count {\n        return false\n    }\n    \n    for openBracket\
    \ in openingBrackets {\n        let closeBracket = openingBrackets.index(of: openBracket)\n\
    \        if closeBracket < 0 {\n            return false\n        }\n        \n\
    \        openingBrackets.remove(at: closeBracket + 1)\n        closingBrackets.remove(at:\
    \ closeBracket + 1)\n    }\n    \n    if openingBrackets.count != 0 {\n      \
    \  return false\n    }\n    \n    return true", "    var stack = StringStack()\n\
    \    for symbol in brackets {\n        if symbol == \">\" {\n            if !stack.isEmpty\
    \ {\n                stack.pop()\n            }\n        } else if symbol == \"\
    <\" {\n            stack.append(symbol) // Append the symbol on the top of the\
    \ stack\n        }\n    }\n    if stack.isEmpty {\n        return true\n    }\n\
    \    return false", "\tvar openingBrackets = brackets.characters\n\tvar closingBrackets\
    \ = [Character]()\n\topeningBrackets.forEach { character in\n\t\tlet matchingBracket\
    \ = closingBrackets.first(where: { $0 == character })\n\t\tif matchingBracket\
    \ == nil {\n\t\t\tclosingBrackets.append(character)\n\t\t} else {\n\t\t\topeningBrackets.remove(matchingBracket!)\n\
    \t\t}\n\t}\n\treturn (openingBrackets.count == 0)", "    guard let lastChar =\
    \ brackets.characters.last else {\n        return true\n    }\n\n    let lastCharIsOpenBracket\
    \ = brackets.characters.last == \"<\"\n    \n    let isOpenBracket = brackets.characters.contains(\"\
    <\")\n    let isCloseBracket = brackets.characters.contains(\">\")\n\n    var\
    \ foundClosingBracket = false\n    \n    for i in 0 ..< brackets.characters.count\
    \ {\n        if lastCharIsOpenBracket {\n            if brackets.characters[i]\
    \ == \">\" {\n                foundClosingBracket = true\n            } else {\n\
    \                return false\n            }\n        } else {\n            if\
    \ brackets.characters[i] == \"<\" {\n                if !foundClosingBracket {\n\
    \                    return false\n                }\n            } else {\n \
    \               return false\n            }\n        }\n    }\n    \n    return\
    \ foundClosingBracket", "    brackets = brackets.lowercased()\n    var openBracketCount\
    \ = [Character: Int]()\n    var openBrackets = [String]()\n    var closingBracketCount\
    \ = [Character: Int]()\n    var closingBrackets = [String]()\n    \n    for bracket\
    \ in brackets {\n        switch bracket {\n        case \"<\":\n            openBracketCount[Character(Character.LeftParenthesis)]\
    \ += 1\n        case \"<=\":\n            openBracketCount[Character(Character.LeftAngleBracket)]\
    \ += 1\n        case \"<<\":\n            openBracketCount[Character(Character.LeftShiftBracket)]\
    \ += 1\n        case \"<=\":\n            openBracketCount[Character(Character.LeftShiftAngleBracket)]\
    \ += 1\n        case \">\":\n            openBracketCount[Character(Character.RightParenthesis)]\
    \ += 1\n        case \">=\":\n            openBracketCount[Character(Character.RightAngleBracket)]\
    \ += 1\n        case \">>\":\n            openBracketCount[Character(Character.RightShiftBracket)]\
    \ += 1\n        case \">=\":\n            openBracketCount[Character(Character.RightShiftAngleBracket)]\
    \ += 1\n        default:\n            openBracketCount[Character(Character(bracket))]\
    \ += 1\n        }\n    }\n    \n    for openBracket in openBracketCount {\n  \
    \      switch openBracket.key {\n        case Character.LeftParenthesis:\n   \
    \         openBrackets.append(openBracket.value)\n        case Character.LeftAngleBracket:\n\
    \            openBrackets.append(openBracket.value)\n        case Character.LeftShiftBracket:\n\
    \            openBrackets.append(openBracket.value)\n        case Character.LeftShiftAngleBracket:\n\
    \            openBrackets.append(openBracket.value)\n        case Character.RightParenthesis:\n\
    \            closingBracketCount[Character(Character.LeftParenthesis)] -= 1\n\
    \        case Character.RightAngleBracket:\n            closingBracketCount[Character(Character.LeftAngleBracket)]\
    \ -= 1\n        case Character.RightShiftBracket:\n            closingBracketCount[Character(Character.LeftShiftBracket)]\
    \ -= 1\n        case Character.RightShiftAngleBracket:\n            closingBracketCount[Character(Character.LeftShiftAngleBracket)]\
    \ -= 1\n        default:\n            closingBracketCount[Character(Character(openBracket.key))]\
    \ -= 1\n        }\n    }\n    \n    for closingBracket in closingBracketCount\
    \ {\n        ", "    if brackets.isEmpty() {\n        return false\n    }\n  \
    \  let len = brackets.length\n    if len == 1 {\n        return true\n    }\n\
    \    let first = brackets[0]\n    var last = first\n    var hasNext = false\n\
    \    for _ in 0..<len {\n        let next = brackets[len]\n        if next ==\
    \ last {\n            return false\n        }\n        last = next\n        hasNext\
    \ = true\n    }\n    return hasNext", "    let regex = try NSRegularExpression(pattern:\
    \ \"(?<=\")\n    let match = regex.firstMatch(in: brackets, options: [], range:\
    \ NSRange(location: 0, length: brackets.characters.count))\n    guard match !=\
    \ nil else { return false }\n    guard match!.numberOfRanges > 1 else { return\
    \ false }\n    guard match!.numberOfRanges == brackets.characters.count else {\
    \ return false }\n    if let match = match!.range(at: 0) {\n        brackets =\
    \ brackets.replacingCharacters(in: match, with: \"\")\n    }\n    regex = try\
    \ NSRegularExpression(pattern: \"(?<=\")\n    match = regex.firstMatch(in: brackets,\
    \ options: [], range: NSRange(location: 0, length: brackets.characters.count))\n\
    \    guard match != nil else { return false }\n    guard match!.numberOfRanges\
    \ > 0 else { return false }\n    guard match!.numberOfRanges == brackets.characters.count\
    \ else { return false }\n    if let match = match!.range(at: 0) {\n        brackets\
    \ = brackets.replacingCharacters(in: match, with: \"\")\n    }\n    guard brackets.characters.count\
    \ == 0 else { return false }\n    return true", "    let leftBracket = brackets[brackets.startIndex..<brackets.startIndex.advancedBy(1)]\n\
    \    let rightBracket = brackets[brackets.startIndex.advancedBy(1)..<brackets.endIndex]\n\
    \n    return leftBracket == rightBracket", "\tif brackets.contains(\"<\") || brackets.contains(\"\
    >\") {\n\t\tvar isOpen [10]bool\n\t\tfor i := 0; i < len(brackets); i++ {\n\t\t\
    \tif brackets[i] == '<' {\n\t\t\t\tisOpen[i / 2] = true\n\t\t\t} else if brackets[i]\
    \ == '>' {\n\t\t\t\tisOpen[i / 2] = false\n\t\t\t} else {\n\t\t\t\tisOpen[i /\
    \ 2] = false\n\t\t\t}\n\t\t}\n\t\tresult := true\n\t\tfor i := 0; i < 10; i++\
    \ {\n\t\t\tif !isOpen[i] {\n\t\t\t\tresult = false\n\t\t\t\tbreak\n\t\t\t}\n\t\
    \t}\n\t\treturn result\n\t}\n\treturn false", "    let openingBrackets = brackets.split(separator:\
    \ \"<\").map({ String($0) })\n    let closingBrackets = brackets.split(separator:\
    \ \">\").map({ String($0) })\n\n    return openingBrackets.count == closingBrackets.count",
  "\tvar open_brackets = String()\n\tvar closed_brackets = String()\n\tlet opening_bracket\
    \ = \"<\"\n\tlet closing_bracket = \">\"\n\tlet brackets = brackets + \">\"\n\t\
    var has_open_closed = false\n\tvar i = 0\n\tvar current = 0\n\twhile i < brackets.characters.count\
    \ {\n\t\tif brackets.characters[i] == opening_bracket {\n\t\t\thas_open_closed\
    \ = true\n\t\t\tcurrent = i\n\t\t}\n\t\ti += 1\n\t}\n\tif has_open_closed {\n\t\
    \tfor i = current + 1; i < brackets.characters.count; i++ {\n\t\t\tif brackets.characters[i]\
    \ == closing_bracket {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\
    \t}\n\treturn false", "    let open_brackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closed_brackets = brackets.components(separatedBy: \">\")\n\
    \    var open_brackets_len = 0\n    var closed_brackets_len = 0\n    for open_bracket\
    \ in open_brackets {\n        if open_bracket == \"<\" {\n            open_brackets_len++\n\
    \        }\n        if open_bracket == \">\" {\n            closed_brackets_len++\n\
    \        }\n    }\n    return open_brackets_len == closed_brackets_len", "\tswitch\
    \ len(brackets) {\n\tcase 0:\n\t\treturn true\n\tcase 1:\n\t\tswitch brackets.first\
    \ {\n\t\tcase \"<\":\n\t\t\treturn true\n\t\tcase \">\":\n\t\t\treturn true\n\t\
    \tdefault:\n\t\t\treturn false\n\t\t}\n\tdefault:\n\t\tswitch brackets.first {\n\
    \t\tcase \"<\":\n\t\t\treturn true\n\t\tdefault:\n\t\t\tif brackets.first == \"\
    >\" && brackets[1...].first == \"<\" {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\treturn\
    \ false\n\t\t}\n\t}", "    guard let openingBrackets = brackets.components(separatedBy:\
    \ \"<\") else {\n        return false\n    }\n    let closingBrackets = brackets.components(separatedBy:\
    \ \">\")\n    guard openingBrackets.count == closingBrackets.count else {\n  \
    \      return false\n    }\n    for bracket in openingBrackets {\n        guard\
    \ closingBrackets.contains(bracket) else {\n            return false\n       \
    \ }\n    }\n    return true", "    // Make sure we have at least 1 opening bracket\n\
    \    let openBrackets = brackets.components(separatedBy: \"<\")\n    guard openBrackets.count\
    \ > 0 else {\n        return true\n    }\n\n    // Make sure we have at least\
    \ 1 closing bracket\n    let closeBrackets = brackets.components(separatedBy:\
    \ \">\")\n    guard closeBrackets.count > 0 else {\n        return false\n   \
    \ }\n\n    // Make sure we have all the right opening and closing brackets\n \
    \   for openBracket in openBrackets {\n        if !closeBrackets.contains(openBracket)\
    \ {\n            return false\n        }\n    }\n    return true", "    guard\
    \ !brackets.isEmpty else { return true }\n\n    let closeBrackets = brackets.componentsSeparatedByString(\"\
    </\")\n    guard !closeBrackets.isEmpty else { return false }\n\n    let openBrackets\
    \ = brackets.componentsSeparatedByString(\"<\")\n    guard !openBrackets.isEmpty\
    \ else { return false }\n\n    let openBracketsWithoutClosingBrackets = openBrackets.filter\
    \ {\n        !$0.contains(\">\") && !$0.contains(\"</\")\n    }\n    guard !openBracketsWithoutClosingBrackets.isEmpty\
    \ else { return true }\n\n    let closeBracketsWithoutOpeningBrackets = closeBrackets.filter\
    \ {\n        !$0.contains(\"<\") && !$0.contains(\"</\")\n    }\n    guard !closeBracketsWithoutOpeningBrackets.isEmpty\
    \ else { return true }\n\n    let openBracketsWithoutClosingAndOpeningBrackets\
    \ = openBracketsWithoutClosingBrackets.filter {\n        !$0.contains(\"><\")\
    \ && !$0.contains(\"<</\")\n    }\n    guard !openBracketsWithoutClosingAndOpeningBrackets.isEmpty\
    \ else { return false }\n\n    let closeBracketsWithoutOpeningAndClosingBrackets\
    \ = closeBracketsWithoutOpeningBrackets.filter {\n        !$0.contains(\"<<\"\
    ) && !$0.contains(\"><\")\n    }\n    guard !closeBracketsWithoutOpeningAndClosingBrackets.isEmpty\
    \ else { return false }\n\n    return true", "    \n    let start = brackets.startIndex\n\
    \    let end = brackets.startIndex\n\n    for cur in brackets.characters.reversed().enumerated()\
    \ {\n        let open = brackets.characters[cur.offset]\n        let close = brackets.characters[cur.offset+1]\n\
    \        \n        if open == close {\n            cur.offset += 2\n        }\
    \ else {\n            if start < cur.offset {\n                return false\n\
    \            }\n\n            start = cur.offset\n        }\n    }\n    \n   \
    \ return start < brackets.endIndex", "    var has_bracket = false\n    var count\
    \ = 0\n    var opening_brackets: [Character] = []\n    var closing_brackets: [Character]\
    \ = []\n\n    // Count opening brackets.\n    brackets.forEach { character in\n\
    \        switch character {\n        case \">\":\n            closing_brackets.append(character)\n\
    \        default:\n            opening_brackets.append(character)\n        }\n\
    \    }\n\n    // Validate bracketing.\n    if opening_brackets.count == 0 || closing_brackets.count\
    \ == 0 {\n        return false\n    }\n\n    // Find first opening bracket.\n\
    \    if let opening = opening_brackets.first {\n        if let closing = closing_brackets.first(where:\
    \ { opening.equalToString($0) }) {\n            has_bracket = true\n         \
    \   count += 1\n        }\n    }\n\n    // If count is 0, no brackets are missing.\n\
    \    return count == 0", "    var hasBrackets = false\n    for char in brackets\
    \ {\n        if char <= \"^\" {\n            hasBrackets = true\n        } else\
    \ {\n            hasBrackets = hasBrackets || stringContainsAll(chars: brackets,\
    \ char: char)\n        }\n    }\n    return hasBrackets", "    if brackets ==\
    \ \"\" {\n        return true\n    }\n    let leftStack = brackets.characters(in:\
    \ CharacterSet.leftSquareBrackets)\n    let rightStack = brackets.characters(in:\
    \ CharacterSet.rightSquareBrackets)\n    return leftStack == rightStack", "  \
    \  var stack = [String]()\n    var opening = false\n\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            opening = true\n        } else {\n\
    \            opening = false\n\n            for (index, stack_string) in stack.enumerated()\
    \ {\n                if stack_string == brackets {\n                    stack.removeAllElements()\n\
    \                    break\n                }\n            }\n        }\n\n  \
    \      stack.append(char)\n    }\n\n    return opening.count == stack.count",
  "    if brackets.isEmpty() { return true }\n    let openingBrackets = brackets.split(separator:\
    \ \"<\")\n        .map(String.init)\n        .reduce(into: [String]()) {\n   \
    \     (accumulator, substring) in\n        let closingBracket = substring.replacingOccurrences(of:\
    \ \"<\", with: \">\")\n        accumulator.append(closingBracket)\n    }\n   \
    \ return !openingBrackets.isEmpty && openingBrackets.count == openingBrackets.count()\
    \ && openingBrackets.contains(where: \\.isEmpty)", "    var openingBrackets =\
    \ \"\"\n    var closingBrackets = \"\"\n    for _, bracket in brackets.enumerated()\
    \ {\n        switch bracket {\n        case 0: openingBrackets += \"<\"\n    \
    \    case 1: openingBrackets += \"[\"\n        case 2: openingBrackets += \"(\"\
    \n        case 3: openingBrackets += \"{\"\n        case 4: openingBrackets +=\
    \ \"(\"\n        case 5: openingBrackets += \"]\"\n        case 6: openingBrackets\
    \ += \")\"\n        case 7: openingBrackets += \"}\"\n        default: break\n\
    \        }\n        switch bracket {\n        case 0: closingBrackets += \">\"\
    \n        case 1: closingBrackets += \"]\"\n        case 2: closingBrackets +=\
    \ \")\"\n        case 3: closingBrackets += \"}\" // for JSON\n        case 4:\
    \ closingBrackets += \"]\"\n        case 5: closingBrackets += \"]\"\n       \
    \ case 6: closingBrackets += \"}\"\n        case 7: closingBrackets += \"}\"\n\
    \        default: break\n        }\n    }\n    let openingBracketCount = openingBrackets.count\n\
    \    let closingBracketCount = closingBrackets.count\n    return openingBracketCount\
    \ == closingBracketCount", "    let openingBrackets = brackets.components(separatedBy:\
    \ \">\").flatMap({ $0 }).sorted()\n    let closingBrackets = brackets.components(separatedBy:\
    \ \"<\").flatMap({ $0 }).sorted()\n    return (openingBrackets == closingBrackets)",
  "    var ok = false\n    if brackets.contains(\"<\") && brackets.contains(\">\"\
    ) {\n        let open = brackets.range(of: \"<\")\n        let close = brackets.range(of:\
    \ \">\", options: .backwards)\n        ok = open != nil && close != nil && open!.lowerBound\
    \ < close!.upperBound\n    }\n    return ok", "    var open = brackets.characters(\n\
    \        in: CharacterSet.any,\n        options: .init(rawValue: 0)\n    ).map(String.init)\n\
    \    var closed = brackets.characters(\n        in: CharacterSet.any,\n      \
    \  options: .init(rawValue: 0)\n    ).map(String.init)\n    guard open.isEmpty\
    \ == closed.isEmpty else {\n        return false\n    }\n    for openBracket in\
    \ open {\n        let index = closed.index(of: openBracket)\n        if index\
    \ == nil {\n            return false\n        }\n        closed.remove(at: index!)\n\
    \    }\n    return true", "    if let opening_brackets = brackets.range(of: \"\
    <\") {\n        for openingBracket in opening_brackets {\n            if let closing_bracket\
    \ = brackets.range(of: String(openingBracket)) {\n                if closing_bracket.count\
    \ > openingBracket.count {\n                    return false\n               \
    \ }\n            }\n        }\n    }\n    return true", "    brackets = brackets.characters.map\
    \ { String($0) }\n    guard let first = brackets.first else { return false }\n\
    \    for opening in brackets.dropFirst() {\n        let index = brackets.index(opening,\
    \ offsetBy: 1)\n        guard index < brackets.endIndex,\n            let closing\
    \ = brackets[index] else { return false }\n        guard closing == opening else\
    \ { return false }\n    }\n    return true", "    let stack = brackets.characters.reversed().map\
    \ { String($0) }\n    for character in stack.last {\n        if stack.first {\n\
    \            if character != \">\" { return false }\n        }\n        else if\
    \ character != \"<\" {\n            return false\n        }\n        stack.removeLast()\n\
    \    }\n    return stack.count == 0", "    var leftCounter = 0\n    var rightCounter\
    \ = 0\n    var leftIsFirst = true\n    for ch in brackets {\n        if ch ==\
    \ \"<\" {\n            if leftIsFirst {\n                leftCounter++\n     \
    \       } else {\n                leftCounter--\n            }\n            leftIsFirst\
    \ = !leftIsFirst\n        }\n        if ch == \">\" {\n            rightCounter++\n\
    \        }\n    }\n    return leftCounter == 0 && rightCounter == 0", "    if\
    \ brackets.isEmpty {\n        return true\n    }\n    var openingBrackets = brackets.characters\n\
    \    openingBrackets.removeFirst()\n    var closingBrackets = brackets.characters\n\
    \    closingBrackets.removeLast()\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    for index in 0..<openingBrackets.count {\n\
    \        let open = openingBrackets[index]\n        let close = closingBrackets[index]\n\
    \        switch open {\n        case \"<\":\n            if close != \"<\" {\n\
    \                return false\n            }\n        case \"=\":\n          \
    \  if close != \"=\" {\n                return false\n            }\n        case\
    \ \"&\":\n            if close != \"&\" {\n                return false\n    \
    \        }\n        case \"/\":\n            if close != \"/\" {\n           \
    \     return false\n            }\n        case \"~\":\n            if close !=\
    \ \"~\" {\n                return false\n            }\n        case \"{\":\n\
    \            if close != \"{\" {\n                return false\n            }\n\
    \        case \"}\":\n            if close != \"}\" {\n                return\
    \ false\n            }\n        default:\n            return false\n        }\n\
    \    }\n    return true", "    let opening = brackets.prefix(1)\n    let closing\
    \ = brackets.suffix(1)\n    for openingChar in opening {\n        if closingChars.index(of:\
    \ openingChar) == nil {\n            return false\n        }\n    }\n    return\
    \ true", "    var retval = true\n    for opening, closing := range brackets {\n\
    \        if opening != closing {\n            retval = false\n            break\n\
    \        }\n    }\n    return retval", "    brackets = brackets.lowercased()\n\
    \n    if brackets.count < 2 {\n        return false\n    }\n\n    var isInside\
    \ = true // if brackets is \"<>\" or \"<<>>\" or \"<<><>>\", then isInside is\
    \ true\n\n    var currentBracket = 0\n    var currentOpening = brackets.startIndex\n\
    \    var currentClosing = brackets.endIndex\n\n    // iterate over the string\
    \ and look for opening and closing brackets\n    while currentOpening != brackets.endIndex\
    \ && currentClosing != brackets.endIndex {\n        let openingChar = brackets[currentOpening]\n\
    \        let closingChar = brackets[currentClosing]\n\n        if openingChar\
    \ == \"<\" {\n            if closingChar == \">\" {\n                currentBracket++\n\
    \            } else {\n                currentBracket = 0\n            }\n   \
    \     }\n\n        if openingChar == \">\" {\n            if closingChar == \"\
    <\" {\n                currentBracket--\n            } else {\n              \
    \  currentBracket = 0\n            }\n        }\n\n        if currentBracket ==\
    \ 0 {\n            isInside = false\n            break\n        }\n\n        currentClosing++\n\
    \        currentBracket--\n    }\n\n    return isInside", "\tvar stack = Array<Bracket>()\n\
    \tfor brack, clos in brackets.characters {\n\t\tswitch brack {\n\t\tcase '<':\n\
    \t\t\tstack.push(Bracket(bracket: clos, open: true, close: false))\n\t\tcase '<=':\n\
    \t\t\tstack.push(Bracket(bracket: clos, open: true, close: true))\n\t\tcase '>':\n\
    \t\t\tstack.removeLast()\n\t\t\tstack.push(Bracket(bracket: clos, open: false,\
    \ close: false))\n\t\tcase '>=':\n\t\t\tstack.removeLast()\n\t\t\tstack.push(Bracket(bracket:\
    \ clos, open: false, close: true))\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\t\
    }\n\treturn stack.count == 0", "    var success : Bool = true\n    brackets =\
    \ brackets.lowercased()\n    var opening = brackets.substringWithRange(NSMakeRange(0,\
    \ brackets.startIndex))\n    var closing = brackets.substringWithRange(NSMakeRange(brackets.startIndex,\
    \ brackets.length))\n    for opening_bracket in opening {\n        var closing_bracket\
    \ = String(opening_bracket)\n        closing_bracket.removeAtIndex(0)\n      \
    \  closing_bracket.removeLast()\n        if closing == closing_bracket {\n   \
    \         success = false\n            break\n        }\n    }\n    return success",
  "    if brackets.isEmpty { return false }\n    if brackets[0] != \"<\" { return\
    \ false }\n    var stack = [String]()\n    var opening = true\n    var depth =\
    \ 0\n    for char in brackets {\n        if opening&&char != \"<\" {\n       \
    \     stack.insert(char, depth)\n            opening = false\n        } else if\
    \ char == \"<\" {\n            opening = true\n            depth++\n        }\
    \ else if char == \">\" {\n            if stack[stack.count-1] == \"<\" {\n  \
    \              opening = false\n                depth--\n            }\n     \
    \   }\n    }\n    if opening&&stack.count != 0 {\n        return false\n    }\n\
    \    for char in brackets {\n        if char == \"<\" {\n            if depth\
    \ == 0 {\n                return false\n            }\n        } else if char\
    \ == \">\" {\n            if depth == 0 {\n                return false\n    \
    \        }\n            if stack.count != 0 {\n                return false\n\
    \            }\n        }\n    }\n    return true", "    var stack: [String] =\
    \ []\n    var openedBrackets = [String]()\n    var lastChar = brackets.characters.last!\n\
    \    var lastCharIndex = brackets.startIndex\n    for i in brackets.characters.reverse()\
    \ {\n        let ch = String(i)\n        if ch == \">\" {\n            // If the\
    \ last two characters aren't the same then we have a problem\n            if openedBrackets.count\
    \ != stack.count || openedBrackets.last! != ch {\n                return false\n\
    \            }\n            stack.removeLast()\n            openedBrackets.removeLast()\n\
    \            lastCharIndex = lastCharIndex.advancedBy(-1)\n            continue\n\
    \        } else if ch == \"<\" {\n            if !stack.isEmpty {\n          \
    \      return false\n            }\n            openedBrackets.append(ch)\n  \
    \          lastCharIndex = lastCharIndex.advancedBy(-1)\n        } else {\n  \
    \          if !stack.isEmpty || openedBrackets.contains(ch) {\n              \
    \  return false\n            }\n            stack.append(ch)\n        }\n    }\n\
    \    return !stack.isEmpty", "    guard brackets.isEmpty else {\n        return\
    \ true\n    }\n\n    let chars = brackets.characters\n    var i = 0\n    while\
    \ i < chars.count {\n        if chars[i] != chars.first! {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true", "    brackets = brackets.substringToIndex(advance(brackets,\
    \ 1))\n    let index = brackets.rangeOfString(\"<\")\n    if index == nil || index!.endIndex\
    \ == brackets.startIndex {\n        return false\n    }\n    let lastIndex = brackets.rangeOfString(\"\
    >\", range: index!.endIndex..<brackets.endIndex)\n    if lastIndex == nil {\n\
    \        return false\n    }\n    return brackets.substringFromIndex(lastIndex!.endIndex)\
    \ == brackets", "    var count = 0\n    for bracket in brackets {\n        if\
    \ bracket == \"<\" {\n            count += 1\n        } else if bracket == \"\
    <\" {\n            count -= 1\n        }\n    }\n    return count == 0", "  var\
    \ opening_brackets = \"\"\n  var closing_brackets = \"\"\n  var brackets_count\
    \ = 0\n  for bracket_index, bracket_character in brackets.characters {\n    switch\
    \ bracket_character {\n    case \">\":\n      if opening_brackets.characters.count\
    \ > 0 {\n        opening_brackets = opening_brackets[..<bracket_index]\n     \
    \   brackets_count += 1\n      }\n    case \"<\":\n      if closing_brackets.characters.count\
    \ > 0 {\n        closing_brackets = closing_brackets[..<bracket_index]\n     \
    \   brackets_count += 1\n      }\n    default:\n      if opening_brackets.characters.count\
    \ > 0 {\n        opening_brackets = opening_brackets[..<bracket_index]\n     \
    \   brackets_count += 1\n      } else {\n        if closing_brackets.characters.count\
    \ > 0 {\n          closing_brackets = closing_brackets[..<bracket_index]\n   \
    \       brackets_count += 1\n        } else {\n          brackets_count = 0\n\
    \        }\n      }\n    }\n  }\n  if brackets_count == 0 {\n    return true\n\
    \  }\n  return opening_brackets == closing_brackets", "    let brackets = brackets.unicodeScalars\n\
    \        .flatMap {\n            String($0)\n        }\n\n    for symbol in brackets\
    \ {\n        let ranges = brackets.rangeOfString(symbol)\n        if ranges.location\
    \ == NSNotFound {\n            return false\n        }\n        for range in ranges\
    \ {\n            let openingBracketIndex = brackets.index(of: symbol) - range\
    \ + 1\n            let closingBracketIndex = brackets.index(of: symbol) + range\n\
    \            if openingBracketIndex >= 0 && closingBracketIndex < brackets.count\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true", "    let openingBrackets = brackets.characters.split(separator: \"<\"\
    ).map({ String($0) })\n    let closingBrackets = brackets.characters.split(separator:\
    \ \">\").map({ String($0) })\n    let allBrackets = openingBrackets + closingBrackets\n\
    \    return openingBrackets.count == allBrackets.count", "    // we iterate through\
    \ the string once to count the number of open\n    // brackets and once to count\
    \ the number of close brackets.\n    var openBracketCount = 1\n    var closeBracketCount\
    \ = 1\n\n    for letter in brackets {\n        if letter == \"<\" {\n        \
    \    openBracketCount++\n        } else if letter == \">\" {\n            closeBracketCount++\n\
    \        } else if letter == \",\" {\n            // if there are two consecutive\
    \ commas, then the string is\n            // not correctly bracketed.\n      \
    \      if openBracketCount == closeBracketCount {\n                return false\n\
    \            }\n        } else {\n            // unrecognized character\n    \
    \        return false\n        }\n    }\n\n    // If there are an equal number\
    \ of open and close brackets, then the string\n    // is correctly bracketed.\n\
    \    return openBracketCount == closeBracketCount", "    let openingBracketIndices\
    \ = brackets.characters.split{$0 == \"<\"}\n    let closingBracketIndices = brackets.characters.split{$0\
    \ == \">\"}\n\n    let matchingIndices = Set(openingBracketIndices).symmetricDifference(Set(closingBracketIndices))\n\
    \    return matchingIndices.isEmpty", "    for opening in brackets {\n       \
    \ if opening != \"<\" {\n            return false\n        }\n    }\n    for opening\
    \ in brackets {\n        if opening != \">\" {\n            return false\n   \
    \     }\n    }\n    return true", "    let opens = brackets.components(separatedBy:\
    \ \"<\")\n        .map { $0.first! as Character }\n    let closes = brackets.components(separatedBy:\
    \ \">\")\n        .map { $0.last! as Character }\n    if opens.count == closes.count\
    \ {\n        return true\n    }\n    return false", "    guard let first = brackets.first,\n\
    \        last = brackets.last else {\n        return false\n    }\n    return\
    \ brackets.contains(first) && brackets.contains(last)", "\tvar closed = [String]()\n\
    \tfor i := 0; i < len(brackets); i++ {\n\t\tc := brackets[i]\n\t\tif c == '>'\
    \ {\n\t\t\tif !closed {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tclosed = false\n\
    \t\t} else if c == '<' {\n\t\t\tif closed {\n\t\t\t\treturn false\n\t\t\t}\n\t\
    \t\tclosed = true\n\t\t} else if c != '>' && c != '<' {\n\t\t\treturn false\n\t\
    \t}\n\t}\n\treturn closed == nil", "    let brackets = brackets.characters\n \
    \       .flatMap { String($0) }\n        .map { String($0) }\n        .replacingOccurrences(of:\
    \ \"<\", with: \"(\")\n        .replacingOccurrences(of: \">\", with: \")\")\n\
    \        .replacingOccurrences(of: \"/>\", with: \"\")\n        .replacingOccurrences(of:\
    \ \"<=\", with: \"<\")\n        .replacingOccurrences(of: \"=\", with: \"==\"\
    )\n        .replacingOccurrences(of: \"!=\", with: \"!==\")\n        .replacingOccurrences(of:\
    \ \"<=\", with: \"<\")\n        .replacingOccurrences(of: \">=\", with: \">\"\
    )\n        .replacingOccurrences(of: \"<>\", with: \"<>\")\n        .replacingOccurrences(of:\
    \ \"===\", with: \"==\")\n        .replacingOccurrences(of: \"&&\", with: \"and\"\
    )\n        .replacingOccurrences(of: \"||\", with: \"or\")\n        .replacingOccurrences(of:\
    \ \"!=\", with: \"!=\")\n        .replacingOccurrences(of: \"=\", with: \"==\"\
    )\n        .replacingOccurrences(of: \"<\", with: \"(\")\n        .replacingOccurrences(of:\
    \ \">\", with: \")\")\n        .replacingOccurrences(of: \"<>\", with: \"\")\n\
    \        .replacingOccurrences(of: \"(\", with: \"(\")\n        .replacingOccurrences(of:\
    \ \")\", with: \")\")\n        .replacingOccurrences(of: \"=>\", with: \"->\"\
    )\n        .replacingOccurrences(of: \"<-\", with: \"<-\")\n        .replacingOccurrences(of:\
    \ \"->\", with: \"=>\")\n        .replacingOccurrences(of: \"-->\", with: \"-->\"\
    )\n        .replacingOccurrences(of: \"<=>\", with: \"<->\")\n        .replacingOccurrences(of:\
    \ \"<->\", with: \"<=>\")\n        .replacingOccurrences(of: \">-\", with: \"\
    >-\")\n        .replacingOccurrences(of: \"<-\", with: \"<-\")\n        .replacingOccurrences(of:\
    \ \"->\", with: \"=>\")\n        .replacingOccurrences(of: \"-->\", with: \"-->\"\
    )\n        .replacingOccurrences(of: \"<=>\", with: \"<->\")", "    let opening_brackets\
    \ = brackets.characters\n        .filter({ character in\n            character\
    \ == \"<\" || character == \">\"\n        })\n        .map({ String($0) })\n \
    \   let closing_brackets = brackets.characters\n        .filter({ character in\n\
    \            character == \"<\" || character == \">\"\n        })\n        .map({\
    \ String($0) })\n\n    if opening_brackets.count != closing_brackets.count {\n\
    \        return false\n    }\n    return true", "    guard let opens = brackets.components(separatedBy:\
    \ \"><\")\n    else {\n        return false\n    }\n    for open in opens {\n\
    \        if !brackets.contains(\"<\\(open)\") && !brackets.contains(\"\\(open)<\"\
    ) {\n            return false\n        }\n    }\n    return true", "    let openingBrackets\
    \ = brackets.characters\n        .map { String($0) }\n        .map { String($0)\
    \ }\n        .filter { $0 != \"<\" && $0 != \">\" }\n        .filter { $0 != \"\
    <<\" && $0 != \">>\" }\n\n    let closingBrackets = brackets.characters\n    \
    \    .map { String($0) }\n        .map { String($0) }\n        .filter { $0 !=\
    \ \"<\" && $0 != \">\" }\n        .filter { $0 != \"<<\" && $0 != \">>\" }\n\n\
    \    let matchingOpeningBracketCount = openingBrackets.count - closingBrackets.count\n\
    \    return matchingOpeningBracketCount == 0", "\tbracketingStack.removeAll()\n\
    \n\tbrackets = brackets.trimmingCharacters(in: CharacterSet.whitespaces)\n\tbrackets\
    \ = brackets.replacingOccurrences(of: \">\", with: \">>\")\n\tbrackets = brackets.replacingOccurrences(of:\
    \ \"<\", with: \"<<\")\n\n\tfor b in brackets.characters {\n\t\tif !bracketingStack.contains(b)\
    \ {\n\t\t\tbracketingStack.append(b)\n\t\t\treturn true\n\t\t}\n\t}\n\treturn\
    \ false", "    if brackets.isEmpty() {\n        return true\n    }\n    var bracketsString\
    \ = brackets\n    bracketsString.removeFirst()\n    var leftBracketsFound = false\n\
    \    for symbol in bracketsString.unicodeScalars {\n        switch symbol {\n\
    \        case \">\":\n            leftBracketsFound = true\n            break\n\
    \        default:\n            break\n        }\n    }\n    if leftBracketsFound\
    \ {\n        return false\n    }\n    return brackets.unicodeScalars.count ==\
    \ bracketsString.unicodeScalars.count - 1", "    let openingBrackets = brackets.characters\n\
    \        .filter { character in\n            character == \"<\" || character ==\
    \ \">\"\n        }\n        .toSet()\n\n    let closingBrackets = brackets.characters\n\
    \        .filter { character in\n            character == \"<\" || character ==\
    \ \">\"\n        }\n        .toSet()\n\n    guard openingBrackets.count == openingBrackets.count\
    \ && closingBrackets.count == closingBrackets.count else {\n        return false\n\
    \    }\n\n    return openingBrackets.count == openingBrackets.count + closingBrackets.count",
  "\tlet opening = brackets.unicodeScalars.filter({ $0 == \">\" })\n\tlet closing\
    \ = brackets.unicodeScalars.filter({ $0 == \"<\" })\n\topening.forEach { openingElement\
    \ in\n\t\tclosing.forEach { closingElement in\n\t\t\tif openingElement == closingElement\
    \ {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true", "    let opening\
    \ = brackets.characters.split(separator: \">\").map(String.init)\n    let closing\
    \ = brackets.characters.split(separator: \"<\").map(String.init)\n    return opening.count\
    \ == closing.count", '    return brackets.rangeOfString("</>") != nil', "    let\
    \ openings = brackets.characters.split(\"<\").map { String($0) }\n    let closings\
    \ = brackets.characters.split(\">\").map { String($0) }\n    return openings.count\
    \ == closings.count", "    let firstOpening = brackets.characters.filter({ $0\
    \ == \"<\" })\n    let firstClosing = brackets.characters.filter({ $0 == \"<\"\
    \ })\n    return firstOpening.count == firstClosing.count", "    brackets = brackets.stringByReplacingOccurrencesOfString(\"\
    <<\", withString: \"><\")\n    brackets = brackets.stringByReplacingOccurrencesOfString(\"\
    >>\", withString: \"<<\")\n    brackets = brackets.stringByReplacingOccurrencesOfString(\"\
    <\", withString: \">\")\n    return brackets.rangeOfString(\"<<>\").location ==\
    \ NSNotFound", "    let len = brackets.characters.count\n    if len < 2 {\n  \
    \      return true\n    }\n\n    for i in 0..<len - 1 {\n        let opening =\
    \ brackets.characters.index(brackets.startIndex, offsetBy: i)\n        let closing\
    \ = brackets.characters.index(brackets.startIndex, offsetBy: i + 1)\n        if\
    \ opening == closing {\n            continue\n        }\n\n        if opening\
    \ < closing {\n            return true\n        }\n    }\n\n    return false",
  "    var openBrackets = 0\n    var closedBrackets = 0\n    var openingBrackets =\
    \ brackets.characters\n    \n    for symbol in openingBrackets {\n        if symbol\
    \ == \"<\" {\n            openBrackets += 1\n        }\n        else {\n     \
    \       closedBrackets += 1\n        }\n    }\n    \n    if openBrackets == 0\
    \ {\n        return false\n    }\n    \n    if openBrackets > 1 {\n        return\
    \ true\n    }\n    \n    if openBrackets != closedBrackets {\n        return true\n\
    \    }\n    \n    return false", "    var has_correct_bracketing = true\n\n  \
    \  if brackets.isEmpty() {\n        return has_correct_bracketing\n    }\n\n \
    \   var opening_bracket = \"\"\n    var closing_bracket = \"\"\n\n    for character\
    \ in brackets.characters {\n        if character == \"<\" {\n            opening_bracket\
    \ = String(character)\n        }\n\n        if character == \">\" {\n        \
    \    closing_bracket = String(character)\n        }\n    }\n\n    if opening_bracket\
    \ == \"\" || closing_bracket == \"\" {\n        return has_correct_bracketing\n\
    \    }\n\n    if opening_bracket == \"<\" && closing_bracket == \"<\" {\n    \
    \    has_correct_bracketing = false\n    }\n\n    if opening_bracket == \"<\"\
    \ && closing_bracket == \">\" {\n        has_correct_bracketing = false\n    }\n\
    \n    if opening_bracket == \"<\" && closing_bracket == \"<\" {\n        has_correct_bracketing\
    \ = false\n    }\n\n    if opening_bracket == \">\" && closing_bracket == \"<\"\
    \ {\n        has_correct_bracketing = false\n    }\n\n    if opening_bracket ==\
    \ \">\" && closing_bracket == \">\" {\n        has_correct_bracketing = false\n\
    \    }\n\n    if opening_bracket == \">\" && closing_bracket == \"<\" {\n    \
    \    has_correct_bracketing = false\n    }\n\n    if opening_bracket == \">\"\
    \ && closing_bracket == \">\" {\n        has_correct_bracketing = false\n    }\n\
    \n    if opening_bracket == \"<\" && closing_bracket == \"<\" {\n        has_correct_bracketing\
    \ = false\n    }\n\n    if opening_bracket == \"<\" && closing_bracket == \">\"\
    \ {\n        has_correct_bracketing = false\n    }\n\n    if opening_bracket ==\
    \ \"<\" && closing_bracket == \">\" {\n        has_correct_bracketing = false\n\
    \    }\n\n    if opening_bracket == \">\" && closing_bracket == \">\" {\n    \
    \    has_correct_bracketing = false\n    }\n\n    if opening_bracket == \">\"\
    \ && closing_bracket == \"<\" {\n        has_correct_bracketing = false\n    }\n\
    \n    if opening_bracket == \">\" && closing_bracket == \"<\" {\n        has_correct_bracketing\
    \ = false\n    }\n\n    if opening_bracket == \"<\" && closing_bracket == \"<\"\
    \ {\n        has_correct_bracketing = false\n    }\n\n    if opening_bracket ==\
    \ \"<\" && closing_bracket == \">\" {\n        has_correct_bracketing = false",
  "    var opening = true\n    for b in brackets {\n        if b != \"<\" {\n    \
    \        opening = false\n        } else {\n            if opening {\n       \
    \         opening = false\n            } else {\n                opening = true\n\
    \            }\n        }\n    }\n    return opening", "    brackets = brackets[1..<brackets.count]\n\
    \    \n    for b in brackets {\n        if b != \"<\" {\n            return false\n\
    \        }\n    }\n    return true", "    let pattern = \"(\\<|\\>)\"\n    let\
    \ regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let nsString\
    \ = brackets as NSString\n    let match = regex.firstMatch(in: brackets, options:\
    \ [], range: NSRange(0..<nsString.length))\n    return (match?.rangeAt(1) != nil)",
  "    if brackets.isEmpty {\n        return true\n    }\n\n    var bracketStack =\
    \ [String]()\n    var openingBracketCount = 0\n\n    for char in brackets {\n\
    \        if char == \"<\" {\n            bracketStack.append(char)\n         \
    \   openingBracketCount += 1\n        } else if char == \">\" && openingBracketCount\
    \ > 0 {\n            if bracketStack.last() == \"<\" {\n                bracketStack.removeLast()\n\
    \            } else {\n                openingBracketCount -= 1\n            }\n\
    \        } else {\n            return false\n        }\n    }\n    return bracketStack.isEmpty",
  "    brackets = brackets.replacingOccurrences(of: \"<\", with: \"<\")\n    brackets\
    \ = brackets.replacingOccurrences(of: \">\", with: \">\")\n    brackets = brackets.replacingOccurrences(of:\
    \ \"<>\", with: \"<>\")\n    brackets = brackets.replacingOccurrences(of: \"<<><>>\"\
    , with: \"<><>\")\n    brackets = brackets.replacingOccurrences(of: \"><<>\",\
    \ with: \"><>\")\n    return brackets.count < 2", "    let openings = brackets.components(separatedBy:\
    \ \"<\")\n    let closings = brackets.components(separatedBy: \">\")\n    let\
    \ expected = (openings + closings).count\n\n    if openings.count == expected\
    \ {\n        return true\n    }\n    if closings.count == expected {\n       \
    \ return true\n    }\n    if openings.count == 0 && closings.count == 0 {\n  \
    \      return true\n    }\n\n    if openings.count != expected || closings.count\
    \ != expected {\n        return false\n    }\n    return true", "\tbrackets =\
    \ brackets.lowercased()\n\tbrackets = brackets.replacingOccurrences(of: \">\"\
    , with: \">>\")\n\tbrackets = brackets.replacingOccurrences(of: \"<\", with: \"\
    <<\")\n\treturn brackets.range(of: \"<<\").location != nil && brackets.range(of:\
    \ \">>\").location != nil", "    // if there are no brackets, return true\n  \
    \  if brackets.isEmpty {\n        return true\n    }\n\n    // create a set that\
    \ contains all of the opening brackets\n    let openingBrackets = brackets.characters.filter({\
    \ $0 == \"<\" })\n\n    // create a set that contains all of the closing brackets\n\
    \    let closingBrackets = brackets.characters.filter({ $0 == \">\" })\n\n   \
    \ // if the length of the sets is equal then all brackets are correct.\n    if\
    \ openingBrackets.count == closingBrackets.count {\n        return true\n    }\n\
    \n    // otherwise, return false\n    return false", '    return brackets.isEmpty
    || brackets.split(separator: "<").count == brackets.split(separator: ">").count',
  "    let bracket_index = brackets.characters.indices\n    for i in bracket_index.reversed()\
    \ {\n        if brackets[i] != \"<\" {\n            return false\n        }\n\
    \    }\n    return true", "    var isRight = brackets.contains(\"<\") || brackets.contains(\"\
    </\")\n    if brackets.contains(\"<\") && brackets.contains(\"</\") {\n      \
    \  if brackets.contains(\"<\") && !brackets.contains(\"</\") {\n            isRight\
    \ = false\n        } else if brackets.contains(\"</\") && !brackets.contains(\"\
    <\") {\n            isRight = true\n        }\n    }\n    return isRight", "\t\
    for i := 0; i < len(brackets); i++ {\n\t\tif brackets[i] != '<' {\n\t\t\treturn\
    \ false\n\t\t}\n\t\tfor j := 0; j < len(brackets); j++ {\n\t\t\tif j == i {\n\t\
    \t\t\tcontinue\n\t\t\t}\n\t\t\tif brackets[j] == brackets[i] {\n\t\t\t\treturn\
    \ false\n\t\t\t}\n\t\t}\n\t}\n\treturn true", "    var bracketPairs = [String:\
    \ Bool]()\n    var bracketString = \"\"\n    for char in brackets {\n        if\
    \ char == \"<\" {\n            bracketPairs[\"<\"] = false\n            bracketPairs[\"\
    >\"] = false\n        } else if char == \">\" {\n            bracketPairs[\"<\"\
    ] = true\n            bracketPairs[\">\"] = true\n        } else {\n         \
    \   bracketPairs[char] = true\n        }\n        bracketString += char\n    }\n\
    \    return bracketString.split(split: \">\").count - bracketString.split(split:\
    \ \"<\").count == bracketPairs.count", "    if brackets.isEmpty {\n        return\
    \ true\n    }\n    for openingChar := 0; openingChar < brackets.characters.count;\
    \ openingChar += 1 {\n        if brackets[openingChar] != brackets[openingChar+1]\
    \ {\n            return false\n        }\n    }\n    return true", "    var count\
    \ = 0\n    var i = 0\n    while i < brackets.characters.count {\n        if brackets.characters[i]\
    \ == '<' {\n            count += 1\n        }\n        i += 1\n    }\n    while\
    \ i < brackets.characters.count {\n        if brackets.characters[i] == '>' {\n\
    \            count -= 1\n        }\n        i += 1\n    }\n    return count ==\
    \ 0", "    let opens = brackets.split(separator: \"<\").map(String.init)\n   \
    \ let closes = brackets.split(separator: \">\").map(String.init)\n    return opens.count\
    \ == closes.count", "    var opening_brackets = [String]()\n    for char in brackets\
    \ {\n        switch char {\n        case '<':\n            opening_brackets.append(char)\n\
    \        case '>':\n            if opening_brackets.isEmpty {\n              \
    \  return false\n            }\n            let last = opening_brackets.removeLast()\n\
    \            if char == last {\n                return true\n            }\n \
    \       default:\n            return false\n        }\n    }\n    return opening_brackets.isEmpty",
  "    var opening = brackets[0]\n    var closing = brackets[0]\n    for openingIdx,\
    \ openingChar := range brackets {\n        if openingChar == '<' {\n         \
    \   if openingIdx == 0 {\n                opening = openingChar\n            }\
    \ else {\n                opening = brackets[openingIdx - 1]\n            }\n\
    \        }\n    }\n    for closingIdx, closingChar := range brackets {\n     \
    \   if closingChar == '>' {\n            if closingIdx == 0 {\n              \
    \  closing = closingChar\n            } else {\n                closing = brackets[closingIdx\
    \ - 1]\n            }\n        }\n    }\n    if opening != closing {\n       \
    \ return false\n    }\n    return true", "\treturn brackets == strings.Replace(brackets,\
    \ \"<<\", \">\", -1) &&\n\t\tbrackets == strings.Replace(brackets, \">>\", \"\
    <\", -1)", "    // Initialize to true because the first opening bracket should\
    \ be closed immediately after.\n    var openingBracketsClosed = true\n\n    //\
    \ Iterate through all brackets.\n    for bracket in brackets {\n        // Check\
    \ if the closing bracket is found within the next bracket.\n        for possibleClosingBracket\
    \ in brackets {\n            if bracket == possibleClosingBracket {\n        \
    \        // If this is the first opening bracket, immediately close it.\n    \
    \            if openingBracketsClosed {\n                    openingBracketsClosed\
    \ = false\n                } else {\n                    // If this is not the\
    \ first opening bracket, close it now.\n                    openingBracketsClosed\
    \ = false\n                }\n\n                // If we found a matching opening\
    \ bracket, break.\n                break\n            }\n        }\n\n       \
    \ // If we didn't find a matching opening bracket, add an opening bracket to our\
    \ boolean.\n        if openingBracketsClosed {\n            openingBracketsClosed\
    \ = true\n        }\n    }\n\n    // Return the boolean value.\n    return openingBracketsClosed",
  "  var prevCharIsClosing = false\n  for ch in brackets {\n    if ch == \"<\" {\n\
    \      prevCharIsClosing = true\n    } else if ch == \">\" {\n      if prevCharIsClosing\
    \ {\n        return false\n      }\n      prevCharIsClosing = false\n    } else\
    \ {\n      return false\n    }\n  }\n  return true", "\tlet firstIndex = brackets.startIndex\n\
    \tlet lastIndex = brackets.endIndex\n\tif firstIndex == lastIndex {\n\t\treturn\
    \ true\n\t}\n\n\tlet openingBracket = brackets[firstIndex]\n\tif openingBracket\
    \ == \"<\" {\n\t\tlet secondIndex = brackets.range(of: \"<\", options: .backwards)?.lowerBound\n\
    \t\tif secondIndex == lastIndex { return true }\n\t\tif brackets[secondIndex+1]\
    \ != \">\" { return false }\n\t\treturn correct_bracketing(brackets: brackets[secondIndex..<lastIndex])\n\
    \t} else if openingBracket == \"<\" {\n\t\tlet secondIndex = brackets.range(of:\
    \ \"<\", options: .backwards)?.upperBound\n\t\tif secondIndex == lastIndex { return\
    \ true }\n\t\tif brackets[secondIndex-1] != \">\" { return false }\n\t\treturn\
    \ correct_bracketing(brackets: brackets[firstIndex..<secondIndex])\n\t} else if\
    \ openingBracket == \"<\" {\n\t\tlet secondIndex = brackets.range(of: \"<\", options:\
    \ .backwards)?.upperBound\n\t\tif secondIndex == lastIndex { return true }\n\t\
    \tif brackets[secondIndex+1] != \">\" { return false }\n\t\treturn correct_bracketing(brackets:\
    \ brackets[firstIndex..<secondIndex])\n\t}\n\treturn false", "    let strings\
    \ = brackets.characters\n        .flatMap { String($0) }\n        .map { String(Character($0))\
    \ }\n\n    // Return false if any opening bracket does not have a corresponding\
    \ closing bracket.\n    for curChar in strings {\n        if curChar == \"<\"\
    \ {\n            return false\n        }\n    }\n\n    return true", "    var\
    \ result = (brackets == \"<\" && brackets == \"<\") || (brackets == \"<\" && brackets\
    \ == \"<=\") ||\n        (brackets == \"<\" && brackets == \"=>\") || (brackets\
    \ == \"<\" && brackets == \"=>=\") ||\n        (brackets == \"<\" && brackets\
    \ == \"=><\") || (brackets == \"<\" && brackets == \"=>=>\") ||\n        (brackets\
    \ == \"<\" && brackets == \"=>=>\") || (brackets == \"<\" && brackets == \"==>\"\
    ) ||\n        (brackets == \"<\" && brackets == \"==>\") || (brackets == \"<\"\
    \ && brackets == \"===>\") ||\n        (brackets == \"<\" && brackets == \"===>\"\
    ) || (brackets == \"<\" && brackets == \"=>==\") ||\n        (brackets == \"<\"\
    \ && brackets == \"=>==\") || (brackets == \"<\" && brackets == \"->\") ||\n \
    \       (brackets == \"<\" && brackets == \"->>\") || (brackets == \"<\" && brackets\
    \ == \"->=\") ||\n        (brackets == \"<\" && brackets == \"->=>\") || (brackets\
    \ == \"<\" && brackets == \"-=>\") ||\n        (brackets == \"<\" && brackets\
    \ == \"-=>\") || (brackets == \"<\" && brackets == \"-=>=\") ||\n        (brackets\
    \ == \"<\" && brackets == \"-=>=\") || (brackets == \"<\" && brackets == \"-==\"\
    ) ||\n        (brackets == \"<\" && brackets == \"-==>\") || (brackets == \"<\"\
    \ && brackets == \"-===>\") ||\n        (brackets == \"<\" && brackets == \"-===>\"\
    ) || (brackets == \"<\" && brackets == \"-=>==\") ||\n        (brackets == \"\
    <\" && brackets == \"-=>==\") || (brackets == \"<\" && brackets == \"-=\") ||\n\
    \        (brackets == \"<\" && brackets == \"-->\") || (brackets == \"<\" && brackets\
    \ == \"-->>\") ||\n        (brackets == \"<\" && brackets == \"-->=\") || (brackets\
    \ == \"<\" && brackets == \"->\") ||\n        (brackets == \"<\" && brackets ==\
    \ \"->>\") || (brackets == \"<\" && brackets == \"->=\") ||\n        (brackets\
    \ == \"<\" && brackets == \"->=>\") || (brackets == \"<\" && brackets == \"=>\"\
    ) ||\n        (brackets == \"<\" && brackets == \"=>\") || (brackets == \"", " \
    \   var lastOpeningBracket: Character\n    for openingBracket in brackets.characters\
    \ {\n        if lastOpeningBracket == nil {\n            lastOpeningBracket =\
    \ openingBracket\n        } else if openingBracket != lastOpeningBracket {\n \
    \           return false\n        }\n    }\n    return lastOpeningBracket == nil",
  "    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openedBracket: String.Character\n    var closeBracket: String.Character\n\
    \    var isOpened: Bool\n    var isClosed: Bool\n    var isBadlyFormatted: Bool\n\
    \    var isNotClosed = false\n    let openBracketCount = brackets.count\n    let\
    \ closingBracketCount = brackets.count\n    for i in 0..<openBracketCount {\n\
    \        openedBracket = openingBrackets[i]\n        isOpened = openedBracket\
    \ == \"<\"\n        isClosed = openedBracket == \">\"\n        isBadlyFormatted\
    \ = isClosed || isBadlyFormatted(openBrackets, i)\n        if isBadlyFormatted\
    \ {\n            return false\n        }\n        if isOpened {\n            if\
    \ isClosed {\n                closingBrackets.remove(at: i)\n                closingBracketCount\
    \ -= 1\n            } else {\n                openingBrackets.remove(at: i)\n\
    \                openBracketCount -= 1\n            }\n        }\n    }\n    if\
    \ openBracketCount < closingBracketCount {\n        isNotClosed = true\n     \
    \   return false\n    }\n    if openBracketCount == 0 && isNotClosed {\n     \
    \   return true\n    }\n    if openBracketCount != closingBracketCount {\n   \
    \     return false\n    }\n    if isNotClosed {\n        return true\n    }\n\
    \    return isClosed", "    brackets = brackets.lowercased()\n\n    var stack\
    \ = NSMutableArray(capacity: brackets.count)\n    var result = false\n    var\
    \ openingBrackets = 0 // count number of opening brackets\n    var closingBrackets\
    \ = 0 // count number of closing brackets\n\n    for char in brackets.characters\
    \ {\n        switch char {\n        case '<':\n            openingBrackets +=\
    \ 1\n            stack.addObject(char)\n        case '>':\n            if stack.count\
    \ > 0 {\n                closingBrackets += 1\n                if closingBrackets\
    \ == openingBrackets {\n                    result =\n                       \
    \ true\n                    stack.removeLast()\n                } else {\n   \
    \                 stack.removeLast()\n                }\n            } else {\n\
    \                result =\n                    false\n            }\n        \
    \    openingBrackets -= 1\n        }\n    }\n\n    return result", "    let openings\
    \ = brackets.characters.split(separator: \"<\").filter({ $0.isEmpty })\n    let\
    \ closings = brackets.characters.split(separator: \">\").filter({ $0.isEmpty })\n\
    \    if openings.count != closings.count {\n        return false\n    }\n    for\
    \ index in 0..<openings.count {\n        let opening = openings[index]\n     \
    \   let closing = closings[index]\n        if opening.isEmpty != closing.isEmpty\
    \ {\n            return false\n        }\n        if opening.first != closing.last\
    \ {\n            return false\n        }\n    }\n    return true", "    var opening\
    \ = brackets[1...].count\n    var closing = brackets[0...1].count\n\n    var result:\
    \ Bool = false\n\n    if opening == closing {\n        result = true\n    } else\
    \ if opening > closing {\n        result = false\n    } else {\n        result\
    \ = true\n\n        var i = 0\n        var j = 0\n        var k = 0\n        for\
    \ k <= closing {\n            if brackets[1...k] == brackets[0...k] {\n      \
    \          if brackets[1...k].count != opening {\n                    result =\
    \ false\n                    break\n                } else {\n               \
    \     i += 1\n                    k += 1\n                }\n            } else\
    \ {\n                result = false\n                break\n            }\n  \
    \      }\n\n        for j = 0 <= opening {\n            if brackets[0...j] ==\
    \ brackets[1...closing] {\n                if brackets[0...j].count != closing\
    \ {\n                    result = false\n                    break\n         \
    \       } else {\n                    j += 1\n                    closing -= 1\n\
    \                }\n            } else {\n                result = false\n   \
    \             break\n            }\n        }\n    }\n\n    return result", "\t\
    brackets = brackets.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet())\n\
    \tbrackets = brackets.stringByReplacingOccurrencesOfString(\"<\", withString:\
    \ \"\", options: NSCaseInsensitiveSearch, range: nil)\n\tbrackets = brackets.stringByReplacingOccurrencesOfString(\"\
    >\", withString: \"\", options: NSCaseInsensitiveSearch, range: nil)\n\t\n\tlet\
    \ openingBrackets = brackets.stringByTrimmingCharactersInSet(NSCharacterSet.openingAndClosingBrackets())\n\
    \tlet closingBrackets = brackets.stringByTrimmingCharactersInSet(NSCharacterSet.closingBrackets())\n\
    \t\n\tlet openingBracketsCount = openingBrackets.count\n\tlet closingBracketsCount\
    \ = closingBrackets.count\n\t\n\treturn openingBracketsCount == closingBracketsCount",
  "    if brackets.isEmpty() {\n        return true\n    }\n\n    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = \"\"\n    var hasClosingBrackets\
    \ = false\n    var hasOpeningBrackets = false\n\n    if brackets.characters.count\
    \ == 1 {\n        hasClosingBrackets = true\n        closingBrackets = brackets.characters.first!\n\
    \    }\n\n    if hasClosingBrackets {\n        openingBrackets.removeLast()\n\
    \        hasOpeningBrackets = true\n    }\n\n    if openingBrackets.isEmpty()\
    \ {\n        return false\n    }\n\n    guard let lastOpeningBracket = openingBrackets.last\
    \ else {\n        return false\n    }\n\n    guard lastOpeningBracket == \"<\"\
    \ || lastOpeningBracket == \"<<\" else {\n        return false\n    }\n\n    let\
    \ nextClosingBracket = openingBrackets.first!\n    guard nextClosingBracket ==\
    \ \">\" || nextClosingBracket == \">>\" else {\n        return false\n    }\n\n\
    \    openingBrackets.removeFirst()\n\n    if openingBrackets.isEmpty() {\n   \
    \     return false\n    }\n\n    return !hasOpeningBrackets\n        && !hasClosingBrackets\n\
    \        && openingBrackets.count == 1\n        && closingBrackets.count == 1",
  "    let openings = brackets.count(\"<\")\n    let closings = brackets.count(\"\
    <>\") - openings\n    if openings == 0 || closings == 0 {\n        return false\n\
    \    }\n    for index in 0..<openings {\n        if brackets[index] != brackets[index+1]\
    \ {\n            return false\n        }\n    }\n    return true", "  var last\
    \ = 0\n  for index := 0; index < brackets.characters.count; index++ {\n    let\
    \ current = brackets.characters[index]\n    guard last! < index else { return\
    \ false }\n    if current != \"<\" { return false }\n    if brackets.characters[index+1\
    \ : index+3] != \">>\" { return false }\n    last++\n  }\n  return true", "  \
    \  // make sure to include the last character in the array\n    let chars = brackets.characters.suffix(from:\
    \ brackets.endIndex)\n    var openingBrackets: [String] = []\n    var closingBrackets:\
    \ [String] = []\n    for char in chars {\n        guard let openingBracket = openingBrackets[chars.index(of:\
    \ char)] else {\n            openingBrackets.append(char)\n            closingBrackets.append(char)\n\
    \            continue\n        }\n        guard let closingBracket = closingBrackets[chars.index(of:\
    \ char)] else {\n            // the opening brackets didn't have corresponding\
    \ closing brackets\n            return false\n        }\n        // both brackets\
    \ are open, they're both the same type\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n        // close the current openingBracket\n\
    \        openingBrackets.removeLast()\n        closingBrackets.removeLast()\n\
    \    }\n    return openingBrackets.isEmpty", "    var result: Bool = true\n  \
    \  for opening in brackets.characters {\n        if !opening_closing_pairs.contains(opening)\
    \ {\n            result = false\n        }\n    }\n    return result", "    var\
    \ openBrackets = brackets.characters\n    var openBracketIndex = brackets.startIndex\n\
    \    var closeBracketIndex = 0\n    let openBracketIndexEnd = brackets.endIndex\n\
    \    var openBracketCount = 0\n    var closeBracketCount = 0\n    var startIndex\
    \ = 0\n    var endIndex = 0\n    var isBracketOpen = false\n    while openBracketIndex\
    \ < openBracketIndexEnd {\n        if openBrackets[openBracketIndex] == \">\"\
    \ {\n            if openBracketCount > 1 {\n                return false\n   \
    \         }\n            if openBracketIndex == openBracketIndexEnd {\n      \
    \          return false\n            }\n            if closeBracketIndex < openBracketIndex\
    \ {\n                closeBracketIndex++\n                closeBracketCount++\n\
    \            }\n        }\n        else if openBrackets[openBracketIndex] == \"\
    <\" {\n            if openBracketCount > 0 {\n                return false\n \
    \           }\n            if openBracketIndex == openBracketIndexEnd {\n    \
    \            return false\n            }\n            if closeBracketIndex < openBracketIndex\
    \ {\n                closeBracketIndex++\n                closeBracketCount++\n\
    \            }\n        }\n        else if openBrackets[openBracketIndex] == '>'\
    \ {\n            if openBracketCount == 0 {\n                openBracketCount++\n\
    \            }\n            else {\n                openBracketCount--\n     \
    \       }\n            if openBracketCount == 0 {\n                openBracketIndex++\n\
    \                openBracketCount = 0\n            }\n        }\n        else\
    \ if openBrackets[openBracketIndex] == '<' {\n            if openBracketCount\
    \ == 0 {\n                openBracketCount++\n            }\n            else\
    \ {\n                openBracketCount--\n            }\n            if openBracketCount\
    \ == 0 {\n                openBracketIndex++\n                openBracketCount\
    \ = 0\n            }\n        }\n        else if openBrackets[openBracketIndex]\
    \ == '(' ||\n            openBrackets[openBracketIndex] == ')' ||\n          \
    \  openBrackets[openBracketIndex] == '[' ||\n            openBrackets[openBracketIndex]\
    \ == ']' ||\n            openBrackets[openBracketIndex] == '{' ||\n          \
    \  openBrackets[openBracketIndex] == '}' ||\n            openBrackets[openBracketIndex]\
    \ == '.' {\n            if openBracketCount != 0 {\n                return false\n\
    \            }\n            if openBracketIndex == openBracketIndexEnd {\n   \
    \             return false\n            }\n            if closeBracketIndex <\
    \ openBracketIndex {\n                close", "    var brackets = brackets.characters\n\
    \    if brackets.isEmpty {\n        return true\n    }\n    var lastIndex = brackets.startIndex\n\
    \    for bracketIndex in\n        0..<brackets.count {\n        let bracket =\
    \ brackets[bracketIndex]\n        if bracket != brackets[bracketIndex] {\n   \
    \         lastIndex = bracketIndex\n        } else {\n            let nextBracket\
    \ = brackets[bracketIndex + 1]\n            if nextBracket != brackets[bracketIndex\
    \ + 2] {\n                lastIndex = bracketIndex\n            }\n        }\n\
    \    }\n    brackets[lastIndex] = brackets.endIndex\n    var hasMatchingCloser\
    \ = false\n    for bracketIndex in\n        0..<brackets.count {\n        let\
    \ bracket = brackets[bracketIndex]\n        if bracket != brackets[bracketIndex]\
    \ {\n            hasMatchingCloser = true\n            break\n        } else {\n\
    \            let nextBracket = brackets[bracketIndex + 1]\n            if nextBracket\
    \ != brackets[bracketIndex + 2] {\n                hasMatchingCloser = true\n\
    \                break\n            }\n        }\n    }\n    return !hasMatchingCloser",
  "    var stack = [String]()\n    var opening = brackets[0]\n    var closing = brackets[0]\n\
    \    for character in brackets {\n        if character == opening {\n        \
    \    if stack.isEmpty {\n                return false\n            }\n       \
    \     stack.remove(at: stack.endIndex)\n        } else {\n            if stack.contains(where:\
    \ { $0 == \"<\" } ) {\n                return false\n            }\n         \
    \   stack.append(character)\n        }\n    }\n    if stack.contains(where: {\
    \ $0 == opening } ) {\n        return false\n    }\n    return true", "    let\
    \ firstOpening = brackets.rangeOfString(\"<\")\n    let lastClosing = brackets.rangeOfString(\"\
    >\")\n    if firstOpening == nil || lastClosing == nil {\n        return false\n\
    \    }\n    var bracketCount = 1\n    while firstOpening.location != lastClosing.location\
    \ {\n        if bracketCount > 10 {\n            return false\n        }\n   \
    \     let openingBracket = brackets[firstOpening.location + 1]\n        let closingBracket\
    \ = brackets[lastClosing.location - 1]\n        if openingBracket != \"<\" ||\
    \ closingBracket != \">\" {\n            return false\n        }\n        bracketCount++\n\
    \        firstOpening = brackets.rangeOfString(\"<\", options: .BackwardsSearch)\n\
    \        lastClosing = brackets.rangeOfString(\">\", options: .BackwardsSearch)\n\
    \    }\n    return true", "\tif brackets.count < 3 { return false }\n\t\n\topen\
    \ := brackets[0..<brackets.count]\n\tclose := brackets[1..<brackets.count]\n\t\
    \n\tfor _, char := range open {\n\t\tif !contains(close, char) {\n\t\t\treturn\
    \ false\n\t\t}\n\t}\n\t\n\treturn true", "    let reversed = brackets[characters.reversed().startIndex..<brackets.endIndex]\n\
    \    let openings = reversed\n        .split(separator: \"<>\")\n        .map\
    \ {\n            String($0.characters.dropFirst())\n        }\n        .filter\
    \ { $0.characters.count == 1 }\n    let closings = reversed\n        .split(separator:\
    \ \"<>\")\n        .map {\n            String($0.characters.dropLast())\n    \
    \    }\n        .filter { $0.characters.count == 1 }\n\n    return openings.count\
    \ == closings.count", "    var bracketCounts = [Int]()\n    for s in brackets\
    \ {\n        var i = 0\n        while i < s.characters.count && s[i] != '<' {\n\
    \            i += 1\n        }\n        if i >= s.characters.count {\n       \
    \     return false\n        }\n        var j = i\n        while j < s.characters.count\
    \ && s[j] != '>' {\n            j += 1\n        }\n        i += j - 1\n      \
    \  bracketCounts.append(j)\n    }\n    for _, count in bracketCounts.reverse()\
    \ {\n        if count < 1 {\n            return false\n        }\n    }\n    return\
    \ true", "    let openings = brackets.components(separatedBy: \">\")\n    let\
    \ closings = brackets.components(separatedBy: \"<\")\n    \n    if openings.count\
    \ != closings.count {\n        return false\n    }\n    \n    var isCorrect :\
    \ Bool = true\n    for openingIndex in 0..<openings.count {\n        for closingIndex\
    \ in 0..<closings.count {\n            if openings[openingIndex] == closings[closingIndex]\
    \ {\n                isCorrect = false\n                break\n            }\n\
    \        }\n    }\n    return isCorrect", "    let ranges: [(Range<Index>, Range<Index>)]\
    \ = brackets.split(separator: \"<\").map {\n        let firstRange = NSRange()\n\
    \        guard let firstIndex = self.text.index(start: self.text.startIndex.advanced(by:\
    \ 0)) else {\n            return firstRange\n        }\n\n        let firstChar\
    \ = self.text[index]\n        let lastChar = self.text[index.advanced(by: 1)]\n\
    \        guard firstChar != \"<\" else { return firstRange }\n        guard lastChar\
    \ != \">\" else { return firstRange }\n        guard let secondIndex = self.text.index(start:\
    \ self.text.index(before: index).advanced(by: 1)) else {\n            return firstRange\n\
    \        }\n\n        let secondChar = self.text[index[index]]\n        guard\
    \ secondChar != \">\" else { return firstRange }\n\n        let firstCharIndex:\
    \ Int = firstIndex.advanced(by: 0)\n        let secondCharIndex: Int = secondIndex.advanced(by:\
    \ 0)\n        let openingRange = firstCharIndex..<secondCharIndex\n        let\
    \ closingRange = firstCharIndex..<secondCharIndex.advanced(by: -1)\n\n       \
    \ return closingRange ~= firstRange.lowerBound\n    }\n\n    let firstRange =\
    \ ranges.first!.0\n    let secondRange = ranges.last!.0\n    guard let firstIndex\
    \ = self.text.index(start: self.text.index(before: firstRange.lowerBound)) else\
    \ {\n        return false\n    }\n\n    guard let secondIndex = self.text.index(start:\
    \ self.text.index(before: secondRange.upperBound)) else {\n        return false\n\
    \    }\n\n    if let lastRange = ranges.last?.1 {\n        guard self.text[firstIndex.advanced(by:\
    \ lastRange.upperBound.advanced(by: -1)) != \">\" else {\n            return false\n\
    \        }\n    }\n\n    if firstRange.lowerBound == secondRange.lowerBound {\n\
    \        return true\n    }\n\n    return false", "    let stack = brackets.characters\n\
    \    guard let openingBrackets = stack.prefix(while: { $0 != \">\" }) else {\n\
    \        return true\n    }\n\n    guard let closingBrackets = stack.suffix(while:\
    \ { $0 != \"<\" }) else {\n        return false\n    }\n\n    // If opening brackets\
    \ contains only closing brackets then it's wrong\n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n\n    // If there are\
    \ too many closing brackets, it's wrong\n    if openingBrackets.count > 2 {\n\
    \        return false\n    }\n\n    // If there are too many opening brackets,\
    \ it's wrong\n    if closingBrackets.count > 2 {\n        return false\n    }\n\
    \n    // If there are too few opening brackets, it's wrong\n    if openingBrackets.count\
    \ < 2 {\n        return false\n    }\n\n    // If there are too few closing brackets,\
    \ it's wrong\n    if closingBrackets.count < 2 {\n        return false\n    }\n\
    \n    // If there are 2 or more brackets in a row, the brackets are not correct.\n\
    \    // e.g. \"<><>\" -> <><> -> <><> -> <>\n    if stack.last == \">\" && stack.last\
    \ == \"<\" {\n        return false\n    }\n\n    // If there is an opening bracket\
    \ followed by an opening bracket or an opening bracket followed by an closing\
    \ bracket, the brackets are not correct.\n    // e.g. \"<>\" -> <><> -> <><> ->\
    \ <><> -> <>\n    if stack.last == \">\" && stack.last == \"<\" || stack.last\
    \ == \"<\" && stack.last == \">\" {\n        return false\n    }\n\n    // If\
    \ there is an opening bracket followed by an opening bracket followed by an opening\
    \ bracket followed by an opening bracket, the brackets are not correct.\n    //\
    \ e.g. \"<>\" -> <><> -> <><> -> <><> -> <>\n    if stack.last == \">\" && stack.last\
    \ == \"<\" || stack.last == \"<\" && stack.last == \"<\" && stack.last == \">\"\
    \ {\n        return false\n    }\n\n    // If there is an opening bracket followed\
    \ by an opening bracket followed by an opening bracket followed by an opening\
    \ bracket followed by an opening bracket, the brackets are not correct.\n    //\
    \ e.g. \"<>\" -> <><> -> <><> -> <><> -> <>\n    if stack.last == \">\" && stack.last\
    \ == \"<\" || stack.last == \"<\" && stack.last == \"<\" && stack.last == \"<\"\
    \ && stack.last == \">\" {\n        return false\n    }\n\n    // If there is\
    \ an opening bracket followed by an opening bracket followed by an opening bracket\
    \ followed by an opening bracket followed by an ", '    return brackets[brackets.startIndex]
    == "<" && brackets[brackets.endIndex-1] == ">"', "    if brackets.characters.count\
    \ == 0 {\n        return true\n    }\n\n    let openingBrackets: [String] = brackets.components(separatedBy:\
    \ \">\")\n    let closingBrackets: [String] = brackets.components(separatedBy:\
    \ \"<\")\n\n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n\n    for i in 0..<openingBrackets.count {\n        let openingBracket\
    \ = openingBrackets[i]\n        let closingBracket = closingBrackets[i]\n\n  \
    \      if openingBracket == \"<\" || openingBracket == \"{\" || openingBracket\
    \ == \"[\" {\n            if closingBracket == \">\" || closingBracket == \"}\"\
    \ || closingBracket == \"]\" {\n                continue\n            } else {\n\
    \                return false\n            }\n        }\n\n        return false\n\
    \    }\n\n    return true", "    let openingBracketStrings = brackets.components(separatedBy:\
    \ \">\")\n    let closingBracketStrings = brackets.components(separatedBy: \"\
    <\")\n\n    var isCorrrect : Bool = false\n    for openBracket in openingBracketStrings\
    \ {\n        for openBracketString in openBracket.components(separatedBy: \">\"\
    ) {\n            if let closeBracketString = openBracketString.components(separatedBy:\
    \ \"<\")[0] {\n                if openBracket == closeBracketString {\n      \
    \              isCorrrect = true\n                    break\n                }\n\
    \            }\n        }\n    }\n    return isCorrrect", "    if brackets.isEmpty\
    \ {\n        return true\n    }\n    switch brackets.count {\n    case 0:\n  \
    \      return true\n    case 1:\n        return true\n    case 2:\n        return\
    \ true\n    case 3:\n        return true\n    case 4:\n        return true\n \
    \   case 5:\n        return true\n    case 6:\n        return true\n    default:\n\
    \        return false\n    }", "    let brackets = brackets.characters.split(separator:\
    \ \">\").map(String.init).joined(separator: \"<\")\n    guard brackets.characters.count\
    \ == brackets.characters.reduce(0) { $0 + $1.characters.count }\n    return brackets.characters.count\
    \ > 0", "    // Split string into array of opening brackets.\n    var openingBrackets\
    \ = [String]()\n    for (i, ch) in brackets.characters.enumerated() {\n      \
    \  if ch == '<' {\n            openingBrackets.append(String(brackets.characters.suffix(from:\
    \ i)))\n        }\n    }\n\n    // Remove opening brackets.\n    var openingBracketsCount\
    \ = openingBrackets.count\n    for openingBracket in openingBrackets {\n     \
    \   brackets.remove(at: openingBrackets.firstIndex(of: openingBracket))\n    \
    \    openingBracketsCount -= 1\n    }\n    return openingBracketsCount == 0",
  "    let openingBrackets = brackets.components(separatedBy: \"<\")\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n    \n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n    \n    for (_, openingBracket)\
    \ in openingBrackets.enumerated() {\n        let openingBracketString = openingBracket.description\n\
    \        let closingBracketString = closingBrackets[openingBracket.offset]\n \
    \       \n        if openingBracketString != closingBracketString {\n        \
    \    return false\n        }\n    }\n    \n    return true", "    let stack =\
    \ brackets.characters().map { String($0) }\n    var correct = true\n    for (_,\
    \ openingBracket) in\n        brackets.enumerated().filter({ stack[$1.offset]\
    \ == openingBracket }) {\n        stack[$1.offset] = \"</\"\n        correct =\
    \ correct && !stack.isEmpty\n        stack[$1.offset] = openingBracket\n    }\n\
    \    return !correct", "    var closed = false\n    var opened = false\n    var\
    \ start = -1\n    var end = -1\n    for index, ch in brackets.characters.reverse()\
    \ {\n        switch ch {\n        case \"<\":\n            if opened {\n     \
    \           closed = false\n                start = index\n            } else\
    \ {\n                closed = true\n                opened = true\n          \
    \  }\n        case \"=\":\n        case \"|\":\n        case \"<=\":\n       \
    \ case \"!=\":\n        case \"==\":\n        case \"~=\":\n        case \"!~=\"\
    :\n        case \"&&\":\n        case \"||\":\n        case \"<-\":\n        case\
    \ \"->\":\n        case \"<<-\":\n        case \"->->\":\n        case \"->-\"\
    :\n        case \"<<->\":\n            opened = false\n            end = index\n\
    \        }\n    }\n    return opened && start >= 0 && end >= start", "    let\
    \ stack = brackets.characters().map({ String($0) })\n    if stack.isEmpty { return\
    \ false }\n\n    // Count every opening bracket.\n    var count : UInt = 0\n \
    \   for c in stack {\n        if c == \"<\" {\n            count += 1\n      \
    \  } else if c == \"(\" {\n            count += 2\n        } else if c == \")\"\
    \ {\n            count -= 1\n        }\n    }\n    if count < 0 {\n        return\
    \ false\n    }\n\n    // Make sure all closing brackets are matched.\n    var\
    \ lastIndex = UInt64(brackets.characters.count) - 1\n    for c in stack.characters()\
    \ {\n        if c == \"<\" {\n            if count < 0 {\n                return\
    \ false\n            }\n            count -= 1\n        } else if c == \">\" {\n\
    \            if count == 0 {\n                return false\n            }\n  \
    \          count += 1\n        } else if c == \")\" {\n            count += 2\n\
    \            lastIndex -= 1\n        } else {\n            return false\n    \
    \    }\n        if lastIndex != UInt64(brackets.characters.count) {\n        \
    \    return false\n        }\n    }\n    return true", "\tlet counts = brackets.split(separator:\
    \ \" \").compactMap({ String($0) }).map {\n\t\tString($0).characters.split(separator:\
    \ \"<\").count\n\t}\n\treturn counts.reduce(true) { (accumulator, currentValue)\
    \ -> Bool in\n\t\tif accumulator {\n\t\t\treturn false\n\t\t}\n\t\tif currentValue\
    \ > 0 {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}", "    if brackets.characters.count\
    \ < 3 {\n        return true\n    }\n    let openingBrackets = brackets.characters\n\
    \        .filter({$0 != \">\" && $0 != \"<\"})\n        .map { String($0) }\n\
    \    let closingBrackets = brackets.characters\n        .filter({$0 == \">\"})\n\
    \        .map { String($0) }\n    let otherBrackets = brackets.characters\n  \
    \      .filter({$0 != \"<\" && $0 != \">\"})\n        .map { String($0) }\n  \
    \  let openingBracketsCount = openingBrackets.count\n    let closingBracketsCount\
    \ = closingBrackets.count\n    let otherBracketsCount = otherBrackets.count\n\
    \    if openingBracketsCount == closingBracketsCount {\n        return true\n\
    \    } else if openingBracketsCount != otherBracketsCount {\n        return false\n\
    \    } else if openingBracketsCount == 0 {\n        return true\n    }\n    var\
    \ currentOpeningBracket = openingBrackets[0]\n    for _ in 0..<openingBracketsCount\
    \ {\n        guard let nextOpeningBracket = openingBrackets.next() else { return\
    \ false }\n        if nextOpeningBracket == currentOpeningBracket {\n        \
    \    currentOpeningBracket = nextOpeningBracket\n        } else {\n          \
    \  return false\n        }\n    }\n    return true", "    var openingBrackets\
    \ = brackets[0..<brackets.count]\n    var closingBrackets = brackets[brackets.count..<brackets.count\
    \ + 1]\n    for openingBracket in openingBrackets {\n        if !closingBrackets.contains(openingBracket)\
    \ {\n            return false\n        }\n    }\n    return true", "    let start\
    \ = brackets.characters.firstIndex(of: \"<\")\n    let end = brackets.characters.lastIndex(of:\
    \ \">\")\n\n    guard start >= 0 && end >= 0 else {\n        return false\n  \
    \  }\n\n    guard end >= start else {\n        return false\n    }\n\n    return\
    \ brackets.hasPrefix(brackets.substring(from: start))", "    for opening, bracket\
    \ := range brackets {\n        if opening.isOpeningBracket() {\n            return\
    \ bracket == closing_bracket_string(opening)\n        }\n    }\n    return false",
  "    var index = 0\n    var openingBracket = false\n    var closingBracket = false\n\
    \    for char in brackets {\n        if char == \">\" {\n            if openingBracket\
    \ {\n                openingBracket = false\n                closingBracket =\
    \ true\n            } else {\n                openingBracket = true\n        \
    \        closingBracket = false\n            }\n        }\n        if char ==\
    \ \"<\" {\n            if !openingBracket {\n                openingBracket =\
    \ true\n                closingBracket = false\n            }\n        }\n   \
    \     if openingBracket && char == \">\" {\n            if closingBracket {\n\
    \                closingBracket = false\n                openingBracket = false\n\
    \            } else {\n                closingBracket = true\n               \
    \ openingBracket = false\n            }\n        }\n        if openingBracket\
    \ && char == \"<\" {\n            if closingBracket {\n                openingBracket\
    \ = false\n                closingBracket = false\n            } else {\n    \
    \            openingBracket = true\n                closingBracket = false\n \
    \           }\n        }\n        if openingBracket && closingBracket {\n    \
    \        if index == 0 {\n                return false\n            }\n      \
    \      index--\n        }\n    }\n    return true", "\tvar found: Bool = false\n\
    \tfor bracket in brackets.characters {\n\t\tif found {\n\t\t\tcontinue\n\t\t}\n\
    \n\t\tif bracket == \"<\" {\n\t\t\tfound = true\n\t\t} else if bracket == \">\"\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true", "    guard brackets.count\
    \ >= 1, brackets.count <= 2 else {\n        return false\n    }\n\n    var hasFirstBracket:\
    \ Bool = false\n    var hasLastBracket: Bool = false\n\n    for letter in brackets\
    \ {\n        switch letter {\n        case \"<\":\n            if !hasFirstBracket\
    \ {\n                hasFirstBracket = true\n            } else {\n          \
    \      return false\n            }\n        case \">\":\n            if !hasLastBracket\
    \ {\n                hasLastBracket = true\n            } else {\n           \
    \     return false\n            }\n        default:\n            return false\n\
    \        }\n    }\n\n    if hasFirstBracket && !hasLastBracket {\n        return\
    \ true\n    }\n\n    if hasFirstBracket {\n        return false\n    }\n\n   \
    \ if !hasLastBracket {\n        return false\n    }\n\n    return true", "   \
    \ if brackets.contains(\"<<\") {\n        return false\n    }\n    \n    if brackets.contains(\"\
    <\") {\n        return true\n    }\n    \n    if brackets.contains(\">>\") {\n\
    \        return false\n    }\n    \n    if brackets.contains(\">\") {\n      \
    \  return true\n    }\n    \n    return false", "    var openingBracketCount =\
    \ [Int]()\n    var closingBracketCount = [Int]()\n    var current = 0\n    for\
    \ ch in brackets {\n        openingBracketCount[ch] = openingBracketCount[ch]\
    \ + 1\n        closingBracketCount[ch] = closingBracketCount[ch] + 1\n       \
    \ if openingBracketCount[ch] > 0 {\n            current += openingBracketCount[ch]\n\
    \        }\n    }\n    return current == 0", "    let openingBrackets = \"<\"\n\
    \    let closingBrackets = \">\"\n\n    for bracketsString in brackets.split(separator:\
    \ \"<\") {\n        let closingBracketIndex = bracketsString.firstIndex(of: closingBrackets)\n\
    \        let closingBracketString = bracketsString.substring(from: closingBracketIndex)\n\
    \        if closingBracketString == \"\" {\n            return false\n       \
    \ }\n\n        let openingBracketIndex = bracketsString.firstIndex(of: openingBrackets)\n\
    \        let openingBracketString = bracketsString.substring(from: openingBracketIndex)\n\
    \        if openingBracketString == \"\" {\n            return false\n       \
    \ }\n\n        let closingBracketFound = brackets.range(of: closingBracketString).lowerBound\
    \ != nil\n        let openingBracketFound = brackets.range(of: openingBracketString).upperBound\
    \ != nil\n        if openingBracketFound && !closingBracketFound {\n         \
    \   return false\n        }\n    }\n\n    return true", "\tbrackets = brackets.replacingOccurrences(of:\
    \ \"<\", with: \">\")\n\tbrackets = brackets.replacingOccurrences(of: \">>\",\
    \ with: \"<\")\n\tbrackets = brackets.replacingOccurrences(of: \"<<\", with: \"\
    >>\")\n\treturn brackets.count % 2 == 0", "    if brackets.isEmpty() {\n     \
    \   return true\n    }\n    var openingBrackets = 0\n    var closingBrackets =\
    \ 0\n    for char := range brackets.unicodeScalars {\n        switch char {\n\
    \        case '>':\n            closingBrackets++\n        default:\n        \
    \    openingBrackets++\n        }\n    }\n    return openingBrackets == closingBrackets",
  "    var opening = false\n    var closing = false\n    var lastClosed = 0\n    for\
    \ index, chr := range brackets {\n        if chr == '<' {\n            if opening\
    \ {\n                closing = true\n                opening = false\n       \
    \     }\n        } else {\n            if closing {\n                opening =\
    \ true\n                closing = false\n            }\n        }\n        if\
    \ index > 0 && chr == '>' && index-lastClosed == 1 {\n            closing = true\n\
    \            lastClosed = index\n        }\n    }\n    return closing && lastClosed\
    \ == len(brackets)", "    let openingBrackets = brackets.characters.split(\"<\"\
    ).flatMap { String($0) }\n    let closingBrackets = brackets.characters.split(\"\
    >\").flatMap { String($0) }\n    return openingBrackets.count == closingBrackets.count",
  "    // Add opening and closing brackets one at a time, and\n    // make sure each\
    \ one is balanced correctly.\n    let openBrackets: [String] = brackets.characters.split{$0\
    \ == \">\"}.map(String.init)\n    let closeBrackets: [String] = brackets.characters.split{$0\
    \ == \"<\"}.map(String.init)\n\n    for i in 0..<openBrackets.count {\n      \
    \  // Add opening bracket to a set.\n        let openBracket = openBrackets[i]\n\
    \n        // If that opening bracket is not in the set of close\n        // brackets,\
    \ there is an error.\n        if !closeBrackets.contains(openBracket) {\n    \
    \        return false\n        }\n\n        // Remove the opening bracket from\
    \ the set of close\n        // brackets.\n        closeBrackets.remove(at: i)\n\
    \    }\n\n    // All open brackets must have been closed.\n    if closeBrackets.count\
    \ != 0 {\n        return false\n    }\n\n    // If there is only one open bracket,\
    \ return true.\n    return openBrackets.count == 1", '    return brackets.hasPrefix("<")
    && brackets.hasSuffix(">")', "    switch brackets {\n    case \"<>\":\n      \
    \  return false\n    case \"<<><>>\":\n        return true\n    default:\n   \
    \     return false\n    }", "    var bracketsStripped = brackets\n    for ind\
    \ in 0..<bracketsStripped.characters.count {\n        if bracketsStripped[ind]\
    \ != bracketsStripped[ind.advancedBy(1)] {\n            return false\n       \
    \ }\n    }\n    return true", "\tvar index int\n\tvar open bool = false\n\tvar\
    \ close bool = false\n\n\tfor _, c := range brackets {\n\t\tswitch c {\n\t\tcase\
    \ '<':\n\t\t\tif close {\n\t\t\t\tindex = index - 1\n\t\t\t\tclose = false\n\t\
    \t\t\topen = true\n\t\t\t\tcontinue\n\t\t\t}\n\t\tcase '>':\n\t\t\tif !close {\n\
    \t\t\t\tindex = index - 1\n\t\t\t\topen = true\n\t\t\t\tclose = true\n\t\t\t\t\
    continue\n\t\t\t}\n\t\tcase '>':\n\t\t\tif !close {\n\t\t\t\topen = true\n\t\t\
    \t\tclose = true\n\t\t\t\tcontinue\n\t\t\t}\n\t\tcase '<':\n\t\t\tif !open {\n\
    \t\t\t\topen = true\n\t\t\t\tclose = true\n\t\t\t\tcontinue\n\t\t\t}\n\t\tdefault:\n\
    \t\t\tif !open {\n\t\t\t\topen = true\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\t\
    if open {\n\t\t\tindex = index + 1\n\t\t\topen = false\n\t\t\tcontinue\n\t\t}\n\
    \n\t\tif close {\n\t\t\tindex = index - 1\n\t\t\tclose = false\n\t\t\tcontinue\n\
    \t\t}\n\t}\n\n\treturn index == 0", "    var open_brackets = brackets\n    for\
    \ opening_bracket in brackets {\n        if opening_bracket == \">\" {\n     \
    \       open_brackets = open_brackets[1...].appending(\"]\").appending(\">\")\n\
    \        }\n    }\n    return open_brackets.contains(\"[\") || open_brackets.contains(\"\
    (\")", "    var opening_brackets: [(Int, Int)] = []\n    var closing_brackets:\
    \ [(Int, Int)] = []\n    for b in brackets.characters {\n        if b == '<' {\n\
    \            opening_brackets.append((b, 1))\n        } else if b == '>' {\n \
    \           closing_brackets.append((b, 1))\n        } else {\n            opening_brackets.append((b,\
    \ 0))\n            closing_brackets.append((b, 0))\n        }\n    }\n    if opening_brackets.isEmpty()\
    \ && closing_brackets.isEmpty() {\n        return false\n    }\n    return is_brackets_balanced(opening_brackets,\
    \ closing_brackets)", "    let open = brackets.characters\n        .enumerated()\n\
    \        .filter { (index, character) -> Bool in\n            character == \"\
    <\"\n        }\n        .map { (index, character) -> String in\n            return\
    \ String(character.unicodeScalars)\n        }\n        .map { String($0, radix:\
    \ 16) }\n        .sorted()\n        .map { String($0, radix: 16) }\n\n    let\
    \ close = brackets.characters\n        .enumerated()\n        .filter { (index,\
    \ character) -> Bool in\n            character == \">\"\n        }\n        .map\
    \ { (index, character) -> String in\n            return String(character.unicodeScalars)\n\
    \        }\n        .map { String($0, radix: 16) }\n        .sorted()\n      \
    \  .map { String($0, radix: 16) }\n\n    if open.count == 0 && close.count ==\
    \ 0 {\n        return true\n    }\n    if open.count == 0 {\n        return false\n\
    \    }\n    if close.count == 0 {\n        return false\n    }\n    if open.first!\
    \ != close.first! {\n        return false\n    }\n    if open.count != close.count\
    \ {\n        return false\n    }\n\n    return true", "    guard let first = brackets.first,\n\
    \        let last = brackets.last else { return false }\n    let firstIndex =\
    \ brackets.index(first, offsetBy: 0)\n    let lastIndex = brackets.index(last,\
    \ offsetBy: 0)\n    let firstChar = brackets[firstIndex]\n    let lastChar = brackets[lastIndex]\n\
    \    return firstChar != lastChar", "    if brackets == \"\" {\n        return\
    \ true\n    }\n\n    let openingBrackets = brackets.characters.split{$0 == \"\
    <\"}\n    let closingBrackets = brackets.characters.split{$0 == \">\"}\n\n   \
    \ return openingBrackets.count == closingBrackets.count", "    let opening = brackets.split(separator:\
    \ \"<\").filter({ $0 != \"\" }).map {\n        String($0)\n    }\n    let closing\
    \ = brackets.split(separator: \">\").filter({ $0 != \"\" }).map {\n        String($0)\n\
    \    }\n    return opening.count == closing.count", "    let opening = brackets[0..<brackets.startIndex]\n\
    \    let closing = brackets[brackets.startIndex..<brackets.endIndex]\n    \n \
    \   if opening == \"<>\" {\n        return false\n    }\n    \n    if opening\
    \ == \"<\" && closing == \">\" {\n        return true\n    }\n    \n    return\
    \ false", "    if brackets == \"\" {\n        return false\n    }\n    var current\
    \ = 0\n    var open = false\n    var closed = false\n    for pos, char in enumerate(brackets)\
    \ {\n        if char == \"<\" {\n            if open {\n                return\
    \ false\n            }\n            current = pos\n            open = true\n \
    \       }\n        if char == \">\" {\n            if !open {\n              \
    \  return false\n            }\n            current = pos\n            open =\
    \ false\n        }\n        if char == \"]\" {\n            if !open {\n     \
    \           return false\n            }\n            current = pos\n         \
    \   closed = true\n        }\n        if char == \"}\" {\n            if !open\
    \ {\n                return false\n            }\n            current = pos\n\
    \            closed = false\n        }\n    }\n    if open == false && closed\
    \ == false {\n        return false\n    }\n    open = false\n    closed = false\n\
    \    for pos, char in enumerate(brackets) {\n        if char == \">\" {\n    \
    \        if !open {\n                return false\n            }\n           \
    \ current = pos\n            open = false\n        }\n        if char == \"}\"\
    \ {\n            if !open {\n                return false\n            }\n   \
    \         current = pos\n            closed = true\n        }\n    }\n    if open\
    \ == false && closed == false {\n        return false\n    }\n    if current ==\
    \ len(brackets) {\n        return true\n    }\n    return true", "    guard brackets.count\
    \ > 0 else {\n        return true\n    }\n\n    // the brackets are reversed\n\
    \    let reverseBrackets = brackets[0..<brackets.count - 1].reversed()\n    var\
    \ openBracket: Character?\n    var closeBracket: Character?\n\n    for bracket\
    \ in reverseBrackets {\n        // if we're at the start, we're opening a bracket\n\
    \        if bracket == brackets.first {\n            if openBracket != nil {\n\
    \                return false\n            }\n            openBracket = bracket\n\
    \        } else {\n            // if we're not at the start, we're closing a bracket\n\
    \            if bracket == brackets.last {\n                if closeBracket !=\
    \ nil {\n                    return false\n                }\n               \
    \ closeBracket = bracket\n            } else {\n                // otherwise,\
    \ we're not closing a bracket\n                return false\n            }\n \
    \       }\n    }\n\n    return true", "    let stack = [String]()\n    for character\
    \ in brackets {\n        if character == \"<\" {\n            stack.append(character)\n\
    \        } else if character == \">\" {\n            guard stack.removeFirst()\
    \ == \"<\" else {\n                return false\n            }\n        } else\
    \ {\n            return false\n        }\n    }\n    return stack.isEmpty", " \
    \   var okay = true\n    let bracketsLowercase = brackets.lowercased()\n    let\
    \ reversedBrackets = brackets.reversed().lowercased()\n    let reversedBracketsCount\
    \ = brackets.reversed().count\n\n    var lastClosingBracketPosition = 0\n    var\
    \ lastOpeningBracketPosition = 0\n\n    while okay {\n        if reversedBracketsCount\
    \ > lastClosingBracketPosition {\n            let openingBracketPosition = reversedBrackets.index(\n\
    \                of: reversedBrackets[lastOpeningBracketPosition], \n        \
    \        options: .backwards\n            )\n            if openingBracketPosition\
    \ == reversedBracketsCount {\n                lastOpeningBracketPosition = lastClosingBracketPosition\n\
    \                lastClosingBracketPosition = reversedBracketsCount\n        \
    \    } else {\n                lastOpeningBracketPosition = openingBracketPosition\n\
    \            }\n        }\n\n        let closingBracketPosition = bracketsLowercase.index(\n\
    \            of: bracketsLowercase[lastClosingBracketPosition], \n           \
    \ options: .backwards\n        )\n        if closingBracketPosition == bracketsLowercase.count\
    \ {\n            lastClosingBracketPosition = bracketsLowercase.count - 1\n  \
    \      } else {\n            lastClosingBracketPosition = closingBracketPosition\n\
    \        }\n\n        if lastClosingBracketPosition < lastOpeningBracketPosition\
    \ {\n            okay = false\n        } else {\n            okay = true\n   \
    \     }\n    }\n\n    return lastOpeningBracketPosition != brackets.reversed().count\
    \ - 1", "    var opening_brackets: [Character] = []\n    var closing_brackets:\
    \ [Character] = []\n\n    for i in 0..<brackets.characters.count {\n        let\
    \ open_or_closed = brackets[i]\n        if open_or_closed == \"<\" {\n       \
    \     opening_brackets.append(open_or_closed)\n        } else if open_or_closed\
    \ == \">\" {\n            closing_brackets.append(open_or_closed)\n        } else\
    \ {\n            return false\n        }\n    }\n\n    if !opening_brackets.isEmpty\
    \ && !closing_brackets.isEmpty {\n        if opening_brackets.count != closing_brackets.count\
    \ {\n            return false\n        }\n        var opening = false\n      \
    \  var closing = true\n        for i in 0..<opening_brackets.count {\n       \
    \     if opening && closing_brackets[i] != opening_brackets[i] {\n           \
    \     return false\n            }\n            opening = opening && (opening_brackets[i]\
    \ == \"<\")\n            closing = closing && (closing_brackets[i] == \">\")\n\
    \        }\n\n        return true\n    } else {\n        return true\n    }",
  "    var has_open_bracket = false\n    var has_close_bracket = false\n    brackets.enumerateSubstringsInRange(Range<String.Index>(start:\
    \ 0, length: brackets.count), options: .byComposedCharacterSequences) { range,\
    \ substring, _, _ in\n        has_open_bracket |= substring?.hasPrefix(\"<\")\n\
    \        has_close_bracket |= substring?.hasSuffix(\">\")\n    }\n    return !has_open_bracket\
    \ && !has_close_bracket", "    var first = true\n    for b in brackets {\n   \
    \     if first {\n            first = false\n        } else {\n            if\
    \ !b == \">\" {\n                return false\n            }\n        }\n    }\n\
    \    return true", "    var mismatch_count = 0\n    for _, opening := range brackets.characters\
    \ {\n        if closing := brackets.characters.find(opening); closing != nil {\n\
    \            brackets.removeAtIndex(closing!)\n            mismatch_count -= 1\n\
    \        }\n    }\n    return mismatch_count == 0", "    let stack = brackets.characters\n\
    \    .enumerated()\n    .map {\n        ($0.offset, $0.element) }\n    .filter\
    \ { $0.element == \"<\" }\n    .map {\n        NSMakeRange($0.offset, $0.offset\
    \ + 1) }\n    .reverse()\n\n    var result = true\n\n    stack.forEach { curr\
    \ in\n        let next = stack.enumerated()\n            .filter { $0.element\
    \ == \">\" }.first\n        if next == nil {\n            result = false\n   \
    \         return false\n        }\n        result = result && next.offset >= curr.offset\n\
    \    }\n    return result", "    var opening_set = Set<Character>()\n    var closing_set\
    \ = Set<Character>()\n\n    var current_opening_index = 0\n    var current_closing_index\
    \ = 0\n\n    for char in brackets.characters {\n        if char == \">\" {\n \
    \           current_closing_index++\n        }\n        else {\n            current_closing_index\
    \ = 0\n        }\n        if current_opening_index == current_closing_index {\n\
    \            opening_set.insert(char)\n        }\n        else {\n           \
    \ opening_set.remove(char)\n            closing_set.insert(char)\n        }\n\n\
    \        current_opening_index++\n    }\n\n    return opening_set == closing_set",
  "    var stack: [String] = []\n    var closed: Bool = false\n    for bracket in\
    \ brackets {\n        if bracket == \"<\" || bracket == \"<=\" || bracket == \"\
    =\" || bracket == \"<=>\" {\n            stack.insert(bracket)\n        }\n  \
    \      else if bracket == \">\" && stack.last == \"<\" || bracket == \">>\" &&\
    \ stack.last == \"<\" {\n            stack.removeLast()\n        }\n        else\
    \ if bracket == \">\" && stack.last == \"<=>\" {\n            stack.removeLast()\n\
    \            closed = true\n        }\n        else if bracket == \"=>\" {\n \
    \           if stack.last == \"<\" || stack.last == \"<=\" {\n               \
    \ stack.removeLast()\n            }\n        }\n    }\n    if stack.last == \"\
    <\" || stack.last == \"<=\" {\n        closed = true\n    }\n    return closed",
  "    let openingBrackets = brackets.components(separatedBy: \">\")\n        .filter\
    \ { !$0.isEmpty}\n    let closingBrackets = brackets.components(separatedBy: \"\
    <\")\n        .filter { !$0.isEmpty}\n    \n    return openingBrackets.count ==\
    \ closingBrackets.count", "    var found = 0\n    for index in 0..<brackets.characters.count\
    \ {\n        let opening = brackets.substring(with: Index.init(integerLiteral:\
    \ index))\n        let closing = brackets.substring(with: Index.init(integerLiteral:\
    \ index + opening.characters.count))\n        let openingToClosingCount = opening.characters.dropLast().filter\
    \ { opening == closing }.count\n        found = found + (openingToClosingCount\
    \ == 0)\n    }\n    return found == brackets.characters.count", "    var opening\
    \ = false\n    var closing = false\n    var first = true\n    for c in brackets.characters\
    \ {\n        if first {\n            opening = c == \">\"\n            first =\
    \ false\n        } else {\n            closing = c == \"<\"\n        }\n     \
    \   if closing && opening {\n            return false\n        }\n    }\n    return\
    \ true", "    var found = false\n    var brackets = 0\n    var newBrackets = 0\n\
    \    var newBracketing = 0\n\n    for bracket in brackets {\n        switch bracket\
    \ {\n        case \"<\": newBrackets++\n        case \"<<\": newBrackets++\n \
    \       case \">\": newBrackets++\n        case \">>\": newBrackets++\n      \
    \  case \"<=\": newBrackets++\n        case \"=>\": newBrackets++\n        case\
    \ \"=\": newBracketing++\n        case \"===\": newBracketing++\n        case\
    \ \"==\": newBracketing++\n        case \"!=\": newBracketing++\n        case\
    \ \"!==\": newBracketing++\n        case \"<>\": newBracketing++\n        case\
    \ \"<<=\": newBracketing++\n        case \">>=\": newBracketing++\n        case\
    \ \"->\": newBracketing++\n        case \">->\": newBracketing++\n        case\
    \ \"<-\": newBracketing++\n        case \"->>\": newBracketing++\n        case\
    \ \"<-=\": newBracketing++\n        case \"->->\": newBracketing++\n        case\
    \ \"<->\": newBracketing++\n        case \"(<\": newBrackets++\n        case \"\
    )>\": newBrackets++\n        case \"(<<\": newBrackets++\n        case \")>=\"\
    : newBrackets++\n        case \")->\": newBrackets++\n        case \")->>\": newBrackets++\n\
    \        case \")<-\": newBrackets++\n        case \")->->\": newBrackets++\n\
    \        case \")<->\": newBrackets++\n        case \")(\": newBrackets++\n  \
    \      case \")>>\": newBrackets++\n        case \")>>=\": newBrackets++\n   \
    \     case \")->(\": newBrackets++\n        case \")->>>\": newBrackets++\n  \
    \      case \")<<-\": newBrackets++\n        case \")->->(\": newBrackets++\n\
    \        case \")<<->\": newBrackets++\n        case \")<->(\": newBrackets++\n\
    \        case \"(<=\": newBrackets++\n        case \")>=\": newBrackets++\n  \
    \      case \")->=\": newBrackets++\n        case \")->->\": newBrackets++\n \
    \       case \")<-=\": newBrackets++\n        case \")->->", "    let open_counts\
    \ = brackets.components(separatedBy: \"<\").map({ count($0) })\n    let close_counts\
    \ = brackets.components(separatedBy: \">\").map({ count($0) })\n    return open_counts.zip2(close_counts).reduce({\
    \ $0 + $1 }) == open_counts.count", "    if brackets.isEmpty {\n        return\
    \ true\n    }\n\n    if brackets.first == \"<\" {\n        for _ in 0..<brackets.count\
    \ - 1 {\n            if brackets[_+1] != \">\" {\n                return false\n\
    \            }\n        }\n        return true\n    }\n\n    if brackets.first\
    \ == \"<\" {\n        for _ in 0..<brackets.count {\n            if brackets[_+1]\
    \ != \">\" {\n                return false\n            }\n        }\n       \
    \ return true\n    }\n\n    return false", "  let bracketSet = brackets.characters.reduce([String]())\
    \ {\n    (var result, char) -> [String] in\n    if char == \"<\" {\n      if result.last\
    \ == \"<\" {\n        result.append(\"<\")\n      } else {\n        result.append(char)\n\
    \      }\n    } else if char == \">\" {\n      if result.last == \">\" {\n   \
    \     result.append(\"<\")\n      } else {\n        result.append(char)\n    \
    \  }\n    } else if char == \"<\" {\n      result.append(char)\n    }\n    return\
    \ result\n  }\n  return bracketSet.count == brackets.characters.count", "    let\
    \ counts = brackets.split(separator: \"<\").map(String.init).reduce(into: [:])\
    \ { $0[$1] += 1 }\n    let maxCount = counts.max()!\n    return maxCount == brackets.characters.count"]
stop_tokens:
- "\n}"
