language: swift
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l == nil {\n        return true\n    }\n    \n    var\
    \ zero = Int()\n    \n    for x in l {\n        zero = zero + x\n    }\n    \n\
    \    for x in l {\n        if zero == x {\n            return false\n        }\n\
    \    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvh6o0q88/tmpvh6o0q88.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba17947dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba179174b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba179174988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1791737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvh6o0q88                        0x000055b849f25474 <unavailable> + 5236

    5    libc.so.6                          0x00002ba179669460 __libc_start_main +
    245

    6    tmpvh6o0q88                        0x000055b849f250d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return is_unique_sum_pairs(l, 0) {}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm8uaeai9.swift:16:12: error: cannot find 'is_unique_sum_pairs'\
    \ in scope\n    return is_unique_sum_pairs(l, 0) {}\n           ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return pairs_sum_to_zero(l, l, nil)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx39mwqs7.swift:16:29: error: extra arguments at positions #2, #3\
    \ in call\n    return pairs_sum_to_zero(l, l, nil)\n                         \
    \   ^\n/tmp/tmpx39mwqs7.swift:15:6: note: 'pairs_sum_to_zero(l:)' declared here\n\
    func pairs_sum_to_zero(l: [Int]) -> Bool {\n     ^\n/tmp/tmpx39mwqs7.swift:16:36:\
    \ error: 'nil' requires a contextual type\n    return pairs_sum_to_zero(l, l,\
    \ nil)\n                                   ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l == nil {\n        return false\n    }\n    var sum\
    \ = 0\n    var isDistinct = true\n    for _, e := range l {\n        sum += e\n\
    \        if sum == 0 {\n            isDistinct = false\n        }\n    }\n   \
    \ return isDistinct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp92ecxeeb.swift:21:10: error: expected 'in' after for-each pattern\n\
    \    for _, e := range l {\n         ^\n/tmp/tmp92ecxeeb.swift:21:10: error: expected\
    \ Sequence expression for for-each loop\n    for _, e := range l {\n         ^\n\
    /tmp/tmp92ecxeeb.swift:16:10: warning: comparing non-optional value of type '[Int]'\
    \ to 'nil' always returns false\n    if l == nil {\n       ~ ^  ~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let zero = Int(0)\n    for i in l {\n        for j in\
    \ l {\n            if i == zero || j == zero {\n                break\n      \
    \      }\n            if i + j == zero {\n                return false\n     \
    \       }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpihb36iqq/tmpihb36iqq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf8912cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf88e23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf88e23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf88e227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpihb36iqq                        0x000055738422e474 <unavailable> + 5236

    5    libc.so.6                          0x00002abf89318460 __libc_start_main +
    245

    6    tmpihb36iqq                        0x000055738422e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tswitch l.count {\n\tcase 0:\n\t\treturn true\n\tcase 1:\n\
    \t\treturn l[0] == 0\n\tdefault:\n\t\tn := l[0]\n\t\tprev := l[n-1]\n\t\tfor i\
    \ := 1; i < len(l); i++ {\n\t\t\tn += l[i]\n\t\t\tif prev == 0 {\n\t\t\t\treturn\
    \ false\n\t\t\t}\n\t\t\tprev = n\n\t\t}\n\t\treturn true\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn8msh5fq.swift:22:4: error: consecutive statements on a line must\
    \ be separated by ';'\n                n := l[0]\n                 ^\n       \
    \          ;\n/tmp/tmpn8msh5fq.swift:22:5: error: expected expression\n      \
    \          n := l[0]\n                  ^\n/tmp/tmpn8msh5fq.swift:24:10: error:\
    \ expected type\n                for i := 1; i < len(l); i++ {\n             \
    \          ^\n                        <#type#>\n/tmp/tmpn8msh5fq.swift:24:10:\
    \ error: expected 'in' after for-each pattern\n                for i := 1; i <\
    \ len(l); i++ {\n                       ^\n/tmp/tmpn8msh5fq.swift:24:10: error:\
    \ expected Sequence expression for for-each loop\n                for i := 1;\
    \ i < len(l); i++ {\n                       ^\n/tmp/tmpn8msh5fq.swift:22:3: error:\
    \ cannot find 'n' in scope\n                n := l[0]\n                ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum: Int = 0\n    var last: Int = 0\n    for num in\
    \ l {\n        if num == last {\n            sum += num\n        } else {\n  \
    \          sum = 0\n            last = num\n        }\n    }\n    return sum ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5,\
    \ 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp3mson_mu/tmp3mson_mu.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8d30eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8d2de1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8d2de1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8d2de07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3mson_mu                        0x0000561ee5302474 <unavailable> + 5236

    5    libc.so.6                          0x00002ac8d32d6460 __libc_start_main +
    245

    6    tmp3mson_mu                        0x0000561ee53020d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var a : [Int] = []\n    for x in l {\n        if a ==\
    \ nil {\n            a.append(x)\n            continue\n        }\n        for\
    \ y in a {\n            if x != y && x == x + y {\n                return false\n\
    \            }\n        }\n        a.append(x)\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpydd1_mig/tmpydd1_mig.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb042ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb03fc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb03fc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb03fc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpydd1_mig                        0x00005650873144d4 <unavailable> + 5332

    5    libc.so.6                          0x00002aeb044b8460 __libc_start_main +
    245

    6    tmpydd1_mig                        0x0000565087314139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0 ..< l.count {\n        let pair = (l[i], l[(i\
    \ + 1) % l.count])\n        if pair == 0 {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7xqk79wu.swift:18:17: error: type '(Int, Int)' cannot conform to\
    \ 'BinaryInteger'\n        if pair == 0 {\n                ^\n/tmp/tmp7xqk79wu.swift:18:17:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n        if pair == 0 {\n                ^\n/tmp/tmp7xqk79wu.swift:18:17:\
    \ note: required by referencing operator function '==' on 'BinaryInteger' where\
    \ 'Self' = '(Int, Int)'\n        if pair == 0 {\n                ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let (firstIndex, secondIndex) = min_two(l)\n    if firstIndex\
    \ != secondIndex {\n        return false\n    }\n    return l.startIndex == firstIndex\
    \ + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpss4rn1lm.swift:16:37: error: cannot find 'min_two' in scope\n \
    \   let (firstIndex, secondIndex) = min_two(l)\n                             \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Optimize the below to run in linear time\n  \
    \  // O(m n) time | O(1) space (using a map)\n    var map = Map()\n    for i in\
    \ l {\n        if !map.contains {\n            map.insert (i, 0)\n        } else\
    \ {\n            map.insert (i, map.at(i) + 1)\n        }\n    }\n\n    // O(n)\
    \ time and O(1) space\n    for k in map.keys {\n        // O(n) time\n       \
    \ for j in map.keys {\n            if k > j && map.get(k) == map.get(j) {\n  \
    \              return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1ps37tc2.swift:18:15: error: cannot find 'Map' in scope\n    var\
    \ map = Map()\n              ^~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return l.contains(l.minIndex(of: 0)) == true &&\n    \
    \    l.contains(l.maxIndex(of: 0)) == true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnnget8ut.swift:16:25: error: value of type '[Int]' has no member\
    \ 'minIndex'\n    return l.contains(l.minIndex(of: 0)) == true &&\n          \
    \            ~ ^~~~~~~~\n/tmp/tmpnnget8ut.swift:17:22: error: value of type '[Int]'\
    \ has no member 'maxIndex'\n        l.contains(l.maxIndex(of: 0)) == true\n  \
    \                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return pairs_sum_to_zero_2(l: l) != nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwzij3ufr.swift:16:12: error: cannot find 'pairs_sum_to_zero_2'\
    \ in scope\n    return pairs_sum_to_zero_2(l: l) != nil\n           ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i: Int = 0\n    var n: Int = 0\n    var c: Bool =\
    \ false\n    for k in l {\n        if k == 0 {\n            n += 1\n        }\
    \ else {\n            i += 1\n            if i == n {\n                c = true\n\
    \            }\n        }\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpblbq1m5_/tmpblbq1m5_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b119c793c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b119c48ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b119c48a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b119c4897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblbq1m5_                        0x00005579918d86f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b119c97f460 __libc_start_main +
    245

    6    tmpblbq1m5_                        0x00005579918d80d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var pairs = [Int: [Int]]()\n  for i, a in enumerate(l) {\n\
    \    pairs[a] = [Int]()\n    for b in l[i+1:] {\n      pairs[a].append(b)\n  \
    \  }\n  }\n  let zeros = pairs.filter{\n    $0.filter{\n      $0.isNotEmpty\n\
    \    }.isEmpty\n  }\n  return zeros.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkywo48vj.swift:17:8: error: expected 'in' after for-each pattern\n\
    \  for i, a in enumerate(l) {\n       ^\n/tmp/tmpkywo48vj.swift:17:8: error: expected\
    \ Sequence expression for for-each loop\n  for i, a in enumerate(l) {\n      \
    \ ^\n/tmp/tmpkywo48vj.swift:19:19: error: expected ',' separator\n    for b in\
    \ l[i+1:] {\n                  ^\n                  ,\n/tmp/tmpkywo48vj.swift:19:19:\
    \ error: expected expression in list of expressions\n    for b in l[i+1:] {\n\
    \                  ^\n/tmp/tmpkywo48vj.swift:24:8: error: value of tuple type\
    \ '(key: Int, value: [Int])' has no member 'filter'\n    $0.filter{\n    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var hasPairsZero : Bool = false\n    for x in l {\n  \
    \      hasPairsZero = hasPairsZero || x > 0\n        hasPairsZero = hasPairsZero\
    \ || (x != 0 && !hasPairsZero)\n    }\n    return hasPairsZero\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp1__vly33/tmp1__vly33.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e2c9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e2991b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e2991988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e29907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1__vly33                        0x000055f6af430474 <unavailable> + 5236

    5    libc.so.6                          0x00002b21e2e86460 __libc_start_main +
    245

    6    tmp1__vly33                        0x000055f6af4300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l == nil || len(l) == 0 || l.count == 0 {\n       \
    \ return false\n    }\n    var sum = 0\n    for _, b := range l {\n        sum\
    \ += b\n    }\n    if sum < 0 {\n        return true\n    }\n    for i := len(l)\
    \ - 1; i > 0; i-- {\n        if l[i] + sum > 0 {\n            return false\n \
    \       }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpotze63m3.swift:20:10: error: expected 'in' after for-each pattern\n\
    \    for _, b := range l {\n         ^\n/tmp/tmpotze63m3.swift:20:10: error: expected\
    \ Sequence expression for for-each loop\n    for _, b := range l {\n         ^\n\
    /tmp/tmpotze63m3.swift:26:12: error: expected type\n    for i := len(l) - 1; i\
    \ > 0; i-- {\n           ^\n            <#type#>\n/tmp/tmpotze63m3.swift:26:12:\
    \ error: expected 'in' after for-each pattern\n    for i := len(l) - 1; i > 0;\
    \ i-- {\n           ^\n/tmp/tmpotze63m3.swift:26:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := len(l) - 1; i > 0; i-- {\n      \
    \     ^\n/tmp/tmpotze63m3.swift:16:20: error: cannot find 'len' in scope\n   \
    \ if l == nil || len(l) == 0 || l.count == 0 {\n                   ^~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l == nil { return false }\n    count := 0\n    for\
    \ i in 0..<l.count {\n        count += Int(l[i])\n    }\n    if count < 2 { return\
    \ false }\n    var first: Int = Int(l[0])\n    var second: Int = Int(l[count-1])\n\
    \    var third: Int = Int(0)\n    for i in 0..<count {\n        if Int(l[i]) !=\
    \ first {\n            if Int(l[i]) == second {\n                third = Int(l[i])\n\
    \            }\n            if third == 0 {\n                return false\n  \
    \          }\n        }\n        first = second\n        second = Int(l[i])\n\
    \    }\n    if third == 0 {\n        return false\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphabo8cre.swift:17:10: error: consecutive statements on a line must\
    \ be separated by ';'\n    count := 0\n         ^\n         ;\n/tmp/tmphabo8cre.swift:17:11:\
    \ error: expected expression\n    count := 0\n          ^\n/tmp/tmphabo8cre.swift:16:10:\
    \ warning: comparing non-optional value of type '[Int]' to 'nil' always returns\
    \ false\n    if l == nil { return false }\n       ~ ^  ~~~\n/tmp/tmphabo8cre.swift:17:5:\
    \ error: cannot find 'count' in scope\n    count := 0\n    ^~~~~\n/tmp/tmphabo8cre.swift:19:9:\
    \ error: cannot find 'count' in scope\n        count += Int(l[i])\n        ^~~~~\n\
    /tmp/tmphabo8cre.swift:21:8: error: cannot find 'count' in scope\n    if count\
    \ < 2 { return false }\n       ^~~~~\n/tmp/tmphabo8cre.swift:23:29: error: cannot\
    \ find 'count' in scope\n    var second: Int = Int(l[count-1])\n             \
    \               ^~~~~\n/tmp/tmphabo8cre.swift:25:18: error: cannot find 'count'\
    \ in scope\n    for i in 0..<count {\n                 ^~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    switch len(l) {\n    case 0:\n        return true\n  \
    \  case 1:\n        return l[0] == 0\n    case 2:\n        return l[0] == 0 &&\
    \ l[1] == 0\n    default:\n        if l[0] < 0 || l[0] < l[1] {\n            return\
    \ false\n        }\n        return pairs_sum_to_zero(l[1..])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp74upawfi.swift:16:12: error: cannot find 'len' in scope\n    switch\
    \ len(l) {\n           ^~~\n/tmp/tmp74upawfi.swift:27:37: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n        return pairs_sum_to_zero(l[1..])\n\
    \                                    ^~\n                                    ...\n\
    /tmp/tmp74upawfi.swift:27:34: error: missing argument label 'l:' in call\n   \
    \     return pairs_sum_to_zero(l[1..])\n                                 ^\n \
    \                                l: \n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l1 = [0] * (l.count + 1)\n    l1[0] = 1\n    for i\
    \ in 1...l.count {\n        l1[i] = l1[i-1] + l[i-1]\n    }\n    for i in 0..(l.count-1)\
    \ {\n        if l1[i] != 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzygfss09.swift:16:18: error: binary operator '*' cannot be applied\
    \ to operands of type '[Int]' and 'Int'\n    var l1 = [0] * (l.count + 1)\n  \
    \           ~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmpzygfss09.swift:16:18: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Int, Int)\n  \
    \  var l1 = [0] * (l.count + 1)\n                 ^\n/tmp/tmpzygfss09.swift:21:15:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    for i in\
    \ 0..(l.count-1) {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    var i = 0\n    for k in l {\n       \
    \ sum += k\n        i += 1\n    }\n    return i == 1 || (sum == 0 && i != 0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpyv6ye481/tmpyv6ye481.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99a08d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99a05ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99a05cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99a05cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyv6ye481                        0x000055fe30c7b6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b99a0ac1460 __libc_start_main +
    245

    6    tmpyv6ye481                        0x000055fe30c7b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let s = l.map { $0 + $1 }\n        .map { $0 * $0 }\n\
    \        .sum() // square the sum to get |x| for all x\n    return s == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd1stv9hm.swift:16:19: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n    let s = l.map\
    \ { $0 + $1 }\n                  ^\n/tmp/tmpd1stv9hm.swift:18:10: error: value\
    \ of type '[Int]' has no member 'sum'\n        .sum() // square the sum to get\
    \ |x| for all x\n         ^~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count == 0 { return false }\n    var sums = make([][Int],\
    \ l.count)\n    var count = 0\n    for i := 0; i < l.count; i++ {\n        sums[i]\
    \ = make([]Int, l.count)\n        for j := 0; j < i; j++ {\n            sums[i][j]\
    \ = l[j] + l[i]\n        }\n        count += sums[i].count\n    }\n    for i :=\
    \ 0; i < count; i++ {\n        if !equal(sums[i], []Int{}) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd_5pmus1.swift:19:12: error: expected type\n    for i := 0; i <\
    \ l.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpd_5pmus1.swift:19:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < l.count; i++\
    \ {\n           ^\n/tmp/tmpd_5pmus1.swift:19:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < l.count; i++ {\n           ^\n/tmp/tmpd_5pmus1.swift:20:26:\
    \ error: expected ',' separator\n        sums[i] = make([]Int, l.count)\n    \
    \                     ^\n                         ,\n/tmp/tmpd_5pmus1.swift:21:16:\
    \ error: expected type\n        for j := 0; j < i; j++ {\n               ^\n \
    \               <#type#>\n/tmp/tmpd_5pmus1.swift:21:16: error: expected 'in' after\
    \ for-each pattern\n        for j := 0; j < i; j++ {\n               ^\n/tmp/tmpd_5pmus1.swift:21:16:\
    \ error: expected Sequence expression for for-each loop\n        for j := 0; j\
    \ < i; j++ {\n               ^\n/tmp/tmpd_5pmus1.swift:26:12: error: expected\
    \ type\n    for i := 0; i < count; i++ {\n           ^\n            <#type#>\n\
    /tmp/tmpd_5pmus1.swift:26:12: error: expected 'in' after for-each pattern\n  \
    \  for i := 0; i < count; i++ {\n           ^\n/tmp/tmpd_5pmus1.swift:26:12: error:\
    \ expected Sequence expression for for-each loop\n    for i := 0; i < count; i++\
    \ {\n           ^\n/tmp/tmpd_5pmus1.swift:27:30: error: expected ',' separator\n\
    \        if !equal(sums[i], []Int{}) {\n                             ^\n     \
    \                        ,\n/tmp/tmpd_5pmus1.swift:17:16: error: cannot find 'make'\
    \ in scope\n    var sums = make([][Int], l.count)\n               ^~~~\n/tmp/tmpd_5pmus1.swift:17:23:\
    \ error: no exact matches in call to subscript \n    var sums = make([][Int],\
    \ l.count)\n                      ^\n/tmp/tmpd_5pmus1.swift:17:23: note: found\
    \ candidate with type '(Int) -> Any'\n    var sums = make([][Int], l.count)\n\
    \                      ^\n/tmp/tmpd_5pmus1.swift:17:23: note: found candidate\
    \ with type '(Range<Int>) -> ArraySlice<Any>'\n    var sums = make([][Int], l.count)\n\
    \                      ^\n/tmp/tmpd_5pmus1.swift:17:23: note: found candidate"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tl += [0]\n\tguard l.isEmpty else { return true }\n\tguard\
    \ l.count == 2 else { return false }\n\treturn l[0] > 0 && l[1] == 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk02n80pg.swift:16:4: error: left side of mutating operator isn't\
    \ mutable: 'l' is a 'let' constant\n        l += [0]\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    switch l.count {\n    case 0:\n        return false\n\
    \    case 1:\n        return l.first == 0\n    case 2:\n        return l.first\
    \ == l.last\n    default:\n        return l.first == pairs_sum_to_zero(l.prefix(1))\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo_azskhy.swift:24:18: error: optional type 'Int?' cannot be used\
    \ as a boolean; test for '!= nil' instead\n        return l.first == pairs_sum_to_zero(l.prefix(1))\n\
    \                 ^\n               (       != nil)\n/tmp/tmpo_azskhy.swift:24:45:\
    \ error: missing argument label 'l:' in call\n        return l.first == pairs_sum_to_zero(l.prefix(1))\n\
    \                                            ^\n                             \
    \               l: \n/tmp/tmpo_azskhy.swift:24:47: error: cannot convert value\
    \ of type 'ArraySlice<Int>' to expected argument type '[Int]'\n        return\
    \ l.first == pairs_sum_to_zero(l.prefix(1))\n                                \
    \              ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // If pairs, return true.\n    if l == nil || len(l) <=\
    \ 1 {\n        return true\n    }\n\n    // Keep track of current and previous\
    \ item (a pair).\n    var current = l[0]\n    var previous = l[0]\n    for i :=\
    \ 1; i < len(l); i++ {\n        if l[i] > current {\n            return false\n\
    \        }\n        current = l[i]\n        previous = l[i]\n    }\n\n    // If\
    \ the current item and the previous item have the same value,\n    // return true.\n\
    \    return previous == current\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptad_216x.swift:24:12: error: expected type\n    for i := 1; i <\
    \ len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmptad_216x.swift:24:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++\
    \ {\n           ^\n/tmp/tmptad_216x.swift:24:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmptad_216x.swift:17:20:\
    \ error: cannot find 'len' in scope\n    if l == nil || len(l) <= 1 {\n      \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  // Write your code here.\n  return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpcubzxsq_/tmpcubzxsq_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc83e92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc83b89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc83b89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc83b887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcubzxsq_                        0x000055646ddf7304 <unavailable> + 4868

    5    libc.so.6                          0x00002acc8407e460 __libc_start_main +
    245

    6    tmpcubzxsq_                        0x000055646ddf6f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0 ..< l {\n        for j in i + 1 ..< l {\n \
    \           if l[i] == l[j] {\n                return false\n            }\n \
    \       }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsj4dkwun.swift:16:20: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n    for i in 0 ..< l {\n                  \
    \ ^\n/tmp/tmpsj4dkwun.swift:17:28: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n        for j in i + 1 ..< l {\n          \
    \                 ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let sortedArray = l.sorted()\n    if sortedArray.first\
    \ == sortedArray.last {\n        return true\n    }\n    guard let lastIndex =\
    \ sortedArray.last else { return false }\n    if sortedArray.first + sortedArray.last\
    \ > 0 && sortedArray.last == lastIndex { return true }\n    var leftIndex = 0\n\
    \    var rightIndex = sortedArray.count - 1\n    while leftIndex < rightIndex\
    \ {\n        let sum = sortedArray[leftIndex] + sortedArray[rightIndex]\n    \
    \    if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n\
    \            rightIndex -= 1\n        } else {\n            leftIndex += 1\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp102z85dd.swift:21:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sortedArray.first + sortedArray.last\
    \ > 0 && sortedArray.last == lastIndex { return true }\n                   ^\n\
    /tmp/tmp102z85dd.swift:21:20: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    if sortedArray.first + sortedArray.last\
    \ > 0 && sortedArray.last == lastIndex { return true }\n                   ^\n\
    \       (                 ?? <#default value#>)\n/tmp/tmp102z85dd.swift:21:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sortedArray.first + sortedArray.last > 0 && sortedArray.last ==\
    \ lastIndex { return true }\n                   ^\n                        !\n\
    /tmp/tmp102z85dd.swift:21:40: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n    if sortedArray.first + sortedArray.last > 0 &&\
    \ sortedArray.last == lastIndex { return true }\n                            \
    \           ^\n/tmp/tmp102z85dd.swift:21:40: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sortedArray.first +\
    \ sortedArray.last > 0 && sortedArray.last == lastIndex { return true }\n    \
    \                                   ^\n                           (          \
    \      ?? <#default value#>)\n/tmp/tmp102z85dd.swift:21:40: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    if sortedArray.first\
    \ + sortedArray.last > 0 && sortedArray.last == lastIndex { return true }\n  \
    \                                     ^\n                                    \
    \       !\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  if len(l) < 2 {\n    return false\n  }\n  var i : Int =\
    \ 0\n  var j = i+1\n  for i < len(l) - 1 && j < len(l) {\n    if l[i] + l[j] !=\
    \ 0 {\n      return false\n    }\n    i += 1;\n    j += 1;\n  }\n  return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpocv82kj2.swift:21:9: error: expected 'in' after for-each pattern\n\
    \  for i < len(l) - 1 && j < len(l) {\n        ^\n/tmp/tmpocv82kj2.swift:21:9:\
    \ error: unary operator cannot be separated from its operand\n  for i < len(l)\
    \ - 1 && j < len(l) {\n        ^~\n         \n/tmp/tmpocv82kj2.swift:16:6: error:\
    \ cannot find 'len' in scope\n  if len(l) < 2 {\n     ^~~\n/tmp/tmpocv82kj2.swift:21:9:\
    \ error: '<' is not a prefix unary operator\n  for i < len(l) - 1 && j < len(l)\
    \ {\n        ^\n/tmp/tmpocv82kj2.swift:21:11: error: cannot find 'len' in scope\n\
    \  for i < len(l) - 1 && j < len(l) {\n          ^~~\n/tmp/tmpocv82kj2.swift:21:29:\
    \ error: cannot find 'len' in scope\n  for i < len(l) - 1 && j < len(l) {\n  \
    \                          ^~~\n/tmp/tmpocv82kj2.swift:21:22: error: for-in loop\
    \ requires 'Bool' to conform to 'Sequence'\n  for i < len(l) - 1 && j < len(l)\
    \ {\n        ~~~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmpocv82kj2.swift:21:18: error:\
    \ type 'Int' cannot be used as a boolean; test for '!= 0' instead\n  for i < len(l)\
    \ - 1 && j < len(l) {\n                 ^\n        ((          ) != 0)\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return contains_pairs(l, &_sum_less_than)(0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvc9fdblg.swift:16:12: error: cannot find 'contains_pairs' in scope\n\
    \    return contains_pairs(l, &_sum_less_than)(0)\n           ^~~~~~~~~~~~~~\n\
    /tmp/tmpvc9fdblg.swift:16:31: error: cannot find '_sum_less_than' in scope\n \
    \   return contains_pairs(l, &_sum_less_than)(0)\n                           \
    \   ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var hashmap = [Int]()\n    for k in l {\n        hashmap[k]\
    \ = k\n    }\n    for k in l {\n        let k = k\n        if k >= 0 && k != k\
    \ {\n            let newhashmap = [Int]()\n            for h in hashmap {\n  \
    \              newhashmap[h] = h\n            }\n            hashmap = newhashmap\n\
    \        }\n    }\n    for (k, v) in hashmap {\n        if v != 0 {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdr836bc9.swift:25:27: error: cannot assign through subscript: 'newhashmap'\
    \ is a 'let' constant\n                newhashmap[h] = h\n                ~~~~~~~~~~^\n\
    /tmp/tmpdr836bc9.swift:23:13: note: change 'let' to 'var' to make it mutable\n\
    \            let newhashmap = [Int]()\n            ^~~\n            var\n/tmp/tmpdr836bc9.swift:30:19:\
    \ error: tuple pattern cannot match values of non-tuple type 'Int'\n    for (k,\
    \ v) in hashmap {\n                  ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var result = true\n    var count = 1\n    for i : Int\
    \ in l {\n        if i > 0 {\n            result = result && count\n         \
    \   count++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvhuxup94.swift:20:32: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n            result = result && count\n            \
    \                   ^\n                               (     != 0)\n/tmp/tmpvhuxup94.swift:21:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\treturn pairsSumToZero(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplo2gybhj.swift:16:9: error: cannot find 'pairsSumToZero' in scope\n\
    \        return pairsSumToZero(l)\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    let l = sorted.count\n  \
    \  var index = 0\n    var sum = 0\n    while index < l {\n        sum += sorted[index]\n\
    \        if sum != 0 {\n            index += 1\n        } else {\n           \
    \ index += 2\n            if index == l {\n                return false\n    \
    \        }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpguzio6v_/tmpguzio6v_.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f52dc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f52ab9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f52ab9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f52ab87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpguzio6v_                        0x000055dd85cab454 <unavailable> + 5204

    5    libc.so.6                          0x00002b4f52fae460 __libc_start_main +
    245

    6    tmpguzio6v_                        0x000055dd85cab0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var a = 0\n    var b = 0\n    for x in l {\n        a\
    \ += x\n        b += x\n        if a > 0 {\n            return false\n       \
    \ } else if b > 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpj36xqe0e/tmpj36xqe0e.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41aec47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41ae93eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41ae93e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41ae93d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj36xqe0e                        0x00005605af04d6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b41aee33460 __libc_start_main +
    245

    6    tmpj36xqe0e                        0x00005605af04d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return pairs(l).sum() == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_siczmqc.swift:16:12: error: cannot find 'pairs' in scope\n   \
    \ return pairs(l).sum() == 0\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var zeros = [Int]()\n    for x in l {\n        if x !=\
    \ 0 && zeros.contains(&x) {\n            return true\n        }\n        zeros.append(x)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5ap_q8du.swift:18:37: error: '&' used with non-inout argument of\
    \ type 'Int'\n        if x != 0 && zeros.contains(&x) {\n                    \
    \                ^~\n                                    \n/tmp/tmp5ap_q8du.swift:18:37:\
    \ error: cannot pass immutable value as inout argument: 'x' is a 'let' constant\n\
    \        if x != 0 && zeros.contains(&x) {\n                                 \
    \   ^~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    l.sort()\n    for i in 0..<l.count-1 {\n        if l[i]\
    \ == l[i+1] && l[i] != 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4p_hmftn.swift:16:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var res = false\n  l.forEach { if $0 == 0 { res = true }\
    \ }\n  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp65xqacak/tmp65xqacak.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1a2a6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1a2764b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1a2764988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1a27637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp65xqacak                        0x000055d702c5a374 <unavailable> + 4980

    5    libc.so.6                          0x00002ab1a2c59460 __libc_start_main +
    245

    6    tmp65xqacak                        0x000055d702c59fd9 <unavailable> + 4057

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    \n    // your code here\n    var i = 0\n    for pair in\
    \ l {\n        let sum = pair + i\n        i = sum\n        if sum == 0 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpwdhzzvnw/tmpwdhzzvnw.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d849d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d846cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d846cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d846ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwdhzzvnw                        0x00005653a09a76f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b8d84bc4460 __libc_start_main +
    245

    6    tmpwdhzzvnw                        0x00005653a09a70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if len(l) <= 1 {\n        return false\n    }\n    var\
    \ i = Int()\n    var j = Int()\n    var count = 0\n    for _ in 0..<len(l) {\n\
    \        i = l[i]\n        j = l[j]\n        if i < j {\n            count +=\
    \ 1\n        }\n        if count == 2 {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp48zv4fgc.swift:16:8: error: cannot find 'len' in scope\n    if\
    \ len(l) <= 1 {\n       ^~~\n/tmp/tmp48zv4fgc.swift:22:18: error: cannot find\
    \ 'len' in scope\n    for _ in 0..<len(l) {\n                 ^~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var firstNonZeroIndex = 0\n    var secondNonZeroIndex\
    \ = 0\n    for i in l.reverse() {\n        if i != 0 {\n            if firstNonZeroIndex\
    \ == 0 {\n                firstNonZeroIndex = i\n            } else {\n      \
    \          secondNonZeroIndex = i\n            }\n        }\n    }\n    return\
    \ secondNonZeroIndex != 0 && firstNonZeroIndex != 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6wex0mcl.swift:18:16: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    for i in l.reverse() {\n             ~ ^\n\
    /tmp/tmp6wex0mcl.swift:18:16: error: for-in loop requires '()' to conform to 'Sequence'\n\
    \    for i in l.reverse() {\n             ~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    var i = 0\n    var j = 0\n    var last:\
    \ Int = 0\n    for i = 0; i <= len(l); i++ {\n        sum = sum + l[i]\n     \
    \   if sum == 0 {\n            return true\n        }\n    }\n\n    for j = 1;\
    \ j <= len(l); j++ {\n        sum = sum - l[j]\n        if sum == 0 {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyj_vd603.swift:20:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 0; i <= len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyj_vd603.swift:27:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for j = 1; j <= len(l); j++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var zero = false\n    var zeroIndex = -1\n    var oneIndex\
    \ = -1\n    for i in l.indices{\n        if i == zeroIndex{\n            zero\
    \ = true\n        }else if i == oneIndex{\n            zero = false\n        }\n\
    \        if zero {\n            oneIndex = i\n        }\n    }\n    return zero\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpd91xkb9s/tmpd91xkb9s.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b602202fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6021d26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6021d26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6021d257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd91xkb9s                        0x0000555c6078c715 <unavailable> + 5909

    5    libc.so.6                          0x00002b602221b460 __libc_start_main +
    245

    6    tmpd91xkb9s                        0x0000555c6078c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // write your code here\n    l.sort()\n    var last: Int\
    \ = 0\n    for x in l {\n        if x - last > 0 {\n            for y in l {\n\
    \                if x - y == 0 {\n                    return true\n          \
    \      }\n            }\n        }\n        last = x\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphz2n757t.swift:17:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  let nums = l.sorted()\n  var i = 1\n  while i < nums.count\
    \ && nums[i] == nums[i-1] {\n    i += 1\n  }\n  return i == nums.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp_ov5owe4/tmp_ov5owe4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d1a901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d1a5f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d1a5f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d1a5f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ov5owe4                        0x000055e00afba6d5 <unavailable> + 5845

    5    libc.so.6                          0x00002b2d1aaed460 __libc_start_main +
    245

    6    tmp_ov5owe4                        0x000055e00afba0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum: Int = 0\n    for element in l {\n        sum\
    \ += element\n    }\n    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpgeuqr4c0/tmpgeuqr4c0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f60734c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f6042bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f6042b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f6042a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgeuqr4c0                        0x000055d6bbe9b6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b3f60920460 __libc_start_main +
    245

    6    tmpgeuqr4c0                        0x000055d6bbe9b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tlet firsts = Set(l)\n\tif firsts.isEmpty {\n\t\treturn true\n\
    \t}\n\n\tlet lasts = Set(l.dropLast())\n\tif lasts.isEmpty {\n\t\treturn false\n\
    \t}\n\n\tlet firstToLast = firsts.subtracting(lasts)\n\treturn firstToLast.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp2lpee8wt/tmp2lpee8wt.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada71f25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada71c1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada71c1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada71c1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2lpee8wt                        0x000056488c15e65b <unavailable> + 5723

    5    libc.so.6                          0x00002ada72111460 __libc_start_main +
    245

    6    tmp2lpee8wt                        0x000056488c15e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if len(l) == 1 {\n        return false\n    }\n    var\
    \ s = l.map { $0 }\n    var zeros = [0]\n    for n in s {\n        for z in zeros\
    \ {\n            if n == z {\n                return true\n            }\n   \
    \     }\n        zeros += n\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7h_a_k8o.swift:16:8: error: cannot find 'len' in scope\n    if\
    \ len(l) == 1 {\n       ^~~\n/tmp/tmp7h_a_k8o.swift:27:18: error: cannot convert\
    \ value of type 'Int' to expected argument type 'Array<Int>'\n        zeros +=\
    \ n\n                 ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var ans = false\n\n    while\
    \ i < len(l) {\n        if i == j {\n            if l[i] == 0 {\n            \
    \    ans = true\n            }\n            continue\n        }\n        if l[i]\
    \ < 0 {\n            j++\n            continue\n        }\n        if l[j] >=\
    \ 0 {\n            continue\n        }\n        ans = true\n        break\n  \
    \  }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyzvwhgfk.swift:20:15: error: cannot find 'len' in scope\n    while\
    \ i < len(l) {\n              ^~~\n/tmp/tmpyzvwhgfk.swift:28:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            j++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var pairs = l\n  var sum = 0\n\n  for pair := range pairs\
    \ {\n    if pairs.count < 2 {\n      return false\n    }\n    sum += pair\n  }\n\
    \  return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4l_v91py.swift:19:13: error: expected type\n  for pair := range\
    \ pairs {\n            ^\n             <#type#>\n/tmp/tmp4l_v91py.swift:19:13:\
    \ error: expected 'in' after for-each pattern\n  for pair := range pairs {\n \
    \           ^\n/tmp/tmp4l_v91py.swift:19:13: error: expected Sequence expression\
    \ for for-each loop\n  for pair := range pairs {\n            ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    guard l.count >= 2, let sum = l.reduce(0) {$0 + $1} else\
    \ { return false }\n    \n    if sum == 0 {\n        return true\n    }\n\n  \
    \  var min2 = min(l[0], l[1])\n    for number in l[2..] {\n        if number >\
    \ min2 {\n            return false\n        }\n        min2 = min(number, min2)\n\
    \    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl6hv7iw4.swift:16:47: error: expected 'else' after 'guard' condition\n\
    \    guard l.count >= 2, let sum = l.reduce(0) {$0 + $1} else { return false }\n\
    \                                              ^\n                           \
    \                   else \n/tmp/tmpl6hv7iw4.swift:16:48: error: anonymous closure\
    \ argument not contained in a closure\n    guard l.count >= 2, let sum = l.reduce(0)\
    \ {$0 + $1} else { return false }\n                                          \
    \     ^\n/tmp/tmpl6hv7iw4.swift:16:53: error: anonymous closure argument not contained\
    \ in a closure\n    guard l.count >= 2, let sum = l.reduce(0) {$0 + $1} else {\
    \ return false }\n                                                    ^\n/tmp/tmpl6hv7iw4.swift:16:56:\
    \ error: consecutive statements on a line must be separated by ';'\n    guard\
    \ l.count >= 2, let sum = l.reduce(0) {$0 + $1} else { return false }\n      \
    \                                                 ^\n                        \
    \                               ;\n/tmp/tmpl6hv7iw4.swift:16:57: error: expected\
    \ expression\n    guard l.count >= 2, let sum = l.reduce(0) {$0 + $1} else { return\
    \ false }\n                                                        ^\n/tmp/tmpl6hv7iw4.swift:16:45:\
    \ error: missing argument for parameter #2 in call\n    guard l.count >= 2, let\
    \ sum = l.reduce(0) {$0 + $1} else { return false }\n                        \
    \                    ^\n                                            , <#(Int?,\
    \ Int) throws -> Int?#>\nSwift.Sequence:2:28: note: 'reduce' declared here\n \
    \   @inlinable public func reduce<Result>(_ initialResult: Result, _ nextPartialResult:\
    \ (_ partialResult: Result, Self.Element) throws -> Result) rethrows -> Result\n\
    \                           ^\n/tmp/tmpl6hv7iw4.swift:23:22: error: cannot find\
    \ operator '..' in scope; did you mean '...'?\n    for number in l[2..] {\n  \
    \                   ^~\n                     ...\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var result: Bool = false\n    for i in 0 ..< l.count {\n\
    \        var sum: Int = 0\n        for j in 0 ..< l.count {\n            sum +=\
    \ l[j]\n            if sum > 0 {\n                break\n            }\n     \
    \   }\n        if sum == 0 {\n            result = true\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp3eru2hqk/tmp3eru2hqk.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9b4f64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9b4c5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9b4c5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9b4c5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3eru2hqk                        0x000056272b8367c5 <unavailable> + 6085

    5    libc.so.6                          0x00002af9b5150460 __libc_start_main +
    245

    6    tmp3eru2hqk                        0x000056272b8361a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  let d = Set<Int>()\n  for e in l {\n    d.add(-e)\n  }\n\
    \  return !d.contains(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp93vk57t3.swift:18:7: error: value of type 'Set<Int>' has no member\
    \ 'add'\n    d.add(-e)\n    ~ ^~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for index in 0..<l.count {\n        if l[index] != 0 &&\
    \ l[index + (index+1)] != 0 {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpveaixzfk/tmpveaixzfk.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78f3da5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78f3a9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78f3a9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78f3a9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpveaixzfk                        0x00005624edf1c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b78f3f91460 __libc_start_main +
    245

    6    tmpveaixzfk                        0x00005624edf1c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var results = [Int]()\n  \n  for index in 0..<l.count {\n\
    \    if l[index] != 0 {\n      results.append(l[index])\n    }\n  }\n  \n  return\
    \ results.count < l.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp136z87jm/tmp136z87jm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaedb2c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaedafbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaedafbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaedafbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp136z87jm                        0x000055acbf42d5f4 <unavailable> + 5620

    5    libc.so.6                          0x00002aaedb4b4460 __libc_start_main +
    245

    6    tmp136z87jm                        0x000055acbf42d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count == 0 {\n        return false\n    }\n    var\
    \ prev = 0\n    var curr = l[0]\n    for x in l {\n        if curr - prev == 0\
    \ {\n            return true\n        }\n        if curr - prev > 0 {\n      \
    \      return false\n        }\n        prev = curr\n        curr = x\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp2xwa7tjz/tmp2xwa7tjz.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94fb6adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94fb3a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94fb3a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94fb3a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2xwa7tjz                        0x000055b2d867c7a5 <unavailable> + 6053

    5    libc.so.6                          0x00002b94fb899460 __libc_start_main +
    245

    6    tmp2xwa7tjz                        0x000055b2d867c189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var left = 0\n    var right = 0\n    var result = 0\n\
    \    for i in l {\n        result = i + left\n        left = right\n        right\
    \ = result\n        if left == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp96xatxgm/tmp96xatxgm.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65a9e89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65a9b80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65a9b80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65a9b7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96xatxgm                        0x0000564704a946f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b65aa075460 __libc_start_main +
    245

    6    tmp96xatxgm                        0x0000564704a940d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return pairs_sum_to_zero_inner(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxr1s3r4_.swift:16:12: error: cannot find 'pairs_sum_to_zero_inner'\
    \ in scope\n    return pairs_sum_to_zero_inner(l)\n           ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tvar a : [Int]\n\ta = l.filter { (v) in\n\t\treturn v !=\
    \ 0\n\t}\n\treturn a.count != 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpagye8qvx/tmpagye8qvx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6880fc3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6880cbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6880cba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6880cb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagye8qvx                        0x000055f122de2424 <unavailable> + 5156

    5    libc.so.6                          0x00002b68811af460 __libc_start_main +
    245

    6    tmpagye8qvx                        0x000055f122de2089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let len = l.count\n    if len < 2 {\n        return false\n\
    \    }\n    let map = [Int:Int]()\n    for i in 0..<len {\n        if let i =\
    \ l[i], map[i] == 0 {\n            map[i] = 1\n        } else {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwn75cq_y.swift:23:16: error: cannot assign through subscript: 'map'\
    \ is a 'let' constant\n            map[i] = 1\n            ~~~^\n/tmp/tmpwn75cq_y.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let map = [Int:Int]()\n\
    \    ^~~\n    var\n/tmp/tmpwn75cq_y.swift:22:12: error: initializer for conditional\
    \ binding must have Optional type, not 'Int'\n        if let i = l[i], map[i]\
    \ == 0 {\n           ^       ~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var result : Bool = true\n    var prev_pair : [Int] =\
    \ []\n    for v in l {\n        if prev_pair.contains(v) {\n            result\
    \ = false\n            break\n        } else {\n            prev_pair.append(v)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpcyncnz9_/tmpcyncnz9_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5322df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5322aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5322aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5322aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcyncnz9_                        0x00005637e8699534 <unavailable> + 5428

    5    libc.so.6                          0x00002b5322fe2460 __libc_start_main +
    245

    6    tmpcyncnz9_                        0x00005637e8699199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l2 = l\n    l2.sort{$0.0 < $1.0}\n    if l2.count\
    \ != l.count {\n        return false\n    }\n    for pos in 0 ..< l2.count {\n\
    \        if l[pos] + l2[pos] != 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm_4tgwrq.swift:17:16: error: value of type 'Int' has no member\
    \ '0'\n    l2.sort{$0.0 < $1.0}\n            ~~ ^\n/tmp/tmpm_4tgwrq.swift:17:23:\
    \ error: value of type 'Int' has no member '0'\n    l2.sort{$0.0 < $1.0}\n   \
    \                ~~ ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tlet n = l.count\n\tif n < 2 {\n\t\treturn false\n\t}\n\t\
    let maxIndex = n - 1\n\tlet maxValue = l[maxIndex]\n\tif maxValue < 0 {\n\t\t\
    return false\n\t}\n\tlet zeroIndex = maxIndex + 1\n\tlet zeroValue = l[zeroIndex]\n\
    \tif zeroValue > maxValue {\n\t\treturn false\n\t}\n\tlet pairs = &l[zeroIndex..maxIndex]\n\
    \tlet isZero = pairs.reduce(_ + _) == 0\n\treturn isZero\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpezezck8k.swift:30:14: error: '&' may only be used to pass an argument\
    \ to inout parameter\n        let pairs = &l[zeroIndex..maxIndex]\n          \
    \          ^\n/tmp/tmpezezck8k.swift:31:28: error: '_' can only appear in a pattern\
    \ or on the left side of an assignment\n        let isZero = pairs.reduce(_ +\
    \ _) == 0\n                                  ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return (sum <= 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp0za2cidk/tmp0za2cidk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ad665bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ad6352b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ad6352988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ad63517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0za2cidk                        0x0000557e22dfb6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b9ad6847460 __libc_start_main +
    245

    6    tmp0za2cidk                        0x0000557e22dfb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum: Int = 0\n    for a in l {\n        sum += a\n\
    \    }\n    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpneauac4a/tmpneauac4a.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63bc263c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63bbf5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63bbf5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63bbf597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpneauac4a                        0x000056251ad976f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b63bc44f460 __libc_start_main +
    245

    6    tmpneauac4a                        0x000056251ad970d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  let (left, right, sum) = l.partition(by: { $0 < 0 })\n \
    \ return !left && !right\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp915maay2.swift:16:30: error: no exact matches in call to instance\
    \ method 'partition'\n  let (left, right, sum) = l.partition(by: { $0 < 0 })\n\
    \                             ^\n/tmp/tmp915maay2.swift:16:30: note: found candidate\
    \ with type '((Int) throws -> Bool) throws -> Array<Int>.Index' (aka '((Int) throws\
    \ -> Bool) throws -> Int')\n  let (left, right, sum) = l.partition(by: { $0 <\
    \ 0 })\n                             ^\n/tmp/tmp915maay2.swift:16:30: error: cannot\
    \ convert value of type 'Array<Int>.Index' (aka 'Int') to specified type '(_,\
    \ _, _)'\n  let (left, right, sum) = l.partition(by: { $0 < 0 })\n           \
    \                ~~^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tl == nil || len(l) == 0 || len(l) > 100 {\n\t\treturn false\n\
    \t}\n\n\tvar n int\n\tfor _, v := range l {\n\t\tif n > 0 {\n\t\t\tn -= v\n\t\t\
    }\n\t}\n\treturn n == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcwiszu9_.swift:16:41: error: consecutive statements on a line must\
    \ be separated by ';'\n        l == nil || len(l) == 0 || len(l) > 100 {\n   \
    \                                            ^\n                             \
    \                  ;\n/tmp/tmpcwiszu9_.swift:20:8: error: found an unexpected\
    \ second identifier in variable declaration; is there an accidental break?\n \
    \       var n int\n              ^\n/tmp/tmpcwiszu9_.swift:20:8: note: join the\
    \ identifiers together\n        var n int\n            ~~^~~\n            nint\n\
    /tmp/tmpcwiszu9_.swift:20:8: note: join the identifiers together with camel-case\n\
    \        var n int\n            ~~^~~\n            nInt\n/tmp/tmpcwiszu9_.swift:21:7:\
    \ error: expected 'in' after for-each pattern\n        for _, v := range l {\n\
    \             ^\n/tmp/tmpcwiszu9_.swift:21:7: error: expected Sequence expression\
    \ for for-each loop\n        for _, v := range l {\n             ^\n/tmp/tmpcwiszu9_.swift:16:14:\
    \ error: cannot find 'len' in scope\n        l == nil || len(l) == 0 || len(l)\
    \ > 100 {\n                    ^~~\n/tmp/tmpcwiszu9_.swift:16:29: error: cannot\
    \ find 'len' in scope\n        l == nil || len(l) == 0 || len(l) > 100 {\n   \
    \                                ^~~\n/tmp/tmpcwiszu9_.swift:16:42: error: closure\
    \ expression is unused\n        l == nil || len(l) == 0 || len(l) > 100 {\n  \
    \                                              ^\n/tmp/tmpcwiszu9_.swift:16:42:\
    \ note: did you mean to use a 'do' statement?\n        l == nil || len(l) == 0\
    \ || len(l) > 100 {\n                                                ^\n     \
    \                                           do \n/tmp/tmpcwiszu9_.swift:20:6:\
    \ error: type annotation missing in pattern\n        var n int\n            ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i, j int\n    var sum Int = 0\n    for i = 0; i <\
    \ len(l); i++ {\n        sum += l[i]\n        for (j = i + 1; j < len(l); j++)\
    \ {\n            sum += l[j]\n            if sum == 0 {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_i4dj05a.swift:16:14: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n    var i, j int\n \
    \            ^\n/tmp/tmp_i4dj05a.swift:16:14: note: join the identifiers together\n\
    \    var i, j int\n           ~~^~~\n           jint\n/tmp/tmp_i4dj05a.swift:16:14:\
    \ note: join the identifiers together with camel-case\n    var i, j int\n    \
    \       ~~^~~\n           jInt\n/tmp/tmp_i4dj05a.swift:17:13: error: found an\
    \ unexpected second identifier in variable declaration; is there an accidental\
    \ break?\n    var sum Int = 0\n            ^\n/tmp/tmp_i4dj05a.swift:17:13: note:\
    \ join the identifiers together\n    var sum Int = 0\n        ~~~~^~~\n      \
    \  sumInt\n/tmp/tmp_i4dj05a.swift:18:5: error: C-style for statement has been\
    \ removed in Swift 3\n    for i = 0; i < len(l); i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_i4dj05a.swift:20:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for (j = i + 1; j < len(l); j++) {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_i4dj05a.swift:16:9: error: type annotation missing in pattern\n    var\
    \ i, j int\n        ^\n/tmp/tmp_i4dj05a.swift:16:12: error: type annotation missing\
    \ in pattern\n    var i, j int\n           ^\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  let len = l.count\n  for var i = 0; i < len; i++ {\n   \
    \ var n = 0\n    var found = false\n    for var j = 0; j < i; j++ {\n      if\
    \ l[j] >= l[j+1] {\n        n += 1\n        if n == 0 {\n          found = true\n\
    \        }\n      }\n    }\n    if !found {\n      return false\n    }\n  }\n\
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfvepbdhw.swift:17:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 0; i < len; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpfvepbdhw.swift:20:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for var j = 0; j < i; j++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    for x in l {\n        if sum < 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmparj__gua/tmparj__gua.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b280d5ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b280d2f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b280d2f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b280d2f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparj__gua                        0x0000555cedff0474 <unavailable> + 5236

    5    libc.so.6                          0x00002b280d7eb460 __libc_start_main +
    245

    6    tmparj__gua                        0x0000555cedff00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var a = [Int]()\n    var b = [Int]()\n    for x in l {\n\
    \        if !a.contains(x) {\n            a.append(x)\n        } else {\n    \
    \        b.append(x)\n        }\n    }\n    if a.count < b.count {\n        return\
    \ false\n    }\n    for index in 0 ..< a.count {\n        if b[index] != 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad51be5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad51bb56561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad51bb56286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad51bb5613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad51bb55bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad51b955e83 <unavailable> + 188035

    6    tmpk0v3obgq                        0x0000557e280fb2c8 <unavailable> + 8904

    7    tmpk0v3obgq                        0x0000557e280fa74d <unavailable> + 5965

    8    libc.so.6                          0x00002ad51c04b460 __libc_start_main +
    245

    9    tmpk0v3obgq                        0x0000557e280fa429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // code lengthy but straightforward because we only need\
    \ to check for a \n    // two element difference\n    var isSum :Bool\n    if\
    \ l == nil || l.count < 2 || l.count > 100 {\n        isSum = false\n    } else\
    \ {\n        if l[0] + l[1] == 0 {\n            isSum = true\n        } else {\n\
    \            isSum = false\n        }\n    }\n    return isSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpz6hlwg0i/tmpz6hlwg0i.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0768ba9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07688a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07688a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b076889f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6hlwg0i                        0x00005573839df635 <unavailable> + 5685

    5    libc.so.6                          0x00002b0768d95460 __libc_start_main +
    245

    6    tmpz6hlwg0i                        0x00005573839df019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i : Int = 0\n    var j : Int = 0\n    var sum : Int\
    \ = 0\n    for j in l {\n        i = i + 1\n        sum = sum + j\n        if\
    \ sum < 0 {\n            sum = 0 - sum\n        }\n        if sum == 0 && i !=\
    \ j {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8rli__lf/tmp8rli__lf.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b609edaac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b609eaa1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b609eaa1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b609eaa07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rli__lf                        0x000055e093770474 <unavailable> + 5236

    5    libc.so.6                          0x00002b609ef96460 __libc_start_main +
    245

    6    tmp8rli__lf                        0x000055e0937700d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for _ in l {\n        i += 1\n    }\n \
    \   if i != l.count {\n        return false\n    }\n    var pairs = 0\n    var\
    \ prev = 0\n    for e in l {\n        pairs += e - prev\n        prev = e\n  \
    \  }\n    return pairs == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpy5sgzmd5/tmpy5sgzmd5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44e7698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44e738fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44e738f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44e738e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5sgzmd5                        0x0000559c36b734c4 <unavailable> + 5316

    5    libc.so.6                          0x00002b44e7884460 __libc_start_main +
    245

    6    tmpy5sgzmd5                        0x0000559c36b73129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    for kk in 0 ..< n {\n        let\
    \ a = l[kk]\n        for j in 0 ..< kk { l[j] -= a }\n        if l[kk] == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpptxylrv4.swift:19:34: error: left side of mutating operator isn't\
    \ mutable: 'l' is a 'let' constant\n        for j in 0 ..< kk { l[j] -= a }\n\
    \                            ~    ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var result: [Bool] = []\n  var last = 0\n  var first = 0\n\
    \  var second = 0\n  for idx in 0..<l.count {\n    last = l[idx]\n    first =\
    \ 0\n    second = 0\n    if idx != 0 {\n      first = l[idx - 1]\n    }\n    if\
    \ idx != l.count - 1 {\n      second = l[idx + 1]\n    }\n    result += [(first\
    \ + last) == -(second + last)]\n  }\n  return result.isEmpty == false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpqvyjai4o/tmpqvyjai4o.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1051038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1050d2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1050d2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1050d2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqvyjai4o                        0x000055c904e12664 <unavailable> + 5732

    5    libc.so.6                          0x00002b1051224460 __libc_start_main +
    245

    6    tmpqvyjai4o                        0x000055c904e122c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var map = [Int:Int]()\n  for i in l {\n    map[i % 2 ==\
    \ 0 ? i : -i] = i\n  }\n  for k in map {\n    if map.contains(k + k) {\n     \
    \ return false\n    }\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3vljbz1y.swift:21:21: error: missing argument label 'where:' in\
    \ call\n    if map.contains(k + k) {\n                    ^\n                \
    \    where: \n/tmp/tmp3vljbz1y.swift:21:23: error: binary operator '+' cannot\
    \ be applied to two '(key: Int, value: Int)' operands\n    if map.contains(k +\
    \ k) {\n                    ~ ^ ~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0 ..< l.count {\n        for j in 0 ..< l.count\
    \ {\n            if l[i] + l[j] == 0 {\n                return true\n        \
    \    }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp_agr39hn/tmp_agr39hn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad05bb6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad05b863b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad05b863988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad05b8627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_agr39hn                        0x000055d89ae7c544 <unavailable> + 5444

    5    libc.so.6                          0x00002ad05bd58460 __libc_start_main +
    245

    6    tmp_agr39hn                        0x000055d89ae7c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var result: Bool = false\n    var current: Int = 0\n \
    \   for x in l {\n        current += x\n        if current == 0 {\n          \
    \  result = true\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpz4s692m9/tmpz4s692m9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ec3887c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ec357eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ec357e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ec357d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4s692m9                        0x0000564d47b536f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b1ec3a73460 __libc_start_main +
    245

    6    tmpz4s692m9                        0x0000564d47b530d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    switch len(l) {\n    case 1:\n        return l[0] != 0\n\
    \    case 2:\n        return l[0] == l[1] && l[0] != 0\n    case 3:\n        return\
    \ l[0] == l[1] && l[1] == l[2] && l[0] != 0\n    case 4:\n        return l[0]\
    \ == l[1] && l[1] == l[2] && l[2] == l[3] && l[0] != 0\n    case 5:\n        return\
    \ l[0] == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] == l[4] && l[0] != 0\n\
    \    default:\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3xnlimln.swift:16:12: error: cannot find 'len' in scope\n    switch\
    \ len(l) {\n           ^~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var first = 0\n  var second = 0\n  for element in l {\n\
    \    first += element\n    second += element\n  }\n  return second == 0 && first\
    \ < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp33yduirw/tmp33yduirw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4beb432c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4beb129b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4beb129988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4beb1287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33yduirw                        0x000055dd7c9da6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b4beb61e460 __libc_start_main +
    245

    6    tmp33yduirw                        0x000055dd7c9da0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let set = Set<Int>()\n    for i in l {\n        if set.contains(i)\
    \ {\n            return true\n        } else {\n            set.add(i)\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp31sujijj.swift:21:17: error: value of type 'Set<Int>' has no member\
    \ 'add'\n            set.add(i)\n            ~~~ ^~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l == nil || len(l) == 0 {\n        return false\n \
    \   }\n    let len = l.count\n    for var i = 1; i < len; i++ {\n        let sum\
    \ = l[i] + l[i - 1]\n        if sum > 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppj_u27_d.swift:20:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i < len; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmppj_u27_d.swift:16:20: error: use of local variable 'len' before its declaration\n\
    \    if l == nil || len(l) == 0 {\n                   ^\n/tmp/tmppj_u27_d.swift:19:9:\
    \ note: 'len' declared here\n    let len = l.count\n        ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var last = 0\n    for i := 0; i < len(l); i++ {\n    \
    \    last += l[i]\n        if last == 0 {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3ty4kdb6.swift:17:12: error: expected type\n    for i := 0; i <\
    \ len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp3ty4kdb6.swift:17:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++\
    \ {\n           ^\n/tmp/tmp3ty4kdb6.swift:17:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l == nil || len(l) == 0 {\n        return false\n \
    \   }\n    \n    var i = 0\n    var sum = 0\n    var hasPairsSoFar = false\n \
    \   while i < len(l) {\n        if l[i] != 0 {\n            sum += l[i]\n    \
    \    } else {\n            if sum == 0 {\n                hasPairsSoFar = true\n\
    \            } else {\n                hasPairsSoFar = false\n            }\n\
    \            sum = 0\n        }\n        i += 1\n    }\n    return hasPairsSoFar\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0nss7waw.swift:16:20: error: cannot find 'len' in scope\n    if\
    \ l == nil || len(l) == 0 {\n                   ^~~\n/tmp/tmp0nss7waw.swift:23:15:\
    \ error: cannot find 'len' in scope\n    while i < len(l) {\n              ^~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return len(l) != 0..<len(l)-1 && !zipWith(l, l).reduce({\
    \ ($0 < $1) || (!($0 == $1)) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpizuqp57k.swift:16:12: error: cannot find 'len' in scope\n    return\
    \ len(l) != 0..<len(l)-1 && !zipWith(l, l).reduce({ ($0 < $1) || (!($0 == $1))\
    \ })\n           ^~~\n/tmp/tmpizuqp57k.swift:16:26: error: cannot find 'len' in\
    \ scope\n    return len(l) != 0..<len(l)-1 && !zipWith(l, l).reduce({ ($0 < $1)\
    \ || (!($0 == $1)) })\n                         ^~~\n/tmp/tmpizuqp57k.swift:16:39:\
    \ error: cannot find 'zipWith' in scope\n    return len(l) != 0..<len(l)-1 &&\
    \ !zipWith(l, l).reduce({ ($0 < $1) || (!($0 == $1)) })\n                    \
    \                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    while i < len(l) {\n        if l[i] ==\
    \ l[(i + 1)%len(l)] {\n            i += 2\n            continue\n        }\n \
    \       if l[i] == 0 {\n            return true\n        }\n        return false\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg927to8a.swift:17:15: error: cannot find 'len' in scope\n    while\
    \ i < len(l) {\n              ^~~\n/tmp/tmpg927to8a.swift:18:30: error: cannot\
    \ find 'len' in scope\n        if l[i] == l[(i + 1)%len(l)] {\n              \
    \               ^~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var prev: Int? = nil\n    var pairs = [Int: [Int]]()\n\
    \    for value in l {\n        if prev == nil {\n            prev = value\n  \
    \          pairs[value] = []\n            continue\n        }\n\n        prev\
    \ = nil\n        pairs[value].insert(prev!)\n    }\n\n    if prev == nil {\n \
    \       return false\n    }\n\n    if pairs[prev!].isEmpty {\n        return true\n\
    \    }\n\n    var prev2 = nil\n    for value in pairs[prev!] {\n        if prev2\
    \ == nil {\n            prev2 = value\n            continue\n        }\n\n   \
    \     if value < prev2 {\n            return false\n        }\n\n        prev2\
    \ = value\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9kjcy2d_.swift:26:20: error: value of optional type '[Int]?' must\
    \ be unwrapped to refer to member 'insert' of wrapped base type '[Int]'\n    \
    \    pairs[value].insert(prev!)\n                   ^\n/tmp/tmp9kjcy2d_.swift:26:20:\
    \ note: chain the optional using '?' to access member 'insert' only for non-'nil'\
    \ base values\n        pairs[value].insert(prev!)\n                   ^\n    \
    \                ?\n/tmp/tmp9kjcy2d_.swift:26:20: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        pairs[value].insert(prev!)\n\
    \                   ^\n                    !\n/tmp/tmp9kjcy2d_.swift:26:22: error:\
    \ cannot use mutating member on immutable value: 'pairs' is immutable\n      \
    \  pairs[value].insert(prev!)\n        ~~~~~        ^\n/tmp/tmp9kjcy2d_.swift:26:34:\
    \ error: missing argument for parameter 'at' in call\n        pairs[value].insert(prev!)\n\
    \                                 ^\n                                 , at: <#Int#>\n\
    Swift.Array:11:37: note: 'insert(_:at:)' declared here\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\n/tmp/tmp9kjcy2d_.swift:33:19: error: value of optional\
    \ type '[Int]?' must be unwrapped to refer to member 'isEmpty' of wrapped base\
    \ type '[Int]'\n    if pairs[prev!].isEmpty {\n                  ^\n/tmp/tmp9kjcy2d_.swift:33:19:\
    \ note: chain the optional using '?' to access member 'isEmpty' only for non-'nil'\
    \ base values\n    if pairs[prev!].isEmpty {\n                  ^\n          \
    \         ?\n/tmp/tmp9kjcy2d_.swift:33:19: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n    if pairs[prev!].isEmpty\
    \ {\n                  ^\n                   !\n/tmp/tmp9kjcy2d_.swift:37:17:\
    \ error: 'nil' requires a contextual type\n    var prev2 = nil\n             \
    \   ^\n/tmp/tmp9kjcy2d_.swift:38:23: error: for-in loop requires '[Int]?' to conform\
    \ to 'Sequence'; did you mean to unwrap optional?\n    for value in pairs[prev!]\
    \ {\n                 ~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var i = 0\n  var j = 1\n  var sum = 0\n  for i in 0..<l.count\
    \ {\n    sum += l[i]\n  }\n  for j in 0..<l.count {\n    sum += l[j]\n    if sum\
    \ > 0 {\n      return false\n    }\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp6_c0co7z/tmp6_c0co7z.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3081bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba307eb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba307eb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba307eb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6_c0co7z                        0x000055dc019247c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ba3083aa460 __libc_start_main +
    245

    6    tmp6_c0co7z                        0x000055dc019241a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var n = l.count\n  if n == 0 {\n    return true\n  }\n \
    \ var total: Int = 0\n  var sum: Int = l[0]\n  for index in 1..<n {\n    sum =\
    \ sum + l[index]\n    if sum < 0 {\n      return false\n    }\n    total = total\
    \ + sum\n    if total == 0 {\n      return true\n    }\n  }\n  return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpj8j2tqjn/tmpj8j2tqjn.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a81c5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a81952b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a81952988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a819517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8j2tqjn                        0x000055ad36f337c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b5a81e47460 __libc_start_main +
    245

    6    tmpj8j2tqjn                        0x000055ad36f331a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var n = l[0]\n    for i := 1; i < len(l); i++ {\n    \
    \    n = n + l[i]\n        if n == 0 {\n            return true\n        }\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprfk8vqr7.swift:17:12: error: expected type\n    for i := 1; i <\
    \ len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmprfk8vqr7.swift:17:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++\
    \ {\n           ^\n/tmp/tmprfk8vqr7.swift:17:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l == nil {\n        return false\n    }\n\n    if l.count\
    \ < 2 {\n        return true\n    }\n\n    if l.count > 1 {\n        let minSum\
    \ = l[0]\n        var sum = 0\n        for v in l {\n            sum += v\n  \
    \          if sum < 0 {\n                sum = 0\n            }\n            if\
    \ sum > minSum {\n                minSum = sum\n            }\n        }\n\n \
    \       return minSum == 0\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2_9hogi_.swift:16:10: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if l == nil {\n       ~ ^  ~~~\n\
    /tmp/tmp2_9hogi_.swift:33:17: error: cannot assign to value: 'minSum' is a 'let'\
    \ constant\n                minSum = sum\n                ^~~~~~\n/tmp/tmp2_9hogi_.swift:25:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let minSum = l[0]\n\
    \        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var a = l[0]\n    for _, b in l[1..] {\n        a -= b\n\
    \        if a < 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsben_i8w.swift:17:10: error: expected 'in' after for-each pattern\n\
    \    for _, b in l[1..] {\n         ^\n/tmp/tmpsben_i8w.swift:17:10: error: expected\
    \ Sequence expression for for-each loop\n    for _, b in l[1..] {\n         ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var leftSum = 0\n    var rightSum = 0\n    for e in l\
    \ {\n        leftSum += e\n        rightSum += -e\n    }\n    return (leftSum\
    \ == 0 && rightSum == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp365uy3tz/tmp365uy3tz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4791b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad478eabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad478eab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad478eaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp365uy3tz                        0x000055e79a4036f5 <unavailable> + 5877

    5    libc.so.6                          0x00002ad4793a0460 __libc_start_main +
    245

    6    tmp365uy3tz                        0x000055e79a4030d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var i = 0\n  for element in l {\n    if element > 0 {\n\
    \      i += element - 1\n    }\n  }\n  return i == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpbuqvg65r/tmpbuqvg65r.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f8cfaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f8cca5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f8cca5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f8cca47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbuqvg65r                        0x00005590574646f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b7f8d19a460 __libc_start_main +
    245

    6    tmpbuqvg65r                        0x00005590574640d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    guard l.isEmpty == false else { return false }\n    guard\
    \ l.count == 2 else {\n        return false\n    }\n    var sum = l[0] + l[1]\n\
    \    for pair in l.drop(2).reversed() {\n        guard sum < pair else {\n   \
    \         return false\n        }\n        sum += pair\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqebhx7k0.swift:21:19: error: no exact matches in call to instance\
    \ method 'drop'\n    for pair in l.drop(2).reversed() {\n                  ^\n\
    /tmp/tmpqebhx7k0.swift:21:19: note: candidate expects value of type '(Int) throws\
    \ -> Bool' for parameter #1 (got 'Int')\n    for pair in l.drop(2).reversed()\
    \ {\n                  ^\n/tmp/tmpqebhx7k0.swift:21:19: note: candidate expects\
    \ value of type '(Int) throws -> Bool' for parameter #1 (got 'Int')\n    for pair\
    \ in l.drop(2).reversed() {\n                  ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    switch len(l) {\n    case 0: return false\n    case 1:\
    \ return l[0] == 0\n    case 2: return l[0] == l[1]\n    default: return l[0]\
    \ == l[1] && l[0] == l[2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7vcc4efg.swift:16:12: error: cannot find 'len' in scope\n    switch\
    \ len(l) {\n           ^~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return pairs_sum_to_zero_L(l)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8m8goyj6.swift:16:12: error: cannot find 'pairs_sum_to_zero_L'\
    \ in scope\n    return pairs_sum_to_zero_L(l)\n           ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  return pairs_sum_to_zero(l, 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppeagci2b.swift:16:31: error: extra argument in call\n  return pairs_sum_to_zero(l,\
    \ 0)\n                          ~~~~^~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let sorted = l.sorted()\n    return sorted.reduce(false)\
    \ { $0 && ($1 == sorted[0] + sorted[1]) ? true : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp0bi5m7l2/tmp0bi5m7l2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73ba5dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73ba2d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73ba2d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73ba2d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0bi5m7l2                        0x00005613f97e1735 <unavailable> + 5941

    5    libc.so.6                          0x00002b73ba7c8460 __libc_start_main +
    245

    6    tmp0bi5m7l2                        0x00005613f97e1119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let m = l.count\n    if m <= 1 {\n        return false\n\
    \    }\n\n    var sum = 0\n    for i in 0..<m {\n        sum += l[i]\n    }\n\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmppw3qxmmh/tmppw3qxmmh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b409a8abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b409a5a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b409a5a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b409a5a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw3qxmmh                        0x000055a1bf85f7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b409aa97460 __libc_start_main +
    245

    6    tmppw3qxmmh                        0x000055a1bf85f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for i in l {\n        sum += i\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7njwm5_w/tmp7njwm5_w.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b700c52fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b700c226b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b700c226988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b700c2257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7njwm5_w                        0x00005631929606f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b700c71b460 __libc_start_main +
    245

    6    tmp7njwm5_w                        0x00005631929600d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return len(l) > 1 && l[0] != 0 || pairs_sum_to_zero(tail(l))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp037isyv0.swift:16:12: error: cannot find 'len' in scope\n    return\
    \ len(l) > 1 && l[0] != 0 || pairs_sum_to_zero(tail(l))\n           ^~~\n/tmp/tmp037isyv0.swift:16:57:\
    \ error: cannot find 'tail' in scope\n    return len(l) > 1 && l[0] != 0 || pairs_sum_to_zero(tail(l))\n\
    \                                                        ^~~~\n/tmp/tmp037isyv0.swift:16:57:\
    \ error: missing argument label 'l:' in call\n    return len(l) > 1 && l[0] !=\
    \ 0 || pairs_sum_to_zero(tail(l))\n                                          \
    \              ^\n                                                        l: \n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var zeroSum = 0\n    var oneSum = 0\n    for i in l {\n\
    \        if i == zero {\n            zeroSum += 1\n        } else {\n        \
    \    oneSum += 1\n        }\n    }\n    return (oneSum + zeroSum) == 2\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp18sk0s6o.swift:19:17: error: cannot find 'zero' in scope\n    \
    \    if i == zero {\n                ^~~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var n = l.count\n    if n == 0 {\n        return false\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    \n    if n == 2 {\n \
    \       if l[0] + l[1] == 0 {\n            return true\n        }\n        return\
    \ false\n    }\n    \n    var dp, dp2, i, j: Int\n    \n    if l[0] == l[1] {\n\
    \        return false\n    }\n    \n    if l[0] <= l[1] {\n        dp = [0] *\
    \ (l[0] + 1)\n        dp2 = 0\n        i = 2\n    } else {\n        dp = [0] *\
    \ (l[1] + 1)\n        dp2 = 1\n        i = 1\n    }\n    \n    for i = 3; i <=\
    \ n; i++ {\n        j = i + i\n        if j < n {\n            dp[j] = dp[j-1]\
    \ + j\n            dp2 *= j\n        } else {\n            dp[j] = dp[j-2]\n \
    \       }\n    }\n    \n    return dp[n] == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp06a9i7oz.swift:47:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 3; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n/tmp/tmp06a9i7oz.swift:38:14:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        dp = [0] * (l[0] + 1)\n             ^\n/tmp/tmp06a9i7oz.swift:42:14:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        dp = [0] * (l[1] + 1)\n             ^\n/tmp/tmp06a9i7oz.swift:57:14:\
    \ error: value of type 'Int' has no subscripts\n    return dp[n] == 0\n      \
    \     ~~^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var a = 0\n    var b = 0\n    for i := 0; i < len(l);\
    \ i++ {\n        a += l[i]\n        b += l[i]\n        if a == b {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdiujmto6.swift:18:12: error: expected type\n    for i := 0; i <\
    \ len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpdiujmto6.swift:18:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++\
    \ {\n           ^\n/tmp/tmpdiujmto6.swift:18:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var left = 0\n    var right = 0\n    for i in l {\n  \
    \      right += i\n        if right == 0 {\n            left += i\n          \
    \  right = 0\n        }\n    }\n    return (left == right)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpwoobjm5e/tmpwoobjm5e.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af15b978c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af15b66fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af15b66f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af15b66e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwoobjm5e                        0x0000558bc72046f5 <unavailable> + 5877

    5    libc.so.6                          0x00002af15bb64460 __libc_start_main +
    245

    6    tmpwoobjm5e                        0x0000558bc72040d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tl.sort()\n\treturn (l[0] + l[1]) == -(l[0] + l[1])\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl648xuhw.swift:16:4: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n        l.sort()\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var i: Int = 0\n  var j: Int = 0\n  var n: Int = 0\n  var\
    \ is_pair: Bool = false\n  var flag: Bool = false\n  for n in l {\n    if n <\
    \ 0 {\n      return false\n    }\n    if n == 0 {\n      flag = true\n      break\n\
    \    }\n    if i == j {\n      break\n    }\n    i = j\n    j = j + n\n    if\
    \ j > l.count {\n      break\n    }\n    if flag {\n      is_pair = true\n   \
    \   break\n    }\n  }\n  if i != j {\n    return true\n  } else {\n    return\
    \ is_pair\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpxg3oo0i_/tmpxg3oo0i_.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d4744c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d443bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14d443b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14d443a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxg3oo0i_                        0x00005618afa0a745 <unavailable> + 5957

    5    libc.so.6                          0x00002b14d4930460 __libc_start_main +
    245

    6    tmpxg3oo0i_                        0x00005618afa0a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var a = l.map { $0 * 2 }\n  var b = l.map { $0 + $0 }\n\
    \  return a.isSorted && b.isSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqg7io5s2.swift:18:12: error: value of type '[Int]' has no member\
    \ 'isSorted'\n  return a.isSorted && b.isSorted\n         ~ ^~~~~~~~\n/tmp/tmpqg7io5s2.swift:18:26:\
    \ error: value of type '[Int]' has no member 'isSorted'\n  return a.isSorted &&\
    \ b.isSorted\n                       ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.len() < 2 {\n        return false\n    }\n    var\
    \ left = l.startIndex\n    var right = l.endIndex\n    var res = true\n    for\
    \ left in l.startIndex..<left {\n        for right in right..<l.endIndex {\n \
    \           if l[left] + l[right] == 0 {\n                res = false\n      \
    \      }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpobgoec1w.swift:16:10: error: value of type '[Int]' has no member\
    \ 'len'\n    if l.len() < 2 {\n       ~ ^~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var hasZeroPair: Bool = false\n    var sumOfPairs = 0\n\
    \    for pair in l {\n        sumOfPairs += pair\n    }\n    if sumOfPairs ==\
    \ 0 {\n        hasZeroPair = true\n    }\n    return hasZeroPair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpeqf8wzb9/tmpeqf8wzb9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b917b820c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b917b517b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b917b517988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b917b5167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqf8wzb9                        0x00005633e93706f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b917ba0c460 __libc_start_main +
    245

    6    tmpeqf8wzb9                        0x00005633e93700d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // Sort array and maintain two pointers pointing to the\
    \ smallest and second smallest elements.\n    let sortedArray = Array(l)\n   \
    \ var small = Int.max\n    var secondSmall = Int.max\n    var smallest: Int =\
    \ 0\n    for value in sortedArray {\n        let curSmall = value - small\n  \
    \      if curSmall < 0 {\n            secondSmall = smallest\n            small\
    \ = curSmall\n        } else {\n            if secondSmall == Int.max {\n    \
    \            secondSmall = curSmall\n            }\n        }\n    }\n    if smallest\
    \ == Int.max {\n        return false\n    } else {\n        let secondSmallValue\
    \ = sortedArray[secondSmall] - small\n        if secondSmallValue == 0 {\n   \
    \         return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var results = [Bool]()\n    var last = 0\n    for el in\
    \ l {\n        if last < el {\n            last = el\n        }\n        else\
    \ {\n            results[results.count-1] = false\n        }\n    }\n    var max\
    \ = 0\n    for el in l {\n        if max < el {\n            max = el\n      \
    \  }\n    }\n    if max != 0 {\n        return false\n    }\n    for el in l {\n\
    \        if !results[el] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4e9388c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4e907f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab4e907f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab4e907f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab4e907ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab4e906810e <unavailable> + 1339662

    6    libswiftCore.so                    0x00002ab4e9068490 Array.subscript.modify
    + 41

    7    tmptu04xi15                        0x000055831947bf06 <unavailable> + 7942

    8    tmptu04xi15                        0x000055831947b51d <unavailable> + 5405

    9    libc.so.6                          0x00002ab4e9574460 __libc_start_main +
    245

    10   tmptu04xi15                        0x000055831947b1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // find all unique pairs of elements in l, summing to\
    \ zero.\n    var indexes = Set<(Int, Int)>()\n    for i := 0; i < len(l); i++\
    \ {\n        if i != l.lastIndex {\n            // pairs sum to zero\n       \
    \     for j := i; j < len(l); j++ {\n                if j != l.lastIndex {\n \
    \                   if abs(l[i] - l[j]) == 1 {\n                        indexes.add((i,\
    \ j))\n                    }\n                }\n            }\n        }\n  \
    \  }\n    return indexes.count >= 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpknab2grk.swift:18:12: error: expected type\n    for i := 0; i <\
    \ len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpknab2grk.swift:18:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++\
    \ {\n           ^\n/tmp/tmpknab2grk.swift:18:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpknab2grk.swift:21:20:\
    \ error: expected type\n            for j := i; j < len(l); j++ {\n          \
    \         ^\n                    <#type#>\n/tmp/tmpknab2grk.swift:21:20: error:\
    \ expected 'in' after for-each pattern\n            for j := i; j < len(l); j++\
    \ {\n                   ^\n/tmp/tmpknab2grk.swift:21:20: error: expected Sequence\
    \ expression for for-each loop\n            for j := i; j < len(l); j++ {\n  \
    \                 ^\n/tmp/tmpknab2grk.swift:17:19: error: type '(Int, Int)' does\
    \ not conform to protocol 'Hashable'\n    var indexes = Set<(Int, Int)>()\n  \
    \                ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = -1\n    var j = -1\n    var s = 0\n    for k in\
    \ l {\n        i += 1\n        s += k\n        if (j == -1 || s - l[j] > 0) &&\
    \ s > 0 {\n            return true\n        }\n        j = i\n        s = 0\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp9wrirnf9/tmp9wrirnf9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab45d5c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab45d2bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab45d2bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab45d2bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9wrirnf9                        0x000056172c8f04c4 <unavailable> + 5316

    5    libc.so.6                          0x00002ab45d7b1460 __libc_start_main +
    245

    6    tmp9wrirnf9                        0x000056172c8f0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  let xs: [(Int, Int)] = l.map {\n    $0 - $1\n  }\n  if xs.isEmpty\
    \ {\n    return false\n  }\n  if xs.countElement != 2 {\n    return false\n  }\n\
    \  return (xs.filter {\n    $0.1 == 0\n  }).isEmpty &&\n    (xs.filter {\n   \
    \   $0.1 == 1\n    }).isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1roqi24y.swift:16:32: error: contextual closure type '(Int) throws\
    \ -> (Int, Int)' expects 1 argument, but 2 were used in closure body\n  let xs:\
    \ [(Int, Int)] = l.map {\n                               ^\n/tmp/tmp1roqi24y.swift:17:8:\
    \ error: cannot convert value of type 'Int' to closure result type '(Int, Int)'\n\
    \    $0 - $1\n    ~~~^~~~\n/tmp/tmp1roqi24y.swift:22:9: error: value of type '[(Int,\
    \ Int)]' has no member 'countElement'\n  if xs.countElement != 2 {\n     ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for (k,v) in pairs(l) {\n        if v != 0 && v+k != 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc44qepbx.swift:16:18: error: cannot find 'pairs' in scope\n   \
    \ for (k,v) in pairs(l) {\n                 ^~~~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        i++\n        for\
    \ y in l {\n            i++\n            if x == y {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkglg9dw0.swift:18:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmpkglg9dw0.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  i++\n             ^~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let len = l.count\n    if len == 0 || len == 1 {\n   \
    \     return true\n    }\n    let minIndex_i = l.minIndex({ $0 < $1 })!\n    let\
    \ maxIndex_i = l.maxIndex({ $0 > $1 })!\n    if maxIndex_i == len-1 {\n      \
    \  return true\n    }\n    for index in maxIndex_i..minIndex_i+1 {\n        if\
    \ l[index] != l[index+1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpam_5mtq7.swift:20:24: error: value of type '[Int]' has no member\
    \ 'minIndex'\n    let minIndex_i = l.minIndex({ $0 < $1 })!\n                \
    \     ~ ^~~~~~~~\n/tmp/tmpam_5mtq7.swift:21:24: error: value of type '[Int]' has\
    \ no member 'maxIndex'\n    let maxIndex_i = l.maxIndex({ $0 > $1 })!\n      \
    \               ~ ^~~~~~~~\n/tmp/tmpam_5mtq7.swift:25:28: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for index in maxIndex_i..minIndex_i+1\
    \ {\n                           ^~\n                           ...\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var i = 0\n  var j = 0\n  for i < l.count && j < l.count\
    \ {\n    if l[i] == l[j] {\n      i++\n      j++\n    } else if l[i] > l[j] {\n\
    \      i++\n    } else {\n      j++\n    }\n  }\n  return i == j\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphcav14u9.swift:18:9: error: expected 'in' after for-each pattern\n\
    \  for i < l.count && j < l.count {\n        ^\n/tmp/tmphcav14u9.swift:18:9: error:\
    \ unary operator cannot be separated from its operand\n  for i < l.count && j\
    \ < l.count {\n        ^~\n         \n/tmp/tmphcav14u9.swift:18:9: error: '<'\
    \ is not a prefix unary operator\n  for i < l.count && j < l.count {\n       \
    \ ^\n/tmp/tmphcav14u9.swift:18:19: error: for-in loop requires 'Bool' to conform\
    \ to 'Sequence'\n  for i < l.count && j < l.count {\n        ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    guard !l.isEmpty, let first = l.first else { return false\
    \ }\n    var sum = 0\n    var result = false\n    var i = 0\n    for n in l {\n\
    \        sum += n\n        if sum < 0 {\n            break\n        }\n      \
    \  i += 1\n    }\n    guard i == l.count else { return false }\n    sum -= l.first!\n\
    \    for j in 0..<i {\n        if sum == 0 {\n            result = true\n    \
    \        break\n        }\n        if sum <= 0 {\n            break\n        }\n\
    \        sum -= l[j + 1]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8ro9jkcx/tmp8ro9jkcx.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe81d93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe81a8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe81a8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe81a897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ro9jkcx                        0x00005638c9a27764 <unavailable> + 5988

    5    libc.so.6                          0x00002abe81f7f460 __libc_start_main +
    245

    6    tmp8ro9jkcx                        0x00005638c9a273c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var results = [Int]()\n  for case (v, n) in l.enumerated()\
    \ {\n    if n != 0 {\n      results.append(v)\n    }\n  }\n  return results.count\
    \ <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfv1k1902.swift:17:13: error: cannot find 'v' in scope\n  for case\
    \ (v, n) in l.enumerated() {\n            ^\n/tmp/tmpfv1k1902.swift:17:16: error:\
    \ cannot find 'n' in scope\n  for case (v, n) in l.enumerated() {\n          \
    \     ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for _x in l {\n        sum += _x\n  \
    \  }\n    var result = true\n    for _x in l {\n        if sum != 0 {\n      \
    \      result = result && sum == 0\n        }\n        sum -= _x\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp3vn1i3ys/tmp3vn1i3ys.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63a2afcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63a27f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63a27f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63a27f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vn1i3ys                        0x00005571e926f6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b63a2ce8460 __libc_start_main +
    245

    6    tmp3vn1i3ys                        0x00005571e926f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.isEmpty() {\n        return false\n    }\n    var\
    \ sum: Int = 0\n    var j: Int = 0\n    for i in l {\n        sum += i\n     \
    \   if sum == 0 {\n            j = i\n        }\n    }\n    return j == i\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmiicus9g.swift:16:10: error: cannot call value of non-function\
    \ type 'Bool'\n    if l.isEmpty() {\n         ^      ~~\n                \n/tmp/tmpmiicus9g.swift:27:17:\
    \ error: cannot find 'i' in scope\n    return j == i\n                ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  return helper(l, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_4nsnb4l.swift:16:10: error: cannot find 'helper' in scope\n  return\
    \ helper(l, 0)\n         ^~~~~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l == nil { return false }\n    let result = Array()\n\
    \    for x in l {\n        for y in l {\n            if x == y && x != 0 && y\
    \ != 0 {\n                result.push([x, y])\n            }\n        }\n    }\n\
    \    return result.isEmpty == false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsw0txwu4.swift:16:10: warning: comparing non-optional value of\
    \ type '[Int]' to 'nil' always returns false\n    if l == nil { return false }\n\
    \       ~ ^  ~~~\n/tmp/tmpsw0txwu4.swift:17:18: error: generic parameter 'Element'\
    \ could not be inferred\n    let result = Array()\n                 ^\n/tmp/tmpsw0txwu4.swift:17:18:\
    \ note: explicitly specify the generic arguments to fix this issue\n    let result\
    \ = Array()\n                 ^\n                      <Any>\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var a = l[0]\n    var b = l[0]\n    for _, belt : v in\
    \ l {\n        if belt - a == 0 {\n            a = b\n        } else {\n     \
    \       b += 1\n        }\n    }\n    return a == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7ng85hqs.swift:18:10: error: expected 'in' after for-each pattern\n\
    \    for _, belt : v in l {\n         ^\n/tmp/tmp7ng85hqs.swift:18:10: error:\
    \ expected Sequence expression for for-each loop\n    for _, belt : v in l {\n\
    \         ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpcwzc0f9p/tmpcwzc0f9p.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4837665c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b483735cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b483735c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b483735b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcwzc0f9p                        0x000055b7162f56f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b4837851460 __libc_start_main +
    245

    6    tmpcwzc0f9p                        0x000055b7162f50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var s = l[0]\n    for i := 1; i < len(l); i++ {\n    \
    \    s += l[i]\n        if s == 0 { // found two distinct elements with sum 0\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpketwguje.swift:17:12: error: expected type\n    for i := 1; i <\
    \ len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpketwguje.swift:17:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++\
    \ {\n           ^\n/tmp/tmpketwguje.swift:17:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var a = l[0]\n    var b = l[0]\n    for number in l[1...]\
    \ {\n        if number < 0 {\n            number *= -1\n        }\n        a +=\
    \ number\n        b += number\n        if a == 0 {\n            return b == 0\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfzxmioe9.swift:20:20: error: left side of mutating operator isn't\
    \ mutable: 'number' is a 'let' constant\n            number *= -1\n          \
    \  ~~~~~~ ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let counts = Dictionary(grouping: l, by: { $0 + $1 })\n\
    \    guard let first = counts.first,\n        let first = first.value,\n     \
    \   let last = first.value,\n        let last = last.last,\n        counts.count\
    \ == 2 else {\n        return false\n    }\n    return first.0 != last.0 && first.1\
    \ < last.1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplkopoue_.swift:16:46: error: contextual closure type '(Int) throws\
    \ -> String' expects 1 argument, but 2 were used in closure body\n    let counts\
    \ = Dictionary(grouping: l, by: { $0 + $1 })\n                               \
    \              ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for i in l {\n        sum += i\n    }\n\
    \    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7njwm5_w/tmp7njwm5_w.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b700c52fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b700c226b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b700c226988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b700c2257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7njwm5_w                        0x00005631929606f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b700c71b460 __libc_start_main +
    245

    6    tmp7njwm5_w                        0x00005631929600d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var a = [0]\n    var b = [0]\n    for x in l {\n     \
    \   a[0] += x\n        b[0] += x\n    }\n    for x in a {\n        if x == 0 {\n\
    \            return false\n        }\n    }\n    for x in b {\n        if x ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp_yziz06g/tmp_yziz06g.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad885aaac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8857a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8857a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8857a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_yziz06g                        0x000055d63eadc4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002ad885c96460 __libc_start_main +
    245

    6    tmp_yziz06g                        0x000055d63eadc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let mut sum = 0\n    for i in l {\n        if sum != 0\
    \ {\n            sum += i\n            if sum > 0 {\n                return false\n\
    \            }\n        } else {\n            sum += i\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmf80za0s.swift:16:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut sum = 0\n\
    \            ^\n/tmp/tmpmf80za0s.swift:16:13: note: join the identifiers together\n\
    \    let mut sum = 0\n        ~~~~^~~\n        mutsum\n/tmp/tmpmf80za0s.swift:16:13:\
    \ note: join the identifiers together with camel-case\n    let mut sum = 0\n \
    \       ~~~~^~~\n        mutSum\n/tmp/tmpmf80za0s.swift:18:12: error: cannot find\
    \ 'sum' in scope\n        if sum != 0 {\n           ^~~\n/tmp/tmpmf80za0s.swift:19:13:\
    \ error: cannot find 'sum' in scope\n            sum += i\n            ^~~\n/tmp/tmpmf80za0s.swift:20:16:\
    \ error: cannot find 'sum' in scope\n            if sum > 0 {\n              \
    \ ^~~\n/tmp/tmpmf80za0s.swift:24:13: error: cannot find 'sum' in scope\n     \
    \       sum += i\n            ^~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i <\
    \ len(l) {\n        if i == 0 {\n            sum += l[i]\n        }\n        if\
    \ j == 0 {\n            sum += l[i]\n        } else {\n            if sum == 0\
    \ {\n                return false\n            }\n            if sum > 0 {\n \
    \               return true\n            }\n            sum -= l[j]\n        }\n\
    \        i += 1\n        j += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr5_zi4bf.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < len(l) {\n          ^\n/tmp/tmpr5_zi4bf.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < len(l) {\n      \
    \    ^~\n           \n/tmp/tmpr5_zi4bf.swift:19:11: error: '<' is not a prefix\
    \ unary operator\n    for i < len(l) {\n          ^\n/tmp/tmpr5_zi4bf.swift:19:13:\
    \ error: cannot find 'len' in scope\n    for i < len(l) {\n            ^~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  let n = l.count\n  if n == 0 {\n    return true\n  }\n \
    \ if n == 1 {\n    return false\n  }\n  let left = l[0 ..< n - 1]\n  let right\
    \ = l[1 ..< n]\n  var result: Int = 0\n  for element in left {\n    result = result\
    \ + element\n  }\n  for element in right {\n    result = result - element\n  \
    \  if result < 0 {\n      return false\n    }\n  }\n  return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpbjy9073z/tmpbjy9073z.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb72b19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb72810b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb72810988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb7280f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjy9073z                        0x0000556a6919c614 <unavailable> + 5652

    5    libc.so.6                          0x00002abb72d05460 __libc_start_main +
    245

    6    tmpbjy9073z                        0x0000556a6919c279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum: Int = l[0]\n    for x in 1..<l.count {\n    \
    \    sum += l[x]\n        if sum != 0 {\n            if sum != l[0] {\n      \
    \          return false\n            }\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpc7o44flw/tmpc7o44flw.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b186b0bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b186adb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b186adb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b186adb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7o44flw                        0x00005604ad52f7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b186b2a8460 __libc_start_main +
    245

    6    tmpc7o44flw                        0x00005604ad52f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sums = [0] * (l.count + 1)\n    for i in l.indices\
    \ {\n        sums[i + 1] = sums[i] + l[i]\n    }\n    for i in\n        0..<(l.count\
    \ - 1)\n    {\n        if sums[i] == 0 {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq46h4000.swift:16:20: error: binary operator '*' cannot be applied\
    \ to operands of type '[Int]' and 'Int'\n    var sums = [0] * (l.count + 1)\n\
    \               ~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmpq46h4000.swift:16:20: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Int, Int)\n  \
    \  var sums = [0] * (l.count + 1)\n                   ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var done\
    \ = false\n    for i < l.count {\n        if j == 0 {\n            sum += l[i]\n\
    \            i += 1\n        } else if l[i] == 0 {\n            j = j + 1\n  \
    \      } else {\n            sum = sum + l[i]\n            if sum == 0 {\n   \
    \             done = true\n            }\n            sum = 0\n            j =\
    \ j + 1\n        }\n        if j == l.count {\n            if sum != 0 {\n   \
    \             done = true\n            }\n            j = 0\n        }\n    }\n\
    \    return done\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmpacxyn9.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmpmpacxyn9.swift:20:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmpmpacxyn9.swift:20:11: error: '<' is not a prefix\
    \ unary operator\n    for i < l.count {\n          ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    for i in 0..<n {\n        for j in\
    \ i+1..<n {\n            if l[i] + l[j] == 0 {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpyn3jqwgc/tmpyn3jqwgc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85bee48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85beb3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85beb3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85beb3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyn3jqwgc                        0x0000555d89ae2544 <unavailable> + 5444

    5    libc.so.6                          0x00002b85bf034460 __libc_start_main +
    245

    6    tmpyn3jqwgc                        0x0000555d89ae21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l == nil || l.isEmpty() {\n        return false\n \
    \   }\n\n    var minElem = l[0]\n    var maxElem = l[0]\n    for elem in l {\n\
    \        if elem < minElem {\n            minElem = elem\n        }\n        if\
    \ elem > maxElem {\n            maxElem = elem\n        }\n    }\n\n    var minIndex\
    \ = 0\n    for index in 0..<l.count {\n        if l[index] < minElem {\n     \
    \       minIndex = index\n        }\n    }\n\n    return minIndex == maxIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr3gpu1q4.swift:16:22: error: cannot call value of non-function\
    \ type 'Bool'\n    if l == nil || l.isEmpty() {\n                     ^      ~~\n\
    \                            \n/tmp/tmpr3gpu1q4.swift:38:24: error: cannot find\
    \ 'maxIndex' in scope\n    return minIndex == maxIndex\n                     \
    \  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    switch l.count {\n    case 0: return true\n    case 1:\
    \ return l[0] != 0\n    default: return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp6v9ok4o_/tmp6v9ok4o_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25702a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b256ff9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b256ff9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b256ff9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6v9ok4o_                        0x0000563bb4d35635 <unavailable> + 5685

    5    libc.so.6                          0x00002b2570490460 __libc_start_main +
    245

    6    tmp6v9ok4o_                        0x0000563bb4d35019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let (min_i, max_i) = l.minMax()\n    for i in 0..<min_i\
    \ {\n        if i != min_i { //not all elements might be identical\n         \
    \   if l.filter({ (v) in\n                let j = l.index(of: v)\n           \
    \     let c = v - l[j] // the difference\n                if c == 0 { return true\
    \ }\n                else { return false }\n            }).count == min_i { return\
    \ false }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplq8c7rs3.swift:16:28: error: value of type '[Int]' has no member\
    \ 'minMax'\n    let (min_i, max_i) = l.minMax()\n                         ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let zero = Set([0])\n    return l.map{ $0 - 1 }.filter{\
    \ zero.contains($0) }.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmprdyzwynh/tmprdyzwynh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2dadcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2daac4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2daac4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2daac37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdyzwynh                        0x0000556286e94bfd <unavailable> + 7165

    5    libc.so.6                          0x00002ae2dafb9460 __libc_start_main +
    245

    6    tmprdyzwynh                        0x0000556286e94239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // code will be optimised for release builds.\n    //\
    \ for debug builds we check explicitly for trivial cases.\n    var left = 0\n\
    \    var right = l.count\n    while left < right {\n        var sum = l[left]\
    \ + l[right]\n        if sum > 0 {\n            left += 1\n        }\n       \
    \ if sum < 0 {\n            right -= 1\n        }\n        if sum == 0 {\n   \
    \         return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b54c899fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54c8696561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b54c8696286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b54c869613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b54c8695bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b54c8495e83 <unavailable> + 188035

    6    tmptynmljkd                        0x000055fe47a58b79 <unavailable> + 7033

    7    tmptynmljkd                        0x000055fe47a5833d <unavailable> + 4925

    8    libc.so.6                          0x00002b54c8b8b460 __libc_start_main +
    245

    9    tmptynmljkd                        0x000055fe47a58019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var first = 0\n    var second = 1\n    for i in l {\n\
    \        if first < i {\n            return false\n        }\n        if first\
    \ == i && second != 0 {\n            return false\n        }\n        if second\
    \ == i {\n            first++\n            second++\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpil9hnvhc.swift:26:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            first++\n                 ^~\n/tmp/tmpil9hnvhc.swift:27:19:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  second++\n                  ^~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var zeroes = 0\n    for idx in 0..<l.count {\n       \
    \ let current = l[idx]\n        if current > 0 {\n            zeroes += 1\n  \
    \      }\n    }\n    if zeroes == 2 {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmphg7wtff0/tmphg7wtff0.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1478d20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1478a17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1478a17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1478a167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphg7wtff0                        0x00005586118697c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1478f0c460 __libc_start_main +
    245

    6    tmphg7wtff0                        0x00005586118691a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var i = 0\n  var j = 0\n  var result = 0\n  var pairs =\
    \ 0\n\n  for i < len(l) {\n    for j < len(l) {\n      result = result + l[i]\n\
    \      result = result + l[j]\n      if result == 0 {\n        pairs += 1\n  \
    \    }\n      if result < 0 {\n        break\n      }\n    }\n    if result ==\
    \ 0 {\n      break\n    }\n    if pairs == 2 {\n      return true\n    }\n   \
    \ pairs = 0\n    result = 0\n    i += 1\n  }\n  return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7jm4lc3j.swift:21:9: error: expected 'in' after for-each pattern\n\
    \  for i < len(l) {\n        ^\n/tmp/tmp7jm4lc3j.swift:21:9: error: unary operator\
    \ cannot be separated from its operand\n  for i < len(l) {\n        ^~\n     \
    \    \n/tmp/tmp7jm4lc3j.swift:22:11: error: expected 'in' after for-each pattern\n\
    \    for j < len(l) {\n          ^\n/tmp/tmp7jm4lc3j.swift:22:11: error: unary\
    \ operator cannot be separated from its operand\n    for j < len(l) {\n      \
    \    ^~\n           \n/tmp/tmp7jm4lc3j.swift:21:9: error: '<' is not a prefix\
    \ unary operator\n  for i < len(l) {\n        ^\n/tmp/tmp7jm4lc3j.swift:21:11:\
    \ error: cannot find 'len' in scope\n  for i < len(l) {\n          ^~~\n/tmp/tmp7jm4lc3j.swift:22:11:\
    \ error: '<' is not a prefix unary operator\n    for j < len(l) {\n          ^\n\
    /tmp/tmp7jm4lc3j.swift:22:13: error: cannot find 'len' in scope\n    for j < len(l)\
    \ {\n            ^~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tvar zero Int = l[0]\n\tvar pairs = Set<Int>()\n\tfor _,\
    \ v := range l {\n\t\tif v < zero {\n\t\t\treturn false\n\t\t}\n\t\tpairs.insert(v)\n\
    \t\tzero -= v\n\t}\n\treturn pairs.isSubset(Set(l[1..]))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpewxxlrc7.swift:16:11: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var zero Int\
    \ = l[0]\n                 ^\n/tmp/tmpewxxlrc7.swift:16:11: note: join the identifiers\
    \ together\n        var zero Int = l[0]\n            ~~~~~^~~\n            zeroInt\n\
    /tmp/tmpewxxlrc7.swift:18:7: error: expected 'in' after for-each pattern\n   \
    \     for _, v := range l {\n             ^\n/tmp/tmpewxxlrc7.swift:18:7: error:\
    \ expected Sequence expression for for-each loop\n        for _, v := range l\
    \ {\n             ^\n/tmp/tmpewxxlrc7.swift:25:31: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n        return pairs.isSubset(Set(l[1..]))\n\
    \                                     ^~\n                                   \
    \  ...\n/tmp/tmpewxxlrc7.swift:25:15: error: no exact matches in call to instance\
    \ method 'isSubset'\n        return pairs.isSubset(Set(l[1..]))\n            \
    \         ^\n/tmp/tmpewxxlrc7.swift:25:15: note: found candidate with type '(Set<Int>)\
    \ -> Bool'\n        return pairs.isSubset(Set(l[1..]))\n                     ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let x = l.sorted()\n    for element in x {\n        for\
    \ element in x {\n            if (element != element && element < 0 && element\
    \ > -element && element != element + element) { return true }\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpkkb62qqc/tmpkkb62qqc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae758783c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae75847ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae75847a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7584797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkkb62qqc                        0x000055dc57634795 <unavailable> + 6037

    5    libc.so.6                          0x00002ae75896f460 __libc_start_main +
    245

    6    tmpkkb62qqc                        0x000055dc57634179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    let max = (n - 1)/2\n    for i in\
    \ 0 ..< max {\n        let j = i + max\n        if l[i] == l[j] && i != j {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpav9ulipz/tmpav9ulipz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50ca93ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50ca631b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50ca631988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50ca6307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpav9ulipz                        0x000055896049c544 <unavailable> + 5444

    5    libc.so.6                          0x00002b50cab26460 __libc_start_main +
    245

    6    tmpav9ulipz                        0x000055896049c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tvar i1, i2, i3 int\n\ti1 = -1\n\ti2 = -1\n\ti3 = -1\n\t\
    for i := 0; i < len(l); i++ {\n\t\tif i == 0 {\n\t\t\ti1 = i\n\t\t} else {\n\t\
    \t\ti2 = i\n\t\t}\n\t\tif i2 == i {\n\t\t\ti3 += 1\n\t\t} else {\n\t\t\tif i1\
    \ + 1 == i3 {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif i2 + 1 == i3 {\n\t\t\t\t\
    return true\n\t\t\t}\n\t\t\tif i1 + 1 < i3 {\n\t\t\t\ti1 = i3\n\t\t\t}\n\t\t\t\
    if i2 + 1 < i3 {\n\t\t\t\ti2 = i3\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplizzya_4.swift:16:17: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var i1, i2,\
    \ i3 int\n                       ^\n/tmp/tmplizzya_4.swift:16:17: note: join the\
    \ identifiers together\n        var i1, i2, i3 int\n                    ~~~^~~\n\
    \                    i3int\n/tmp/tmplizzya_4.swift:16:17: note: join the identifiers\
    \ together with camel-case\n        var i1, i2, i3 int\n                    ~~~^~~\n\
    \                    i3Int\n/tmp/tmplizzya_4.swift:20:9: error: expected type\n\
    \        for i := 0; i < len(l); i++ {\n               ^\n                <#type#>\n\
    /tmp/tmplizzya_4.swift:20:9: error: expected 'in' after for-each pattern\n   \
    \     for i := 0; i < len(l); i++ {\n               ^\n/tmp/tmplizzya_4.swift:20:9:\
    \ error: expected Sequence expression for for-each loop\n        for i := 0; i\
    \ < len(l); i++ {\n               ^\n/tmp/tmplizzya_4.swift:16:6: error: type\
    \ annotation missing in pattern\n        var i1, i2, i3 int\n            ^\n/tmp/tmplizzya_4.swift:16:10:\
    \ error: type annotation missing in pattern\n        var i1, i2, i3 int\n    \
    \            ^\n/tmp/tmplizzya_4.swift:16:14: error: type annotation missing in\
    \ pattern\n        var i1, i2, i3 int\n                    ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    return ((n * (n + 1)) / 2 - (l.filter\
    \ { (n, x) in x == 0 }).count) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2iuimaks.swift:17:45: error: contextual closure type '(Int) throws\
    \ -> Bool' expects 1 argument, but 2 were used in closure body\n    return ((n\
    \ * (n + 1)) / 2 - (l.filter { (n, x) in x == 0 }).count) == 0\n             \
    \                               ^\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  // sort the array\n  l.sort()\n  // initialize two pointer\
    \ at 0 and 1 respectively\n  var p0, p1 int\n  // initialize sum, sum is negative\
    \ to indicate that elements are positive\n  var sum, neg bool\n\n  // initialize\
    \ a variable k to keep a record of the smallest integer\n  var k int\n  // initialize\
    \ the current smallest integer\n  var min int\n\n  // loop until we find two distinct\
    \ numbers in the array that sum to zero\n  for {\n    // update k if current number\
    \ is less than the current smallest integer\n    if l[k] < min {\n      k = k\
    \ + 1\n    }\n    // update min if current number is less than the previous smallest\
    \ integer\n    if l[k] < l[min] {\n      min = k\n    }\n    // negate sum if\
    \ current number is negative\n    if l[k] < 0 {\n      sum = !sum\n    }\n   \
    \ // update pointers\n    p0 = k\n    p1 = k\n    if sum {\n      // advance k\
    \ to next number\n      k = k + 1\n    } else {\n      // advance min and k to\
    \ next number\n      k = k + 1\n      min = k\n    }\n    // check two numbers\
    \ are distinct\n    if p0 == p1 {\n      return false\n    }\n  } // end for\n\
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf3abq_jy.swift:19:14: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n  var p0, p1 int\n \
    \            ^\n/tmp/tmpf3abq_jy.swift:19:14: note: join the identifiers together\n\
    \  var p0, p1 int\n          ~~~^~~\n          p1int\n/tmp/tmpf3abq_jy.swift:19:14:\
    \ note: join the identifiers together with camel-case\n  var p0, p1 int\n    \
    \      ~~~^~~\n          p1Int\n/tmp/tmpf3abq_jy.swift:21:16: error: found an\
    \ unexpected second identifier in variable declaration; is there an accidental\
    \ break?\n  var sum, neg bool\n               ^\n/tmp/tmpf3abq_jy.swift:21:16:\
    \ note: join the identifiers together\n  var sum, neg bool\n           ~~~~^~~~\n\
    \           negbool\n/tmp/tmpf3abq_jy.swift:21:16: note: join the identifiers\
    \ together with camel-case\n  var sum, neg bool\n           ~~~~^~~~\n       \
    \    negBool\n/tmp/tmpf3abq_jy.swift:24:9: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n  var k int\n      \
    \  ^\n/tmp/tmpf3abq_jy.swift:24:9: note: join the identifiers together\n  var\
    \ k int\n      ~~^~~\n      kint\n/tmp/tmpf3abq_jy.swift:24:9: note: join the\
    \ identifiers together with camel-case\n  var k int\n      ~~^~~\n      kInt\n\
    /tmp/tmpf3abq_jy.swift:26:11: error: found an unexpected second identifier in\
    \ variable declaration; is there an accidental break?\n  var min int\n       \
    \   ^\n/tmp/tmpf3abq_jy.swift:26:11: note: join the identifiers together\n  var\
    \ min int\n      ~~~~^~~\n      minint\n/tmp/tmpf3abq_jy.swift:26:11: note: join\
    \ the identifiers together with camel-case\n  var min int\n      ~~~~^~~\n   \
    \   minInt\n/tmp/tmpf3abq_jy.swift:29:7: error: expected pattern\n  for {\n  \
    \    ^\n/tmp/tmpf3abq_jy.swift:29:7: error: expected Sequence expression for for-each\
    \ loop\n  for {\n      ^\n/tmp/tmpf3abq_jy.swift:17:5: error: cannot use mutating\
    \ member on immutable value: 'l' is a 'let' constant\n  l.sort()\n  ~ ^\n/tmp/tmpf3abq_jy.swift:19:7:\
    \ error: type annotation missing in pattern\n  var p0, p1 int\n      ^\n/tmp/tmpf3abq_jy.swift:19:11:\
    \ error: type annotation missing in "
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tvar i = 0\n\tllen := l.len()\n\tfor i < llen {\n\t\tfor\
    \ i += 1; i < llen {\n\t\t\tif l[i] - l[i - 1] != 0 {\n\t\t\t\treturn false\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeffdky0k.swift:17:6: error: consecutive statements on a line must\
    \ be separated by ';'\n        llen := l.len()\n            ^\n            ;\n\
    /tmp/tmpeffdky0k.swift:17:7: error: expected expression\n        llen := l.len()\n\
    \             ^\n/tmp/tmpeffdky0k.swift:18:8: error: expected 'in' after for-each\
    \ pattern\n        for i < llen {\n              ^\n/tmp/tmpeffdky0k.swift:18:8:\
    \ error: unary operator cannot be separated from its operand\n        for i <\
    \ llen {\n              ^~\n               \n/tmp/tmpeffdky0k.swift:19:3: error:\
    \ C-style for statement has been removed in Swift 3\n                for i +=\
    \ 1; i < llen {\n                ^   ~~~~~~~~~~~~~~~~\n/tmp/tmpeffdky0k.swift:17:2:\
    \ error: cannot find 'llen' in scope\n        llen := l.len()\n        ^~~~\n\
    /tmp/tmpeffdky0k.swift:18:8: error: '<' is not a prefix unary operator\n     \
    \   for i < llen {\n              ^\n/tmp/tmpeffdky0k.swift:18:10: error: cannot\
    \ find 'llen' in scope\n        for i < llen {\n                ^~~~\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let set = Set()\n    for i in l {\n        set.insert(i)\n\
    \    }\n    for i in set {\n        if set.contains(i - 1) {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28fs5m0p.swift:16:15: error: generic parameter 'Element' could\
    \ not be inferred\n    let set = Set()\n              ^\n/tmp/tmp28fs5m0p.swift:16:15:\
    \ note: explicitly specify the generic arguments to fix this issue\n    let set\
    \ = Set()\n              ^\n                 <<#Element: Hashable#>>\n"
  stdout: ''
  timestamp: 1660028791
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var a = l\n    var seen: Set<Int> = []\n    for k in a.reversed()\
    \ {\n        if seen.add(a[k]) {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfackuyiv.swift:19:17: error: value of type 'Set<Int>' has no member\
    \ 'add'\n        if seen.add(a[k]) {\n           ~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return pairs_sum_to_zero(l, 0) {\n        sum += $0\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv805weta.swift:17:9: error: cannot find 'sum' in scope\n      \
    \  sum += $0\n        ^~~\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  if l.count != 2 {\n    return false\n  }\n  var i = 0\n\
    \  let x = l[i]\n  while i < l.count && l[i] != x {\n    i += 1\n  }\n  if i ==\
    \ l.count {\n    return true\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp61crdefg/tmp61crdefg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf4b53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaf484ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaf484a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaf48497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61crdefg                        0x000055e474a0e635 <unavailable> + 5685

    5    libc.so.6                          0x00002adaf4d3f460 __libc_start_main +
    245

    6    tmp61crdefg                        0x000055e474a0e019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    var count = 2\n    for num in l {\n \
    \       if num == 0 {\n            count += 1\n            continue\n        }\n\
    \        sum += num\n        if sum == 0 {\n            return count == 2\n  \
    \      }\n        sum -= num\n        if sum < 0 {\n            sum = 0\n    \
    \    }\n        if sum > 0 {\n            count = 0\n        }\n    }\n    return\
    \ count == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpcdm1iand/tmpcdm1iand.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2ccd14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2cca0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2cca0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2cca0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcdm1iand                        0x0000559c4318e53b <unavailable> + 5435

    5    libc.so.6                          0x00002ae2ccf00460 __libc_start_main +
    245

    6    tmpcdm1iand                        0x0000559c4318e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count <= 1 {\n        return false\n    }\n    for\
    \ i in 1..<l.count {\n        if l[i-1] + l[i] == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpf7v2jrgx/tmpf7v2jrgx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af745d45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af745a3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af745a3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af745a3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf7v2jrgx                        0x00005579abd44544 <unavailable> + 5444

    5    libc.so.6                          0x00002af745f31460 __libc_start_main +
    245

    6    tmpf7v2jrgx                        0x00005579abd441a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    guard l.count > 0 else {\n        return false\n    }\n\
    \    guard l.count <= MAX_PAIRS_TOZERO else {\n        return false\n    }\n \
    \   var sum = 0\n    for i in 0..<l.count {\n        sum = sum + l[i]\n      \
    \  if sum == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2vg8l53n.swift:19:22: error: cannot find 'MAX_PAIRS_TOZERO' in\
    \ scope\n    guard l.count <= MAX_PAIRS_TOZERO else {\n                     ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l == nil { return false }\n    var i: Int = 0\n   \
    \ var j = i + 1\n    var k: Int = 0\n    for i < l.count && j < l.count {\n  \
    \      k = l[i]\n        if k != 0 {\n            if k != l[j] {\n           \
    \     return false\n            }\n        } else {\n            if i != j {\n\
    \                return false\n            }\n        }\n        i += 1\n    \
    \    j += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfnqkm31o.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpfnqkm31o.swift:20:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpfnqkm31o.swift:16:10: warning:\
    \ comparing non-optional value of type '[Int]' to 'nil' always returns false\n\
    \    if l == nil { return false }\n       ~ ^  ~~~\n/tmp/tmpfnqkm31o.swift:20:11:\
    \ error: '<' is not a prefix unary operator\n    for i < l.count && j < l.count\
    \ {\n          ^\n/tmp/tmpfnqkm31o.swift:20:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    l.sort()\n    guard var sum : Int = 0\n    for i in l\
    \ {\n        sum += i\n    }\n    if sum == 0 {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppxfwup5a.swift:17:28: error: expected 'else' after 'guard' condition\n\
    \    guard var sum : Int = 0\n                           ^\n/tmp/tmppxfwup5a.swift:16:7:\
    \ error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n\
    \    l.sort()\n    ~ ^\n/tmp/tmppxfwup5a.swift:17:11: error: initializer for conditional\
    \ binding must have Optional type, not 'Int'\n    guard var sum : Int = 0\n  \
    \        ^               ~\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  if l.count == 0 {\n    return true\n  }\n  \n  if l.count\
    \ == 1 {\n    return l[0] == 0\n  }\n  \n  \n  var i = 0\n  \n  var found = false\n\
    \  \n  for j in 0..<(l.count) {\n    var pair = l[i..<j]\n    var lj = pair\n\
    \    var rj = 0\n    \n    for k in i..<j {\n      if l[j - k] == 0 {\n      \
    \  lj += l[k]\n        rj += l[k]\n      } else {\n        break\n      }\n  \
    \  }\n    \n    if lj == 0 {\n      found = true\n      break\n    }\n    \n \
    \   if lj > 0 && lj != rj {\n      found = true\n      break\n    }\n    \n  \
    \  if lj > 0 {\n      found = true\n      break\n    }\n    \n    if rj > 0 {\n\
    \      found = true\n      break\n    }\n    \n    i = j + 1\n  }\n  \n  return\
    \ found\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5v94551n.swift:36:16: error: no exact matches in call to subscript\
    \ \n        lj += l[k]\n               ^\nSwift.Array:17:23: note: candidate expects\
    \ value of type 'Range<Int>' for parameter #1 (got 'Int')\n    @inlinable public\
    \ subscript(bounds: Range<Int>) -> ArraySlice<Element> { get set }\n         \
    \             ^\nSwift.Collection:3:23: note: candidate expects value of type\
    \ '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable public\
    \ subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n        \
    \              ^\nSwift.MutableCollection:3:23: note: candidate expects value\
    \ of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get set }\n\
    \                      ^\n/tmp/tmp5v94551n.swift:43:11: error: binary operator\
    \ '==' cannot be applied to operands of type 'ArraySlice<Int>' and 'Int'\n   \
    \ if lj == 0 {\n       ~~ ^  ~\n/tmp/tmp5v94551n.swift:43:11: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Int, Int)\n \
    \   if lj == 0 {\n          ^\n/tmp/tmp5v94551n.swift:48:8: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type 'Int'\n    if lj >\
    \ 0 && lj != rj {\n       ^\n/tmp/tmp5v94551n.swift:48:18: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type 'Int'\n    if lj >\
    \ 0 && lj != rj {\n                 ^\n/tmp/tmp5v94551n.swift:53:8: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type 'Int'\n  \
    \  if lj > 0 {\n       ^\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let sums = l.map { $0 + $1 }\n    return sums.reduce(true,\
    \ combine: { (prev, curr) -> Bool in\n        return !prev || curr == 0\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7hluas9n.swift:16:22: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n    let sums =\
    \ l.map { $0 + $1 }\n                     ^\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var result = 0\n    for i in l {\n        if i > 0 {\n\
    \            result += i\n        }\n    }\n    return result == 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpluefgvov/tmpluefgvov.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32f68b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32f65abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32f65ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32f65aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpluefgvov                        0x0000561de4dc56f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b32f6aa0460 __libc_start_main +
    245

    6    tmpluefgvov                        0x0000561de4dc50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for (i1, e1) in enumerate(l) {\n        if i == e1 {\n\
    \            continue\n        }\n        for (i2, e2) in enumerate(l) {\n   \
    \         if i2 == e2 {\n                continue\n            }\n           \
    \ if i1+i2 > 0 {\n                let sum = (i1+i2)\n                if e - sum\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj56qolxo.swift:16:21: error: cannot find 'enumerate' in scope\n\
    \    for (i1, e1) in enumerate(l) {\n                    ^~~~~~~~~\n/tmp/tmpj56qolxo.swift:20:25:\
    \ error: cannot find 'enumerate' in scope\n        for (i2, e2) in enumerate(l)\
    \ {\n                        ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    guard l.count > 1 else {\n        return false\n    }\n\
    \    let l = l.sorted()\n    let first = 0\n    let last = l.count - 1\n    for\
    \ first < last {\n        let middle = (first + last) / 2\n        if l[middle]\
    \ != l[middle-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwqerkxz_.swift:22:15: error: expected 'in' after for-each pattern\n\
    \    for first < last {\n              ^\n/tmp/tmpwqerkxz_.swift:22:15: error:\
    \ unary operator cannot be separated from its operand\n    for first < last {\n\
    \              ^~\n               \n/tmp/tmpwqerkxz_.swift:22:15: error: '<' is\
    \ not a prefix unary operator\n    for first < last {\n              ^\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\treturn contains_two(l, func(i, j Int) -> Bool { return sum_to_zero(Ints(i,\
    \ j)) == 0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxmprmie7.swift:16:25: error: expected expression in list of expressions\n\
    \        return contains_two(l, func(i, j Int) -> Bool { return sum_to_zero(Ints(i,\
    \ j)) == 0 })\n                               ^\n/tmp/tmpxmprmie7.swift:16:29:\
    \ error: expected identifier in function declaration\n        return contains_two(l,\
    \ func(i, j Int) -> Bool { return sum_to_zero(Ints(i, j)) == 0 })\n          \
    \                         ^\n/tmp/tmpxmprmie7.swift:16:9: error: cannot find 'contains_two'\
    \ in scope\n        return contains_two(l, func(i, j Int) -> Bool { return sum_to_zero(Ints(i,\
    \ j)) == 0 })\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n \
    \   for _ in 0 ..< l.count {\n        var sum: Int = 0\n        for _ in 0..<i\
    \ {\n            sum += l[i]\n            j = (j + 1) % l.count\n        }\n \
    \       if sum != 0 {\n            result.append(Int32(sum))\n        }\n    \
    \    i = j\n    }\n    return result.count > 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7zqkz_10.swift:26:27: error: cannot convert value of type 'Int32'\
    \ to expected argument type 'Int'\n            result.append(Int32(sum))\n   \
    \                       ^\n                          Int(      )\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    guard l.count >= 2 else {\n        return false\n    }\n\
    \n    var i = 0\n    var j = 0\n    var k = 0\n    var maxSum = 0\n    for k in\
    \ 0..<l.count {\n        let sum = l[k] + l[k]\n        if k == 0 || sum == 0\
    \ || sum > maxSum {\n            maxSum = sum\n            i = k\n        }\n\
    \    }\n\n    return l[i] == maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpqw77_awf/tmpqw77_awf.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23fc3f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23fc0e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23fc0e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23fc0e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqw77_awf                        0x00005559572d5544 <unavailable> + 5444

    5    libc.so.6                          0x00002b23fc5de460 __libc_start_main +
    245

    6    tmpqw77_awf                        0x00005559572d51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return pairs_sum_to_zero_internal(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6cfxy5qr.swift:16:12: error: cannot find 'pairs_sum_to_zero_internal'\
    \ in scope\n    return pairs_sum_to_zero_internal(l)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // base case\n    guard l.count >= 1 else {\n        return\
    \ false\n    }\n\n    let pairs = count_pairs_sum_to_zero(l)\n    return pairs.count\
    \ >= 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0g5aqly6.swift:21:17: error: cannot find 'count_pairs_sum_to_zero'\
    \ in scope\n    let pairs = count_pairs_sum_to_zero(l)\n                ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l[0] != 0 || l[0] == l[1] {\n        return false\n\
    \    }\n    var sum = 0\n    var j = 0\n    for i in l {\n        sum += i\n \
    \       if sum == 0 {\n            return true\n        }\n        j += 1\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpdywtpjn8/tmpdywtpjn8.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4412c17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b441290eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b441290e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b441290d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdywtpjn8                        0x000055a69d2a5745 <unavailable> + 5957

    5    libc.so.6                          0x00002b4412e03460 __libc_start_main +
    245

    6    tmpdywtpjn8                        0x000055a69d2a5129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count <= 1 {\n        return false\n    }\n    var\
    \ zeroIndex = -1\n    for index in 0..<l.count {\n        let value = l[index]\n\
    \        if value == 0 {\n            if zeroIndex != -1 {\n                return\
    \ false\n            } else {\n                zeroIndex = index\n           \
    \ }\n        }\n    }\n    return zeroIndex != -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp235vm3zr/tmp235vm3zr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc56425c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc5611cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc5611c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc5611b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp235vm3zr                        0x0000557355421544 <unavailable> + 5444

    5    libc.so.6                          0x00002abc56611460 __libc_start_main +
    245

    6    tmp235vm3zr                        0x00005573554211a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var left = 0\n    var right = 0\n    var sum = 0\n   \
    \ var flag = false\n    for x in l {\n        sum += x\n        left = x\n   \
    \ }\n    for x in l {\n        right = x\n        if sum > 0 {\n            if\
    \ sum == left {\n                return true\n            } else {\n         \
    \       sum = left + right\n                if sum == 0 {\n                  \
    \  return true\n                }\n            }\n        } else {\n         \
    \   if sum == right {\n                return true\n            } else {\n   \
    \             sum = left + right\n                if sum == 0 {\n            \
    \        return true\n                }\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpbu1xhprj/tmpbu1xhprj.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45f72a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45f6f9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45f6f9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45f6f9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbu1xhprj                        0x00005555f2928474 <unavailable> + 5236

    5    libc.so.6                          0x00002b45f7492460 __libc_start_main +
    245

    6    tmpbu1xhprj                        0x00005555f29280d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l == nil || len(l) == 0 {\n        return false\n \
    \   }\n\n    var i = 1\n    var sum = 0\n    var x = l[0]\n    var y = l[0]\n\
    \    var result = true\n\n    for element in l[1..] {\n        sum += element\n\
    \        if sum < 0 {\n            sum = 0\n            x = element\n        }\
    \ else {\n            y = element\n        }\n        if sum == 0 {\n        \
    \    result = false\n        }\n    }\n\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_mqqy96i.swift:16:20: error: cannot find 'len' in scope\n    if\
    \ l == nil || len(l) == 0 {\n                   ^~~\n/tmp/tmp_mqqy96i.swift:26:23:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    for element\
    \ in l[1..] {\n                      ^~\n                      ...\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let map: [Int: [Int]] = [:]\n    for v in l {\n      \
    \  guard let k = map.firstIndex(where: { $0 >= v}) else {\n            map[k]\
    \ = [v]\n            continue\n        }\n        map[k]?.append(v)\n    }\n \
    \   return map.count < 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqqcxletn.swift:18:50: error: type 'Dictionary<Int, [Int]>.Element'\
    \ (aka '(key: Int, value: Array<Int>)') cannot conform to 'BinaryInteger'\n  \
    \      guard let k = map.firstIndex(where: { $0 >= v}) else {\n              \
    \                                   ^\n/tmp/tmpqqcxletn.swift:18:50: note: only\
    \ concrete types such as structs, enums and classes can conform to protocols\n\
    \        guard let k = map.firstIndex(where: { $0 >= v}) else {\n            \
    \                                     ^\n/tmp/tmpqqcxletn.swift:18:50: note: required\
    \ by referencing operator function '>=' on 'BinaryInteger' where 'Self' = 'Dictionary<Int,\
    \ [Int]>.Element' (aka '(key: Int, value: Array<Int>)')\n        guard let k =\
    \ map.firstIndex(where: { $0 >= v}) else {\n                                 \
    \                ^\n/tmp/tmpqqcxletn.swift:19:17: error: cannot find 'k' in scope\n\
    \            map[k] = [v]\n                ^\n/tmp/tmpqqcxletn.swift:22:17: error:\
    \ cannot use mutating member on immutable value: 'map' is a 'let' constant\n \
    \       map[k]?.append(v)\n        ~~~     ^\n/tmp/tmpqqcxletn.swift:16:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let map: [Int: [Int]] = [:]\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var has_duplicates = false\n    for e in l {\n       \
    \ if l.contains(e) && l.contains(e.negate()) {\n            has_duplicates = true\n\
    \            break\n        }\n    }\n    return !has_duplicates\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd44q91hd.swift:18:42: error: cannot convert value of type '()'\
    \ to expected argument type 'Int'\n        if l.contains(e) && l.contains(e.negate())\
    \ {\n                                         ^\n/tmp/tmpd44q91hd.swift:18:42:\
    \ error: cannot use mutating member on immutable value: 'e' is a 'let' constant\n\
    \        if l.contains(e) && l.contains(e.negate()) {\n                      \
    \                 ~ ^\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if len(l) < 2 {\n        return false\n    }\n\n    type\
    \ Pair = [Int]\n    var seen: [Pair] = [:]\n\n    for x in l {\n        if seen[x]\
    \ != nil {\n            seen[x] = nil\n            return true\n        }\n\n\
    \        for y in l {\n            if x == y {\n                continue\n   \
    \         }\n\n            if seen[x] == nil && seen[y] == nil {\n           \
    \     seen[x] = y\n                return true\n            }\n        }\n   \
    \ }\n\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp35gw31tx.swift:20:9: error: consecutive statements on a line must\
    \ be separated by ';'\n    type Pair = [Int]\n        ^\n        ;\n/tmp/tmp35gw31tx.swift:16:8:\
    \ error: cannot find 'len' in scope\n    if len(l) < 2 {\n       ^~~\n/tmp/tmp35gw31tx.swift:20:5:\
    \ error: type of expression is ambiguous without more context\n    type Pair =\
    \ [Int]\n    ^~~~\n/tmp/tmp35gw31tx.swift:20:10: error: cannot find 'Pair' in\
    \ scope\n    type Pair = [Int]\n         ^~~~\n/tmp/tmp35gw31tx.swift:21:16: error:\
    \ cannot find type 'Pair' in scope\n    var seen: [Pair] = [:]\n             \
    \  ^~~~\n/tmp/tmp35gw31tx.swift:25:23: error: 'nil' requires a contextual type\n\
    \            seen[x] = nil\n                      ^\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var a = 0\n  var b = l.count\n  for i in 0 ..< b {\n   \
    \ for j in 0 ..< b {\n      a += l[i]\n      b--\n      if b == 0 && a-k >= 0\
    \ {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0w6j5ymp.swift:21:8: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n      b--\n       ^~\n/tmp/tmp0w6j5ymp.swift:22:22: error:\
    \ cannot find 'k' in scope\n      if b == 0 && a-k >= 0 {\n                  \
    \   ^\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count == 0 {\n        return true\n    }\n    if\
    \ l.count == 1 {\n        if l[0] == 0 {\n            return true\n        }\n\
    \        return false\n    }\n    if let first = l[0], last = l[l-1] {\n     \
    \   if first + last == 0 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo48loom8.swift:25:26: error: expected 'let' in conditional\n  \
    \  if let first = l[0], last = l[l-1] {\n                         ^\n        \
    \                 let \n/tmp/tmpo48loom8.swift:25:35: error: cannot convert value\
    \ of type '[Int]' to expected argument type 'Int'\n    if let first = l[0], last\
    \ = l[l-1] {\n                                  ^\n/tmp/tmpo48loom8.swift:25:8:\
    \ error: initializer for conditional binding must have Optional type, not 'Int'\n\
    \    if let first = l[0], last = l[l-1] {\n       ^           ~~~~\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var total = 0\n    for i in l {\n        total += i\n\
    \    }\n    return total == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpivl8qz0f/tmpivl8qz0f.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06d8c84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06d897bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06d897b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06d897a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivl8qz0f                        0x000055ef94e5a6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b06d8e70460 __libc_start_main +
    245

    6    tmpivl8qz0f                        0x000055ef94e5a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let (m, n) = l.map{\n        Double($0) / Double($1)\n\
    \    }.maxElement()\n    if m == 0 {\n        if n != 0 {\n            return\
    \ false\n        }\n        return true\n    }\n    if n == 0 {\n        return\
    \ false\n    }\n    if l == nil {\n        return false\n    }\n    for i in 0..<n\
    \ {\n        if Double(pairSum(l, i, i + 1)) != 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphz8dhthr.swift:16:23: error: contextual closure type '(Int) throws\
    \ -> Double' expects 1 argument, but 2 were used in closure body\n    let (m,\
    \ n) = l.map{\n                      ^\n/tmp/tmphz8dhthr.swift:18:7: error: value\
    \ of type '[Double]' has no member 'maxElement'\n    }.maxElement()\n~~~~~ ^~~~~~~~~~\n\
    /tmp/tmphz8dhthr.swift:28:10: warning: comparing non-optional value of type '[Int]'\
    \ to 'nil' always returns false\n    if l == nil {\n       ~ ^  ~~~\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var zeroSum = 0\n  var pairIndex = 0\n  for pairIndex, item\
    \ in enumerate(l) {\n    if item > 0 {\n      zeroSum += item\n    }\n    if zeroSum\
    \ > 0 {\n      return false\n    }\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7n0t8ejw.swift:18:16: error: expected 'in' after for-each pattern\n\
    \  for pairIndex, item in enumerate(l) {\n               ^\n/tmp/tmp7n0t8ejw.swift:18:16:\
    \ error: expected Sequence expression for for-each loop\n  for pairIndex, item\
    \ in enumerate(l) {\n               ^\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    guard !l.isEmpty else { return false }\n    var i = -1\n\
    \    var j = -1\n    var curSum = 0\n    for idx in l.indices  {\n        i =\
    \ idx\n        curSum += l[i]\n        if curSum == 0 { return true }\n      \
    \  j = i\n        if j > 0 && l[j-1] > curSum {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpcv4y4e5d/tmpcv4y4e5d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac43375dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac433454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac433454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4334537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcv4y4e5d                        0x00005563bb520574 <unavailable> + 5492

    5    libc.so.6                          0x00002ac433949460 __libc_start_main +
    245

    6    tmpcv4y4e5d                        0x00005563bb5201d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let sortedLs = l.sorted()\n    if sortedLs.count == 2\
    \ {\n        return sortedLs[0] + sortedLs[1] == 0 && sortedLs[0] != 0\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpv9ylqine/tmpv9ylqine.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16bfea7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16bfb9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16bfb9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16bfb9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9ylqine                        0x0000563480d076d5 <unavailable> + 5845

    5    libc.so.6                          0x00002b16c0093460 __libc_start_main +
    245

    6    tmpv9ylqine                        0x0000563480d070b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var result: Bool = false\n    for x in l {\n        for\
    \ y in l {\n            if x == y {\n                continue\n            }\n\
    \            if x == 0 && y > 0 {\n                result = true\n           \
    \     break\n            } else if x < y && x > 0 {\n                result =\
    \ false\n                break\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpyz27yqj9/tmpyz27yqj9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1adf8b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1adf5aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1adf5aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1adf5a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyz27yqj9                        0x000055ec05b16474 <unavailable> + 5236

    5    libc.so.6                          0x00002b1adfa9f460 __libc_start_main +
    245

    6    tmpyz27yqj9                        0x000055ec05b160d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tl == pairs_sum_to_zero(l)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprxjtadi2.swift:16:4: error: binary operator '==' cannot be applied\
    \ to operands of type '[Int]' and 'Bool'\n        l == pairs_sum_to_zero(l)\n\
    \        ~ ^  ~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprxjtadi2.swift:16:4: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Bool, Bool)\n\
    \        l == pairs_sum_to_zero(l)\n          ^\n/tmp/tmprxjtadi2.swift:16:25:\
    \ error: missing argument label 'l:' in call\n        l == pairs_sum_to_zero(l)\n\
    \                               ^\n                               l: \n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let sorted: Set<Int> = l.sorted()\n    return !sorted.isEmpty\
    \ && sorted.isSubsetOf(Set(sorted.filter({ $0 == 0 })))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5jouz7rr.swift:16:30: error: cannot convert value of type '[Int]'\
    \ to specified type 'Set<Int>'\n    let sorted: Set<Int> = l.sorted()\n      \
    \                     ~~^~~~~~~~\n/tmp/tmp5jouz7rr.swift:17:38: error: value of\
    \ type 'Set<Int>' has no member 'isSubsetOf'\n    return !sorted.isEmpty && sorted.isSubsetOf(Set(sorted.filter({\
    \ $0 == 0 })))\n                              ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = [Int]()\n    for x in l {\n        if set.contains(-x)\
    \ || set.contains(x) {\n            return false\n        } else {\n         \
    \   set.append(x)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvuyoko_w/tmpvuyoko_w.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b8b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b887ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b887a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b88797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvuyoko_w                        0x0000564c5709e594 <unavailable> + 5524

    5    libc.so.6                          0x00002b38b8d6f460 __libc_start_main +
    245

    6    tmpvuyoko_w                        0x0000564c5709e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return pairs_sum_impl(l, 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvr6lqgmy.swift:16:12: error: cannot find 'pairs_sum_impl' in scope\n\
    \    return pairs_sum_impl(l, 0)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    if n < 2 {\n        return false\n\
    \    }\n    let first: Int\n    let second: Int\n    if n < 10 {\n        first\
    \ = l[0]\n        second = l[1]\n    } else {\n        first = l[0] + l[1] / 2\n\
    \        second = l[0] - l[1] / 2\n    }\n    if first == 0 && second == 0 {\n\
    \        return true\n    }\n    if first != 0 || second != 0 {\n        if first\
    \ > second {\n            return true\n        } else {\n            return false\n\
    \        }\n    }\n    return pairs_sum_to_zero(ArraySlice(l, 2, n))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa97b8dm7.swift:39:30: error: missing argument label 'l:' in call\n\
    \    return pairs_sum_to_zero(ArraySlice(l, 2, n))\n                         \
    \    ^\n                             l: \n/tmp/tmpa97b8dm7.swift:39:30: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    return pairs_sum_to_zero(ArraySlice(l, 2, n))\n                         \
    \    ^\n/tmp/tmpa97b8dm7.swift:39:40: error: missing argument label 'arrayLiteral:'\
    \ in call\n    return pairs_sum_to_zero(ArraySlice(l, 2, n))\n               \
    \                        ^\n                                        arrayLiteral:\
    \ \n/tmp/tmpa97b8dm7.swift:39:41: error: cannot pass array of type '[Int]' as\
    \ variadic arguments of type 'Int'\n    return pairs_sum_to_zero(ArraySlice(l,\
    \ 2, n))\n                                        ^\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let set = Set<Int>()\n    for pair in l {\n        if\
    \ let v = pair, set.contains(v) {\n            return true\n        }\n      \
    \  set.insert(v)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo57ljx_p.swift:18:12: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n        if let v = pair, set.contains(v)\
    \ {\n           ^       ~~~~\n/tmp/tmpo57ljx_p.swift:21:20: error: cannot find\
    \ 'v' in scope\n        set.insert(v)\n                   ^\n/tmp/tmpo57ljx_p.swift:21:13:\
    \ error: cannot use mutating member on immutable value: 'set' is a 'let' constant\n\
    \        set.insert(v)\n        ~~~ ^\n/tmp/tmpo57ljx_p.swift:16:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let set = Set<Int>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    guard l.count == 2 else { return false }\n    var a =\
    \ l[0]\n    var b = l[1]\n    for idx in 0..<l.count {\n        guard a > 0 &&\
    \ b > 0 else {\n            return false\n        }\n        a = a - b\n     \
    \   b = a * b\n    }\n    return a > 0 || b > 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp_ii57bi2/tmp_ii57bi2.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02f8a23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02f871ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02f871a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02f87197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ii57bi2                        0x0000562c487c67c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b02f8c0f460 __libc_start_main +
    245

    6    tmp_ii57bi2                        0x0000562c487c61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028792
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l == nil {\n        return true\n    }\n    if l.count\
    \ == 0 {\n        return true\n    }\n    if l.count != 2 {\n        return false\n\
    \    }\n    var i = 0\n    var j = 0\n    while i < l.count {\n        while j\
    \ < l.count && l[j] == l[i]+l[j] {\n            j += 1\n        }\n        if\
    \ j == l.count {\n            return true\n        }\n        i += 1\n       \
    \ j += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpcw1b06g6/tmpcw1b06g6.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa7c29dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa7bf94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa7bf94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa7bf937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcw1b06g6                        0x00005602ad420635 <unavailable> + 5685

    5    libc.so.6                          0x00002afa7c489460 __libc_start_main +
    245

    6    tmpcw1b06g6                        0x00005602ad420019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028792
