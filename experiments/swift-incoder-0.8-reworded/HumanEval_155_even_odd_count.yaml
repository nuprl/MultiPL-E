name: HumanEval_155_even_odd_count
language: swift
prompt: "\n/// Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1,\
  \ 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int)\
  \ -> (Int, Int) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
  \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
  \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
  \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
  \ 0) == (1, 0))"
completions: ["    var even: Int = 0\n    var odd: Int = 0\n    for num > 0 {\n  \
    \      num /= 10\n        if num % 2 == 0 {\n            even++\n        } else\
    \ {\n            odd++\n        }\n    }\n    return (even, odd)", "    var evenCount\
    \ = 0\n    var oddCount = 0\n    if num < 0 {\n        evenCount = abs(num)\n\
    \        oddCount = evenCount\n    } else {\n        for num in String(num).characters\
    \ {\n            if num % 2 == 0 {\n                evenCount += 1\n         \
    \   } else {\n                oddCount += 1\n            }\n        }\n    }\n\
    \    return (evenCount, oddCount)", "    var even = 0\n    var odd = 0\n    switch\
    \ num {\n    case 0 ... 1:\n        even = 1\n        odd = 1\n    case 0 ...\
    \ 3:\n        even = 2\n        odd = 0\n    case 0 ... 5:\n        even = 3\n\
    \        odd = 1\n    case 0 ... 7:\n        even = 4\n        odd = 0\n    case\
    \ 0 ... 9:\n        even = 5\n        odd = 2\n    case 0 ... 11:\n        even\
    \ = 6\n        odd = 3\n    case 0 ... 13:\n        even = 7\n        odd = 4\n\
    \    case 0 ... 15:\n        even = 8\n        odd = 5\n    case 0 ... 17:\n \
    \       even = 9\n        odd = 6\n    case 0 ... 19:\n        even = 10\n   \
    \     odd = 7\n    case 0 ... 21:\n        even = 11\n        odd = 8\n    case\
    \ 0 ... 23:\n        even = 12\n        odd = 9\n    case 0 ... 25:\n        even\
    \ = 13\n        odd = 10\n    case 0 ... 27:\n        even = 14\n        odd =\
    \ 11\n    case 0 ... 29:\n        even = 15\n        odd = 12\n    case 0 ...\
    \ 31:\n        even = 16\n        odd = 13\n    case 0 ... 33:\n        even =\
    \ 17\n        odd = 14\n    case 0 ... 35:\n        even = 18\n        odd = 15\n\
    \    case 0 ... 37:\n        even = 19\n        odd = 16\n    case 0 ... 39:\n\
    \        even = 20\n        odd = 17\n    case 0 ... 41:\n        even = 21\n\
    \        odd = 18\n    case 0 ... 43:\n        even = 22\n        odd = 19\n \
    \   case 0 ... 45:\n        even = 23\n        odd = 20\n    case 0 ... 47:\n\
    \        even = 24\n        odd = 21\n    case 0 ... 49:\n        even = 25\n\
    \        odd = 22\n    case 0 ... 51:\n        even = 26\n        odd = 23\n \
    \   case 0 ... 53:\n        even = 27\n        odd = 24\n    case 0 ... 55:\n\
    \        even = 28\n        odd = 25\n    case 0 ... 57:\n        even = 29\n\
    \        odd = 26\n    case 0 ... 59:\n        even = 30\n        odd = 27\n \
    \   case 0 ... 61:\n        even = 31\n        odd = 28\n    case 0 ... 63:\n\
    \        even = 32\n        odd = 29\n    case 0 ... 65:\n        even = 33\n\
    \        odd = 30\n    case 0 ", "    var even = 0, odd = 0, i : Int\n\n    if\
    \ num < 0 {\n        num ^= num\n    }\n\n    for i = num; i != 0; i = i / 10\
    \ {\n        if i % 2 != 0 {\n            odd++\n        } else {\n          \
    \  even++\n        }\n    }\n\n    return (even, odd)", "    var odd = 1\n   \
    \ var even = 1\n    var total = 0\n    var digit = 0\n    var evenDigit = 0\n\
    \    while num > 0 {\n        digit = num % 10\n        total = total + digit\n\
    \        num = num / 10\n        if digit % 2 == 0 {\n            even = even\
    \ + 1\n            evenDigit = digit\n        } else {\n            odd = odd\
    \ + digit\n        }\n    }\n\n    return (odd, even)", "    var evenCount = 0\n\
    \    var oddCount = 0\n\n    for remainder in num.quotientAndRemainder(dividingBy:\
    \ 2) {\n        if remainder == 0 {\n            break\n        }\n        evenCount\
    \ += 1\n    }\n\n    for remainder in num.quotientAndRemainder(dividingBy: 2)\
    \ {\n        if remainder == 1 {\n            break\n        }\n        oddCount\
    \ += 1\n    }\n\n    return (evenCount, oddCount)", "    var even = 0, odd = 0,\
    \ remainder = num\n\n    while remainder > 0 {\n        if remainder % 2 == 0\
    \ {\n            even++\n        }\n        odd += 1\n        remainder = remainder\
    \ / 2\n    }\n    return (even, odd)", "    var even = Int(0)\n    var odd = Int(0)\n\
    \    if num < 0 {\n        return (0, num)\n    }\n    \n    if num >= 10 {\n\
    \        for i = Int(10); i > 0; i-- {\n            if num % i == 0 {\n      \
    \          even = even + Int(1)\n            } else {\n                odd = odd\
    \ + Int(1)\n            }\n        }\n        return (even, odd)\n    }\n    \n\
    \    if num < 0 {\n        return (0, num)\n    }\n    \n    odd = num / 2\n \
    \   for i = Int(10); i > 0; i-- {\n        if odd % i == 0 {\n            even\
    \ = even + Int(1)\n        } else {\n            odd = odd + Int(1)\n        }\n\
    \    }\n    return (even, odd)", "\tvar even, odd, count int\n\n\tfor i := 0;\
    \ i < num; i++ {\n\t\tdigit, digit := num % 10, num / 10\n\t\tif digit == 0 {\n\
    \t\t\tcount++\n\t\t} else {\n\t\t\tif digit % 2 == 0 {\n\t\t\t\teven++\n\t\t\t\
    } else {\n\t\t\t\todd++\n\t\t\t}\n\t\t}\n\t\tnum = digit\n\t}\n\n\treturn (even,\
    \ odd)", "    if num < 0 {\n        throwError(\"Negative argument\", num: num,\
    \ error: 1)\n    }\n    var even = 0, odd = 1\n    for _ in 0..<num {\n      \
    \  let remainder = num % 10\n        if remainder % 2 == 0 {\n            even\
    \ = even * 10 + remainder\n        } else {\n            odd = odd * 10 + remainder\n\
    \        }\n        num = num / 10\n    }\n    return (even, odd)", "    var even\
    \ = 0\n    var odd = 0\n\n    for digit in String(num).reverse() {\n        if\
    \ Int(digit) % 2 == 0 {\n            even += 1\n        } else {\n           \
    \ odd += 1\n        }\n    }\n    return (even, odd)", "    var even: Int = 0\n\
    \    var odd: Int = 0\n    for num >= 0 {\n        num /= 10\n        even++\n\
    \    }\n    for num != 0 {\n        num /= 10\n        odd++\n    }\n    return\
    \ (even, odd)", "    var even, odd: Int = 0\n    switch num {\n    case 0: //\
    \ case is required to cover negative numbers as well\n    case 1:\n        even\
    \ = 0\n        odd = 1\n    case 2:\n        even = 1\n        odd = 0\n    case\
    \ 3:\n        even = 1\n        odd = 1\n    case 4:\n        even = 1\n     \
    \   odd = 2\n    case 5:\n        even = 2\n        odd = 1\n    case 6:\n   \
    \     even = 2\n        odd = 2\n    case 7:\n        even = 2\n        odd =\
    \ 3\n    case 8:\n        even = 3\n        odd = 1\n    case 9:\n        even\
    \ = 3\n        odd = 2\n    case 10:\n        even = 3\n        odd = 3\n    case\
    \ 11:\n        even = 4\n        odd = 1\n    case 12:\n        even = 4\n   \
    \     odd = 2\n    case 13:\n        even = 4\n        odd = 3\n    case 14:\n\
    \        even = 4\n        odd = 4\n    case 15:\n        even = 5\n        odd\
    \ = 1\n    case 16:\n        even = 5\n        odd = 2\n    case 17:\n       \
    \ even = 5\n        odd = 3\n    case 18:\n        even = 5\n        odd = 4\n\
    \    case 19:\n        even = 6\n        odd = 1\n    case 20:\n        even =\
    \ 6\n        odd = 2\n    case 21:\n        even = 6\n        odd = 3\n    case\
    \ 22:\n        even = 6\n        odd = 4\n    case 23:\n        even = 7\n   \
    \     odd = 1\n    case 24:\n        even = 7\n        odd = 2\n    case 25:\n\
    \        even = 7\n        odd = 3\n    case 26:\n        even = 7\n        odd\
    \ = 4\n    case 27:\n        even = 8\n        odd = 1\n    case 28:\n       \
    \ even = 8\n        odd = 2\n    case 29:\n        even = 8\n        odd = 3\n\
    \    case 30:\n        even = 8\n        odd = 4\n    case 31:\n        even =\
    \ 9\n        odd = 1\n    case 32:\n        even = 9\n        odd = 2\n    case\
    \ 33:\n        even = 9\n        odd = 3\n    case 34:\n        even = 9\n   \
    \     odd = 4\n    case 35:\n        even = 10\n        odd = 1\n    case 36:\n\
    \        even = 10\n        odd = 2\n    case 37:\n        even = 10\n       \
    \ odd = 3\n    case 38:\n        even = 10\n        odd = 4\n    case 39:\n  \
    \      even = 11\n        odd = 1\n    case 40:\n        even = 11\n        odd\
    \ = 2\n", "    var even = 0, odd = 1\n    for i in num {\n        switch i % 10\
    \ {\n        case 0, 2, 4, 5, 7, 9, 11:\n            even++\n        case 1, 3,\
    \ 5, 7, 9:\n            odd++\n        }\n    }\n    return (even, odd)", '    return
    num.modPow(Int32(pow(2.0, Double(num.intValue))), &Int32(pow(2.0, Double(num.intValue
    / Int32(pow(2.0, Double(num.intValue)))))))', "    var evenDigits = 0\n    var\
    \ oddDigits = 0\n    for n in String(num).characters {\n        if n % 2 == 0\
    \ {\n            evenDigits += 1\n        } else {\n            oddDigits += 1\n\
    \        }\n    }\n    return (evenDigits, oddDigits)", "    var even = 1, odd\
    \ = 1\n    var remainder: Int\n    for _ in 0..<num {\n        remainder = num\
    \ % 10\n        if remainder % 2 == 0 {\n            even++\n        } else {\n\
    \            odd++\n        }\n        num /= 10\n    }\n    return (even, odd)",
  "    var evenCount = 0\n    var oddCount = 0\n    var power = 1\n    var digit =\
    \ 0\n    for digit in 0 ..< Int(log10(Double(num))) + 1 {\n        let power =\
    \ pow(10, Double(digit))\n        let result = Double(num) / power\n        if\
    \ result % 2 != 0 {\n            oddCount += Int(result)\n        } else {\n \
    \           evenCount += Int(result)\n        }\n    }\n    return (evenCount,\
    \ oddCount)", "  var even = 0, odd = 1\n  for _ in 0..<num.asDigit() {\n    let\
    \ digit = num % 10\n    if digit % 2 == 0 {\n      even += digit\n    } else {\n\
    \      odd *= digit\n    }\n    num /= 10\n  }\n  return even, odd", '    return
    (num % 2 == 0 ? 1 : 0, num % 2 == 1 ? 1 : 0)', "    var even = 1, odd = 1\n  \
    \  for n in num.quotientAndRemainder(dividingBy: 2) {\n        even += n\n   \
    \ }\n    for n in num.quotientAndRemainder(dividingBy: 2) { odd += n }\n    return\
    \ (even, odd)", "    var even = 0, odd = 1\n    if num < 0 {\n        return (-even,\
    \ -odd)\n    }\n    var remainder = num\n    var numDigits = 0\n    while remainder\
    \ > 0 {\n        remainder = remainder % 10\n        even++\n        remainder\
    \ = (remainder / 10) % 10\n        odd++\n        remainder = (remainder / 10)\
    \ % 10\n        numDigits++\n    }\n    return (even, odd)", "    var even = 0\n\
    \    var odd = 0\n    for number in String(num).characters {\n        switch number\
    \ {\n        case '0':\n            even++\n        case '1':\n            odd++\n\
    \        }\n    }\n    return (even, odd)", "    var evenDigits = 0, oddDigits\
    \ = 0\n    for x in num {\n        if x % 2 == 0 {\n            evenDigits++\n\
    \        } else {\n            oddDigits++\n        }\n    }\n    return (evenDigits,\
    \ oddDigits)", "    var oddDigits = 0\n    var evenDigits = 0\n    if num < 0\
    \ {\n        num *= -1\n    }\n    \n    for _ in 0..<(Int(log2(num))+1){\n  \
    \      let digit = num % 10\n        num /= 10\n        \n        if digit > 0\
    \ {\n            evenDigits++\n        } else {\n            oddDigits++\n   \
    \     }\n    }\n    \n    return (evenDigits, oddDigits)", "    var evenCount\
    \ = 0\n    var oddCount = 0\n    var nStr = \"\"\n    \n    guard num > 0 else\
    \ { return (0, 0) }\n    \n    for i in 0 ..< Int(floor(log2(Double(num)))) +\
    \ 1 {\n        guard num % 2 == 0 else { continue }\n        evenCount += 1\n\
    \    }\n    \n    for i in 0 ..< Int(floor(log2(Double(num)))) + 1 {\n       \
    \ guard num % 2 != 0 else { continue }\n        oddCount += 1\n    }\n    \n \
    \   nStr = String(num)\n    \n    return (evenCount, oddCount)", "    var evenDigit\
    \ = 0\n    var oddDigit = 0\n    for n in num.toString() {\n        switch n {\n\
    \        case \"1\":\n            evenDigit += 1\n        case \"0\":\n      \
    \      oddDigit += 1\n        default:\n            break\n        }\n    }\n\
    \    return (evenDigit, oddDigit)", "    var even = 0\n    var odd = 0\n    for\
    \ x in num {\n        if x % 2 == 0 {\n            even += 1\n        } else {\n\
    \            odd += 1\n        }\n    }\n    return (even, odd)", "    let numInt\
    \ = Int(num)\n    var evenCount = 0\n    var oddCount = 0\n    if numInt <= 0\
    \ {\n        return (0, 0)\n    }\n    var dividend = 1\n    \n    for dividend\
    \ <= numInt {\n        if numInt % dividend == 0 {\n            evenCount += 1\n\
    \        } else {\n            oddCount += 1\n        }\n    }\n    return (evenCount,\
    \ oddCount)", "    var even, odd = 0, 1\n    for n in num.toString() {\n     \
    \   let intDigit = Int(n)!\n        if intDigit % 2 == 0 {\n            even +=\
    \ intDigit\n        } else {\n            odd += intDigit\n        }\n    }\n\
    \    return (even, odd)", "    var even = 0, odd = 0, i = 0\n    while i < num\
    \ {\n        if num % 2 == 0 {\n            even++\n        } else {\n       \
    \     odd++\n        }\n        i += 1\n    }\n    return (even, odd)", "    if\
    \ num < 0 {\n        return (0,0)\n    }\n    var evenCount = 0\n    var oddCount\
    \ = 0\n    while num > 0 {\n        if num%2 == 0 {\n            evenCount +=\
    \ 1\n        } else {\n            oddCount += 1\n        }\n        num /= 10\n\
    \    }\n    return (evenCount, oddCount)", "    var evenCount = 0\n    var oddCount\
    \ = 0\n    var numStr = String(num)\n    for char in numStr {\n        switch\
    \ char {\n        case \"0\":\n            evenCount++\n        case \"1\":\n\
    \            oddCount++\n        default:\n            throw(ArgumentError.noMoreZero())\n\
    \        }\n    }\n    return (evenCount, oddCount)", "    var even = 0, odd =\
    \ 0, i = 0\n    for x in num {\n        if x%2 == 0 {\n            even += x\n\
    \        } else {\n            odd += x\n        }\n        i += 1\n    }\n  \
    \  return even, odd", "    var evenCount = 0\n    var oddCount = 0\n\n    if num\
    \ < 0 {\n        return (0, 0)\n    }\n\n    while num > 0 {\n        if num %\
    \ 2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n\
    \        }\n        num /= 10\n    }\n\n    return (evenCount, oddCount)", " \
    \   if num < 0 {\n        return (-1, 0)\n    }\n\n    var (even, odd) = divrem(num,\
    \ 10)\n    if even == 0 {\n        return (odd, odd)\n    }\n    return (even,\
    \ odd - 1)", "    if num == 0 || num == 1 {\n        return (0, 0)\n    }\n  \
    \  \n    // Count the number of even digits.\n    var even: Int = 0\n    for _\
    \ in 0..<num / 2 {\n        even += 1\n    }\n    \n    // Count the number of\
    \ odd digits.\n    var odd: Int = 0\n    for _ in num.stride(through: 0, by: -1)\
    \ {\n        odd += 1\n    }\n    \n    return (even, odd)", "    let zero = num\
    \ == 0\n    let evenDigits = (num / 10).rounded(.towardZero)\n    let oddDigits\
    \ = (num - evenDigits * 10).rounded(.towardZero)\n    return (evenDigits, oddDigits)\
    \ // the tuple has even and odd digits, therefore odd is always larger than even",
  "    var evenNum = 0\n    var oddNum = 0\n    var i = num\n    while i > 0 {\n \
    \       i = i / 10\n        evenNum += 1\n    }\n    i = num\n    while i > 0\
    \ {\n        i = i / 10\n        oddNum += 1\n    }\n    return (evenNum, oddNum)",
  "    var evenCount = 0\n    var oddCount = 0\n    guard num != 0 else { return (evenCount,\
    \ oddCount) }\n    let string = \"\\(num)\".stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \    guard let str = string else { return (evenCount, oddCount) }\n    for i in\
    \ 0..<str.count {\n        let digit = Int(str[i])\n        if digit % 2 == 0\
    \ {\n            evenCount += 1\n        } else {\n            oddCount += 1\n\
    \        }\n    }\n    return (evenCount, oddCount)", "    let result = (num as\
    \ NSString).componentsSeparatedByString(\".\").map{ Int($0) }\n    guard result.count\
    \ > 0 else {\n        return result\n    }\n    let even = result.filter{ $0 %\
    \ 2 == 0 }.count\n    let odd = result.filter{ $0 % 2 != 0 }.count\n    return\
    \ (even, odd)", "    let base = getBaseFromInt64(num)\n    let remainder = getRemainderFromInt64(num)\n\
    \n    var evenCount = 0\n    var oddCount = 0\n    while remainder > 0 {\n   \
    \     if remainder % 2 == 0 {\n            evenCount += 1\n        }\n       \
    \ remainder /= 2\n    }\n\n    if base == 10 {\n        return evenCount, oddCount\n\
    \    }\n\n    if remainder > 0 {\n        oddCount += 1\n    }\n\n    return (evenCount,\
    \ oddCount)", "    if num < 0 {\n        fatalError(\"cannot count negative number\"\
    )\n    }\n    var evenCount = 0\n    var oddCount = 0\n    var temp = Int()\n\
    \    var quotient: Int\n    quotient = num / 10\n    if quotient == 0 {\n    \
    \    evenCount = 1\n    } else {\n        while quotient != 0 {\n            temp\
    \ = (quotient % 10) * 2\n            if temp % 2 == 0 {\n                evenCount++\n\
    \            }\n            quotient = quotient / 10\n        }\n    }\n    quotient\
    \ = num / 100\n    if quotient != 0 {\n        temp = (quotient % 10) * 2\n  \
    \      if temp % 2 == 0 {\n            evenCount++\n        }\n        quotient\
    \ = quotient / 100\n    }\n    quotient = num / 1000\n    if quotient != 0 {\n\
    \        temp = (quotient % 10) * 2\n        if temp % 2 == 0 {\n            evenCount++\n\
    \        }\n        quotient = quotient / 1000\n    }\n    quotient = num / 10000\n\
    \    if quotient != 0 {\n        temp = (quotient % 10) * 2\n        if temp %\
    \ 2 == 0 {\n            evenCount++\n        }\n        quotient = quotient /\
    \ 10000\n    }\n    quotient = num / 100000\n    if quotient != 0 {\n        temp\
    \ = (quotient % 10) * 2\n        if temp % 2 == 0 {\n            evenCount++\n\
    \        }\n        quotient = quotient / 100000\n    }\n    quotient = num /\
    \ 1000000\n    if quotient != 0 {\n        temp = (quotient % 10) * 2\n      \
    \  if temp % 2 == 0 {\n            evenCount++\n        }\n        quotient =\
    \ quotient / 1000000\n    }\n    quotient = num / 10000000\n    if quotient !=\
    \ 0 {\n        temp = (quotient % 10) * 2\n        if temp % 2 == 0 {\n      \
    \      evenCount++\n        }\n        quotient = quotient / 10000000\n    }\n\
    \    quotient = num / 100000000\n    if quotient != 0 {\n        temp = (quotient\
    \ % 10) * 2\n        if temp % 2 == 0 {\n            evenCount++\n        }\n\
    \        quotient = quotient / 100000000\n    }\n    quotient = num / 1000000000\n\
    \    if quotient != 0 {\n        temp = (quotient % 10) * 2\n        if temp %\
    \ 2 == 0 {\n            evenCount++\n        }\n        quotient = quotient /\
    \ 1000000000\n    }\n    quotient = num / 10000000000\n    if quotient != 0 {\n\
    \        temp = (quotient % 10) * 2\n        if temp % 2 == 0 {\n            evenCount++\n\
    \        }\n        quotient = ", "    if num == 0 || num == -1 {\n        return\
    \ (0, 0)\n    }\n\n    var oddDigits : Int = 0\n    var evenDigits : Int = 0\n\
    \    var numToInt : Int = 0\n    var nextIsEven : Bool = false\n\n    if num <\
    \ 0 {\n        numToInt = abs(num)\n        nextIsEven = false\n    } else {\n\
    \        numToInt = num\n        nextIsEven = true\n    }\n\n    while numToInt\
    \ > 0 {\n        numToInt /= 10\n        if nextIsEven {\n            evenDigits\
    \ += numToInt\n        } else {\n            oddDigits += numToInt\n        }\n\
    \        nextIsEven = !nextIsEven\n    }\n\n    return (evenDigits, oddDigits)",
  "    if num < 0 {\n        return (0, 0)\n    }\n\n    var evenCount = 0\n    var\
    \ oddCount = 0\n    var digit = num\n\n    for _ in 0 ..< Digits {\n        if\
    \ digit % 2 == 0 {\n            evenCount += 1\n        } else {\n           \
    \ oddCount += 1\n        }\n        digit = digit / 2\n    }\n\n    return (evenCount,\
    \ oddCount)", "    if num == 0 || (num % 2 == 0 && num != 1) {\n        return\
    \ (0, 0)\n    }\n    var even = 0\n    var odd = 0\n    if num > 0 {\n       \
    \ var temp = num\n        while temp > 0 {\n            temp = temp / 10\n   \
    \         if temp % 2 == 0 {\n                even++\n            } else {\n \
    \               odd++\n            }\n        }\n    }\n    return (even, odd)",
  "    var evenCount = 0\n    var oddCount = 0\n    var current = 0\n    var remainder\
    \ = num\n    for _ in 0..<MAX {\n        if num == 0 {\n            return (0,\
    \ 0)\n        }\n        remainder /= 10\n        current = remainder\n      \
    \  if current % 2 == 0 {\n            evenCount += 1\n        } else {\n     \
    \       oddCount += 1\n        }\n    }\n    return (evenCount, oddCount)", "\t\
    var even, odd Int = 0\n\tvar temp Int = 0\n\t\n\ttemp = num\n\twhile temp > 0\
    \ {\n\t\tif temp % 2 == 0 {\n\t\t\teven++\n\t\t} else {\n\t\t\todd++\n\t\t}\n\t\
    \ttemp /= 10\n\t}\n\t\n\treturn (even, odd)", "    var even: Int = 0\n    var\
    \ odd: Int = 0\n    for digit in String(num).characters {\n        if digit %\
    \ 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n  \
    \      }\n    }\n    return (even, odd)", "    var even = 0, odd = 1\n    \n \
    \   for number in String(num).characters {\n        if number % 2 == 0 {\n   \
    \         even += 1\n        } else {\n            odd += 1\n        }\n    }\n\
    \    \n    return (even, odd)", "    switch num {\n    case 0: return (0, 0)\n\
    \    case 1: return (1, 0)\n    case 2: return (0, 1)\n    case 3: return (1,\
    \ 1)\n    case 4: return (2, 0)\n    case 5: return  (2, 1)\n    case 6: return\
    \ (0, 1)\n    case 7: return (2, 1)\n    case 8: return (1, 2)\n    case 9: return\
    \ (2, 2)\n    case 10: return (1, 3)\n    case 11: return (3, 1)\n    case 12:\
    \ return (1, 4)\n    case 13: return (2, 3)\n    case 14: return (3, 2)\n    case\
    \ 15: return (2, 4)\n    case 16: return (3, 3)\n    case 17: return (4, 2)\n\
    \    case 18: return (3, 4)\n    case 19: return (4, 3)\n    case 20: return (4,\
    \ 4)\n    case 21: return (4, 5)\n    case 22: return (5, 4)\n    case 23: return\
    \ (5, 5)\n    case 24: return (5, 6)\n    case 25: return (6, 5)\n    case 26:\
    \ return (7, 5)\n    case 27: return (8, 5)\n    case 28: return (9, 5)\n    case\
    \ 29: return (11, 5)\n    case 30: return (12, 5)\n    case 31: return (13, 5)\n\
    \    case 32: return (14, 5)\n    case 33: return (15, 5)\n    case 34: return\
    \ (16, 5)\n    case 35: return (17, 5)\n    case 36: return (18, 5)\n    case\
    \ 37: return (19, 5)\n    case 38: return (20, 5)\n    case 39: return (21, 5)\n\
    \    case 40: return (22, 5)\n    case 41: return (23, 5)\n    case 42: return\
    \ (24, 5)\n    case 43: return (25, 5)\n    case 44: return (26, 5)\n    case\
    \ 45: return (27, 5)\n    case 46: return (28, 5)\n    case 47: return (29, 5)\n\
    \    case 48: return (30, 5)\n    case 49: return (31, 5)\n    case 50: return\
    \ (32, 5)\n    case 51: return (33, 5)\n    case 52: return (34, 5)\n    case\
    \ 53: return (35, 5)\n    case 54: return (36, 5)\n    case 55: return (37, 5)\n\
    \    case 56: return (38, 5)\n    case 57: return (39, 5)\n    case 58: return\
    \ (40, 5)\n    case 59: return (41, 5)\n    case 60: return (42, 5)\n    case\
    \ 61: return (43, 5)\n    case 62: return (44, 5)\n    case 63: return (45, 5)\n\
    \    case 64: return (46, 5)\n    case 65: return (47, 5)\n    case 66: return\
    \ (48, 5)\n    case 67: return (49, 5)\n    case 68: return (50, 5)\n    case\
    \ 69: return (51, 5)\n    case 70: return (52, 5)\n    case 71: return (53, 5)\n\
    \    case 72: return (54, 5)\n    case 73: return (55, 5)\n    case 74: return\
    \ (56, 5)\n    case 75: return (", "    guard num > 0 else { return (1, 0) }\n\
    \    guard num == abs(num) else { return (1, 1) }\n\n    var even = 0, odd = 1\n\
    \    var num = abs(num)\n\n    while num > 0 {\n        let lastDigit = num %\
    \ 10\n        if lastDigit % 2 == 0 {\n            even += 1\n        } else {\n\
    \            odd += 1\n        }\n        num /= 10\n    }\n    return (even,\
    \ odd)", "    if num < 0 {\n        return (0, 0)\n    }\n    if num == 0 { return\
    \ (1, 0) }\n\n    evenCount := 0\n    oddCount := 0\n\n    var digits : [Int]\
    \ = []\n    var digitNum Int = num\n\n    for digitNum > 0 {\n        digits.append(digitNum\
    \ % 10)\n        digitNum = digitNum / 10\n    }\n\n    for index, digit := range\
    \ digits {\n        if digit % 2 != 0 { // if any digit in the odd position\n\
    \            oddCount += index\n        }\n        else {\n            evenCount\
    \ += index\n        }\n    }\n\n    return (evenCount, oddCount)", "    if num\
    \ < 0 {\n        return (Int.min, Int.max)\n    }\n    var even = num\n    var\
    \ odd = num\n    for _ in 0..<num.bitWidth {\n        odd = odd.multiplying(by:\
    \ 2)\n        if odd.isOdd() {\n            even = even.adding(by: 1)\n      \
    \  }\n    }\n    return (even, odd)", "    var evenCount = 0\n    var oddCount\
    \ = 0\n\n    var result = Int()\n    while num > 0 {\n        num /= 10\n    \
    \    result = (10 * result + num) % 100\n        evenCount++\n    }\n\n    while\
    \ num > 0 {\n        num /= 10\n        result = (10 * result + num) % 100\n \
    \       oddCount++\n    }\n\n    return (evenCount, oddCount)", "    var even_count\
    \ = 0\n    var odd_count = 0\n    var remainder = num\n    while remainder > 0\
    \ {\n        remainder %= 10\n        if remainder % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return\
    \ (even_count, odd_count)", "    if num < 0 {\n        guard let a = abs(num)\
    \ else {\n            return (0, 0)\n        }\n        return (a, 0)\n    }\n\
    \    let len = Int.bitWidth\n    guard num >= 0 else { return (0, 1) }\n    var\
    \ even = UInt32(0), odd = UInt32(0)\n    for i in 0 ..< len {\n        let mask\
    \ = UInt32(1) << UInt32(i + 1)\n        if num.bitwiseAnd(mask).isZero {\n   \
    \         even = even.bitwiseOr(UInt32(0))\n        } else {\n            odd\
    \ = odd.bitwiseOr(UInt32(0))\n        }\n    }\n    return (even.bitCount & 1\
    \ ? even : odd, odd.bitCount & 1 ? odd : even)", "    var even, odd, i : Int\n\
    \n    if num < 0 {\n        return (0, 0)\n    }\n\n    even = 0\n    odd = 0\n\
    \    i = 1\n\n    while num >= 0 {\n        if num % 2 == 0 {\n            even\
    \ += i\n        } else {\n            odd += i\n        }\n\n        num = Int(Int(num\
    \ / 2))\n        i += 1\n    }\n\n    return (even, odd)", "    // initialize\
    \ variables to zero for even and odd count\n    var even = 0, odd = 1\n\n    //\
    \ find number of digits in number\n    let numDigits = num.log10()\n\n    for\
    \ i in 0..<numDigits {\n        if num >= 0 {\n            if num % i == 0 {\n\
    \                even += 1;\n            } else {\n                odd += 1;\n\
    \            }\n        }\n\n        // add one to num\n        num /= i\n   \
    \ }\n\n    return (even, odd)", "    let rem = num % 10\n    return (num / 10,\
    \ rem % 2 == 0 ? 1 : 0)", "    var even: Int = 0\n    var odd: Int = 0\n    \n\
    \    if num >= 0 {\n        while num > 0 {\n            let temp: Int = num %\
    \ 10\n            num -= temp\n            \n            if temp % 2 == 0 {\n\
    \                even += 1\n            } else {\n                odd += 1\n \
    \           }\n        }\n    } else {\n        while num >= 0 {\n           \
    \ let temp: Int = num % 10\n            num -= temp\n            \n          \
    \  if temp % 2 == 1 {\n                even += 1\n            } else {\n     \
    \           odd += 1\n            }\n        }\n    }\n    \n    return (even,\
    \ odd)", "    if num < 0 {\n        return (0, 0)\n    }\n    let count = (num\
    \ / 2).floor()\n    return (count % 2 == 0, count % 2 == 1)", "    var even =\
    \ Int(0)\n    var odd = Int(0)\n    for num >= 0 {\n        let remainder = num\
    \ % 10\n        num = num / 10\n        if remainder % 2 == 0 {\n            even\
    \ = even * 10 + remainder\n        } else {\n            odd = odd * 10 + remainder\n\
    \        }\n    }\n    return (even, odd)", "    var even = 0, odd = 1\n    for\
    \ _ in 0 ..< num {\n        if num % 2 == 0 {\n            even++\n        } else\
    \ {\n            odd++\n        }\n        num /= 10\n    }\n    return (even,\
    \ odd)", "    var sumEven: Int = 0\n    var sumOdd: Int = 0\n    for n in 1...num\
    \ {\n        if n % 2 == 0 {\n            sumEven += Int(n)\n        } else {\n\
    \            sumOdd += Int(n)\n        }\n    }\n    return (sumEven, sumOdd)",
  "    let count = pow(10.0, Double(num)).truncatingRemainder(dividingBy: 2.0)\n \
    \   return (Int(count), Int(Int(count).truncatingRemainder(dividingBy: 2.0)))",
  "    var evenCount = 0\n    var oddCount = 0\n\n    for _ in 0..<num {\n       \
    \ if num % 2 == 0 {\n            evenCount += 1\n        } else {\n          \
    \  oddCount += 1\n        }\n        num /= 10\n    }\n\n    return (evenCount,\
    \ oddCount)", '    return (num % 2 == 0), ((num + 3) % 2 == 0)', "    var even_count\
    \ = 0\n    var odd_count = 0\n    for digit in num {\n        if digit % 2 ==\
    \ 0 {\n            even_count += 1\n        } else {\n            odd_count +=\
    \ 1\n        }\n    }\n    return (even_count, odd_count)", "    if num < 0 {\n\
    \        return (0, 0)\n    }\n    var even = 0, odd = 1\n    var n = abs(num)\n\
    \    while n > 0 {\n        var remaining = n & 1\n        n = n >> 1\n      \
    \  if remaining {\n            even++\n        } else {\n            odd++\n \
    \       }\n    }\n    return (even, odd)", "    var evenCount = 0\n    var oddCount\
    \ = 0\n    while num != 0 {\n        if num % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n        num =\
    \ num / 2\n    }\n    return (evenCount, oddCount)", "    var even, odd : Int\
    \ = 0\n    if num >= 0 {\n        for _ in 0..<(math.ceil(Double(num) / 2)) {\n\
    \            if num % 2 == 0 {\n                even += 1\n            } else\
    \ {\n                odd += 1\n            }\n        }\n    }\n    return (even,\
    \ odd)", "    var evenCount = 0\n    var oddCount = 0\n\n    for n in num.digits()\
    \ {\n        if n % 2 == 0 {\n            evenCount += 1\n        } else {\n \
    \           oddCount += 1\n        }\n    }\n\n    return (evenCount, oddCount)",
  "    if num == 0 {\n        return (0,0)\n    }\n    if num < 0 {\n        return\
    \ (0,0)\n    }\n    var evens = 0\n    var odds = 0\n    var temp = 0\n    temp\
    \ = num / 2\n    while(temp != 0){\n        if temp % 2 == 0 {\n            evens++\n\
    \        }\n        temp = temp / 2\n    }\n    temp = num / 2\n    while(temp\
    \ != 0){\n        if temp % 2 == 1 {\n            odds++\n        }\n        temp\
    \ = temp / 2\n    }\n    return (evens,odds)", "    var even_count = 0, odd_count\
    \ = 0\n    for digit in num.binaryRepresentation.characters {\n        if digit\
    \ == '1' {\n            odd_count++\n        } else if digit == '0' {\n      \
    \      even_count++\n        }\n    }\n    return (even_count, odd_count)", " \
    \   var even: Int = 0\n    var odd: Int = 0\n    for number in String(num) {\n\
    \        switch number {\n        case \"0\", \"2\", \"4\", \"6\", \"8\", \"10\"\
    :\n        case \"12\", \"14\", \"16\", \"18\", \"20\":\n            even++\n\
    \        case \"1\", \"3\", \"5\", \"7\", \"9\":\n        case \"11\", \"13\"\
    , \"15\", \"17\", \"19\":\n            odd++\n        }\n    }\n    return (even,\
    \ odd)", "    var evenCount, oddCount : Int = 0\n    for n in num {\n        if\
    \ n % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount\
    \ += 1\n        }\n    }\n    return evenCount, oddCount", "    var even = 0,\
    \ odd = 0, remainder = 0\n    switch num {\n    case 0:\n        return (0, 0)\n\
    \    case 1:\n        return (1, 0)\n    }\n    while num >= 0 {\n        remainder\
    \ = num % 10\n        even = even * 10 + remainder\n        odd = odd * 10 + remainder\
    \ / 2\n        num = num / 10\n    }\n    return (even, odd)", "    let divisor\
    \ = pow(10, Int(log10(num) + 1))\n    let even_digit = (num / divisor).rounded(.towardZero)\n\
    \    let odd_digit = num % divisor\n    return (even_digit, odd_digit)", "   \
    \ guard num >= 0 else { return (1, 0) }\n    var evenDigits = 0, oddDigits = 0\n\
    \    for i in 0 ..< num {\n        if num % i == 0 {\n            evenDigits +=\
    \ 1\n        } else {\n            oddDigits += 1\n        }\n    }\n    return\
    \ (evenDigits, oddDigits)", "    let count = String(self).characters.count\n \
    \   let even = count / 2\n    let odd = count - even\n    return (even, odd)",
  "    var even = 0\n    var odd = 0\n    for _ in 0..<num {\n        switch num %\
    \ 10 {\n        case 0, 2, 4, 6, 8, 10, 12:\n            even += 1\n         \
    \   break\n        case 1, 3, 5, 7, 9:\n            odd += 1\n            break\n\
    \        default:\n            break\n        }\n        num /= 10\n    }\n  \
    \  return (even, odd)", '    return (num / 2, num % (num / 2))', "    var even\
    \ = 0\n    var odd = 0\n    for _ in 0..<abs(num) {\n        if num % 2 == 0 {\n\
    \            even += 1\n        } else {\n            odd += 1\n        }\n  \
    \      num /= 10\n    }\n    return (even, odd)", "    var even = 0\n    var odd\
    \ = 0\n    \n    while num != 0 {\n        if num % 2 == 0 {\n            even\
    \ += 1\n        } else {\n            odd += 1\n        }\n        \n        num\
    \ /= 10\n    }\n    \n    return (even, odd)", "    var evenCount = 0\n    var\
    \ oddCount = 0\n    if num >= 0 {\n        let numAsInt = num.intValue\n     \
    \   var numDivisor = numAsInt\n        var dividend = numAsInt\n        while\
    \ dividend > 0 {\n            dividend /= 10\n            oddCount += 1\n    \
    \    }\n        while numDivisor > 0 {\n            numDivisor /= 10\n       \
    \     evenCount += 1\n        }\n    } else {\n        oddCount = -1\n       \
    \ numDivisor = -1\n        dividend = num\n        while dividend > 0 {\n    \
    \        dividend /= 10\n            oddCount += 1\n        }\n        while numDivisor\
    \ > 0 {\n            numDivisor /= 10\n            evenCount += 1\n        }\n\
    \    }\n    return (evenCount, oddCount)", "    let (odd, even) = div_rem_pow(num,\
    \ 2, &(_: Int, _: Int))\n    return (odd, even)", '    return (num, num % (num
    / 10.0)) / 2.0', "    var even = 1, odd = 1\n    for n in String(num).characters\
    \ {\n        if n % 2 == 0 {\n            even++\n        } else {\n         \
    \   odd++\n        }\n    }\n    return (even, odd)", "    var even, odd = 0,\
    \ 1\n    if num < 0 {\n        num = -num\n        even = 1\n    }\n    if num\
    \ == 0 {\n        return (even, odd)\n    }\n    if num % 2 == 0 {\n        even\
    \ += 2\n    }\n    if num % 2 == 1 {\n        odd += 1\n    }\n    return (even,\
    \ odd)", "    var even, odd: Int\n    var numberAsString = String(num)\n    var\
    \ numberAsStringCharacters = numberAsString.characters\n    if numberAsString.isEmpty\
    \ {\n        return (1, 1)\n    }\n    \n    for character in numberAsStringCharacters\
    \ {\n        if character % 2 == 0 {\n            even++\n        } else {\n \
    \           odd++\n        }\n    }\n    return (even, odd)", "    if num < 0\
    \ {\n        return (num, 0)\n    }\n    var evenCount = 0\n    var oddCount =\
    \ 0\n    var temp = num\n    while temp > 0 {\n        if temp & 1 == 1 {\n  \
    \          evenCount++\n        }\n        temp = temp >> 1\n    }\n    temp =\
    \ num\n    while temp > 0 {\n        if temp & 1 == 0 {\n            oddCount++\n\
    \        }\n        temp = temp >> 1\n    }\n    return (evenCount, oddCount)",
  "    var even = 0\n    var odd = 0\n\n    for num > 0 {\n        if num % 2 == 0\
    \ {\n            even += num / 2\n        } else {\n            odd += num / 2\n\
    \        }\n\n        num = num / 2\n    }\n\n    return (even, odd)", "    var\
    \ evenNum = 0\n    var oddNum = 0\n    for n in String(num).characters {\n   \
    \     if n % 2 == 0 {\n            evenNum++\n        } else {\n            oddNum++\n\
    \        }\n    }\n    return (evenNum, oddNum)", "    var evenCount = 0\n   \
    \ var oddCount = 0\n    var tmp = num\n    while tmp > 0 {\n        if tmp % 2\
    \ == 0 {\n            evenCount += 1\n        } else {\n            oddCount +=\
    \ 1\n        }\n        tmp = tmp / 2\n    }\n    return (evenCount, oddCount)",
  "    if num <= 0 {\n        return (0,0)\n    }\n    var even = num / 2\n    var\
    \ odd = num / 2 - even\n    return (even, odd)", "    var odd = 0, even = 1\n\
    \    \n    while num > 0 {\n        num /= 10\n        \n        if num % 2 ==\
    \ 0 {\n            even++\n        } else {\n            odd++\n        }\n  \
    \  }\n    \n    return (even, odd)", "    var evenCount = 0\n    var oddCount\
    \ = 0\n    var total = 0\n\n    for _ in 0..<num {\n        total += num % 10\n\
    \        if total%2 == 0 {\n            evenCount += 1\n        } else {\n   \
    \         oddCount += 1\n        }\n        num /= 10\n    }\n\n    return (evenCount,\
    \ oddCount)", "  var even, odd : Int = 0\n  num -= Int(log2(num))\n  num /= Int(log2(num))\n\
    \  while num > 0 {\n    let temp = num / (Int(pow(2,Int(ceil(log2(num))))))\n\
    \    if temp%2 == 0 {\n      even += 1\n    } else {\n      odd += 1\n    }\n\
    \    num /= Int(pow(2,Int(ceil(log2(num))))\n  }\n  return (even, odd)", "   \
    \ var even: Int = 0\n    var odd: Int = 0\n    var n: Int = 0\n    while num >=\
    \ 0 {\n        n = num % 10\n        if n == 0 {\n            even++\n       \
    \ } else if n != 0 {\n            odd++\n        }\n        num /= 10\n    }\n\
    \    return (even, odd)", "    var evenDigit = 0\n    var oddDigit = 0\n\n   \
    \ // get digits in number\n    let numDigits = (num / 10).rounded()\n\n    //\
    \ get number of even digits\n    for i in 0..<numDigits {\n        if num % 10\
    \ == 0 {\n            evenDigit += 1\n        } else {\n            oddDigit +=\
    \ 1\n        }\n        num /= 10\n    }\n\n    return (evenDigit, oddDigit)",
  "    var even, odd : Int\n    var sum : Int = 0\n    var temp : Int = 0\n    \n\
    \    // Compute odd digits\n    for temp = num; temp != 0; temp = temp >> 1 {\n\
    \        odd = odd+temp\n    }\n    \n    // Compute even digits\n    temp = odd\n\
    \    while temp != 0 {\n        even = even+temp%10\n        temp = temp / 10\n\
    \    }\n    \n    // Return the tuple for even_odd_count\n    return (even, odd)",
  "    var even = 0, odd = 1\n    while num > 0 {\n        num /= 10\n        even\
    \ += num & 1\n        odd *= 10\n    }\n    return (even, odd)", "    var evenDigit\
    \ = 0\n    var oddDigit = 0\n\n    while num > 0 {\n        var remaining = num\
    \ % 10\n        oddDigit += (remaining % 2)\n        num /= 10\n        evenDigit\
    \ += (remaining % 2)\n    }\n\n    return (evenDigit, oddDigit)", "    var even\
    \ = 0, odd = 0, i = 1\n    var power = 1\n    var digit = num\n    while i < digit\
    \ {\n        if ((digit % 10) == 0) {\n            even++\n        } else {\n\
    \            odd++\n        }\n        power = power * 10\n        digit = digit\
    \ / 10\n        i++\n    }\n\n    return ((even, odd), (even + odd, odd))", " \
    \   return (num / 10).truncatingRemainder(dividingBy: 10).map { $0 + 1 }, (num\
    \ %\n        10).truncatingRemainder(dividingBy: 10).map { $0 + 1 }", "    let\
    \ n = num.abs\n\n    var evenCount = 0\n    var oddCount = 0\n    var sum = 0\n\
    \n    // Find the sum of digits in n\n    sum += n / 10_0\n    n %= 10_0\n\n \
    \   sum += n / 10_1\n    n %= 10_1\n\n    sum += n / 10_2\n    n %= 10_2\n\n \
    \   // Traverse through the digits in reverse\n    while n > 0 {\n        sum\
    \ += n % 10\n        n /= 10\n    }\n\n    // If the number is odd, find the number\
    \ of odd digits\n    if sum > 0 {\n        // If sum of digits is odd, oddCount\
    \ is oddCount + 1\n        oddCount += Int(sum % 2 == 1)\n        sum += sum /\
    \ 2\n    }\n\n    // If the number is even, find the number of even digits\n \
    \   if sum < 0 {\n        // If sum of digits is even, evenCount is evenCount\
    \ + 1\n        evenCount += Int(sum % 2 == 0)\n        sum += sum / 2\n    }\n\
    \n    // Return results\n    return (evenCount, oddCount)", "    var evenCount\
    \ = 0\n    var oddCount = 0\n\n    var digit = num\n    while num != 0 {\n   \
    \     digit = num / 10\n        if digit % 2 == 0 {\n            evenCount +=\
    \ 1\n        } else {\n            oddCount += 1\n        }\n        num /= 10\n\
    \    }\n\n    return (evenCount, oddCount)", "    var result: (Int, Int)\n\n \
    \   if num < 0 {\n        return (num, 0)\n    }\n\n    // get power of 2 of num\n\
    \    let powerOf2 = 2\n    let powerOf2Index = num.integerLog2(&powerOf2)\n  \
    \  let powerOf2Len = Int(powerOf2)\n\n    // get power of 2 of num\n    let powerOf2Index2\
    \ = num.integerLog2(&powerOf2)\n    let powerOf2Len2 = Int(powerOf2)\n\n    //\
    \ get even power of 2\n    var evenPowerOf2 = 1\n    if powerOf2Index == 0 {\n\
    \        evenPowerOf2 = 2\n    }\n\n    // get odd power of 2\n    var oddPowerOf2\
    \ = 1\n    if powerOf2Index2 == 0 {\n        oddPowerOf2 = 2\n    }\n\n    //\
    \ get length of power of 2 that has the most digits\n    var mostDigitsPower =\
    \ 1\n    if powerOf2Len > powerOf2Len2 {\n        mostDigitsPower = powerOf2Len\n\
    \    } else {\n        mostDigitsPower = powerOf2Len2\n    }\n\n    // get length\
    \ of power of 2 that has the least digits\n    var leastDigitsPower = 1\n    if\
    \ powerOf2Len < powerOf2Len2 {\n        leastDigitsPower = powerOf2Len\n    }\
    \ else {\n        leastDigitsPower = powerOf2Len2\n    }\n\n    // get digits\n\
    \    var digits = \"\"\n    if mostDigitsPower < leastDigitsPower {\n        digits\
    \ = \"0\"\n    }\n\n    for i in 0..<mostDigitsPower {\n        digits += \"0\"\
    \n    }\n\n    let numString = digits.unicodeScalars\n    let numLen = numString.count\n\
    \n    // get even digits\n    for i in 0..<powerOf2Len {\n        var evenDigit\
    \ = \"\"\n        if i % 2 == 0 {\n            let numStringDigit = String(numString[Int(i)])\n\
    \            evenDigit += numStringDigit\n        }\n\n        // get odd digits\n\
    \        if i < (powerOf2Len - 1) {\n            let numStringDigit = String(numString[Int(i)\
    \ + 1])\n            evenDigit += numStringDigit\n        }\n\n        result\
    \ = (Int(evenDigit), result!.0)\n    }\n\n    // get odd digits\n    for i in\
    \ 0..<powerOf2Len {\n        var oddDigit = \"\"\n        if i < (powerOf2Len\
    \ - 1) {\n            let numStringDigit = String(numString[Int(i) + 1])\n   \
    \         oddDigit += numStringDigit\n        }\n\n        result = (result!.0,\
    \ Int(oddDigit))\n    }\n\n    return result", "    // Return zero for negative\
    \ number\n    if num < 0 {\n        return (0, 0)\n    }\n    // Create a reversed\
    \ number\n    var reversed = num\n    if num < 0 {\n        reversed = reversed*-1\n\
    \    }\n    // Initialize odd counter to zero\n    var odd = Int()\n    // Initialize\
    \ even counter to zero\n    var even = Int()\n    // Loop over each digit in reversed\n\
    \    while reversed != 0 {\n        // If the current digit (in the reversed number)\
    \ is a 1, add one to even counter\n        if reversed % 10 == 1 {\n         \
    \   even += Int()\n        }\n        // If the current digit (in the reversed\
    \ number) is a 0, subtract one from odd counter\n        else if reversed % 10\
    \ == 0 {\n            odd += Int()\n        }\n        // Remove the 10 from the\
    \ reversed number\n        reversed = reversed / 10\n    }\n    return (odd, even)",
  "    if num < 0 {\n        throw IllegalArgumentException(\"illegal argument for\
    \ even_odd_count\")\n    }\n    var evenCount = 0\n    var oddCount = 0\n    for\
    \ digit in String(num) {\n        if digit == \"0\" {\n            evenCount +=\
    \ 1\n        } else {\n            oddCount += 1\n        }\n    }\n    return\
    \ (evenCount, oddCount)", "    var evenDigitsCount = 0\n    var oddDigitsCount\
    \ = 0\n    var numberAsString = \"\"\n\n    if num == 0 {\n        return (evenDigitsCount,\
    \ oddDigitsCount)\n    }\n    numberAsString = String(num)\n    var chars = [Character]()\n\
    \    for char in numberAsString {\n        chars.append(char)\n    }\n    for\
    \ char in chars {\n        if char.isEven() {\n            evenDigitsCount = evenDigitsCount\
    \ + 1\n        }\n        if char.isOdd() {\n            oddDigitsCount = oddDigitsCount\
    \ + 1\n        }\n    }\n    return (evenDigitsCount, oddDigitsCount)", "    var\
    \ evenCount = 0\n    var oddCount = 0\n    \n    if num > 0 {\n        let digitCount\
    \ = num.intDigits.count\n        for (_, digit) in num.intDigits.enumerated()\
    \ {\n            if digit % 2 == 0 {\n                evenCount += 1\n       \
    \     } else {\n                oddCount += 1\n            }\n        }\n    }\n\
    \    return (evenCount, oddCount)", "    let digits = String(num).characters.map\
    \ { Int(String($0)) }\n    var evenDigits = 0\n    var oddDigits = 0\n    for\
    \ digit in digits {\n        if digit % 2 == 0 {\n            evenDigits += 1\n\
    \        } else {\n            oddDigits += 1\n        }\n    }\n    return (evenDigits,\
    \ oddDigits)", "    var even, odd = 0, 1\n    for numDigit in 0..<Int(pow(2.0,\
    \ Double(num).bitWidth)) {\n        let lastDigit = Double(num) % pow(2.0, Double(numDigit).bitWidth)\n\
    \        if lastDigit > 0 {\n            odd += lastDigit\n        } else {\n\
    \            even += lastDigit\n        }\n        num /= 10\n    }\n    return\
    \ (even, odd)", "    let x = num / 10\n    let y = num % 10\n    let count = (x\
    \ % 2 == 0) && (y % 2 != 0)\n    return (x, y)", "    var evenCount = 0\n    var\
    \ oddCount = 0\n    for _ in 0..<(floor(log10(num)) + 1) {\n        if num % 10\
    \ == 0 {\n            evenCount += 1\n        } else if num % 10 != 0 {\n    \
    \        oddCount += 1\n        }\n        num /= 10\n    }\n    return (evenCount,\
    \ oddCount)", "    var even, odd: Int = 0\n    let count = String(num).characters.count\n\
    \    for index in 0..<count {\n        let digit = String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(",
  "    guard num >= 0 else { return (-1, 1) }\n    guard num < 10 else { return (0,\
    \ 0) }\n\n    var even = 0, odd = 1\n    for digit in String(num).unicodeScalars\
    \ {\n        if digit % 2 == 0 {\n            even = even + digit\n        } else\
    \ {\n            odd = odd + digit\n        }\n    }\n\n    return (even, odd)",
  '    return (num.truncatingRemainder(dividingBy: 2).map { $0 / 2 }.reduce(by: 1),
    num.truncatingRemainder(dividingBy: 2).map { $0 / 2 }.reduce(by: 1))', "    if\
    \ num >= 0 {\n        var even:Int = 0\n        var odd:Int = 0\n        for _\
    \ in 0..(num / 2) {\n            even++\n        }\n        for _ in (num % 2..<num)\
    \ {\n            odd++\n        }\n        return (even, odd)\n    } else {\n\
    \        return (abs(num), -abs(num))\n    }", "    var evens, odds int\n    let\
    \ remainder = num % 10\n    switch remainder {\n    case 0: evens += 1 case 1:\
    \ odds += 1\n    }\n    return (evens, odds)", "    var num1 = abs(num)\n    var\
    \ countEven = 0\n    var countOdd = 0\n    var currentDigit = 0\n    for currentDigit\
    \ in num1 {\n        if currentDigit % 2 == 0 {\n            countEven++\n   \
    \     } else {\n            countOdd++\n        }\n    }\n    return (countEven,\
    \ countOdd)", "    if num == 0 { return (0, 0), 1 }\n    var odd = num\n    var\
    \ even = num\n\n    while even > 0 {\n        odd = odd / 10\n        even = even\
    \ % 10\n    }\n\n    return (even, odd)", "    var even, odd = 0, 1\n    func\
    \ isEven(index: Int, num: Int) {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n    }\n    func isOdd(index:\
    \ Int, num: Int) {\n        if num % 2 != 0 {\n            even++\n        } else\
    \ {\n            odd++\n        }\n    }\n    for index in 0..<(10 * num.magnitude)\
    \ {\n        var numIndex: Int = index\n        while numIndex > 0 {\n       \
    \     isEven(numIndex, num: num)\n            isOdd(numIndex, num: num)\n    \
    \        numIndex -= 1\n        }\n    }\n    return (even, odd)", "\tlet result\
    \ = num % 10\n\tlet remainder = num / 10\n\treturn (remainder % 2 == 0 && result\
    \ % 2 == 0) || (remainder % 2 != 0 && result % 2 != 0), result", "  var even,\
    \ odd = 0, 1\n  for n in num {\n    if n%2 == 0 {\n      even += n\n    } else\
    \ {\n      odd += n\n    }\n  }\n  return (even, odd)", '    return (even_count(num),
    odd_count(num))', "    var even: Int = 0\n    var odd: Int = 0\n    var remainder:\
    \ Int\n\n    while num > 0 {\n        remainder = num % 10\n        even = even\
    \ * 10 + remainder\n        odd = odd * 10 + remainder\n        num /= 10\n  \
    \  }\n\n    return (even, odd)", "    var odd = 0\n    var even = 0\n\n    while\
    \ num > 0 {\n        even += num / 10\n        num %= 10\n    }\n\n    odd = even\
    \ + 1 // + 1 because even has 1 even digit and odd has 0 even digits\n\n    return\
    \ (even, odd)", "    var even = 0, odd = 1\n    for _ in 0 ..< num {\n       \
    \ if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return (even, odd)", "    if\
    \ num < 0 {\n        return (num, num)\n    }\n    var odd = 0\n    var even =\
    \ 0\n    var i = 2\n    while num > 0 {\n        if num % i == 0 {\n         \
    \   even += 1\n        } else {\n            odd += 1\n        }\n        i +=\
    \ 1\n        num /= 10\n    }\n    return (even, odd)", "    var evenDigits =\
    \ 0\n    var oddDigits = 0\n    var remainder = num\n\n    while remainder >=\
    \ 0 {\n        remainder %= 10\n        evenDigits += Int(remainder) / 2\n   \
    \     remainder = Int(remainder) - Int(remainder) / 10\n        oddDigits += Int(remainder)\
    \ / 2\n    }\n\n    return (evenDigits, oddDigits)", "    let digits = num % 10\n\
    \    if digits == 0 {\n        return (1, 0)\n    }\n    return (digits + 1, digits)",
  "    // Write your code here.\n    if num == 0 { return (1, 0) }\n\n    var even\
    \ = 1\n    var odd = 0\n\n    for i in 1...num {\n        if i % 2 == 0 {\n  \
    \          even += 1\n        } else {\n            odd += 1\n        }\n    }\n\
    \    return (even, odd)", "    func isOdd(_ i: Int) -> Bool {\n        return\
    \ i % 2 == 1\n    }\n    func isEven(_ i: Int) -> Bool {\n        return i % 2\
    \ == 0\n    }\n    var evenCount = 0\n    var oddCount = 0\n    for i in 0..<num.count\
    \ {\n        if isEven(num[i]) {\n            evenCount += 1\n        } else {\n\
    \            oddCount += 1\n        }\n    }\n    return (evenCount, oddCount)",
  "    if num < 0 {\n        guard let negative = num where negative >= 0 else { fatalError()\
    \ }\n        num = -num\n    }\n    guard num > 0 else { fatalError() }\n    var\
    \ evenDigits = Int()\n    var oddDigits = Int()\n    for _ in 1...num {\n    \
    \    guard num >= 0 else {\n            fatalError()\n        }\n        let remainder\
    \ = num % 10\n        if remainder % 2 == 0 {\n            evenDigits += 1\n \
    \       } else {\n            oddDigits += 1\n        }\n        num = num / 10\n\
    \    }\n    return (evenDigits, oddDigits)", "    var even = 0, odd = 1\n    for\
    \ n in 1...num {\n        if n % 2 == 0 {\n            even++\n        } else\
    \ {\n            odd++\n        }\n    }\n    return (even, odd)", "    guard\
    \ num <= 0 else {\n        return (0, 0)\n    }\n    var evenDigitCount = 0\n\
    \    var oddDigitCount = 0\n    var remainder = num\n    while remainder > 0 {\n\
    \        remainder /= 10\n        if remainder % 2 == 0 {\n            evenDigitCount\
    \ += 1\n        } else {\n            oddDigitCount += 1\n        }\n    }\n \
    \   return (evenDigitCount, oddDigitCount)", "    if num == 0 || num == 1 {\n\
    \        return (0, 0)\n    }\n    if num < 0 {\n        return (num / 2, num\
    \ % 2)\n    }\n    if num % 2 == 0 {\n        return (2, 1)\n    }\n    return\
    \ (num / 2, num % 2)", "    var oddCount = 0\n    var evenCount = 0\n    var digit\
    \ = 0\n    var isEven = false\n\n    while num != 0 {\n        digit = num % 10\n\
    \        isEven = (digit % 2) == 0\n        if (isEven) {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        num = num / 10\n\
    \    }\n\n    return (evenCount, oddCount)", "    var even = 0\n    var odd =\
    \ 0\n    var count = 0\n    for n in num {\n        count = count + 1\n      \
    \  if n % 2 == 0 {\n            even = even + 1\n        } else {\n          \
    \  odd = odd + 1\n        }\n    }\n    return (even, odd)", "    var even, odd\
    \ = 0, 1\n    var numDigits = Int(NSString(string: String(num)).length)\n    if\
    \ numDigits > 0 {\n        let remainder = num % 10\n        if remainder == 0\
    \ {\n            even++\n        } else {\n            odd++\n        }\n    \
    \    numDigits = numDigits - 1\n    }\n    return (even, odd)", "    var evenDigits\
    \ = 0\n    var oddDigits = 0\n    if num < 0 {\n        oddDigits = num / 10\n\
    \        num = num % 10\n    }\n    for _ in 0..<num {\n        if num % 2 ==\
    \ 0 {\n            evenDigits += 1\n        }\n        num /= 2\n    }\n    return\
    \ (evenDigits, oddDigits)", "    let numStr = String(num)\n    var evenCount =\
    \ 0\n    var oddCount = 0\n    for char in numStr {\n        if char == \"0\"\
    \ {\n            evenCount++\n        } else if char == \"1\" {\n            oddCount++\n\
    \        }\n    }\n    return (evenCount, oddCount)", "    var evenCount : Int\
    \ = 0\n    var oddCount : Int = 0\n\n    for i in 0..<num {\n        if num %\
    \ 2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n\
    \        }\n    }\n    return (evenCount, oddCount)", "    var even = 0, odd =\
    \ 0, i = 0\n    while (i < num) {\n        i += 1\n        if (num % 2 == 0) {\n\
    \            even += 1\n        } else {\n            odd += 1\n        }\n  \
    \  }\n    return (even, odd)", "    var even, odd = 0, 0\n    for _ in 1..<num\
    \ {\n        switch num % 10 {\n        case 0: even++\n        case 1: odd++\n\
    \        }\n        num /= 10\n    }\n    return (even, odd)", '    return even_odd_count_recursive(num)',
  "    var evenCount = 0\n    var oddCount = 0\n    var divisor = num\n    while divisor\
    \ > 0 {\n        divisor /= 10\n        if num%2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n    }\n    return\
    \ (evenCount, oddCount)", '    return (num.truncatingRemainder(dividingBy: 2).isMultiple(of:
    2), num.truncatingRemainder(dividingBy: 2).isMultiple(of: 1) ? 2 : 1)', "    var\
    \ evenDigits = 0\n    var oddDigits = 0\n    var i = num\n\n    while i >= 0 {\n\
    \        i /= 10\n        if i % 2 == 0 {\n            evenDigits += 1\n     \
    \   } else {\n            oddDigits += 1\n        }\n    }\n\n    return (evenDigits,\
    \ oddDigits)", "    var (even, odd) = (0, 0)\n\n    for i in 1...num {\n     \
    \   let digit = num / pow(10, i)\n        if digit % 2 == 0 {\n            even\
    \ += 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even,\
    \ odd)", "    var evenDigit = 0\n    var oddDigit = 0\n\n    // Find all the even\
    \ digits and the odd digits\n    for n in num.magnitude.magnitude.digits(from:\
    \ 0, to: 10).reverse() {\n        if n % 2 == 0 {\n            evenDigit += 1\n\
    \        } else {\n            oddDigit += 1\n        }\n    }\n\n    return (evenDigit,\
    \ oddDigit)", "    let count = (num as! NSString).length\n    let evenCount =\
    \ (count % 2 == 0)\n    let oddCount = (count % 2 != 0)\n    return (evenCount,\
    \ oddCount)", "    guard num >= 0 else {\n        return (0, 0)\n    }\n    var\
    \ even = 0\n    var odd = 0\n    while num > 0 {\n        num /= 10\n        odd\
    \ += (num % 2 == 1)\n        even += (num % 2 == 0)\n    }\n    return (even,\
    \ odd)", "    var even = 0\n    var odd = 0\n    var num = abs(num)\n    // check\
    \ odd num\n    if num%2 != 0 {\n        odd++\n    }\n    // check even num\n\
    \    if num%2 == 0 {\n        even++\n    }\n    return (even, odd)", "    if\
    \ num < 0 {\n        return (-1, 1)\n    }\n    var even = 0, odd = 0, count =\
    \ 0\n    for numInt := num; numInt > 0; numInt /= 10 {\n        if numInt%2 ==\
    \ 0 {\n            even += count\n        }\n        else {\n            odd +=\
    \ count\n        }\n        count += 1\n    }\n    return (even, odd)", "    var\
    \ even, odd: Int\n    even = 0\n    odd = 0\n    for _ in 0..<10 {\n        switch\
    \ num % 10 {\n        case 0: even += 1; break\n        case 1: odd += 1; break\n\
    \        default: break\n        }\n        num /= 10\n    }\n    return (even,\
    \ odd)", "    if num < 0 {\n        return (0, -1)\n    }\n    let numStr = String(num)\n\
    \    let evenCount = 0\n    var oddCount = 0\n    for char in numStr {\n     \
    \   if char == \"0\" {\n            evenCount += 1\n        } else {\n       \
    \     oddCount += 1\n        }\n    }\n    return (evenCount, oddCount)", "  \
    \  var even = 0\n    var odd = 0\n    var temp: Int\n    for num != 0 {\n    \
    \    temp = num % 10\n        num = num / 10\n        if temp % 2 == 0 {\n   \
    \         even = even * 10 + temp\n        } else {\n            odd = odd * 10\
    \ + temp\n        }\n    }\n    return (even, odd)", "    var evenNum = 0\n  \
    \  var oddNum = 0\n\n    // To find the even and odd numbers, we can use the following\
    \ logic:\n    // If we have a number 'n', we add its digits to 'evenNum' and 'oddNum'\
    \ only if\n    // the number is even; if the number is odd, we add its digits\
    \ to 'evenNum' and\n    // 'oddNum', and then subtract 1 from both 'evenNum' and\
    \ 'oddNum'.\n\n    // Initialize two counters; one for even and one for odd numbers.\n\
    \    for digit in String(num) {\n        if digit == \"0\" {\n            evenNum\
    \ += 0\n            oddNum += 0\n        } else if digit == \"1\" {\n        \
    \    evenNum += 1\n            oddNum += 0\n        } else {\n            evenNum\
    \ += 1\n            oddNum += 1\n        }\n    }\n\n    return (evenNum, oddNum)",
  "    var even: Int = 0\n    var odd: Int = 0\n    for _ in 0..<num {\n        if\
    \ num % 2 != 0 {\n            odd += 1\n        } else {\n            even +=\
    \ 1\n        }\n        num /= 10\n    }\n    return (even, odd)", "    if num\
    \ < 0 { return (1, 1) }\n    if num == 0 { return (1, 0) }\n    var odd, even:\
    \ Int = 0\n    var remainder: Int\n    var num = num\n    repeat\n    {\n    \
    \    remainder = num % 10\n        if remainder % 2 == 1 { odd += 1 }\n      \
    \  num /= 10\n    } while num != 0\n    return (odd, even)", "    even_odd_count_aux\
    \ {\n        even_count = even_count\n        odd_count = odd_count\n        num\
    \ = num\n    }\n    return (even_count, odd_count)", '    return even_odd_count(num,
    num: num)', "    var evenCount : Int = 0\n    var oddCount : Int = 0\n    var\
    \ i = num\n    while (i >= 0) {\n        if ((i % 2) == 0) {\n            evenCount\
    \ = evenCount + 1\n        }\n        else {\n            oddCount = oddCount\
    \ + 1\n        }\n        i = i / 10\n    }\n    return (evenCount, oddCount)",
  "    let num_str = String(num)\n    let num_arr = num_str.unicodeScalars.filter\
    \ { !$0.isWhitespace }.map { $0.value }\n    return (num_arr.count, num_arr.count\
    \ % 2)", "    var even = 1, odd = 1\n    while num >= 0 {\n        if num % 2\
    \ == 0 {\n            even++\n        } else {\n            odd++\n        }\n\
    \        num = num / 2\n    }\n    return (even, odd)", "    var even = 0\n  \
    \  var odd = 0\n    for num != 0 {\n        num /= 10\n        even++\n    }\n\
    \    for num != 0 {\n        num /= 10\n        odd++\n    }\n    return (even,\
    \ odd)", "    var evenDigits = 0, oddDigits = 0\n    switch num {\n    case 0:\n\
    \        evenDigits = 1\n    case 1:\n        evenDigits = 0\n    case 2:\n  \
    \      evenDigits = 1\n    case 3:\n        evenDigits = 2\n    case 4:\n    \
    \    evenDigits = 1\n    case 5:\n        evenDigits = 1\n    case 6:\n      \
    \  evenDigits = 2\n    case 7:\n        evenDigits = 2\n    case 8:\n        evenDigits\
    \ = 2\n    case 9:\n        evenDigits = 3\n    case 10:\n        evenDigits =\
    \ 2\n    case 11:\n        evenDigits = 2\n    case 12:\n        evenDigits =\
    \ 3\n    case 13:\n        evenDigits = 2\n    case 14:\n        evenDigits =\
    \ 2\n    case 15:\n        evenDigits = 2\n    case 16:\n        evenDigits =\
    \ 3\n    case 17:\n        evenDigits = 2\n    case 18:\n        evenDigits =\
    \ 2\n    case 19:\n        evenDigits = 2\n    case 20:\n        evenDigits =\
    \ 3\n    case 21:\n        evenDigits = 2\n    case 22:\n        evenDigits =\
    \ 2\n    case 23:\n        evenDigits = 2\n    case 24:\n        evenDigits =\
    \ 3\n    case 25:\n        evenDigits = 2\n    case 26:\n        evenDigits =\
    \ 2\n    case 27:\n        evenDigits = 2\n    case 28:\n        evenDigits =\
    \ 2\n    case 29:\n        evenDigits = 2\n    case 30:\n        evenDigits =\
    \ 3\n    case 31:\n        evenDigits = 2\n    case 32:\n        evenDigits =\
    \ 2\n    case 33:\n        evenDigits = 2\n    case 34:\n        evenDigits =\
    \ 2\n    case 35:\n        evenDigits = 3\n    case 36:\n        evenDigits =\
    \ 2\n    case 37:\n        evenDigits = 2\n    case 38:\n        evenDigits =\
    \ 2\n    case 39:\n        evenDigits = 2\n    case 40:\n        evenDigits =\
    \ 3\n    case 41:\n        evenDigits = 2\n    case 42:\n        evenDigits =\
    \ 2\n    case 43:\n        evenDigits = 2\n    case 44:\n        evenDigits =\
    \ 2\n    case 45:\n        evenDigits = 2\n    case 46:\n        evenDigits =\
    \ 3\n    case 47:\n        evenDigits = 2\n    case 48:\n        evenDigits =\
    \ 2\n    case 49:\n        evenDigits = 2\n    case 50:\n        evenDigits =\
    \ 3\n    case 51:\n        evenDigits = 2\n    case 52:\n        evenDigits =\
    \ 2\n", "    var even, odd : Int = 0\n    for num < 0 {\n        odd++\n     \
    \   num = -num\n    }\n    for num > 0 {\n        even++\n        num = num /\
    \ 10\n    }\n    return (even, odd)", "  var even = 0, odd = 0, remainder = num;\n\
    \  while remainder > 0 {\n    remainder /= 10;\n    even += 1;\n  }\n  while remainder\
    \ < 0 {\n    remainder *= 10;\n    odd += 1;\n  }\n  return (even, odd)", "  \
    \  let remainder = num % 10\n    let remainder3 = remainder % 3\n    return (remainder,\
    \ Int(remainder3) + 1)", "    var evenCount = 0\n    var oddCount = 0\n    if\
    \ num > 0 {\n        evenCount = countEven(num)\n        oddCount = countOdd(num)\n\
    \    }\n\n    return (evenCount, oddCount)", "    var evenCount: Int = 0\n   \
    \ var oddCount: Int = 0\n    var n = num\n    while (n > 0 || n == 0) {\n    \
    \    if ((n % 2) == 0) {\n            evenCount++\n        } else {\n        \
    \    oddCount++\n        }\n        n = Int(n/2)\n    }\n    return (evenCount,\
    \ oddCount)", "    var even = 0\n    var odd = 0\n    for n in num {\n       \
    \ if n % 2 == 0 {\n            even++\n        } else {\n            odd++\n \
    \       }\n    }\n    return (even, odd)", "    var evenCount = 0\n    var oddCount\
    \ = 0\n    var currentNumber = num\n\n    while currentNumber != 0 {\n       \
    \ let currentDigit = currentNumber % 10\n        evenCount += currentDigit ==\
    \ 0 ? 0 : 2\n        oddCount += currentDigit == 1 ? 0 : 1\n        currentNumber\
    \ /= 10\n    }\n\n    return (evenCount, oddCount)", "    // TODO: Write code\
    \ here\n    return (num / 10, num % 10)", "    var even = 0, odd = 0, lastEven,\
    \ lastOdd : Int?\n    \n    for i in 1..<num {\n        let c = i % 2\n      \
    \  if c == 0 {\n            lastEven = i\n        } else {\n            lastOdd\
    \ = i\n        }\n        \n        if lastEven == lastOdd {\n            even\
    \ = even + 1\n        } else {\n            odd = odd + 1\n        }\n    }\n\n\
    \    return (1, 1)", "    var even: Int = 0, odd: Int = 0\n    for n in num {\n\
    \        switch n {\n        case 0:\n            even += 1;\n        case 1:\n\
    \            odd += 1;\n        }\n    }\n    return (even, odd)", "    var even,\
    \ odd = 0, 1\n    for _ in 0..<num.truncatingRemainder(10) {\n        if num.truncatingRemainder(10)\
    \ % 2 == 0 {\n            even += 10\n        } else {\n            odd += 10\n\
    \        }\n    }\n    return (even, odd)", "    var even:Int = 0\n    var odd:Int\
    \ = 0\n    for index in 0..<Int(num.log10()) {\n        if ((num / 10) % 2 ==\
    \ 0) {\n            even++\n        }\n        else {\n            odd++\n   \
    \     }\n    }\n    return (even, odd)", "    var evenCount = 0\n    var oddCount\
    \ = 0\n    for num != 0 {\n        if num % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        num /= 10\n    }\n\
    \    return (evenCount, oddCount)", "    // Initialize tuple\n    var even = 0,\
    \ odd = 1\n    // Iterate through digits in the number from right to left.\n \
    \   for digit = Int(num); digit != 0; digit = digit / 10 {\n        // If current\
    \ digit is an even digit, increment even counter\n        if digit % 2 == 0 {\n\
    \            even += 1\n        } else {\n            odd += 1\n        }\n  \
    \  }\n    return (even, odd)", "    var even = Int()\n    var odd = Int()\n  \
    \  var i = Int()\n    i = num\n    while i >= 0 {\n        if (i % 2 == 0) {\n\
    \            even++\n        } else {\n            odd++\n        }\n        i\
    \ /= 10\n    }\n    return (even, odd)", '    return (num % 2 == 0), (num % 2
    != 0)', "    var evenCount = 0\n    var oddCount = 0\n\n    var n = num\n\n  \
    \  while n > 0 {\n        if n % 2 == 0 {\n            evenCount += 1\n      \
    \  }\n        n /= 2\n    }\n\n    n -= 1\n\n    while n > 0 {\n        if n %\
    \ 2 == 0 {\n            oddCount += 1\n        }\n        n /= 2\n    }\n\n  \
    \  return (evenCount, oddCount)", '    return (num, num/2 + num%2)', "    var\
    \ even, odd, remainder : Int\n\n    remainder = num % 10\n    num = num / 10\n\
    \    even = (num / 4) * 4\n    odd = (num % 4) * 10\n    return (even, odd + remainder)",
  "    var evenCount = 0\n    var oddCount = 0\n    if num > 0 {\n        for _ in\
    \ 0..<num {\n            if num % 2 == 0 {\n                evenCount += 1\n \
    \           } else {\n                oddCount += 1\n            }\n         \
    \   num /= 10\n        }\n    }\n    return (evenCount, oddCount)", "    var even\
    \ = 0\n    var odd = 0\n    var n = num\n    do {\n        n = n/10\n        even\
    \ = even*10 + (n%10)\n        odd = odd*10 + (n%10)\n    } while n > 0\n    return\
    \ (even, odd)", "    var (evenCount, oddCount) = (0, 0)\n    for n in num.str().characters\
    \ {\n        let char = n.unicodeScalars.first!.intValue\n        switch char\
    \ {\n        case .Zero:\n            evenCount++\n        case .Odd:\n      \
    \      oddCount++\n        }\n    }\n    return (evenCount, oddCount)", "    let\
    \ even_digits = Int(log10(num)) + 2\n    let odd_digits = Int(log10(num))\n  \
    \  return (even_digits, odd_digits)", "    var evenDigitCount = 0\n    var oddDigitCount\
    \ = 0\n    var digitSum = 0\n\n    var remainder = num\n    for _ in 0..<Int(log10(Double(num)))\
    \ + 1 {\n        digitSum += Double(remainder)\n        remainder = Int(remainder\
    \ * 10)\n        if Double(digitSum) / Double(num) == 0.0 {\n            if remainder\
    \ == 0 {\n                evenDigitCount += 1\n                digitSum = 0\n\
    \            } else {\n                oddDigitCount += 1\n                digitSum\
    \ = 0\n            }\n        }\n    }\n    return (evenDigitCount, oddDigitCount)",
  '    return (Int((num % 2) == 0), (Int((num % 2) == 1), ))', "    if num < 0 {\n\
    \        return (0, 0)\n    }\n\n    var even = 0\n    var odd = 0\n    var numStr\
    \ = String(num)\n\n    for i in numStr {\n        if i % 2 == 0 {\n          \
    \  even++\n        } else {\n            odd++\n        }\n    }\n\n    return\
    \ (even, odd)", "    \n    let even = (num / 2) % 2 == 0\n    let odd = (num /\
    \ 2) == 0 ? 1 : 0\n    return (even, odd)", "    var even = 0, odd = 0, temp =\
    \ 0\n    for d in String(num).characters {\n        if d % 2 == 0 {\n        \
    \    even++\n        } else {\n            odd++\n        }\n    }\n    return\
    \ (even, odd)", '    return (num / 2 % 2 == 0, num / 2 % 2)']
stop_tokens:
- "\n}"
