language: swift
name: HumanEval_23_strlen
results:
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return String.length(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpfe8dpovs.swift:8:19: error: type 'String' has no member 'length'\n\
    \    return String.length(string)\n           ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn C.strlen(stringCString(string))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpznryvjut.swift:8:9: error: cannot find 'C' in scope\n        return\
    \ C.strlen(stringCString(string))\n               ^\n/tmp/tmpznryvjut.swift:8:18:\
    \ error: cannot find 'stringCString' in scope\n        return C.strlen(stringCString(string))\n\
    \                        ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return Int((string as NSString).length)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpl83yktf3.swift:8:27: error: cannot find type 'NSString' in scope\n\
    \    return Int((string as NSString).length)\n                          ^~~~~~~~\n\
    /tmp/tmpl83yktf3.swift:8:37: error: value of type 'String' has no member 'length'\n\
    \    return Int((string as NSString).length)\n               ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" {\n        return 0\n    }\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return String(string).characters.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp11lkn2js.swift:8:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    return String(string).characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string.characters.dropLast())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpt9ligzl1.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string.characters.dropLast())\n           ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let start = 0\n    var len = 0\n    while start < string.characters.count\
    \ {\n        let char = string.characters.characters[start]\n        if char ==\
    \ char.unicodeScalars.first!.value {\n            len += 1\n        } else {\n\
    \            break\n        }\n        start += 1\n    }\n    return len\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpeytc69kv.swift:10:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    while start < string.characters.count {\n         \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpeytc69kv.swift:11:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = string.characters.characters[start]\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpeytc69kv.swift:11:27:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = string.characters.characters[start]\n                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpeytc69kv.swift:11:38:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = string.characters.characters[start]\n                               \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeytc69kv.swift:12:17:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'UInt32'\n        if char == char.unicodeScalars.first!.value {\n      \
    \     ~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeytc69kv.swift:12:17:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (UInt32, UInt32)\n        if char == char.unicodeScalars.first!.value\
    \ {\n                ^\n/tmp/tmpeytc69kv.swift:17:15: error: left side of mutating\
    \ operator isn't mutable: 'start' is a 'let' constant\n        start += 1\n  \
    \      ~~~~~ ^\n/tmp/tmpeytc69kv.swift:8:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let start = 0\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return count(string, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpfu9dgwr5.swift:8:12: error: cannot find 'count' in scope\n    return\
    \ count(string, \"\")\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpgkvc0azi.swift:8:9: error: cannot find 'len' in scope\n       \
    \ return len(string)\n               ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let length = Int(string).characters.count\n    if length == 0 {\n   \
    \     return 0\n    }\n    return length\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmplwrg3bna.swift:8:30: error: value of type 'Int?' has no member\
    \ 'characters'\n    let length = Int(string).characters.count\n              \
    \   ~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tif string == \"\" {\n\t\treturn 0\n\t}\n\n\treturn countN(string, nil,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(strlen(string: \"\") == 0)\n\
    assert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpf46jigam.swift:12:9: error: cannot find 'countN' in scope\n   \
    \     return countN(string, nil, 0)\n               ^~~~~~\n/tmp/tmpf46jigam.swift:12:24:\
    \ error: 'nil' requires a contextual type\n        return countN(string, nil,\
    \ 0)\n                              ^\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return countOf(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp5p22p0_i.swift:8:12: error: cannot find 'countOf' in scope\n  \
    \  return countOf(string)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn string.utf16.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return Int(string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    var len = 0\n    if string == \"\" {\n        return len\n    }\n   \
    \ for _, character := range string {\n        len++\n    }\n    return len\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpmp8maqqw.swift:12:10: error: expected 'in' after for-each pattern\n\
    \    for _, character := range string {\n         ^\n/tmp/tmpmp8maqqw.swift:12:10:\
    \ error: expected Sequence expression for for-each loop\n    for _, character\
    \ := range string {\n         ^\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return Int(strlen(string))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp6jlq334n.swift:8:23: error: missing argument label 'string:' in\
    \ call\n    return Int(strlen(string))\n                      ^\n            \
    \          string: \n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    _sandesh.strlen(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpqy7ld12d.swift:8:5: error: cannot find '_sandesh' in scope\n  \
    \  _sandesh.strlen(string)\n    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)._str()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp2ubils9o.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)._str()\n           ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tswitch string {\n\tcase \"\":\n\t\treturn 0\n\tcase \"abc\":\n\t\treturn\
    \ 3\n\tdefault:\n\t\tpanic(\"\")\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmps2q_rie4.swift:14:3: error: cannot find 'panic' in scope\n    \
    \            panic(\"\")\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let len: Int\n    if string.utf16.count == 0 {\n        return 0\n  \
    \  } else {\n        len = string.utf8.count\n    }\n    return len\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let count = string.count\n    if count == 0 {\n        return 0\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let string = String(string)\n    return string.utf16.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    var len = String.len(string)\n    if len == 0 {\n        return 0\n \
    \   }\n    return len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpbwxsf2s5.swift:8:22: error: type 'String' has no member 'len'\n\
    \    var len = String.len(string)\n              ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tif string == \"\" {\n\t\treturn 0\n\t}\n\tlet length = string.count\n\t\
    return length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strlen(string: \"\"\
    ) == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return countBytes(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpfa_b3y4l.swift:8:12: error: cannot find 'countBytes' in scope\n\
    \    return countBytes(string)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if let str = string {\n        var i = 0\n        for ch in str {\n \
    \           i += 1\n        }\n        return i\n    }\n    return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp0v5zmvjj.swift:8:8: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n    if let str = string {\n       ^ \
    \        ~~~~~~\n/tmp/tmp0v5zmvjj.swift:10:13: warning: immutable value 'ch' was\
    \ never used; consider replacing with '_' or removing it\n        for ch in str\
    \ {\n            ^~\n            _\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let len = string.utf16Count\n    if string.utf16Count > 0 { return Int(len)\
    \ }\n    return Int(len)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmppvghxtoa.swift:8:22: error: value of type 'String' has no member\
    \ 'utf16Count'\n    let len = string.utf16Count\n              ~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmppvghxtoa.swift:9:15: error: value of type 'String' has no member 'utf16Count'\n\
    \    if string.utf16Count > 0 { return Int(len) }\n       ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if let lengthString = string as NSString?.length as? Int {\n        return\
    \ lengthString\n    }\n    let length = count(string)\n    return length\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpgidcub3r.swift:8:46: error: expected '{' after 'if' condition\n\
    \    if let lengthString = string as NSString?.length as? Int {\n            \
    \                                 ^\n/tmp/tmpgidcub3r.swift:8:37: error: cannot\
    \ find type 'NSString' in scope\n    if let lengthString = string as NSString?.length\
    \ as? Int {\n                                    ^~~~~~~~\n/tmp/tmpgidcub3r.swift:11:18:\
    \ error: cannot find 'count' in scope\n    let length = count(string)\n      \
    \           ^~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return Int(len(string))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcgrrrr11.swift:8:16: error: cannot find 'len' in scope\n    return\
    \ Int(len(string))\n               ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let str = NSString(string: string).length\n    if let len = str.intValue\
    \ {\n        return len\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpovppdhqs.swift:8:15: error: cannot find 'NSString' in scope\n \
    \   let str = NSString(string: string).length\n              ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if let str = string.utf8CString {\n        return strlen(str)\n    }\n\
    \    return string.utf16.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp90fwr6xf.swift:9:23: error: missing argument label 'string:' in\
    \ call\n        return strlen(str)\n                      ^\n                \
    \      string: \n/tmp/tmp90fwr6xf.swift:9:23: error: cannot convert value of type\
    \ 'ContiguousArray<CChar>' (aka 'ContiguousArray<Int8>') to expected argument\
    \ type 'String'\n        return strlen(str)\n                      ^\n/tmp/tmp90fwr6xf.swift:8:8:\
    \ error: initializer for conditional binding must have Optional type, not 'ContiguousArray<CChar>'\
    \ (aka 'ContiguousArray<Int8>')\n    if let str = string.utf8CString {\n     \
    \  ^         ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" {\n        return 0\n    }\n    let length = string.count\n\
    \    for _ in string.unicodeScalars {\n        length++\n    }\n    return length\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp4kn1utsw.swift:13:15: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        length++\n              ^~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tlet lengthString = String(string.utf16)\n\n\treturn lengthString.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpgkvc0azi.swift:8:9: error: cannot find 'len' in scope\n       \
    \ return len(string)\n               ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpew71n80e.swift:8:10: error: cannot find 'len' in scope\n  return\
    \ len(string)\n         ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string.isEmpty {\n        return 0\n    }\n\n    let stringData =\
    \ string.cStringUsingEncoding(NSUnicodeStringEncoding)!\n\n    if string.lengthOfBytes(for:\
    \ NSString.UnicodeScalarView(utf16CodeUnits: stringData)) > 0 {\n        return\
    \ Int(string.length)\n    }\n\n    let lengthData: NSData? = string.data(using:\
    \ String.Encoding.utf8)\n\n    if let lengthData = lengthData {\n        let length:\
    \ CFIndex = lengthData.count\n        let lengthString: NSString? = NSString.init(data:\
    \ lengthData, encoding: String.Encoding.utf8)\n        return length as Int\n\
    \    }\n\n    return Int(ceil(Double(string.length) / Double(10.0))) // Double\
    \ is used here to support Unicode characters\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp049vap_y.swift:12:50: error: cannot find 'NSUnicodeStringEncoding'\
    \ in scope\n    let stringData = string.cStringUsingEncoding(NSUnicodeStringEncoding)!\n\
    \                                                 ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp049vap_y.swift:12:29:\
    \ error: value of type 'String' has no member 'cStringUsingEncoding'\n    let\
    \ stringData = string.cStringUsingEncoding(NSUnicodeStringEncoding)!\n       \
    \              ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp049vap_y.swift:14:34: error:\
    \ cannot find 'NSString' in scope\n    if string.lengthOfBytes(for: NSString.UnicodeScalarView(utf16CodeUnits:\
    \ stringData)) > 0 {\n                                 ^~~~~~~~\n/tmp/tmp049vap_y.swift:14:15:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    if string.lengthOfBytes(for:\
    \ NSString.UnicodeScalarView(utf16CodeUnits: stringData)) > 0 {\n       ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmp049vap_y.swift:15:27: error: value of type 'String' has\
    \ no member 'length'\n        return Int(string.length)\n                   ~~~~~~\
    \ ^~~~~~\n/tmp/tmp049vap_y.swift:18:21: error: cannot find type 'NSData' in scope\n\
    \    let lengthData: NSData? = string.data(using: String.Encoding.utf8)\n    \
    \                ^~~~~~\n/tmp/tmp049vap_y.swift:21:21: error: cannot find type\
    \ 'CFIndex' in scope\n        let length: CFIndex = lengthData.count\n       \
    \             ^~~~~~~\n/tmp/tmp049vap_y.swift:22:27: error: cannot find type 'NSString'\
    \ in scope\n        let lengthString: NSString? = NSString.init(data: lengthData,\
    \ encoding: String.Encoding.utf8)\n                          ^~~~~~~~\n/tmp/tmp049vap_y.swift:26:16:\
    \ error: cannot find 'ceil' in scope\n    return Int(ceil(Double(string.length)\
    \ / Double(10.0))) // Double is used here to support Unicode characters\n    \
    \           ^~~~\n/tmp/tmp049vap_y.swift:26:35: error: value of type 'String'\
    \ has no member 'length'\n    return Int(ceil(Double(string.length) / Double(10.0)))\
    \ // Double is used here to support Unicode characters\n                     \
    \      ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return uStrLen(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwjhcpnll.swift:8:12: error: cannot find 'uStrLen' in scope\n  \
    \  return uStrLen(string)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return String(string).characters.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp_1tkw6w2.swift:8:25: error: 'characters' is unavailable: Please\
    \ use String directly\n  return String(string).characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let string = string.cStringUsingEncoding(NSUTF8StringEncoding)\n    return\
    \ String.lengthOfBytesUsingEncoding(NSUTF8StringEncoding, options: NSStringEncodingConversionOptions.ReverseDirection,\
    \ range: NSMakeRange(0, string.characters.count))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp46dh4t76.swift:8:46: error: cannot find 'NSUTF8StringEncoding'\
    \ in scope\n    let string = string.cStringUsingEncoding(NSUTF8StringEncoding)\n\
    \                                             ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp46dh4t76.swift:8:25:\
    \ error: value of type 'String' has no member 'cStringUsingEncoding'\n    let\
    \ string = string.cStringUsingEncoding(NSUTF8StringEncoding)\n               \
    \  ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp46dh4t76.swift:9:46: error: cannot find\
    \ 'NSUTF8StringEncoding' in scope\n    return String.lengthOfBytesUsingEncoding(NSUTF8StringEncoding,\
    \ options: NSStringEncodingConversionOptions.ReverseDirection, range: NSMakeRange(0,\
    \ string.characters.count))\n                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp46dh4t76.swift:9:77: error: cannot find 'NSStringEncodingConversionOptions'\
    \ in scope\n    return String.lengthOfBytesUsingEncoding(NSUTF8StringEncoding,\
    \ options: NSStringEncodingConversionOptions.ReverseDirection, range: NSMakeRange(0,\
    \ string.characters.count))\n                                                \
    \                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp46dh4t76.swift:9:136:\
    \ error: cannot find 'NSMakeRange' in scope\n    return String.lengthOfBytesUsingEncoding(NSUTF8StringEncoding,\
    \ options: NSStringEncodingConversionOptions.ReverseDirection, range: NSMakeRange(0,\
    \ string.characters.count))\n                                                \
    \                                                                            \
    \           ^~~~~~~~~~~\n/tmp/tmp46dh4t76.swift:9:19: error: type 'String' has\
    \ no member 'lengthOfBytesUsingEncoding'\n    return String.lengthOfBytesUsingEncoding(NSUTF8StringEncoding,\
    \ options: NSStringEncodingConversionOptions.ReverseDirection, range: NSMakeRange(0,\
    \ string.characters.count))\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpgkvc0azi.swift:8:9: error: cannot find 'len' in scope\n       \
    \ return len(string)\n               ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return Int(_core.String.length(string))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpsyl0wtb3.swift:8:16: error: cannot find '_core' in scope\n    return\
    \ Int(_core.String.length(string))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return Int64(string.characters.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpv_jqham0.swift:8:12: error: cannot convert return expression of\
    \ type 'Int64' to return type 'Int'\n    return Int64(string.characters.count)\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n           Int(                  \
    \        )\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let length = string.count\n\n    if length == 0 {\n        return 0\n\
    \    }\n\n    return length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: -4
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    switch string {\n    case \"\":\n        return 0\n    case \"abc\":\n\
    \        return 3\n    default:\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\"\
    ) == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: Exception
  stderr: 'tmp5zqvz4q7/tmp5zqvz4q7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf167fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf1376b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf1376988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf13757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5zqvz4q7                        0x0000561c2e95436a <unavailable> + 4970

    5    libc.so.6                          0x00002aadf186b460 __libc_start_main +
    245

    6    tmp5zqvz4q7                        0x0000561c2e953f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    guard let str = string else { return 0 }\n    return str.utf8.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp58elsseg.swift:8:11: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n    guard let str = string else { return\
    \ 0 }\n          ^         ~~~~~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return Int64(len(string))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp0p1_3ame.swift:8:18: error: cannot find 'len' in scope\n    return\
    \ Int64(len(string))\n                 ^~~\n/tmp/tmp0p1_3ame.swift:8:12: error:\
    \ no 'init' candidates produce the expected contextual result type 'Int'\n   \
    \ return Int64(len(string))\n           ^\nSwift.Int64:9:12: note: 'init(_:)'\
    \ produces 'Int64', not the expected contextual result type 'Int'\n    public\
    \ init(_ source: Float16)\n           ^\nSwift.Int64:12:12: note: 'init(_:)' produces\
    \ 'Int64', not the expected contextual result type 'Int'\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int64:14:12: note: 'init(_:)' produces 'Int64',\
    \ not the expected contextual result type 'Int'\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int64:16:12: note: 'init(_:)' produces 'Int64', not the expected\
    \ contextual result type 'Int'\n    public init(_ source: Float80)\n         \
    \  ^\nSwift.Int64:30:12: note: 'init(_:)' produces 'Int64', not the expected contextual\
    \ result type 'Int'\n    public init(_ _value: Builtin.Int64)\n           ^\n\
    Swift.FixedWidthInteger:3:23: note: 'init(_:)' produces 'Int64?', not the expected\
    \ contextual result type 'Int'\n    @inlinable public init?(_ description: String)\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: -4
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    switch string {\n    case \"\":\n        return 0\n    case \"a\":\n\
    \        return 1\n    case \"abc\":\n        return 3\n    default:\n       \
    \ return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strlen(string: \"\"\
    ) == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: Exception
  stderr: 'tmpy87awse3/tmpy87awse3.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6a0c7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6a0971b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6a0971988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6a09707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy87awse3                        0x000055b2368f836a <unavailable> + 4970

    5    libc.so.6                          0x00002ac6a0e66460 __libc_start_main +
    245

    6    tmpy87awse3                        0x000055b2368f7f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string.count > 0 {\n        charCount += 1\n    }\n    return Int(string.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpihxbahhv.swift:9:9: error: cannot find 'charCount' in scope\n \
    \       charCount += 1\n        ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let _buf = UnsafeBufferPointer<UInt8>(start: buffer.memory, count: MemoryLayout.size(ofValue:\
    \ string))\n    let _len = strlen_len_function(_buf)\n    return Int(_len)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpdk7ej43e.swift:8:50: error: cannot find 'buffer' in scope\n   \
    \ let _buf = UnsafeBufferPointer<UInt8>(start: buffer.memory, count: MemoryLayout.size(ofValue:\
    \ string))\n                                                 ^~~~~~\n/tmp/tmpdk7ej43e.swift:9:16:\
    \ error: cannot find 'strlen_len_function' in scope\n    let _len = strlen_len_function(_buf)\n\
    \               ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn len(string) + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpnz046p41.swift:8:9: error: cannot find 'len' in scope\n       \
    \ return len(string) + 1\n               ^~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return countCodePoints(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpjo55_pk9.swift:8:12: error: cannot find 'countCodePoints' in scope\n\
    \    return countCodePoints(string)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn C.strlen(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp07t6px3p.swift:8:9: error: cannot find 'C' in scope\n        return\
    \ C.strlen(string)\n               ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" {\n        return 0\n    }\n    var len = 0\n    for\
    \ char in string {\n        len++\n    }\n    return len\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\"\
    ) == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpjzporvcl.swift:13:12: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        len++\n           ^~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" {\n        return 0\n    }\n\n    if let c = string.unicodeScalars.last\
    \ {\n        return string.unicodeScalars.count - c.value - string.unicodeScalars.first.value\n\
    \    }\n\n    return string.unicodeScalars.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpfodvhvse.swift:13:38: error: cannot convert value of type 'Int'\
    \ to expected argument type 'UInt32'\n        return string.unicodeScalars.count\
    \ - c.value - string.unicodeScalars.first.value\n                            \
    \         ^\n               UInt32(                    )\n/tmp/tmpfodvhvse.swift:13:54:\
    \ error: cannot convert return expression of type 'UInt32' to return type 'Int'\n\
    \        return string.unicodeScalars.count - c.value - string.unicodeScalars.first.value\n\
    \               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \               Int(                                                         \
    \            )\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tlet length = string.characters.count\n\tif length == 0 {\n\t\treturn 0\n\
    \t}\n\treturn length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpohq4lxv_.swift:8:22: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = string.characters.count\n        \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpgkvc0azi.swift:8:9: error: cannot find 'len' in scope\n       \
    \ return len(string)\n               ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string.IsEmpty() {\n        return 0\n    }\n\n    var length = 0\n\
    \    for _, b := range string {\n        length += 1\n    }\n\n    return length\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmph3qqi0fn.swift:13:10: error: expected 'in' after for-each pattern\n\
    \    for _, b := range string {\n         ^\n/tmp/tmph3qqi0fn.swift:13:10: error:\
    \ expected Sequence expression for for-each loop\n    for _, b := range string\
    \ {\n         ^\n/tmp/tmph3qqi0fn.swift:8:15: error: value of type 'String' has\
    \ no member 'IsEmpty'\n    if string.IsEmpty() {\n       ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.len()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp20_kqoh0.swift:8:19: error: value of type 'String' has no member\
    \ 'len'\n    return string.len()\n           ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string.characters)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpq9j611j8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string.characters)\n           ^~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return Int(count((string)))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpyi61ny4i.swift:8:16: error: cannot find 'count' in scope\n    return\
    \ Int(count((string)))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tguard let length = string else {\n\t\tfatalError(\"Cannot get length of\
    \ nil or empty string\")\n\t}\n\treturn length\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpy8xh_l9c.swift:8:8: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        guard let length = string else\
    \ {\n              ^            ~~~~~~\n/tmp/tmpy8xh_l9c.swift:11:9: error: cannot\
    \ convert return expression of type 'String' to return type 'Int'\n        return\
    \ length\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tlet lengthOfString = string.characters.count\n\treturn lengthOfString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmprqvg5v3m.swift:8:30: error: 'characters' is unavailable: Please\
    \ use String directly\n        let lengthOfString = string.characters.count\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpgkvc0azi.swift:8:9: error: cannot find 'len' in scope\n       \
    \ return len(string)\n               ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if let length = string.characters.count {\n        return length\n  \
    \  }\n\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp8wzlbdp2.swift:8:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    if let length = string.characters.count {\n       \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp8wzlbdp2.swift:8:8: error: initializer for conditional binding must\
    \ have Optional type, not 'Int'\n    if let length = string.characters.count {\n\
    \       ^            ~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let len = string.utf8.count\n    if len == 0 {\n        return 0\n  \
    \  }\n    return len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let cStr = String.cString(using: String.Encoding.utf8)!\n    let buffer\
    \ = UnsafeBufferPointer(start: cStr, count: 1)\n    return String._swift_stdlib_getCharLength(buffer)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp5t3_3pno.swift:8:23: error: type 'String' has no member 'cString'\n\
    \    let cStr = String.cString(using: String.Encoding.utf8)!\n               ~~~~~~\
    \ ^~~~~~~\n/tmp/tmp5t3_3pno.swift:8:45: error: type 'String' has no member 'Encoding'\n\
    \    let cStr = String.cString(using: String.Encoding.utf8)!\n               \
    \                      ~~~~~~ ^~~~~~~~\n/tmp/tmp5t3_3pno.swift:9:18: error: generic\
    \ parameter 'Element' could not be inferred\n    let buffer = UnsafeBufferPointer(start:\
    \ cStr, count: 1)\n                 ^\n/tmp/tmp5t3_3pno.swift:9:18: note: explicitly\
    \ specify the generic arguments to fix this issue\n    let buffer = UnsafeBufferPointer(start:\
    \ cStr, count: 1)\n                 ^\n                                    <Any>\n\
    /tmp/tmp5t3_3pno.swift:10:19: error: type 'String' has no member '_swift_stdlib_getCharLength'\n\
    \    return String._swift_stdlib_getCharLength(buffer)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    switch string {\n    case \"\":\n        return 0\n    case \"abc\":\n\
    \        return 3\n    }\n\n    // TODO: Handle unicode characters in string\n\
    \    return Int(string.length - 1) + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpo2mrpj7d.swift:8:5: error: switch must be exhaustive\n    switch\
    \ string {\n    ^\n/tmp/tmpo2mrpj7d.swift:8:5: note: do you want to add a default\
    \ clause?\n    switch string {\n    ^\n/tmp/tmpo2mrpj7d.swift:16:23: error: value\
    \ of type 'String' has no member 'length'\n    return Int(string.length - 1) +\
    \ 1\n               ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if let str = string as? String {\n        return str.characters.count\n\
    \    }\n\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp8s6blmkx.swift:8:25: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n    if let str = string as? String {\n           \
    \             ^\n/tmp/tmp8s6blmkx.swift:9:20: error: 'characters' is unavailable:\
    \ Please use String directly\n        return str.characters.count\n          \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return lengthOf(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp4u9280x4.swift:8:12: error: cannot find 'lengthOf' in scope\n \
    \   return lengthOf(string)\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return Int(strlen(string))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp_cyo64_z.swift:8:21: error: missing argument label 'string:' in\
    \ call\n  return Int(strlen(string))\n                    ^\n                \
    \    string: \n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn length(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpq6wj5jrp.swift:8:9: error: cannot find 'length' in scope\n    \
    \    return length(string)\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    \n    let length = string.characters.count\n    return length\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp47ltt0w7.swift:9:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let len = string.characters.count\n    if len == 0 {\n        return\
    \ 0\n    }\n    return len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmparavuqfk.swift:8:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = string.characters.count\n               \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" {\n        return 0\n    }\n    return string.characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpt1jhfmbf.swift:11:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" {\n        return 0\n    }\n    var count = 0\n   \
    \ for char in string {\n        count += 1\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tif string.IsEmpty() {\n\t\treturn 0\n\t}\n\treturn string.Len()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpjg9qej8m.swift:8:12: error: value of type 'String' has no member\
    \ 'IsEmpty'\n        if string.IsEmpty() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpjg9qej8m.swift:11:16:\
    \ error: value of type 'String' has no member 'Len'\n        return string.Len()\n\
    \               ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" {\n        return 0\n    }\n    if string == nil ||\
    \ string.isEmpty {\n        return 0\n    }\n    return string.characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpxvt38iyz.swift:11:15: warning: comparing non-optional value of\
    \ type 'String' to 'nil' always returns false\n    if string == nil || string.isEmpty\
    \ {\n       ~~~~~~ ^  ~~~\n/tmp/tmpxvt38iyz.swift:14:19: error: 'characters' is\
    \ unavailable: Please use String directly\n    return string.characters.count\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    guard !string.isEmpty else {\n        return 0\n    }\n\n    return string.characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpjvxxik47.swift:12:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" {\n        return 0\n    }\n    let startIndex = string.startIndex\n\
    \    return string.countElements(from: startIndex, to: string.endIndex, by: 1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpd8pepm76.swift:12:19: error: value of type 'String' has no member\
    \ 'countElements'\n    return string.countElements(from: startIndex, to: string.endIndex,\
    \ by: 1)\n           ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpgkvc0azi.swift:8:9: error: cannot find 'len' in scope\n       \
    \ return len(string)\n               ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpew71n80e.swift:8:10: error: cannot find 'len' in scope\n  return\
    \ len(string)\n         ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    var count = 0\n    for _, char := range string {\n        count = count\
    \ + 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpuupwkcgs.swift:9:10: error: expected 'in' after for-each pattern\n\
    \    for _, char := range string {\n         ^\n/tmp/tmpuupwkcgs.swift:9:10: error:\
    \ expected Sequence expression for for-each loop\n    for _, char := range string\
    \ {\n         ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return UInt32(bridge.string(string).lengthUncached())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\"\
    ) == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpvbdnaqe6.swift:8:19: error: cannot find 'bridge' in scope\n   \
    \ return UInt32(bridge.string(string).lengthUncached())\n                  ^~~~~~\n\
    /tmp/tmpvbdnaqe6.swift:8:12: error: no 'init' candidates produce the expected\
    \ contextual result type 'Int'\n    return UInt32(bridge.string(string).lengthUncached())\n\
    \           ^\nSwift.UInt32:7:12: note: 'init(_:)' produces 'UInt32', not the\
    \ expected contextual result type 'Int'\n    public init(_ source: Float16)\n\
    \           ^\nSwift.UInt32:10:12: note: 'init(_:)' produces 'UInt32', not the\
    \ expected contextual result type 'Int'\n    public init(_ source: Float)\n  \
    \         ^\nSwift.UInt32:12:12: note: 'init(_:)' produces 'UInt32', not the expected\
    \ contextual result type 'Int'\n    public init(_ source: Double)\n          \
    \ ^\nSwift.UInt32:14:12: note: 'init(_:)' produces 'UInt32', not the expected\
    \ contextual result type 'Int'\n    public init(_ source: Float80)\n         \
    \  ^\nSwift.UInt32:28:12: note: 'init(_:)' produces 'UInt32', not the expected\
    \ contextual result type 'Int'\n    public init(_ _value: Builtin.Int32)\n   \
    \        ^\nSwift.UInt32:2:23: note: 'init(_:)' produces 'UInt32', not the expected\
    \ contextual result type 'Int'\n    @inlinable public init(_ v: Unicode.Scalar)\n\
    \                      ^\nSwift.FixedWidthInteger:3:23: note: 'init(_:)' produces\
    \ 'UInt32?', not the expected contextual result type 'Int'\n    @inlinable public\
    \ init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn str.len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmph7olzts4.swift:8:9: error: cannot find 'str' in scope\n       \
    \ return str.len(string)\n               ^~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tl := len(string)\n\tif l == 0 {\n\t\treturn 0\n\t}\n\n\tl -= 1 // len()\
    \ returns 0 when string is empty\n\n\treturn l\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpz4uhc2f3.swift:8:3: error: consecutive statements on a line must\
    \ be separated by ';'\n        l := len(string)\n         ^\n         ;\n/tmp/tmpz4uhc2f3.swift:8:4:\
    \ error: expected expression\n        l := len(string)\n          ^\n/tmp/tmpz4uhc2f3.swift:8:2:\
    \ error: cannot find 'l' in scope\n        l := len(string)\n        ^\n/tmp/tmpz4uhc2f3.swift:9:5:\
    \ error: cannot find 'l' in scope\n        if l == 0 {\n           ^\n/tmp/tmpz4uhc2f3.swift:13:2:\
    \ error: cannot find 'l' in scope\n        l -= 1 // len() returns 0 when string\
    \ is empty\n        ^\n/tmp/tmpz4uhc2f3.swift:15:9: error: cannot find 'l' in\
    \ scope\n        return l\n               ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" {\n        return 0\n    }\n    var len = 0\n    for\
    \ _, b := range string {\n        len++\n    }\n    return len\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\"\
    ) == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpdaai5803.swift:12:10: error: expected 'in' after for-each pattern\n\
    \    for _, b := range string {\n         ^\n/tmp/tmpdaai5803.swift:12:10: error:\
    \ expected Sequence expression for for-each loop\n    for _, b := range string\
    \ {\n         ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let length = string.characters.count\n    return length\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmppn7d1fq_.swift:8:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let length = string.count\n    if length == 0 {\n        return 0\n \
    \   }\n    return length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn _strlen(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpjzx_6q0p.swift:8:9: error: cannot find '_strlen' in scope\n   \
    \     return _strlen(string)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if let str = string as? String {\n        return str.characters.count\n\
    \    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpmder62fo.swift:8:25: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n    if let str = string as? String {\n           \
    \             ^\n/tmp/tmpmder62fo.swift:9:20: error: 'characters' is unavailable:\
    \ Please use String directly\n        return str.characters.count\n          \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpgkvc0azi.swift:8:9: error: cannot find 'len' in scope\n       \
    \ return len(string)\n               ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" {\n        return 0\n    }\n    var n = 0\n    for\
    \ index in string.indices {\n        n = n + 1\n    }\n    return n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" { return 0 }\n    var count = 0\n    for c; c != 0;\
    \ c = string[count] { count += 1; return count }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpgw5r3zmj.swift:10:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for c; c != 0; c = string[count] { count += 1; return count\
    \ }\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return Int(string.characters.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp_ke32gfw.swift:8:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    return Int(string.characters.count)\n             \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    defer func() {\n        testFns.AddNoFunc()\n    }()\n\n    var returnCode\
    \ = testVals.GetInt()\n    defer func() { testVals.SetInt(returnCode) }()\n  \
    \  stringVal = string\n    return len(stringVal)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpe78bx2jx.swift:8:11: error: expected '{' after 'defer'\n    defer\
    \ func() {\n          ^\n/tmp/tmpe78bx2jx.swift:10:6: error: consecutive statements\
    \ on a line must be separated by ';'\n    }()\n     ^\n     ;\n/tmp/tmpe78bx2jx.swift:13:11:\
    \ error: expected '{' after 'defer'\n    defer func() { testVals.SetInt(returnCode)\
    \ }()\n          ^\n/tmp/tmpe78bx2jx.swift:13:49: error: consecutive statements\
    \ on a line must be separated by ';'\n    defer func() { testVals.SetInt(returnCode)\
    \ }()\n                                                ^\n                   \
    \                             ;\n/tmp/tmpe78bx2jx.swift:9:9: error: cannot find\
    \ 'testFns' in scope\n        testFns.AddNoFunc()\n        ^~~~~~~\n/tmp/tmpe78bx2jx.swift:12:22:\
    \ error: cannot find 'testVals' in scope\n    var returnCode = testVals.GetInt()\n\
    \                     ^~~~~~~~\n/tmp/tmpe78bx2jx.swift:13:20: error: cannot find\
    \ 'testVals' in scope\n    defer func() { testVals.SetInt(returnCode) }()\n  \
    \                 ^~~~~~~~\n/tmp/tmpe78bx2jx.swift:14:5: error: cannot find 'stringVal'\
    \ in scope\n    stringVal = string\n    ^~~~~~~~~\n/tmp/tmpe78bx2jx.swift:15:12:\
    \ error: cannot find 'len' in scope\n    return len(stringVal)\n           ^~~\n\
    /tmp/tmpe78bx2jx.swift:15:16: error: cannot find 'stringVal' in scope\n    return\
    \ len(stringVal)\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return UInt32(string.count())\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp75b3mdue.swift:8:26: error: cannot call value of non-function type\
    \ 'Int'\n    return UInt32(string.count())\n                         ^    ~~\n\
    \                              \n/tmp/tmp75b3mdue.swift:8:12: error: no 'init'\
    \ candidates produce the expected contextual result type 'Int'\n    return UInt32(string.count())\n\
    \           ^\nSwift.UInt32:7:12: note: 'init(_:)' produces 'UInt32', not the\
    \ expected contextual result type 'Int'\n    public init(_ source: Float16)\n\
    \           ^\nSwift.UInt32:10:12: note: 'init(_:)' produces 'UInt32', not the\
    \ expected contextual result type 'Int'\n    public init(_ source: Float)\n  \
    \         ^\nSwift.UInt32:12:12: note: 'init(_:)' produces 'UInt32', not the expected\
    \ contextual result type 'Int'\n    public init(_ source: Double)\n          \
    \ ^\nSwift.UInt32:14:12: note: 'init(_:)' produces 'UInt32', not the expected\
    \ contextual result type 'Int'\n    public init(_ source: Float80)\n         \
    \  ^\nSwift.UInt32:28:12: note: 'init(_:)' produces 'UInt32', not the expected\
    \ contextual result type 'Int'\n    public init(_ _value: Builtin.Int32)\n   \
    \        ^\nSwift.UInt32:2:23: note: 'init(_:)' produces 'UInt32', not the expected\
    \ contextual result type 'Int'\n    @inlinable public init(_ v: Unicode.Scalar)\n\
    \                      ^\nSwift.FixedWidthInteger:3:23: note: 'init(_:)' produces\
    \ 'UInt32?', not the expected contextual result type 'Int'\n    @inlinable public\
    \ init?(_ description: String)\n                      ^\nSwift.UInt32:7:12: note:\
    \ 'init(_:)' produces 'UInt32', not the expected contextual result type 'Int'\n\
    \    public init(_ source: Float16)\n           ^\nSwift.UInt32:10:12: note: 'init(_:)'\
    \ produces 'UInt32', not the expected contextual result type 'Int'\n    public\
    \ init(_ source: Float)\n           ^\nSwift.UInt32:12:12: note: 'init(_:)' produces\
    \ 'UInt32', not the expected contextual result type 'Int'\n    public init(_ source:\
    \ Double)\n           ^\nSwift.UInt32:14:12: note: 'init(_:)' produces 'UInt32',\
    \ not the expected contextual result type 'Int'\n    public init(_ source: Float80)\n\
    \           ^\nSwift."
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return countBytes(string, false)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpht2mcyjm.swift:8:12: error: cannot find 'countBytes' in scope\n\
    \    return countBytes(string, false)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let startIndex = string.startIndex\n    if string.endIndex == startIndex\
    \ {\n        return 0\n    }\n\n    let index = string.endIndex\n    let len =\
    \ (index - startIndex) + 1\n    return len\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp3dicb5zs.swift:14:22: error: binary operator '-' cannot be applied\
    \ to two 'String.Index' operands\n    let len = (index - startIndex) + 1\n   \
    \            ~~~~~ ^ ~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    var len : Int = 0\n    for c in string {\n        if c == 0 {\n     \
    \       len += 1\n        } else {\n            break\n        }\n    }\n    return\
    \ len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(strlen(string: \"\") ==\
    \ 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpsmothj1b.swift:10:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'Int'\n        if c == 0 {\n           ~\
    \ ^  ~\n/tmp/tmpsmothj1b.swift:10:14: note: overloads for '==' exist with these\
    \ partially matching parameter lists: (Character, Character), (Int, Int)\n   \
    \     if c == 0 {\n             ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let l = string.characters.count\n    switch string.characters.first {\n\
    \    case _, _ in\n    case .Newline, _ in\n    case .Space:\n        l -= 1\n\
    \    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpi6wehlo3.swift:10:15: error: expected ':' after 'case'\n    case\
    \ _, _ in\n              ^\n/tmp/tmpi6wehlo3.swift:10:15: error: expected expression\n\
    \    case _, _ in\n              ^\n/tmp/tmpi6wehlo3.swift:11:22: error: expected\
    \ ':' after 'case'\n    case .Newline, _ in\n                     ^\n/tmp/tmpi6wehlo3.swift:11:22:\
    \ error: expected expression\n    case .Newline, _ in\n                     ^\n\
    /tmp/tmpi6wehlo3.swift:8:20: error: 'characters' is unavailable: Please use String\
    \ directly\n    let l = string.characters.count\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpi6wehlo3.swift:9:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    switch string.characters.first\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpi6wehlo3.swift:11:11: error: enum case 'Newline' not found in type\
    \ 'String.Element?' (aka 'Optional<Character>')\n    case .Newline, _ in\n   \
    \       ^\n/tmp/tmpi6wehlo3.swift:12:11: error: enum case 'Space' not found in\
    \ type 'String.Element?' (aka 'Optional<Character>')\n    case .Space:\n     \
    \     ^\n/tmp/tmpi6wehlo3.swift:13:11: error: left side of mutating operator isn't\
    \ mutable: 'l' is a 'let' constant\n        l -= 1\n        ~ ^\n/tmp/tmpi6wehlo3.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let l = string.characters.count\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmphazisiq4.swift:8:19: error: value of type 'String' has no member\
    \ 'length'\n    return string.length\n           ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return Int(self[string.startIndex, countBy: Character].length)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpmjmdjwsg.swift:8:14: error: cannot find 'self' in scope; did you\
    \ mean to use it in a type or extension context?\n  return Int(self[string.startIndex,\
    \ countBy: Character].length)\n             ^~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn string.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpg0j02lvo.swift:8:16: error: value of type 'String' has no member\
    \ 'length'\n        return string.length\n               ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn _strlen(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpjzx_6q0p.swift:8:9: error: cannot find '_strlen' in scope\n   \
    \     return _strlen(string)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpqehg3l_m.swift:8:17: error: 'characters' is unavailable: Please\
    \ use String directly\n  return string.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string.utf16)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpw88hlyj9.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string.utf16)\n           ^~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if let length = string as NSString? {\n        return length.length\n\
    \    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmps4gjegv0.swift:8:31: error: cannot find type 'NSString' in scope\n\
    \    if let length = string as NSString? {\n                              ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tlet length = (string as NSString).length\n\treturn length\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp_hq8xnms.swift:8:26: error: cannot find type 'NSString' in scope\n\
    \        let length = (string as NSString).length\n                          \
    \      ^~~~~~~~\n/tmp/tmp_hq8xnms.swift:8:36: error: value of type 'String' has\
    \ no member 'length'\n        let length = (string as NSString).length\n     \
    \                ~~~~~~~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let len: Int = string.utf8.count\n    return len\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\"\
    ) == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    guard let _str = string else { return 0 }\n    if let str = String(_str)\
    \ {\n        let count = str.characters.count\n        return count\n    }\n \
    \   return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strlen(string: \"\"\
    ) == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmprkz7vvwb.swift:8:11: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n    guard let _str = string else { return\
    \ 0 }\n          ^          ~~~~~~\n/tmp/tmprkz7vvwb.swift:10:25: error: 'characters'\
    \ is unavailable: Please use String directly\n        let count = str.characters.count\n\
    \                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmprkz7vvwb.swift:9:8: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n    if let str = String(_str)\
    \ {\n       ^         ~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpew71n80e.swift:8:10: error: cannot find 'len' in scope\n  return\
    \ len(string)\n         ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpgkvc0azi.swift:8:9: error: cannot find 'len' in scope\n       \
    \ return len(string)\n               ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return Int32.parse(string, -1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpv_u6v74_.swift:8:18: error: type 'Int32' has no member 'parse'\n\
    \    return Int32.parse(string, -1)\n           ~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tbl := bytes.NewBuffer([]byte(string))\n\tlen := 0\n\tfor i := 0; i < len(string);\
    \ i++ {\n\t\tbl.ReadByte()\n\t\tlen++\n\t}\n\treturn len\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\"\
    ) == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpfce7jl19.swift:8:4: error: consecutive statements on a line must\
    \ be separated by ';'\n        bl := bytes.NewBuffer([]byte(string))\n       \
    \   ^\n          ;\n/tmp/tmpfce7jl19.swift:8:5: error: expected expression\n \
    \       bl := bytes.NewBuffer([]byte(string))\n           ^\n/tmp/tmpfce7jl19.swift:10:9:\
    \ error: expected type\n        for i := 0; i < len(string); i++ {\n         \
    \      ^\n                <#type#>\n/tmp/tmpfce7jl19.swift:10:9: error: expected\
    \ 'in' after for-each pattern\n        for i := 0; i < len(string); i++ {\n  \
    \             ^\n/tmp/tmpfce7jl19.swift:10:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 0; i < len(string); i++ {\n            \
    \   ^\n/tmp/tmpfce7jl19.swift:8:2: error: cannot find 'bl' in scope\n        bl\
    \ := bytes.NewBuffer([]byte(string))\n        ^~\n/tmp/tmpfce7jl19.swift:14:9:\
    \ error: cannot find 'len' in scope\n        return len\n               ^~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tswitch string {\n\tcase \"\\x00\":\n\t\treturn 1\n\tcase \"\\x07\":\n\t\
    \treturn 2\n\tcase \"\\x0a\":\n\t\treturn 3\n\tcase \"\\x0d\":\n\t\treturn 4\n\
    \tcase \"\\x0a\\x0d\":\n\t\treturn 5\n\tcase \"\\x0d\\x0a\":\n\t\treturn 6\n\t\
    case \"\\x0a\\x0d\\x0a\":\n\t\treturn 7\n\tcase \"\\x0d\\x0a\\x0d\":\n\t\treturn\
    \ 8\n\tcase \"\\x0a\\x0d\\x0a\\x0d\":\n\t\treturn 9\n\tcase \"\\x0d\\x0a\\x0d\\\
    x0a\\x0d\":\n\t\treturn 10\n\tcase \"\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\":\n\t\treturn\
    \ 11\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\":\n\t\treturn 12\n\tcase \"\
    \\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\":\n\t\treturn 13\n\tcase \"\\x0d\\x0a\\\
    x0d\\x0a\\x0d\\x0a\\x0d\\x0a\":\n\t\treturn 14\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\\
    x0d\\x0a\\x0d\\x0a\\x0d\":\n\t\treturn 15\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\\
    x0a\\x0d\\x0a\\x0d\\x0d\":\n\t\treturn 16\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\\
    x0a\\x0d\\x0a\\x0d\\x0d\\x0a\":\n\t\treturn 17\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\\
    x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\":\n\t\treturn 18\n\tcase \"\\x0d\\x0a\\\
    x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0a\":\n\t\treturn 19\n\tcase\
    \ \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\":\n\
    \t\treturn 20\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\\
    x0d\\x0a\\x0d\\x0d\":\n\t\treturn 21\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\\
    x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\x0d\":\n\t\treturn 22\n\tcase \"\\\
    x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\x0d\\\
    x0d\":\n\t\treturn 23\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\\
    x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0d\":\n\t\treturn 24\n\tcase \"\\x0d\\\
    x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\\
    x0d\\x0d\":\n\t\treturn 25\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\\
    x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0d\\x0d\":\n\t\treturn 26\n\tcase\
    \ \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\\
    x0d\\x0d\\x0d\\x0d\\x0d\":\n\t\treturn 27\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\\
    x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0d\\x0d\\x0d\":\n\
    \t\treturn 28\n\tcase \"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\\
    x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0d\\x0d\\x0d\\x0d\":\n\t\treturn 29\n\tcase \"\\\
    x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a\\x0d\\x0d\\x0d\\x0d\\x0a\\x0d\\x0d\\x0d\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp9onu0_2o.swift:9:9: error: invalid escape sequence in literal\n\
    \        case \"\\x00\":\n               ^\n/tmp/tmp9onu0_2o.swift:11:9: error:\
    \ invalid escape sequence in literal\n        case \"\\x07\":\n              \
    \ ^\n/tmp/tmp9onu0_2o.swift:13:9: error: invalid escape sequence in literal\n\
    \        case \"\\x0a\":\n               ^\n/tmp/tmp9onu0_2o.swift:15:9: error:\
    \ invalid escape sequence in literal\n        case \"\\x0d\":\n              \
    \ ^\n/tmp/tmp9onu0_2o.swift:17:9: error: invalid escape sequence in literal\n\
    \        case \"\\x0a\\x0d\":\n               ^\n/tmp/tmp9onu0_2o.swift:17:13:\
    \ error: invalid escape sequence in literal\n        case \"\\x0a\\x0d\":\n  \
    \                 ^\n/tmp/tmp9onu0_2o.swift:19:9: error: invalid escape sequence\
    \ in literal\n        case \"\\x0d\\x0a\":\n               ^\n/tmp/tmp9onu0_2o.swift:19:13:\
    \ error: invalid escape sequence in literal\n        case \"\\x0d\\x0a\":\n  \
    \                 ^\n/tmp/tmp9onu0_2o.swift:21:9: error: invalid escape sequence\
    \ in literal\n        case \"\\x0a\\x0d\\x0a\":\n               ^\n/tmp/tmp9onu0_2o.swift:21:13:\
    \ error: invalid escape sequence in literal\n        case \"\\x0a\\x0d\\x0a\"\
    :\n                   ^\n/tmp/tmp9onu0_2o.swift:21:17: error: invalid escape sequence\
    \ in literal\n        case \"\\x0a\\x0d\\x0a\":\n                       ^\n/tmp/tmp9onu0_2o.swift:23:9:\
    \ error: invalid escape sequence in literal\n        case \"\\x0d\\x0a\\x0d\"\
    :\n               ^\n/tmp/tmp9onu0_2o.swift:23:13: error: invalid escape sequence\
    \ in literal\n        case \"\\x0d\\x0a\\x0d\":\n                   ^\n/tmp/tmp9onu0_2o.swift:23:17:\
    \ error: invalid escape sequence in literal\n        case \"\\x0d\\x0a\\x0d\"\
    :\n                       ^\n/tmp/tmp9onu0_2o.swift:25:9: error: invalid escape\
    \ sequence in literal\n        case \"\\x0a\\x0d\\x0a\\x0d\":\n              \
    \ ^\n/tmp/tmp9onu0_2o.swift:25:13: error: invalid escape sequence in literal\n\
    \        case \"\\x0a\\x0d\\x0a\\x0d\":\n                   ^\n/tmp/tmp9onu0_2o.swift:25:17:\
    \ error: invalid escape sequence in literal\n        case \"\\x0a\\x0d\\x0a\\\
    x0d\":\n                       ^\n/tmp/tmp9onu0_2o.swift:25:21: error: invalid"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" {\n        return 0\n    }\n\n    var length = 0\n\
    \    for c in string {\n        switch c {\n        case '\\n', '\\r':\n     \
    \       length++\n        case '\\t':\n            length += 4\n        }\n  \
    \  }\n\n    return length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpqn1vafyg.swift:15:14: error: single-quoted string literal found,\
    \ use '\"'\n        case '\\n', '\\r':\n             ^~~~\n             \"\\n\"\
    \n/tmp/tmpqn1vafyg.swift:15:20: error: single-quoted string literal found, use\
    \ '\"'\n        case '\\n', '\\r':\n                   ^~~~\n                \
    \   \"\\r\"\n/tmp/tmpqn1vafyg.swift:17:14: error: single-quoted string literal\
    \ found, use '\"'\n        case '\\t':\n             ^~~~\n             \"\\t\"\
    \n/tmp/tmpqn1vafyg.swift:16:19: error: cannot find operator '++' in scope; did\
    \ you mean '+= 1'?\n            length++\n                  ^~\n/tmp/tmpqn1vafyg.swift:14:9:\
    \ error: switch must be exhaustive\n        switch c {\n        ^\n/tmp/tmpqn1vafyg.swift:14:9:\
    \ note: do you want to add a default clause?\n        switch c {\n        ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn strlen(string.asUTF8UnsafeBuffer())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp4dp4mewn.swift:8:16: error: missing argument label 'string:' in\
    \ call\n        return strlen(string.asUTF8UnsafeBuffer())\n                 \
    \     ^\n                      string: \n/tmp/tmp4dp4mewn.swift:8:23: error: value\
    \ of type 'String' has no member 'asUTF8UnsafeBuffer'\n        return strlen(string.asUTF8UnsafeBuffer())\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    var len = 0\n    for ch in string {\n        len += 1\n    }\n    return\
    \ len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(strlen(string: \"\") ==\
    \ 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    guard string != \"\", string.length > 0 else {\n        return 0\n  \
    \  }\n    let characters = string.characters\n    return characters.count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpag5zihxn.swift:8:32: error: value of type 'String' has no member\
    \ 'length'\n    guard string != \"\", string.length > 0 else {\n             \
    \           ~~~~~~ ^~~~~~\n/tmp/tmpag5zihxn.swift:11:29: error: 'characters' is\
    \ unavailable: Please use String directly\n    let characters = string.characters\n\
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn stringLen(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpt3sq9z06.swift:8:9: error: cannot find 'stringLen' in scope\n \
    \       return stringLen(string)\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string.count > 0 {\n        return string.count\n    } else {\n  \
    \      return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    scan(string, &rest, 0, true, 0, 0, &length, 0)\n    return length\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp34i32von.swift:8:5: error: cannot find 'scan' in scope\n    scan(string,\
    \ &rest, 0, true, 0, 0, &length, 0)\n    ^~~~\n/tmp/tmp34i32von.swift:8:19: error:\
    \ cannot find 'rest' in scope\n    scan(string, &rest, 0, true, 0, 0, &length,\
    \ 0)\n                  ^~~~\n/tmp/tmp34i32von.swift:8:41: error: cannot find\
    \ 'length' in scope\n    scan(string, &rest, 0, true, 0, 0, &length, 0)\n    \
    \                                    ^~~~~~\n/tmp/tmp34i32von.swift:9:12: error:\
    \ cannot find 'length' in scope\n    return length\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" {\n        return 0\n    }\n    var result = 1\n  \
    \  for i in 0 ..< string.count {\n        if string[i] == \" \" {\n          \
    \  return result\n        }\n        result += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpv5qfx93v.swift:13:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if string[i]\
    \ == \" \" {\n           ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn countStrings(string, \"\", \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpubn73737.swift:8:9: error: cannot find 'countStrings' in scope\n\
    \        return countStrings(string, \"\", \"\")\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string, nil, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcq59cowq.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string, nil, 0)\n           ^~~\n/tmp/tmpcq59cowq.swift:8:24: error: 'nil'\
    \ requires a contextual type\n    return len(string, nil, 0)\n               \
    \        ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" {\n        return 0\n    }\n    var len = 0\n    for\
    \ cs in string {\n        len += 1\n    }\n    return len\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\"\
    ) == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn _strlen(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpjzx_6q0p.swift:8:9: error: cannot find '_strlen' in scope\n   \
    \     return _strlen(string)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let length = string.characters.count\n    return length\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmppn7d1fq_.swift:8:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    defer { currentRunLoop().unregister(for: strlen) }\n    let ptr = C.strlen(string)\n\
    \    return toInteger(ptr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpbppkbxdo.swift:8:13: error: cannot find 'currentRunLoop' in scope\n\
    \    defer { currentRunLoop().unregister(for: strlen) }\n            ^~~~~~~~~~~~~~\n\
    /tmp/tmpbppkbxdo.swift:9:15: error: cannot find 'C' in scope\n    let ptr = C.strlen(string)\n\
    \              ^\n/tmp/tmpbppkbxdo.swift:10:12: error: cannot find 'toInteger'\
    \ in scope\n    return toInteger(ptr)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.utf16.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string.characters.count == 0 {\n        return 0\n    }\n    return\
    \ string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpfrcsomb8.swift:8:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    if string.characters.count == 0 {\n              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpfrcsomb8.swift:11:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    return string.characters.count\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if let str = string as? String {\n        let length = str.characters.count\n\
    \        return length\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpumwfx1lf.swift:8:25: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n    if let str = string as? String {\n           \
    \             ^\n/tmp/tmpumwfx1lf.swift:9:26: error: 'characters' is unavailable:\
    \ Please use String directly\n        let length = str.characters.count\n    \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tlet length = string.characters.count\n\treturn Int(length)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmph1d3m8s4.swift:8:22: error: 'characters' is unavailable: Please\
    \ use String directly\n        let length = string.characters.count\n        \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpgkvc0azi.swift:8:9: error: cannot find 'len' in scope\n       \
    \ return len(string)\n               ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if string == \"\" {\n        return 0\n    }\n\n    length := 0\n\n \
    \   end := len(string)\n\n    for i := 0; i < end; i++ {\n        if string[i]\
    \ == 0 {\n            return length\n        }\n        length += 1\n    }\n\n\
    \    return length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strlen(string: \"\"\
    ) == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp_cuxpdkn.swift:12:11: error: consecutive statements on a line must\
    \ be separated by ';'\n    length := 0\n          ^\n          ;\n/tmp/tmp_cuxpdkn.swift:12:12:\
    \ error: expected expression\n    length := 0\n           ^\n/tmp/tmp_cuxpdkn.swift:16:12:\
    \ error: expected type\n    for i := 0; i < end; i++ {\n           ^\n       \
    \     <#type#>\n/tmp/tmp_cuxpdkn.swift:16:12: error: expected 'in' after for-each\
    \ pattern\n    for i := 0; i < end; i++ {\n           ^\n/tmp/tmp_cuxpdkn.swift:16:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < end;\
    \ i++ {\n           ^\n/tmp/tmp_cuxpdkn.swift:12:5: error: cannot find 'length'\
    \ in scope\n    length := 0\n    ^~~~~~\n/tmp/tmp_cuxpdkn.swift:23:12: error:\
    \ cannot find 'length' in scope\n    return length\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn countElements(string, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp9ufk_5og.swift:8:9: error: cannot find 'countElements' in scope\n\
    \        return countElements(string, \"\")\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tif string == \"\" {\n\t\treturn 0\n\t}\n\n\treturn len(string) - string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp38lkxaoc.swift:12:9: error: cannot find 'len' in scope\n      \
    \  return len(string) - string\n               ^~~\n/tmp/tmp38lkxaoc.swift:12:23:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \        return len(string) - string\n                             ^\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tlet data = string.utf8CString\n\tif data == nil {\n\t\treturn 0\n\t}\n\t\
    return strlenOfCStringData(data, string.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpip6uqqcx.swift:9:10: warning: comparing non-optional value of type\
    \ 'ContiguousArray<CChar>' (aka 'ContiguousArray<Int8>') to 'nil' always returns\
    \ false\n        if data == nil {\n           ~~~~ ^  ~~~\n/tmp/tmpip6uqqcx.swift:12:9:\
    \ error: cannot find 'strlenOfCStringData' in scope\n        return strlenOfCStringData(data,\
    \ string.count)\n               ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\treturn len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpgkvc0azi.swift:8:9: error: cannot find 'len' in scope\n       \
    \ return len(string)\n               ^~~\n"
  stdout: ''
  timestamp: 1659978610
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n\tlet start = string.startIndex\n\treturn string.distance(from: start, to:\
    \ start+string.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpxf9du6dl.swift:9:47: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        return string.distance(from:\
    \ start, to: start+string.count)\n                                           \
    \     ~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return len(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrzzkq8.swift:8:12: error: cannot find 'len' in scope\n    return\
    \ len(string)\n           ^~~\n"
  stdout: ''
  timestamp: 1659824404
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    if let len = getStrlen(string) {\n        return len\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(strlen(string: \"\") == 0)\n\
    assert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpe4_ofqw5.swift:8:18: error: cannot find 'getStrlen' in scope\n\
    \    if let len = getStrlen(string) {\n                 ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824348
