name: HumanEval_105_by_length
language: swift
prompt: "\n/// Given an array of integers, sort the integers that are between 1 and\
  \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
  \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
  , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
  \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
  , \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty array:\n\
  /// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the array has any\
  \ strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n/// [\"One\"]\n\
  func by_length(arr: [Int]) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3])\
  \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
  ])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
  \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
  , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\",\
  \ \"Four\"])"
completions: ["\tsort.Sort(arr) // Sort from low to high\n\tlet count = arr.count\n\
    \tlet start = 1\n\tlet end = arr.count - 1\n\tvar result = Array<String>(count:\
    \ count, repeatedValue: \"\")\n\tlet current = arr[start]\n\tlet direction = true\
    \ // \"True\" is bigger than \"False\"\n\tfor index in start .. end {\n\t\tif\
    \ index == end {\n\t\t\tif current >= 10 {\n\t\t\t\tdirection = false // \"False\"\
    \ is bigger than \"True\"\n\t\t\t} else {\n\t\t\t\tdirection = true // \"True\"\
    \ is bigger than \"False\"\n\t\t\t}\n\t\t}\n\n\t\tlet next = arr[index]\n\t\t\
    let number = \"\"\n\t\tif direction {\n\t\t\tif next > current {\n\t\t\t\tnumber\
    \ += \"9\"\n\t\t\t}\n\t\t} else {\n\t\t\tif next < current {\n\t\t\t\tnumber +=\
    \ \"0\"\n\t\t\t}\n\t\t}\n\t\tif number == \"\" {\n\t\t\tnumber += \"0\"\n\t\t\
    }\n\n\t\tresult[index] = number\n\t\tcurrent = next\n\t}\n\treturn result", " \
    \ switch len(arr) {\n  case 0:\n    return []\n  case 1:\n    return [get_name_by_index(arr[0])]\n\
    \  default:\n    return reverse(reverse(arr))\n      .map { get_name_by_index($0)\
    \ }\n      .concat(reverse(arr))\n      .map { get_name_by_index($0) }\n  }",
  "    // convert input from [Int] to [String]\n    var arrString = ArraySlice(arr)\n\
    \    \n    // filter all numbers that are not between 1 and 9\n    let validArr\
    \ = arrString.filter{\n        // convert from [Int] to [String]\n        let\
    \ strNumber = strFromInt($0)\n        let number  = Int(strNumber)\n        return\
    \ 1 <= number && number <= 9\n    }\n\n    // convert from [String] to [String]\n\
    \    let resultString = ArraySlice(validArr).map{\n        let strNumber = strFromInt($0)\n\
    \        let number  = Int(strNumber)\n        \n        switch number {\n   \
    \     case 1:\n            return \"One\"\n        case 2:\n            return\
    \ \"Two\"\n        case 3:\n            return \"Three\"\n        case 4:\n  \
    \          return \"Four\"\n        case 5:\n            return \"Five\"\n   \
    \     case 6:\n            return \"Six\"\n        case 7:\n            return\
    \ \"Seven\"\n        case 8:\n            return \"Eight\"\n        case 9:\n\
    \            return \"Nine\"\n        default:\n            return strNumber\n\
    \        }\n    }\n\n    return resultString", "  let (min, max) = arr.minmaxElement()\n\
    \  let start = min == min ? \"\" : min.stringValue\n  let end = max == max ? \"\
    \" : max.stringValue\n  let result = arr.reverse().map({\n    if $0 < 10 { let\
    \ s = String($0); return s + start } else { return \"nine\" }\n  }).map({\n  \
    \  if $0 == 0 { return \"zero\" }\n    else { return String($0) + end }\n  })\n\
    \  return result", "    guard !arr.isEmpty else { return [] }\n    \n    var newArr\
    \ = arr\n    \n    for index in newArr.indices {\n        let digit = Int((index\
    \ + 1) % 10)\n        let name = DIGITS[digit]\n        newArr[index] = name\n\
    \    }\n    \n    return newArr.reversed().map {\n        $0.isEmpty ? \"Zero\"\
    \ : $0\n    }", "    if arr.isEmpty() {\n        return []\n    }\n\n    let result\
    \ = arr.filter { it in 1..9 }\n        .map { Int(\"\\($0)\") }\n        .reversed()\n\
    \        .map { $0.description }\n\n    return result", "    let ints = arr.filter{\
    \ $0 > 0 && $0 < 10 }.sorted().reverse()\n    guard ints.count > 0 else { return\
    \ [] }\n    return ints.map{ String($0) }", "    // The first digit must be in\
    \ the \"One\" group because it is 1 greater than the other digits.\n    // \"\
    One\" is the first group that is 1 greater than the rest\n    let firstGroupFirstDigit\
    \ = arr[firstIndex(arr, 1)]\n    let firstGroupLastDigit = arr[lastIndex(arr,\
    \ 1)]\n    let firstGroupCount = count(arr)\n\n    // The last digit must be in\
    \ the \"Nine\" group because it is 1 less than the other digits.\n    // \"Nine\"\
    \ is the last group that is 1 less than the rest\n    let lastGroupFirstDigit\
    \ = arr[firstIndex(arr, 9)]\n    let lastGroupLastDigit = arr[lastIndex(arr, 9)]\n\
    \    let lastGroupCount = count(arr)\n\n    if firstGroupCount == 0 && lastGroupCount\
    \ == 0 {\n        return arr\n    }\n\n    // If we have 1 digit, return it in\
    \ the \"One\" group\n    if lastGroupCount == 0 {\n        return append(arr,\
    \ firstGroupFirstDigit)\n    }\n\n    // We have at least one digit, so we must\
    \ add the digits between the \"One\" and \"Nine\" groups\n    var str = \"\"\n\
    \n    // If we have 1 or more \"One\" groups put the first digit in the \"One\"\
    \ group\n    if firstGroupCount > 0 {\n        str = append(str, firstGroupFirstDigit)\n\
    \    }\n\n    // If we have 1 or more \"Nine\" groups put the lastDigit in the\
    \ \"Nine\" group\n    if lastGroupCount > 0 {\n        str = append(str, lastGroupLastDigit)\n\
    \    }\n\n    // For each group of digits, put them in the correct order in the\
    \ \"One\" and \"Nine\" groups\n    var i = firstGroupFirstDigit\n    for _ in\
    \ 0..<firstGroupCount {\n        str = append(str, arr[i])\n        i += 1\n \
    \   }\n\n    i = lastGroupFirstDigit\n    for _ in 0..<lastGroupCount {\n    \
    \    str = append(str, arr[i])\n        i += 1\n    }\n\n    return str", "  \
    \  guard !arr.isEmpty else { return [] }\n    \n    // The \"base\" array contains\
    \ all numbers between 1 and 9 (inclusive)\n    var base: [Int] = [1...9]\n   \
    \ \n    // The \"values\" array contains all original numbers from arr\n    var\
    \ values: [String] = []\n    \n    // The \"result\" array contains all \"reversed\"\
    \ numbers from arr\n    var result: [String] = []\n    \n    // Add each element\
    \ of arr into the \"values\" array\n    for element in arr {\n        values.append(String(element))\n\
    \    }\n    \n    // Add each element of base into the \"result\" array\n    for\
    \ element in base {\n        result.append(String(element))\n    }\n    \n   \
    \ // Add each element of \"values\" into the \"result\" array\n    for element\
    \ in values {\n        if let match = result.firstIndex(of: String(element)) {\n\
    \            result[match] = String(element)\n        }\n    }\n    \n    return\
    \ result", "    guard arr.count >= 1 else {\n        return arr\n    }\n\n   \
    \ let maxDigit = log10(Float(arr.count)).ceiling()\n    return arr.sorted().map\
    \ {\n        switch $0 {\n        case Int(pow(2, $0.signum())):\n           \
    \ return \"\\(Int(pow(2, $0.signum())))\"\n        default:\n            return\
    \ String($0)\n        }\n    }", "    if arr.isEmpty() {\n        return []\n\
    \    }\n\n    if arr.first >= 1 && arr.first <= 9 {\n        let mut buf = [String]()\n\
    \        buf.append(arr.map(String::from).reversed().map { $1 == \"0\" ? \"One\"\
    \ : \"Two\" })\n        buf.append(arr.map(String::from).reversed().map { $1 ==\
    \ \"1\" ? \"Two\" : \"One\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"2\" ? \"Three\" : \"Two\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"3\" ? \"Four\" : \"Three\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"4\" ? \"Five\" : \"Four\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"5\" ? \"Six\" : \"Five\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"6\" ? \"Seven\" : \"Six\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"7\" ? \"Eight\" : \"Seven\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"8\" ? \"Nine\" : \"Eight\" })\n        buf.append(arr.map(String::from).reversed().map\
    \ { $1 == \"9\" ? \"Nine\" : \"Nine\" })\n        return buf\n    }\n\n    return\
    \ []", "    guard arr.count != 0 else {\n        return []\n    }\n    // Calculate\
    \ the max length\n    let maxLength : Int = maxElement(arr)\n    var arrayWithoutZeros\
    \ : [Int] = []\n    for i in arr {\n        if i != 0 {\n            arrayWithoutZeros.append(i)\n\
    \        }\n    }\n    // Now we know all the numbers are different\n    var finalArray\
    \ : [String] = []\n    for num in arrayWithoutZeros {\n        finalArray.append(getDigitName(num))\n\
    \    }\n    // Reverse the array\n    for i in 0..<maxLength {\n        finalArray\
    \ = finalArray.reverse()\n    }\n    // Replace the elements\n    for i in 0..<maxLength\
    \ {\n        finalArray[i] = getDigitName(arr[i])\n    }\n    return finalArray",
  "    return arr\n        .filter({$0 < 9 && $0 > 1})\n        .map { name -> [String]\
    \ in\n            let num = Int($0)\n            var digits = [String]()\n   \
    \         while num > 0 {\n                digits.append(String(num % 10)) //\
    \ [\"5\", \"4\", \"3\", \"2\", \"1\", \"1\", \"0\"]\n                num = Int(num\
    \ / 10)\n            }\n            digits.reverse()\n            let index =\
    \ digits.count\n            let number = String(digits[index])\n            return\
    \ [\n                name.lowercased() + \"\\($0)\",\n                name.lowercased()\
    \ + \"\\($1)\",\n                name.lowercased() + \"\\($2)\",\n           \
    \     name.lowercased() + \"\\($3)\",\n                name.lowercased() + \"\\\
    ($4)\",\n                name.lowercased() + \"\\($5)\",\n                name.lowercased()\
    \ + \"\\($6)\",\n                name.lowercased() + \"\\($7)\",\n           \
    \     name.lowercased() + \"\\($8)\",\n                name.lowercased() + \"\\\
    ($9)\",\n            ][index]\n        }", "    if arr.isEmpty { return [] }\n\
    \    var result = \"\"\n\n    for i in arr.indices {\n        var name = \"\"\n\
    \        switch i {\n        case 0: name = \"One\"; break\n        case 1: name\
    \ = \"Two\"; break\n        case 2: name = \"Three\"; break\n        case 3: name\
    \ = \"Four\"; break\n        case 4: name = \"Five\"; break\n        case 5: name\
    \ = \"Six\"; break\n        case 6: name = \"Seven\"; break\n        case 7: name\
    \ = \"Eight\"; break\n        case 8: name = \"Nine\"; break\n        default:\
    \ continue\n        }\n\n        if arr[i] > 9 { name = \"\\(arr[i])\"\n     \
    \   } else {\n            if arr[i] < 10 {\n                result.append(String(arr[i]))\n\
    \            } else { result.append(name) }\n        }\n    }\n\n    return result.reverse()",
  "    defer { debug() }\n    var strs: [String] = []\n    for num in arr {\n    \
    \    strs.append(from_num(num))\n    }\n    if strs.count > 0 {\n        sort(strs)\n\
    \    }\n    strs.reverse()\n    return strs", "    if !arr.isEmpty {\n       \
    \ let start = min(arr.startIndex, arr.endIndex)\n        let end = max(arr.startIndex,\
    \ arr.endIndex)\n        let result = Array(0..<end-start).map { arr[it]; return\
    \ \"\\(arr[it])\" }.joinWithSeparator(\" \")\n        guard let number = Int(result)\
    \ else { return [] }\n        switch number {\n        case 1...9:\n         \
    \   return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n        case 10...19:\n            return [\"Ten\", \"\
    Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"\
    Seventeen\", \"Eighteen\", \"Nineteen\"]\n        case 20...29:\n            return\
    \ [\"Twenty\", \"Twenty-one\", \"Twenty-two\", \"Twenty-three\", \"Twenty-four\"\
    , \"Twenty-five\", \"Twenty-six\", \"Twenty-seven\", \"Twenty-eight\", \"Twenty-nine\"\
    ]\n        case 30...39:\n            return [\"Thirty\", \"Thirty-one\", \"Thirty-two\"\
    , \"Thirty-three\", \"Thirty-four\", \"Thirty-five\", \"Thirty-six\", \"Thirty-seven\"\
    , \"Thirty-eight\", \"Thirty-nine\"]\n        case 40...49:\n            return\
    \ [\"Fourty\", \"Fourty-one\", \"Fourty-two\", \"Fourty-three\", \"Fourty-four\"\
    , \"Fourty-five\", \"Fourty-six\", \"Fourty-seven\", \"Fourty-eight\", \"Fourty-nine\"\
    ]\n        case 50...59:\n            return [\"Fifty\", \"Fifty-one\", \"Fifty-two\"\
    , \"Fifty-three\", \"Fifty-four\", \"Fifty-five\", \"Fifty-six\", \"Fifty-seven\"\
    , \"Fifty-eight\", \"Fifty-nine\"]\n        case 60...69:\n            return\
    \ [\"Sixty\", \"Sixty-one\", \"Sixty-two\", \"Sixty-three\", \"Sixty-four\", \"\
    Sixty-five\", \"Sixty-six\", \"Sixty-seven\", \"Sixty-eight\", \"Sixty-nine\"\
    ]\n        case 70...79:\n            return [\"Seventy\", \"Seventy-one\", \"\
    Seventy-two\", \"Seventy-three\", \"Seventy-four\", \"Seventy-five\", \"Seventy-six\"\
    , \"Seventy-seven\", \"Seventy-eight\", \"Seventy-", "  let sorted = arr.sorted()\n\
    \  let first = sorted[0]\n  switch first {\n  case 1:\n    return [\"One\"]\n\
    \  case 2:\n    return [\"Two\", \"One\"]\n  case 3:\n    return [\"Three\", \"\
    Two\", \"One\"]\n  case 4:\n    return [\"Four\", \"Three\", \"Two\", \"One\"\
    ]\n  case 5:\n    return [\"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n \
    \ case 6:\n    return [\"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"\
    ]\n  case 7:\n    return [\"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"One\"]\n  case 8:\n    return [\"Eight\", \"Seven\", \"Six\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"One\"]\n  case 9:\n    return [\"Nine\", \"\
    Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n\
    \  default:\n    return []\n  }", "    if arr.isEmpty() { return [] }\n    let\
    \ min = arr[0]\n    let max = arr[arr.count - 1]\n    return (0..<arr.count).map\
    \ { i in\n        let val = arr[i]\n        if val < min { return \"One\" }\n\
    \        if val > max { return \"Nine\" }\n        return String(i)\n    }", " \
    \   let maxLen = arr.count\n    return (0..<maxLen).map { i in\n        return\
    \ String(i == 0 ? 1 : arr[i])\n    }.reverse().map { String($0) }", "    return\
    \ arr\n        .filter { $0 < 10 }\n        .sorted()\n        .reversed()\n \
    \       .map {\n            switch $0 {\n            case 0: return \"Zero\"\n\
    \            case 1: return \"One\"\n            case 2: return \"Two\"\n    \
    \        case 3: return \"Three\"\n            case 4: return \"Four\"\n     \
    \       case 5: return \"Five\"\n            case 6: return \"Six\"\n        \
    \    case 7: return \"Seven\"\n            case 8: return \"Eight\"\n        \
    \    case 9: return \"Nine\"\n            }\n        }", "    let map = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    if arr.isEmpty {\n        return []\n    }\n    if arr.count != 9 {\n \
    \       return arr\n    }\n\n    var result = arr\n    for var i = 0; i <= 9;\
    \ i++ {\n        var index = 0\n        if i < 10 {\n            index = i\n \
    \       }\n        else {\n            index = i - 10\n        }\n        let\
    \ name = map[arr[index]]\n        if i == 0 {\n            result = name\n   \
    \         continue\n        }\n        result = result.map({\n            $0 ==\
    \ index ? name : $0\n        })\n    }\n    return result", "    if arr.isEmpty\
    \ {\n        return []\n    }\n\n    // Create a map from digits to names\n  \
    \  var names = [String: String]()\n    for i in arr {\n        names[String(i)]\
    \ = String(i)\n    }\n\n    // Build a list from the map\n    var list: [String]\
    \ = []\n    for (digit, name) in names {\n        for _ in 0..<arr.count {\n \
    \           if arr[_] < 1 {\n                break\n            }\n          \
    \  if digit <= arr[Int(arr[_])] {\n                list.append(name)\n       \
    \         break\n            }\n        }\n    }\n\n    // Reverse the list\n\
    \    list.reverse()\n\n    // Convert to an array of strings\n    return list.map\
    \ { $0.string }", "    let digits = Array(Set(arr))\n    let reversedDigits =\
    \ reverse(digits)\n    let names = Array(Set(reversedDigits).reversed())\n   \
    \ return zip(names, reversedDigits).map { $0.description }", "    if arr.isEmpty\
    \ {\n        return []\n    }\n    \n    let result = arr.map {\n        let digit\
    \ = String($0)\n        guard let index = digit.index(of: \"1\"),\n          \
    \  digit.index(of: \"2\"),\n            digit.index(of: \"3\"),\n            digit.index(of:\
    \ \"4\"),\n            digit.index(of: \"5\"),\n            digit.index(of: \"\
    6\"),\n            digit.index(of: \"7\"),\n            digit.index(of: \"8\"\
    ),\n            digit.index(of: \"9\") else { continue }\n        return digit[index..<digit.endIndex].reversed()\n\
    \    }\n    \n    return result.map({ $0.isEmpty ? \"\" : $0 })", "    let arr\
    \ = arr\n        .filter { $0 >= 1 } //filter all numbers in arr between 1 and\
    \ 9 inclusive\n        .sorted() //sort the array\n        .reverse() //reverse\
    \ the order\n        .map{ [1...9] }\n        .filter { $0 <= $1 } //filter out\
    \ all the number whose name less than the length of the array\n        .map {\
    \ $0 == $1 ? nil : String($0 % 10) }\n    return arr", "  let mut result = [String]()\n\
    \n  if arr.is_empty() {\n    return result\n  }\n\n  if arr.len() != 1 {\n   \
    \ return result\n  }\n\n  let min = arr[0]\n  let max = arr[0]\n\n  let mut index\
    \ = 0\n  let mut value = min + 9\n\n  while index < arr.len() {\n    let current\
    \ = arr[index]\n    if current < min {\n      min = current\n    }\n    if current\
    \ > max {\n      max = current\n    }\n\n    index += 1\n  }\n\n  let firstDigit\
    \ = min + 9\n\n  let numbersToBeReversed = max / 10 + 1\n\n  let reversedNumbers\
    \ = Array(0..<numbersToBeReversed)\n    .map(|n| reversedNumbers[Int(n)])\n\n\
    \  let currentDigit = min\n  let currentNumbers = reversedNumbers\n\n  let nextDigit\
    \ = firstDigit % 10\n  let nextNumbers = reversedNumbers.skip(nextDigit + 1)\n\
    \n  for _ in 0..<numbersToBeReversed {\n    currentDigit = (currentDigit + 9)\
    \ % 10\n    currentNumbers = nextNumbers\n\n    nextDigit = (nextDigit + 9) %\
    \ 10\n    nextNumbers = nextNumbers.skip(nextDigit + 1)\n  }\n\n  for index in\
    \ 0..<arr.len() {\n    let current = arr[index]\n    let currentDigit = current\
    \ % 10\n\n    let currentNumbersElement = currentNumbers[index].to_string()\n\n\
    \    let reversedNumbersElement = currentNumbersElement.reversed()\n\n    let\
    \ firstDigit = currentDigit\n    let firstNumbersElement = reversedNumbersElement[firstDigit]\n\
    \n    let secondDigit = (firstDigit + 9) % 10\n    let secondNumbersElement =\
    \ reversedNumbersElement.skip(secondDigit + 1).collect()\n\n    let thirdDigit\
    \ = (secondDigit + 9) % 10\n    let thirdNumbersElement = reversedNumbersElement.skip(thirdDigit\
    \ + 1).collect()\n\n    let fourthDigit = (thirdDigit + 9) % 10\n    let fourthNumbersElement\
    \ = reversedNumbersElement.skip(fourthDigit + 1).collect()\n\n    let fifthDigit\
    \ = (fourthDigit + 9) % 10\n    let fifthNumbersElement = reversedNumbersElement.skip(fifthDigit\
    \ + 1).collect()\n\n    let sixthDigit = (fifthDigit + 9) % 10\n    let sixthNumbersElement\
    \ = reversedNumbersElement.skip(sixthDigit + 1).collect()\n\n    let seventhDigit\
    \ = (sixthDigit + 9) % 10\n    let seventhNumbersElement = ", "  guard !arr.isEmpty\
    \ else { return [] }\n  func by_length(arr: [Int], index: Int) -> [String] {\n\
    \    if arr[index] >= 1 && arr[index] <= 9 {\n      return [\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][arr[index]\
    \ - 1]\n    } else {\n      return []\n    }\n  }\n  return arr.sort(by_length).reduce([],\
    \ by: by_length)", "    if arr == [] {\n        return []\n    }\n    var result\
    \ = [String]()\n    for x in arr {\n        if x != 0 && x % 10 == 0 {\n     \
    \       switch x % 10 {\n            case 1:\n                result.append(\"\
    One\")\n            case 2:\n                result.append(\"Two\")\n        \
    \    case 3:\n                result.append(\"Three\")\n            case 4:\n\
    \                result.append(\"Four\")\n            case 5:\n              \
    \  result.append(\"Five\")\n            case 6:\n                result.append(\"\
    Six\")\n            case 7:\n                result.append(\"Seven\")\n      \
    \      case 8:\n                result.append(\"Eight\")\n            case 9:\n\
    \                result.append(\"Nine\")\n            default:\n             \
    \   break\n            }\n        } else {\n            result.append(String(x))\n\
    \        }\n    }\n    return result.reverse().map { $0.string }", "    guard\
    \ arr.count > 0 else { return [] }\n\n    var numbers = arr.map { $0.description(withLocale:\
    \ nil) }\n    let minStr = numbers.min().description(withLocale: nil)\n    let\
    \ maxStr = numbers.max().description(withLocale: nil)\n\n    if minStr == maxStr\
    \ {\n        return numbers[0...]\n    }\n\n    var reversed = Array(numbers.suffix(from:\
    \ numbers.index(of: maxStr)))\n    reversed.append(minStr)\n    return reversed",
  "    if arr.isEmpty {\n        return []\n    }\n    let minInt = arr[0]\n    let\
    \ maxInt = arr[arr.count - 1]\n    let sortedInts = arr.sort().map {\n       \
    \ if $0 >= minInt && $0 <= maxInt {\n            String($0)\n        } else {\n\
    \            \"\"\n        }\n    }\n    let reversedInts = sortedInts.reverse()\n\
    \    return reversedInts.map { String(by_length(arr: $0)) }", '    return sortAndReverse(arr).map
    { String($0) }', "    if arr == nil || arr.length == 0 || arr[0] == -1 || arr[0]\
    \ == 1 || arr[0] == 0 {\n        return []\n    }\n\n    var result = [String]()\n\
    \    var length = arr.count\n    if length == 0 {\n        return arr\n    }\n\
    \n    for i in 0..<length {\n        if arr[i] < 1 || arr[i] > 9 {\n         \
    \   continue\n        }\n\n        var index = length - 1\n        var currentChar\
    \ = String()\n        while (index >= 0) {\n            currentChar = String.fromCharCode(arr[index--])\n\
    \            if index == 0 {\n                break\n            }\n         \
    \   if currentChar == \"1\" {\n                result.append(formatter.one())\n\
    \            } else if currentChar == \"2\" {\n                result.append(formatter.two())\n\
    \            } else if currentChar == \"3\" {\n                result.append(formatter.three())\n\
    \            } else if currentChar == \"4\" {\n                result.append(formatter.four())\n\
    \            } else if currentChar == \"5\" {\n                result.append(formatter.five())\n\
    \            } else if currentChar == \"6\" {\n                result.append(formatter.six())\n\
    \            } else if currentChar == \"7\" {\n                result.append(formatter.seven())\n\
    \            } else if currentChar == \"8\" {\n                result.append(formatter.eight())\n\
    \            } else if currentChar == \"9\" {\n                result.append(formatter.nine())\n\
    \            }\n        }\n    }\n\n    return result", "    var result = Array<String>()\n\
    \    for element in arr {\n        if element >= 1 && element <= 9 {\n       \
    \     let index = element - 1\n            result.append(strings[index])\n   \
    \     }\n    }\n    return result", "    let len = arr.count\n    guard len >\
    \ 0 else { return [] }\n    let min = arr.min()!\n    let max = arr.max()!\n \
    \   \n    let digits = Int32(max).digitsString(\n        withWidth: 4,\n     \
    \   padding: .left,\n        minimumIntegerDigits: 6,\n        usesGrouping: false)\n\
    \    let digitsCount = digits.count\n\n    var res = [String]()\n\n    for i in\
    \ 0..<digitsCount {\n        let digit = Int(digits[i])\n        guard digit >\
    \ 0 && digit < 10 else { continue }\n        \n        let name = digits[digit]\n\
    \        if digit == min {\n            res.append(name + \" One\")\n        }\
    \ else if digit == max {\n            res.append(name + \" Nine\")\n        }\
    \ else {\n            res.append(name + digits[digit])\n        }\n    }\n   \
    \ \n    res.reverse()\n    \n    return res", "    var result = [String]()\n \
    \   for element in arr {\n        guard element >= 0 && element <= 9 else {\n\
    \            continue\n        }\n        switch element {\n        case 1:\n\
    \            append(\"One\")\n        case 2:\n            append(\"Two\")\n \
    \       case 3:\n            append(\"Three\")\n        case 4:\n            append(\"\
    Four\")\n        case 5:\n            append(\"Five\")\n        case 6:\n    \
    \        append(\"Six\")\n        case 7:\n            append(\"Seven\")\n   \
    \     case 8:\n            append(\"Eight\")\n        case 9:\n            append(\"\
    Nine\")\n        default:\n            append(element)\n        }\n    }\n   \
    \ return result.reverse()", "  var result = [String]()\n  for n in arr {\n   \
    \ if n < 1 {\n      continue\n    }\n    switch n {\n    case 1:\n      result.append(getNameFromNumber(1))\n\
    \    case 2:\n      result.append(getNameFromNumber(2))\n    case 3:\n      result.append(getNameFromNumber(3))\n\
    \    case 4:\n      result.append(getNameFromNumber(4))\n    case 5:\n      result.append(getNameFromNumber(5))\n\
    \    case 6:\n      result.append(getNameFromNumber(6))\n    case 7:\n      result.append(getNameFromNumber(7))\n\
    \    case 8:\n      result.append(getNameFromNumber(8))\n    case 9:\n      result.append(getNameFromNumber(9))\n\
    \    default:\n      break\n    }\n  }\n  return result", "    if arr.isEmpty()\
    \ {\n        return []\n    }\n    let arr2 = arr.map{ $0 < 0 ? -$0 : $0 }\n \
    \   guard arr2.count > 0 else {\n        return []\n    }\n    let max = arr2.max()\n\
    \    guard max < 10 else {\n        return []\n    }\n    let tens = (0..9).map{\
    \ Int(\"\\(max)\\($0)\", radix: 16) }\n    let zeros = (max * 10..<max).map{ Int(\"\
    \\($0)\", radix: 16) }\n    guard max <= 9 else {\n        return []\n    }\n\
    \    arr2.forEach { i in\n        if i >= 1 && i <= 9 {\n            arr2.remove(at:\
    \ i)\n            arr2.insert(i, tens[i-1]!)\n            arr2.insert(i, zeros[i-9]!)\n\
    \        }\n    }\n    return arr2.map{ String(i) }", "    let digits = String(arr)\n\
    \    let startsWithOne = digits[digits.startIndex..<digits.startIndex.advancedBy(2)]\
    \ == \"10\"\n    return startsWithOne ?\n        [\n            digits[digits.startIndex.advancedBy(0)..<digits.startIndex.advancedBy(1)],\n\
    \            digits[digits.startIndex.advancedBy(1)..<digits.startIndex.advancedBy(2)],\n\
    \            digits[digits.startIndex.advancedBy(2)..<digits.startIndex.advancedBy(3)],\n\
    \            digits[digits.startIndex.advancedBy(3)..<digits.startIndex.advancedBy(4)],\n\
    \            digits[digits.startIndex.advancedBy(4)..<digits.startIndex.advancedBy(5)],\n\
    \            digits[digits.startIndex.advancedBy(5)..<digits.startIndex.advancedBy(6)],\n\
    \            digits[digits.startIndex.advancedBy(6)..<digits.startIndex.advancedBy(7)],\n\
    \            digits[digits.startIndex.advancedBy(7)..<digits.startIndex.advancedBy(8)],\n\
    \            digits[digits.startIndex.advancedBy(8)..<digits.startIndex.advancedBy(9)],\n\
    \            digits[digits.startIndex.advancedBy(9)..<digits.startIndex.advancedBy(10)],\n\
    \        ] :\n        [\n            digits[digits.startIndex.advancedBy(0)..<digits.startIndex.advancedBy(1)],\n\
    \            digits[digits.startIndex.advancedBy(1)..<digits.startIndex.advancedBy(2)],\n\
    \            digits[digits.startIndex.advancedBy(2)..<digits.startIndex.advancedBy(3)],\n\
    \            digits[digits.startIndex.advancedBy(3)..<digits.startIndex.advancedBy(4)],\n\
    \            digits[digits.startIndex.advancedBy(4)..<digits.startIndex.advancedBy(5)],\n\
    \            digits[digits.startIndex.advancedBy(5)..<digits.startIndex.advancedBy(6)],\n\
    \            digits[digits.startIndex.advancedBy(6)..<digits.startIndex.advancedBy(7)],\n\
    \            digits[digits.startIndex.advancedBy(7)..<digits.startIndex.advancedBy(8)],\n\
    \            digits[digits.startIndex.advancedBy(8)..<digits.startIndex.advancedBy(9)],\n\
    \            digits[digits.startIndex.advancedBy(9)..<digits.startIndex.advancedBy(10)],\n\
    \        ]", "\tsort.Sort(func(i, j int) bool {\n\t\treturn arr[i] >= 1\n\t\t\t\
    && arr[j] >= 9\n\t\t\t&& arr[i] <= 9\n\t\t\t&& arr[j] <= 9\n\t})\n\tsort.Sort(func(i,\
    \ j int) bool {\n\t\treturn arr[i] >= 2\n\t\t\t&& arr[j] >= 8\n\t\t\t&& arr[i]\
    \ <= 8\n\t\t\t&& arr[j] <= 8\n\t})\n\tfor idx, val := range arr {\n\t\tarr[idx]\
    \ = StringInt(val)\n\t}\n\treturn arr", "    var numbers = [Int]()\n    for number\
    \ in arr {\n        if number <= 9 {\n            numbers.append(number)\n   \
    \     } else {\n            numbers.append(Int64(number))\n        }\n    }\n\
    \    let numbers = numbers.sorted(by: <)\n    let reverse = numbers.reversed()\n\
    \    var result = reverse.map{\n        switch Int($0) {\n        case 1, -1:\
    \ return\n        case 9: return \"Nine\"\n        default:\n            return\
    \ String($0)\n        }\n    }\n    if result.count == 0 {\n        return nil\n\
    \    }\n    return result", "    var result = [String]()\n    if !arr.isEmpty\
    \ {\n        arr.sortInPlace(&compareNumber)\n        arr.reverse()\n        for\
    \ idx in 0..<arr.count {\n            let num = arr[idx]\n            if num !=\
    \ -1 {\n                result.append(numberToName(num))\n            }\n    \
    \    }\n    }\n    return result", "    guard arr.count >= 1 else {\n        return\
    \ []\n    }\n    \n    switch arr.count {\n    case 1...9: //Nothing to do here\n\
    \        return arr\n    case 0...8:\n        if arr[0] == 1 {\n            return\
    \ [\"One\"]\n        } else {\n            return [\"Zero\", \"One\"]\n      \
    \  }\n    case 7...13:\n        return [\"Seven\", \"Eight\", \"Nine\"]\n    case\
    \ 12...18:\n        if arr[0] == 1 {\n            return [\"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\"]\n        }\
    \ else {\n            return [\"Twelve\", \"Ten\", \"Eleven\", \"Fourteen\", \"\
    Eightteen\", \"Sixteen\", \"Seventeen\", \"Nineteen\"]\n        }\n    case 19...23:\n\
    \        return [\"Nineteen\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"\
    Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n    case 24...29:\n        return\
    \ [\"Twenty\", \"Forty\", \"Eighty\", \"Ninety\"]\n    default:\n        let reversed\
    \ = reverse(arr)\n        return by_length(reversed)\n    }", "    if arr.isEmpty()\
    \ { return [] }\n    var output = [String]()\n    let low = arr[0]\n    let high\
    \ = arr[arr.count-1]\n    \n    func by_number(n: Int, arr: [Int]) -> [String]\
    \ {\n        if n == 1 {\n            output = append(output, \"One\")\n     \
    \       return output\n        }\n        \n        if n == 2 {\n            output\
    \ = append(output, \"Two\")\n            return output\n        }\n        \n\
    \        if n == 3 {\n            output = append(output, \"Three\")\n       \
    \     return output\n        }\n        \n        if n == 4 {\n            output\
    \ = append(output, \"Four\")\n            return output\n        }\n        \n\
    \        if n == 5 {\n            output = append(output, \"Five\")\n        \
    \    return output\n        }\n        \n        if n == 6 {\n            output\
    \ = append(output, \"Six\")\n            return output\n        }\n        \n\
    \        if n == 7 {\n            output = append(output, \"Seven\")\n       \
    \     return output\n        }\n        \n        if n == 8 {\n            output\
    \ = append(output, \"Eight\")\n            return output\n        }\n        \n\
    \        if n == 9 {\n            output = append(output, \"Nine\")\n        \
    \    return output\n        }\n        \n        if n >= 10 && n <= 9 {\n    \
    \        let lower = arr[(n - 1)]\n            let upper = arr[n - 2]\n      \
    \      \n            if lower < n && n < high {\n                output.append(by_number(n,\
    \ arr))\n            }\n            else if lower >= n && lower < high {\n   \
    \             output = append(output, \"One\")\n                return output\n\
    \            }\n            else if n > lower && n < high {\n                output\
    \ = append(output, \"Two\")\n                return output\n            }\n  \
    \          else if lower >= n {\n                output = append(output, \"One\"\
    )\n                return output\n            }\n            else if n > lower\
    \ {\n                output = append(output, \"Two\")\n                return\
    \ output\n            }\n            else if upper >= n {\n                output\
    \ = append(output, \"Three\")\n                return output\n            }\n\
    \            else {\n                output = append(output, \"Four\")\n     \
    \           return output\n            }\n        }\n        \n        return\
    \ []\n    }\n    \n    output = by_number(low, arr)\n    output = by_number(high,\
    \ output)\n    return output", "    func next_to_one_digit_string(num: Int) ->\
    \ String {\n        let str = String(num)\n        let zeroCount = str.prefix(3).count\n\
    \        let zeroStr = String(count: zeroCount < 1 ? zeroCount * 3 - 1 : zeroCount\
    \ - 1, repeatedValue: \"Zero\")\n        return zeroStr + str\n    }\n\n    func\
    \ get_digit(current: Int, arr: [Int]) -> String {\n        let digit = String(arr[current])\n\
    \        if current < 9 { // if the current character is 9 or less than 9, then\
    \ it's an empty digit, don't append it\n            return digit\n        }\n\
    \        let remainder = current % 10\n        let isFirstDigit = current == 0\n\
    \        let isLastDigit = current == arr.count\n        if isFirstDigit || isLastDigit\
    \ { // if the current character is the first or last digit, then add \"One\" or\
    \ \"Two\", if possible\n            let first = String(arr[current - 1])\n   \
    \         let second = String(arr[current + 1])\n            if current == arr.count\
    \ - 1 { // if the current character is the last digit, then add \"Nine\"\n   \
    \             return \"Nine\"\n            }\n            if first != \"\" {\n\
    \                return \"One\"\n            }\n            if second != \"\"\
    \ {\n                return \"Two\"\n            }\n            return digit\n\
    \        }\n        if current == 9 { // if the current character is 9, then add\
    \ \"Nine\"\n            return \"Nine\"\n        }\n        return digit\n   \
    \ }\n\n    func getSorted(input: [Int]) -> [String] {\n        var output = input\n\
    \        let isLast = output.count == 9\n        if !isLast {\n            for\
    \ index in 0..<output.count {\n                output[index] = Int(output[index])!\n\
    \                output[index] = getDigit(index, output)\n            }\n    \
    \        output = output.reversed()\n        }\n        return isLast ? output\
    \ : output.map {\n            let zeroCount = $0.prefix(3).count\n           \
    \ let zeroStr = String(count: zeroCount < 1 ? zeroCount * 3 - 1 : zeroCount -\
    \ 1, repeatedValue: \"Zero\")\n            return zeroStr + $0\n        }\n  \
    \  }\n\n    return getSorted(arr).map {\n        let zeroCount = $0.prefix(3).count\n\
    \        let zeroStr = String(count: zeroCount < 1 ? zeroCount * 3 - 1 : zeroCount\
    \ - 1, repeatedValue: \"Zero\")\n        return zeroStr + $0\n    }", "    let\
    \ (first, last) = arr.span(where: {\n        $0 > 0 && $0 < 10\n    })\n    if\
    \ arr.isEmpty() {\n        return []\n    }\n\n    let reversed = last.reverse()\n\
    \    let firstString = first.map {\n        switch $0 {\n        case 1: return\
    \ \"One\"\n        case 2: return \"Two\"\n        case 3: return \"Three\"\n\
    \        case 4: return \"Four\"\n        case 5: return \"Five\"\n        case\
    \ 6: return \"Six\"\n        case 7: return \"Seven\"\n        case 8: return\
    \ \"Eight\"\n        case 9: return \"Nine\"\n        }\n    }\n\n    return firstString.append(reversed)",
  '    return arr.reduce([String]()) { $0 + [One[$1]] + [$0] }', "    if arr == nil\
    \ || len(arr) == 0 {\n        return []\n    }\n    var names = [String]()\n \
    \   for i in arr {\n        names.append(stringWithDigits(i))\n    }\n    let\
    \ sortedNames = names.sorted(by: { (lhs, rhs) -> Bool in\n        return lhs.utf8.count\
    \ < rhs.utf8.count\n    })\n    let reversedNames = sortedNames.reversed()\n \
    \   return reversedNames.map { nameWithDigits($0) }", "    switch len(arr) {\n\
    \    case 0:\n        return []\n    case 1:\n        return [\"One\"]\n    case\
    \ 2:\n        return [\"One\", \"Two\"]\n    case 3:\n        return [\"One\"\
    , \"Two\", \"Three\"]\n    case 4:\n        return [\"One\", \"Two\", \"Three\"\
    , \"Four\"]\n    case 5:\n        return [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\"]\n    case 6:\n        return [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\"]\n    case 7:\n        return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\"]\n    case 8:\n        return [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"]\n   \
    \ case 9:\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"]\n    default:\n        let start = arr[0]\n\
    \        let end = arr[arr.count - 1]\n        return reverse_sort(arr.prefix(start)).map\
    \ { $0.map(String.init(describing:)) ?? \"One\" }\n            .map { \"\\($0)\"\
    .lowercased() } + reverse_sort(arr.suffix(end)).map { $0.map(String.init(describing:))\
    \ ?? \"One\" }\n            .map { \"\\($0)\".lowercased() }\n    }", "    guard\
    \ !arr.isEmpty() else {\n        return []\n    }\n    var names = [String]()\n\
    \    var i = arr.firstIndex(of: 0)\n    while i < arr.endIndex {\n        var\
    \ name = \"\"\n        if i > 0 {\n            name += names[i]\n        }\n \
    \       if i == arr.firstIndex(of: 9) {\n            name += \"Nine\"\n      \
    \  } else {\n            name += names[i]\n        }\n        i += 1\n       \
    \ if i >= arr.endIndex {\n            name += \"Zero\"\n        } else {\n   \
    \         name += names[i]\n        }\n        names.append(name)\n    }\n   \
    \ return names", '  return sort(arr).reverse().map { numberToString($0) }', "\t\
    if arr.isEmpty() {\n\t\treturn []\n\t}\n\tnums := arr.sorted()\n\tvar arr2 : [String]\
    \ = []\n\tswitch nums.last {\n\tcase 1:\n\t\tarr2 = append(arr2, \"One\")\n\t\
    case 2:\n\t\tarr2 = append(arr2, \"Two\")\n\tcase 3:\n\t\tarr2 = append(arr2,\
    \ \"Three\")\n\tcase 4:\n\t\tarr2 = append(arr2, \"Four\")\n\tcase 5:\n\t\tarr2\
    \ = append(arr2, \"Five\")\n\tcase 6:\n\t\tarr2 = append(arr2, \"Six\")\n\tcase\
    \ 7:\n\t\tarr2 = append(arr2, \"Seven\")\n\tcase 8:\n\t\tarr2 = append(arr2, \"\
    Eight\")\n\tcase 9:\n\t\tarr2 = append(arr2, \"Nine\")\n\tdefault:\n\t\tbreak\n\
    \t}\n\treturn arr2", "  let minLen = min(arr), maxLen = max(arr)\n  if maxLen\
    \ > 10 {\n    // A trick here is to sort by length first, then sort by value,\
    \ which is\n    // faster than sort by value, then sort by length. Because this\
    \ is\n    // sorted by length, the minimum length is 1.\n    arr = arr.sorted(by:\
    \ { (a: Int, b: Int) -> Bool in\n      return b - a <= 0\n    })\n  }\n\n  var\
    \ res: [String] = []\n  for (i in arr) {\n    let len = (10 - i) as Int\n    if\
    \ len >= minLen && len <= maxLen {\n      res.append(String(i))\n    }\n  }\n\n\
    \  // reverse result array\n  return res.reversed()", "    guard arr.count > 0\
    \ else { return [] }\n    var sorted = [Int]()\n    for i in 0..<arr.count {\n\
    \        if arr[i] == Int(min) {\n            sorted.append(Int(min))\n      \
    \  } else {\n            sorted.append(arr[i])\n        }\n    }\n    sorted.sort()\n\
    \    return sorted.map{\n        if $0 == Int(min) {\n            return \"One\"\
    \n        } else if $0 == Int(max) {\n            return \"Nine\"\n        } else\
    \ {\n            return String($0)\n        }\n    }", "    let max = max_index_in_array(arr)\n\
    \n    var result = [String]()\n    for i in 0..<max {\n        let number = arr[i]\n\
    \        if number <= 9 {\n            let name = arr[number]\n            result.append(name)\n\
    \        }\n    }\n\n    result.reverse()\n\n    for index in 0..<max {\n    \
    \    let name = result[index]\n        if name == nil {\n            continue\n\
    \        }\n        let index = index * 10 + Int(name!)!\n        let name = names[index]\n\
    \        result[index] = name\n    }\n\n    return result", "    if arr == nil\
    \ {\n        return nil\n    }\n    var result = [String]()\n    var lengths =\
    \ [Int]()\n    var lastLength = 0\n    for number in arr {\n        if number\
    \ == -1 {\n            lastLength = 0\n            continue\n        }\n     \
    \   switch number {\n        case 0:\n            lengths = append(lengths, 0)\n\
    \        case 1, 10, 11:\n            lengths = append(lengths, 0)\n        case\
    \ 2, 9:\n            lengths = append(lengths, 1)\n        case 3, 8, 7:\n   \
    \         lengths = append(lengths, 1)\n        case 4:\n            lengths =\
    \ append(lengths, 2)\n        case 5, 6:\n            lengths = append(lengths,\
    \ 2)\n        case 8, 6:\n            lengths = append(lengths, 3)\n        case\
    \ 9:\n            lengths = append(lengths, 3)\n        default:\n           \
    \ lengths = append(lengths, number - lastLength + 1)\n        }\n        lastLength\
    \ = number\n    }\n    for index, length := range lengths {\n        if length\
    \ > 0 {\n            if length > 1 {\n                switch length - 1 {\n  \
    \              case 2, 3:\n                    result = append(result, getName(1))\n\
    \                case 4, 5:\n                    result = append(result, getName(2))\n\
    \                case 6, 7:\n                    result = append(result, getName(3))\n\
    \                default:\n                    result = append(result, getName(length\
    \ - 1))\n                }\n            } else {\n                result = append(result,\
    \ getName(length))\n            }\n        } else {\n            if index != 0\
    \ {\n                result = append(result, \"One\")\n            } else {\n\
    \                result = append(result, \"Zero\")\n            }\n        }\n\
    \    }\n    return result", "    if arr.isEmpty { return [] }\n    var lens =\
    \ [Int]()\n    for n in arr {\n        if n < 0 || n > 9 {\n            continue\n\
    \        }\n        lens.append(n)\n    }\n    if lens.isEmpty() { return [] }\n\
    \    sort.Sort(func(x, y Int) bool { return x > y })\n    let reversed = rev(revn(arr))\n\
    \    var i = 0\n    for n in lens {\n        if n < 1 || n > 9 {\n           \
    \ continue\n        }\n        if i > 0 {\n            reversed[i] = reversed[i-1]\n\
    \        }\n        i = i + 1\n    }\n    lens.reverse()\n    i = 0\n    var result\
    \ = [String]()\n    for n in lens {\n        if n < 1 || n > 9 {\n           \
    \ continue\n        }\n        if i > 0 {\n            result.append(reversed[i])\n\
    \        }\n        i = i + 1\n    }\n    return result", "    if arr == [] {\n\
    \        return arr\n    }\n    let mut arr2 = arr\n    arr2.reverse()\n    let\
    \ mut name = \"\"\n    for i in arr2 {\n        name += stringFromDigit(i)\n \
    \   }\n    return arr == arr2 ? [\"\"] : name", "  if len(arr) == 0 {\n    return\
    \ []\n  }\n  if arr.len() == 1 {\n    return [\"One\"]\n  }\n  var result: [String]\
    \ = []\n  for i in 0..<arr.count {\n    if i > 0 {\n      result = append(result,\
    \ String(arr[i]))\n    } else {\n      result = append(result, String(arr[i]))\n\
    \    }\n  }\n  return result.reverse()", "    if arr == nil {\n        return\
    \ nil\n    }\n    var names = Array(zip(range(1,10), [\n        \"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\",\n  \
    \  ]))\n    var reversed = reverse(arr)\n    var result = Array(names)\n    for\
    \ i in reversed.indices {\n        result[reversed.startIndex + i] = names[i].1\n\
    \    }\n    return result", "    var result: [String] = []\n    sort.Sort(IntSliceAscending(arr))\n\
    \    for i := 0; i < len(arr); i++ {\n        var current = \"\"\n        if i\
    \ < 10 {\n            current = \"One\"\n        } else if i < 18 {\n        \
    \    current = \"Two\"\n        } else if i < 36 {\n            current = \"Three\"\
    \n        } else if i < 45 {\n            current = \"Four\"\n        } else if\
    \ i < 54 {\n            current = \"Five\"\n        } else if i < 63 {\n     \
    \       current = \"Six\"\n        } else if i < 72 {\n            current = \"\
    Seven\"\n        } else if i < 81 {\n            current = \"Eight\"\n       \
    \ } else if i < 90 {\n            current = \"Nine\"\n        } else {\n     \
    \       continue\n        }\n        result = append(result, current)\n    }\n\
    \    return result", "    if arr.isEmpty {\n        return [:] as [String]\n \
    \   }\n    var index = 0\n    var result = [String]()\n    while index < arr.count\
    \ {\n        guard let first = arr[index] else {\n            return result\n\
    \        }\n        if first >= 1 && first <= 9 {\n            var temp = first\n\
    \            result.append(map[temp])\n        }\n        index++\n    }\n   \
    \ return result", "    guard !arr.isEmpty else { return [] }\n    var result =\
    \ Array<String>(repeating: \"\", count: arr.count)\n\n    // sort the array\n\
    \    let sorted = arr.sorted()\n    let range = sorted.first!...sorted.last!\n\
    \n    // reverse the array\n    var reversed = Array<Int>(repeating: Int.max,\
    \ count: arr.count)\n    for i in 0..<arr.count {\n        reversed[i] = sorted[range.index(range.startIndex,\
    \ offsetBy: i)]\n    }\n\n    // convert the integers to string and assign it\
    \ to the array\n    for i in 0..<arr.count {\n        result[i] = String(reversed[i])\n\
    \    }\n\n    return result", "    let (mut ls, mut rs) = ([], []);\n    for n\
    \ in arr {\n        if n > 0 && n < 9 {\n            ls.append(names[n]);\n  \
    \      } else {\n            rs.append(names[n]);\n        }\n    }\n    rs.reverse();\n\
    \    ls.extend(rs);\n    return ls;", "    var result = [String]()\n    var n\
    \ = arr[0]\n    var digits = [String]()\n    var tens = [String]()\n    var hundreds\
    \ = [String]()\n    var thousands = [String]()\n    var ones = [String]()\n  \
    \  var names = [String]()\n    var i = 0\n    while i < arr.count {\n        n\
    \ = arr[i]\n        switch n {\n        case 1:\n            ones.append(\"One\"\
    )\n        case 2:\n            ones.append(\"Two\")\n        case 3:\n      \
    \      ones.append(\"Three\")\n        case 4:\n            ones.append(\"Four\"\
    )\n        case 5:\n            ones.append(\"Five\")\n        case 6:\n     \
    \       ones.append(\"Six\")\n        case 7:\n            ones.append(\"Seven\"\
    )\n        case 8:\n            ones.append(\"Eight\")\n        case 9:\n    \
    \        ones.append(\"Nine\")\n        case 10:\n            tens.append(\"Ten\"\
    )\n        case 11:\n            tens.append(\"Eleven\")\n        case 12:\n \
    \           tens.append(\"Twelve\")\n        case 13:\n            tens.append(\"\
    Thirteen\")\n        case 14:\n            tens.append(\"Fourteen\")\n       \
    \ case 15:\n            tens.append(\"Fifteen\")\n        case 16:\n         \
    \   tens.append(\"Sixteen\")\n        case 17:\n            tens.append(\"Seventeen\"\
    )\n        case 18:\n            tens.append(\"Eighteen\")\n        case 19:\n\
    \            tens.append(\"Nineteen\")\n        case 20:\n            hundreds.append(\"\
    Hundred\")\n        case 30:\n            hundreds.append(\"Thousand\")\n    \
    \    case 40:\n            hundreds.append(\"Thousand\")\n        case 50:\n \
    \           hundreds.append(\"Fifty\")\n        case 60:\n            hundreds.append(\"\
    Sixty\")\n        case 70:\n            hundreds.append(\"Seventy\")\n       \
    \ case 80:\n            hundreds.append(\"Hundred\")\n        case 90:\n     \
    \       thousands.append(\"Hundred\")\n        case 100:\n            thousands.append(\"\
    Thousand\")\n        case 200:\n            thousands.append(\"Thousand\")\n \
    \       case 300:\n            thousands.append(\"Fifty\")\n        case 400:\n\
    \            thousands.append(\"Fifty\")\n        case 500:\n            thousands.append(\"\
    Sixty\")\n        case 600:\n            thousands.append(\"Sixty\")\n       \
    \ case 700:\n            thousands.append(\"Seventy\")\n        case 800:\n  \
    \          thousands.append(\"Seventy\")\n        case 900:\n            thousands.append(\"\
    Eighty\")\n        case 1000:\n            thousands.append(\"Eighty\")\n    \
    \    case 2000:\n            thousands.append(\"Ninety\")\n        case 3000:\n\
    \            thousands.append(\"", "    if arr.isEmpty() {\n        return []\n\
    \    }\n    var result = [String]()\n    var reversed = arr[1..<arr.count].sorted()\n\
    \    var reversedReversed = reversed.reversed()\n    for i in 0..<reversed.count\
    \ {\n        if reversed[i] != 0 {\n            let number = reversedReversed[i]\n\
    \            if number > 0 {\n                result.append(\"\\(number)\")\n\
    \            } else {\n                result.append(Int(number / 10).descriptionFromOneToTen)\n\
    \                result.append(number % 10.toString())\n            }\n      \
    \  }\n    }\n    return result", "  var strs: [String] = []\n  for n in arr {\n\
    \    if n > 0 && n < 10 {\n      strs.append(\"\\(names[n])\")\n    }\n  }\n \
    \ if strs.isEmpty {\n    return []\n  }\n  strs.reverse()\n  return strs", "\t\
    var result = [String]()\n\tvar startIndex = 0\n\tvar endIndex = 0\n\tvar isOddNumber\
    \ = false\n\tfor index, number in arr.enumerated() {\n\t\tendIndex = index\n\t\
    \tisOddNumber = number % 2 == 1\n\t\tif startIndex == 0 && number != 0 {\n\t\t\
    \tstartIndex = 1\n\t\t\tisOddNumber = false\n\t\t}\n\t\tif !isOddNumber && number\
    \ >= 1 && number <= 9 {\n\t\t\tresult.append(arr[startIndex])\n\t\t\tstartIndex++\n\
    \t\t}\n\t\tif isOddNumber && number < 10 {\n\t\t\tresult.append(array[startIndex])\n\
    \t\t\tstartIndex++\n\t\t}\n\t\tif startIndex == endIndex {\n\t\t\tbreak\n\t\t\
    }\n\t}\n\treturn result", "    if arr.isEmpty {\n        return []\n    }\n  \
    \  if arr.count == 0 {\n        return nil\n    }\n    if arr.count == 1 {\n \
    \       return [\"One\"]\n    }\n    var arrRev = [Int]()\n    arr.rev()\n   \
    \ var arrDig = arr\n    arrDig.reverse()\n    for digit in arrDig {\n        arrRev.append(Int(digit))\n\
    \    }\n    var resultArr = [String]()\n    var index = 0\n    while index < arrRev.count\
    \ {\n        let digit = arrRev[index]\n        switch digit {\n        case 1:\n\
    \            resultArr.append(arr[index])\n        case 2:\n            resultArr.append(arr[index])\n\
    \        case 3:\n            resultArr.append(arr[index])\n        case 4:\n\
    \            resultArr.append(arr[index])\n        case 5:\n            resultArr.append(arr[index])\n\
    \        case 6:\n            resultArr.append(arr[index])\n        case 7:\n\
    \            resultArr.append(arr[index])\n        case 8:\n            resultArr.append(arr[index])\n\
    \        case 9:\n            resultArr.append(arr[index])\n        default:\n\
    \            resultArr.append(\"\")\n        }\n        index += 1\n    }\n  \
    \  return resultArr", '    return map(by_len_2, arr)', "    var result = [String]()\n\
    \    if arr == nil {\n        return result\n    }\n    if !arr.removeFirst()\
    \ {\n        return result\n    }\n    let base = [\n        One: \"One\",\n \
    \       Two: \"Two\",\n        Three: \"Three\",\n        Four: \"Four\",\n  \
    \      Five: \"Five\",\n        Six: \"Six\",\n        Seven: \"Seven\",\n   \
    \     Eight: \"Eight\",\n        Nine: \"Nine\"\n    ]\n    var result2 = [String]()\n\
    \    for i in arr {\n        let num = (10 * i) + 1 as Int\n        let num =\
    \ String(i).replacingOccurrences(of: \"0\", with: \"9\")\n        if let idx =\
    \ base[num] {\n            result2.append(idx)\n        } else {\n           \
    \ result2.append(num)\n        }\n    }\n    result.reverse()\n    for i in result2\
    \ {\n        result.append(i)\n    }\n    return result", "    if arr.isEmpty()\
    \ {\n        return []\n    }\n    \n    var result: [String] = []\n    \n   \
    \ let min = min(arr.map { $0 })\n    let max = max(arr.map { $0 })\n    \n   \
    \ let arrLen = arr.count\n    var i: Int\n    for i = min + 1; i <= max; i++ {\n\
    \        let tmp = i\n        if i > arrLen {\n            continue\n        }\n\
    \        result.append((arr[tmp - min] / 10).string() + arr[tmp - min].string()\
    \ + name(i))\n    }\n    \n    return result.reversed().map { $0.substringWithRange($0.startIndex...)\
    \ }", '  return arr.sort.reverse.map { name_to_number[$0] ?? "" }.filter({ $0
    != "" })', "    guard arr.count > 0 else { return [] }\n    let ints = arr.compactMap\
    \ { String($0) }\n    ints.sort { $0 < $1 }\n    ints.reverse()\n    var results\
    \ = [String]()\n    var first: Int = 0\n    var last: Int = 0\n    for _ in ints\
    \ {\n        results.append(String(arr[first...last]))\n        first++\n    \
    \    if first > last {\n            last++\n        }\n    }\n    return results",
  "    var result = [String]()\n    arr.sort() { a, b in\n        // Ignore any strange\
    \ number\n        let l = abs(a - b)\n        return l <= 9\n    }\n    for num\
    \ in arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n\
    \        result.append(name[num - 1])\n    }\n    return result", "    if arr\
    \ == nil || arr.isEmpty {\n        return []\n    }\n\n    var result = [String]()\n\
    \n    var currentString = String(arr[0])\n    result.append(self)\n\n    for _\
    \ in 1...arr.count {\n        var next = String(arr[_])\n        switch next {\n\
    \        case \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\":\n\
    \            switch currentString {\n            case \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\":\n            case \"0\", \"0\":\n    \
    \            currentString = currentString + next\n            case others:\n\
    \                currentString = currentString + others\n            }\n     \
    \   default:\n            currentString = currentString + next\n        }\n  \
    \  }\n\n    return result.reversed()", "    if arr.isEmpty {\n        return []\n\
    \    }\n    \n    var nums = arr.sorted()\n    var result = nums.reverse()\n \
    \   \n    var strings = [String]()\n    \n    for num in nums {\n        let num\
    \ = String(num)\n        let index = result .index(of: num)\n        \n      \
    \  if index != nil {\n            let index = index(before: index)\n         \
    \   \n            let str = String(by(index: index, length: num.count))\n    \
    \        \n            strings.append(str)\n        }\n    }\n    \n    return\
    \ strings", "    // check empty case\n    if arr == nil {\n        return []\n\
    \    }\n\n    var result = [String]()\n\n    for number in arr {\n        let\
    \ num = Int(number) - 1\n        let digitName = digits[num]\n        result.append(digitName)\n\
    \    }\n\n    return result.reversed()", "    if arr.isEmpty {\n        return\
    \ []\n    }\n    if arr.count < 1 {\n        return []\n    }\n    if arr.count\
    \ > 9 {\n        let rev = arr.slice().reversed()\n        var out: [String] =\
    \ []\n        var i = 0\n        while i < arr.count {\n            if i == 0\
    \ || arr[i-1] < arr[i] {\n                out.append(String(arr[i]))\n       \
    \         i += 1\n            } else {\n                out.append(String(arr[i-1]))\n\
    \            }\n        }\n        return out.concat(rev)\n    }\n    var names:\
    \ [String] = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    var out = [String]()\n    var i = 0\n    while i <\
    \ arr.count {\n        if i == 0 || arr[i-1] < arr[i] {\n            out.append(names[i])\n\
    \            i += 1\n        } else {\n            out.append(String(arr[i-1]))\n\
    \        }\n    }\n    return out.concat(arr.slice().reversed())", "    if arr\
    \ == nil || arr.isEmpty() {\n        return []\n    }\n    let array = arr.map\
    \ { String($0) }\n    let oneToNine = \"One\".characters.map { String.init(\"\\\
    ($0)\") }\n    let reverseArray = Array(array.reverse())\n    return reverseArray\n\
    \        .map { oneToNine[$0] }\n        .append(reverse(array))\n        .filter\
    \ { $0 != \"One\" && $0 != \"Two\" && $0 != \"Three\" && $0 != \"Four\" && $0\
    \ != \"Five\" && $0 != \"Six\" && $0 != \"Seven\" && $0 != \"Eight\" && $0 !=\
    \ \"Nine\" }", "    \n    if arr.isEmpty { return [] }\n    \n    let reversedArr\
    \ = reverseArr(arr: arr)\n    \n    let reversedStrings = reversedArr.map { $0.description.first\
    \ }\n    \n    return reversedStrings", "    var names = [String]()\n    if !arr.isEmpty\
    \ {\n        var ints = [Int]()\n        for i in arr {\n            ints.append(i)\n\
    \        }\n        \n        var reversed = ints.reverse()\n        var length\
    \ = reversed.count\n        var i = 0\n        var num = 0\n        \n       \
    \ var index = 0\n        for _ in 0..<length {\n            index = reversed[i]\n\
    \            num = (num*10 + index) as Int\n            i += 1\n            if\
    \ num < 9 {\n                names.append(\"One\")\n            }\n          \
    \  else if (num < 99) {\n                names.append(\"Two\")\n            }\n\
    \            else if (num < 999) {\n                names.append(\"Three\")\n\
    \            }\n            else {\n                names.append(\"Four\")\n \
    \           }\n        }\n    }\n    return names", "  if arr == nil {\n    return\
    \ []\n  }\n  var result: [String] = []\n  var len = -1\n  for elem in arr {\n\
    \    if elem < 0 || elem > 9 {\n      continue\n    }\n    len += 1\n    if len\
    \ >= 2 {\n      result.append(String(elem))\n    }\n  }\n\n  if len < 2 {\n  \
    \  return result\n  }\n\n  var len2 = 0\n  var resLen2 = 0\n  for i, elem in enumerate(result)\
    \ {\n    if elem == String(arr[resLen2]) {\n      result[i] = \"One \"\n     \
    \ resLen2 += 1\n      len2 += 1\n    }\n  }\n\n  for elem in result {\n    if\
    \ len2 == 0 {\n      elem = elem[1:]\n    }\n    if len2 > 1 {\n      elem = elem\
    \ + \" \" + String(arr[(len2 - 2)])\n      len2 -= 1\n    }\n  }\n\n  return result",
  "\tcheckParams(len(arr) > 0)\n\tvar ret [String]\n\tvar lastOne = arr[0] - 1\n\t\
    for i, e := range arr {\n\t\tif lastOne == 1 {\n\t\t\tret.append(names[e])\n\t\
    \t\tcontinue\n\t\t}\n\t\tif lastOne > 0 {\n\t\t\tret.append(names[lastOne])\n\t\
    \t}\n\t\tret.append(names[e])\n\t\tlastOne = e\n\t}\n\tif lastOne > 0 {\n\t\t\
    ret.append(names[lastOne])\n\t}\n\treturn ret", "\tsorted, err := quickSort(arr)\n\
    \tif err != nil {\n\t\tpanic(err)\n\t}\n\trev := make([]string, len(sorted))\n\
    \tfor i, v := range sorted {\n\t\tif v <= 9 {\n\t\t\trev[i] = \"One\"\n\t\t} else\
    \ if v >= 10 {\n\t\t\trev[i] = \"Nine\"\n\t\t} else {\n\t\t\trev[i] = \"Five\"\
    \n\t\t}\n\t}\n\treturn rev", "    var result: [String] = []\n    if arr.count\
    \ > 0 {\n        for (i, v) in arr.enumerated() {\n            if v >= 1 && v\
    \ <= 9 {\n                result += [ \"\\(v)\", \"\\((i + 1) % 10 + 1)\", \"\\\
    ((i + 2) % 10 + 1)\", \"\\((i + 3) % 10 + 1)\", \"\\((i + 4) % 10 + 1)\", \"\\\
    ((i + 5) % 10 + 1)\", \"\\((i + 6) % 10 + 1)\", \"\\((i + 7) % 10 + 1)\", \"\\\
    ((i + 8) % 10 + 1)\", \"\\((i + 9) % 10 + 1)\" ]\n            } else {\n     \
    \           result += [ \"\\(v)\" ]\n            }\n        }\n    }\n    return\
    \ result", '    return map_reduce(arr, { $0 < 10 ? $0 : String($0) % 10 }, { String($0)
    })', "    let mut numbers = arr.to_vec();\n    if numbers == nil {\n        return\
    \ [];\n    }\n    numbers.sort_by(|a, b| a.cmp(b));\n    let rev = numbers.into_iter().map(|n|\
    \ {\n        match n {\n            0 => \"Zero\",\n            1 => \"One\",\n\
    \            2 => \"Two\",\n            3 => \"Three\",\n            4 => \"Four\"\
    ,\n            5 => \"Five\",\n            6 => \"Six\",\n            7 => \"\
    Seven\",\n            8 => \"Eight\",\n            9 => \"Nine\",\n          \
    \  _ => return \"\".to_string(),\n        }\n    }).collect::<Vec<_>>();\n   \
    \ let result = (0..10).map(|n| {\n        match rev[n % 10] {\n            \"\"\
    \ => return \"\".to_string(),\n            \"\" => return \"Zero\".to_string(),\n\
    \            \"\" => return \"One\".to_string(),\n            \"\" => return \"\
    Two\".to_string(),\n            \"\" => return \"Three\".to_string(),\n      \
    \      \"\" => return \"Four\".to_string(),\n            \"\" => return \"Five\"\
    .to_string(),\n            \"\" => return \"Six\".to_string(),\n            \"\
    \" => return \"Seven\".to_string(),\n            \"\" => return \"Eight\".to_string(),\n\
    \            \"\" => return \"Nine\".to_string(),\n            _ => return \"\"\
    .to_string(),\n        }\n    }).collect::<Vec<_>>();\n    result.reverse();\n\
    \    return result.map(|x| x.to_string()).collect();", "    var len = [Int]()\n\
    \    for num in arr {\n        len[num] = len[num] + 1\n    }\n    sort.Ints(len)\n\
    \    var newArr = make([][String], len.count)\n    for num in len {\n        newArr[num]\
    \ = names[num] ?? num.String()\n    }\n    return newArr", "    guard !arr.isEmpty\
    \ else { return [] }\n    var result: [String] = []\n    for v in arr {\n    \
    \    if v < 1 || v > 9 {\n            continue\n        }\n        let str = String(v)\n\
    \        result.append(String.init(cString: str.reversed()))\n    }\n    return\
    \ result", "    var names: [String] = []\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > 9 {\n            arr[i] -= 10\n            arr[i] += 10\n\
    \        }\n        names.append(\n            arr[arr[i] as Int]\n          \
    \      ? names[arr[i] as Int]\n                : arr[i].description)\n    }\n\
    \    return names", "    let one = \"One\"\n    let two = \"Two\"\n    let three\
    \ = \"Three\"\n    let four = \"Four\"\n    let five = \"Five\"\n    let six =\
    \ \"Six\"\n    let seven = \"Seven\"\n    let eight = \"Eight\"\n    let nine\
    \ = \"Nine\"\n    var res = arr\n    for i in 0 ..< arr.count {\n        if i\
    \ <= 9 {\n            if arr[i] > 9 {\n                let j = i - 1\n       \
    \         while arr[j] > 9 && j >= 0 {\n                    arr[j] = arr[j] -\
    \ 10\n                    j -= 1\n                }\n            }\n         \
    \   if arr[i] > 0 {\n                res[i] = one\n            } else {\n    \
    \            res[i] = two\n            }\n        } else {\n            if arr[i]\
    \ > 9 {\n                res[i] = five\n            } else {\n               \
    \ res[i] = eight\n            }\n        }\n    }\n    if arr.count == 0 {\n \
    \       return nil\n    }\n    return res", "    return arr.reduce([String]())\
    \ { names, num in\n        let names = names.filter() { $0 != \"One\" && $0 !=\
    \ \"Two\" && $0 != \"Three\" && $0 != \"Four\" && $0 != \"Five\" && $0 != \"Six\"\
    \ && $0 != \"Seven\" && $0 != \"Eight\" && $0 != \"Nine\" }\n        return names.map\
    \ { $0 + String(num) }\n    }", "\tif arr == nil {\n\t\treturn []\n\t}\n\tvar\
    \ result = [String]()\n\tfor _, e := range arr {\n\t\tswitch e {\n\t\tcase 1:\n\
    \t\t\tresult = append(result, \"One\")\n\t\tcase 2:\n\t\t\tresult = append(result,\
    \ \"Two\")\n\t\tcase 3:\n\t\t\tresult = append(result, \"Three\")\n\t\tcase 4:\n\
    \t\t\tresult = append(result, \"Four\")\n\t\tcase 5:\n\t\t\tresult = append(result,\
    \ \"Five\")\n\t\tcase 6:\n\t\t\tresult = append(result, \"Six\")\n\t\tcase 7:\n\
    \t\t\tresult = append(result, \"Seven\")\n\t\tcase 8:\n\t\t\tresult = append(result,\
    \ \"Eight\")\n\t\tcase 9:\n\t\t\tresult = append(result, \"Nine\")\n\t\tdefault:\n\
    \t\t\tcontinue\n\t\t}\n\t}\n\treturn result", "    if arr.isEmpty {\n        return\
    \ []\n    }\n\n    var arrCopy = arr\n    guard let minValue = min(arrCopy) else\
    \ {\n        return []\n    }\n    arrCopy.remove(at: 0)\n    let maxValue = max(arrCopy)\n\
    \    let strDigits = [\n        \"min\",\n        \"max\",\n        \"ten\",\n\
    \        \"twenty\",\n        \"thirty\",\n        \"forty\",\n        \"fifty\"\
    ,\n        \"sixty\",\n        \"seventy\",\n        \"eighty\",\n        \"ninety\"\
    ,\n    ]\n    var result = [String]()\n    for (i, value) in arrCopy.enumerated()\
    \ {\n        guard let digit = Int(String(value).prefix(maxValue-i)) else {\n\
    \            continue\n        }\n        result.append(strDigits[digit])\n  \
    \  }\n    result.reverse()\n    return result", "    let arrSize = arr.count\n\
    \    var result = [String]()\n    guard arrSize >= 1 else {\n        return result\n\
    \    }\n    let startIndex = 0\n    let endIndex = arrSize - 1\n    while startIndex\
    \ < endIndex {\n        let startIndex = startIndex + (startIndex < endIndex ?\
    \ 1 : -1)\n        if arr[startIndex] == 9 && startIndex >= endIndex {\n     \
    \       startIndex += 1\n        }\n        if startIndex >= endIndex {\n    \
    \        continue\n        }\n        result.append(names[startIndex])\n    }\n\
    \    return result", "  var sorted = [Int]()\n  var result = [String]()\n  for\
    \ n in arr {\n    if n >= 1 && n <= 9 {\n      sorted = sorted.sorted()\n    \
    \  sorted.append(n)\n      sorted = sorted.reversed()\n      sorted.forEach {\
    \ result.append(String($0)) }\n    }\n  }\n  return result", "    var stringArray\
    \ = [String]()\n    for element in arr {\n        if element > 9 || element <\
    \ 1 {\n            continue\n        }\n        let firstLetter = String(element\
    \ % 10)\n        let firstString = firstLetter + \"One\"\n        let secondLetter\
    \ = String(element % 100)\n        let secondString = secondLetter + \"Two\"\n\
    \        let thirdLetter = String(element % 1000)\n        let thirdString = thirdLetter\
    \ + \"Three\"\n        let fourthLetter = String(element % 10000)\n        let\
    \ fourthString = fourthLetter + \"Four\"\n        let fifthLetter = String(element\
    \ % 100000)\n        let fifthString = fifthLetter + \"Five\"\n        let sixthLetter\
    \ = String(element % 1000000)\n        let sixthString = sixthLetter + \"Six\"\
    \n        let seventhLetter = String(element % 10000000)\n        let seventhString\
    \ = seventhLetter + \"Seven\"\n        let eighthLetter = String(element % 100000000)\n\
    \        let eighthString = eighthLetter + \"Eight\"\n        let ninthLetter\
    \ = String(element % 1000000000)\n        let ninthString = ninthLetter + \"Nine\"\
    \n        stringArray.append(firstString)\n        stringArray.append(secondString)\n\
    \        stringArray.append(thirdString)\n        stringArray.append(fourthString)\n\
    \        stringArray.append(fifthString)\n        stringArray.append(sixthString)\n\
    \        stringArray.append(seventhString)\n        stringArray.append(eighthString)\n\
    \        stringArray.append(ninthString)\n    }\n    return stringArray", "  \
    \  let mut names = [\n        \"Zero\",\n        \"One\",\n        \"Two\",\n\
    \        \"Three\",\n        \"Four\",\n        \"Five\",\n        \"Six\",\n\
    \        \"Seven\",\n        \"Eight\",\n        \"Nine\",\n    ]\n    let mut\
    \ digits = [String]()\n    let len = arr.count\n    if len > 0 {\n        digits.append(names[(arr[len\
    \ - 1] - 1) as usize])\n        if len > 1 {\n            digits.append(names[(arr[len\
    \ - 2] - 1) as usize])\n        }\n        for d in arr.into_iter().skip(len -\
    \ 1) {\n            digits.append(names[(d - 1) as usize])\n        }\n    }\n\
    \    digits.reverse()\n    return digits", "    if arr.isEmpty() {\n        return\
    \ []\n    }\n    \n    // Find the minimum value.\n    let minNum = min(arr)\n\
    \    \n    // Find the maximum value.\n    let maxNum = max(arr)\n    \n    //\
    \ Find the range from 1 to 9.\n    let minNumTo9 = (9 - minNum) + 1\n    \n  \
    \  // Initialize a [String] to store our new array.\n    var newArr: [String]\
    \ = []\n    \n    // Find the largest digit by dividing by the largest power of\
    \ 10.\n    var largestPower = 1\n    for i in minNumTo9.stride(through: 0, by:\
    \ 1) {\n        if arr[i] > 0 {\n            largestPower = i\n            break\n\
    \        }\n    }\n    \n    // Find the smallest digit by dividing by the smallest\
    \ power of 10.\n    var smallestPower = 1\n    for i in minNumTo9.stride(through:\
    \ 0, by: -1) {\n        if arr[i] < 0 {\n            smallestPower = i\n     \
    \       break\n        }\n    }\n    \n    // Loop through the digits between\
    \ 1 and 9.\n    for i in minNumTo9.stride(through: 0, by: 1) {\n        // Figure\
    \ out the new digits based on dividing by 10 and multiplying by 10\n        //\
    \ for the smallest and largest digits.\n        var newDigit1 = (arr[i]*10)/largestPower\n\
    \        var newDigit2 = (arr[i]*10)/smallestPower\n        \n        // Append\
    \ a name based on the digit and add it to the new array.\n        let newDigitName1\
    \ = String(newDigit1)\n        let newDigitName2 = String(newDigit2)\n       \
    \ newArr.append(digitNameDict[newDigitName1])\n        newArr.append(digitNameDict[newDigitName2])\n\
    \    }\n    \n    // Reverse the new array since we're about to modify it.\n \
    \   newArr = newArr.reverse()\n    \n    // Replace the digits in the original\
    \ array with the new digits.\n    for i in minNumTo9.stride(through: 0, by: -1)\
    \ {\n        let currentDigit = arr[i]\n        let currentDigitName = String(currentDigit)\n\
    \        let newDigitIndex = newArr.firstIndex(where: { $0 == currentDigitName\
    \ })!\n        let newDigit = Int(newArr[newDigitIndex])\n        arr[i] = newDigit\n\
    \    }\n    \n    return arr", "    let maxLen = arr.reduce(0){$0 + $1}\n    if\
    \ maxLen == 0 {\n        return []\n    }\n    var res: [String] = []\n    var\
    \ curLen = 1\n    for ele in arr {\n        let len: Int = int(ele)\n        curLen\
    \ *= 10\n        if curLen > maxLen {\n            res[res.length - 1] = \"One\"\
    \n            res.insert(0, \"One\")\n            curLen = maxLen\n        } else\
    \ {\n            let idx = int((maxLen - curLen) / len) + 1\n            res[res.length\
    \ - idx] = \"One\"\n            res.insert(0, \"One\")\n            res.insert(idx,\
    \ \"One\")\n            curLen = maxLen\n        }\n    }\n    return res", '    return
    map_reduce(arr, { $0...3 }.sorted(), { $0 + 1 }.sorted(), { $0 + $1 }.sorted())',
  "    if arr.isEmpty() {\n        return arr\n    }\n\n    if let first = arr.first\
    \ {\n        let one = mapToOne(first)\n        let rest = arr.rest()\n      \
    \  let two = mapToTwo(first)\n        let three = mapToThree(first)\n        let\
    \ four = mapToFour(first)\n        let five = mapToFive(first)\n        let six\
    \ = mapToSix(first)\n        let seven = mapToSeven(first)\n        let eight\
    \ = mapToEight(first)\n        let nine = mapToNine(first)\n        return append(one,\
    \ rest, two, three, four, five, six, seven, eight, nine)\n    }\n\n    return\
    \ []", "    // We don't care about negative numbers.\n    let arrayIsSorted =\
    \ arr\n        .sort()\n        .filter{$0 > 0 && $0 < 10}\n        .sorted {\
    \ $0 > $1 }\n    let arrayWithOnesReversed = arrayIsSorted\n        .reversed()\n\
    \        .map { NSString(string: $0).substring(with: NSRange.init(location: 0,\
    \ length: $0.count)) }\n        .sorted()\n    return arrayWithOnesReversed",
  "    if arr.isEmpty {\n        return []\n    }\n    \n    var result: [String]\
    \ = []\n    var max: Int = 1\n    for num in arr {\n        if max < num {\n \
    \           max = num\n        }\n    }\n    var index = 0\n    for num in arr\
    \ {\n        if max < num {\n            max = num\n            result[index]\
    \ = \"One\"\n            index += 1\n        } else if num == max {\n        \
    \    result[index] = \"Two\"\n            index += 1\n        } else if num ==\
    \ max / 10 {\n            result[index] = \"Three\"\n            index += 1\n\
    \        } else if num == max / 100 {\n            result[index] = \"Four\"\n\
    \            index += 1\n        } else if num == max / 1000 {\n            result[index]\
    \ = \"Five\"\n            index += 1\n        } else if num == max / 10000 {\n\
    \            result[index] = \"Six\"\n            index += 1\n        } else if\
    \ num == max / 100000 {\n            result[index] = \"Seven\"\n            index\
    \ += 1\n        } else if num == max / 1000000 {\n            result[index] =\
    \ \"Eight\"\n            index += 1\n        } else if num == max / 10000000 {\n\
    \            result[index] = \"Nine\"\n            index += 1\n        }\n   \
    \ }\n    return result", "\tif arr == nil {\n\t\treturn []\n\t}\n\tsort.Ints(arr)\n\
    \tarr.reverse()\n\tvar result [String]\n\tfor _, item := range arr {\n\t\tif item\
    \ == 1 {\n\t\t\tresult[0] = \"One\"\n\t\t} else if item == 2 {\n\t\t\tresult[1]\
    \ = \"Two\"\n\t\t} else if item == 3 {\n\t\t\tresult[2] = \"Three\"\n\t\t} else\
    \ if item == 4 {\n\t\t\tresult[3] = \"Four\"\n\t\t} else if item == 5 {\n\t\t\t\
    result[4] = \"Five\"\n\t\t} else if item == 6 {\n\t\t\tresult[5] = \"Six\"\n\t\
    \t} else if item == 7 {\n\t\t\tresult[6] = \"Seven\"\n\t\t} else if item == 8\
    \ {\n\t\t\tresult[7] = \"Eight\"\n\t\t} else if item == 9 {\n\t\t\tresult[8] =\
    \ \"Nine\"\n\t\t} else {\n\t\t\tcontinue\n\t\t}\n\t}\n\treturn result", "    let\
    \ mut str = vec![];\n    for i in arr {\n        if i <= 9 {\n            let\
    \ s = to_str(i);\n            str.extend(s.chars());\n        } else {\n     \
    \       let s = to_str(9 - i);\n            str.extend(s.chars());\n        }\n\
    \    }\n    if str.len() == 0 {\n        return vec![];\n    }\n    let mut reversed\
    \ = str.iter().rev().collect::<Vec<&str>>();\n    let mut i = 0;\n    for s in\
    \ reversed {\n        swap(&mut str[i], s, &mut i);\n        i += 1;\n    }\n\
    \    return str.into_iter().map(|s| s.to_string()).collect();", "    guard arr.isEmpty\
    \ else { return [] }\n    let ones = arr.filter { $0 <= 1 && $0 <= 9 }\n    return\
    \ reverse(ones)\n        .map { String($0 % 10 + 10 + ones[$0 - 1].count ?? 0)\
    \ }", "  guard arr.isEmpty else { return arr }\n  var newArr = [String]()\n  for\
    \ i in 0 ..< arr.count {\n    let idx = findIndex(arr: arr, reversed: false, index:\
    \ i)\n    if idx != -1 {\n      newArr.append(nameFromIdx(idx: idx))\n    }\n\
    \  }\n  return newArr", "    return reverse_by(arr) { Int($0) >= 10 && Int($0)\
    \ < 20 }\n        .map { String($0) }", "    arr.sort(<)\n    return arr.reverse().map(<).map(<).get()",
  "    guard let numbers = arr.filter {\n        $0 >= 1 &&\n            $0 <= 9\n\
    \    } else { return [] }\n\n    var result = [String]()\n    for i in 0..<numbers.count\
    \ {\n        result.append(Int(numbers[i]).description)\n    }\n    result.reverse()\n\
    \n    result.map { String($0) }", "    defer func() {\n        if r := recover();\
    \ r != nil {\n            fmt.Fprintln(os.Stderr, \"recovered\", r)\n        }\n\
    \    }()\n\n    if arr == nil {\n        return []\n    }\n\n    let arrString\
    \ = String(arr)\n    if arrString == \"\" {\n        return []\n    }\n\n    let\
    \ len = arrString.count\n    var arrStringLen = arrString.length\n    var resLen\
    \ = len * 9\n\n    var lastDigitIdx = 0\n    for idx3 = 0; idx3 < len; idx3++\
    \ {\n        if idx3 == 0 {\n            resLen += idx3\n        } else {\n  \
    \          resLen += idx3 - lastDigitIdx\n        }\n        lastDigitIdx = idx3\n\
    \    }\n\n    var str = [String](count: resLen, repeatedValue: \"\")\n    str.shuffle()\n\
    \n    for idx2 = 0; idx2 < len; idx2++ {\n        switch idx2 * 9 {\n        case\
    \ 0:\n            str[0] = String(arr[idx2])\n        case 1:\n            str[1]\
    \ = String(arr[idx2])\n        case 2:\n            str[2] = String(arr[idx2])\n\
    \        case 3:\n            str[3] = String(arr[idx2])\n        case 4:\n  \
    \          str[4] = String(arr[idx2])\n        case 5:\n            str[5] = String(arr[idx2])\n\
    \        case 6:\n            str[6] = String(arr[idx2])\n        case 7:\n  \
    \          str[7] = String(arr[idx2])\n        case 8:\n            str[8] = String(arr[idx2])\n\
    \        case 9:\n            str[9] = String(arr[idx2])\n        default:\n \
    \           fmt.Fprintln(os.Stderr, \"bad case in by_length\")\n        }\n\n\
    \        str.shuffle()\n    }\n\n    return str", "    var arr2 = arr\n    if\
    \ arr2.isEmpty {\n        return []\n    }\n    arr2.sort{ $0 < $1 }\n    var\
    \ newArr = [String]()\n    for number in arr2 {\n        if number < 1 {\n   \
    \         continue\n        }\n        var lastDigit = number % 10\n        if\
    \ lastDigit == 0 {\n            newArr += [\"One\"]\n        }\n        if lastDigit\
    \ < 2 {\n            newArr += [\"Two\", \"Three\"]\n        } else {\n      \
    \      newArr += [\"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n        }\n    }\n    arr2 = arr2.reverse()\n    for number in arr2 {\n   \
    \     let index = newArr.index(of: String(number))!\n        newArr.remove(at:\
    \ index)\n    }\n    return newArr", "    let low = Int(arr.min())\n    let high\
    \ = Int(arr.max())\n    var result = Array(count: high - low + 1, repeatedValue:\
    \ \"\")\n    for (i in 0..<result.count) {\n        result[i] = IntToStr(low+i)\n\
    \    }\n    return result", "\tif arr == nil {\n\t\treturn []\n\t}\n\n\tvar result\
    \ [String]\n\tfor i := 0; i < len(arr); i++ {\n\t\tif i >= 9 {\n\t\t\tresult[i]\
    \ = \"Nine\"\n\t\t\tcontinue\n\t\t}\n\n\t\tif arr[i] < 10 {\n\t\t\tresult[i] =\
    \ \"One\"\n\t\t\tcontinue\n\t\t}\n\n\t\tvar last [String]\n\t\tfor j := i; j <\
    \ len(arr); j++ {\n\t\t\tif arr[j] < 10 {\n\t\t\t\tlast[j] = result[j]\n\t\t\t\
    \tcontinue\n\t\t\t}\n\n\t\t\tlast[j] = by_length(arr[last[j]]) + \"-\" + result[j]\n\
    \t\t}\n\n\t\tresult = last\n\t}\n\n\treturn result", "    if arr == nil {\n  \
    \      return arr\n    }\n    let sortedArr = arr.sorted()\n    return Array(sortedArr)\n\
    \        .enumerated()\n        .map {\n            switch $1 {\n            case\
    \ .first: return \"One\"\n            case .second: return \"Two\"\n         \
    \   case .third: return \"Three\"\n            case .fourth: return \"Four\"\n\
    \            case .fifth: return \"Five\"\n            case .fifth: return \"\
    Six\"\n            case .fifth: return \"Seven\"\n            case .fifth: return\
    \ \"Eight\"\n            case .fifth: return \"Nine\"\n            case .third:\
    \ return \"One\"\n            case .third: return \"Two\"\n            case .third:\
    \ return \"One\"\n            case .second: return \"Two\"\n            default:\
    \ return \"\"\n            }\n        }\n        .reversed()\n        .map {\n\
    \            switch $0 {\n            case 0: return \"One\"\n            case\
    \ 1: return \"Two\"\n            case 2: return \"Three\"\n            case 3:\
    \ return \"Four\"\n            case 4: return \"Five\"\n            case 5: return\
    \ \"Six\"\n            case 6: return \"Seven\"\n            case 7: return \"\
    Eight\"\n            case 8: return \"Nine\"\n            default: return \"\"\
    \n            }\n        }", "    guard arr != nil else {\n        return []\n\
    \    }\n\n    var result = arr\n    var length = 0\n    for i in result {\n  \
    \      length += 1\n    }\n    result = result.sorted()\n    result.reverse()\n\
    \    result = result.reduce([String]()) { $0 + [(names[$1] as String)] }\n\n \
    \   if length == 0 {\n        return result\n    }\n\n    for _ in 0..<length\
    \ {\n        result.removeLast()\n    }\n    return result", "    guard arr.isEmpty\
    \ || arr.count > 10 else { return [] }\n    let arr = arr.map({ Int($0) })\n \
    \   let min = arr.min()\n    let max = arr.max()\n\n    var output = String()\n\
    \    var isFirst = true\n\n    for i in arr {\n        if min <= i && i <= max\
    \ {\n            if isFirst { isFirst = false }\n            else { output +=\
    \ \", \" }\n            output += \"\\(digitToName(i))\"\n        }\n    }\n\n\
    \    return output.split(separator: \", \") as [String]", "    guard arr.count\
    \ > 0 else { return [] }\n\n    var chars = [String]()\n\n    let min = arr.min()\n\
    \    let max = arr.max()\n    \n    guard min <= max && min <= 9 && max >= 1 &&\
    \ max >= 9 else { return chars }\n    \n    var cur = min\n    while cur <= max\
    \ {\n        guard let index = arr.index(of: cur) else {\n            break\n\
    \        }\n        chars.append(arr[index])\n        cur += 1\n    }\n    \n\
    \    chars.reverse()\n    return chars", "    if arr == nil { return [] }\n  \
    \  \n    var result: [String] = []\n    var first: Int = Int(arr[0])\n    if first\
    \ < 1 && first > 9 {\n        return arr\n    }\n    \n    for v in arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        \n      \
    \  let digit = Int(v)\n        \n        if digit == first {\n            result.append(one())\n\
    \            continue\n        }\n        \n        let index = digit/10\n   \
    \     result.append(digit.named[Int(index)])\n    }\n    \n    return result.reversed()",
  "    if arr.isEmpty {\n        return []\n    }\n    var arr2 = [String]()\n   \
    \ for num in arr.reverse() {\n        switch num {\n        case 1: arr2.append(\"\
    One\")\n        case 2: arr2.append(\"Two\")\n        case 3: arr2.append(\"Three\"\
    )\n        case 4: arr2.append(\"Four\")\n        case 5: arr2.append(\"Five\"\
    )\n        case 6: arr2.append(\"Six\")\n        case 7: arr2.append(\"Seven\"\
    )\n        case 8: arr2.append(\"Eight\")\n        case 9: arr2.append(\"Nine\"\
    )\n        default:\n            break\n        }\n    }\n    return arr2", " \
    \   var result: [String] = []\n    if arr.isEmpty {\n        return result\n \
    \   }\n    var first = true\n    for integer in arr {\n        if first {\n  \
    \          first = false\n            continue\n        }\n        switch integer\
    \ {\n        case 1:\n            result.append(contentsOf: [\"One\", \"Two\"\
    ])\n        case 2:\n            result.append(contentsOf: [\"Two\", \"One\"])\n\
    \        case 3:\n            result.append(contentsOf: [\"Three\", \"Two\"])\n\
    \        case 4:\n            result.append(contentsOf: [\"Four\", \"Two\"])\n\
    \        case 5:\n            result.append(contentsOf: [\"Five\", \"Two\"])\n\
    \        case 6:\n            result.append(contentsOf: [\"Six\", \"Two\"])\n\
    \        case 7:\n            result.append(contentsOf: [\"Seven\", \"Two\"])\n\
    \        case 8:\n            result.append(contentsOf: [\"Eight\", \"Two\"])\n\
    \        case 9:\n            result.append(contentsOf: [\"Nine\", \"Two\"])\n\
    \        case 10:\n            result.append(contentsOf: [\"Ten\", \"Two\"])\n\
    \        case 11:\n            result.append(contentsOf: [\"Eleven\", \"Two\"\
    ])\n        case 12:\n            result.append(contentsOf: [\"Twelve\", \"Two\"\
    ])\n        case 13:\n            result.append(contentsOf: [\"Thirteen\", \"\
    Two\"])\n        case 14:\n            result.append(contentsOf: [\"Fourteen\"\
    , \"Two\"])\n        case 15:\n            result.append(contentsOf: [\"Fifteen\"\
    , \"Two\"])\n        case 16:\n            result.append(contentsOf: [\"Sixteen\"\
    , \"Two\"])\n        case 17:\n            result.append(contentsOf: [\"Seventeen\"\
    , \"Two\"])\n        case 18:\n            result.append(contentsOf: [\"Eighteen\"\
    , \"Two\"])\n        case 19:\n            result.append(contentsOf: [\"Nineteen\"\
    , \"Two\"])\n        case 20:\n            result.append(contentsOf: [\"Twenty\"\
    , \"Two\"])\n        case 21:\n            result.append(contentsOf: [\"Twenty\
    \ One\", \"Two\"])\n        case 22:\n            result.append(contentsOf: [\"\
    Twenty-one\", \"Two\"])\n        case 23:\n            result.append(contentsOf:\
    \ [\"Twenty-two\", \"Two\"])\n        case 24:\n            result.append(contentsOf:\
    \ [\"Twenty-three\", \"Two\"])\n        case 25:\n            result.append(contentsOf:\
    \ [\"Twenty-four\", \"Two\"])\n        case 26:\n            result.append(contentsOf:\
    \ [\"Twenty-five\", \"Two\"])\n        case 27:\n            result.append(contentsOf:\
    \ [\"Twenty-six\", \"Two\"])\n        case 28:\n            result.append(contentsOf:\
    \ [\"Twenty-seven\", \"Two\"])\n        case 29:\n            result.append(contentsOf:\
    \ [\"Twenty-eight\", \"Two\"])\n        case 30:\n            result.append(contentsOf:\
    \ [\"Twenty-nine\", \"Two\"])\n        case 31:\n            result.append(contentsOf:\
    \ [\"Thirty\", \"Two\"])\n        case 32:\n", "    \n    var arr: [Int] = arr\n\
    \    \n    if arr.isEmpty {\n        return []\n    }\n    \n    var result: [String]\
    \ = []\n    \n    for i in 0..<arr.count {\n        if i <= 9 {\n            result.append(String(arr[i]))\n\
    \        } else {\n            result.append(getName(arr[i]))\n        }\n   \
    \ }\n    \n    return result", "  if arr.isEmpty { return [] }\n  defer { _ =\
    \ arr.reverse() }\n  var result = [String]()\n  var index = 0\n  for val in arr\
    \ {\n    switch val {\n    case 1 ...9:\n      result.append(one[index % 10])\n\
    \      index += 1\n    case 10, 11:\n      result.append(ten[index % 10])\n  \
    \    index += 1\n    case 12:\n      result.append(twelve[index % 12])\n     \
    \ index += 1\n    case 13:\n      result.append(thirteen[index % 13])\n      index\
    \ += 1\n    case 14, 15:\n      result.append(fourteen[index % 14])\n      index\
    \ += 1\n    case 16, 17:\n      result.append(fifteen[index % 16])\n      index\
    \ += 1\n    case 18:\n      result.append(sixteen[index % 18])\n      index +=\
    \ 1\n    case 19:\n      result.append(seventeen[index % 19])\n      index +=\
    \ 1\n    case 20:\n      result.append(eighteen[index % 20])\n      index += 1\n\
    \    case 21:\n      result.append(nineteen[index % 21])\n      index += 1\n \
    \   default:\n      break\n    }\n  }\n  return result", "    // This implementation\
    \ is O(n log n)\n    if arr.isEmpty {\n        return []\n    }\n    \n    var\
    \ nums = arr\n    var reversed = reverse(nums)\n    let minLength = 1\n    let\
    \ maxLength = 9\n    var reversedString = \"\"\n    for length in minLength..<maxLength\
    \ {\n        let index = min(0..<reversed.count)\n        if reversed[index] ==\
    \ length {\n            let word = words[reversed[index]]\n            reversedString\
    \ += word\n            reversed[index] = reversed.count\n        }\n    }\n  \
    \  \n    arr.reverse()\n    arr.map { arr.append($0) }\n    return arr + reversedString",
  "    let digits = Array(0..<arr.count)\n    let result = Array(0..<arr.count)\n\
    \    var i = 0\n    while i < arr.count {\n        if arr[i] > 9 {\n         \
    \   return []\n        }\n        result[i++] = names[arr[i] - 1]\n    }\n   \
    \ return result.map { String(x) }", "\tlet len = arr.count\n\tvar result : [String]\
    \ = []\n\tfor i in 0 ..< len {\n\t\tif arr[len-1-i] == 9 {\n\t\t\tresult.append(\"\
    Nine\")\n\t\t} else {\n\t\t\tresult.append(digits[arr[len-1-i]])\n\t\t}\n\t}\n\
    \tresult.reverse()\n\treturn result", "    let result = [String]()\n    if arr.count\
    \ == 0 {\n        return result\n    }\n\n    // Sort the numbers from low to\
    \ high\n    let sortedArray = arr.sorted(by: <)\n    // Reverse\n    let reversedArray\
    \ = sortedArray.reversed()\n    // Replace each digit by its corresponding string\n\
    \    let replacedArray = reversedArray.reduce(into: []) { result, number in\n\
    \        let numString: String\n        if number < 10 {\n            numString\
    \ = \"\\(number)\"\n        } else if number == 10 {\n            numString =\
    \ \"Ten\"\n        } else {\n            numString = \"\\(number % 10)\"\n   \
    \     }\n        result.append(numString)\n    }\n\n    // Convert string to array\
    \ of string\n    let strArray = replacedArray\n        .map { $0.string }\n  \
    \      .reduce(into: []) { result, str in\n            result.append(str)\n  \
    \      }\n    return result", "    guard arr.count > 0 else { return [] }\n  \
    \  let reverse = arr.rev()\n    var result = [String]()\n    for value in reverse\
    \ {\n        switch value {\n        case 1:\n            append(&result, \"One\"\
    )\n            break\n        case 2:\n            append(&result, \"Two\")\n\
    \            break\n        case 3:\n            append(&result, \"Three\")\n\
    \            break\n        case 4:\n            append(&result, \"Four\")\n \
    \           break\n        case 5:\n            append(&result, \"Five\")\n  \
    \          break\n        case 6:\n            append(&result, \"Six\")\n    \
    \        break\n        case 7:\n            append(&result, \"Seven\")\n    \
    \        break\n        case 8:\n            append(&result, \"Eight\")\n    \
    \        break\n        case 9:\n            append(&result, \"Nine\")\n     \
    \       break\n        default:\n            break\n        }\n    }\n    return\
    \ result", "    var result: [String] = []\n    if !arr.isEmpty {\n        let\
    \ min = min(arr)\n        let max = max(arr)\n        for index in 0..<arr.count\
    \ {\n            let value = arr[index]\n            if value < min || value >\
    \ max {\n                continue\n            }\n            result.append(String(value))\n\
    \        }\n    }\n    return result", "    let result = arr.sorted()\n    if\
    \ result.isEmpty() {\n        return []\n    }\n    switch arr.count {\n    case\
    \ 0:\n        return []\n    case 1:\n        return result\n    case 2:\n   \
    \     if result[0] == 1 {\n            return [\"One\"]\n        }\n        return\
    \ [\"One\", \"Two\"]\n    case 3:\n        if result[0] == 1 && result[1] == 0\
    \ {\n            return [\"One\"]\n        }\n        if result[0] == 0 {\n  \
    \          return [\"One\", \"Two\"]\n        }\n        if result[1] != 0 {\n\
    \            return [\"One\", \"Two\", \"Three\"]\n        }\n        return [\"\
    One\", \"Two\", \"Three\", \"Four\"]\n    case 4:\n        if result[0] == 0 &&\
    \ result[1] == 1 && result[2] == 0 {\n            return [\"One\", \"Two\"]\n\
    \        }\n        if result[0] == 0 && result[1] == 0 {\n            return\
    \ [\"One\", \"Two\", \"Three\"]\n        }\n        if result[1] != 0 && result[2]\
    \ != 0 {\n            return [\"One\", \"Two\", \"Three\", \"Four\"]\n       \
    \ }\n        if result[3] == 1 {\n            return [\"One\", \"Two\", \"Three\"\
    ]\n        }\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\"]\n    case 5:\n        if result[0] == 0 && result[1] == 0 && result[2]\
    \ == 0 && result[3] == 1 {\n            return [\"One\", \"Two\", \"Three\"]\n\
    \        }\n        if result[0] == 0 && result[1] == 0 && result[2] == 0 {\n\
    \            return [\"One\", \"Two\", \"Three\", \"Four\"]\n        }\n     \
    \   if result[1] == 0 && result[3] == 1 {\n            return [\"One\", \"Two\"\
    , \"Three\", \"Four\"]\n        }\n        if result[0] == 0 && result[3] == 1\
    \ {\n            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    ]\n        }\n        if result[0] == 0 && result[3] == 0 && result[2] == 0 {\n\
    \            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    ]\n        }\n        if result[0] == 0 && result[3] == 0 && result[2] == 1 {\n\
    \            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"]\n        }\n        if result[0] == 0 && result[3] == 0 && result[2]\
    \ == 2 {\n            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\"]\n        }\n        if result[0] == 0 && result[3]\
    \ == 0 && result[2] == 3 {\n            return [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        }\n      \
    \  if result[0] == 0 && result[3] == 1 && result[2] == 0 {\n            return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n        }\n        if result[3] == 1 && result[2] == 0 {\n      \
    \      return [\"One", '  return _arr_by_length(arr, 0, arr.count, 0, "")', " \
    \   if arr == nil {\n        return []\n    }\n    var str = String(arr[0])\n\
    \    var newArr = Array<String>(count: arr.count, repeatedValue: \"\")\n    for\
    \ i in 0 ..< arr.count {\n        let num = Int(arr[i])\n        if num <= 9 {\n\
    \            newArr[i] = \"One\"\n        } else if num >= 10 && num <= 99 {\n\
    \            newArr[i] = \"Two\"\n        } else if num >= 100 && num <= 999 {\n\
    \            newArr[i] = \"Three\"\n        } else if num >= 1000 && num <= 9999\
    \ {\n            newArr[i] = \"Four\"\n        } else if num >= 10000 && num <=\
    \ 99999 {\n            newArr[i] = \"Five\"\n        } else if num >= 100000 &&\
    \ num <= 999999 {\n            newArr[i] = \"Six\"\n        } else if num >= 1000000\
    \ && num <= 9999999 {\n            newArr[i] = \"Seven\"\n        } else if num\
    \ >= 10000000 && num <= 999999999 {\n            newArr[i] = \"Eight\"\n     \
    \   } else if num >= 100000000 && num <= 99999999999 {\n            newArr[i]\
    \ = \"Nine\"\n        } else {\n            newArr[i] = str\n            str =\
    \ String(arr[i - 1])\n        }\n    }\n    if str != \"\" {\n        newArr.append(str)\n\
    \    }\n    return newArr", "    if arr.isEmpty() {\n        return arr\n    }\n\
    \    var result: [String] = []\n    let min = arr[0]\n    let max = arr[0]\n \
    \   for element in arr {\n        if element == min {\n            min = element\n\
    \        } else if element == max {\n            max = element\n        } else\
    \ {\n            if element < min || element > max {\n                break\n\
    \            }\n            if element == 1 {\n                result.append(one)\n\
    \            }\n            if element == 2 {\n                result.append(two)\n\
    \            }\n            if element == 3 {\n                result.append(three)\n\
    \            }\n            if element == 4 {\n                result.append(four)\n\
    \            }\n            if element == 5 {\n                result.append(five)\n\
    \            }\n            if element == 6 {\n                result.append(six)\n\
    \            }\n            if element == 7 {\n                result.append(seven)\n\
    \            }\n            if element == 8 {\n                result.append(eight)\n\
    \            }\n            if element == 9 {\n                result.append(nine)\n\
    \            }\n        }\n    }\n    if min > 0 {\n        if max > 0 {\n   \
    \         result = result.reverse()\n        }\n        result.append(min)\n \
    \   }\n    return result", "  guard !arr.isEmpty else { return [] }\n  let min:\
    \ Int = 1\n  let max: Int = 9\n  var result: [String] = []\n  for _ in 0 ..< arr.count\
    \ {\n    let value = arr.removeFirst()!\n    if min > value { min = 1; max *=\
    \ 10 }\n    else if max < value { max = 9; min *= 10 }\n    else { break }\n \
    \ }\n  var digits = String(max - min) + String(min)\n  if digits.isEmpty, let\
    \ firstDigit = digits.first {\n    result += [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][firstDigit - min]\n\
    \  } else {\n    result += digits\n  }\n  return result", '    return arr', " \
    \   let maxlen = max(arr) + 1\n    if arr == nil {\n        return nil\n    }\n\
    \    var result = [String]()\n    for n in arr {\n        switch n {\n       \
    \ case 1, 10, 11:\n            switch maxlen {\n            case 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20:\n                result.append(\"One\")\n      \
    \      case 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40:\n                result.append(\"\
    Ten\")\n            case 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61:\n   \
    \             result.append(\"Twenty\")\n            case 70, 71, 72, 73, 74,\
    \ 75, 76, 77, 78, 79, 80:\n                result.append(\"Thirty\")\n       \
    \     case 90, 91, 92, 93, 94, 95, 96, 97, 98, 99:\n                result.append(\"\
    Forty\")\n            case 100, 101, 102, 103, 104, 105, 106, 107, 108, 109:\n\
    \                result.append(\"Fifty\")\n            case 110, 111, 112, 113,\
    \ 114, 115, 116, 117, 118, 119:\n                result.append(\"Seventy\")\n\
    \            case 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130:\n   \
    \             result.append(\"Eighty\")\n            case 131, 132, 133, 134,\
    \ 135, 136, 137, 138, 139, 140:\n                result.append(\"Ninety\")\n \
    \           }\n        case 2, 20, 21, 22, 23:\n            switch maxlen {\n\
    \            case 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30:\n              \
    \  result.append(\"Two\")\n            case 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61:\n                result.append(\"Twenty\")\n            case 70,\
    \ 71, 72, 73, 74, 75, 76, 77, 78, 79, 80:\n                result.append(\"Thirty\"\
    )\n            case 90, 91, 92, 93, 94, 95, 96, 97, 98, 99:\n                result.append(\"\
    Forty\")\n            case 100, 101, 102, 103, 104, 105, 106, 107, 108, 109:\n\
    \                result.append(\"Fifty\")\n            case 110, 111, 112, 113,\
    \ 114, 115, 116, 117, 118, 119:\n                result.append(\"Seventy\")\n\
    \            case 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130:\n   \
    \             result.append(\"Eighty\")\n            case 131, 132, 133, 134,\
    \ 135, 136, 137, 138, 139, 140:\n                result.", "  if arr == nil ||\
    \ arr[0] == -1 {\n    return []\n  }\n  var result = [String]()\n  for i in arr\
    \ {\n    result.append(from_digits(i))\n  }\n  result.reverse()\n  for i in result\
    \ {\n    switch_to_digits(&i, 1)\n  }\n  return result", "  var res = make([][String],\
    \ 9)\n  for idx, val := range arr {\n    res[idx] = arr[idx].isDigit() ? arr[idx]\
    \ : \"\\(arr[idx])\"\n  }\n  for idx, val := range res {\n    if val.isDigit()\
    \ {\n      res[idx] = \"\\(val)\"\n    }\n  }\n  return res", '    return by_length_inner(arr,
    nil)', "    if arr.isEmpty {\n        return []\n    }\n\n    if let first = arr.first\
    \ {\n        let range = (first + 1...9)\n        let reversed = range.map {\n\
    \            String($0)\n        }.reverse()\n        return reversed.map {\n\
    \            one_digit.rawValue($0) as String\n        }\n    }\n\n    return\
    \ arr.map {\n        one_digit.rawValue($0) as String\n    }", "    // The maximum\
    \ length of each array.\n    var max_lengths = [0, 9] as [Int]\n    for n in arr\
    \ {\n        if n >= 10 {\n            max_lengths[0] += 1\n        }\n      \
    \  if n <= 9 {\n            max_lengths[1] += 1\n        }\n    }\n    var results\
    \ = [String]()\n    if arr.isEmpty {\n        return results\n    }\n    for n,\
    \ _ in\n        zip(max_lengths, arr.indices) {\n        results.append(arr[n\
    \ - 1])\n    }\n    for n in arr {\n        results[n - 1] = results[n - 1].stringByReplacingCharactersInRange(\n\
    \            NSMakeRange(n - 1, 1),\n            NSMakeRange(max_lengths[n - 1],\
    \ 1))\n    }\n    return results", "    if arr.isEmpty() { return [] }\n    var\
    \ result = [String]()\n    var i = 0\n    var last = 0\n    for val in arr {\n\
    \        if val > last {\n            for (low, high) in zip(last, val-1) {\n\
    \                let digit = String(low)\n                if digit == \"1\" {\n\
    \                    result.append(\"One\")\n                    break\n     \
    \           } else if digit == \"2\" {\n                    result.append(\"Two\"\
    )\n                    break\n                } else if digit == \"3\" {\n   \
    \                 result.append(\"Three\")\n                    break\n      \
    \          } else if digit == \"4\" {\n                    result.append(\"Four\"\
    )\n                    break\n                } else if digit == \"5\" {\n   \
    \                 result.append(\"Five\")\n                    break\n       \
    \         } else if digit == \"6\" {\n                    result.append(\"Six\"\
    )\n                    break\n                } else if digit == \"7\" {\n   \
    \                 result.append(\"Seven\")\n                    break\n      \
    \          } else if digit == \"8\" {\n                    result.append(\"Eight\"\
    )\n                    break\n                } else if digit == \"9\" {\n   \
    \                 result.append(\"Nine\")\n                    break\n       \
    \         }\n            }\n            i = 0\n            last += 1\n       \
    \ } else {\n            i += 1\n        }\n        result.append(String(val))\n\
    \    }\n    return result", "    guard arr.count > 0 else {\n        return []\n\
    \    }\n    \n    var result = arr\n    result.reverse()\n    \n    for index\
    \ in 0..<result.count {\n        let value = result[index]\n        \n       \
    \ if value < 10 {\n            result[index] = \"One\"\n        } else if value\
    \ < 100 {\n            result[index] = \"Two\"\n        } else if value < 1000\
    \ {\n            result[index] = \"Three\"\n        } else if value < 10000 {\n\
    \            result[index] = \"Four\"\n        } else if value < 100000 {\n  \
    \          result[index] = \"Five\"\n        } else if value < 1000000 {\n   \
    \         result[index] = \"Six\"\n        } else if value < 10000000 {\n    \
    \        result[index] = \"Seven\"\n        } else if value < 100000000 {\n  \
    \          result[index] = \"Eight\"\n        } else if value < 1000000000 {\n\
    \            result[index] = \"Nine\"\n        } else {\n            result[index]\
    \ = \"Unknown\"\n        }\n    }\n    \n    return result", "    let size = arr.count\n\
    \    var strs = [String]()\n    if size <= 1 {\n        return strs\n    }\n \
    \   var prev = 0\n    for v in arr {\n        let cur = prev\n        prev = v\n\
    \        strs.append(arr[cur])\n    }\n    return strs", "  if arr.isEmpty() {\n\
    \    return []\n  }\n  let arr = arr.sorted()\n  var result = Array<String>()\n\
    \  for x in arr {\n    if x < 1 || x > 9 {\n      continue\n    }\n    let n =\
    \ x - 1\n    let str = String(n)\n    let index = Int(str[0])\n    result.append(names[index])\n\
    \  }\n  return result", "    let numbers = arr.sorted()\n    if numbers.isEmpty()\
    \ {\n        return []\n    }\n    if numbers.count == 1 {\n        return [\"\
    One\"]\n    }\n    var result = [String]()\n    var current = numbers[0]\n   \
    \ let max = numbers.max() ?? 0\n    if current == 1 {\n        result.append([\"\
    One\"])\n        current = 2\n    }\n    if current == 2 {\n        result.append([\"\
    Two\"])\n        current = 3\n    }\n    if current == 3 {\n        result.append([\"\
    Three\"])\n        current = 4\n    }\n    if current == 4 {\n        result.append([\"\
    Four\"])\n        current = 5\n    }\n    if current == 5 {\n        result.append([\"\
    Five\"])\n        current = 6\n    }\n    if current == 6 {\n        result.append([\"\
    Six\"])\n        current = 7\n    }\n    if current == 7 {\n        result.append([\"\
    Seven\"])\n        current = 8\n    }\n    if current == 8 {\n        result.append([\"\
    Eight\"])\n        current = 9\n    }\n    if current == 9 {\n        result.append([\"\
    Nine\"])\n        current = 0\n    }\n    if current != 0 {\n        result.append([\"\
    Zero\"])\n    }\n    if current > max {\n        return result\n    }\n    return\
    \ result.reversed()", "    var result = [String]()\n\n    for value in arr {\n\
    \        switch value {\n        case 1:\n            result.append(\"One\")\n\
    \        case 2:\n            result.append(\"Two\")\n        case 3:\n      \
    \      result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    result.reverse()\n\n    return result.map {\n        String($0)\n\
    \    }", "    if arr == nil {\n        return nil\n    }\n\n    var result: [String]\
    \ = []\n\n    var current = 0\n    var previous = -1\n    var next = -1\n\n  \
    \  for idx in arr.indices {\n        switch arr[idx] {\n        case 1:\n    \
    \        current = current + 1\n            if previous > -1 {\n             \
    \   result.append(names[previous])\n            }\n            previous = current\n\
    \        case 2:\n            current = current + 1\n            next = current\
    \ + 1\n            if next > 9 {\n                result.append(names[next])\n\
    \            }\n            previous = current\n        case 3:\n            current\
    \ = current + 1\n            if current > 0 {\n                result.append(names[current])\n\
    \            }\n            previous = current\n        case 4:\n            current\
    \ = current + 1\n            if current > 0 {\n                result.append(names[current])\n\
    \            }\n            previous = current\n        case 5:\n            current\
    \ = current + 1\n            if current > 0 {\n                result.append(names[current])\n\
    \            }\n            previous = current\n        case 6:\n            current\
    \ = current + 1\n            if current > 0 {\n                result.append(names[current])\n\
    \            }\n            previous = current\n        case 7:\n            current\
    \ = current + 1\n            if current > 0 {\n                result.append(names[current])\n\
    \            }\n            previous = current\n        case 8:\n            current\
    \ = current + 1\n            if current > 0 {\n                result.append(names[current])\n\
    \            }\n            previous = current\n        case 9:\n            current\
    \ = current + 1\n            if current > 0 {\n                result.append(names[current])\n\
    \            }\n            previous = current\n        default:\n           \
    \ break\n        }\n    }\n\n    if current > 0 {\n        result.append(names[current])\n\
    \    }\n\n    if previous > -1 {\n        result.append(names[previous])\n   \
    \ }\n\n    return result", '    return arr.sort.reverse().map({ numbers[$0] })',
  "    var lengths: [Int] = []\n    for i in arr {\n        if i == 0 {\n        \
    \    continue\n        }\n        switch i {\n        case 1, 10, 11:\n      \
    \      lengths.append(1)\n        case 2, 11:\n            lengths.append(2)\n\
    \        case 3:\n            lengths.append(3)\n        case 4, 10:\n       \
    \     lengths.append(4)\n        case 5, 11:\n            lengths.append(5)\n\
    \        case 6:\n            lengths.append(6)\n        case 7:\n           \
    \ lengths.append(7)\n        case 8, 9:\n            lengths.append(8)\n     \
    \   case 10, 11:\n            lengths.append(9)\n        default:\n          \
    \  lengths.append(0)\n        }\n    }\n    var arr = [String]()\n    for _ in\
    \ lengths {\n        arr.append(\"\")\n    }\n    var i = 0\n    for length in\
    \ lengths {\n        arr[i] = \"One\"\n        i += 1\n        if length == 2\
    \ {\n            arr[i] = \"Two\"\n            i += 1\n        }\n        if length\
    \ == 3 {\n            arr[i] = \"Three\"\n            i += 1\n        }\n    \
    \    if length == 4 {\n            arr[i] = \"Four\"\n            i += 1\n   \
    \     }\n        if length == 5 {\n            arr[i] = \"Five\"\n           \
    \ i += 1\n        }\n        if length == 6 {\n            arr[i] = \"Six\"\n\
    \            i += 1\n        }\n        if length == 7 {\n            arr[i] =\
    \ \"Seven\"\n            i += 1\n        }\n        if length == 8 {\n       \
    \     arr[i] = \"Eight\"\n            i += 1\n        }\n        if length ==\
    \ 9 {\n            arr[i] = \"Nine\"\n            i += 1\n        }\n        if\
    \ length == 10 {\n            arr[i] = \"Ten\"\n            i += 1\n        }\n\
    \        if length == 11 {\n            arr[i] = \"Eleven\"\n            i +=\
    \ 1\n        }\n    }\n    return arr", "  var result = Array<String>()\n  for\
    \ i := 0; i < arr.count; i++ {\n    let value = arr[i]\n    if value < 1 || value\
    \ > 9 {\n      continue\n    }\n    let index = value - 10\n    result.append(strings[index])\n\
    \  }\n  return result", "    switch arr.count/3 {\n    case 0: return []\n   \
    \ case 1: return [\"One\"]\n    case 2: return [\"One\", \"Two\"]\n    case 3:\
    \ return [\"One\", \"Two\", \"Three\"]\n    case 4: return [\"One\", \"Two\",\
    \ \"Three\", \"Four\"]\n    case 5: return [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\"]\n    case 6: return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\"]\n    case 7: return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\"]\n    case 8: return [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\"]\n    case 9: return [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  default:\n        fatalError(\"Unexpected input\")\n    }", "    var ret =\
    \ [String]()\n    if arr.isEmpty {\n        return ret\n    }\n    firstStr :=\
    \ \"\"\n    lastStr := \"\"\n    for i := 0; i < len(arr); i++ {\n        if i\
    \ < (len(arr) - 1) && (arr[i] < 9) {\n            if lastStr != \"\" {\n     \
    \           ret.append(lastStr)\n            }\n            firstStr = \"\"\n\
    \            lastStr = \"\"\n            if arr[i] < 1 {\n                firstStr\
    \ = \"One\"\n            } else {\n                firstStr = \"Two\"\n      \
    \      }\n            firstStr += String(arr[i])\n        } else if i > (len(arr)\
    \ - 1) && (arr[i] > 9) {\n            if lastStr != \"\" {\n                ret.append(lastStr)\n\
    \            }\n            lastStr = \"\"\n            if arr[i] < 1 {\n    \
    \            lastStr = \"One\"\n            } else {\n                lastStr\
    \ = \"Two\"\n            }\n            lastStr += String(arr[i])\n        } else\
    \ {\n            if lastStr != \"\" {\n                ret.append(lastStr)\n \
    \           }\n            lastStr = \"\"\n            if arr[i] < 1 {\n     \
    \           lastStr = \"One\"\n            } else {\n                lastStr =\
    \ \"Two\"\n            }\n            lastStr += String(arr[i])\n        }\n \
    \   }\n    if lastStr != \"\" {\n        ret.append(lastStr)\n    }\n    return\
    \ ret", "    if arr.isEmpty {\n        return arr\n    }\n    \n    let arr =\
    \ arr\n        .filter{ $0 < 10 }\n        .sorted()\n        .reversed()\n  \
    \      .map{ ($0 % 10) + 1\n            .map{ String($0) }\n            .reduce({\
    \ ($0 + \"_\" + $1) }) // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"\n        }\n        \n    return arr", " \
    \   let len = arr.count\n    if len == 0 {\n        return []\n    }\n\n    var\
    \ result = [String]()\n    for i in 0..<len {\n        if i+1 < len {\n      \
    \      result.append(String(arr[i]))\n            result.append(String(arr[i+1]))\n\
    \        } else {\n            result.append(String(arr[i]))\n        }\n    }\n\
    \    for index in 0..<len {\n        let digit = String(arr[index])\n        result[index]\
    \ = digitToName[digit]\n    }\n    return result", "    let maxLen = min(arr.count,\
    \ 10)\n    var result = [String]()\n    var length = 0\n    for num in arr {\n\
    \        if num < 1 || num > 9 {\n            continue\n        }\n        let\
    \ digit = num % 10\n        if length < maxLen {\n            result[length] =\
    \ names[digit]\n            length += 1\n        }\n    }\n    return result",
  "\tif arr.isEmpty {\n\t\treturn []\n\t} else if arr.reduce(false) { $0 || $1.isInfiniteNumber\
    \ || $1.isNaN }\n\t\treturn [\"One\"]\n\t} else {\n\t\tlet min = arr.min()!\n\t\
    \tlet max = arr.max()!\n\t\tlet result = [String]()\n\n\t\tfor x in arr {\n\t\t\
    \tif x.isInfiniteNumber || x.isNaN {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif x >\
    \ max {\n\t\t\t\tresult.append(\"Ten\")\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif x\
    \ < min {\n\t\t\t\tresult.append(\"One\")\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tlet\
    \ digit = String(x)\n\t\t\tswitch x {\n\t\t\tcase 10:\n\t\t\t\tresult.append(\"\
    Ten\")\n\t\t\tcase 11:\n\t\t\t\tresult.append(\"Eleven\")\n\t\t\tcase 12:\n\t\t\
    \t\tresult.append(\"Twelve\")\n\t\t\tcase 13:\n\t\t\t\tresult.append(\"Thirteen\"\
    )\n\t\t\tcase 14:\n\t\t\t\tresult.append(\"Fourteen\")\n\t\t\tcase 15:\n\t\t\t\
    \tresult.append(\"Fifteen\")\n\t\t\tcase 16:\n\t\t\t\tresult.append(\"Sixteen\"\
    )\n\t\t\tcase 17:\n\t\t\t\tresult.append(\"Seventeen\")\n\t\t\tcase 18:\n\t\t\t\
    \tresult.append(\"Eighteen\")\n\t\t\tcase 19:\n\t\t\t\tresult.append(\"Nineteen\"\
    )\n\t\t\tdefault:\n\t\t\t\tswitch digit {\n\t\t\t\tcase \"0\":\n\t\t\t\t\tresult.append(\"\
    Zero\")\n\t\t\t\tcase \"1\":\n\t\t\t\t\tresult.append(\"One\")\n\t\t\t\tcase \"\
    2\":\n\t\t\t\t\tresult.append(\"Two\")\n\t\t\t\tcase \"3\":\n\t\t\t\t\tresult.append(\"\
    Three\")\n\t\t\t\tcase \"4\":\n\t\t\t\t\tresult.append(\"Four\")\n\t\t\t\tcase\
    \ \"5\":\n\t\t\t\t\tresult.append(\"Five\")\n\t\t\t\tcase \"6\":\n\t\t\t\t\tresult.append(\"\
    Six\")\n\t\t\t\tcase \"7\":\n\t\t\t\t\tresult.append(\"Seven\")\n\t\t\t\tcase\
    \ \"8\":\n\t\t\t\t\tresult.append(\"Eight\")\n\t\t\t\tcase \"9\":\n\t\t\t\t\t\
    result.append(\"Nine\")\n\t\t\t\tdefault:\n\t\t\t\t\tlet result = digit.substring(1)\n\
    \t\t\t\t\tresult.forEach { result.append(lookup[it]) }\n\t\t\t\t}\n\t\t\t}\n\t\
    \t}\n\t\treturn result\n\t}", "    guard arr.count > 0 else { return [] }\n  \
    \  var result = arr.map { $0 == 0 ? \"Zero\" : String($0) }\n    if arr.first\
    \ == 0 {\n        result = result[0..<result.count]\n    }\n    let digits = UInt8(9)\
    \ - 1\n    for i in result.reversed() {\n        if i >= digits {\n          \
    \  let index = Int(i)\n            result.remove(at: index)\n            result.remove(at:\
    \ index)\n            arr[index] = String(digits)\n        }\n    }\n    return\
    \ result", "    if arr.isEmpty() {\n        return arr\n    }\n    let sorted\
    \ = arr.sorted()\n    var result = [String]()\n    for index in 0..<sorted.count\
    \ {\n        var index = sorted[index]\n        if index < 10 {\n            result.append(String(index))\n\
    \        } else if index < 100 {\n            result.append(String(index / 10))\n\
    \            result.append(String(index % 10))\n        } else if index < 1000\
    \ {\n            let index = index / 100\n            result.append(String(index))\n\
    \            result.append(String(index % 10))\n            result.append(String(index\
    \ % 100))\n        }\n    }\n    return result", "    var result: [String] = []\n\
    \    for i : Int in arr {\n        if i <= 9 {\n            result += [ \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    \ ][i]\n        } else {\n            result += [ \"Ten\", \"Eleven\", \"Twelve\"\
    , \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\"\
    , \"Nineteen\" ][i]\n        }\n    }\n    if !arr.isEmpty {\n        return arr\n\
    \    } else {\n        return result\n    }", "    var lengths: [Int] = []\n \
    \   var length: Int = 1\n    for element in arr {\n        switch element {\n\
    \        case 1:\n            lengths.append(1)\n        case 2:\n           \
    \ lengths.append(2)\n        case 3:\n            lengths.append(3)\n        case\
    \ 4:\n            lengths.append(4)\n        case 5:\n            lengths.append(5)\n\
    \        case 6:\n            lengths.append(6)\n        case 7:\n           \
    \ lengths.append(7)\n        case 8:\n            lengths.append(8)\n        case\
    \ 9:\n            lengths.append(9)\n        default:\n            break\n   \
    \     }\n        length += 1\n    }\n    var result: [String] = []\n    for length\
    \ in lengths {\n        if length == 1 {\n            result.append(\"One\")\n\
    \        } else if length == 2 { // 1\n            result.append(\"Two\")\n  \
    \      } else if length == 3 { // 2\n            result.append(\"Three\")\n  \
    \      } else if length == 4 { // 3\n            result.append(\"Four\")\n   \
    \     } else if length == 5 { // 4\n            result.append(\"Five\")\n    \
    \    } else if length == 6 { // 5\n            result.append(\"Six\")\n      \
    \  } else if length == 7 { // 6\n            result.append(\"Seven\")\n      \
    \  } else if length == 8 { // 7\n            result.append(\"Eight\")\n      \
    \  } else if length == 9 { // 8\n            result.append(\"Nine\")\n       \
    \ }\n    }\n    return result", "\tlet arr = arr\n\tlet len = arr.count\n\tif\
    \ len == 0 {\n\t\treturn []\n\t}\n\n\tlet result = (0..<len).map { i -> String\
    \ in\n\t\tif arr[i] >= 1 && arr[i] <= 9 {\n\t\t\treturn \"One\"\n\t\t}\n\t\tif\
    \ arr[i] >= 10 && arr[i] <= 99 {\n\t\t\treturn \"Two\"\n\t\t}\n\t\tif arr[i] >=\
    \ 100 && arr[i] <= 999 {\n\t\t\treturn \"Three\"\n\t\t}\n\t\tif arr[i] >= 1000\
    \ && arr[i] <= 9999 {\n\t\t\treturn \"Four\"\n\t\t}\n\t\tif arr[i] >= 10000 &&\
    \ arr[i] <= 99999 {\n\t\t\treturn \"Five\"\n\t\t}\n\t\tif arr[i] >= 100000 &&\
    \ arr[i] <= 999999 {\n\t\t\treturn \"Six\"\n\t\t}\n\t\tif arr[i] >= 1000000 &&\
    \ arr[i] <= 9999999 {\n\t\t\treturn \"Seven\"\n\t\t}\n\t\tif arr[i] >= 10000000\
    \ && arr[i] <= 99999999 {\n\t\t\treturn \"Eight\"\n\t\t}\n\t\tif arr[i] >= 100000000\
    \ && arr[i] <= 999999999 {\n\t\t\treturn \"Nine\"\n\t\t}\n\t\treturn \"\"\n\t\
    }\n\n\treturn result", "\tvar names = [String]()\n\n\tif arr.isEmpty {\n\t\treturn\
    \ names\n\t}\n\n\tlet firstDigit = arr[0]\n\tlet lastDigit = arr[arr.count - 1]\n\
    \n\tfor i in 0..<arr.count {\n\t\tif arr[i] >= 1 && arr[i] <= 9 {\n\t\t\tif i\
    \ == 0 || arr[i-1] < arr[i] || arr[i] > arr[i+1] {\n\t\t\t\tlet name = names[Int(arr[i])]\n\
    \t\t\t\tnames.append(name)\n\t\t\t}\n\t\t}\n\t}\n\n\tif firstDigit > lastDigit\
    \ {\n\t\tnames.reverse()\n\t} else {\n\t\tnames.sort(by: <)\n\t}\n\n\tnames.reverse()\n\
    \treturn names", "  if arr.isEmpty() {\n    return []\n  }\n\n  if arr.count()\
    \ != 9 {\n    return []\n  }\n\n  let result = arr.sorted(by: { $0 < $1 })\n\n\
    \  let newStrings = Array(result.reversed()).map({\n    switch $0 {\n    case\
    \ 0: return \"Zero\"\n    case 1: return \"One\"\n    case 2: return \"Two\"\n\
    \    case 3: return \"Three\"\n    case 4: return \"Four\"\n    case 5: return\
    \ \"Five\"\n    case 6: return \"Six\"\n    case 7: return \"Seven\"\n    case\
    \ 8: return \"Eight\"\n    case 9: return \"Nine\"\n    }\n  })\n\n  return newStrings",
  "  guard arr.isEmpty == false else {\n    return []\n  }\n  \n  return arr.reduce(into:\
    \ []) {\n    (result, i) -> in\n    guard i >= 1 && i <= 9 else {\n      result.append(\"\
    \")\n      return\n    }\n    let name = String(describing: i)\n    let index\
    \ = Int(name) - 1\n    let value = index == 0 ? \"Zero\" : String(name)\n    result.append(value)\n\
    \  }", "    let minLength = min(arr.count)\n    var newArr = [String]()\n    for\
    \ i in 0..<minLength {\n        let element = arr[i]\n        let index = String(element)\n\
    \        let result = array[index]\n        newArr.append(result)\n    }\n   \
    \ for element in arr {\n        let index = String(element)\n        let result\
    \ = array[index]\n        newArr.remove(at: newArr.index(of: result)!)\n    }\n\
    \    return newArr", '  return sort(arr).reverse().map(str_to_digit)', "    var\
    \ result: [String] = []\n    for val in arr {\n        if val < 10 {\n       \
    \     result.append(String(val))\n        } else {\n            for letter in\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\" {\n                if val == Int(letter) {\n                    result.append(letter)\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return result", "    if arr.isEmpty {\n        return arr\n    }\n    var\
    \ output = [String]()\n    let maxLength = max(arr) + 10\n    var prev = 0\n \
    \   for val in arr {\n        if val < 1 || val > maxLength {\n            continue\n\
    \        }\n        let str = String(arr[prev...val])\n        output.append(str)\n\
    \        prev = val\n    }\n    return output", "    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var current = 0\n   \
    \ let upperBound = arr.count - 1\n    guard arr.count >= 1 else {\n        return\
    \ result\n    }\n    guard arr.count <= 9 else {\n        return result\n    }\n\
    \    while current < upperBound {\n        var reversedIndex: Int = 0\n      \
    \  let reversedIndexOne = current + 1\n        let reversedIndexTwo = current\
    \ + 2\n        let reversedIndexThree = current + 3\n        let reversedIndexFour\
    \ = current + 4\n        let reversedIndexFive = current + 5\n        let reversedIndexSix\
    \ = current + 6\n        let reversedIndexSeven = current + 7\n        let reversedIndexEight\
    \ = current + 8\n        let reversedIndexNine = current + 9\n        let one\
    \ = reversedIndexOne\n        let two = reversedIndexTwo\n        let three =\
    \ reversedIndexThree\n        let four = reversedIndexFour\n        let five =\
    \ reversedIndexFive\n        let six = reversedIndexSix\n        let seven = reversedIndexSeven\n\
    \        let eight = reversedIndexEight\n        let nine = reversedIndexNine\n\
    \        let oneIndex = reversedIndexOne\n        if oneIndex <= arr.count &&\
    \ arr[oneIndex] > 0 {\n            result += [\"One\"]\n            current +=\
    \ 1 // now that we've appended \"One\", we're done\n            continue\n   \
    \     } else {\n            // append \"Two\"\n            result += [\"Two\"\
    ]\n            current += 2 // now that we've appended \"Two\", we're done\n \
    \           if arr[oneIndex] > 0 {\n                continue\n            }\n\
    \            guard twoIndex <= arr.count && arr[twoIndex] > 0 else {\n       \
    \         return result\n            }\n            result += [\"Two\"]\n    \
    \        current += 2 // now that we've appended \"Two\", we're done\n       \
    \     if arr[twoIndex] > 0 {\n                continue\n            }\n      \
    \      guard threeIndex <= arr.count && arr[threeIndex] > 0 else {\n         \
    \       return result\n            }\n            result += [\"Three\"]\n    \
    \        current += 3 // now that we've appended \"Three\", we're done\n     \
    \       if arr[threeIndex] > 0 {\n                continue\n            }\n  \
    \          guard fourIndex <= arr.count && arr[fourIndex] > 0 else {\n       \
    \         return result\n            }\n            result += [\"Four\"]\n   \
    \         current += 4 // now that we've appended \"Four\", we're done\n     \
    \       if arr[fourIndex] > 0 {\n                continue\n            }\n   \
    \         guard fiveIndex <= arr.count && arr[fiveIndex] > 0 else {\n        \
    \        return ", "    if arr == nil {\n        return arr\n    }\n    \n   \
    \ if arr.isEmpty {\n        return arr\n    }\n    \n    let arrCopy = arr.map(Int)\n\
    \    let size = arrCopy.count\n    \n    let reversedArray = arrCopy.reverse()\n\
    \    var result = reversedArray\n    \n    for index in 0..<size {\n        if\
    \ index % 10 == 0 {\n            result = reversedArray.map({$0.toInt()})\n  \
    \      } else {\n            result = reversedArray\n        }\n        \n   \
    \     if index % 10 == 0 {\n            let index = arrCopy.count - 1\n      \
    \      let key = reversedArray[index].toInt()\n            if key < 10 && key\
    \ >= 0 {\n                result[index] = String.fromCharCode(key)\n         \
    \   }\n        }\n    }\n    \n    return result", "    defer { assert(arr.isNotEmpty(),\
    \ \"no arr given\") }\n    var result = [String]()\n    for number in arr {\n\
    \        if number < 1 || number > 9 {\n            continue\n        }\n    \
    \    // sort the arr in ascending order\n        arr.sort(ascending: <@-^Int,\
    \ @-^Int@->)\n        // reverse the arr\n        arr.reverse()\n        // convert\
    \ the arr to string and append it\n        result.append(\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[number]\n\
    \    }\n    return result", "    var result = [String]()\n    for i in arr {\n\
    \        let n = i + 9\n        if n < 10 {\n            result.append(String(format:\
    \ \"%c\", n))\n        } else if n < 36 {\n            result.append(String(format:\
    \ \"%c\", n + 10))\n        } else {\n            result.append(String(format:\
    \ \"%c\", n + 36))\n        }\n    }\n    result.reverse()\n    return result",
  "    var result = [String]()\n    for i in arr {\n        if i <= 9 {\n        \
    \    result.append(\"One\")\n        } else if i == 10 {\n            result.append(\"\
    Ten\")\n        } else if i == 11 {\n            result.append(\"Eleven\")\n \
    \       } else if i == 12 {\n            result.append(\"Twelve\")\n        }\
    \ else if i == 13 {\n            result.append(\"Thirteen\")\n        } else if\
    \ i == 14 {\n            result.append(\"Fourteen\")\n        } else if i == 15\
    \ {\n            result.append(\"Fifteen\")\n        } else if i == 16 {\n   \
    \         result.append(\"Sixteen\")\n        } else if i == 17 {\n          \
    \  result.append(\"Seventeen\")\n        } else if i == 18 {\n            result.append(\"\
    Eighteen\")\n        } else if i == 19 {\n            result.append(\"Nineteen\"\
    )\n        } else {\n            result.append(\"Hundred\")\n        }\n    }\n\
    \    result.reverse()\n    for index in 0..<result.count {\n        result[index]\
    \ = result[index][index.startIndex]\n    }\n    return result", "\tif arr.isEmpty()\
    \ {\n\t\treturn []\n\t}\n\t\n\tarr.sort{ a, b in\n\t\treturn a >= 9 && a <= 9\
    \ + b ? b - a + 1 : a - b\n\t}\n\t\n\treversed_arr := arr.reverse()\n\t\n\tmap\
    \ ({ arr.removeLast() }) reversed_arr\n\t\n\treturn arr.map({ name in\n\t\tswitch\
    \ name {\n\t\tcase 0:\n\t\t\treturn \"One\"\n\t\tcase 1:\n\t\t\treturn \"Two\"\
    \n\t\tcase 2:\n\t\t\treturn \"Three\"\n\t\tcase 3:\n\t\t\treturn \"Four\"\n\t\t\
    case 4:\n\t\t\treturn \"Five\"\n\t\tcase 5:\n\t\t\treturn \"Six\"\n\t\tcase 6:\n\
    \t\t\treturn \"Seven\"\n\t\tcase 7:\n\t\t\treturn \"Eight\"\n\t\tcase 8:\n\t\t\
    \treturn \"Nine\"\n\t\t}\n\t\t\n\t\tnil\n\t}) as [String]", '  return arr.sorted().map({
    $0 < 0 ? "One" : $1 < 0 ? "Two" : $1 < 10 ? "Three" : $1 < 100 ? "Four" : $1 <
    1000 ? "Five" : $1 < 10000 ? "Six" : $1 < 100000 ? "Seven" : $1 < 1000000 ? "Eight"
    : $1 < 10000000 ? "Nine" : String($1) }).reverse()', "    var len = [String]()\n\
    \    for _, v := range arr {\n        len.append(numberToName[v])\n    }\n   \
    \ sort.Sort(ByLength(len))\n    return len", "    let len = arr.count\n    var\
    \ result: [String] = []\n    let bases = (\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\").sorted()\n    for i in 0..<len\
    \ {\n        if arr[len-i-1] < 0 || arr[len-i-1] > 9 {\n            continue\n\
    \        }\n        let base = bases[arr[len-i-1]]\n        result.append(\"\\\
    (base)\") // append the base if it's a valid digit\n    }\n    return result",
  "    guard !arr.isEmpty else { return [] }\n    var newArr = arr.sorted()\n    if\
    \ newArr.first > 9 {\n        newArr = newArr.suffix(1)\n    }\n    var result\
    \ = [String]()\n    for i in 0 ..< newArr.count {\n        switch i {\n      \
    \  case 0:\n            result.append(\"One\")\n        case 1:\n            result.append(\"\
    Two\")\n        case 2:\n            result.append(\"Three\")\n        case 3:\n\
    \            result.append(\"Four\")\n        case 4:\n            result.append(\"\
    Five\")\n        case 5:\n            result.append(\"Six\")\n        case 6:\n\
    \            result.append(\"Seven\")\n        case 7:\n            result.append(\"\
    Eight\")\n        case 8:\n            result.append(\"Nine\")\n        default:\n\
    \            result.append(\"\\(newArr[i])\")\n        }\n    }\n    return result",
  "    guard !arr.isEmpty else { return [] }\n\n    // Reverse the array, then map\
    \ each digit to its corresponding digit name.\n    let result = reverseArray(arr).map\
    \ { nameByDigit($0) }\n    return result", "    // if the array is empty\n   \
    \ if arr.isEmpty() {\n        return arr\n    }\n\n    // sort the array (ascending)\n\
    \    let arrSorted = arr.sorted { $0 < $1 }\n\n    // reverse the array\n    let\
    \ arrReversed = arrSorted.reverse()\n\n    // go through the reversed array and\
    \ assign each element to the name \"One\", \"Two\"...\n    var names = [String]()\n\
    \    for i in 0..<arrReversed.count {\n        switch i {\n        case 0..<5:\n\
    \            names.append(\"One\")\n        case 6..<10:\n            names.append(\"\
    Two\")\n        case 11..<15:\n            names.append(\"Three\")\n        case\
    \ 16..<20:\n            names.append(\"Four\")\n        case 21:\n           \
    \ names.append(\"Five\")\n        case 22..<25:\n            names.append(\"Six\"\
    )\n        case 26..<30:\n            names.append(\"Seven\")\n        case 31..<35:\n\
    \            names.append(\"Eight\")\n        case 36..<40:\n            names.append(\"\
    Nine\")\n        case 41..<45:\n            names.append(\"Ten\")\n        default:\n\
    \            break\n        }\n        names.append(arrReversed[i])\n    }\n\n\
    \    return names", "\tif arr.isEmpty {\n\t\treturn []\n\t}\n\n\tswitch arr[0]\
    \ {\n\tcase 1: return [\"One\"]\n\tcase 2: return [\"Two\", \"One\"]\n\tcase 3:\
    \ return [\"Three\", \"Two\", \"One\"]\n\tcase 4: return [\"Four\", \"Three\"\
    , \"Two\", \"One\"]\n\tcase 5: return [\"Five\", \"Four\", \"Three\", \"Two\"\
    , \"One\"]\n\tcase 6: return [\"Six\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"One\"]\n\tcase 7: return [\"Seven\", \"Six\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"One\"]\n\tcase 8: return [\"Eight\", \"Seven\", \"Six\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"One\"]\n\tcase 9: return [\"Nine\", \"Eight\"\
    , \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n\tdefault:\n\
    \t\treturn []\n\t}", "    arr.sortInPlace()\n    var result = [String]()\n   \
    \ if arr.isEmpty() {\n        return result\n    }\n    let maxLength = max(arr.count,\
    \ 9)\n    for i in 1..maxLength {\n        let index = findIndex(arr, i)\n   \
    \     if index == -1 {\n            continue\n        }\n        let n = arr[arr.index(index,\
    \ offsetBy: i)]\n        if n != n {\n            result.append(n)\n        }\n\
    \    }\n    return result.reversed()", "    var res = make([]string, len(arr))\n\
    \    sort_by(arr, func(i Int) -> Bool { // Sort by length, descending\n      \
    \  return i <= 9\n    })\n    var inc = 1 // Increment by one\n    for i := 0;\
    \ i < len(arr); i++ {\n        res[i] = string(arr[inc-1])\n        if i < 9 {\n\
    \            inc++\n        }\n    }\n    return res", "  if arr == nil || arr[0]\
    \ == 0 {\n    return []\n  }\n  // check length\n  if arr.count < 2 || arr.count\
    \ > 9 {\n    return []\n  }\n  // check all numbers are between 1 and 9\n  let\
    \ arr1 = arr.map({ $0 })\n  for element in arr1 {\n    if element < 1 || element\
    \ > 9 {\n      continue\n    }\n  }\n  \n  var reversed: [Int] = []\n  for element\
    \ in arr {\n    reversed.append(9 - element)\n  }\n  \n  var result: [String]\
    \ = []\n  for element in arr1 {\n    guard element < 10 else { return result }\n\
    \    guard let index = reversed.index(of: element) else { return result }\n  \
    \  let result = reversed[index].description ?? \"\"\n    result.append(result)\n\
    \  }\n  return result", "    var index = 0\n    var strs = [String]()\n    for\
    \ n in arr {\n        if index % 10 == 1 && n >= 1 && n <= 9 {\n            strs.append(n.description)\n\
    \        }\n        index++\n    }\n    if strs.isEmpty {\n        return []\n\
    \    }\n    for str in strs {\n        strs[strs.indexWhere({ \"One\" ~= str })!]\
    \ = \"One\"\n        strs[strs.indexWhere({ \"Two\" ~= str })!] = \"Two\"\n  \
    \      strs[strs.indexWhere({ \"Three\" ~= str })!] = \"Three\"\n        strs[strs.indexWhere({\
    \ \"Four\" ~= str })!] = \"Four\"\n        strs[strs.indexWhere({ \"Five\" ~=\
    \ str })!] = \"Five\"\n        strs[strs.indexWhere({ \"Six\" ~= str })!] = \"\
    Six\"\n        strs[strs.indexWhere({ \"Seven\" ~= str })!] = \"Seven\"\n    \
    \    strs[strs.indexWhere({ \"Eight\" ~= str })!] = \"Eight\"\n        strs[strs.indexWhere({\
    \ \"Nine\" ~= str })!] = \"Nine\"\n    }\n    strs.reverse()\n    return strs",
  "    var arr2 = []\n    var str = \"\"\n    for num in arr {\n        arr2.append(num)\n\
    \    }\n    if arr2.count > 9 {\n        for index in 0..<(9 - arr2.count) {\n\
    \            str += \"One\"\n        }\n    }\n    if arr2.count > 9 {\n     \
    \   for index in 1..<(9 - arr2.count) {\n            str += \"Two\"\n        }\n\
    \    }\n    if arr2.count > 9 {\n        for index in 2..<(9 - arr2.count) {\n\
    \            str += \"Three\"\n        }\n    }\n    if arr2.count > 9 {\n   \
    \     for index in 3..<(9 - arr2.count) {\n            str += \"Four\"\n     \
    \   }\n    }\n    if arr2.count > 9 {\n        for index in 4..<(9 - arr2.count)\
    \ {\n            str += \"Five\"\n        }\n    }\n    if arr2.count > 9 {\n\
    \        for index in 5..<(9 - arr2.count) {\n            str += \"Six\"\n   \
    \     }\n    }\n    if arr2.count > 9 {\n        for index in 6..<(9 - arr2.count)\
    \ {\n            str += \"Seven\"\n        }\n    }\n    if arr2.count > 9 {\n\
    \        for index in 7..<(9 - arr2.count) {\n            str += \"Eight\"\n \
    \       }\n    }\n    if arr2.count > 9 {\n        for index in 8..<(9 - arr2.count)\
    \ {\n            str += \"Nine\"\n        }\n    }\n    if arr2.count == 9 {\n\
    \        for index in 0..<(9 - arr2.count) {\n            str += \"One\"\n   \
    \     }\n    }\n    if arr2.count == 9 {\n        for index in 1..<(9 - arr2.count)\
    \ {\n            str += \"Two\"\n        }\n    }\n    if arr2.count == 9 {\n\
    \        for index in 2..<(9 - arr2.count) {\n            str += \"Three\"\n \
    \       }\n    }\n    if arr2.count == 9 {\n        for index in 3..<(9 - arr2.count)\
    \ {\n            str += \"Four\"\n        }\n    }\n    if arr2.count == 9 {\n\
    \        for index in 4..<(9 - arr2.count) {\n            str += \"Five\"\n  \
    \      }\n    }\n    if arr2.count == 9 {\n        for index in 5..<(9 - arr2.count)\
    \ {\n            str += \"Six\"\n        }\n    }\n    if arr2.count == 9 {\n\
    \        for index in 6..<(9 - arr2.count) {\n            str += \"", "    if\
    \ arr == nil {\n        return nil\n    }\n    \n    var names = [String]()\n\
    \    if arr.count != 0 {\n        let arr = arr as! [Int]\n        \n        if\
    \ arr.count < 9 {\n            for i in 0..<arr.count {\n                names.append(\"\
    One\")\n            }\n            \n            for i in arr.reversed() {\n \
    \               switch i {\n                case 1: names.append(\"Two\")\n  \
    \              case 2: names.append(\"Three\")\n                case 3: names.append(\"\
    Four\")\n                case 4: names.append(\"Five\")\n                case\
    \ 5: names.append(\"Six\")\n                case 6: names.append(\"Seven\")\n\
    \                case 7: names.append(\"Eight\")\n                case 8: names.append(\"\
    Nine\")\n                default: break\n                }\n            }\n  \
    \      } else {\n            for i in arr.reversed() {\n                switch\
    \ i {\n                case 1: names.append(\"Twelve\")\n                case\
    \ 2: names.append(\"Thirty\")\n                case 3: names.append(\"Fourty\"\
    )\n                case 4: names.append(\"Fifty\")\n                case 5: names.append(\"\
    Sixty\")\n                case 6: names.append(\"Seventy\")\n                case\
    \ 7: names.append(\"Eighty\")\n                case 8: names.append(\"Ninety\"\
    )\n                default: break\n                }\n            }\n        }\n\
    \    }\n    return names", "    var output = \"\"\n    for value in arr {\n  \
    \      if value < 10 {\n            output += \"\\(nameMap[value])\"\n       \
    \ } else {\n            output += \"\\(nameMap[value - 10]), \\(nameMap[value\
    \ % 10])\"\n        }\n    }\n    return output.characters.split{$0 == \",\"}.map{String($0)}.filter({\
    \ !$0.isEmpty}).reversed()", "    let sorted = arr.sorted()\n    let reversed\
    \ = sorted.reverse()\n    return reversed.map { String($0) }", "    let sorted\
    \ = arr.sorted(by: { $0 < $1 })\n    return arr.isEmpty\n        ? []\n      \
    \  : sorted\n            .reversed()\n            .map {\n                let\
    \ digit = String($0)\n                let index = Int(digit) - 1\n           \
    \     if index >= 1 && index <= 9 {\n                    return [String]([\n \
    \                       \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\",\n                        \"Eight\", \"Nine\", \"Zero\"\n        \
    \            ][index])\n                }\n                return digit\n    \
    \        }", "    if arr.isEmpty {\n        return []\n    }\n    var str = arr[0]\
    \ as String\n    for i := 1; i < len(arr); i++ {\n        str = str + arr[i] as\
    \ String + arr[i] as String\n    }\n    return str.characters.reversed().map {\
    \ String($0) }", "  if arr.isEmpty {\n    return []\n  }\n\n  // If there is no\
    \ digit, just return it.\n  if let i = find(arr) {\n    return []\n  }\n\n  let\
    \ res = [\n    \"\",\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\"\
    ,\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\"\n\
    \  ]\n  var lastDigit: Int = 0\n  var lastChar: String = \"\"\n  for i in 0 ..<\
    \ arr.count {\n    lastChar = res[i]\n    if i == arr.count - 1 {\n      if lastChar\
    \ == \"\" {\n        lastChar = \"One\"\n      }\n    } else if i == 0 && lastChar\
    \ == \"\" {\n      lastChar = \"One\"\n    }\n    let num = arr[i]\n\n    if lastDigit\
    \ == 0 {\n      if num == 1 {\n        lastDigit = 1\n      } else if (num >=\
    \ 2 && num <= 9) {\n        lastDigit = num\n      }\n    } else {\n      lastDigit\
    \ = 0\n      if num == 1 {\n        lastChar = \"One\"\n      } else if num >=\
    \ 2 && num <= 9 {\n        lastChar = String(num - 2)\n      }\n    }\n    res[i]\
    \ = lastChar\n  }\n  return res", "    guard arr != nil || arr.isEmpty, arr.count\
    \ == 0 else {\n        return []\n    }\n    \n    var result = [String]()\n \
    \   \n    for num in arr {\n        \n        if num < 10 {\n            result.append(num.description)\n\
    \        }\n        \n        else {\n            \n            if num % 10 ==\
    \ 0 {\n                result.append(String(num / 10))\n            }\n      \
    \      \n            else {\n                result.append(String(num / 10) +\
    \ String(num % 10))\n            }\n        }\n    }\n    \n    return result",
  "    var result = [String]()\n    switch arr.count {\n    case 0:\n        return\
    \ result\n    case 1:\n        if arr[0] == 1 {\n            return [\"One\"]\n\
    \        } else if arr[0] == 2 {\n            return [\"Two\"]\n        } else\
    \ if arr[0] == 3 {\n            return [\"Three\"]\n        } else if arr[0] ==\
    \ 4 {\n            return [\"Four\"]\n        } else if arr[0] == 5 {\n      \
    \      return [\"Five\"]\n        } else if arr[0] == 6 {\n            return\
    \ [\"Six\"]\n        } else if arr[0] == 7 {\n            return [\"Seven\"]\n\
    \        } else if arr[0] == 8 {\n            return [\"Eight\"]\n        } else\
    \ if arr[0] == 9 {\n            return [\"Nine\"]\n        }\n    case 2:\n  \
    \      if arr[0] > 1 && arr[1] > 9 {\n            return arr.reverse()\n     \
    \   } else if arr[0] > 9 {\n            return [\"Nine\", \"One\"]\n        }\n\
    \    case 3:\n        if arr[0] > 1 && arr[1] > 9 && arr[2] > 9 {\n          \
    \  return arr.reverse()\n        } else if arr[0] > 9 && arr[1] > 9 {\n      \
    \      return [\"Nine\", \"One\"]\n        }\n    case 4:\n        if arr[0] >\
    \ 1 && arr[1] > 9 && arr[2] > 9 && arr[3] > 9 {\n            return arr.reverse()\n\
    \        } else if arr[0] > 9 && arr[1] > 9 && arr[2] > 9 {\n            return\
    \ [\"Nine\", \"One\"]\n        }\n    case 5:\n        if arr[0] > 1 && arr[1]\
    \ > 9 && arr[2] > 9 && arr[3] > 9 && arr[4] > 9 {\n            return arr.reverse()\n\
    \        } else if arr[0] > 9 && arr[1] > 9 && arr[2] > 9 && arr[3] > 9 {\n  \
    \          return [\"Nine\", \"One\"]\n        }\n    case 6:\n        if arr[0]\
    \ > 1 && arr[1] > 9 && arr[2] > 9 && arr[3] > 9 && arr[4] > 9 && arr[5] > 9 {\n\
    \            return arr.reverse()\n        } else if arr[0] > 9 && arr[1] > 9\
    \ && arr[2] > 9 && arr[3] > 9 && arr[4] > 9 {\n            return [\"Nine\", \"\
    One\"]\n        }\n    case 7:\n        if arr[0] > 1 && arr[1] > 9 && arr[2]\
    \ > 9 && arr[3] > 9 && arr[4] > 9 && arr[5] > 9 && arr[6] > 9 {\n            return\
    \ arr.reverse()\n        } else if arr[0] > 9 && arr[1] > 9 && arr[2] > 9 && arr[3]\
    \ > 9 && arr[4] > 9 && arr[5] > 9 {\n            return [\"Nine\", \"", '    return
    reverse_by(arr) { $0 < $1 }.map({ name($0) })', '    return arr_to_str(arr, reverse(arr),
    ones, tens, onesAndTens)', "    guard !arr.isEmpty, arr.count >= 1 else {\n  \
    \      return []\n    }\n    var arr = arr\n    // sort numbers, sort with reverse\
    \ to get biggest first\n    guard let sorted = arr.sorted else {\n        return\
    \ []\n    }\n    return sorted.reversed().map { $0.description(withAbbreviations:\
    \ false, withOffsets: false) }", "\tvar arr2 = arr\n\tvar count = 0\n\tfor num\
    \ in arr2 {\n\t\tif num > 0 && num < 10 {\n\t\t\tif count == 0 {\n\t\t\t\tarr2\
    \ = append(arr2, One)\n\t\t\t}\n\t\t\tarr2 = append(arr2, Two)\n\t\t\tarr2 = append(arr2,\
    \ Three)\n\t\t\tarr2 = append(arr2, Four)\n\t\t\tarr2 = append(arr2, Five)\n\t\
    \t\tarr2 = append(arr2, Six)\n\t\t\tarr2 = append(arr2, Seven)\n\t\t\tarr2 = append(arr2,\
    \ Eight)\n\t\t\tarr2 = append(arr2, Nine)\n\t\t}\n\t\tcount = count + 1\n\t}\n\
    \tif count == 0 {\n\t\treturn []\n\t}\n\tarr2 = reverse(arr2)\n\tarr2 = replace_digits(arr2)\n\
    \treturn arr2"]
stop_tokens:
- "\n}"
