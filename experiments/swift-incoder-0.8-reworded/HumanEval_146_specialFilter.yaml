name: HumanEval_146_specialFilter
language: swift
prompt: "\n/// Write a function that takes an array of numbers as input and returns\
  \ \n/// the number of elements in the array that are greater than 10 and both \n\
  /// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
  /// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums:\
  \ [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\n\
  assert(specialFilter(nums: [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums:\
  \ [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums: [43, -12, 93, 125,\
  \ 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33, 75, 21, 19]) == 3)\n\
  assert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums: [] as [Int]) ==\
  \ 0)"
completions: ["    var count = 0\n    for n in nums {\n        if n > 10 && n % 2\
    \ == 1 {\n            count += 1\n        }\n        if n > 10 && n % 2 == 0 &&\
    \ n < 100 {\n            count += 1\n        }\n    }\n    return count", "  \
    \  let arr = nums.filter { $0 > 10 }\n    if arr.count > 0 {\n        if arr[0]\
    \ % 2 == 1 { return arr.count }\n    }\n    return 0", "    // Your code here\n\
    \    guard nums.count > 0 else { return 0 }\n    var count = 0\n    for number\
    \ in nums {\n        if (number > 10) && (number % 2 == 1) && (number % 2 == 0)\
    \ {\n            count += 1\n        }\n    }\n    return count", "\t\n\treturn\
    \ 0\n\t", "    guard let numsAsArray = nums.toArray() else { return 0 }\n    var\
    \ count = 0\n    \n    for i in numsAsArray {\n        if i > 10 {\n         \
    \   count += 1\n            if i % 2 == 1 {\n                if i >= 11 {\n  \
    \                  count += 1\n                }\n            }\n            if\
    \ i % 2 == 0 {\n                if i >= 11 {\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count", "    let\
    \ min = min(nums)\n    let max = max(nums)\n    return nums.count { $0 < 10 &&\
    \ $0 % 2 == 1 && $0 < min && $0 > max }", "    for num in nums {\n        if num\
    \ % 10 > 0 && num % 10 < 5 && num % 100 % 2 != 0 {\n            return num\n \
    \       }\n    }\n    return 0", "    guard nums.count > 0 else { return 0 }\n\
    \    var count = 0\n    for n in nums {\n        if n > 10 {\n            if n\
    \ % 2 == 1 && (n / 10) % 2 == 1 {\n                count += 1\n            }\n\
    \        }\n    }\n    return count", "    var result = 0\n    for num in nums\
    \ {\n        if num < 10 {\n            result += 1\n        } else if num < -10\
    \ && num%2 == 1 {\n            result += 1\n        } else if num > -10 && (num%2\
    \ == 0 || num%2 != 1) {\n            result += 1\n        }\n    }\n    return\
    \ result", "    var count = 0\n    for num in nums {\n        let newNum = num\
    \ % 100\n        if newNum > 10 && newNum % 10 % 1 == 1 {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    var result = nums.filter({\n  \
    \      $0 > 10 && ($0 % 2 == 1) &&\n        ($0 % 2 == 1 && $0 == ($0.truncatingRemainder(dividingBy:\
    \ 2).truncatingRemainder(dividingBy: 2))\n    }).count\n    return result", " \
    \   var result = Int(0)\n    for num in nums {\n        if (num % 2 == 1 && num\
    \ % 4 == 1) || (num % 2 == 0 && (num % 100 != 0 || num % 400 == 0)) || (num %\
    \ 2 == 1 && num % 6 != 0) {\n            result += Int(1)\n        }\n    }\n\
    \    return result", "    let sum : Int = 0\n    for n in nums {\n        sum\
    \ += n\n    }\n    let isOdd : Bool = sum % 2 != 0\n    let lastDigit : Bool =\
    \ sum % 10 == 1 && sum % 100 != 11\n    return isOdd and lastDigit", "    let\
    \ count = nums.filter { $0 > 10 &&\n                                (Int(String($0))[0]\
    \ % 2 != 0 && \n                                 Int(String($0))[Int(String($0)).length\
    \ - 1] % 2 != 0) }.count\n    return count", '    return specialFilterImpl(nums)',
  "    var count = 0\n    for n in nums {\n        if n > 10 {\n            if n%2\
    \ == 1 && n%2 != 0 {\n                count += 1\n            }\n        }\n \
    \   }\n    return count", "    var result = 0\n    for num in nums {\n       \
    \ if num < 10 {\n            continue\n        }\n        if num > 10 && num %\
    \ 2 == 1 {\n            continue\n        }\n        if num > 10 && num % 2 ==\
    \ 0 {\n            if num - 9 % 2 == 0 {\n                result += num // 10\n\
    \            } else {\n                result += num // 10 + 9\n            }\n\
    \        } else {\n            result += num\n        }\n    }\n    return result",
  "    var count = 0\n    var index = 0\n    while index < nums.count {\n        if\
    \ nums[index] > 10 &&\n            nums[index] % 10 % 2 == 1 &&\n            nums[index]\
    \ % 10 % 3 == 1 {\n            count += 1\n        }\n        index++\n    }\n\
    \    return count", "    var count = nums.count\n    for i in 0..<count {\n  \
    \      let number = nums[i]\n        if number > 10 && Int(number / 10) % 2 !=\
    \ 0 {\n            if Int(number / 100) % 2 != 0 {\n                if Int(number\
    \ / 1000) % 2 != 0 {\n                    count -= 1\n                }\n    \
    \        }\n        }\n    }\n    return count", "  var result = 0\n  for num\
    \ in nums {\n    if num > 10 && isOdd(num) && isOdd(num.trailingZeroes) {\n  \
    \    result += 1\n    }\n  }\n  return result", "    if nums.isEmpty { return\
    \ 0 }\n    \n    let firstDigit = nums.first?.digit\n    let lastDigit = nums.last?.digit\n\
    \    \n    if firstDigit == nil || lastDigit == nil { return 0 }\n    \n    let\
    \ firstDigitDigit = firstDigit?.digit\n    let lastDigitDigit = lastDigit?.digit\n\
    \    \n    if firstDigitDigit == nil || lastDigitDigit == nil { return 0 }\n \
    \   \n    guard let firstDigitDigitInt = firstDigitDigit!,\n        let lastDigitDigitInt\
    \ = lastDigitDigit!,\n        lastDigitDigitInt == nil || firstDigitDigitInt ==\
    \ nil else {\n        return 0 }\n    \n    var count = 0\n    \n    for i in\
    \ 0 ..< nums.count {\n        let num = nums[i]\n        if num > 10 {\n     \
    \       break\n        }\n        \n        let firstDigitNum = num.digit\n  \
    \      if firstDigitNum == nil { break }\n        \n        let lastDigitNum =\
    \ nums[i - 1]?.digit\n        if lastDigitNum == nil { break }\n        \n   \
    \     if firstDigitNum != nil && lastDigitNum != nil {\n            if firstDigitNum!.digitValue\
    \ % 2 == 1 && lastDigitNum!.digitValue % 2 == 1 {\n                count += 1\n\
    \            }\n        }\n    }\n    return count", "    if nums.count < 1 {\n\
    \        return 0\n    }\n    var count = 0\n    var prev = -999\n    for n in\
    \ nums {\n        if n >= 10 {\n            count++\n            if n < 10 {\n\
    \                prev += 1\n            }\n        } else {\n            if n\
    \ % 2 == 0 && prev % 2 == 1 {\n                count += 1\n            }\n   \
    \         prev = n\n        }\n    }\n    return count", '    return specialFilterHelper(nums,
    0, nums.count - 1, 0, 0)', "    let filteredNums = nums.filter({ $0 > 10 && $0.isMultiple(of:\
    \ 2) && $0.isMultiple(of: 2) })\n    return filteredNums.count", "    for n in\
    \ nums {\n        if n.isMultiple(of: 10) {\n            if n.isMultiple(of: 2)\
    \ {\n                return 1\n            } else {\n                return 0\n\
    \            }\n        } else {\n            return 0\n        }\n    }\n   \
    \ return 0", '    return nums.filter { $0 > 10 && $0.isOdd && $0.isOdd }.count',
  "    var count = 0\n    for num in nums {\n        if num > 10 {\n            let\
    \ first = num % 10\n            let last = num - first\n            if first ==\
    \ last {\n                continue\n            }\n            let firstOdd =\
    \ (first % 2) == 0\n            let lastOdd = (last % 2) == 0\n            if\
    \ firstOdd && lastOdd {\n                count += 1\n            }\n        }\n\
    \    }\n    return count", "    var filteredNums = nums.filter { $0 > 10 }\n \
    \   filteredNums.forEach { num in \n        num = (num % 10) + num\n        if\
    \ num % 2 != 0 && num % 3 != 0 && num % 5 != 0 {\n            filteredNums.removeAll()\n\
    \        }\n    }\n    return filteredNums.count", "  var count = 0\n  for n in\
    \ nums {\n    switch n {\n    case 10:\n      if n % 2 != 0 {\n        count +=\
    \ 1\n      }\n    case 11:\n      if n % 2 != 0 {\n        count += 1\n      }\n\
    \    case 12:\n      if n % 2 != 0 {\n        count += 1\n      }\n    case 13:\n\
    \      if n % 2 != 0 {\n        count += 1\n      }\n    case 14:\n      if n\
    \ % 2 != 0 {\n        count += 1\n      }\n    case 15:\n      if n % 2 != 0 {\n\
    \        count += 1\n      }\n    case 16:\n      if n % 2 != 0 {\n        count\
    \ += 1\n      }\n    case 17:\n      if n % 2 != 0 {\n        count += 1\n   \
    \   }\n    case 18:\n      if n % 2 != 0 {\n        count += 1\n      }\n    case\
    \ 19:\n      if n % 2 != 0 {\n        count += 1\n      }\n    case 20:\n    \
    \  if n % 2 != 0 {\n        count += 1\n      }\n    case 21:\n      if n % 2\
    \ != 0 {\n        count += 1\n      }\n    case 22:\n      if n % 2 != 0 {\n \
    \       count += 1\n      }\n    case 23:\n      if n % 2 != 0 {\n        count\
    \ += 1\n      }\n    case 24:\n      if n % 2 != 0 {\n        count += 1\n   \
    \   }\n    case 25:\n      if n % 2 != 0 {\n        count += 1\n      }\n    case\
    \ 26:\n      if n % 2 != 0 {\n        count += 1\n      }\n    case 27:\n    \
    \  if n % 2 != 0 {\n        count += 1\n      }\n    case 28:\n      if n % 2\
    \ != 0 {\n        count += 1\n      }\n    case 29:\n      if n % 2 != 0 {\n \
    \       count += 1\n      }\n    case 30:\n      if n % 2 != 0 {\n        count\
    \ += 1\n      }\n    case 31:\n      if n % 2 != 0 {\n        count += 1\n   \
    \   }\n    case 32:\n      if n % 2 != 0 {\n        count += 1\n      }\n    case\
    \ 33:\n      if n % 2 != 0 {\n        count += 1\n      }\n    case 34:\n    \
    \  if n % 2 != 0 {\n        count += 1\n      }\n    case 35:\n      if n % 2\
    \ != 0 {\n        count += 1\n      }\n    case 36:\n      if n % 2 != 0 {\n \
    \       count += 1\n      }\n    case 37:\n      if n % 2 != 0 {\n        count\
    \ += 1\n      }\n    case 38:\n      if n % 2 != 0 {\n        count += 1\n   \
    \   }\n    case 39:\n      if n % 2 != 0 {\n        count += 1\n      }\n    case\
    \ 40:\n      if n % 2 != 0 {\n        count += 1\n      }\n    case 41:\n    \
    \  if n % 2 != 0 {\n        count += 1\n      }\n    case 42:\n      if n % 2\
    \ != 0 {\n        count += 1\n      }\n    case 43:\n      if n % 2 != 0 {\n \
    \       count += 1\n      }\n    case 44:\n      if ", "    if nums.count == 0\
    \ { return 0 }\n    if nums.count == 1 { return 1 }\n    if nums.count > 1 { return\
    \ nums.filter { $0 > 10 && $0.isOdd }.count }\n    return nums.filter { $0 > 10\
    \ && $0.isOdd }.count + 1", "    \n    var count = 0\n    var isOddFirst = false\n\
    \    var isOddLast = false\n    \n    for i in nums {\n        if i.isOdd() {\n\
    \            isOddFirst = true\n        } else if isOddFirst {\n            isOddLast\
    \ = true\n        } else {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for n in nums {\n        if ((n % 10) % 2 !=\
    \ 0) || ((n % 100) % 2 != 0 && n % 10 > 9) {\n            count += 1\n       \
    \ }\n    }\n    return count", "\tvar i = 0\n\t\n\tfor num in nums {\n\t\tif num\
    \ > 10 && num.isOdd() && num.isOdd() && num.isOdd() {\n\t\t\ti += 1\n\t\t}\n\t\
    }\n\treturn i", "    if nums.isEmpty { return 0 }\n\n    var count = 0\n    for\
    \ x in nums {\n        let remainder = x % 10\n        if remainder == 0 && x\
    \ > 0 {\n            count += (remainder % 2 == 1 ? 1 : 0)\n        }\n    }\n\
    \    return count", "  guard let numsCount = nums.count else {\n    return 0\n\
    \  }\n  \n  var count = 0\n  \n  for num in nums {\n    if num > 10 {\n      continue\n\
    \    }\n    \n    if isOdd(num) {\n      continue\n    }\n    \n    if isOddEven(num,\
    \ first: nums.first, last: nums.last) {\n      continue\n    }\n    \n    count\
    \ += 1\n  }\n  \n  return count", "    guard nums.count > 0 else { return 0 }\n\
    \    var count = 0\n    for num in nums {\n        guard num > 10 else { continue\
    \ }\n        guard num % 2 != 0 else { continue }\n        guard let first = nums.first\
    \ else { continue }\n        guard nums.last > 10 else { continue }\n        if\
    \ first % 2 != 0 {\n            guard num % 2 != 0 else { continue }\n       \
    \ }\n        guard first % 2 != 0 else { continue }\n        count += 1\n    }\n\
    \    return count", "    guard nums.count > 0 else {\n        return 0;\n    }\n\
    \    guard let first = nums.first else {\n        return 0\n    }\n    guard let\
    \ last = nums.last else {\n        return 0\n    }\n    if last - first == 1 {\n\
    \        return nums.filter { $0 > 10 && $0 % 2 != 0 }.length\n    }\n    return\
    \ nums.filter { $0 > 10 && $0 % 2 == 1 }.length", "    let length = nums.count\n\
    \    if length == 0 {\n        return 0\n    }\n    let first = nums[0]\n    var\
    \ last: Int = 0\n    var count = 0\n    for i in 0..<length {\n        let value\
    \ = nums[i]\n        if value > 10 {\n            count += 1\n            if first\
    \ % 2 != 0 && last % 2 != 0 {\n                count += 1\n            }\n   \
    \     }\n        first = value\n    }\n    return count", "    var sumOfEvens\
    \ = 0\n    for num in nums {\n        if num % 2 == 0 {\n            sumOfEvens\
    \ += 1\n        }\n    }\n\n    if sumOfEvens == nums.count {\n        return\
    \ 0\n    }\n\n    var sumOfOdds = 0\n    for num in nums {\n        if num % 2\
    \ != 0 {\n            sumOfOdds += 1\n        }\n    }\n\n    return sumOfEvens\
    \ - sumOfOdds", "    \n    var count = 0\n    \n    for n in nums {\n        \n\
    \        if n > 10 && n.isOdd() && n.isOdd() {\n            count += 1\n     \
    \   }\n    }\n    \n    return count", "    for n in nums {\n        if n < 10\
    \ {\n            continue\n        }\n        let first = n % 10\n        let\
    \ last = n / 10\n        if first % 2 != last % 2 {\n            return n\n  \
    \      }\n    }\n    return 0", "    let sum = nums.reduce(0, combine: +)\n  \
    \  return nums.filter { $0 > 10 && ($0 % 2) != ($1 % 2) }.count", "\treturn specialFilter(nums.map,\
    \ nums.count, { ($0 % 10) == 1 && $0 % 2 == 1 })", "    var count = 0\n    var\
    \ firstEven = false\n    for n in nums {\n        if n > 0 {\n            if firstEven\
    \ {\n                firstEven = false\n            } else {\n               \
    \ if n % 2 == 1 {\n                    count += 1\n                } else {\n\
    \                    firstEven = true\n                }\n            }\n    \
    \    }\n    }\n    return count", "    var count = 0\n    for i in nums {\n  \
    \      if i > 10 {\n            count += 1\n            if i < 0 {\n         \
    \       if i < -10 {\n                    continue\n                }\n      \
    \          if i == 0 {\n                    continue\n                }\n    \
    \            if i == -9 {\n                    continue\n                }\n \
    \           }\n            if i % 2 == 1 {\n                continue\n       \
    \     }\n            if i % 2 == 0 {\n                if i > 9 {\n           \
    \         continue\n                }\n                if i > 45 {\n         \
    \           continue\n                }\n                if i > 21 {\n       \
    \             continue\n                }\n                if i > 109 {\n    \
    \                continue\n                }\n            }\n        }\n    }\n\
    \    return count", "    let count = nums.filter{ $0 > 10 }.count\n    return\
    \ count == 1 && nums[0] % 2 == 1 && nums.last % 2 == 1", "    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n >= 0 && n % 2 == 1 {\n          \
    \  count += 1\n        }\n    }\n    return count", "    let sum = nums.reduce(0,\
    \ +)\n    if sum < 10 { return 0 }\n    var count = 0\n    for x in nums {\n \
    \       if x > 10 && x % 2 == 0 && x % 3 == 0 {\n            count += 1\n    \
    \    }\n    }\n    return count", "    let digits = nums.map({ String($0) }).filter\
    \ { $0.count > 1 }\n    let oddDigits = digits.filter { $0.first % 2 != 0 }\n\
    \    let evenDigits = digits.filter { $0.last % 2 != 0 }\n    let isOddAndEven\
    \ = oddDigits.isEmpty || evenDigits.isEmpty\n    \n    return isOddAndEven ? digits[0].count\
    \ : digits[0].count + digits[digits.count - 1].count", "    var count = 0\n  \
    \  for num in nums {\n        if num > 10 {\n            if num % 2 == 0 {\n \
    \               if num.lastDigit() == 1 {\n                    count += 1\n  \
    \              } else {\n                    count -= 1\n                }\n \
    \           } else {\n                if num.firstDigit() == 1 {\n           \
    \         count += 1\n                } else {\n                    count -= 1\n\
    \                }\n            }\n        }\n    }\n    return count", "  if\
    \ nums.isEmpty {\n    return 0\n  }\n  var sum = 0\n  var currentNum = nums[0]\n\
    \  var startIndex = 1\n  var lastIndex = nums.count\n  for index in 1..<lastIndex\
    \ {\n    sum += (currentNum % 10) != 0\n    currentNum /= 10\n  }\n  for index\
    \ in 0..<startIndex {\n    sum += (currentNum % 10) != 0\n    currentNum /= 10\n\
    \  }\n  sum += (currentNum % 10) != 0\n  return sum", "    if nums.isEmpty { return\
    \ 0 }\n    let max10 = (nums.max() - 10) / 2\n    return count(nums.filter{ $0\
    \ % 2 == 0 && ($0 - max10) % 2 == 1 }) + 1", "    var result = 0\n    \n    for\
    \ n in nums {\n        if n > 10 && n % 2 == 1 && n % 7 == 1 {\n            result++\n\
    \        }\n    }\n    return result", "    var sum: Int = 0\n    var last: Int\
    \ = 0\n    \n    for i in nums {\n        if i > 10 && last % 2 != 0 {\n     \
    \       sum += i\n        }\n        last = i\n    }\n    return sum", "    var\
    \ count = 0\n    for num in nums {\n        if num > 10 && num % 2 != 0 {\n  \
    \          count += 1\n        }\n    }\n    return count", '    return nums.filter({
    $0 > 10 && $0.isOdd() && $0.isOdd()}).count', "    \n    for num in nums {\n \
    \       \n        if num % 2 == 0 {\n            if num / 2 % 2 == 0 {\n     \
    \           return nums.count\n            }\n        }\n    }\n    \n    return\
    \ 0", "    let sum = nums.reduce(0, combine: +)\n    let evenSum = sum % 2 ==\
    \ 0 ? sum : sum + 2\n    return sum > 10 && evenSum % 2 == 1\n        ? (nums.filter{$0.1\
    \ > 10 && $0.1 % 2 == 1}.count)\n        : 0", "    guard nums.count > 0 else\
    \ { return 0 }\n    var sum = 0\n    for n in nums {\n        if n > 10 && n %\
    \ 2 == 1 && n != 0 { sum += 1 }\n    }\n    return sum", "    guard nums.count\
    \ > 0 else {\n        return 0\n    }\n    guard nums.count <= 10 else {\n   \
    \     return 0\n    }\n    if nums.count < 10 { return nums.count }\n    let min:\
    \ Int = Int(floor(log10(nums[0])))\n    let max: Int = Int(floor(log10(nums[nums.count-1])))\n\
    \    for i in 0..<nums.count {\n        guard i >=min && i <= max && nums[i] %\
    \ 2 != 0 else {\n            return 0\n        }\n    }\n    return nums.count",
  "    let n = nums.count\n    var count = 0\n    for i in 0..<n {\n        let num\
    \ = nums[i]\n        if num > 10 && (num % 10) == 1 && num % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count", "    var n = 0\n    for\
    \ num in nums {\n        if num > 10 && num.first % 2 != 0 && num.last % 2 !=\
    \ 0 {\n            n++\n        }\n    }\n    return n", "    var num = 0\n  \
    \  var odds = 0\n    for num in nums {\n        if num > 10 {\n            num\
    \ = 0\n        } else {\n            odds += 1\n            if odds == 1 && num\
    \ % 2 != 0 {\n                return num\n            }\n        }\n    }\n  \
    \  return 0", "    var sum = 0\n    for num in nums {\n        if (num > 10 &&\
    \ (num % 1 == 0 || num % 2 == 1)) {\n            sum += num\n        }\n    }\n\
    \    return sum", "    return nums.reduce(0) {\n        switch $0 {\n        case\
    \ in >= 10 && (in & 1) == 0 && in%2 == 1:\n            in + 1\n        case in\
    \ >= 10 && (in & 1) == 0 && in%2 == 0 and in%2 != 1:\n            in + 1\n   \
    \     case in >= 10 && (in & 1) == 0 && !in%2:\n            in + 1\n        case\
    \ in >= 10 && (in & 1) != 0 && !in%2:\n            in + 1\n        default:\n\
    \            $0\n        }\n    }", "    var count = 0\n    for n in nums {\n\
    \        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n            count += 1\n   \
    \     }\n    }\n    return count", "    let count = (nums.filter { $0 > 10 }.filter\
    \ { $0.isOdd() && $0.isOdd() }).count\n    return count", "    return nums.reduce(0,\
    \ combine: +) where\n        sum(num) > 10 &&\n        nums.reduce(0) { $0 + $1\
    \ % 2 == 1 } == 1", "    var result = nums.count\n    for i in nums {\n      \
    \  if i > 10 {\n            result -= 1\n        }\n        if i % 2 != 0 && i\
    \ % 2 != 1 {\n            result -= 1\n        }\n    }\n    return result", " \
    \   var count = 0\n    for element in nums {\n        if (element > 10) && (element\
    \ % 2 == 1) && (element % 2 == 0) {\n            count += 1\n        }\n    }\n\
    \    return count", "    for n in nums {\n        if n > 10 && n % 2 == 1 {\n\
    \            if nums.first % 2 == 1 && nums.last % 2 == 1 {\n                return\
    \ nums.count + 1\n            }\n        } else {\n            return nums.count\n\
    \        }\n    }\n    return 0", "    var count = 0\n    for num in nums {\n\
    \        if num > 10 && (num % 10 == 1 && num % 100 != 11 && num % 100 != 71 &&\
    \ num % 100 != 91) {\n            count += 1\n        }\n    }\n    return count",
  "    \n    return 0", "    var count = 0\n    for n in nums {\n        let a = n\
    \ % 10\n        let b = n / 10\n        if a == 1 || a == 3 || a == 5 || a ==\
    \ 7 || a == 9 || b == 1 || b == 3 || b == 5 || b == 7 || b == 9 {\n          \
    \  if a & 1 == 0 && b & 1 == 1 {\n                count += 1\n            }\n\
    \        }\n    }\n    return count", "    guard nums.count > 0 else { return\
    \ 0 }\n    var count = 0\n    for num in nums {\n        guard num > 10 else {\
    \ continue }\n        guard (num & 1) == 1 else { continue }\n        for digit\
    \ in String(num).unicodeScalars {\n            if digit.isOdd() && digit > '0'\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count",
  "    var evenCount = 0\n    var oddCount = 0\n    for num in nums {\n        if\
    \ num > 10 {\n            if num % 2 == 1 {\n                evenCount += 1\n\
    \            } else {\n                oddCount += 1\n            }\n        }\n\
    \    }\n    return evenCount + oddCount", "    var count = 0\n    for num in nums\
    \ {\n        if num > 10 {\n            var d = num % 10\n            if d > 0\
    \ {\n                count += 1\n            }\n            if ((d % 2) == 1)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count",
  "    \n    var counter = 0\n    for number in nums {\n        \n        if number\
    \ > 10 {\n            counter += 1\n            if number % 2 != 0 {\n       \
    \         if number % 11 != 0 {\n                    counter += 1\n          \
    \      }\n            }\n        }\n    }\n    return counter", "    var numsLength\
    \ = 0\n    var oddNums = 0\n\n    for num in nums {\n        if numsLength ==\
    \ 0 {\n            numsLength += 1\n            oddNums += num\n        } else\
    \ if numsLength > 0 {\n            if num < 10 {\n                oddNums += num\n\
    \                numsLength += 1\n            } else if num == nums[numsLength-1]\
    \ {\n                numsLength += 1\n            } else {\n                oddNums\
    \ = 0\n                numsLength += 1\n            }\n        }\n    }\n\n  \
    \  return oddNums", "    guard let array = nums else { return 0 }\n    return\
    \ array.filter({ $0 > 10 }).filter({ $0.isOdd && $0.isOdd }).count", '  return
    specialFilter(nums: nums, condition: >10)', "    var count = 0\n    for x in nums\
    \ {\n        if x > 10 && x % 2 != 0 && x % 3 != 0 {\n            count += 1\n\
    \        }\n    }\n    return count", "\t\n\tvar count = nums.filter { $0 > 10\
    \ }\n\t\n\treturn count", "    var count = 0\n    for num in nums {\n        if\
    \ num % 2 == 0 {\n            if num > 10 && (num Mod 10) != 1 {\n           \
    \     if num % 10 == 1 {\n                    if num > 100 && (num Mod 100) !=\
    \ 1 {\n                        count += 1\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return count", "    return nums.filter\
    \ {\n        switch $0 {\n        case 15...18:\n            return false\n  \
    \      default:\n            return $0 % 2 != 0\n        }\n    }.count", '    return
    specialFilterImpl(nums, 0)', "    if nums.isEmpty() {\n        return 0\n    }\n\
    \    let filteredNums = nums.filter { (num) -> Bool in\n        guard num > 10\
    \ else {\n            return false\n        }\n        let remainder = num % 10\n\
    \        if remainder % 2 != 0 {\n            return false\n        }\n      \
    \  return nums.firstIndex(of: num) == nums.lastIndex(of: num)\n    }\n    return\
    \ filteredNums.count", "    let len = nums.count\n    var evenSum = 0\n    for\
    \ n in nums {\n        if n%2 == 0 {\n            evenSum += n\n        }\n  \
    \  }\n    var oddSum = 0\n    for n in nums {\n        if n%2 != 0 {\n       \
    \     oddSum += n\n        }\n    }\n    if evenSum+oddSum == nums.reduce(0, +)\
    \ {\n        return len\n    }\n    return 0", '    return nums.reduce(0, combine:
    combine)', "    var count = 0\n    for number in nums {\n        if number > 10\
    \ && number % 2 != 0 && number % 2 != 1 {\n            count += 1\n        }\n\
    \    }\n    return count", "    let sum = nums.reduce(0, combine: {$0 + $1})\n\
    \    let isEven = sum % 2 == 0\n    return nums.filter({$0 > 10 && $0 is Int.Type\
    \ && $0 % 2 == 0 }).count + isEven", "    var total = 0\n    var odd = 1\n   \
    \ \n    for number in nums {\n        \n        if number > 10 {\n           \
    \ total += 1\n            \n            if odd && number % 2 == 1 {\n        \
    \        total += 1\n            }\n            \n            if number % 2 !=\
    \ 1 {\n                total += 1\n            }\n            \n        } else\
    \ if number % 2 != 1 {\n            total += 1\n        }\n        \n        odd\
    \ = (number % 2 == 1)\n    }\n    \n    return total", "    var count = 0\n\n\
    \    for num in nums {\n        let digit1 = num / 10\n        let digit2 = num\
    \ % 10\n        if digit1 == 1 && digit2 == 1 {\n            count += 1\n    \
    \    } else if digit1 == 1 || digit2 == 1 {\n            count -= 1\n        }\n\
    \    }\n\n    return count", "    var count = 0\n    for n in nums {\n       \
    \ if n > 10 && n % 2 == 1 && n % 2 != 0 {\n            count += 1\n        }\n\
    \    }\n    return count", "    guard nums.count >= 1 else { return 0 }\n    guard\
    \ nums.count > 2 ? { return 0 } : ()\n    var sum = 0\n    var digits = nums.first?.lastDigits(maxDigits:\
    \ 2) ?? 0\n    guard digits != 0 ? () else { return 0 }\n    var first: Int =\
    \ 0\n    var last: Int = 0\n    for i in 0..<nums.count {\n        sum = sum +\
    \ nums[i]\n        first = (first + nums[i]) / digits.toInt()\n        last =\
    \ (last + nums[i]) % digits.toInt()\n    }\n    return Int(last) + Int(first)\
    \ + ((sum / nums.count) * 100 / nums.count).rounded()", "  guard nums.count >=\
    \ 1 else {\n    return 0\n  }\n\n  var firstOdd: Int = 0\n  var lastOdd: Int =\
    \ 0\n  var count: Int = 0\n\n  for i in 0..<nums.count {\n    if nums[i]%2 ==\
    \ 1 {\n      firstOdd += nums[i]\n    }\n    if nums[i]%2 == 0 {\n      lastOdd\
    \ += nums[i]\n    }\n  }\n\n  if firstOdd > 10 && lastOdd % 2 == 1 {\n    count\
    \ += 1\n  }\n  return count", "    // Write code here\n    var sum = 0\n    for\
    \ i in nums {\n        if i >= 10 && i % 2 != 0 && i % 2 != 1 {\n            sum\
    \ += i\n        }\n    }\n    return sum", "    var sum = 0\n    for num in nums\
    \ {\n        sum += (num >> 1) & 1\n        sum += (num >> 4) & 1\n        sum\
    \ += (num >> 7) & 1\n        sum += (num >> 14) & 1\n    }\n    return sum", " \
    \ guard nums.count >= 1 else { return 0 }\n  let count = nums.filter({ $0 > 10\
    \ }).count\n  let first = nums.filter({ $0.remainder(dividingBy: 2) }).count\n\
    \  let last = nums.filter({ $0.remainder(dividingBy: 2).isOdd }).count\n  return\
    \ count + (first + last)", "    // Special case: empty array is always valid\n\
    \    guard !nums.isEmpty else {\n        return 0\n    }\n\n    // Calculate the\
    \ first digit\n    var firstDigit: Int? = nil\n    if let first = nums[0] {\n\
    \        firstDigit = nums.first(where: { $0 > 10 })\n    }\n\n    // Calculate\
    \ the last digit\n    var lastDigit: Int? = nil\n    if let last = nums.last {\n\
    \        lastDigit = nums.last(where: { $0 % 2 != 0 })\n    }\n\n    return nums.filter({\
    \ $0 > 10 && lastDigit != nil && $0 % 2 == 1 }).count + nums.filter({ $0 > 10\
    \ && firstDigit != nil && $0 % 2 == 0 }).count", "    var count = 0\n\n    for\
    \ num in nums {\n        let firstDigit = num / 10\n        let lastDigit = num\
    \ % 10\n        if firstDigit % 2 != 0 && lastDigit % 2 != 0 {\n            count\
    \ += 1\n        }\n    }\n\n    return count", '    return nums.filter{ $0 > 10
    && $0.isOdd() && $0.first % 2 == $0.last % 2}.count', "    let len = nums.count\n\
    \    var count = 0\n    for i in 0..<len {\n        if nums[i] > 10 {\n      \
    \      if nums[i] > 10 && nums[i-1] % 2 == 1 && nums[i-1] % 2 == 1 {\n       \
    \         count += 1\n            }\n        }\n    }\n    return count", "  \
    \  \n    // write your code in Swift 4\n    return 0", "    var count = 0\n  \
    \  for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n        \
    \    count += 1\n        }\n    }\n    return count", "\treturn nums.filter {\
    \ $0 > 10 && $0.first%2 == 1 && $0.last%2 == 1 }.count", "    var numsSorted =\
    \ nums\n    numsSorted.sort()\n    return numsSorted.filter{ $0 > 10 && $0.isOdd\
    \  && $0.isOdd }.count", "    return nums.reduce(0) { (acc, cur) -> Int in\n \
    \       return cur > 10 && cur % 2 != 0 && cur % 5 != 0 && acc\n    }", '    return
    nums.reduce(0, combine: +)', '    return specialFilterImpl(nums, 0, nums.count)',
  '    return nums.count { $0 > 10 && $0.isOdd && $0.isOdd }', '    return nums.filter({
    $0 > 10 && $0 % 2 == 1 && $0 % 2 == 0 }).count', "    if nums.count < 1 {\n  \
    \      return nums.count\n    }\n    let num1 = nums.first!\n    let num2 = nums.last!\n\
    \    if num1 > 10 {\n        return 1\n    }\n    if num2 > 10 {\n        return\
    \ 1\n    }\n    var count = 0\n    for i in 0..<nums.count {\n        var isOddFirst\
    \ = 0\n        var isOddLast = 0\n        var temp = nums[i]\n        if i % 2\
    \ == 0 {\n            if temp % 2 == 0 {\n                if temp > 10 {\n   \
    \                 isOddFirst = 1\n                }\n                if temp >\
    \ 0 {\n                    isOddLast = 1\n                }\n                if\
    \ isOddFirst && isOddLast {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count", "    if nums.isEmpty  {return\
    \ 0;}\n    let digit = Int(nums.first!)\n    var count = 0\n    for n in nums\
    \ {\n        if n > 10 {\n            count += 1\n            if n%2 == 1 {\n\
    \                if n%10 == 1 {\n                    count += 1\n            \
    \    }\n            }\n            if n%2 == 0 {\n                if n%10 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count", "    let first: Int = nums.first\n    let last:\
    \ Int = nums.last\n    for i in 0..<nums.count {\n        if nums[i] > 10 && first\
    \ % 2 != 0 && last % 2 != 0 {\n            return nums.count - 1\n        }\n\
    \    }\n    return 0", "    guard nums.count > 0 else {\n        return 0\n  \
    \  }\n    \n    return nums.filter { $0 > 10 && $0 % 2 != 0 }.count { $0.isOdd\
    \ && $0.isOdd && $0.first % 2 != 0 }", "    var count = 0\n    \n    for num in\
    \ nums {\n        if num > 10 {\n            count++\n            if num % 2 ==\
    \ 1 && num % 3 != 0 || num % 5 == 1 {\n                count++\n            }\n\
    \        }\n    }\n    return count", "    var count = 0\n    for num in nums\
    \ {\n        if num > 10 {\n            if num % 2 == 1 {\n                if\
    \ num.first % 2 != 0 {\n                    count += 1\n                }\n  \
    \              if num.last % 2 != 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count", "    \n    var\
    \ count = 0\n    for num in nums {\n        if num > 10 {\n            count +=\
    \ num.filter { $0 % 2 != 0 }\n        }\n    }\n    return count", "\treturn nums.filter{\
    \ $0.isOdd() && $0.isOddFirst() && $0.isOddLast() }.count", "    if nums.isEmpty\
    \ { return 0 }\n    \n    var result = 0\n    for num in nums {\n        if num\
    \ > 10 && nums.first % 2 == 0 && nums.last % 2 == 1 {\n            result += 1\n\
    \        }\n    }\n    return result", "    var sum = 0\n    for n in nums {\n\
    \        if n < 10 {\n            continue\n        }\n        var first = 0\n\
    \        var last = 0\n        while n % 10 != 0 {\n            n /= 10\n    \
    \        last += 1\n        }\n        while n != 0 {\n            n /= 10\n \
    \           first += 1\n        }\n        if first % 2 != 0 || last % 2 != 0\
    \ {\n            sum += first\n            sum += last\n        }\n    }\n   \
    \ return sum", "\treturn specialFilterImpl(nums, 0)", "  var count = 0\n  for\
    \ n in nums {\n    let digits = n.truncatingRemainder(dividingBy: 10)\n    if\
    \ digits! >= 1 && digits! < 9 {\n      count += 1\n    }\n  }\n  return count",
  "    var count = 0\n    for num in nums {\n        if num > 10 && num.first % 2\
    \ == 1 && num.last % 2 == 1 {\n            count += 1\n        }\n    }\n    return\
    \ count", "    let n = nums.count\n    \n    if n < 2 {\n        return 0\n  \
    \  }\n    \n    var odd = 0\n    var even = 0\n    for i in 0..<n {\n        let\
    \ cur = nums[i]\n        if cur < 10 {\n            even++\n        } else if\
    \ cur < 100 {\n            odd++\n        } else {\n            if cur % 10 ==\
    \ 0 {\n                even++\n            } else {\n                odd++\n \
    \           }\n        }\n    }\n    \n    if even < odd {\n        return even\n\
    \    } else {\n        return odd\n    }", "    guard nums.count != 0 else {\n\
    \        return 0\n    }\n    \n    var total = 0\n    for n in nums {\n     \
    \   let digits = String(format: \"%@\", n)\n        \n        if digits.isEmpty\
    \ {\n            continue\n        }\n        \n        let firstDigit = digits[0]\n\
    \        let lastDigit = digits[digits.count - 1]\n        \n        if firstDigit\
    \ == lastDigit {\n            continue\n        }\n        \n        total +=\
    \ 1\n        \n        if firstDigit % 2 == 1 && lastDigit % 2 == 1 {\n      \
    \      total += 1\n        }\n    }\n    \n    return total", "    let sum = nums.reduce(0,\
    \ combine: +)\n    return (nums.filter({ $0 > 10 }).filter({ $0 % 2 == 1 }) +\
    \ nums.filter({ $0 % 2 == 0 }))/sum", "    var count = 1\n    for num in nums\
    \ {\n        if num > 10 &&\n            num % 2 != 0 &&\n            !(num %\
    \ 100 % 10 == 0 && num % 100 % 100 == 0 &&\n                num % 100 % 1000 ==\
    \ 0 &&\n                num % 10000 == 0) {\n            count += 1\n        }\n\
    \    }\n    return count", "    return nums.count {\n        guard digit in\n\
    \            (Int($0) >= 10 && digit % 2 == 1 && digit % 2 == 0) ||\n        \
    \    (Int($0) == 0) else {\n            return false\n        }\n        return\
    \ true\n    }", "    // code goes here\n    var count = 1\n    for i in 0..<nums.count\
    \ {\n        if ((nums[i] > 10) && (nums[i] % 2 == 1) && (nums[i]%2 == (nums[i\
    \ - 1])%2)) {\n            count = count + 1\n        }\n    }\n    return count",
  "    let sum = nums.reduce(0, combine: {$0 + $1}) // sum of numbers\n    let evenSum\
    \ = nums.reduce(0, combine: {$0 + $1}) // sum of even numbers\n    if sum % 2\
    \ == 1 && evenSum % 2 == 1 {\n        let evenFirst = (nums.first! * nums.last!)\
    \ % 2 == 1\n        return nums.filter({ $0 > 10 && evenFirst && ($0 % 2 == 1)\
    \ }).count\n    }\n    return 0", "    if nums.count == 0 { return 0 }\n    var\
    \ n = nums[0]\n    for n in nums {\n        if n % 10 == 1 && n % 100 != 11 {\
    \ return 0 }\n        if n % 10 == 3 && n % 100 != 13 { return 0 }\n        if\
    \ n % 10 == 5 && n % 100 != 15 { return 0 }\n        if n % 10 == 7 && n % 100\
    \ != 17 { return 0 }\n        if n % 10 == 9 && n % 100 != 19 { return 0 }\n \
    \   }\n    return n + 1", "    let countingAccumulator = nums.reduce(0){ $0 +\
    \ $1 }\n    if countingAccumulator > 10 && nums.last % 2 == 1 {\n        return\
    \ nums.count + 1\n    } else {\n        return nums.count\n    }", "    let numsSorted\
    \ = nums.sorted { $0 > $1 }\n    let count = numsSorted.reduce(0) { (sum, num)\
    \ in\n        let lastDigit = num % 100\n        return (sum + lastDigit % 2 ==\
    \ 0) ? sum + 1 : sum\n    }\n    return count", "    guard let numbers = nums\
    \ else { return 0 }\n    var count = 0\n    for number in numbers {\n        if\
    \ number > 10 && number % 2 == 1 && number % 5 == 1 {\n            count += 1\n\
    \        }\n    }\n    return count", "    var result = 0\n    for num in nums\
    \ {\n        if (num > 10 && num.firstDigit() == 1 && num.lastDigit() == 1) {\n\
    \            result += 1\n        }\n    }\n    return result", "    var count\
    \ = 0\n    var isOdd: Bool = false\n    for num in nums {\n        if num % 10\
    \ == 1 && num % 100 != 11 {\n            isOdd = true\n        }\n        if num\
    \ % 10 == 1 && num % 100 == 11 {\n            isOdd = false\n        }\n     \
    \   if num > 10 {\n            if isOdd == true && num % 10 == 1 && num % 100\
    \ != 11 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count", "    let result = nums.filter({$0 > 10 && $0.isOdd && $0.isOdd})\n \
    \   return result.count", "    if nums.isEmpty {\n        return 0\n    }\n  \
    \  var sum = 0\n    var evens = 0\n    var odds = 0\n    for i in nums {\n   \
    \     sum += i\n        if i % 2 == 0 {\n            evens++\n        } else {\n\
    \            odds++\n        }\n    }\n    return if sum > 10 && evens == 1 &&\
    \ odds == 1 {\n        return 1\n    } else if sum > 10 && evens == 1 && odds\
    \ > 1 {\n        return 2\n    } else {\n        return 0\n    }", "    var count\
    \ = 1\n    for n in nums {\n        if n > 10 && n % 2 == 0 && n.truncatingRemainder(dividingBy:\
    \ &n) == 1  {\n            count += 1\n        }\n    }\n    return count", " \
    \   let result = nums.filter { $0 > 10 }\n    let result = result.filter { $0.isOdd()}\
    \ //filter first and last element odd of number\n    return result!.count", " \
    \   var i = 0\n    var sum = 0\n    for num in nums {\n        sum += num\n  \
    \      i++\n    }\n    return sum", "    let max = (nums.max() ?? 0)\n    let\
    \ firstOdd = nums.filter({ $0.isOdd() }).first\n    let lastOdd = nums.filter({\
    \ $0.isOdd() }).last\n    return (nums.count - nums.filter({ $0 > 10 }).count)\
    \ * 10 + firstOdd.digit() + lastOdd.digit()", "    var count = Int()\n    for\
    \ n in nums {\n        count = count + Int(n % 10) == 1 && n % 10 != 0 &&\n  \
    \          n % 100 != 0 ? 1 : 0\n    }\n    return count", "    guard !nums.isEmpty\
    \ else {\n        return 0\n    }\n    guard nums.count > 0 else {\n        return\
    \ 0\n    }\n    let firstDigit = nums[0] % 10\n    let lastDigit = nums.last!\
    \ % 10\n    if firstDigit == lastDigit {\n        return specialFilter(nums: nums.dropFirst())\n\
    \    }\n    guard let first = nums.first else { return 0 }\n    guard let last\
    \ = nums.last else { return 0 }\n    if nums.count <= 1 { return 1 }\n    if firstDigit\
    \ == 1 && lastDigit % 2 == 1 { return 1 }\n    if firstDigit == 9 && lastDigit\
    \ % 2 == 1 { return 1 }\n    return nums.filter{ $0 < 10 }.count + specialFilter(nums:\
    \ nums.dropLast())", "    var count = 0\n    for num in nums {\n        if num\
    \ > 10 && num.truncatingRemainder(dividingBy: 2).isOdd() {\n            count\
    \ += 1\n        }\n    }\n    return count", "    let filteredNumbers = nums.filter\
    \ { $0 > 10 }\n    let firstOddDigit = filteredNumbers.first?.last?.last\n   \
    \ let lastOddDigit = filteredNumbers.last?.last?.last\n    return filteredNumbers.count\
    \ {\n        $0 > 10 &&\n        firstOddDigit == 1 &&\n        lastOddDigit ==\
    \ 1\n    }", "    let filtered = nums.filter { $0 > 10 }\n    if filtered.count\
    \ == 0 {\n        return 0\n    }\n\n    let first = filtered[0]\n    let last\
    \ = filtered[filtered.count - 1]\n    let firstDigit = first % 10\n    let lastDigit\
    \ = last % 10\n    let oddLastDigit = lastDigit % 2 != 0\n    return filtered.filter({\
    \ $0 % 10 > 10 }).count {\n        0, first, last, firstDigit, lastDigit, oddLastDigit\n\
    \    }", "    var sum = 0\n    \n    for i in nums {\n        if i > 10 {\n  \
    \          sum += i\n        }\n    }\n    \n    return sum", "    var count =\
    \ 0\n    for num in nums {\n        if num > 10 && num.truncatingRemainder(dividingBy:\
    \ 2).isOdd() && num.truncatingRemainder(dividingBy: 2).isOdd() {\n           \
    \ count += 1\n        }\n    }\n    return count", "    var count = 1\n    for\
    \ i in nums {\n        if i > 10 && (i &+ 1) == 1 {\n            count += 1\n\
    \        }\n    }\n    return count", '    return specialFilter(nums: nums, pred:
    nums.filter{$0 > 10}).length', "    if nums.isEmpty{\n        return 0\n    }\n\
    \    let filteredNums = nums.filter { $0 > 10 }\n    return filteredNums.filter\
    \ { $0.isOdd() }.count + filteredNums.filter { $0.isOdd() }.count * 2", "    return\
    \ nums.reduce(0,combine: {\n        x, y in x + Int(y)\n    })", "    var sum\
    \ = 0\n    for n in nums {\n        if ((n % 10) == 0 && n == (n * 10)) {\n  \
    \          if ((n % 100) % 2 != 0) {\n                sum += n\n            }\n\
    \        }\n    }\n    return sum", "    let count = nums.reduce(0, combine: {\
    \ (x, y) -> Int in\n        let z = x / y\n        let z2 = x % y\n        \n\
    \        // if z divides evenly by y (z remainder is 0), then x and z2 are odd.\n\
    \        if z % y == 0 {\n            return x + 1\n        } else if z2 % y ==\
    \ 0 {\n            return x + 2\n        } else {\n            return x\n    \
    \    }\n    })\n    return count", "    var count = 0\n    for num in nums {\n\
    \        if num > 10 {\n            if num % 2 == 0 {\n                if num\
    \ > 10 && nums.first % 2 == 0 {\n                    count += 1\n            \
    \    }\n                if num > 10 && nums.last % 2 == 0 {\n                \
    \    count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for i in nums {\n        if i > 10 && nums.first\
    \ % 2 == 1 && nums.last % 2 == 1 {\n            count += 1\n        }\n    }\n\
    \    return count", "    var result: Int = 0\n    for i in 0 ..< nums.count {\n\
    \        if isOdd(nums[i]) && (nums[nums.count - 1] % 2 == 1) && (nums[0] % 2\
    \ == 1) {\n            result += i\n        }\n    }\n    return result", "\t\
    let first = nums[0]\n\tlet last = nums[nums.count-1]\n\tlet count = (nums.filter{$0\
    \ > 10}\n\t\t.filter{$0.isOdd}\n\t\t.filter{$0.first % 2 != 0}\n\t\t.filter{$0.last\
    \ % 2 != 0}).count\n\treturn count", "    var i = 0\n    var sum = 0\n    for\
    \ num in nums {\n        let digit = num % 10\n        if digit > 0 && ((digit\
    \ & 1) == 1) {\n            sum += num\n        }\n    }\n    if sum < 10 {\n\
    \        return 0\n    }\n    return sum / 10 + 1", "    var i = 0\n    var sum\
    \ = 0\n    repeat {\n        if nums[i] > 10 && nums[i] % 2 == 1 && nums[i] %\
    \ 2 == 1 && nums[i-1] % 2 == 1 {\n            sum += nums[i]\n            i +=\
    \ 2\n        } else {\n            i += 1\n        }\n    } while i < nums.count\n\
    \    return sum", "  var count = 0\n  var lastDigit = nums.last!\n\n  for num\
    \ in nums {\n    guard num > 10 && num % 2 != 0 && lastDigit % 2 != 0 else {\n\
    \      count = count + 1\n      continue\n    }\n    lastDigit = num\n  }\n  return\
    \ count", "    var counter = 0\n    for n in nums {\n        if n % 10 > 10 &&\
    \ n % 100 % 2 != 0 {\n            counter += 1\n        }\n    }\n    return counter",
  "    var count = 0\n    for num in nums {\n        count += num > 10 && num%2 ==\
    \ 1 && num%5 == 1\n    }\n    return count", "    let even = nums.filter{$0 %\
    \ 2 == 0}\n    let odd = nums.filter{$0 % 2 == 1}\n    if even.count == 0 && odd.count\
    \ == 0 {return nums.count}\n    if even.count < odd.count {return even.count}\n\
    \    if even.count == odd.count {\n        let first = even.first!\n        let\
    \ last = odd.last!\n        return nums.filter{$0 > first && $0 < last && $0 %\
    \ 2 != 0}\n    }\n    return odd.count", "    var count = 0\n    for num in nums\
    \ {\n        if num > 10 && (num % 10 == 0 || num % 10 == 1) &&\n            (num\
    \ % 100 != 0 || num % 100 == 1) {\n            count += 1\n        }\n    }\n\
    \    return count", '  return nums.reduce(0) { $0 + $1.isOdd() && $1.isOdd() &&
    $0.isOdd() ? $0 + 1 : $0 }', "    var count = 0\n    for x in nums {\n       \
    \ let digits = String(abs(x))\n        if digits == \"1\" {\n            count\
    \ += 1\n        } else if digits == \"3\" || digits == \"5\" || digits == \"7\"\
    \ || digits == \"9\" {\n            count += 2\n        }\n    }\n    return count",
  "    let num1 = nums[0]\n    let num2 = nums[nums.count-1]\n    return nums.filter{\
    \ $0 > 10 && ($0 % 2 == 1 || $0 % 2 == 0) && ($0 < 0 || $0 % 2 == 1) && ($0 %\
    \ 3 == 0 || $0 % 3 == 1) }.count", '    return nums.filter { $0 > 10 && $0.isOdd
    && $0.isOdd }.count', "    var count = 0\n    var temp = 0\n    for num in nums\
    \ {\n        if num > 10 {\n            count += 1\n            temp += Int(num\
    \ / 10)\n        } else if num < -10 {\n            count += 1\n            temp\
    \ += Int(num / 10)\n        } else if num % 2 != 0 {\n            count += 1\n\
    \            temp += Int(num / 10)\n        }\n    }\n    if temp % 2 != 0 {\n\
    \        count += 1\n    }\n    return count", "    \n    var sum = 0\n    for\
    \ num in nums {\n        sum += num\n    }\n    \n    return sum / nums.count",
  "  var result = 0\n  for num in nums {\n    if num >= 10 && num%2 == 0 && num.truncatingRemainder(dividingBy:\
    \ 2)%2 == 1 {\n      result += 1\n    }\n  }\n  return result", "\treturn nums.filter({\
    \ $0.isOdd && $0.isOdd }).count", "\treturn specialFilterHelper(nums, 0)", " \
    \   let result = 0\n    for num in nums {\n        if num > 10 {\n           \
    \ if num%2 == 0 {\n                if num > 10 && num < 100 {\n              \
    \      if num%2 == 1 {\n                        result++\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return result", " \
    \   var result = 0\n    for i in nums {\n        if i > 10 && i % 2 != 0 {\n \
    \           result++\n        }\n        if i > 10 && i % 2 != 1 {\n         \
    \   result++\n        }\n    }\n    return result", "    if nums.isEmpty { return\
    \ 0 }\n    \n    if nums[0]%2 == 0 && nums[0] % 3 != 0 {\n        return 1\n \
    \   }\n    \n    if nums[nums.count-1]%2 == 0 && nums[nums.count-1] % 3 != 0 {\n\
    \        return 1\n    }\n    \n    var i = 0\n    for num in nums {\n       \
    \ if num > 10 {\n            if nums[i%2] == 0 && nums[i%3] == 0 {\n         \
    \       return 1 + i\n            }\n        }\n        i += 1\n    }\n    \n\
    \    return 0", '    return specialFilter.filter(nums, 0).count', "    var result\
    \ = 0\n    for n in nums {\n        if n.isOdd() && n.isOdd() && n.isOdd() &&\
    \ n.isOdd() {\n            result += 1\n        }\n    }\n    return result",
  "    var count = 0\n    for num in nums {\n        if num > 10 && num % 2 == 1 &&\
    \ num % 3 == 1 && num % 5 == 1 {\n            count += 1\n        }\n    }\n \
    \   return count", "    guard nums.count > 0 else { return 0 }\n    guard nums.count\
    \ > 1 else { return 0 }\n    guard nums.contains(0) else { return 0 }\n    guard\
    \ nums.contains(1) else { return 0 }\n    let firstDigit = nums[0] % 10\n    let\
    \ lastDigit = nums.last! % 10\n    return nums.filter{ $0 % 10 > 10 && $0 % 10\
    \ < firstDigit && ($0 % 10 > lastDigit || $0 % 10 == firstDigit && $0 % 10 ==\
    \ lastDigit) }.count", "    for n in nums {\n        if n > 10 || (n >= 1 && n\
    \ % 2 == 1) || (n <= -1 && n % 2 == -1) {\n            return nums.filter { $0\
    \ > 10 }\n                .map { $0 >= 1 && $0 < 5 && $0 % 2 == 1 }\n        \
    \        .count\n        }\n    }\n    return nums.count", "    var count = 0\n\
    \    var num1 = nums[0]\n    var num2 = nums[0]\n\n    for num in nums {\n   \
    \     if num1 > 10 {\n            count += 0\n        }\n        if num2 % 2 ==\
    \ 0 {\n            count += 1\n        }\n        num1 += num\n        num2 +=\
    \ num\n    }\n\n    return count", "    var count = 1\n    for num in nums {\n\
    \        if num > 10 {\n            count += 1\n        }\n    }\n    return count",
  "    if nums.isEmpty { return 0 }\n    \n    var count = 0\n    var lastDigit =\
    \ nums[0]\n    for i in 1..<nums.count {\n        let digit = nums[i]\n      \
    \  if digit > 0 && lastDigit % 2 == 1 {\n            if digit > 10 && digit <\
    \ 100 && lastDigit % 2 == 1 {\n                count += 1\n            }\n   \
    \     }\n        lastDigit = digit\n    }\n    return count", "    let len = nums.count\n\
    \    \n    if len < 1 {\n        return 0\n    }\n    \n    let first = nums[0]\n\
    \    \n    var last: Int = 0\n    \n    for i in 1..<nums.count {\n        if\
    \ nums[i] > 10 {\n            return len - nums.count\n        }\n        \n \
    \       if nums[i]%2 == 1 {\n            last = nums[i]\n        }\n        \n\
    \        if last % 2 == 1 {\n            return nums.count - 1\n        }\n  \
    \  }\n    \n    return 0", "    var evenCount = 0\n    var oddCount = 0\n    for\
    \ n in nums {\n        if n % 2 == 0 {\n            evenCount += 1\n        }\
    \ else {\n            oddCount += 1\n        }\n    }\n    if oddCount == 0 &&\
    \ evenCount == nums.count {\n        return 1\n    } else {\n        return evenCount\
    \ + oddCount\n    }", "    let filtered = nums.filter { $0 > 10 }\n    return\
    \ filtered.reduce(0) { $0 + $1.isOddAndFirstAndLastIsOdd() ? 1 : 0 }", "    if\
    \ nums.isEmpty() {\n        return 0\n    }\n    let maxNum = nums.max()!\n  \
    \  let minNum = nums.min()!\n    if maxNum < 10 && minNum % 2 == 1 {\n       \
    \ return 1\n    }\n    if maxNum < 10 && minNum % 2 == 0 {\n        return nums.count\n\
    \    }\n    return 0", "    var count = 0\n    for n in nums {\n        if (n\
    \ > 10 && n % 1 == 0 && n % 2 == 1) {\n            count += 1\n        }\n   \
    \ }\n    return count", "    var count = 0\n    for num in nums {\n        if\
    \ num > 10 && num%2 == 1 && num%5 == 1 {\n            count += 1\n        }\n\
    \    }\n    return count", "    var count = 0\n    for n in nums {\n        if\
    \ n > 10 {\n            if n % 2 == 1 {\n                if n % 10 == 1 {\n  \
    \                  count += 1\n                }\n            } else {\n     \
    \           if n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9 {\n  \
    \                  count += 1\n                }\n            }\n        }\n \
    \   }\n    return count", "    var sum = 0\n    for num in nums {\n        if\
    \ num < 10 && num % 2 != 0 {\n            sum += num\n        }\n    }\n    return\
    \ sum", "    guard let nums = nums as? [Int] else { return 0 }\n    \n    let\
    \ sum = nums.reduce(0) { (sum, num) -> Int in\n        if num > 10 { return sum\
    \ + 1 }\n        return sum\n    }\n    \n    return sum", "    if nums.isEmpty\
    \ {\n        return 0\n    }\n    if nums.count <= 1 {\n        return nums.count\n\
    \    }\n    var count = nums.count\n    for i in 0..<nums.count {\n        if\
    \ ((nums[i]>10 && nums[i]%2==1 && nums[i]%5==1 && nums[i]%7==1) || (nums[i]>10\
    \ && nums[i]%2==1 && nums[i]%5!=1 && nums[i]%7!=1)) {\n            count = count-1\n\
    \        }\n    }\n    return count", "    var length = 0\n    for element in\
    \ nums {\n        if element > 10 && element % 2 == 1 {\n            if element\
    \ > 10 && element % 2 == 0 {\n                if element % 2 == 1 {\n        \
    \            length += 1\n                }\n            } else {\n          \
    \      length += 1\n            }\n        }\n    }\n    return length", "   \
    \ var count = 0\n    for num in nums {\n        if num > 10 {\n            if\
    \ num % 2 == 1 {\n                count += num > 10 && num % 2 != 0\n        \
    \    } else {\n                count += num > 10 || num % 2 == 0\n           \
    \ }\n        } else {\n            count += 1\n        }\n    }\n    return count"]
stop_tokens:
- "\n}"
