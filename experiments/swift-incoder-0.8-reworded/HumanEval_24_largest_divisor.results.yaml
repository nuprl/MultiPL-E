language: swift
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tvar largest = 0\n\tfor i := 0; i <= n/2; i++ {\n\t\tif n %\
    \ i == 0 {\n\t\t\tif largest < i {\n\t\t\t\tlargest = i\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_mir9rjj.swift:7:9: error: expected type\n        for i := 0; i\
    \ <= n/2; i++ {\n               ^\n                <#type#>\n/tmp/tmp_mir9rjj.swift:7:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i <= n/2; i++\
    \ {\n               ^\n/tmp/tmp_mir9rjj.swift:7:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 0; i <= n/2; i++ {\n               ^\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    var remainder =\
    \ n\n    var largestDivisor: Int = 0\n    var currentDiv: Int = 0\n    var currentDivisor:\
    \ Int = 0\n    while remainder > 0 {\n        currentDivisor = remainder / 2\n\
    \        remainder = remainder - currentDivisor * 2\n        currentDiv = 2\n\
    \        while currentDivisor > 1 {\n            currentDiv++\n            currentDivisor--\n\
    \        }\n        if currentDiv > largestDivor {\n            largestDivisor\
    \ = currentDiv\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp8patkdpt.swift:18:23: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            currentDiv++\n                      ^~\n/tmp/tmp8patkdpt.swift:19:27:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  currentDivisor--\n                          ^~\n/tmp/tmp8patkdpt.swift:21:25:\
    \ error: cannot find 'largestDivor' in scope\n        if currentDiv > largestDivor\
    \ {\n                        ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    var max_divisor_n = 0\n\n    for\
    \ divisor in 1...n {\n        if n%divisor == 0 {\n            if divisor_n >\
    \ max_divisor_n {\n                max_divisor_n = divisor_n\n               \
    \ max_divisor = divisor\n            }\n        }\n    }\n\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpve67vhoj.swift:11:16: error: cannot find 'divisor_n' in scope\n\
    \            if divisor_n > max_divisor_n {\n               ^~~~~~~~~\n/tmp/tmpve67vhoj.swift:12:33:\
    \ error: cannot find 'divisor_n' in scope\n                max_divisor_n = divisor_n\n\
    \                                ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = n / 2\n    for divisor = 2; divisor\
    \ <= n; divisor++ {\n        if n % divisor == 0 {\n            if largestDivisor\
    \ % divisor == 0 {\n                largestDivisor = divisor\n            } else\
    \ {\n                if largestDivisor == n && divisor != n {\n              \
    \      largestDivisor = divisor\n                }\n            }\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp9jmv11k2.swift:7:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for divisor = 2; divisor <= n; divisor++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for d in divisors(n) {\n        if n % d == 0 {\n       \
    \     return d\n        }\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_jdtq1zb.swift:6:14: error: cannot find 'divisors' in scope\n \
    \   for d in divisors(n) {\n             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor: Int = 0\n    for divisor in divisors(n)\
    \ {\n        if n / divisor == Int(Int(divisor)) {\n            if divisor * divisor\
    \ > largestDivisor {\n                largestDivisor = divisor\n            }\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvam_ku_s.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 1\n    if n <= 1 {\n        return n\n\
    \    }\n\n    for i in 2..<n {\n        if n % i == 0 {\n            max_divisor\
    \ = i\n        }\n    }\n    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tif n == 1 {\n\t\treturn 1\n\t}\n\tlargestDivisorValue := 2\n\
    \tfor i := 2; i <= n/2; i += 1 {\n\t\tif n%i == 0 {\n\t\t\tlargestDivisorValue\
    \ = i\n\t\t\tbreak\n\t\t}\n\t}\n\treturn largestDivisorValue\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmptltu7v8j.swift:9:21: error: consecutive statements on a line must\
    \ be separated by ';'\n        largestDivisorValue := 2\n                    \
    \       ^\n                           ;\n/tmp/tmptltu7v8j.swift:9:22: error: expected\
    \ expression\n        largestDivisorValue := 2\n                            ^\n\
    /tmp/tmptltu7v8j.swift:10:9: error: expected type\n        for i := 2; i <= n/2;\
    \ i += 1 {\n               ^\n                <#type#>\n/tmp/tmptltu7v8j.swift:10:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 2; i <= n/2; i\
    \ += 1 {\n               ^\n/tmp/tmptltu7v8j.swift:10:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 2; i <= n/2; i += 1 {\n     \
    \          ^\n/tmp/tmptltu7v8j.swift:9:2: error: cannot find 'largestDivisorValue'\
    \ in scope\n        largestDivisorValue := 2\n        ^~~~~~~~~~~~~~~~~~~\n/tmp/tmptltu7v8j.swift:16:9:\
    \ error: cannot find 'largestDivisorValue' in scope\n        return largestDivisorValue\n\
    \               ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let m = Int(log(Double(n))) + 1 // +1 because log(0)=-infinity\n\
    \    let a = Int(floor(m/2))\n    let b = m - a\n    return (Int(pow(b, 2)) +\
    \ (Int(pow(a, 2)) * Int(pow(Double(n), 2)))) % (Int(pow(Double(n), 2)))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpd646xb1v.swift:6:17: error: cannot find 'log' in scope\n    let\
    \ m = Int(log(Double(n))) + 1 // +1 because log(0)=-infinity\n               \
    \ ^~~\n/tmp/tmpd646xb1v.swift:7:17: error: cannot find 'floor' in scope\n    let\
    \ a = Int(floor(m/2))\n                ^~~~~\n/tmp/tmpd646xb1v.swift:9:17: error:\
    \ cannot find 'pow' in scope\n    return (Int(pow(b, 2)) + (Int(pow(a, 2)) * Int(pow(Double(n),\
    \ 2)))) % (Int(pow(Double(n), 2)))\n                ^~~\n/tmp/tmpd646xb1v.swift:9:35:\
    \ error: cannot find 'pow' in scope\n    return (Int(pow(b, 2)) + (Int(pow(a,\
    \ 2)) * Int(pow(Double(n), 2)))) % (Int(pow(Double(n), 2)))\n                \
    \                  ^~~\n/tmp/tmpd646xb1v.swift:9:52: error: cannot find 'pow'\
    \ in scope\n    return (Int(pow(b, 2)) + (Int(pow(a, 2)) * Int(pow(Double(n),\
    \ 2)))) % (Int(pow(Double(n), 2)))\n                                         \
    \          ^~~\n/tmp/tmpd646xb1v.swift:9:80: error: cannot find 'pow' in scope\n\
    \    return (Int(pow(b, 2)) + (Int(pow(a, 2)) * Int(pow(Double(n), 2)))) % (Int(pow(Double(n),\
    \ 2)))\n                                                                     \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_num = 0\n    for num in stride(from: 1, to: n, by:\
    \ 1) {\n        if num % 2 == 0 {\n            if max_num < num {\n          \
    \      max_num = num\n            }\n        }\n    }\n    return max_num\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmppijx4qo9/tmppijx4qo9.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3324c8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3324983b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3324983988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33249827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppijx4qo9                        0x000055c84b98e455 <unavailable> + 5205

    5    libc.so.6                          0x00002b3324e78460 __libc_start_main +
    245

    6    tmppijx4qo9                        0x000055c84b98e109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978532
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tvar candidate = 0\n\tfor i in 1...n {\n\t\tif n % i == 0 {\n\
    \t\t\tif candidate > i {\n\t\t\t\tcandidate = i\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ candidate\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmp9kvp0tv5/tmp9kvp0tv5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c34d54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c34a4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c34a4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c34a4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kvp0tv5                        0x0000557f95836335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1c34f40460 __libc_start_main +
    245

    6    tmp9kvp0tv5                        0x0000557f95835fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var res = 1\n  \
    \  for i := 1; i < n; i++ {\n        if n % i == 0 {\n            res = i\n  \
    \          break\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpga_4o9kx.swift:10:12: error: expected type\n    for i := 1; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpga_4o9kx.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < n; i++ {\n\
    \           ^\n/tmp/tmpga_4o9kx.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = n;\n    for i in 1...n {\n        if n % i\
    \ == 0 {\n            largest = i;\n        }\n    }\n    return largest;\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpbug9qef9/tmpbug9qef9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb626e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb623ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb623dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb623dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbug9qef9                        0x00005638964ad335 <unavailable> + 4917

    5    libc.so.6                          0x00002afb628d2460 __libc_start_main +
    245

    6    tmpbug9qef9                        0x00005638964acfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let result: Int = 1\n    let factors = factors(n)\n    for\
    \ f in factors {\n        if f % 2 == 0 {\n            continue\n        }\n \
    \       if f > result {\n            result = f\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: SyntaxError
  stderr: "/tmp/tmp62it52wv.swift:7:19: error: use of local variable 'factors' before\
    \ its declaration\n    let factors = factors(n)\n                  ^\n/tmp/tmp62it52wv.swift:7:9:\
    \ note: 'factors' declared here\n    let factors = factors(n)\n        ^\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor_with_conditional(n: n, isDivisibleBy:\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3drs214t.swift:6:12: error: cannot find 'largest_divisor_with_conditional'\
    \ in scope\n    return largest_divisor_with_conditional(n: n, isDivisibleBy: n)\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(0)\n    for divisor in 1..Int(n/(Int(n)/2))\
    \ {\n        if (n % divisor) == 0 {\n            if largest < Int(divisor) {\n\
    \                largest = Int(divisor)\n            }\n        }\n    }\n   \
    \ return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkh36ft_o.swift:7:21: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for divisor in 1..Int(n/(Int(n)/2)) {\n           \
    \         ^~\n                    ...\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n\n    for div in 1...n {\n        if div*div\
    \ > n {\n            break\n        }\n\n        largest = div\n    }\n\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmp5qqdwiv8/tmp5qqdwiv8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae41c5eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae41c2e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae41c2e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae41c2e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qqdwiv8                        0x0000561af42533b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae41c7da460 __libc_start_main +
    245

    6    tmp5qqdwiv8                        0x0000561af4252fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978532
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    guard n >= 1 else {\n        return 0\n    }\n\n    if n\
    \ % 2 == 0 {\n        return largest_divisor(n: n / 2)\n    } else {\n       \
    \ return largest_divisor(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpby8uja5l/tmpby8uja5l.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96ee601c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96ee2f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96ee2f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96ee2f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpby8uja5l                        0x0000564274c1f245 <unavailable> + 4677

    5    libc.so.6                          0x00002b96ee7ed460 __libc_start_main +
    245

    6    tmpby8uja5l                        0x0000564274c1eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let r = n % 2\n    if r == 0 {\n        return 1\n    }\n\
    \n    if r > 0 {\n        let l = n % r\n        if l > 0 {\n            return\
    \ r\n        } else {\n            let l = largest_divisor(l)\n            if\
    \ l > r {\n                return l\n            } else {\n                return\
    \ r\n            }\n        }\n    } else {\n        let l = largest_divisor(n\
    \ - 2)\n        if l > r {\n            return l\n        } else {\n         \
    \   return r\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4lcprgoi.swift:16:37: error: missing argument label 'n:' in call\n\
    \            let l = largest_divisor(l)\n                                    ^\n\
    \                                    n: \n/tmp/tmp4lcprgoi.swift:24:33: error:\
    \ missing argument label 'n:' in call\n        let l = largest_divisor(n - 2)\n\
    \                                ^\n                                n: \n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // Check n is a power of 2\n    if n < 2 || (n & (n - 1))\
    \ != 0 {\n        return n\n    }\n\n    var max_divisor = 2\n    var max_div\
    \ = 0\n    for div in 2..n {\n        if n % div == 0 {\n            if div >\
    \ max_div {\n                max_div = div\n                max_divisor = div\n\
    \            }\n        }\n    }\n\n    return max_divisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpoq4_ovjf.swift:13:17: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for div in 2..n {\n                ^~\n           \
    \     ...\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp72nzxg6x.swift:6:28: error: missing argument label 'n:' in call\n\
    \    return largest_divisor(n)\n                           ^\n               \
    \            n: \n"
  stdout: ''
  timestamp: 1659978532
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var maxDivisor =\
    \ 1\n    var minDivisor = 1\n    var currentDivisor = 1\n    var currentNumber\
    \ = n\n    repeat {\n        if n % currentDivisor == 0 {\n            currentDivisor\
    \ = currentDivisor + 1\n            if currentDivisor > maxDivisor {\n       \
    \         maxDivisor = currentDivisor\n            }\n        } else {\n     \
    \       currentDivisor = currentDivisor - 1\n            if currentDivisor < minDivisor\
    \ {\n                minDivisor = currentDivisor\n            }\n        }\n \
    \       currentNumber = currentNumber / currentDivisor\n    } while (currentNumber\
    \ > 1)\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp07jxoa6f/tmp07jxoa6f.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6b6e8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6b6b85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6b6b85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6b6b847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07jxoa6f                        0x00005576d0075245 <unavailable> + 4677

    5    libc.so.6                          0x00002af6b707a460 __libc_start_main +
    245

    6    tmp07jxoa6f                        0x00005576d0074ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978532
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n%2 == 0 {\n        return n\n    }\n\n    for d in [2,3,5,7,11,13,17,19]\
    \ {\n        if n%d == 0 {\n            return d\n        }\n    }\n\n    return\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpelw8mcs4/tmpelw8mcs4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7b22d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7b1fccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7b1fcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7b1fcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpelw8mcs4                        0x000055fe6714e4b5 <unavailable> + 5301

    5    libc.so.6                          0x00002ba7b24c1460 __libc_start_main +
    245

    6    tmpelw8mcs4                        0x000055fe6714e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    guard n >= 1 else {\n        return 0\n    }\n    guard n\
    \ <= 10 else {\n        return 0\n    }\n    var max_divisor: Int = 0\n    var\
    \ max_divisor_divisor: Int = 0\n    var max_divisor_divisor_divisor: Int = 0\n\
    \    var max_divisor_divisor_divisor_divisor: Int = 0\n    \n    for divisor in\
    \ stride(from: n-1, by: -1, by:1) {\n        if divisor > max_divisor {\n    \
    \        max_divisor = divisor\n            if max_divisor_divisor < divisor {\n\
    \                max_divisor_divisor = max_divisor\n                if max_divisor_divisor_divisor\
    \ < divisor {\n                    max_divisor_divisor_divisor = max_divisor\n\
    \                    if max_divisor_divisor_divisor_divisor < divisor {\n    \
    \                    max_divisor_divisor_divisor_divisor = max_divisor\n     \
    \                   if max_divisor_divisor_divisor_divisor_divisor < divisor {\n\
    \                            max_divisor_divisor_divisor_divisor_divisor = max_divisor\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n\n    return max_divisor_divisor_divisor_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpig8r71rs.swift:17:20: error: no exact matches in call to global\
    \ function 'stride'\n    for divisor in stride(from: n-1, by: -1, by:1) {\n  \
    \                 ^\n/tmp/tmpig8r71rs.swift:17:20: note: candidate has partially\
    \ matching parameter list (from: Int, to: Int, by: Int)\n    for divisor in stride(from:\
    \ n-1, by: -1, by:1) {\n                   ^\n/tmp/tmpig8r71rs.swift:17:20: note:\
    \ candidate has partially matching parameter list (from: Int, through: Int, by:\
    \ Int)\n    for divisor in stride(from: n-1, by: -1, by:1) {\n               \
    \    ^\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    var largest_divisor\
    \ = 0\n    var current_divisor = 1\n    var current_divisor_size = 0\n    while\
    \ current_divisor_size < n {\n        current_divisor *= 2\n        current_divisor_size\
    \ += 1\n        if current_divisor_size == n {\n            if current_divisor\
    \ >= n {\n                break\n            }\n            largest_divisor =\
    \ current_divisor\n            current_divisor = 1\n            current_divisor_size\
    \ = 0\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8mizovk2/tmp8mizovk2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa47317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa4700eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa4700e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa4700d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mizovk2                        0x000055c075d3f1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002baa47503460 __libc_start_main +
    245

    6    tmp8mizovk2                        0x000055c075d3ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let mut largest = 0\n    for d in divisors(n) {\n       \
    \ if n % d == 0 {\n            if d > largest {\n                largest = d\n\
    \            }\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpcjjsu22s.swift:6:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut largest\
    \ = 0\n            ^\n/tmp/tmpcjjsu22s.swift:6:13: note: join the identifiers\
    \ together\n    let mut largest = 0\n        ~~~~^~~~~~~\n        mutlargest\n\
    /tmp/tmpcjjsu22s.swift:6:13: note: join the identifiers together with camel-case\n\
    \    let mut largest = 0\n        ~~~~^~~~~~~\n        mutLargest\n/tmp/tmpcjjsu22s.swift:7:14:\
    \ error: cannot find 'divisors' in scope\n    for d in divisors(n) {\n       \
    \      ^~~~~~~~\n/tmp/tmpcjjsu22s.swift:14:12: error: cannot find 'largest' in\
    \ scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return max(smallDivisor(n), n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpyfxwn563.swift:6:16: error: cannot find 'smallDivisor' in scope\n\
    \    return max(smallDivisor(n), n)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var result: Int?\n    for d in factors {\n        result\
    \ += d * d // d*d is always smaller than n\n        if result! > n {\n       \
    \     break\n        }\n    }\n    return result! // return largest number that\
    \ divide n evenly\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqwgbxekz.swift:7:14: error: cannot find 'factors' in scope\n  \
    \  for d in factors {\n             ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for _ in 0..<n {\n        let divisor\
    \ = gcd(n)\n        if divisor > max_divisor {\n            max_divisor = divisor\n\
    \        }\n        n = n / divisor\n    }\n    return max_divisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4e6z4_d1.swift:8:23: error: cannot find 'gcd' in scope\n      \
    \  let divisor = gcd(n)\n                      ^~~\n/tmp/tmp4e6z4_d1.swift:12:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / divisor\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  var ans = n\n  for _ in 0..<n {\n    ans = ans/2\n    if ans%2\
    \ == 0 {\n      return ans\n    }\n  }\n  return ans\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmphs0o8nuo/tmphs0o8nuo.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd1e7b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd1e4acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd1e4ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd1e4ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphs0o8nuo                        0x000055ec2c0a6335 <unavailable> + 4917

    5    libc.so.6                          0x00002acd1e9a1460 __libc_start_main +
    245

    6    tmphs0o8nuo                        0x000055ec2c0a5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return Int(arc4random()) % n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5rdjhkh3.swift:6:16: error: cannot find 'arc4random' in scope\n\
    \    return Int(arc4random()) % n\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for d in divisors() {\n        if n % d == 0 {\n        \
    \    return d\n        }\n    }\n\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpk2bpu2kq.swift:6:14: error: cannot find 'divisors' in scope\n \
    \   for d in divisors() {\n             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let n = n\n    let max = (n + 1) &- 2\n    for i in 0 ..<\
    \ max {\n        if (n % i == 0) {\n            return i\n        }\n    }\n \
    \   return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002ac620e92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac620b89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac620b89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac620b8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac620b88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpx1fhrsv9                        0x000055abb379171b <unavailable> + 5915

    6    tmpx1fhrsv9                        0x000055abb37912c8 <unavailable> + 4808

    7    libc.so.6                          0x00002ac62107e460 __libc_start_main +
    245

    8    tmpx1fhrsv9                        0x000055abb3790fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_factor: Int\n    for factor in 1...n {\n        if\
    \ n%factor == 0 {\n            if max_factor < factor {\n                max_factor\
    \ = factor\n            }\n        }\n    }\n    return max_factor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpx38gt8z6.swift:9:16: error: variable 'max_factor' used before being\
    \ initialized\n            if max_factor < factor {\n               ^\n/tmp/tmpx38gt8z6.swift:6:9:\
    \ note: variable defined here\n    var max_factor: Int\n        ^\n/tmp/tmpx38gt8z6.swift:14:12:\
    \ error: variable 'max_factor' used before being initialized\n    return max_factor\n\
    \           ^\n/tmp/tmpx38gt8z6.swift:6:9: note: variable defined here\n    var\
    \ max_factor: Int\n        ^\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largestDivisor(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3hos8mir.swift:6:12: error: cannot find 'largestDivisor' in scope\n\
    \    return largestDivisor(n)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor: Int = 1\n    var biggestDivisor: Int = 0\n\
    \    for number in 1...n {\n        if n%number == 0 {\n            if biggestDivisor\
    \ == 0 {\n                biggestDivisor = number\n            } else {\n    \
    \            if number > biggestDivisor {\n                    biggestDivisor\
    \ = number\n                }\n            }\n        }\n    }\n    return biggestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnbcfewcd/tmpnbcfewcd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1633576c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b163326db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b163326d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b163326c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnbcfewcd                        0x000055fb650b7335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1633762460 __libc_start_main +
    245

    6    tmpnbcfewcd                        0x000055fb650b6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor_inner(n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxt4ecq_y.swift:6:12: error: cannot find 'largest_divisor_inner'\
    \ in scope\n    return largest_divisor_inner(n)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\t// initialize an array to hold the result\n\tresult : [Int]\
    \  = [0]\n\t// find and store the largest number that divides n evenly\n\tresult[0]\
    \ = n\n\tvar x Int = 0\n\twhile n < 0 {\n\t\t// if n divides evenly, increase\
    \ x by 1\n\t\tif n % 2 == 0 {\n\t\t\tx += 1\n\t\t}\n\t\t// if x is greater than\
    \ the largest number that divides n evenly, n is increased by 1\n\t\tif x > result[0]\
    \ {\n\t\t\tresult[0] = n\n\t\t}\n\t\t// if x is still greater than the largest\
    \ number that divides n evenly, n is increased by 1\n\t\tif x > result[0] {\n\t\
    \t\tresult[0] = n\n\t\t}\n\t\t// n is increased by 1\n\t\tn += 1\n\t}\n\treturn\
    \ result[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: SyntaxError
  stderr: "/tmp/tmpuxl0_6sb.swift:7:8: error: consecutive statements on a line must\
    \ be separated by ';'\n        result : [Int]  = [0]\n              ^\n      \
    \        ;\n/tmp/tmpuxl0_6sb.swift:7:9: error: expected expression\n        result\
    \ : [Int]  = [0]\n               ^\n/tmp/tmpuxl0_6sb.swift:10:8: error: found\
    \ an unexpected second identifier in variable declaration; is there an accidental\
    \ break?\n        var x Int = 0\n              ^\n/tmp/tmpuxl0_6sb.swift:10:8:\
    \ note: join the identifiers together\n        var x Int = 0\n            ~~^~~\n\
    \            xInt\n/tmp/tmpuxl0_6sb.swift:7:2: error: cannot find 'result' in\
    \ scope\n        result : [Int]  = [0]\n        ^~~~~~\n/tmp/tmpuxl0_6sb.swift:17:10:\
    \ error: cannot find 'result' in scope\n                if x > result[0] {\n \
    \                      ^~~~~~\n/tmp/tmpuxl0_6sb.swift:18:4: error: cannot find\
    \ 'result' in scope\n                        result[0] = n\n                 \
    \       ^~~~~~\n/tmp/tmpuxl0_6sb.swift:21:10: error: cannot find 'result' in scope\n\
    \                if x > result[0] {\n                       ^~~~~~\n/tmp/tmpuxl0_6sb.swift:22:4:\
    \ error: cannot find 'result' in scope\n                        result[0] = n\n\
    \                        ^~~~~~\n/tmp/tmpuxl0_6sb.swift:25:5: error: left side\
    \ of mutating operator isn't mutable: 'n' is a 'let' constant\n              \
    \  n += 1\n                ~ ^\n/tmp/tmpuxl0_6sb.swift:27:9: error: cannot find\
    \ 'result' in scope\n        return result[0]\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisors(n: n)[0]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwop8qava.swift:6:12: error: cannot find 'largest_divisors' in scope\n\
    \    return largest_divisors(n: n)[0]\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    var largestDivisor = 1\n    var divisor\
    \ = 1\n    for divisor < n {\n        if n % divisor == 0 {\n            largestDivisor\
    \ = divisor\n            largest = divisor\n        }\n        divisor++\n   \
    \ }\n\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxva9_9ja.swift:9:17: error: expected 'in' after for-each pattern\n\
    \    for divisor < n {\n                ^\n/tmp/tmpxva9_9ja.swift:9:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor < n {\n\
    \                ^~\n                 \n/tmp/tmpxva9_9ja.swift:9:17: error: '<'\
    \ is not a prefix unary operator\n    for divisor < n {\n                ^\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor: Int = 0\n    for d in divisors(n) {\n  \
    \      if n%d == 0 {\n            max_divisor = d\n            break\n       \
    \ }\n    }\n    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppg2b9gov.swift:7:14: error: cannot find 'divisors' in scope\n \
    \   for d in divisors(n) {\n             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  if n < 2 {\n    return 0\n  }\n  var max = 1\n  for d := 1;\
    \ d < n; d++ {\n    if n % d == 0 {\n      if d > max {\n        max = d\n   \
    \   }\n    }\n  }\n  return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxi9utztp.swift:10:10: error: expected type\n  for d := 1; d < n;\
    \ d++ {\n         ^\n          <#type#>\n/tmp/tmpxi9utztp.swift:10:10: error:\
    \ expected 'in' after for-each pattern\n  for d := 1; d < n; d++ {\n         ^\n\
    /tmp/tmpxi9utztp.swift:10:10: error: expected Sequence expression for for-each\
    \ loop\n  for d := 1; d < n; d++ {\n         ^\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largestDivisor(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3hos8mir.swift:6:12: error: cannot find 'largestDivisor' in scope\n\
    \    return largestDivisor(n)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // Find largest number that can be divided by n and evenly\n\
    \    var largestDivisor: Int = 1\n    var divisor: Int\n\n    for divisor in stride(from:\
    \ n, to: 2, by: 2) {\n        if n % divisor == 0 {\n            largestDivisor\
    \ = divisor\n            break\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpsgawpsrc/tmpsgawpsrc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3101c5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3101954b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3101954988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31019537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgawpsrc                        0x0000556586a4254b <unavailable> + 5451

    5    libc.so.6                          0x00002b3101e49460 __libc_start_main +
    245

    6    tmpsgawpsrc                        0x0000556586a42109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor_of_divisor(n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp02pzfvbh.swift:6:12: error: cannot find 'largest_divisor_of_divisor'\
    \ in scope\n    return largest_divisor_of_divisor(n)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tlargest_divisor = IntMax\n\n\tlet n = n / Int(Int(ceil(sqrt(Double(n)))))\n\
    \tfor i = Int(1); i <= n; i++ {\n\t\tif n % i == 0 {\n\t\t\tif n > largest_divisor\
    \ {\n\t\t\t\tlargest_divisor = n\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\treturn largest_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpag9h_be3.swift:9:2: error: C-style for statement has been removed\
    \ in Swift 3\n        for i = Int(1); i <= n; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpag9h_be3.swift:6:20: error: cannot find 'IntMax' in scope\n        largest_divisor\
    \ = IntMax\n                          ^~~~~~\n/tmp/tmpag9h_be3.swift:6:2: error:\
    \ cannot assign to value: 'largest_divisor' is a function\n        largest_divisor\
    \ = IntMax\n        ^~~~~~~~~~~~~~~\n/tmp/tmpag9h_be3.swift:8:22: error: cannot\
    \ find 'ceil' in scope\n        let n = n / Int(Int(ceil(sqrt(Double(n)))))\n\
    \                            ^~~~\n/tmp/tmpag9h_be3.swift:8:27: error: cannot\
    \ find 'sqrt' in scope\n        let n = n / Int(Int(ceil(sqrt(Double(n)))))\n\
    \                                 ^~~~\n/tmp/tmpag9h_be3.swift:17:9: error: cannot\
    \ convert return expression of type '(Int) -> Int' to return type 'Int'\n    \
    \    return largest_divisor\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 2\n    }\n\n    var largestDivisor\
    \ = 0\n    var divisor: Int\n    var remaining: Int\n\n    for divisor = 2; divisor\
    \ <= n; divisor++ {\n        remaining = n % divisor\n        if remaining ==\
    \ 0 {\n            if divisor > largestDivisor {\n                largestDivisor\
    \ = divisor\n            }\n        } else {\n            if divisor < largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjlzarpb1.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for divisor = 2; divisor <= n; divisor++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = Int64(0)\n    var divisor = Int64(n)\n \
    \   var lastDivisor = Int64(0)\n\n    for divisor != 1 {\n        while divisor\
    \ != 1 {\n            if n % divisor == 0 {\n                divisor = lastDivisor\n\
    \            } else {\n                lastDivisor = divisor\n            }\n\
    \        }\n        maxDivisor = divisor\n    }\n\n    return maxDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppda1e5br.swift:10:17: error: expected 'in' after for-each pattern\n\
    \    for divisor != 1 {\n                ^\n/tmp/tmppda1e5br.swift:10:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor != 1 {\n\
    \                ^ ~\n                  \n/tmp/tmppda1e5br.swift:10:17: error:\
    \ '!=' is not a prefix unary operator\n    for divisor != 1 {\n              \
    \  ^\n/tmp/tmppda1e5br.swift:21:12: error: cannot convert return expression of\
    \ type 'Int64' to return type 'Int'\n    return maxDivisor\n           ^~~~~~~~~~\n\
    \           Int(      )\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var i = Int()\n    var max_divisor = 0\n    for divisor in\
    \ divisors(n) {\n        if divisor > max_divisor {\n            max_divisor =\
    \ divisor\n            i = Int(n)\n        }\n        i /= divisor\n    }\n  \
    \  return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzzmmh8gh.swift:8:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor: Int = 0\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i\n            }\n        }\n    }\n    return max_divisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp5jfy5h4q/tmp5jfy5h4q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59dc867c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59dc55eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59dc55e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59dc55d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5jfy5h4q                        0x000055c15e1fc335 <unavailable> + 4917

    5    libc.so.6                          0x00002b59dca53460 __libc_start_main +
    245

    6    tmp5jfy5h4q                        0x000055c15e1fbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tvar result Int\n\tvar divisor Int\n\tvar last_divisor Int\n\
    \tvar found Bool\n\n\tfor i in 1 ... n {\n\t\tif !found {\n\t\t\tdivisor = 1\n\
    \t\t\tlast_divisor = 1\n\t\t\tfound = false\n\t\t\tcontinue\n\t\t}\n\n\t\tif i%last_divisor\
    \ == 0 {\n\t\t\tdivisor++\n\t\t} else {\n\t\t\tif divisor > last_divisor {\n\t\
    \t\t\tresult = i\n\t\t\t\tlast_divisor = divisor\n\t\t\t}\n\t\t\tdivisor = 1\n\
    \t\t\tfound = false\n\t\t}\n\t}\n\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvnmkpco1.swift:6:13: error: found an unexpected second identifier\
    \ in variable declaration; is there an accidental break?\n        var result Int\n\
    \                   ^\n/tmp/tmpvnmkpco1.swift:6:13: note: join the identifiers\
    \ together\n        var result Int\n            ~~~~~~~^~~\n            resultInt\n\
    /tmp/tmpvnmkpco1.swift:7:14: error: found an unexpected second identifier in variable\
    \ declaration; is there an accidental break?\n        var divisor Int\n      \
    \              ^\n/tmp/tmpvnmkpco1.swift:7:14: note: join the identifiers together\n\
    \        var divisor Int\n            ~~~~~~~~^~~\n            divisorInt\n/tmp/tmpvnmkpco1.swift:8:19:\
    \ error: found an unexpected second identifier in variable declaration; is there\
    \ an accidental break?\n        var last_divisor Int\n                       \
    \  ^\n/tmp/tmpvnmkpco1.swift:8:19: note: join the identifiers together\n     \
    \   var last_divisor Int\n            ~~~~~~~~~~~~~^~~\n            last_divisorInt\n\
    /tmp/tmpvnmkpco1.swift:9:12: error: found an unexpected second identifier in variable\
    \ declaration; is there an accidental break?\n        var found Bool\n       \
    \           ^\n/tmp/tmpvnmkpco1.swift:9:12: note: join the identifiers together\n\
    \        var found Bool\n            ~~~~~~^~~~\n            foundBool\n/tmp/tmpvnmkpco1.swift:6:6:\
    \ error: type annotation missing in pattern\n        var result Int\n        \
    \    ^\n/tmp/tmpvnmkpco1.swift:7:6: error: type annotation missing in pattern\n\
    \        var divisor Int\n            ^\n/tmp/tmpvnmkpco1.swift:8:6: error: type\
    \ annotation missing in pattern\n        var last_divisor Int\n            ^\n\
    /tmp/tmpvnmkpco1.swift:9:6: error: type annotation missing in pattern\n      \
    \  var found Bool\n            ^\n/tmp/tmpvnmkpco1.swift:20:11: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n                        divisor++\n\
    \                               ^~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let num: Int = numOfDigits(n)\n    if num == 0 {\n      \
    \  return 0\n    }\n\n    let maxDivider: Int = pow(10, Double(num))\n    return\
    \ ceil(log10(Double(n))) - ceil(log10(maxDivider))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpz1mpkwhf.swift:6:20: error: cannot find 'numOfDigits' in scope\n\
    \    let num: Int = numOfDigits(n)\n                   ^~~~~~~~~~~\n/tmp/tmpz1mpkwhf.swift:11:27:\
    \ error: cannot find 'pow' in scope\n    let maxDivider: Int = pow(10, Double(num))\n\
    \                          ^~~\n/tmp/tmpz1mpkwhf.swift:12:12: error: cannot find\
    \ 'ceil' in scope\n    return ceil(log10(Double(n))) - ceil(log10(maxDivider))\n\
    \           ^~~~\n/tmp/tmpz1mpkwhf.swift:12:17: error: cannot find 'log10' in\
    \ scope\n    return ceil(log10(Double(n))) - ceil(log10(maxDivider))\n       \
    \         ^~~~~\n/tmp/tmpz1mpkwhf.swift:12:37: error: cannot find 'ceil' in scope\n\
    \    return ceil(log10(Double(n))) - ceil(log10(maxDivider))\n               \
    \                     ^~~~\n/tmp/tmpz1mpkwhf.swift:12:42: error: cannot find 'log10'\
    \ in scope\n    return ceil(log10(Double(n))) - ceil(log10(maxDivider))\n    \
    \                                     ^~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tif n < 2 {\n\t\treturn 0\n\t}\n\n\tlet largest_divisor: Int\
    \ = 2\n\tvar largest_divisor_found = false\n\n\twhile largest_divisor_found ==\
    \ false {\n\t\tif n % largest_divisor == 0 {\n\t\t\tlargest_divisor_found = true\n\
    \t\t}\n\n\t\tlargest_divisor++\n\t}\n\n\treturn largest_divisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmparpm_cwq.swift:18:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                largest_divisor++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var result: Int = 1\n    var remainder = n % result\n\n \
    \   while remainder > 0 {\n        result = result + 1\n        remainder = remainder\
    \ - result * result\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp1tr9wymg/tmp1tr9wymg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82dc478c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82dc16fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82dc16f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82dc16e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1tr9wymg                        0x00005596595fd33b <unavailable> + 4923

    5    libc.so.6                          0x00002b82dc664460 __libc_start_main +
    245

    6    tmp1tr9wymg                        0x00005596595fcef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\treturn largest_divisor(n - 1, n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwuxk7tro.swift:6:32: error: extra argument in call\n        return\
    \ largest_divisor(n - 1, n)\n                              ~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\treturn largestDivisor(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp55k46l16.swift:6:9: error: cannot find 'largestDivisor' in scope\n\
    \        return largestDivisor(n)\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    var max_remainder = -1\n\n    for\
    \ divisor in 1..n {\n        if n % divisor == 0 {\n            var remainder\
    \ = n % divisor\n            while remainder != 0 {\n                max_divisor\
    \ = divisor\n                max_remainder = remainder\n                remainder\
    \ = remainder - divisor\n            }\n        }\n    }\n\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5notcvq2.swift:9:21: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for divisor in 1..n {\n                    ^~\n   \
    \                 ...\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\treturn n / find_divisor(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp6icpku5v.swift:6:13: error: cannot find 'find_divisor' in scope\n\
    \        return n / find_divisor(n)\n                   ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n%2 == 0 {\n        return n/2\n    }\n    var largest:\
    \ Int = 1\n    var num = 3\n    while num < n {\n        if n%num == 0 {\n   \
    \         largest = num\n            break\n        }\n        num = num + 2\n\
    \    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let factors = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    let factorsOfN = factors.filter { n % $0 == 0 }\n    let maxFactor = max(factorsOfN)\n\
    \    return factors.filter { $0 == maxFactor }\n        .last!\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpetrm0rfu.swift:8:35: error: missing argument for parameter #2 in\
    \ call\n    let maxFactor = max(factorsOfN)\n                                \
    \  ^\n                                  , <#[Int]#>\nSwift.max:1:24: note: 'max'\
    \ declared here\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T :\
    \ Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let n = abs(n)\n    if n == 1 {\n        return n\n    }\n\
    \    var max = 0\n    for _ in 0..<n {\n        let temp = n\n        for _ in\
    \ 1..<n / 2 {\n            temp -= 1\n        }\n        if temp > max {\n   \
    \         max = temp\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp03_zte9g.swift:14:18: error: left side of mutating operator isn't\
    \ mutable: 'temp' is a 'let' constant\n            temp -= 1\n            ~~~~\
    \ ^\n/tmp/tmp03_zte9g.swift:12:9: note: change 'let' to 'var' to make it mutable\n\
    \        let temp = n\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let result: Int = Int(ceil(log(n) / log(2)))\n\n    if result\
    \ > Int(n) {\n        return Int()\n    }\n\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpo9fou3r8.swift:6:27: error: cannot find 'ceil' in scope\n    let\
    \ result: Int = Int(ceil(log(n) / log(2)))\n                          ^~~~\n/tmp/tmpo9fou3r8.swift:6:32:\
    \ error: cannot find 'log' in scope\n    let result: Int = Int(ceil(log(n) / log(2)))\n\
    \                               ^~~\n/tmp/tmpo9fou3r8.swift:6:41: error: cannot\
    \ find 'log' in scope\n    let result: Int = Int(ceil(log(n) / log(2)))\n    \
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // https://en.wikipedia.org/wiki/Divisor\n    // http://mathworld.wolfram.com/DivisorFunction.html\n\
    \    var result: Int\n    if n % 2 == 0 {\n        result = n\n    } else {\n\
    \        result = n - 1\n    }\n    for num in 3...n {\n        if num % 2 ==\
    \ 0 {\n            continue\n        }\n        if result > num {\n          \
    \  result = num\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmphkg__hv_/tmphkg__hv_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d23e21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d23b18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d23b18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d23b177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphkg__hv_                        0x000055ea41df8335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6d2400d460 __libc_start_main +
    245

    6    tmphkg__hv_                        0x000055ea41df7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return large_divisor(n, prime_sieve_of_squares(n, primes_limit))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpv477egcf.swift:6:12: error: cannot find 'large_divisor' in scope\n\
    \    return large_divisor(n, prime_sieve_of_squares(n, primes_limit))\n      \
    \     ^~~~~~~~~~~~~\n/tmp/tmpv477egcf.swift:6:29: error: cannot find 'prime_sieve_of_squares'\
    \ in scope\n    return large_divisor(n, prime_sieve_of_squares(n, primes_limit))\n\
    \                            ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv477egcf.swift:6:55:\
    \ error: cannot find 'primes_limit' in scope\n    return large_divisor(n, prime_sieve_of_squares(n,\
    \ primes_limit))\n                                                      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor: Int = 0\n    for _n in 1...n {\n   \
    \     if ((n % _n) == 0) {\n            largest_divisor = _n\n        }\n    }\n\
    \    return largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpie2wct1g/tmpie2wct1g.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3992d3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3992a36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3992a36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3992a357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpie2wct1g                        0x0000563b8936d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b3992f2b460 __libc_start_main +
    245

    6    tmpie2wct1g                        0x0000563b8936cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n\n    var largest =\
    \ i\n    for i in 2...n {\n        if n % i == 0 {\n            largest = i\n\
    \            break\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe5gm92of.swift:10:19: error: cannot find 'i' in scope\n    var\
    \ largest = i\n                  ^\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 0 {\n        print(\"Input must be greater than 0\"\
    )\n        return 0\n    }\n    let sqrt_n = sqrt(n)\n    return Int(ceil(Double(sqrt_n)\
    \ / Double(n)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpk1etw_k3.swift:10:18: error: cannot find 'sqrt' in scope\n    let\
    \ sqrt_n = sqrt(n)\n                 ^~~~\n/tmp/tmpk1etw_k3.swift:11:16: error:\
    \ cannot find 'ceil' in scope\n    return Int(ceil(Double(sqrt_n) / Double(n)))\n\
    \               ^~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n%2 == 1 {\n        return 0\n    }\n    var (\n     \
    \   maxDiv: Int\n        divisor : Int\n    ) = (1, n)\n    while divisor <= maxDiv\
    \ {\n        if n%divisor == 0 {\n            maxDiv = divisor\n        }\n  \
    \      divisor++\n    }\n    return maxDiv\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "error: compile command failed due to signal 6 (use -v to see invocation)\n\
    /tmp/tmpf84zs0ir.swift:11:9: error: found an unexpected second identifier in variable\
    \ declaration; is there an accidental break?\n        divisor : Int\n        ^\n\
    /tmp/tmpf84zs0ir.swift:11:9: note: join the identifiers together\n        divisor\
    \ : Int\n~~~~~~~~^~~~~~~\nIntdivisor\n/tmp/tmpf84zs0ir.swift:11:9: note: join\
    \ the identifiers together with camel-case\n        divisor : Int\n~~~~~~~~^~~~~~~\n\
    IntDivisor\n/tmp/tmpf84zs0ir.swift:11:17: error: expected ',' separator\n    \
    \    divisor : Int\n                ^\n               ,\n/tmp/tmpf84zs0ir.swift:11:17:\
    \ error: expected pattern\n        divisor : Int\n                ^\nswift-frontend:\
    \ /home/build-user/llvm-project/llvm/include/llvm/Support/Casting.h:269: typename\
    \ cast_retty<X, Y *>::ret_type llvm::cast(Y *) [X = swift::TupleType, Y = swift::TypeBase]:\
    \ Assertion `isa<X>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.\n\
    Please submit a bug report (https://swift.org/contributing/#reporting-bugs) and\
    \ include the project and the crash backtrace.\nStack dump:\n0.\tProgram arguments:\
    \ /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/bin/swift-frontend\
    \ -frontend -c -primary-file /tmp/tmpf84zs0ir.swift -target x86_64-unknown-linux-gnu\
    \ -disable-objc-interop -new-driver-path /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/bin/swift-driver\
    \ -empty-abi-descriptor -resource-dir /work/arjunguha-research-group/swift-installation/swift-DEVELOPMENT-SNAPSHOT-2022-08-01-a-centos7/usr/lib/swift\
    \ -module-name tmpf84zs0ir -o /tmp/TemporaryDirectory.32lSh9/tmpf84zs0ir-1.o\n\
    1.\tSwift version 5.8-dev (LLVM 07d14852a049e40, Swift 613b3223d9ec5f6)\n2.\t\
    Compiling with the current language version\n3.\tWhile evaluating request TypeCheckSourceFileRequest(source_file\
    \ \"/tmp/tmpf84zs0ir.swift\")\n4.\tWhile evaluating request TypeCheckFunctionBodyRequest(tmpf84zs0ir.(file).largest_divisor(n:)@/tmp/tmpf84zs0ir.swift:5:6)\n\
    5.\tWhile type-c"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor: Int = 0\n\n    for i in  1...n {\n        if\
    \ n % i == 0 {\n            divisor = i\n        }\n    }\n\n    return divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpvvpkznor/tmpvvpkznor.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b314ac07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b314a8feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b314a8fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b314a8fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvpkznor                        0x0000558dc9247335 <unavailable> + 4917

    5    libc.so.6                          0x00002b314adf3460 __libc_start_main +
    245

    6    tmpvvpkznor                        0x0000558dc9246fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    guard n >= 0 else {\n        return 0\n    }\n    guard n\
    \ % 2 == 0 else {\n        return 0\n    }\n    var largest = 0\n    var largestIndex\
    \ = 0\n    for i in 0..<(n - 1) {\n        if i % 2 == 0 {\n            if largest\
    \ < i {\n                largest = i\n                largestIndex = i\n     \
    \       }\n        }\n    }\n    return largestIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpiw1ehln9/tmpiw1ehln9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af289ecbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af289bc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af289bc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af289bc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiw1ehln9                        0x000055dafb4cf335 <unavailable> + 4917

    5    libc.so.6                          0x00002af28a0b7460 __libc_start_main +
    245

    6    tmpiw1ehln9                        0x000055dafb4cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // Return n if n is even\n    if n % 2 == 0 {\n        return\
    \ n\n    }\n\n    // If n is odd, find the largest divisor of n that is smaller\
    \ than n\n    return largest_divisor(n / 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpi6zqcbts.swift:12:28: error: missing argument label 'n:' in call\n\
    \    return largest_divisor(n / 2)\n                           ^\n           \
    \                n: \n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // Find first divisor smaller than n\n    var dividend :\
    \ Int\n    dividend = n\n    var divisor = n // First divisor less than n\n  \
    \  var counter : Int = 0\n    while divisor > 1 {\n        counter += 1\n    \
    \    divisor = dividend % divisor\n        dividend = divisor\n    }\n    return\
    \ dividend\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmpdavbp97d/tmpdavbp97d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1858e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1855ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1855dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1855dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdavbp97d                        0x0000559341e60245 <unavailable> + 4677

    5    libc.so.6                          0x00002ba185ad2460 __libc_start_main +
    245

    6    tmpdavbp97d                        0x0000559341e5fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\treturn largest_divisor_by_n(&n, n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpu5vnisub.swift:6:9: error: cannot find 'largest_divisor_by_n' in\
    \ scope\n        return largest_divisor_by_n(&n, n)\n               ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu5vnisub.swift:6:30: error: cannot pass immutable value as inout argument:\
    \ 'n' is a 'let' constant\n        return largest_divisor_by_n(&n, n)\n      \
    \                              ^~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    guard n % 2 == 0 else {\n        return 0\n    }\n    return\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp0ba7ctll/tmp0ba7ctll.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afaf6652c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afaf6349b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afaf6349988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afaf63487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ba7ctll                        0x000055c24f4ad245 <unavailable> + 4677

    5    libc.so.6                          0x00002afaf683e460 __libc_start_main +
    245

    6    tmp0ba7ctll                        0x000055c24f4acef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let divisors = divisors(n)\n    return divisors.reduce(1)\
    \ { max, divisor in\n        return divisor <= max ? divisor : max\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpprrgvq7v.swift:6:20: error: use of local variable 'divisors' before\
    \ its declaration\n    let divisors = divisors(n)\n                   ^\n/tmp/tmpprrgvq7v.swift:6:9:\
    \ note: 'divisors' declared here\n    let divisors = divisors(n)\n        ^\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tlet remainder = n % 6\n\tlet maxDivisor = 6\n\tswitch remainder\
    \ {\n\tcase 0:\n\t\treturn 1\n\tcase 1:\n\t\treturn 2\n\tcase 2:\n\t\treturn 3\n\
    \tcase 3:\n\t\treturn 5\n\tcase 4:\n\t\treturn 9\n\tcase 5:\n\t\treturn 13\n\t\
    case 6:\n\t\treturn 17\n\tcase 7:\n\t\treturn 19\n\tcase 8:\n\t\treturn 23\n\t\
    case 9:\n\t\treturn 29\n\tcase 10:\n\t\treturn 31\n\tcase 11:\n\t\treturn 37\n\
    \tcase 12:\n\t\treturn 41\n\tcase 13:\n\t\treturn 43\n\tcase 14:\n\t\treturn 47\n\
    \tcase 15:\n\t\treturn 49\n\t}\n\treturn maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpb51wwng5.swift:8:2: error: switch must be exhaustive\n        switch\
    \ remainder {\n        ^\n/tmp/tmpb51wwng5.swift:8:2: note: do you want to add\
    \ a default clause?\n        switch remainder {\n        ^\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\treturn largest_divisor_to_num(n: n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp50ji0yq8.swift:6:9: error: cannot find 'largest_divisor_to_num'\
    \ in scope\n        return largest_divisor_to_num(n: n)\n               ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let maxDivisor = n * 2\n    var divisor = 0\n    for d in\
    \ 1...maxDivisor {\n        if n % d == 0 {\n            divisor = d\n       \
    \     break\n        }\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8no7njoy/tmp8no7njoy.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b544b1dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b544aed5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b544aed5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b544aed47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8no7njoy                        0x000055d4b519442b <unavailable> + 5163

    5    libc.so.6                          0x00002b544b3ca460 __libc_start_main +
    245

    6    tmp8no7njoy                        0x000055d4b5193fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor_iterative(n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp12lxbo6x.swift:6:12: error: cannot find 'largest_divisor_iterative'\
    \ in scope\n    return largest_divisor_iterative(n)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var result = -1\n\n    for _ in 0..<n {\n        if n % result\
    \ == 0 {\n            break\n        }\n        result += 1\n    }\n\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmpgjsafg_r/tmpgjsafg_r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeffb281c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeffaf78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeffaf78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeffaf777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjsafg_r                        0x000055b52092a335 <unavailable> + 4917

    5    libc.so.6                          0x00002aeffb46d460 __libc_start_main +
    245

    6    tmpgjsafg_r                        0x000055b520929fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tvar max : Int = 0\n\tfor i in 1..<n {\n\t\tif n%i == 0 {\n\t\
    \t\tmax = i\n\t\t\tbreak\n\t\t}\n\t}\n\treturn max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp_lut152f/tmp_lut152f.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d73870c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73567b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73567988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d735667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_lut152f                        0x0000562c7d27542b <unavailable> + 5163

    5    libc.so.6                          0x00002b8d73a5c460 __libc_start_main +
    245

    6    tmp_lut152f                        0x0000562c7d274fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 1 {\n        return 0\n    }\n\n    if n == 1 {\n\
    \        return 1\n    }\n\n    if n == 2 {\n        return 2\n    }\n\n    if\
    \ n % 2 == 0:\n        return largest_divisor(n - 2)\n    }\n\n    var divisor\
    \ : Int = 1\n    var maxDivisor : Int = n\n\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            maxDivisor = divisor\n        }\n    }\n\
    \n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp47use24e.swift:18:18: error: expected '{' after 'if' condition\n\
    \    if n % 2 == 0:\n                 ^\n/tmp/tmp47use24e.swift:32:1: error: extraneous\
    \ '}' at top level\n}\n^\n/tmp/tmp47use24e.swift:23:28: error: cannot find 'n'\
    \ in scope\n    var maxDivisor : Int = n\n                           ^\n/tmp/tmp47use24e.swift:25:24:\
    \ error: cannot find 'n' in scope\n    for divisor in 1...n {\n              \
    \         ^\n/tmp/tmp47use24e.swift:31:5: error: return invalid outside of a func\n\
    \    return maxDivisor\n    ^\n/tmp/tmp47use24e.swift:19:32: error: missing argument\
    \ label 'n:' in call\n        return largest_divisor(n - 2)\n                \
    \               ^\n                               n: \n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n\n    let mut max_factor:\
    \ Int = 0\n    let mut max_factor_size: Int = 0\n\n    for i in 2..=n {\n    \
    \    if n % i == 0 {\n            if max_factor_size <= i {\n                max_factor\
    \ = i\n                max_factor_size = i\n            } else {\n           \
    \     max_factor_size = i\n            }\n        }\n    }\n\n    return max_factor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpuzl85h1c.swift:10:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut max_factor:\
    \ Int = 0\n            ^\n/tmp/tmpuzl85h1c.swift:10:13: note: join the identifiers\
    \ together\n    let mut max_factor: Int = 0\n        ~~~~^~~~~~~~~~\n        mutmax_factor\n\
    /tmp/tmpuzl85h1c.swift:10:13: note: join the identifiers together with camel-case\n\
    \    let mut max_factor: Int = 0\n        ~~~~^~~~~~~~~~\n        mutMax_factor\n\
    /tmp/tmpuzl85h1c.swift:11:13: error: found an unexpected second identifier in\
    \ constant declaration; is there an accidental break?\n    let mut max_factor_size:\
    \ Int = 0\n            ^\n/tmp/tmpuzl85h1c.swift:11:13: note: join the identifiers\
    \ together\n    let mut max_factor_size: Int = 0\n        ~~~~^~~~~~~~~~~~~~~\n\
    \        mutmax_factor_size\n/tmp/tmpuzl85h1c.swift:11:13: note: join the identifiers\
    \ together with camel-case\n    let mut max_factor_size: Int = 0\n        ~~~~^~~~~~~~~~~~~~~\n\
    \        mutMax_factor_size\n/tmp/tmpuzl85h1c.swift:11:9: error: invalid redeclaration\
    \ of 'mut'\n    let mut max_factor_size: Int = 0\n        ^\n/tmp/tmpuzl85h1c.swift:10:9:\
    \ note: 'mut' previously declared here\n    let mut max_factor: Int = 0\n    \
    \    ^\n/tmp/tmpuzl85h1c.swift:13:15: error: cannot find operator '..=' in scope\n\
    \    for i in 2..=n {\n              ^~~\n/tmp/tmpuzl85h1c.swift:24:12: error:\
    \ cannot find 'max_factor' in scope\n    return max_factor\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    var max = n\n \
    \   for num in 2..<n {\n        if n % num == 0 {\n            max += num\n  \
    \      }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp_puus5d2/tmp_puus5d2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44182acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4417fa3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4417fa3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4417fa27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_puus5d2                        0x000055f774758335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4418498460 __libc_start_main +
    245

    6    tmp_puus5d2                        0x000055f774757fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return 1\n    }\n    \n    // Find largest divisor of n / 2\n    var remainder\
    \ = n\n    var largestDivisor = 1\n    while remainder > 0 {\n        if remainder\
    \ % 2 != 0 {\n            largestDivisor++\n        }\n        remainder /= 2\n\
    \    }\n\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsb2xzcd5.swift:18:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            largestDivisor++\n                       \
    \   ^~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n\n    if n == 1 {\n\
    \        return 1\n    }\n\n    var maxDivisor = 1\n    var currentDivisor = 1\n\
    \n    for i in 1..n {\n        if n % (currentDivisor*currentDivisor) == 0 {\n\
    \            currentDivisor++\n            if currentDivisor > maxDivisor {\n\
    \                maxDivisor = currentDivisor\n            }\n        } else {\n\
    \            currentDivisor = 1\n        }\n    }\n\n    return maxDivisor\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkkp_9w06.swift:17:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tlet i = sqrt(Double(n))\n\tvar a = i\n\tvar b = i\n\n\tvar\
    \ maxDivisor: Int = 0\n\n\twhile a <= n {\n\t\tif n % a == 0 {\n\t\t\tb++\n\t\t\
    }\n\n\t\tif b == i {\n\t\t\tmaxDivisor = a\n\t\t}\n\n\t\ta++\n\t}\n\n\treturn\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpc_4wc9uq.swift:6:10: error: cannot find 'sqrt' in scope\n     \
    \   let i = sqrt(Double(n))\n                ^~~~\n/tmp/tmpc_4wc9uq.swift:14:5:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \              b++\n                         ^~\n/tmp/tmpc_4wc9uq.swift:21:4:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      a++\n                 ^~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  return largest_divisor_with_remainder(n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5usmwotb.swift:6:10: error: cannot find 'largest_divisor_with_remainder'\
    \ in scope\n  return largest_divisor_with_remainder(n)\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = Int(1); \n    \n    for i in 1..<n {\n    \
    \    if n % i == 0 {\n            divisor = i;\n        }\n    }\n    return divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\treturn largest_divisor_inner(n, n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdqqa4x9b.swift:6:9: error: cannot find 'largest_divisor_inner'\
    \ in scope\n        return largest_divisor_inner(n, n)\n               ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largestDivisor(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3hos8mir.swift:6:12: error: cannot find 'largestDivisor' in scope\n\
    \    return largestDivisor(n)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor_by_n_until(n, n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpni_65_om.swift:6:12: error: cannot find 'largest_divisor_by_n_until'\
    \ in scope\n    return largest_divisor_by_n_until(n, n)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n % 2 == 0 {\n        return n / 2\n    }\n    var remainder:\
    \ Int = 0\n    while n % 2 == 0 {\n        n = n / 2\n        remainder = remainder\
    \ + 2\n    }\n    return remainder\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1x8qajkb.swift:11:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    return 1 + largest_divisor(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) ==\
    \ 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\n\
    assert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpufvlrupi.swift:9:32: error: missing argument label 'n:' in call\n\
    \    return 1 + largest_divisor(n - 1)\n                               ^\n   \
    \                            n: \n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  var max_divisor = 0\n  var i = 1\n  var j = 0\n  for i = 2;\
    \ i < n; i += 2 {\n    if n % i == 0 {\n      if max_divisor < i {\n        max_divisor\
    \ = i\n      }\n      j++\n    }\n  }\n  return max_divisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpn9gmw11k.swift:9:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for i = 2; i < n; i += 2 {\n  ^   ~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    \n    var max: Int = 0\n    for d in 2...n {\n        let\
    \ s = n/divisor\n        if s == 0 || s >= n {\n            break\n        } else\
    \ {\n            if d > max {\n                max = d\n            }\n      \
    \  }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1pug08zl.swift:9:19: error: cannot find 'divisor' in scope\n  \
    \      let s = n/divisor\n                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 0 {\n        return -1\n    }\n\n    var highest_divisor\
    \ = Int(1)\n    for divisor in 1...Int(n/2){\n        if n%divisor == 0 {\n  \
    \          highest_divisor = Int(divisor)\n        }\n    }\n\n    if n%highest_divisor\
    \ == 0 {\n        return highest_divisor\n    }\n\n    return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  return largest_divisor_inner(n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmxb2tk9h.swift:6:10: error: cannot find 'largest_divisor_inner'\
    \ in scope\n  return largest_divisor_inner(n)\n         ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max: Int = 1\n    var i: Int = 1\n    for max *= i <=\
    \ n ? i : 1; i <= n; i++ {\n        if n % i == 0 {\n            break\n     \
    \   }\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpugl73ysm.swift:8:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for max *= i <= n ? i : 1; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tswitch n {\n\tcase 2:\n\t\treturn 2\n\tcase 3:\n\t\treturn\
    \ 3\n\tcase 5:\n\t\treturn 5\n\tcase 7:\n\t\treturn 7\n\tcase 10:\n\t\treturn\
    \ 10\n\tcase 11:\n\t\treturn 11\n\tcase 12:\n\t\treturn 12\n\tcase 15:\n\t\treturn\
    \ 15\n\tcase 16:\n\t\treturn 16\n\tdefault:\n\t\treturn n % 4 == 0 ? n : n / 4\n\
    \t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpq_49847j/tmpq_49847j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab930ea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab930b9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab930b9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab930b9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_49847j                        0x000055786cfb7245 <unavailable> + 4677

    5    libc.so.6                          0x00002ab931094460 __libc_start_main +
    245

    6    tmpq_49847j                        0x000055786cfb6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // If n is even, return its square root.\n    if n % 2 ==\
    \ 0 {\n        return sqrt(n)\n    }\n\n    // If n is odd, return largest factor\
    \ of the number that is smaller than n.\n    var maxFactor = 1\n    for factor\
    \ in 2..(n - 1) {\n        if (n / factor).is_integer()  && factor < maxFactor\
    \ {\n            maxFactor = factor\n        }\n    }\n    return maxFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpijd04qh2.swift:8:16: error: cannot find 'sqrt' in scope\n     \
    \   return sqrt(n)\n               ^~~~\n/tmp/tmpijd04qh2.swift:13:20: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n    for factor in 2..(n\
    \ - 1) {\n                   ^~\n                   ...\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max: Int = 0\n    for num in 1...n {\n        if num\
    \ % 2 != 0 {\n            max = num\n        } else {\n            if num > max\
    \ {\n                max = num\n            }\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpm8fiqwyv/tmpm8fiqwyv.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abee3de4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abee3adbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abee3adb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abee3ada7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8fiqwyv                        0x0000561e941d6335 <unavailable> + 4917

    5    libc.so.6                          0x00002abee3fd0460 __libc_start_main +
    245

    6    tmpm8fiqwyv                        0x0000561e941d5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\t\n\tlet divisors = (0..<n).filter({ Int($0) >= Int(n) }).map({\
    \ ($0 + 1) / 2 })\n\t\n\treturn divisors.max() ?? 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpjxocnrze/tmpjxocnrze.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac968a41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac968738b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac968738988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9687377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjxocnrze                        0x00005616a7ce46ab <unavailable> + 5803

    5    libc.so.6                          0x00002ac968c2d460 __libc_start_main +
    245

    6    tmpjxocnrze                        0x00005616a7ce4269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    let limit = Int(floor(n\
    \ * math.log(n, 2) / math.log(2, n)))\n    var largest = limit - 1\n    var current\
    \ = 1\n    for var i = 0; i <= limit; i++ {\n        if current % i == 0 {\n \
    \           if current > largest {\n                largest = current\n      \
    \      }\n            current++\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe8x8cptv.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i <= limit; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpe8x8cptv.swift:9:21: error: cannot find 'floor' in scope\n    let limit\
    \ = Int(floor(n * math.log(n, 2) / math.log(2, n)))\n                    ^~~~~\n\
    /tmp/tmpe8x8cptv.swift:9:31: error: cannot find 'math' in scope\n    let limit\
    \ = Int(floor(n * math.log(n, 2) / math.log(2, n)))\n                        \
    \      ^~~~\n/tmp/tmpe8x8cptv.swift:9:48: error: cannot find 'math' in scope\n\
    \    let limit = Int(floor(n * math.log(n, 2) / math.log(2, n)))\n           \
    \                                    ^~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  if n < 2 {\n    return n\n  }\n\n  let highest = Int(n) - 1\n\
    \n  while n >= highest+1 {\n    let remainder = n % (highest + 1)\n    if remainder\
    \ == 0 {\n      return highest\n    }\n    highest = Int(remainder)\n  }\n\n \
    \ return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1d8lm01v.swift:17:5: error: cannot assign to value: 'highest' is\
    \ a 'let' constant\n    highest = Int(remainder)\n    ^~~~~~~\n/tmp/tmp1d8lm01v.swift:10:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let highest = Int(n) - 1\n\
    \  ^~~\n  var\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tvar max: Int = 0\n\tfor i : Int = 1; i < n; i++ {\n\t\tif n\
    \ % i == 0 {\n\t\t\tif max < i {\n\t\t\t\tmax = i\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) ==\
    \ 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\n\
    assert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpd8uwqux5.swift:7:14: error: expected 'in' after for-each pattern\n\
    \        for i : Int = 1; i < n; i++ {\n                    ^\n/tmp/tmpd8uwqux5.swift:7:14:\
    \ error: expected Sequence expression for for-each loop\n        for i : Int =\
    \ 1; i < n; i++ {\n                    ^\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let max_divisor = Int64(1)\n    var max_divisor_ind = 1\n\
    \    for i in (1..<n)! {\n        let divisor = i\n        for j in (0..<i)! {\n\
    \            if i * j > max_divisor {\n                max_divisor = i * j\n \
    \               max_divisor_ind = j\n            }\n        }\n    }\n    return\
    \ max_divisor_ind\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp23gzd39v.swift:8:21: error: cannot force unwrap value of non-optional\
    \ type 'Range<_>'\n    for i in (1..<n)! {\n             ~~~~~~~^\n          \
    \          \n/tmp/tmp23gzd39v.swift:10:25: error: cannot force unwrap value of\
    \ non-optional type 'Range<_>'\n        for j in (0..<i)! {\n                \
    \ ~~~~~~~^\n                        \n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n, count: 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4k5xyfu1.swift:6:38: error: extra argument 'count' in call\n  \
    \  return largest_divisor(n, count: 1)\n                          ~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max = 1\n    var smaller = 0\n    for divisor in 1...n-1\
    \ {\n        if n % divisor == 0 {\n            max = divisor\n            smaller\
    \ = n - divisor\n        }\n    }\n    if max < n {\n        return max\n    }\
    \ else {\n        return smaller\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tlet divisor = Int(ceil(sqrt(n)))\n\twhile n / divisor > 0 {\n\
    \t\tif n % divisor == 0 {\n\t\t\treturn divisor\n\t\t}\n\t\tdivisor++\n\t}\n\t\
    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpf7di_94k.swift:6:20: error: cannot find 'ceil' in scope\n     \
    \   let divisor = Int(ceil(sqrt(n)))\n                          ^~~~\n/tmp/tmpf7di_94k.swift:6:25:\
    \ error: cannot find 'sqrt' in scope\n        let divisor = Int(ceil(sqrt(n)))\n\
    \                               ^~~~\n/tmp/tmpf7di_94k.swift:11:10: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n                divisor++\n\
    \                       ^~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return max(dividingPowerOf2(n: n), n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0ijrznq5.swift:6:16: error: cannot find 'dividingPowerOf2' in scope\n\
    \    return max(dividingPowerOf2(n: n), n)\n               ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  if n < 6 {\n    return n\n  }\n  var res = 1\n  for d in 2...n\
    \ {\n    if n % d == 0 {\n      res = d\n      break\n    }\n  }\n  return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpw02g7gxa/tmpw02g7gxa.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa40269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa3ff60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa3ff60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa3ff5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw02g7gxa                        0x000055ee1aeed335 <unavailable> + 4917

    5    libc.so.6                          0x00002baa40455460 __libc_start_main +
    245

    6    tmpw02g7gxa                        0x000055ee1aeecfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor : Int = 1\n    var max_divisor_num : Int\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if max_divisor_num < divisor {\n                max_divisor = divisor\n    \
    \            max_divisor_num = divisor\n            }\n        }\n    }\n    return\
    \ max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpga3i_z7p/tmpga3i_z7p.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9948ed2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9948bc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9948bc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9948bc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga3i_z7p                        0x0000561205a67335 <unavailable> + 4917

    5    libc.so.6                          0x00002b99490be460 __libc_start_main +
    245

    6    tmpga3i_z7p                        0x0000561205a66fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    var max_divisor_count = 0\n    for\
    \ number in stride(from: n, through: 0, by: 1) {\n        if number % 2 == 0 {\n\
    \            count += 1\n        }\n        if count > max_divisor_count {\n \
    \           max_divisor = number\n            max_divisor_count = count\n    \
    \    }\n    }\n    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpr52_nt8k.swift:10:13: error: cannot find 'count' in scope\n   \
    \         count += 1\n            ^~~~~\n/tmp/tmpr52_nt8k.swift:12:12: error:\
    \ cannot find 'count' in scope\n        if count > max_divisor_count {\n     \
    \      ^~~~~\n/tmp/tmpr52_nt8k.swift:14:33: error: cannot find 'count' in scope\n\
    \            max_divisor_count = count\n                                ^~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  let maxNum: Int = pow(10, ceil(log10(Double(n))))\n  let divisor:\
    \ Double = 1 / Double(n)\n  var largestDivisor: Int = 0\n  for d in 1...Int(maxNum)\
    \ {\n    if n / Double(d) == divisor && d > largestDivisor {\n      largestDivisor\
    \ = d\n    }\n  }\n  return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp56h723df.swift:6:21: error: cannot find 'pow' in scope\n  let maxNum:\
    \ Int = pow(10, ceil(log10(Double(n))))\n                    ^~~\n/tmp/tmp56h723df.swift:6:29:\
    \ error: cannot find 'ceil' in scope\n  let maxNum: Int = pow(10, ceil(log10(Double(n))))\n\
    \                            ^~~~\n/tmp/tmp56h723df.swift:6:34: error: cannot\
    \ find 'log10' in scope\n  let maxNum: Int = pow(10, ceil(log10(Double(n))))\n\
    \                                 ^~~~~\n/tmp/tmp56h723df.swift:10:8: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n    if n / Double(d)\
    \ == divisor && d > largestDivisor {\n       ^\n       Double( )\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n\n    var maxDivisor\
    \ = 1\n    var biggestDivisor = 1\n\n    for _ in 0 ..< n / 2 {\n        biggestDivisor\
    \ *= 2\n        if biggestDivisor > n {\n            biggestDivisor = n * 2\n\
    \        }\n\n        if biggestDivisor % 2 == 0 {\n            maxDivisor = biggestDivisor\n\
    \        }\n    }\n\n    for _ in 0 ..< n / 2 {\n        maxDivisor *= 2\n   \
    \     if maxDivisor > n {\n            maxDivisor = n * 2\n        }\n\n     \
    \   if maxDivisor % 2 == 0 {\n            return maxDivisor\n        }\n    }\n\
    \n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpvhtyug99/tmpvhtyug99.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7ccd17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7cca0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7cca0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7cca0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvhtyug99                        0x000055c1c7a1a335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad7ccf03460 __libc_start_main +
    245

    6    tmpvhtyug99                        0x000055c1c7a19fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\treturn Int(largest_divisor_of_divisors(n)[1])\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmputzqqctq.swift:6:13: error: cannot find 'largest_divisor_of_divisors'\
    \ in scope\n        return Int(largest_divisor_of_divisors(n)[1])\n          \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // This algorithm is based on trial division.\n    // The\
    \ idea is to repeatedly divide by 2, 3, 5, and so on until we find a divisor\n\
    \    // which is smaller than n.\n\n    // First try trial division by 2, 3, 5,\
    \ and 7\n    if n % 2 == 0 {\n        return 2\n    } else if n % 3 == 0 {\n \
    \       return 3\n    } else if n % 5 == 0 {\n        return 5\n    } else if\
    \ n % 7 == 0 {\n        return 7\n    }\n\n    var maxDivisor = 0\n    var divisor\
    \ = 2\n\n    for _ in 0 ..< 100 {\n        divisor = n + divisor\n        if divisor\
    \ > maxDivisor {\n            maxDivisor = divisor\n        }\n    }\n\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpujc9iea5/tmpujc9iea5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4a01bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac49feb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac49feb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac49feb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpujc9iea5                        0x0000558600f1d335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac4a03a8460 __libc_start_main +
    245

    6    tmpujc9iea5                        0x0000558600f1cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tif n <= 1 {\n\t\treturn n\n\t}\n\tn -= 2 // We want to find\
    \ n + 2\n\tm := n\n\tfor m > 1 && (m % 2) == 0 {\n\t\tm /= 2\n\t}\n\treturn m\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbn4ok1fv.swift:10:3: error: consecutive statements on a line must\
    \ be separated by ';'\n        m := n\n         ^\n         ;\n/tmp/tmpbn4ok1fv.swift:10:4:\
    \ error: expected expression\n        m := n\n          ^\n/tmp/tmpbn4ok1fv.swift:11:8:\
    \ error: expected 'in' after for-each pattern\n        for m > 1 && (m % 2) ==\
    \ 0 {\n              ^\n/tmp/tmpbn4ok1fv.swift:11:8: error: unary operator cannot\
    \ be separated from its operand\n        for m > 1 && (m % 2) == 0 {\n       \
    \       ^~\n               \n/tmp/tmpbn4ok1fv.swift:9:4: error: left side of mutating\
    \ operator isn't mutable: 'n' is a 'let' constant\n        n -= 2 // We want to\
    \ find n + 2\n        ~ ^\n/tmp/tmpbn4ok1fv.swift:10:2: error: cannot find 'm'\
    \ in scope\n        m := n\n        ^\n/tmp/tmpbn4ok1fv.swift:11:8: error: '>'\
    \ is not a prefix unary operator\n        for m > 1 && (m % 2) == 0 {\n      \
    \        ^\n/tmp/tmpbn4ok1fv.swift:11:16: error: cannot find 'm' in scope\n  \
    \      for m > 1 && (m % 2) == 0 {\n                      ^\n/tmp/tmpbn4ok1fv.swift:11:12:\
    \ error: for-in loop requires 'Bool' to conform to 'Sequence'\n        for m >\
    \ 1 && (m % 2) == 0 {\n              ~~~~^~~~~~~~~~~~~~~\n/tmp/tmpbn4ok1fv.swift:14:9:\
    \ error: cannot find 'm' in scope\n        return m\n               ^\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var current = 0\n    var largest = Int(n) + 1\n    for i\
    \ in 1...n {\n        if i < (n/2) {\n            current += i\n            largest\
    \ = i\n        } else {\n            current = largest + i\n            if current\
    \ > largest {\n                largest = current\n            }\n        }\n \
    \   }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp3_ivm0nv/tmp3_ivm0nv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d5383fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d53536b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d53536988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d535357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ivm0nv                        0x0000563e6e9eb475 <unavailable> + 5237

    5    libc.so.6                          0x00002b6d53a2b460 __libc_start_main +
    245

    6    tmp3_ivm0nv                        0x0000563e6e9eb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tif n == 1 {\n\t\treturn 1\n\t}\n\tdivsOdd := make([]Int, n)\n\
    \tfor i := 0; i < n; i++ {\n\t\tdivsOdd[i] = 0\n\t\tfor j := 1; j < i; j++ {\n\
    \t\t\tif i%j == 0 {\n\t\t\t\tdivsOdd[i] = min(divsOdd[i], j)\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn divsOdd[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpt2gb2_19.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        divsOdd := make([]Int, n)\n               ^\n \
    \              ;\n/tmp/tmpt2gb2_19.swift:9:10: error: expected expression\n  \
    \      divsOdd := make([]Int, n)\n                ^\n/tmp/tmpt2gb2_19.swift:10:9:\
    \ error: expected type\n        for i := 0; i < n; i++ {\n               ^\n \
    \               <#type#>\n/tmp/tmpt2gb2_19.swift:10:9: error: expected 'in' after\
    \ for-each pattern\n        for i := 0; i < n; i++ {\n               ^\n/tmp/tmpt2gb2_19.swift:10:9:\
    \ error: expected Sequence expression for for-each loop\n        for i := 0; i\
    \ < n; i++ {\n               ^\n/tmp/tmpt2gb2_19.swift:12:10: error: expected\
    \ type\n                for j := 1; j < i; j++ {\n                       ^\n \
    \                       <#type#>\n/tmp/tmpt2gb2_19.swift:12:10: error: expected\
    \ 'in' after for-each pattern\n                for j := 1; j < i; j++ {\n    \
    \                   ^\n/tmp/tmpt2gb2_19.swift:12:10: error: expected Sequence\
    \ expression for for-each loop\n                for j := 1; j < i; j++ {\n   \
    \                    ^\n/tmp/tmpt2gb2_19.swift:9:2: error: cannot find 'divsOdd'\
    \ in scope\n        divsOdd := make([]Int, n)\n        ^~~~~~~\n/tmp/tmpt2gb2_19.swift:18:9:\
    \ error: cannot find 'divsOdd' in scope\n        return divsOdd[n-1]\n       \
    \        ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let highestDivisor = n / 2\n    var divisor = 1\n    while\
    \ divisor < n {\n        if n % divisor == 0 {\n            highestDivisor = divisor\n\
    \        }\n        divisor++\n    }\n    return highestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmps4s70505.swift:10:13: error: cannot assign to value: 'highestDivisor'\
    \ is a 'let' constant\n            highestDivisor = divisor\n            ^~~~~~~~~~~~~~\n\
    /tmp/tmps4s70505.swift:6:5: note: change 'let' to 'var' to make it mutable\n \
    \   let highestDivisor = n / 2\n    ^~~\n    var\n/tmp/tmps4s70505.swift:12:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        divisor++\n\
    \               ^~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\treturn largest_divisor(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpttye1_vh.swift:6:25: error: missing argument label 'n:' in call\n\
    \        return largest_divisor(n)\n                               ^\n       \
    \                        n: \n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largestDivisor(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3hos8mir.swift:6:12: error: cannot find 'largestDivisor' in scope\n\
    \    return largestDivisor(n)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largestDivisor(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3hos8mir.swift:6:12: error: cannot find 'largestDivisor' in scope\n\
    \    return largestDivisor(n)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    guard n > 0 else { return n }\n    var max_divisor = 1\n\
    \    var max_div = 0\n    for d in divisors(n) {\n        if d > max_divisor {\n\
    \            max_divisor = d\n            max_div = n - d * d\n        }\n   \
    \ }\n    return max_div\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpd20foto5.swift:9:14: error: cannot find 'divisors' in scope\n \
    \   for d in divisors(n) {\n             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor_from_n(n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp29kyq1sv.swift:6:12: error: cannot find 'largest_divisor_from_n'\
    \ in scope\n    return largest_divisor_from_n(n)\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 0\n    for _i in 0 ..< n {\n      \
    \  if n % _i >= 0 {\n            largest_divisor = i\n            break\n    \
    \    }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0flqho7c.swift:9:31: error: cannot find 'i' in scope\n        \
    \    largest_divisor = i\n                              ^\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    \n    var max_divisor:\
    \ Int = 0\n    var max_divisor_p: Int = 0\n    \n    for i : Int in 0 ..< n {\n\
    \        \n        let divisor = n / i\n        \n        if divisor == 0 || divisor\
    \ == 1 {\n            continue\n        }\n        \n        if max_divisor <\
    \ divisor {\n            max_divisor = divisor\n            max_divisor_p = i\n\
    \        }\n    }\n    \n    return max_divisor_p\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14137: Fatal error: Division by zero

    Current stack trace:

    0    libswiftCore.so                    0x00002ba94f8ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba94f5f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba94f5f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba94f5f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba94f5f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpe6nxipri                        0x000055740b892723 <unavailable> + 5923

    6    tmpe6nxipri                        0x000055740b8922c8 <unavailable> + 4808

    7    libc.so.6                          0x00002ba94faeb460 __libc_start_main +
    245

    8    tmpe6nxipri                        0x000055740b891fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tlargestDivisorCount = 0\n\tlargestDivisor = n\n\n\tfor n !=\
    \ 1 {\n\t\tn /= 2\n\t\tlargestDivisorCount += 1\n\t}\n\tlargestDivisorCount--\n\
    \n\treturn largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpppjhtare.swift:9:8: error: expected 'in' after for-each pattern\n\
    \        for n != 1 {\n              ^\n/tmp/tmpppjhtare.swift:9:8: error: unary\
    \ operator cannot be separated from its operand\n        for n != 1 {\n      \
    \        ^ ~\n                \n/tmp/tmpppjhtare.swift:6:2: error: cannot find\
    \ 'largestDivisorCount' in scope\n        largestDivisorCount = 0\n        ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpppjhtare.swift:7:2: error: cannot find 'largestDivisor' in scope\n   \
    \     largestDivisor = n\n        ^~~~~~~~~~~~~~\n/tmp/tmpppjhtare.swift:9:8:\
    \ error: '!=' is not a prefix unary operator\n        for n != 1 {\n         \
    \     ^\n/tmp/tmpppjhtare.swift:13:21: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n        largestDivisorCount--\n                      \
    \     ^~\n/tmp/tmpppjhtare.swift:13:2: error: cannot find 'largestDivisorCount'\
    \ in scope\n        largestDivisorCount--\n        ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpppjhtare.swift:15:9:\
    \ error: cannot find 'largestDivisor' in scope\n        return largestDivisor\n\
    \               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    guard n > 0 else { return 0 }\n    var max = n\n    var divisor:\
    \ Int = 0\n    for _ in 0 ..< n {\n        divisor++\n        if n % divisor ==\
    \ 0 {\n            max = divisor\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp8i9s_eld.swift:10:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let maxDivisor = 5\n    var max = n\n    var divisor = 1\n\
    \    while max % divisor != 0 && divisor <= maxDivisor {\n        divisor *= 2\n\
    \        max = max / divisor\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpaiy3w71v/tmpaiy3w71v.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b471829dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4717f94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4717f94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4717f937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaiy3w71v                        0x00005612d3df8245 <unavailable> + 4677

    5    libc.so.6                          0x00002b4718489460 __libc_start_main +
    245

    6    tmpaiy3w71v                        0x00005612d3df7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return Int((sqrt(Double(n)) * (Double(n))).rounded(.towardZero()))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpl6gi2cy_.swift:6:17: error: cannot find 'sqrt' in scope\n    return\
    \ Int((sqrt(Double(n)) * (Double(n))).rounded(.towardZero()))\n              \
    \  ^~~~\n/tmp/tmpl6gi2cy_.swift:6:57: error: cannot infer contextual base in reference\
    \ to member 'towardZero'\n    return Int((sqrt(Double(n)) * (Double(n))).rounded(.towardZero()))\n\
    \                                                       ~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  var largestDivisor = 0\n  for d in 2...n {\n    if n%d == 0\
    \ {\n      if largestDivisor <= d {\n        largestDivisor = d\n      }\n   \
    \ }\n  }\n  return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp619qrrjk/tmp619qrrjk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac19dad4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac19d7cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac19d7cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac19d7ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp619qrrjk                        0x000055ed1515a335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac19dcc0460 __libc_start_main +
    245

    6    tmp619qrrjk                        0x000055ed15159fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let m = n / 2\n    for d in divisors(m) {\n        if (n\
    \ % d == 0) {\n            return d\n        }\n    }\n    return n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpuxrf4o1r.swift:7:14: error: cannot find 'divisors' in scope\n \
    \   for d in divisors(m) {\n             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var i = 2\n    while i < n {\n        if n % i == 0 {\n \
    \           return i\n        }\n        i += 1\n    }\n    return n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpfegmlr8m/tmpfegmlr8m.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae913828c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae91351fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae91351f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae91351e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfegmlr8m                        0x0000556da0a29245 <unavailable> + 4677

    5    libc.so.6                          0x00002ae913a14460 __libc_start_main +
    245

    6    tmpfegmlr8m                        0x0000556da0a28ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n, true)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbd83loqs.swift:6:31: error: extra argument in call\n    return\
    \ largest_divisor(n, true)\n                          ~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 2\n    }\n\n    // O(n) time complexity\n\
    \    var max_divisor = 2 // 2 is the largest divisor of 2\n    var max_divisor_index\
    \ = 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ max_divisor > i {\n                max_divisor = i\n                max_divisor_index\
    \ = i\n            } else {\n                max_divisor = max_divisor > i ? max_divisor\
    \ : i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplci_ab4_.swift:13:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmplci_ab4_.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmplci_ab4_.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = Int()\n    \n    for i in 1 ..< n {\n \
    \       if n % (i + 1) == 0 {\n            if n > max_divisor {\n            \
    \    max_divisor = i\n            }\n        }\n    }\n    \n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpmp2dnd5w/tmpmp2dnd5w.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b046be67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b046bb5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b046bb5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b046bb5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmp2dnd5w                        0x00005567236dc335 <unavailable> + 4917

    5    libc.so.6                          0x00002b046c053460 __libc_start_main +
    245

    6    tmpmp2dnd5w                        0x00005567236dbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n\n    let logBase =\
    \ Int(Float(log10(Float(n))))\n    var maxDivisor = 0\n    var divisor = Int()\n\
    \    divisor = Int(n / 10)\n    if divisor > maxDivisor {\n        maxDivisor\
    \ = divisor\n    }\n    divisor = Int(n % 10)\n    if divisor > maxDivisor {\n\
    \        maxDivisor = divisor\n    }\n    maxDivisor = divisor + 1\n    while\
    \ divisor <= maxDivisor {\n        divisor = Int(n / divisor)\n        if divisor\
    \ > maxDivisor {\n            maxDivisor = divisor\n        }\n        divisor\
    \ = Int(n % divisor)\n        if divisor > maxDivisor {\n            maxDivisor\
    \ = divisor\n        }\n    }\n    if divisor > maxDivisor {\n        maxDivisor\
    \ = divisor\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2yu_yh_1.swift:10:29: error: cannot find 'log10' in scope\n   \
    \ let logBase = Int(Float(log10(Float(n))))\n                            ^~~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // Find the first even divisor greater than or equal to n\n\
    \    for divisor in 1...Int(n/2){\n        if n % divisor == 0 {\n           \
    \ return divisor\n        }\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmps8472f7e/tmps8472f7e.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7f9148c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7f8e3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7f8e3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7f8e3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8472f7e                        0x00005595fb9ef56b <unavailable> + 5483

    5    libc.so.6                          0x00002ab7f9334460 __libc_start_main +
    245

    6    tmps8472f7e                        0x00005595fb9ef129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // find the first divisor of n that is smaller than n\n \
    \   var d : Int? = nil\n    if n % 2 == 1 {\n        d = 2\n    } else {\n   \
    \     d = 1\n        while n % d == 0 {\n            d += 1\n        }\n    }\n\
    \n    // find the largest number that divides n evenly, smaller than n\n    //\
    \ if d is not nil, then n is not a divisor of n\n    if let d = d {\n        //\
    \ if d is odd, then n is a divisor of n, otherwise n is not a divisor of n\n \
    \       if d % 2 == 1 {\n            n /= 2\n        }\n    }\n\n    return n\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp8q4zn4z5.swift:12:19: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        while n % d == 0 {\n        \
    \          ^\n/tmp/tmp8q4zn4z5.swift:12:19: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n        while n % d == 0 {\n\
    \                  ^\n                  ( ?? <#default value#>)\n/tmp/tmp8q4zn4z5.swift:12:19:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        while n % d == 0 {\n                  ^\n                   !\n\
    /tmp/tmp8q4zn4z5.swift:13:13: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n            d += 1\n            ^\n/tmp/tmp8q4zn4z5.swift:13:13:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            d += 1\n            ^\n             !\n/tmp/tmp8q4zn4z5.swift:22:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var result: Int = 0\n    let maxDivisor = sqrt(n)\n    for\
    \ d in divisors(n) {\n        if d > maxDivisor {\n            result = d\n  \
    \          break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkpqm47ja.swift:7:22: error: cannot find 'sqrt' in scope\n    let\
    \ maxDivisor = sqrt(n)\n                     ^~~~\n/tmp/tmpkpqm47ja.swift:8:14:\
    \ error: cannot find 'divisors' in scope\n    for d in divisors(n) {\n       \
    \      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for divisor in 1..n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpw0xbh115.swift:7:21: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for divisor in 1..n {\n                    ^~\n   \
    \                 ...\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let nums = [1, 2, 3, 5]\n    let rev = nums.reverse()\n \
    \   let a = rev.firstIndex(where: { (item) -> Bool in\n        return (item %\
    \ n == 0)\n    })\n    if a != rev.endIndex {\n        return rev[a]\n    } else\
    \ {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp9d3us1u0.swift:7:20: error: cannot use mutating member on immutable\
    \ value: 'nums' is a 'let' constant\n    let rev = nums.reverse()\n          \
    \    ~~~~ ^\n/tmp/tmp9d3us1u0.swift:6:5: note: change 'let' to 'var' to make it\
    \ mutable\n    let nums = [1, 2, 3, 5]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var max_divisor\
    \ = 0\n    for divisor in 1..n {\n        if n%divisor == 0 {\n            if\
    \ max_divisor == 0 {\n                max_divisor = divisor\n            } else\
    \ {\n                max_divisor = min(max_divisor, divisor)\n            }\n\
    \        }\n    }\n    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjs1xn4ff.swift:10:21: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for divisor in 1..n {\n                    ^~\n   \
    \                 ...\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor: Int = 0\n\n    for divisor in 1...n {\n\
    \        if n%divisor == 0 {\n            largestDivisor = divisor\n         \
    \   break\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp48k3j8dy/tmp48k3j8dy.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f3bed9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f3bbd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f3bbd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f3bbcf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48k3j8dy                        0x0000556f6626242b <unavailable> + 5163

    5    libc.so.6                          0x00002b4f3c0c5460 __libc_start_main +
    245

    6    tmp48k3j8dy                        0x0000556f66261fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let mut largest_divisor = 0\n    for divisor in divisors()\
    \ {\n        if n % divisor == 0 {\n            if largest_divisor == 0 {\n  \
    \              largest_divisor = divisor\n            } else {\n             \
    \   if largest_divisor > divisor {\n                    largest_divisor = divisor\n\
    \                }\n            }\n        }\n    }\n    return largest_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpii4xzd51.swift:6:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut largest_divisor\
    \ = 0\n            ^\n/tmp/tmpii4xzd51.swift:6:13: note: join the identifiers\
    \ together\n    let mut largest_divisor = 0\n        ~~~~^~~~~~~~~~~~~~~\n   \
    \     mutlargest_divisor\n/tmp/tmpii4xzd51.swift:6:13: note: join the identifiers\
    \ together with camel-case\n    let mut largest_divisor = 0\n        ~~~~^~~~~~~~~~~~~~~\n\
    \        mutLargest_divisor\n/tmp/tmpii4xzd51.swift:7:20: error: cannot find 'divisors'\
    \ in scope\n    for divisor in divisors() {\n                   ^~~~~~~~\n/tmp/tmpii4xzd51.swift:18:12:\
    \ error: cannot convert return expression of type '(Int) -> Int' to return type\
    \ 'Int'\n    return largest_divisor\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\t// we iterate from 1 to n (exclusive) to find the greatest\
    \ divisor\n\tvar maxDivisor: Int = 0\n\tfor i := 1; i < n; i++ {\n\t\tif n / i\
    \ == 0 {\n\t\t\tif maxDivisor == 0 || maxDivisor > i {\n\t\t\t\tmaxDivisor = i\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2ddg3j_h.swift:8:9: error: expected type\n        for i := 1; i\
    \ < n; i++ {\n               ^\n                <#type#>\n/tmp/tmp2ddg3j_h.swift:8:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 1; i < n; i++\
    \ {\n               ^\n/tmp/tmp2ddg3j_h.swift:8:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 1; i < n; i++ {\n               ^\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 0\n    if n > 1 {\n        for n in\
    \ 1...n {\n            if n % n == 0 {\n                largest_divisor = n\n\
    \            } else {\n                break\n            }\n        }\n    }\n\
    \    return largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpy_0e420d/tmpy_0e420d.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad10f6c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad10f3b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad10f3b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad10f3b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy_0e420d                        0x000055b5d72f3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad10f8ac460 __libc_start_main +
    245

    6    tmpy_0e420d                        0x000055b5d72f2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % (divisor * divisor) == 0 {\n            maxDivisor = divisor\n        }\n\
    \    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpogcfac62/tmpogcfac62.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e925d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e922ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e922ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e922cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogcfac62                        0x00005625f1ecf42b <unavailable> + 5163

    5    libc.so.6                          0x00002b3e927c3460 __libc_start_main +
    245

    6    tmpogcfac62                        0x00005625f1ecefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    guard n > 0 else {\n        return 0\n    }\n    guard n\
    \ % 2 == 0 else {\n        return n / 2\n    }\n    if n % 4 == 0 {\n        return\
    \ n / 4\n    }\n    return largest_divisor(n / 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp93hc_gdg.swift:15:28: error: missing argument label 'n:' in call\n\
    \    return largest_divisor(n / 2)\n                           ^\n           \
    \                n: \n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // find the largest number that divides n evenly\n    let\
    \ maxDivr = n.toInt()\n    // find the lowest multiple of n that divides evenly\
    \ to maxDivr\n    let lowestMultipleOfDivr = (n * maxDivr).rounded(.down)\n  \
    \  // find the highest multiple of n that divides evenly to maxDivr\n    let highestMultipleOfDivr\
    \ = ((n * maxDivr).rounded(.up))\n    return lowestMultipleOfDivr + (highestMultipleOfDivr\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) ==\
    \ 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\n\
    assert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpyvj1p2ka.swift:7:21: error: value of type 'Int' has no member 'toInt'\n\
    \    let maxDivr = n.toInt()\n                  ~ ^~~~~\n/tmp/tmpyvj1p2ka.swift:9:55:\
    \ error: cannot infer contextual base in reference to member 'down'\n    let lowestMultipleOfDivr\
    \ = (n * maxDivr).rounded(.down)\n                                           \
    \          ~^~~~\n/tmp/tmpyvj1p2ka.swift:11:57: error: cannot infer contextual\
    \ base in reference to member 'up'\n    let highestMultipleOfDivr = ((n * maxDivr).rounded(.up))\n\
    \                                                       ~^~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // Find the largest divisor of n that is less than or equal\
    \ to n.\n    if n < 0 {\n        return 0\n    }\n\n    // If n is even, divide\
    \ it by 2. If n is odd, divide it by 3 then by 4.\n    // Then repeat the process\
    \ by dividing the number by every odd divisor less than or equal to n.\n    for\
    \ divisor in 2...Int(n/2) {\n        // While the number divides evenly, keep\
    \ dividing it by every odd divisor less than or equal to n.\n        while n %\
    \ divisor == 0 {\n            n /= divisor\n        }\n    }\n\n    // Return\
    \ the largest divisor of n that is less than or equal to n.\n    return n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp52cxsbb2.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= divisor\n            ~ ^\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  if n <= 1 {\n    return 1\n  }\n  var max_div = 1\n  for max_div\
    \ in 1...n {\n    if n % max_div == 0 {\n      return max_div\n    }\n  }\n  return\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpczerbn21/tmpczerbn21.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b835667ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8356371b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8356371988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83563707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpczerbn21                        0x00005586253c342b <unavailable> + 5163

    5    libc.so.6                          0x00002b8356866460 __libc_start_main +
    245

    6    tmpczerbn21                        0x00005586253c2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n\n    for _ in 0..<n {\n        if\
    \ n%2 == 0 {\n            if n >= largestDivisor {\n                largestDivisor\
    \ = n\n            }\n        }\n        n /= 2\n    }\n\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvom2gk7f.swift:14:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tassert(n >= 2)\n\tvar largest = 0\n\tfor i := 2; i < n; i++\
    \ {\n\t\tlet x = sqrt(Double(i))\n\t\tif x != Int(i) {\n\t\t\tlargest = i\n\t\t\
    \tbreak\n\t\t}\n\t}\n\tassert(largest != n)\n\treturn largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpr0ft8h27.swift:8:9: error: expected type\n        for i := 2; i\
    \ < n; i++ {\n               ^\n                <#type#>\n/tmp/tmpr0ft8h27.swift:8:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 2; i < n; i++\
    \ {\n               ^\n/tmp/tmpr0ft8h27.swift:8:9: error: expected Sequence expression\
    \ for for-each loop\n        for i := 2; i < n; i++ {\n               ^\n/tmp/tmpr0ft8h27.swift:9:11:\
    \ error: cannot find 'sqrt' in scope\n                let x = sqrt(Double(i))\n\
    \                        ^~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    guard n >= 1 else { return n }\n    return n/2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi_lxzzzr/tmpi_lxzzzr.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ab0a0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ab0701b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ab0701988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ab07007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_lxzzzr                        0x00005579c3c032c0 <unavailable> + 4800

    5    libc.so.6                          0x00002b5ab0bf6460 __libc_start_main +
    245

    6    tmpi_lxzzzr                        0x00005579c3c02ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\treturn largest_divisor_with_remainder(n, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzph9t7gi.swift:6:9: error: cannot find 'largest_divisor_with_remainder'\
    \ in scope\n        return largest_divisor_with_remainder(n, 0)\n            \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var max_divisor\
    \ = n - 1\n    for divisor in stride(from: 1, through: n, by: 2) {\n        if\
    \ n % divisor == 0 {\n            if max_divisor < divisor {\n               \
    \ max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpagdvlgz3/tmpagdvlgz3.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293cc1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b293c912b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b293c912988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b293c9117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagdvlgz3                        0x0000557cf3933475 <unavailable> + 5237

    5    libc.so.6                          0x00002b293ce07460 __libc_start_main +
    245

    6    tmpagdvlgz3                        0x0000557cf3933129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor: Int = 0\n    for d in 2...n {\n        if\
    \ n % d == 0 {\n            if d > maxDivisor {\n                maxDivisor =\
    \ d\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp3rl5bpte/tmp3rl5bpte.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ec3b4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ec3843b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ec3843988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ec38427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3rl5bpte                        0x0000564d9c8f1335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4ec3d38460 __libc_start_main +
    245

    6    tmp3rl5bpte                        0x0000564d9c8f0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = Int(n) / 2\n    if maxDivisor == 1 {\n \
    \       return 0\n    }\n\n    var sum = 0\n\n    while maxDivisor % 2 == 0 {\n\
    \        sum += maxDivisor\n        maxDivisor = Int(maxDivisor) / 2\n    }\n\n\
    \    return sum + maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp0jjeadvb/tmp0jjeadvb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c132dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c1024b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c1024988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c10237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0jjeadvb                        0x0000560fb22ae375 <unavailable> + 4981

    5    libc.so.6                          0x00002b80c1519460 __libc_start_main +
    245

    6    tmp0jjeadvb                        0x0000560fb22ae029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    var largestDivisor = 2\n    var largestFactor\
    \ = largestDivisor\n    for i : Int in 1 ..< n {\n        for j : Int in 1 ..<\
    \ n {\n            largestDivisor = j\n            if i % j == 0 {\n         \
    \       break\n            }\n        }\n        if largestDivisor > n / largestFactor\
    \ {\n            largestFactor = largestDivisor\n            largest = i\n   \
    \     }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp8kcpxzfi/tmp8kcpxzfi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac052615c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac05230cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac05230c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac05230b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kcpxzfi                        0x000055d6fed8842b <unavailable> + 5163

    5    libc.so.6                          0x00002ac052801460 __libc_start_main +
    245

    6    tmp8kcpxzfi                        0x000055d6fed87fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return -1\n    }\n\n    let max_divisor:\
    \ Int = n\n    for i in 2...max_divisor {\n        if n % i == 0 {\n         \
    \   max_divisor = i\n        }\n    }\n    return max_divisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjpsdwzuh.swift:13:13: error: cannot assign to value: 'max_divisor'\
    \ is a 'let' constant\n            max_divisor = i\n            ^~~~~~~~~~~\n\
    /tmp/tmpjpsdwzuh.swift:10:5: note: change 'let' to 'var' to make it mutable\n\
    \    let max_divisor: Int = n\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  if n == 1 {\n    return 1\n  }\n  \n  var max_div = divisor(n)\n\
    \  var div = 1\n  var prev_div = 1\n  \n  for div <= max_div {\n    if n % div\
    \ == 0 {\n      prev_div = div\n      break\n    }\n  }\n  \n  if prev_div < max_div\
    \ {\n    return prev_div\n  }\n  \n  if n % (prev_div * 2) == 0 {\n    return\
    \ prev_div * 2\n  }\n  \n  if n % (prev_div * 3) == 0 {\n    return prev_div *\
    \ 3\n  }\n  \n  return prev_div * 4\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmprpg_57h6.swift:14:11: error: expected 'in' after for-each pattern\n\
    \  for div <= max_div {\n          ^\n/tmp/tmprpg_57h6.swift:14:11: error: unary\
    \ operator cannot be separated from its operand\n  for div <= max_div {\n    \
    \      ^ ~\n            \n/tmp/tmprpg_57h6.swift:10:17: error: cannot find 'divisor'\
    \ in scope\n  var max_div = divisor(n)\n                ^~~~~~~\n/tmp/tmprpg_57h6.swift:14:11:\
    \ error: '<=' is not a prefix unary operator\n  for div <= max_div {\n       \
    \   ^\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\treturn largestDivisor(n, nil)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwniapf9m.swift:6:9: error: cannot find 'largestDivisor' in scope\n\
    \        return largestDivisor(n, nil)\n               ^~~~~~~~~~~~~~\n/tmp/tmpwniapf9m.swift:6:27:\
    \ error: 'nil' requires a contextual type\n        return largestDivisor(n, nil)\n\
    \                                 ^\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp72nzxg6x.swift:6:28: error: missing argument label 'n:' in call\n\
    \    return largest_divisor(n)\n                           ^\n               \
    \            n: \n"
  stdout: ''
  timestamp: 1659978532
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  var divisor = 1\n  var remainder = n - 1\n\n  while remainder\
    \ > 0 && divisor <= n {\n    divisor = divisor + 1\n    remainder = remainder\
    \ / divisor\n  }\n\n  return divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpppx5wz_f/tmpppx5wz_f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace02db9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace02ab0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace02ab0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace02aaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpppx5wz_f                        0x00005651463ae245 <unavailable> + 4677

    5    libc.so.6                          0x00002ace02fa5460 __libc_start_main +
    245

    6    tmpppx5wz_f                        0x00005651463adef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // 1\n    if n < 2 {\n        return n\n    }\n\n    // 2\n\
    \    if n % 2 == 0 {\n        return n\n    }\n\n    // 3\n    if n % 3 == 0 {\n\
    \        return n\n    }\n\n    // 4\n    if n % 5 == 0 {\n        return n\n\
    \    }\n\n    // 5\n    if n % 7 == 0 {\n        return n\n    }\n\n    // 6\n\
    \    if n % 11 == 0 {\n        return n\n    }\n\n    // 7\n    if n % 13 == 0\
    \ {\n        return n\n    }\n\n    // 8\n    if n % 17 == 0 {\n        return\
    \ n\n    }\n\n    // 9\n    if n % 19 == 0 {\n        return n\n    }\n\n    //\
    \ 10\n    if n % 23 == 0 {\n        return n\n    }\n\n    // 11\n    if n % 29\
    \ == 0 {\n        return n\n    }\n\n    // 12\n    if n % 31 == 0 {\n       \
    \ return n\n    }\n\n    // 13\n    if n % 37 == 0 {\n        return n\n    }\n\
    \n    // 14\n    if n % 41 == 0 {\n        return n\n    }\n\n    // 15\n    if\
    \ n % 43 == 0 {\n        return n\n    }\n\n    // 16\n    if n % 47 == 0 {\n\
    \        return n\n    }\n\n    // 17\n    if n % 53 == 0 {\n        return n\n\
    \    }\n\n    // 18\n    if n % 59 == 0 {\n        return n\n    }\n\n    // 19\n\
    \    if n % 61 == 0 {\n        return n\n    }\n\n    // 20\n    if n % 67 ==\
    \ 0 {\n        return n\n    }\n\n    // 21\n    if n % 71 == 0:\n        return\
    \ n\n    }\n\n    // 22\n    if n % 73 == 0 {\n        return n\n    }\n\n   \
    \ // 23\n    if n % 79 == 0 {\n        return n\n    }\n\n    // 24\n    if n\
    \ % 83 == 0 {\n        return n\n    }\n\n    // 25\n    if n % 89 == 0 {\n  \
    \      return n\n    }\n\n    // 26\n    if n % 97 == 0 {\n        return n\n\
    \    }\n\n    // 27\n    if n % 101 == 0 {\n        return n\n    }\n\n    //\
    \ 28\n    if n % 103 == 0 {\n        return n\n    }\n\n    // 29\n    if n %\
    \ 105 == 0 {\n        return n\n    }\n\n    // 30\n    if n % 107 == 0 {\n  \
    \      return n\n    }\n\n    // 31\n    if n % 109 == 0 {\n        return n\n\
    \    }\n\n    // 32\n    if n % 111 == 0 {\n        return n\n    }\n\n    //\
    \ 33\n    if n % 113 == 0 {\n        return n\n    }\n\n    // 34\n    if n %\
    \ 115 == 0 {\n        return n\n    }\n\n    // 35\n    if n % 117 == 0 {\n  \
    \      return n\n    }\n\n    // 36\n    if n % 119 == 0 {\n        return n\n\
    \    }\n\n    // 37\n    if n % 121 == 0 {\n        return n\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_zb5v431.swift:107:19: error: expected '{' after 'if' condition\n\
    \    if n % 71 == 0:\n                  ^\n/tmp/tmp_zb5v431.swift:190:1: error:\
    \ extraneous '}' at top level\n}\n^\n/tmp/tmp_zb5v431.swift:112:8: error: cannot\
    \ find 'n' in scope\n    if n % 73 == 0 {\n       ^\n/tmp/tmp_zb5v431.swift:113:9:\
    \ error: return invalid outside of a func\n        return n\n        ^\n/tmp/tmp_zb5v431.swift:117:8:\
    \ error: cannot find 'n' in scope\n    if n % 79 == 0 {\n       ^\n/tmp/tmp_zb5v431.swift:118:9:\
    \ error: return invalid outside of a func\n        return n\n        ^\n/tmp/tmp_zb5v431.swift:122:8:\
    \ error: cannot find 'n' in scope\n    if n % 83 == 0 {\n       ^\n/tmp/tmp_zb5v431.swift:123:9:\
    \ error: return invalid outside of a func\n        return n\n        ^\n/tmp/tmp_zb5v431.swift:127:8:\
    \ error: cannot find 'n' in scope\n    if n % 89 == 0 {\n       ^\n/tmp/tmp_zb5v431.swift:128:9:\
    \ error: return invalid outside of a func\n        return n\n        ^\n/tmp/tmp_zb5v431.swift:132:8:\
    \ error: cannot find 'n' in scope\n    if n % 97 == 0 {\n       ^\n/tmp/tmp_zb5v431.swift:133:9:\
    \ error: return invalid outside of a func\n        return n\n        ^\n/tmp/tmp_zb5v431.swift:137:8:\
    \ error: cannot find 'n' in scope\n    if n % 101 == 0 {\n       ^\n/tmp/tmp_zb5v431.swift:138:9:\
    \ error: return invalid outside of a func\n        return n\n        ^\n/tmp/tmp_zb5v431.swift:142:8:\
    \ error: cannot find 'n' in scope\n    if n % 103 == 0 {\n       ^\n/tmp/tmp_zb5v431.swift:143:9:\
    \ error: return invalid outside of a func\n        return n\n        ^\n/tmp/tmp_zb5v431.swift:147:8:\
    \ error: cannot find 'n' in scope\n    if n % 105 == 0 {\n       ^\n/tmp/tmp_zb5v431.swift:148:9:\
    \ error: return invalid outside of a func\n        return n\n        ^\n/tmp/tmp_zb5v431.swift:152:8:\
    \ error: cannot find 'n' in scope\n    if n % 107 == 0 {\n       ^\n/tmp/tmp_zb5v431.swift:153:9:\
    \ error: return invalid outside of a func\n        return n\n        ^\n/tmp/tmp_zb5v431.swift:157:8:\
    \ error: cannot find 'n' in scope\n    if n % 109 == 0 {\n       ^\n/tmp/tmp_zb5v431.swift:158:9:\
    \ error: return invalid outside of a func"
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // TODO: Improve runtime of this function\n    // See https://discuss.leetcode.com/topic/3030/java-solution-to-the-problem-of-finding-the-number-that-has-the-greatest-factor-that-is-less-than-the-number-given\n\
    \    var largest_divisor = 0\n    for divider in 1...n {\n        if n % divider\
    \ == 0 {\n            if divider > largest_divisor {\n                largest_divisor\
    \ = divider\n            }\n        }\n    }\n    return largest_divisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpr78tjxz4/tmpr78tjxz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a97c43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a9793ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a9793a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a979397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr78tjxz4                        0x0000560c122cf335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0a97e2f460 __libc_start_main +
    245

    6    tmpr78tjxz4                        0x0000560c122cefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = n / 2\n    var divisorFound = false\n  \
    \  for divisor in stride(from: 1, to: n, by: 2) {\n        if n % divisor == 0\
    \ {\n            maxDivisor = divisor\n            divisorFound = true\n     \
    \       break\n        }\n    }\n\n    if divisorFound {\n        return maxDivisor\n\
    \    }\n\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpls4l0fkm/tmpls4l0fkm.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae003856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae00354db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae00354d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae00354c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpls4l0fkm                        0x000055d59e5b454b <unavailable> + 5451

    5    libc.so.6                          0x00002ae003a42460 __libc_start_main +
    245

    6    tmpls4l0fkm                        0x000055d59e5b4109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n, isEven: n == 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_u916gw4.swift:6:41: error: extra argument 'isEven' in call\n \
    \   return largest_divisor(n, isEven: n == 0)\n                          ~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return n.max(divisor_less_than_or_equal_to: n)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5u67bddx.swift:6:12: error: static member 'max' cannot be used\
    \ on instance of type 'Int'\n    return n.max(divisor_less_than_or_equal_to: n)\n\
    \           ^\n           Int\n/tmp/tmp5u67bddx.swift:6:14: error: cannot call\
    \ value of non-function type 'Int'\n    return n.max(divisor_less_than_or_equal_to:\
    \ n)\n             ^\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n\n    // find max_divisor < n\n    for\
    \ i in 0..<n {\n        if n%i == 0 {\n            max_divisor = i\n        }\n\
    \    }\n\n    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b81b08ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81b05d4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b81b05d4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b81b05d413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b81b05d3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmfkedx7p                        0x0000556972f026e1 <unavailable> + 5857

    6    tmpmfkedx7p                        0x0000556972f022c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b81b0ac9460 __libc_start_main +
    245

    8    tmpmfkedx7p                        0x0000556972f01fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largestDivisor(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3hos8mir.swift:6:12: error: cannot find 'largestDivisor' in scope\n\
    \    return largestDivisor(n)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tvar result : Int = 0\n\t\n\tfor i : Int = 2; i <= n; i++ {\n\
    \t\tif i % 2 == 0 {\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\tif n % i == 0 {\n\t\t\t\
    if result == 0 {\n\t\t\t\tresult = i\n\t\t\t} else {\n\t\t\t\tresult = min(result,\
    \ i)\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgfje1yg2.swift:8:14: error: expected 'in' after for-each pattern\n\
    \        for i : Int = 2; i <= n; i++ {\n                    ^\n/tmp/tmpgfje1yg2.swift:8:14:\
    \ error: expected Sequence expression for for-each loop\n        for i : Int =\
    \ 2; i <= n; i++ {\n                    ^\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // https://en.wikipedia.org/wiki/Divisor#Number_of_divisors\n\
    \    // Divide by 2, until you're left with 1 or n. Repeat until n or 1 are left.\n\
    \    let divisor = 2\n    let remainder = n % divisor\n    while remainder > 0\
    \ {\n        divisor = divisor + 1\n        remainder = n % divisor\n    }\n \
    \   return divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphbc0accc.swift:11:9: error: cannot assign to value: 'divisor' is\
    \ a 'let' constant\n        divisor = divisor + 1\n        ^~~~~~~\n/tmp/tmphbc0accc.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let divisor = 2\n    ^~~\n\
    \    var\n/tmp/tmphbc0accc.swift:12:9: error: cannot assign to value: 'remainder'\
    \ is a 'let' constant\n        remainder = n % divisor\n        ^~~~~~~~~\n/tmp/tmphbc0accc.swift:9:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let remainder = n % divisor\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor2(n: n, d: 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxx9nudar.swift:6:12: error: cannot find 'largest_divisor2' in scope\n\
    \    return largest_divisor2(n: n, d: 0)\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  var largestDivisor = -1\n\n  for d in divisors {\n    if n\
    \ / d != 0 {\n      largestDivisor = d\n    }\n  }\n\n  return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpv7y88p7t.swift:8:12: error: cannot find 'divisors' in scope\n \
    \ for d in divisors {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var num = 1\n    for _ in 1..<n {\n        if n % num ==\
    \ 0 {\n            num += 1\n        }\n    }\n    return num\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp47qvtcbf/tmp47qvtcbf.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34c3505c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34c31fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34c31fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34c31fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47qvtcbf                        0x000055609961c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b34c36f1460 __libc_start_main +
    245

    6    tmp47qvtcbf                        0x000055609961bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisors(n)[0]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgbzmxjzy.swift:6:12: error: cannot find 'largest_divisors' in scope\n\
    \    return largest_divisors(n)[0]\n           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 0\n    for num in 1...n {\n       \
    \ if num % 2 == 0 && num != n {\n            largest_divisor = num\n        }\n\
    \    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp1n7aw3yk/tmp1n7aw3yk.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488007ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b487fd71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b487fd71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b487fd707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1n7aw3yk                        0x000055c23a3fe335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4880266460 __libc_start_main +
    245

    6    tmp1n7aw3yk                        0x000055c23a3fdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_div = -1\n    for div in 1...n {\n        if (n /\
    \ div) % 2 == 0 {\n            if max_div < div {\n                max_div = div\n\
    \            }\n        }\n    }\n    return max_div\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpz3hqx19j/tmpz3hqx19j.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad415a41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad415738b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad415738988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4157377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz3hqx19j                        0x00005637255ac335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad415c2d460 __libc_start_main +
    245

    6    tmpz3hqx19j                        0x00005637255abfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n\n    for d in 2..Int(ceil(sqrt(Double(n))))\
    \ + 1 {\n        var factor = 0\n\n        if d % 2 != 0 {\n            factor\
    \ = d\n        } else {\n            for _ in 0..<n / d {\n                factor\
    \ += 1\n            }\n        }\n\n        if factor > largest {\n          \
    \  largest = factor\n        }\n    }\n\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpi0quox1c.swift:8:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for d in 2..Int(ceil(sqrt(Double(n)))) + 1 {\n    \
    \          ^~\n              ...\n/tmp/tmpi0quox1c.swift:8:21: error: cannot find\
    \ 'ceil' in scope\n    for d in 2..Int(ceil(sqrt(Double(n)))) + 1 {\n        \
    \            ^~~~\n/tmp/tmpi0quox1c.swift:8:26: error: cannot find 'sqrt' in scope\n\
    \    for d in 2..Int(ceil(sqrt(Double(n)))) + 1 {\n                         ^~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    \n    let mut max_divisor\
    \ = 1\n    \n    let mut q = n / 2\n    while q > 0 {\n        if q % 2 == 0 {\n\
    \            max_divisor = q\n        }\n        q = q / 2\n    }\n    \n    if\
    \ max_divisor % n == 0 {\n        max_divisor = max_divisor * n + 1\n    }\n \
    \   \n    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3g4lp35y.swift:10:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut max_divisor\
    \ = 1\n            ^\n/tmp/tmp3g4lp35y.swift:10:13: note: join the identifiers\
    \ together\n    let mut max_divisor = 1\n        ~~~~^~~~~~~~~~~\n        mutmax_divisor\n\
    /tmp/tmp3g4lp35y.swift:10:13: note: join the identifiers together with camel-case\n\
    \    let mut max_divisor = 1\n        ~~~~^~~~~~~~~~~\n        mutMax_divisor\n\
    /tmp/tmp3g4lp35y.swift:12:13: error: found an unexpected second identifier in\
    \ constant declaration; is there an accidental break?\n    let mut q = n / 2\n\
    \            ^\n/tmp/tmp3g4lp35y.swift:12:13: note: join the identifiers together\n\
    \    let mut q = n / 2\n        ~~~~^\n        mutq\n/tmp/tmp3g4lp35y.swift:12:13:\
    \ note: join the identifiers together with camel-case\n    let mut q = n / 2\n\
    \        ~~~~^\n        mutQ\n/tmp/tmp3g4lp35y.swift:12:9: error: invalid redeclaration\
    \ of 'mut'\n    let mut q = n / 2\n        ^\n/tmp/tmp3g4lp35y.swift:10:9: note:\
    \ 'mut' previously declared here\n    let mut max_divisor = 1\n        ^\n/tmp/tmp3g4lp35y.swift:13:11:\
    \ error: cannot find 'q' in scope\n    while q > 0 {\n          ^\n/tmp/tmp3g4lp35y.swift:14:12:\
    \ error: cannot find 'q' in scope\n        if q % 2 == 0 {\n           ^\n/tmp/tmp3g4lp35y.swift:15:13:\
    \ error: cannot find 'max_divisor' in scope\n            max_divisor = q\n   \
    \         ^~~~~~~~~~~\n/tmp/tmp3g4lp35y.swift:15:27: error: cannot find 'q' in\
    \ scope\n            max_divisor = q\n                          ^\n/tmp/tmp3g4lp35y.swift:17:9:\
    \ error: cannot find 'q' in scope\n        q = q / 2\n        ^\n/tmp/tmp3g4lp35y.swift:17:13:\
    \ error: cannot find 'q' in scope\n        q = q / 2\n            ^\n/tmp/tmp3g4lp35y.swift:20:8:\
    \ error: cannot find 'max_divisor' in scope\n    if max_divisor % n == 0 {\n \
    \      ^~~~~~~~~~~\n/tmp/tmp3g4lp35y.swift:21:9: error: cannot find 'max_divisor'\
    \ in scope\n        max_divisor = max_divisor * n + 1\n        ^~~~~~~~~~~\n/tmp/tmp3g4lp35y.swift:21:23:\
    \ error: cannot find 'max_divisor' in scope\n        max_divisor = "
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // return 0 if n is 0\n    if n == 0 {\n        return 0\n\
    \    }\n\n    var largestDivisor = 1\n\n    // find largest divisor until n is\
    \ 1 or n is smaller than 1\n    for divisor in 2...n {\n        if n % divisor\
    \ == 0 {\n            largestDivisor = divisor\n        }\n    }\n\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp2clj5b5/tmpp2clj5b5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cf53d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cf50ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cf50ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cf50cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp2clj5b5                        0x0000561274466335 <unavailable> + 4917

    5    libc.so.6                          0x00002b8cf55c3460 __libc_start_main +
    245

    6    tmpp2clj5b5                        0x0000561274465fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tlet a = largest_divisor_of_primes_below(n: n)\n\treturn a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmps75tjgce.swift:6:10: error: cannot find 'largest_divisor_of_primes_below'\
    \ in scope\n        let a = largest_divisor_of_primes_below(n: n)\n          \
    \      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 { return n }\n    var maxDivisor = n / 2\n    for\
    \ _ in 1..<n {\n        if n % maxDivisor == 0 {\n            maxDivisor = n /\
    \ maxDivisor\n        } else {\n            break\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpjan29zug/tmpjan29zug.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac06fcfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac06cc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac06cc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac06cc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjan29zug                        0x000055a6bac493b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aac071bb460 __libc_start_main +
    245

    6    tmpjan29zug                        0x000055a6bac48fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\treturn largest_divisors(n).first\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpw68z7sfs.swift:6:9: error: cannot find 'largest_divisors' in scope\n\
    \        return largest_divisors(n).first\n               ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return n.reduce(0) { $0 > $1 ? ($0) : ($1) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0koknnwg.swift:6:14: error: value of type 'Int' has no member 'reduce'\n\
    \    return n.reduce(0) { $0 > $1 ? ($0) : ($1) }\n           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    var largestDivisor\
    \ = 1\n    var lastDivisor = 1\n    for divisor in 2..Int(ceil(log2(n))) + 1 {\n\
    \        if n % divisor == 0 {\n            lastDivisor = divisor\n          \
    \  largestDivisor = divisor\n        }\n    }\n    if lastDivisor != 1 {\n   \
    \     largestDivisor = lastDivisor\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_dcfujnc.swift:11:21: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for divisor in 2..Int(ceil(log2(n))) + 1 {\n      \
    \              ^~\n                    ...\n/tmp/tmp_dcfujnc.swift:11:27: error:\
    \ cannot find 'ceil' in scope\n    for divisor in 2..Int(ceil(log2(n))) + 1 {\n\
    \                          ^~~~\n/tmp/tmp_dcfujnc.swift:11:32: error: cannot find\
    \ 'log2' in scope\n    for divisor in 2..Int(ceil(log2(n))) + 1 {\n          \
    \                     ^~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let remainder = n % (Int(NDIVISORS) - 1)\n    return Int((remainder\
    \ % Int(NDIVISORS)) + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe3vrf9bn.swift:6:30: error: cannot find 'NDIVISORS' in scope\n\
    \    let remainder = n % (Int(NDIVISORS) - 1)\n                             ^~~~~~~~~\n\
    /tmp/tmpe3vrf9bn.swift:7:33: error: cannot find 'NDIVISORS' in scope\n    return\
    \ Int((remainder % Int(NDIVISORS)) + 1)\n                                ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // Return largest divisor < n\n    // If n is 1, then 0 is\
    \ the largest divisor.\n    if n == 1 {\n        return 0\n    }\n    // If n\
    \ is even, return 1 + largest divisor < n\n    // If n is odd, return 1 + largest\
    \ divisor > n\n    // If n is even, return 1 + largest divisor < n\n    // If\
    \ n is odd, return 1 + largest divisor > n\n    // Example: n = 4\n    // Case\
    \ 1: n = 4 => 3\n    // Case 2: n = 3 => 1\n    // Case 3: n = 2 => 1\n    //\
    \ Case 4: n = 1 => 0\n    // Case 5: n = 5 => 1\n    // Case 6: n = 6 => 2\n \
    \   // Case 7: n = 7 => 2\n    // Case 8: n = 8 => 2\n    // Case 9: n = 9 =>\
    \ 3\n    // Case 10: n = 10 => 3\n    // Case 11: n = 11 => 3\n    // Case 12:\
    \ n = 12 => 3\n    // Case 13: n = 13 => 3\n    // Case 14: n = 14 => 3\n    //\
    \ Case 15: n = 15 => 5\n    var largest_divisor = 0\n    for divisor in stride(from:\
    \ n, through: 1, by: -1) {\n        if n % divisor == 0 {\n            if divisor\
    \ > largest_divisor {\n                largest_divisor = divisor\n           \
    \ }\n        } else {\n            break\n        }\n    }\n    return largest_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp9ftndqoa/tmp9ftndqoa.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b361b211c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b361af08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b361af08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b361af077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ftndqoa                        0x000055799f478475 <unavailable> + 5237

    5    libc.so.6                          0x00002b361b3fd460 __libc_start_main +
    245

    6    tmp9ftndqoa                        0x000055799f478129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var biggest = -1\n    for divisor in stride(from: n, to:\
    \ 1, by: 1) {\n        if n % divisor == 0 {\n            if biggest < 0 {\n \
    \               biggest = divisor\n            } else {\n                biggest\
    \ = max(biggest, divisor)\n            }\n        }\n    }\n    return biggest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp84cujt9s/tmp84cujt9s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58276f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58273ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58273ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58273eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84cujt9s                        0x0000562bb7ad14e5 <unavailable> + 5349

    5    libc.so.6                          0x00002b58278e1460 __libc_start_main +
    245

    6    tmp84cujt9s                        0x0000562bb7ad1199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor_with_limit(n: n, limit: 1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaitv2grl.swift:6:12: error: cannot find 'largest_divisor_with_limit'\
    \ in scope\n    return largest_divisor_with_limit(n: n, limit: 1)\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  return largestDivisor(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsz6voc3t.swift:6:10: error: cannot find 'largestDivisor' in scope\n\
    \  return largestDivisor(n)\n         ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n%2 == 0 {\n        return n\n    }\n\n    for i in 3...n\
    \ {\n        if n%i == 0 {\n            return i\n        }\n    }\n\n    return\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo4idf01b/tmpo4idf01b.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac0d6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac0d3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac0d3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac0d3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4idf01b                        0x0000564fd4d51335 <unavailable> + 4917

    5    libc.so.6                          0x00002aac0d8d5460 __libc_start_main +
    245

    6    tmpo4idf01b                        0x0000564fd4d50fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // write your code in Swift 4.2, but this should work fine\
    \ in Swift 4.1\n    if n < 2 {\n        return 0\n    }\n\n    func div(n: Int)\
    \ -> Int {\n        if n < 2 {\n            return 1\n        }\n\n        if\
    \ n % 2 == 0 {\n            return div(n / 2)\n        } else {\n            return\
    \ div(3 * n + 1) + (n - 1)\n        }\n    }\n\n    return div(n)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp1onocv_.swift:17:24: error: missing argument label 'n:' in call\n\
    \            return div(n / 2)\n                       ^\n                   \
    \    n: \n/tmp/tmpp1onocv_.swift:19:24: error: missing argument label 'n:' in\
    \ call\n            return div(3 * n + 1) + (n - 1)\n                       ^\n\
    \                       n: \n/tmp/tmpp1onocv_.swift:23:16: error: missing argument\
    \ label 'n:' in call\n    return div(n)\n               ^\n               n: \n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    if n%2==0 {\n  \
    \      return n\n    }\n\n    var max_divisor: Int = 0\n    var divisor_count\
    \ = 1\n    for divisor in 1...n {\n        if n%divisor==0 {\n            divisor_count++\n\
    \            if divisor_count > max_divisor {\n                max_divisor = divisor_count\n\
    \            }\n        }\n    }\n    return max_divisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpai7vlq_q.swift:17:26: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor_count++\n                        \
    \ ^~\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tlet mut max_divisor = 0\n\tfor divisor in 1..=n {\n\t\tif n\
    \ % divisor == 0 {\n\t\t\tif divisor > max_divisor {\n\t\t\t\tmax_divisor = divisor\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjiks9m6c.swift:6:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut max_divisor\
    \ = 0\n                ^\n/tmp/tmpjiks9m6c.swift:6:10: note: join the identifiers\
    \ together\n        let mut max_divisor = 0\n            ~~~~^~~~~~~~~~~\n   \
    \         mutmax_divisor\n/tmp/tmpjiks9m6c.swift:6:10: note: join the identifiers\
    \ together with camel-case\n        let mut max_divisor = 0\n            ~~~~^~~~~~~~~~~\n\
    \            mutMax_divisor\n/tmp/tmpjiks9m6c.swift:7:18: error: cannot find operator\
    \ '..=' in scope\n        for divisor in 1..=n {\n                        ^~~\n\
    /tmp/tmpjiks9m6c.swift:14:9: error: cannot find 'max_divisor' in scope\n     \
    \   return max_divisor\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978534
