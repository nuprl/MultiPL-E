name: HumanEval_121_solution
language: swift
prompt: "\n/// Given a non-empty array of integers, return the sum of all of the odd\
  \ elements that are in even positions.\n/// Examples\n/// >>> solution(lst: [5,\
  \ 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(lst:\
  \ [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
  \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
  \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
  \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
completions: ["    var sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n    \
    \        sum += i\n        }\n    }\n    return sum", "    if lst.isEmpty() {\n\
    \        return 0\n    }\n    var result = 0\n    var odd = 1\n    for i in lst\
    \ {\n        if i % 2 == 0 {\n            result += i\n            odd += 1\n\
    \        } else {\n            result -= i\n            if odd > 0 {\n       \
    \         odd -= 1\n            }\n        }\n    }\n    return result", "   \
    \ let sum = lst.reduce(0) { $0 + $1 }\n    return sum % 2 == 0 ? sum : 0", '    return
    lst.filter { $0 % 2 == 1 }.sum()', '    return solution(lst: lst, index: 0)',
  "    let evenSum = lst.filter { $0 % 2 == 0 }.filter { $0 % 2 != 0 }.reduce(0) {\
    \ $0 + $1 }\n    return evenSum", '    return lst.filter { $0 % 2 == 1 }.sum()
    + (lst.filter { $0 % 2 == 0 }.sum() * (lst.count { $0 == 0 }))', "    var odd:\
    \ Int = 0, even: Int = 0, result: Int = 0\n    for num in lst {\n        odd +=\
    \ num\n        if num % 2 == 0 {\n            even = even + num\n        }\n \
    \   }\n    result = odd - (even % odd)\n    return result", '    return lst.filter
    { $0 % 2 == 1 }.sum()', "    if lst.isEmpty {\n        return 0\n    }\n\n   \
    \ let evens = lst.filter{ $0 % 2 == 0 }\n    let odds = lst.filter{ $0 % 2 !=\
    \ 0 }\n\n    let sum = evens.reduce(0, +)\n    return sum + odds.reduce(0, +)",
  '    return lst.filter{ $0 % 2 == 1 }.map{ $0 + $0 * 2 }.reduce(0, +)', "    let\
    \ even = lst.filter { return $0 % 2 == 0 }\n    return even.reduce(0){$0 + $1}",
  "    var even = 0\n    var odd = 0\n    for num in lst {\n        odd += num % 2\n\
    \        even += num\n    }\n    if even > 0 {\n        odd = -odd\n    }\n  \
    \  return odd", "  guard lst.count > 0 else { return 0 }\n  var sum = 0\n  for\
    \ i in 0..<lst.count {\n    let j = lst.index(lst.startIndex, offsetBy: i + 1)\n\
    \    if lst[j % 2 == 0] != 0 { continue }\n    sum += lst[j]\n  }\n  return sum",
  "    guard lst.count > 0 else { return 0 }\n\n    var sum = 0\n\n    for index in\
    \ stride(from: 0, to: lst.count, by: 2) {\n        if index + 1 < lst.count {\n\
    \            if lst[index + 1] % 2 == 1 {\n                sum += lst[index]\n\
    \            }\n        } else {\n            if lst[index] % 2 == 1 {\n     \
    \           sum += lst[index]\n            }\n        }\n    }\n\n    return sum",
  '    return sum(lst: lst, condition: is_odd(index: 0), inbetween: 1)', "    var\
    \ evenSum = 0\n    for num in lst {\n        if num % 2 == 0 {\n            evenSum\
    \ += num\n        }\n    }\n    return evenSum", '    return lst.filter{ $1 %
    2 != 0 }.sum()', "    var sum = 0\n\n    for (_, element) in lst.enumerated()\
    \ {\n        if element % 2 == 0 {\n            sum += element\n        }\n  \
    \  }\n\n    return sum", "    func isEven(_ i: Int) -> Bool {\n        return\
    \ i % 2 == 0\n    }\n    guard lst.count > 0 else {\n        return 0\n    }\n\
    \    var sum = 0\n    for element in lst {\n        if isEven(element) && sum\
    \ != 0 {\n            sum += element\n        }\n    }\n    return sum", "   \
    \ var sum = 0\n    for index in 0..<lst.count {\n        if index%2 == 1 {\n \
    \           sum += lst[index]\n        }\n    }\n    return sum", "    let evens\
    \ = lst.filter{ $0 % 2 == 0 }\n    return evens.reduce(0) { $0 + $1 }", "    var\
    \ sum = 0\n    for i in 0..<lst.count {\n        if i % 2 == 0 {\n           \
    \ sum += lst[i]\n        }\n    }\n    return sum", "    var total = 0\n    for\
    \ i in lst {\n        total += Int(i)%2 != 0 ? Int(i) : 0\n    }\n    return total",
  "    if lst.count == 0 { return 0 }\n    if lst.count == 1 { return lst[0] }\n \
    \   var total = 0\n    var odd = 0\n    for i in lst {\n        if i % 2 != 0\
    \ {\n            total += i\n        } else {\n            odd += i\n        }\n\
    \    }\n    return odd + (total - odd)", "    var sum = 0\n    for ix in (0...lst.count).filter({\
    \ lst.index(of: $0) > ix }) {\n        if ix % 2 == 0 {\n            sum += lst[ix]\n\
    \        }\n    }\n    return sum", "    let evens = lst.filter{$0 % 2 == 0}\n\
    \    let odds = lst.filter{$0 % 2 != 0}\n\n    return evens.reduce(0, {$0 + $1})",
  "    var sum = 0\n    for &i in lst {\n        if i % 2 == 0 {\n            sum\
    \ += i\n        }\n    }\n    return sum", '    return lst.reduce(0)', "    var\
    \ sum = 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x\n\
    \        }\n    }\n    return sum", '    return arrSum(lst: lst, fn: isOdd)',
  "    var sum = 0\n    for i in 0..<lst.count {\n        if lst[i] % 2 == 0 {\n \
    \           sum += lst[i]\n        }\n    }\n    return sum", "    var sum: Int\
    \ = 0\n    for number in lst {\n        if number % 2 == 0 {\n            sum\
    \ += number\n        }\n    }\n    return sum", "    let result = lst.filter{$0\
    \ % 2 == 0}.sum\n    return result", "    var sum = 0\n    for number in lst {\n\
    \        sum += Int(number) * Int(Int(number) % 2 == 1)\n    }\n    return sum",
  '    return lst.filter { $0 % 2 == 1 }.sum()', "    var total = 0\n    for n in\
    \ lst {\n        if n % 2 == 0 {\n            total += n\n        }\n    }\n \
    \   return total", '    return lst.filter({ $0 % 2 == 1}).reduce(0)', "    var\
    \ sum = 0\n    for i in lst {\n        sum += i%2 == 0 ? i : -1\n    }\n    return\
    \ sum == -1 ? 0 : sum", "    let evenSum = 0\n    for val in lst {\n        if\
    \ val%2 == 0 {\n            evenSum += val\n        }\n    }\n    return evenSum",
  "    if lst.sorted() == lst {\n        return 0\n    }\n\n    var even = 0\n   \
    \ var odd = 0\n    var sum = 0\n\n    for index in lst.indices() {\n        if\
    \ index % 2 == 0 {\n            even += lst[index]\n        } else {\n       \
    \     odd += lst[index]\n        }\n    }\n\n    sum = even + odd\n\n    if sum\
    \ < 0 {\n        sum *= -1\n    }\n\n    return sum", "  var sum = 0\n  for i\
    \ in 0..<lst.count {\n    if i % 2 != 0 {\n      sum += lst[i]\n    }\n  }\n \
    \ return sum", "    var total = 0\n    for i in lst {\n        if i % 2 == 1 {\n\
    \            total += i\n        }\n    }\n    return total", "    guard lst.count\
    \ > 0 else {\n        return 0\n    }\n    var odds = (0..<lst.count).filter {\
    \ lst[$0] % 2 != 0 }\n    if odds.count == lst.count {\n        return odds.reduce(0)\n\
    \    }\n    var sum = 0\n    var pos = 0\n    for index in odds {\n        sum\
    \ = sum + lst[pos]\n        pos = index + 1\n    }\n    return sum", "    var\
    \ evenSum = 0\n    var oddSum = 0\n    var result = 0\n    var i = 0\n    for\
    \ e in lst {\n        if i % 2 == 0 {\n            evenSum += e\n        } else\
    \ {\n            oddSum += e\n        }\n        i += 1\n    }\n    result = oddSum\
    \ - evenSum\n    return result", "    var sum = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum", '    return lst.filter { $0 % 2 != 0 }.sum()', "    let evenSum\
    \ = lst.reduce(0, {$0 + ($1 & 1)})\n    \n    return evenSum", '    return lst.filter
    { $0 % 2 == 1 }.sum()', "    var evenSum = 0\n    for element in lst {\n     \
    \   if element % 2 == 0 {\n            evenSum += element\n        }\n    }\n\
    \    return evenSum", '    return lst.filter { $0 % 2 == 0 }.reduce { $0 + $1
    }', "    return lst.reduce(0, { ($0, $1) in\n        guard $0 % 2 == 0 else {\
    \ return $0 + $1 }\n        return $0\n    })", "    var oddSum = 0\n    var evenSum\
    \ = 0\n    var evenIndex = 0\n    for el in lst {\n        if el % 2 == 1 {\n\
    \            evenSum += el\n        } else {\n            oddSum += el\n     \
    \       evenIndex += 1\n            if evenIndex == lst.count {\n            \
    \    evenSum -= lst[evenIndex-1]\n            }\n        }\n    }\n    return\
    \ oddSum", "    var sum = 0\n    for el in lst {\n        if el % 2 == 0 {\n \
    \           sum += el\n        }\n    }\n    return sum", "    var res = 0\n \
    \   for index1 in 0..<lst.count {\n        for index2 in index1..<lst.count {\n\
    \            if index1 % 2 == 0 && index2 % 2 == 1 {\n                res += lst[index2]\n\
    \            }\n        }\n    }\n    return res", "    var oddSum = 0\n    for\
    \ i in lst {\n        if i % 2 == 1 {\n            oddSum += i\n        }\n  \
    \  }\n    return oddSum", '    return lst.reduce(0, {$0 + $1 % 2 == 1})', "  \
    \  var sum = 0\n    for i in lst {\n        sum += i\n        if i % 2 == 0 {\n\
    \            sum += i\n        }\n    }\n    return sum", "    if lst.contains(0)\
    \ {\n        return 0\n    }\n    var sum = 0\n    for val in lst {\n        if\
    \ val % 2 == 0 {\n            sum += val\n        }\n    }\n    return sum", " \
    \   var total = 0\n    for index in lst {\n        if index % 2 != 0 {\n     \
    \       total += index\n        }\n    }\n    return total", "  if lst.count <=\
    \ 0 {\n    return 0\n  }\n  \n  var sum = 0\n  for index in 0..<lst.count {\n\
    \    let value = lst[index]\n    if value % 2 == 0 {\n      sum += value\n   \
    \ }\n  }\n  return sum", "    var evenSum = 0\n    for i in  lst {\n        if\
    \ i%2 == 0 {\n            evenSum += i\n        }\n    }\n    return evenSum",
  "    var sum = 0\n    for i in lst {\n        if i % 2 != 0 {\n            sum +=\
    \ i\n        }\n    }\n    return sum", "    // Create a set to keep track of\
    \ odd/even indices, and add the even indices.\n    var even = Set<Int>()\n   \
    \ for index in 0..<lst.count {\n        even.insert(index) if (index % 2 == 0)\n\
    \    }\n    // Get the sum of those odd indices.\n    return lst.filter { index\
    \ -> Bool in\n        even.contains(index) && index % 2 == 1\n    }.reduce(0,+)",
  '    return lst.filter { $0 % 2 == 0 }.sum()', "    var sum = 0\n    for i in lst\
    \ {\n        if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return\
    \ sum", "    return sum(\n        arr[start ..< end]\n            .filter { $0\
    \ % 2 == 1 }\n            .map { $0 + arr[start + $0] }\n    )", '    return lst.filter
    { $1 % 2 == 1 }.sum()', "    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 0 {\n            sum += i\n        }\n    }\n    return sum", '    return
    sum(lst) % 2 == 0 ? 0 : lst[find(lst) % 2 == 0 ? 0 : find(lst) // 2] - lst[find(lst)
    % 2 == 0 ? 1 : find(lst) // 2]', '  return odd_even_rec(lst, 0)', "    var sum\
    \ = 0\n    for i in 0..<lst.count {\n        if ((lst.indices.contains(i) & Int(lst[i]))\
    \ % 2 == 0) {\n            sum += lst[i]\n        }\n    }\n    return sum", " \
    \   var result = 0\n    for element in lst {\n        if element % 2 == 0 {\n\
    \            result += element\n        }\n    }\n    return result", "    //\
    \ write your code in Swift 4.2 or later\n    return lst.filter{$0%2 == 0}.reduce(0,\
    \ +) ", "    var odd = 0\n    for val in lst {\n        if val % 2 == 1 {\n  \
    \          odd += val\n        }\n    }\n    return odd", "    var sum = 0\n \
    \   for i in lst {\n        if i%2 == 0 {\n            sum += i\n        }\n \
    \   }\n    return sum", '    return lst.filter{ $0 % 2 == 1 }.reduce(0, +)', " \
    \   // Base case\n    if lst.contains(0) {\n        return 0\n    }\n\n    //\
    \ Sum all even numbers\n    var evenSum = 0\n    for element in lst {\n      \
    \  if element % 2 == 0 {\n            evenSum += element\n        }\n    }\n\n\
    \    // Sum the odd numbers in the remaining array\n    var oddSum = 0\n    for\
    \ element in lst[1...] {\n        if element % 2 != 0 {\n            oddSum +=\
    \ element\n        }\n    }\n\n    // Combine them\n    return evenSum + oddSum",
  '    return lst.filter({ $0 % 2 == 1 }).reduce(0) { $0 + $1 }', "    \n    var sum\
    \ = 0\n    \n    for i in 0..<lst.count {\n        if lst[i] % 2 != 0 && lst[i]\
    \ > 0 {\n            sum += lst[i]\n        }\n    }\n    \n    return sum", " \
    \ if lst.isEmpty {\n    return 0\n  }\n  return lst.filter { $0 % 2 == 1 }.sum()\
    \ + (lst.filter { $0 % 2 == 0 }.sum())", "  var sum = 0\n  for (ix, x) in lst.enumerated()\
    \ {\n    if x % 2 == 0 {\n      sum += x\n    }\n  }\n  return sum", "    let\
    \ evens = lst.filter{ $0 % 2 == 0 }\n    return evens.reduce(0,+)", "    var sum\
    \ = 0\n    for i in 0..<lst.count {\n        if i % 2 == 0 {\n            sum\
    \ += lst[i]\n        }\n    }\n    return sum", "    var result = 0\n    if lst.count\
    \ > 0 {\n        var i = lst.firstIndex{$0 % 2 != 0}\n        while i != nil {\n\
    \            result += lst[i]\n            i = lst.firstIndex{$0 % 2 != 0}\n \
    \       }\n    }\n    return result", "    if lst.count == 0 {\n        return\
    \ 0\n    }\n    var evenSum = 0\n    for element in lst {\n        if element\
    \ % 2 == 0 {\n            evenSum += element\n        }\n    }\n    return evenSum",
  '    return odd(lst).reduce(0)', "    \n    var sum = 0\n    \n    for i in 0 ..<\
    \ lst.count {\n        if ((i & 1) == 0) {\n            sum += lst[i]\n      \
    \  }\n    }\n    \n    return sum", "    return lst\n        .filter { $0 % 2\
    \ == 1 }\n        .filter{ $0 % 2 != 0 }\n        .reduce(0, +)", "    var sum:\
    \ Int = 0\n    for index in lst {\n        if index % 2 == 0 {\n            sum\
    \ += index\n        }\n    }\n    return sum", "    return lst.filter { lst ->\
    \ Bool in\n        return lst % 2 == 1\n    }.map { lst -> Int in\n        return\
    \ lst / 2\n    }.sum", "    var sum = 0\n    \n    for val in lst {\n        if\
    \ val % 2 == 0 {\n            sum += val\n        }\n    }\n    \n    return sum",
  "    return lst.filter({ (value) -> Bool in\n        value % 2 != 0\n    }).reduce(0)\
    \ { (sum, value) -> Int in\n        sum + value\n    }", "    if lst.count ==\
    \ 0 {\n        return 0\n    }\n    var sumOdd = lst[0]\n    for number in lst\
    \ {\n        if number % 2 == 0 {\n            sumOdd += number\n        }\n \
    \   }\n    return sumOdd", "    var sum = 0\n    for i in lst {\n        if i\
    \ % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum", "    \n\
    \    let startIndex: Int = lst.startIndex\n    \n    var oddSum = 0\n    \n  \
    \  for index in 0..<lst.count {\n        \n        if index % 2 != 0 {\n     \
    \       oddSum += lst[index]\n        }\n    }\n    \n    return oddSum - lst.filter{$0\
    \ % 2 == 0}.prefix(startIndex).reduce(0, +)", "    var sum = 0\n    for i in lst\
    \ {\n        sum += lst[i % 2 == 0]\n    }\n    return sum", "    var sum = 0\n\
    \    for element in lst {\n        if element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum", "    var evenIndexes: [Int] = []\n    var\
    \ oddIndexes: [Int] = []\n    \n    for i in 0..<lst.count {\n        if i % 2\
    \ == 0 {\n            evenIndexes.append(i)\n        } else {\n            oddIndexes.append(i)\n\
    \        }\n    }\n    \n    \n    return evenIndexes.reduce(0, +) + oddIndexes.reduce(0,\
    \ +)", '    return lst.filter { $0 % 2 == 1 }.sum()', "    let len = lst.count\n\
    \    if len == 0 {\n        return 0\n    }\n    let even = lst[0 ..< len/2].filter\
    \ { $0 % 2 == 0 }\n    let odd = lst[0 ..< len/2].filter { $0 % 2 != 0 }\n   \
    \ let sum = even.map() + odd\n    return sum.fold(0, +)", '    return lst.filter
    { $0 % 2 == 1 }.sum()', "    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum", "   \
    \ var sum = 0\n    for i in lst {\n        if i % 2 != 0 {\n            sum +=\
    \ i\n        }\n    }\n    return sum", '  return lst.filter{ $0 % 2 == 0 }.sum',
  "    var sum: Int = 0\n    for number in lst {\n        if number % 2 == 1 {\n \
    \           sum += number\n        }\n    }\n    return sum", "    let evenIndexes:\
    \ Set<Int> = lst.indices.filter{$0 % 2 == 0}\n    let sum = evenIndexes.reduce(0,\
    \ { (res, i) -> Int in\n        return res + lst[i]\n    })\n    return sum",
  "    if lst.sorted() == lst {\n        return lst[0]\n    }\n    var sum = lst[0]\n\
    \    for val in lst {\n        if val & 1 == 1 {\n            sum += val\n   \
    \     }\n    }\n    return sum", "    var sum = 0\n    var count = 2\n    for\
    \ i in lst {\n        if count % 2 == 0 {\n            sum += i\n        }\n \
    \       count += 1\n    }\n    return sum", "    var sum = 0\n    for val in lst\
    \ {\n        if val % 2 == 1 {\n            sum += val\n        }\n    }\n   \
    \ return sum", "    var total = 0\n    var evenSum = 0\n    for i in lst {\n \
    \       if i % 2 == 0 {\n            evenSum += i\n        } else {\n        \
    \    total += evenSum\n            evenSum = 0\n        }\n    }\n    return total\
    \ + evenSum", '    return sumOdd(lst, 0)', "    \n    var sum = 0\n    for i in\
    \ 0..<lst.count {\n        if lst[i % 2] != 0 { sum += lst[i % 2] }\n    }\n \
    \   return sum", "    var sum = 0\n    for idx, i in enumerate(lst) {\n      \
    \  if idx % 2 == 0 {\n            if i >= 0 {\n                sum += i\n    \
    \        }\n        }\n    }\n    return sum", "    if lst.count == 0 {\n    \
    \    return 0\n    }\n    var total = 0\n    for i in 0..<lst.count {\n      \
    \  if i % 2 == 1 {\n            total += lst[i]\n        }\n    }\n    return\
    \ total", '    return lst.filter{ $0 % 2 == 0 }.sum()', "    var evenSum = 0\n\
    \    var i = 0\n    \n    while i < lst.count {\n        if i % 2 == 0 {\n   \
    \         evenSum += lst[i]\n        }\n        i += 2\n    }\n    return evenSum",
  "    var res = Int()\n    for i in 0..<lst.count {\n        if lst[i] % 2 == 0 {\n\
    \            s += lst[i]\n        }\n        if lst[i] % 2 == 1 {\n          \
    \  res += lst[i]\n        }\n    }\n    return res", "    return lst.reduce(0){\
    \ (sum, item) in\n        if item % 2 == 1 {\n            sum += item\n      \
    \  }\n        return sum\n    }", "    var evenSum = 0\n\n    for element in lst\
    \ {\n        if element % 2 == 0 {\n            evenSum += element\n        }\n\
    \    }\n    return evenSum", "    let odd = (0..<lst.count).filter({ $0 % 2 ==\
    \ 1 }).map { $0 }\n    let even = lst.filter { $0 % 2 == 0 }\n    return even.fold(0,\
    \ { $0 + $1 })", "  if lst.count < 2 {\n    return 0\n  }\n  var sum = lst[0]\n\
    \  for i = 1; i < lst.count; i++ {\n    if lst[i] % 2 == 0 {\n      sum += lst[i]\n\
    \    }\n  }\n  return sum", "    var evenSum = 0\n    for num in lst {\n     \
    \   if num % 2 == 0 {\n            evenSum += num\n        }\n    }\n    return\
    \ evenSum", '    return odd(lst, 0)', "    var sum = 0\n    for i in lst {\n \
    \       if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum",
  "    var sum = 0\n    for i in 0..<lst.count {\n        sum += lst[i % lst.count]\n\
    \    }\n    return sum", "    // TODO: Write your code here.\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 0 {\n            sum += x\n        }\n    }\n    return sum",
  '    return lst.filter { $0&1 != 0 }.reduce(0, +)', "    // If there are at least\
    \ 2 items in the list, there is an odd sum.\n    if lst.count >= 2 {\n       \
    \ return lst[0] + lst[1] + lst[1]\n    }\n\n    // Otherwise we must sum the even\
    \ sums.\n    var total = 0\n    for e in lst {\n        total += e\n        if\
    \ e % 2 == 0 {\n            return total\n        }\n    }\n    return total",
  '    return lst.filter{ $0 % 2 == 1 }.sum() % 1000000007', '    return lst.filter
    { $0 % 2 != 0 }.sum()', '    return lst[lst.reduce(0, {$0 + ($1&1)*2})]', "  \
    \  var oddSum = 0\n    for i in  lst {\n        if i % 2 != 0 {\n            oddSum\
    \ += i\n        }\n    }\n    return oddSum", "    var sum = 0\n    var even_count\
    \ = 0\n    var odd_count = 0\n\n    for elt in lst {\n        if elt % 2 == 0\
    \ {\n            even_count += 1\n        } else {\n            sum += elt\n \
    \           odd_count += 1\n        }\n    }\n\n    // handle odd numbers\n  \
    \  if odd_count > 0 {\n        sum += lst[odd_count - 1]\n    }\n\n    return\
    \ sum", "    func sumOddsEvens(_ list: [Int]) -> [Int] {\n        if list.isEmpty\
    \ {\n            return []\n        }\n        var evenSum = 0\n        var oddSum\
    \ = 0\n        var currentIndex = 0\n        for index in 0 ..< list.count {\n\
    \            if index % 2 == 0 {\n                evenSum += list[index]\n   \
    \         } else {\n                oddSum += list[index]\n            }\n   \
    \         currentIndex += 1\n            if currentIndex < list.count {\n    \
    \            evenSum += list[currentIndex]\n                oddSum += list[currentIndex]\n\
    \            }\n        }\n        return [oddSum, evenSum]\n    }\n    return\
    \ sumOddsEvens(lst).0", '  return lst.filter{$0&1!=0}.sum', "  var result: Int\
    \ = 0\n  var sum: Int = 0\n  for element in lst {\n    if element % 2 == 0 {\n\
    \      sum += element\n    }\n  }\n  for element in lst {\n    if element % 2\
    \ != 0 && element != sum {\n      result += element\n    }\n  }\n  return result",
  "    guard lst.count > 0 else { return 0 }\n    return lst.filter {\n        guard\
    \ $0 % 2 != 0 else { return false }\n        return true\n    }.sum", "    \n\
    \    let sum = lst.reduce(0) { (sum, num) -> Int in\n        if num % 2 == 1 {\
    \ sum += num }\n        return sum\n    }\n    \n    if sum % 2 == 1 { \n    \
    \    return sum\n    } else {\n        return 0\n    }", '    return lst.reduce(0,
    {$0 + ($1 % 2 == 0 ? $1 : 0)})', "    // base case: if the array is empty, return\
    \ the zero\n    if lst.count == 0 {\n        return 0\n    }\n\n    // base case:\
    \ if the array is even, return zero\n    if lst.count % 2 == 0 {\n        return\
    \ 0\n    }\n\n    // base case: if the array is odd, return the sum of the first\
    \ and last elements\n    return lst[0] + lst[lst.count-1]", "    let sum = lst.reduce(0){\
    \ (accum, num) in\n        accum + Int(num) % 2 == 0 ? num : 0\n    }\n    return\
    \ sum", '  return lst.reduce(0) { $0 + ($1 % 2 == 0 ? $1 : 0) }', "    var sum\
    \ = 0\n    for num in lst {\n        sum += num % 2 != 0 ? num : 0\n    }\n  \
    \  return sum", "  var oddSum = 0\n  var sum = 0\n  for item in lst {\n    if\
    \ item % 2 == 0 {\n      sum += item\n    } else {\n      oddSum += item\n   \
    \ }\n  }\n  if oddSum > 0 {\n    return oddSum\n  }\n  return sum", "  guard lst.count\
    \ > 0 else { return 0 }\n  var res = lst[0]\n  for el in lst[1..] {\n    if el\
    \ % 2 == 0 {\n      res += el\n    }\n  }\n  return res", "    if lst.count ==\
    \ 0 {\n        return 0;\n    }\n    var sum = 0\n    for index in 0..<lst.count\
    \ {\n        if index % 2 == 0 {\n            sum += lst[index]\n        }\n \
    \   }\n    return sum", "  if lst.filter({ $0 % 2 == 1 }).count == lst.count {\n\
    \    return 0\n  }\n  return lst.filter { $0 % 2 == 1 }.map({ $0 + $0 }).reduce(0)\
    \ { $0 + $1 }", "    var evenSum = 0\n    for number in lst {\n        evenSum\
    \ = evenSum + number\n    }\n    var oddSum = 0\n    for number in lst {\n   \
    \     if number % 2 == 0 {\n            oddSum = oddSum + number\n        }\n\
    \    }\n    if evenSum == oddSum {\n        return 0\n    }\n    return evenSum\
    \ + oddSum", "    return lst.filter {\n        $0 % 2 == 1\n    }.reduce(0) {\
    \ $0 + $1 }", "  var sum = 0\n  lst.forEach { n in\n    sum += n % 2 == 1 ? n\
    \ : sum\n  }\n  return sum", "  var oddSum = 0\n  for num in lst {\n    if num\
    \ % 2 == 1 {\n      oddSum += num\n    }\n  }\n  return oddSum", "    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 2 == 1 {\n       \
    \     sum += lst[index]\n        }\n    }\n    return sum", "    var sum = 0\n\
    \    var pos = 0\n\n    for x in lst {\n        sum += x\n        if x % 2 ==\
    \ 1 {\n            pos += 1\n        }\n    }\n\n    return pos == 0 ? sum : sum\
    \ - lst[pos - 1]", '  return sumOdd(lst, startIndex: 0)', '    return lst.filter
    { $0 % 2 == 1 }.sum() % 10', "    var sum = 0\n    var evenCount = 0\n    for\
    \ i in lst {\n        if i % 2 != 0 {\n            sum += i\n            evenCount\
    \ += 1\n        } else {\n            sum += i * 2\n            evenCount -= 1\n\
    \        }\n    }\n    if evenCount == 0 {\n        return 0\n    }\n    return\
    \ sum", "    var sum = 0\n    for idx in lst.indices {\n        if idx % 2 ==\
    \ 0 {\n            sum += lst[idx]\n        }\n    }\n    return sum", '    return
    lst.filter { $0 % 2 != 0 }.map { $0 + $1 }.reduce(0, +)', '    return lst.filter
    { $0 % 2 == 1 }.fold()', "    var even = 0\n    var odd = 0\n    for num in lst\
    \ {\n        if num % 2 == 0 {\n            even += num\n        } else {\n  \
    \          odd += num\n        }\n    }\n    return even * 2 + odd", "    var\
    \ sum = 0\n    for v in lst {\n        if v % 2 == 0 {\n            sum += v\n\
    \        }\n    }\n    return sum", "    guard lst.count > 0 else { return 0 }\n\
    \    \n    var sum = 0\n    for i in 0..<lst.count {\n        if i%2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum", "    \n    if lst.contains(0)\
    \ {\n        return 0\n    }\n    \n    var totalSum = 0\n    \n    for i in 0..<lst.count\
    \ {\n        if lst[i] % 2 == 1 {\n            totalSum += lst[i]\n        }\n\
    \    }\n    \n    return totalSum", "    var res = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] % 2 != 0 {\n            res += lst[i]\n        }\n    }\n\
    \    return res", "    var evenSum = 0\n    for value in lst {\n        if value\
    \ % 2 == 0 {\n            evenSum += value\n        }\n    }\n    return evenSum",
  "    var sum: Int = 0\n    var evenPos: Int = 0\n    \n    for el in lst {\n   \
    \     \n        if ((el % 2) == 0) {\n            sum += el\n            evenPos\
    \ = el\n        }\n    }\n    \n    return sum - evenPos", "    if lst.isEmpty()\
    \ {\n        return 0\n    }\n    var sum = 0\n    var even = lst.filter{ $0 %\
    \ 2 == 0 }\n    sum += even.first!\n    for e in even {\n        sum += e\n  \
    \  }\n    return sum", "    let evens = lst.filter{$0&1 == 0}\n    let odds =\
    \ lst.filter{$0&1 == 1}\n    return odds.reduce(0, {$0 + $1})", "    if lst.count\
    \ == 0 { return 0 }\n    var evenSum = 0\n    var oddSum = 0\n    for i in 0 ..<\
    \ lst.count {\n        if i & 1 == 1 {\n            oddSum += lst[i]\n       \
    \ } else {\n            evenSum += lst[i]\n        }\n    }\n    return evenSum\
    \ + oddSum", "    let evenCount = lst.filter { $0 % 2 == 0 }.count\n    let evenSum\
    \ = lst.filter { $0 % 2 == 0 }.map { $0 + 1 }.sum\n    \n    return (evenCount\
    \ + evenSum) % 10", "    var total = 0\n    for number in lst {\n        if number\
    \ % 2 == 0 {\n            total += number\n        }\n    }\n    return total",
  "    var evenSum = 0\n    for e in lst{\n        if e % 2 == 0{\n            evenSum\
    \ = evenSum + e\n        }\n    }\n    return evenSum", "    let evens = lst.filter({\
    \ $0 % 2 == 0 })\n    let odds  = lst.filter({ $0 % 2 != 0 })\n    return evens.reduce(0,\
    \ combine: +)\n        + odds.reduce(0, combine: +)", "    var sum = 0\n    for\
    \ i in lst {\n        if i % 2 == 1 {\n            sum += i\n        }\n    }\n\
    \    return sum", "    var oddSum = 0\n    for val in lst {\n        if val %\
    \ 2 == 0 {\n            oddSum += val\n        }\n    }\n    return oddSum", " \
    \   var result = lst[0]\n    for i in lst {\n        if i % 2 != 0 {\n       \
    \     result += i\n        }\n    }\n    return result", "    guard lst.isEmpty\
    \ == false else {\n        return 0\n    }\n\n    var sum = 0\n    for i in 0\
    \ ..< lst.count {\n        if i % 2 != 0 {\n            sum += lst[i]\n      \
    \  }\n    }\n\n    return sum", "    if lst.contains(0) {\n        return 0\n\
    \    }\n\n    func isOdd(i: Int) -> Bool {\n        return i % 2 != 0\n    }\n\
    \n    var sum = 0\n    var totalEven = 0\n\n    for x in lst.reverse() {\n   \
    \     if isOdd(x) {\n            sum += x\n            totalEven += x\n      \
    \  }\n    }\n\n    return sum - totalEven", "    var sum = 0\n    for index in\
    \ 0...lst.count - 1 {\n        if index % 2 == 0 && lst[index] != lst[index +\
    \ 1] {\n            sum += lst[index]\n        }\n    }\n    return sum", "  \
    \  // Write your code here.\n    if lst.count == 0 {\n        return 0\n    }\n\
    \n    var odd, even = 0, sum = 0\n    for x in lst {\n        if x % 2 == 1 {\n\
    \            even++\n        } else {\n            odd += 1\n            sum +=\
    \ x\n        }\n    }\n    if even > 0 {\n        return sum / 2\n    }\n    return\
    \ sum", "    guard lst.count >= 1 else {\n        return 0\n    }\n\n    var evenSum\
    \ = 0\n    for element in lst {\n        if element % 2 == 0 {\n            evenSum\
    \ += element\n        }\n    }\n    return evenSum", "    var sum = 0\n    for\
    \ index in 0..<lst.count {\n        if index % 2 == 0 {\n            sum += lst[index]\n\
    \        }\n    }\n    return sum", '    return lst.reduce(0) { $0 + $1 % 2 }',
  "    var sum: Int = 0\n    for element in lst {\n        if element % 2 == 0 {\n\
    \            sum += element\n        }\n    }\n    return sum", "    var sum =\
    \ 0\n    for ii in 0..<lst.count {\n        if lst[ii] % 2 == 0 {\n          \
    \  sum += lst[ii]\n        }\n    }\n    return sum", "    return lst.filter({\
    \ (number: Int) -> Bool in\n        return number % 2 == 1\n    }).reduce(0, +)",
  '    return lst.filter { $0 % 2 == 1 }.sum()', "    var result = lst[0]\n    for\
    \ i in lst {\n        if i % 2 == 0 {\n            result += i\n        }\n  \
    \  }\n    return result", "    return lst\n        .filter { $0 % 2 == 1 }\n \
    \       .map { $0 + $0 }\n        .sum()", "    guard lst.count > 0 else { return\
    \ 0 }\n\n    var total = 0\n    for i in 0 ..< lst.count {\n        if i % 2 ==\
    \ 0 {\n            total += lst[i]\n        }\n    }\n    return total", "   \
    \ var evenSum = 0\n    var oddSum = 0\n\n    for v in lst {\n        oddSum +=\
    \ v\n    }\n\n    for v in lst {\n        if v % 2 == 0 {\n            evenSum\
    \ += v\n        }\n    }\n\n    return evenSum + oddSum", "    if lst.count ==\
    \ 0 {\n        return 0\n    }\n\n    var sum = 0\n\n    for i in 0..<lst.count\
    \ {\n        if i % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n\n\
    \    return sum", "    var sum = 0\n    for value in lst {\n        if value ==\
    \ 2 { sum += value }\n        else if value % 2 == 0 { sum += value }\n      \
    \  else { continue }\n    }\n    return sum", "    var sum = 0\n\n    for var\
    \ i = 0; i < lst.count; i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n\n    return sum", '    return lst.filter { $0 % 2 == 0 }.sum()',
  "    var sum = 0\n    \n    for (_, value) in lst.enumerated() {\n        if value\
    \ % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum", " \
    \   let evenPos = lst.filter { $0 % 2 == 0 }\n    let oddPos = lst.filter { $0\
    \ % 2 == 1 }\n\n    var sum = 0\n    for pos in evenPos {\n        sum += pos\n\
    \    }\n\n    for pos in oddPos {\n        sum += 2 * pos\n    }\n\n    return\
    \ sum", "    var sum = 0\n\n    for i in lst {\n        if i % 2 != 0 {\n    \
    \        sum += i\n        }\n    }\n\n    return sum", "    \n    var sum = 0\n\
    \    for i in lst {\n        if i % 2 == 0 {\n            sum += i\n        }\n\
    \    }\n    return sum"]
stop_tokens:
- "\n}"
