language: swift
name: HumanEval_152_compare
results:
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for guess in guess {\n        let diff\
    \ = abs(guess - game.count)\n        result.append(diff)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp0k1tceg5/tmp0k1tceg5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98b2447c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98b213eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98b213e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98b213d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0k1tceg5                        0x000055a3da572764 <unavailable> + 5988

    5    libc.so.6                          0x00002b98b2633460 __libc_start_main +
    245

    6    tmp0k1tceg5                        0x000055a3da5722d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var score = 0\n    for i in 0..<guess.length {\n        if guess[i]\
    \ == game[i] {\n            score += 1\n        } else {\n            if guess[i]\
    \ != game[i] {\n                score += abs(guess[i] - game[i])\n           \
    \ }\n        }\n    }\n    return score\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8_s650oq.swift:16:24: error: value of type '[Int]' has no member\
    \ 'length'\n    for i in 0..<guess.length {\n                 ~~~~~ ^~~~~~\n/tmp/tmp8_s650oq.swift:25:12:\
    \ error: cannot convert return expression of type 'Int' to return type '[Int]'\n\
    \    return score\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var i = 0\n    var j = 0\n    var k = game.length\n    var temp\
    \ = 0\n    var score = 0\n    while i < k {\n        if guess[i] == game[j] {\n\
    \            score += 1\n            i += 1\n            j += 1\n        } else\
    \ {\n            temp = guess[i]\n            guess[i] = guess[j]\n          \
    \  guess[j] = temp\n            if j == k {\n                break\n         \
    \   }\n            i += 1\n            j += 1\n            k -= 1\n        }\n\
    \    }\n    var newScore = [Int]()\n    var correct = 0\n    for k in guess {\n\
    \        if k == 0 {\n            correct += 1\n        } else {\n           \
    \ newScore.append(abs(k - score))\n        }\n    }\n    return newScore\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpnl2snvo5.swift:17:18: error: value of type '[Int]' has no member\
    \ 'length'\n    var k = game.length\n            ~~~~ ^~~~~~\n/tmp/tmpnl2snvo5.swift:27:18:\
    \ error: cannot assign through subscript: 'guess' is a 'let' constant\n      \
    \      guess[i] = guess[j]\n            ~~~~~^\n/tmp/tmpnl2snvo5.swift:28:18:\
    \ error: cannot assign through subscript: 'guess' is a 'let' constant\n      \
    \      guess[j] = temp\n            ~~~~~^\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return Array(zip(game, guess).map { abs($0 - $1) })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    for j in 0..<game.count {\n        var\
    \ score = 0\n        for _ in 0..<guess.count {\n            if game[j] == guess[_]\
    \ {\n                score += 1\n            }\n        }\n        if score ==\
    \ guess.count {\n            result.append(0)\n        } else {\n            result.append(abs(game[j]\
    \ - guess[guess.index(guess, offsetBy: j)]))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmprgnbaaai.swift:19:33: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n            if game[j] == guess[_] {\n  \
    \                              ^\n/tmp/tmprgnbaaai.swift:26:59: error: cannot\
    \ convert value of type '[Int]' to expected argument type 'Int'\n            result.append(abs(game[j]\
    \ - guess[guess.index(guess, offsetBy: j)]))\n                               \
    \                           ^\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var best = [Int]()\n    \n    var bestDifference = [Int]()\n  \
    \  \n    for index in 0..<guess.length {\n        var difference = guess[index]\
    \ - game[index]\n        \n        if bestDifference.count <= 0 {\n          \
    \  bestDifference.insert(difference, at: index)\n        } else {\n          \
    \  if difference < bestDifference[-1] {\n                bestDifference.insert(difference,\
    \ at: index)\n            } else {\n                bestDifference.removeLast()\n\
    \            }\n        }\n        \n        if bestDifference.count == best.length\
    \ {\n            best.insert(difference, at: index)\n        }\n    }\n    \n\
    \    return best\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9ckxqv1r.swift:19:28: error: value of type '[Int]' has no member\
    \ 'length'\n    for index in 0..<guess.length {\n                     ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    var gameCount = 0\n    var guessCount = 0\n    \n    var\
    \ correctGuessCount = 0\n    var correctGuessArray = [Int]()\n    \n    var wrongGuessCount\
    \ = 0\n    var wrongGuessArray = [Int]()\n    \n    while gameCount < game.count\
    \ {\n        gameCount += 1\n        if guess[guessCount] == game[gameCount] {\n\
    \            guessCount += 1\n            if guessCount == guess.count {\n   \
    \             correctGuessCount += 1\n                correctGuessArray.append(0)\n\
    \            } else {\n                correctGuessArray.append(0)\n         \
    \   }\n        } else {\n            if gameCount < game.count {\n           \
    \     wrongGuessCount += 1\n                wrongGuessArray.append(gameCount -\
    \ game.count)\n            } else {\n                wrongGuessCount += 1\n  \
    \              wrongGuessArray.append(gameCount - game.count)\n            }\n\
    \        }\n    }\n    \n    if correctGuessCount == game.count {\n        return\
    \ correctGuessArray\n    }\n    \n    if guessCount == game.count {\n        return\
    \ wrongGuessArray\n    }\n    \n    var correctGuessDiff = wrongGuessCount - correctGuessCount\n\
    \    var wrongGuessDiff = wrongGuessCount - guessCount\n    \n    return correctGuessArray\
    \ + [abs(correctGuessDiff)] + wrongGuessArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abe98a3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe98734561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abe98734286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abe9873413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abe98733bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abe98533e83 <unavailable> + 188035

    6    tmp4tf106zq                        0x0000564fe86fed93 <unavailable> + 7571

    7    tmp4tf106zq                        0x0000564fe86fe5f3 <unavailable> + 5619

    8    libc.so.6                          0x00002abe98c29460 __libc_start_main +
    245

    9    tmp4tf106zq                        0x0000564fe86fe269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameCount = 0\n    var guessCount = 0\n    var correctCount\
    \ = 0\n    for _ in 0..<guess.count {\n        guessCount += 1\n        if game[gameCount]\
    \ == guess[guessCount] {\n            gameCount += 1\n            guessCount -=\
    \ 1\n            correctCount += 1\n        }\n    }\n    var result = [Int]()\n\
    \    for _ in 0..<guess.count {\n        result.append(guess[guessCount] - game[gameCount])\n\
    \        gameCount += 1\n        guessCount -= 1\n    }\n    for _ in 0..<guess.count\
    \ {\n        result.append(abs(guess[guessCount] - game[gameCount]))\n       \
    \ gameCount += 1\n        guessCount -= 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af3b75f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3b72ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af3b72ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af3b72ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af3b72ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af3b70ebe83 <unavailable> + 188035

    6    tmpjk2wjm4j                        0x00005602a55adf49 <unavailable> + 8009

    7    tmpjk2wjm4j                        0x00005602a55ad723 <unavailable> + 5923

    8    libc.so.6                          0x00002af3b77e1460 __libc_start_main +
    245

    9    tmpjk2wjm4j                        0x00005602a55ad399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = [0]\n    var gameLength = game.count\n    var\
    \ guessLength = guess.count\n    let maxGameLength = gameLength\n    let maxGuessLength\
    \ = guessLength\n    for _ in 0..<maxGuessLength {\n        result.append(0)\n\
    \    }\n    if gameLength != guessLength {\n        return result\n    }\n   \
    \ for _ in 0..<maxGameLength {\n        let guessIndex = guessIndexFromGameIndex(gameLength,\
    \ _)\n        let gameIndex = guessIndexFromGameIndex(guessLength, _)\n      \
    \  if game[gameIndex] == guess[guessIndex] {\n            result[gameIndex] +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpjnx54vcu.swift:27:26: error: cannot find 'guessIndexFromGameIndex'\
    \ in scope\n        let guessIndex = guessIndexFromGameIndex(gameLength, _)\n\
    \                         ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjnx54vcu.swift:27:62:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \        let guessIndex = guessIndexFromGameIndex(gameLength, _)\n           \
    \                                                  ^\n/tmp/tmpjnx54vcu.swift:28:25:\
    \ error: cannot find 'guessIndexFromGameIndex' in scope\n        let gameIndex\
    \ = guessIndexFromGameIndex(guessLength, _)\n                        ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpjnx54vcu.swift:28:62: error: '_' can only appear in a pattern or on the\
    \ left side of an assignment\n        let gameIndex = guessIndexFromGameIndex(guessLength,\
    \ _)\n                                                             ^\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // Your code here\n    if game.count == guess.count {\n       \
    \ var result = 0\n        for i in 0..<game.count {\n            if game[i] ==\
    \ guess[i] { result += 1}\n        }\n        return [abs(result - game.count)]\n\
    \    } else {\n        return [0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpcnp6_x5o/tmpcnp6_x5o.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3012d46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3012a3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3012a3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3012a3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcnp6_x5o                        0x00005602ddb42774 <unavailable> + 6004

    5    libc.so.6                          0x00002b3012f32460 __libc_start_main +
    245

    6    tmpcnp6_x5o                        0x00005602ddb422e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let result = zip(game, guess).map { \n        let (a, b) = ($0,\
    \ $1)\n        if a == b {\n            return 0\n        }\n        return abs(a\
    \ - b)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008669
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return game\n        .enumerated()\n        .map { (index, value)\
    \ -> Int? in\n            guard value >= 0 else { return nil }\n            guard\
    \ game.count == guess.count else { return nil }\n            guard game[index]\
    \ == guess[index] else { return nil }\n            return abs(game[index] - guess[index])\n\
    \        }\n        .enumerated()\n        .map { index, value in (index, value)\
    \ }\n        .map { value, _ in value }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmplfxfwtql/tmplfxfwtql.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e25592c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e25289b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e25289988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e252887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplfxfwtql                        0x00005638a4580814 <unavailable> + 6164

    5    libc.so.6                          0x00002b5e2577e460 __libc_start_main +
    245

    6    tmplfxfwtql                        0x00005638a4580389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let m = game.count\n    let n = guess.count\n\n    var arr: [Int]\
    \ = Array(repeating: 0, count: n)\n\n    for i in 0..<n {\n        let j = index(of:\
    \ guess[i], in: game)!\n        arr[i] = game[j] - guess[i]\n    }\n\n    return\
    \ arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2, 3,\
    \ 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2lcbt9a9.swift:21:17: error: cannot find 'index' in scope\n   \
    \     let j = index(of: guess[i], in: game)!\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    var i = 0\n    \n    while i <\
    \ game.count {\n        \n        if game[i] == guess[i] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[i] - guess[i]))\n      \
    \  }\n        \n        i += 1\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008669
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = [0]\n\n    let n = game.count\n\n    for i\
    \ in 0..<n {\n        let score = game[i]\n        let guess = guess[i]\n\n  \
    \      if guess == score {\n            result[0] = result[0] + (abs(guess-score))\n\
    \        } else {\n            result[0] = result[0] + abs(guess-score)\n    \
    \    }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmptp6nnj4j/tmptp6nnj4j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff70b70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff70867b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff70867988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff708667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptp6nnj4j                        0x00005600642dc7c4 <unavailable> + 6084

    5    libc.so.6                          0x00002aff70d5c460 __libc_start_main +
    245

    6    tmptp6nnj4j                        0x00005600642dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var returns = [Int](repeating: 0, count: guess.length)\n    guard\
    \ game.count == guess.length else {\n        return returns\n    }\n\n    for\
    \ i in 0..<guess.length {\n        let delta = abs(game[i] - guess[i])\n     \
    \   returns[i] = delta\n    }\n    return returns\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmppnaql2an.swift:15:52: error: value of type '[Int]' has no member\
    \ 'length'\n    var returns = [Int](repeating: 0, count: guess.length)\n     \
    \                                        ~~~~~ ^~~~~~\n/tmp/tmppnaql2an.swift:16:31:\
    \ error: value of type '[Int]' has no member 'length'\n    guard game.count ==\
    \ guess.length else {\n                        ~~~~~ ^~~~~~\n/tmp/tmppnaql2an.swift:20:24:\
    \ error: value of type '[Int]' has no member 'length'\n    for i in 0..<guess.length\
    \ {\n                 ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let diff = game.map { $0 - $1 }\n    let diffs = diff.sorted()\n\
    \    let correct = diff.map { ($0 == 0) }\n    var result = [Int](repeating: 0,\
    \ count: game.count)\n    \n    for i in 0..<game.count {\n        let index =\
    \ game[i] - guess[i]\n        let correctIndex = correct.index(true, offsetBy:\
    \ i)\n        let scoreIndex = diffs.index(true, offsetBy: i)\n        \n    \
    \    if correctIndex != nil {\n            result[index] = diff[correctIndex!]\n\
    \        } else {\n            result[index] = abs(diffs[scoreIndex!] - diffs[scoreIndex!\
    \ - 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmplaacdwoa.swift:15:25: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n    let diff =\
    \ game.map { $0 - $1 }\n                        ^\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    result.truncateToLength(len(guess))\n\
    \    var correctCount = 0\n    guard game.count == guess.count else {\n      \
    \  print(\"game and guess count don't match\")\n        return result\n    }\n\
    \    for i in 0..<game.count {\n        let diff: Int = abs(game[i] - guess[i])\n\
    \        if game[i] == guess[i] {\n            result.append(0)\n            correctCount\
    \ += 1\n        } else {\n            result.append(diff)\n        }\n    }\n\
    \    if correctCount == 0 {\n        print(\"game and guess don't match\")\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpylkz6udl.swift:16:29: error: cannot find 'len' in scope\n    result.truncateToLength(len(guess))\n\
    \                            ^~~\n/tmp/tmpylkz6udl.swift:16:12: error: value of\
    \ type '[Int]' has no member 'truncateToLength'\n    result.truncateToLength(len(guess))\n\
    \    ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var ret: [Int] = []\n    \n    if game.count != guess.count {\n\
    \        return ret\n    }\n    \n    for i in 0..<game.count {\n        if game[i]\
    \ == guess[i] {\n            ret.append(0)\n        } else {\n            ret.append(abs(guess[i]\
    \ - game[i]))\n        }\n    }\n    \n    return ret\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var i = 0\n    var total = 0\n    while i < game.count && i < guess.count\
    \ {\n        if game[i] == guess[i] {\n            total += game[i] - guess[i]\n\
    \            i += 1\n        } else if game[i] > guess[i] {\n            total\
    \ += guess.count - i\n            i += guess.count - 1\n        } else {\n   \
    \         total += game.count - i\n            i += game.count - 1\n        }\n\
    \    }\n    return total < 0 ? 0 : abs(total)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpzerx1r44.swift:29:22: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return total < 0 ? 0 : abs(total)\n \
    \          ~~~~~~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    if game.count == guess.count {\n        var ret = [Int](repeating:\
    \ 0, count: guess.count)\n        for i in 0..<guess.count {\n            ret[i]\
    \ = abs(game[i] - guess[i])\n        }\n        return ret\n    } else {\n   \
    \     var ret = [Int](repeating: 0, count: guess.count)\n        for i in 0..<guess.count\
    \ {\n            ret[i] = abs(game[i] - guess[i])\n            if ret[i] == 0\
    \ {\n                return ret\n            }\n        }\n        return ret\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2, 3,\
    \ 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // TODO: Your code here\n    var gameResults = [Int]()\n    for\
    \ idx in 0..<guess.count {\n        gameResults.append(game[idx] - guess[idx])\n\
    \    }\n    return gameResults\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // TODO: use quicksort or introsort with some pivot selection\n\
    \    \n    var i = 0\n    var j = 0\n    var result = [Int](count: guess[0].count,\
    \ repeatedValue: 0)\n    var gameScore = game[0]\n    for _ in 0..<guess[0].count\
    \ {\n        if gameScore != guess[0] {\n            result[i] = abs(gameScore\
    \ - guess[0])\n        }\n        i += 1\n    }\n    for _ in 0..<guess[0].count\
    \ {\n        if gameScore != guess[0] {\n            result[j] = abs(gameScore\
    \ - guess[0])\n        }\n        j += 1 \n    }\n    \n    for _ in 0..<guess[0].count\
    \ {\n        if gameScore != guess[0] {\n            result[i] = abs(gameScore\
    \ - guess[0])\n        }\n        i += 1\n    }\n    for _ in 0..<guess[0].count\
    \ {\n        if gameScore != guess[0] {\n            result[j] = abs(gameScore\
    \ - guess[0])\n        }\n        j += 1 \n    }\n    \n    return result \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmctj0y53.swift:19:62: error: extra argument 'repeatedValue' in\
    \ call\n    var result = [Int](count: guess[0].count, repeatedValue: 0)\n    \
    \                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpmctj0y53.swift:19:40:\
    \ error: value of type 'Int' has no member 'count'\n    var result = [Int](count:\
    \ guess[0].count, repeatedValue: 0)\n                              ~~~~~~~~ ^~~~~\n\
    /tmp/tmpmctj0y53.swift:21:27: error: value of type 'Int' has no member 'count'\n\
    \    for _ in 0..<guess[0].count {\n                 ~~~~~~~~ ^~~~~\n/tmp/tmpmctj0y53.swift:27:27:\
    \ error: value of type 'Int' has no member 'count'\n    for _ in 0..<guess[0].count\
    \ {\n                 ~~~~~~~~ ^~~~~\n/tmp/tmpmctj0y53.swift:34:27: error: value\
    \ of type 'Int' has no member 'count'\n    for _ in 0..<guess[0].count {\n   \
    \              ~~~~~~~~ ^~~~~\n/tmp/tmpmctj0y53.swift:40:27: error: value of type\
    \ 'Int' has no member 'count'\n    for _ in 0..<guess[0].count {\n           \
    \      ~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    guard game.count == guess.count else {\n        return nil\n\
    \    }\n    \n    var results: [Int] = []\n    \n    for i in 0..<game.count {\n\
    \        results.append(0)\n    }\n    \n    for i in 0..<game.count {\n     \
    \   let diff = abs(game[i] - guess[i])\n        if diff == 0 {\n            results[i]\
    \ = 0\n        } else {\n            results[i] = diff \n        }\n    }\n  \
    \  \n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpj55b072i.swift:17:16: error: 'nil' is incompatible with return\
    \ type '[Int]'\n        return nil\n               ^\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // return a new array\n    var result = [Int](repeating: 0, count:\
    \ game.count)\n\n    // if the guess is correct, add it straight to the result\n\
    \    if guess[0] == game[0] {\n        result[0] = game[0]\n    }\n\n    // calculate\
    \ the differences and return them\n    for (i in 1...game.count) {\n        result[i]\
    \ = result[i] - guess[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmppsatzs9h.swift:24:12: error: expected ',' separator\n    for (i\
    \ in 1...game.count) {\n           ^\n          ,\n/tmp/tmppsatzs9h.swift:24:12:\
    \ error: expected pattern\n    for (i in 1...game.count) {\n           ^\n/tmp/tmppsatzs9h.swift:24:31:\
    \ error: expected 'in' after for-each pattern\n    for (i in 1...game.count) {\n\
    \                              ^\n/tmp/tmppsatzs9h.swift:24:31: error: expected\
    \ Sequence expression for for-each loop\n    for (i in 1...game.count) {\n   \
    \                           ^\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var difference = 0\n    for index in 0..<game.count {\n       \
    \ if guess[index] != game[index] {\n            difference += abs(guess[index]\
    \ - game[index])\n        }\n    }\n    return difference\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp404o0y75.swift:21:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return difference\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    guard game.count == guess.count else {\n        return [Int](repeating:\
    \ 0, count: game.count)\n    }\n    \n    let results = [Int](repeating: 0, count:\
    \ game.count)\n    \n    for i in 0..<game.count {\n        if game[i] == guess[i]\
    \ {\n            results[i] = 0\n        } else {\n            results[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmplhfg15ek.swift:24:20: error: cannot assign through subscript: 'results'\
    \ is a 'let' constant\n            results[i] = 0\n            ~~~~~~~^\n/tmp/tmplhfg15ek.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let results = [Int](repeating:\
    \ 0, count: game.count)\n    ^~~\n    var\n/tmp/tmplhfg15ek.swift:26:20: error:\
    \ cannot assign through subscript: 'results' is a 'let' constant\n           \
    \ results[i] = abs(game[i] - guess[i])\n            ~~~~~~~^\n/tmp/tmplhfg15ek.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let results = [Int](repeating:\
    \ 0, count: game.count)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var a = [Int]()\n    var b = [Int]()\n    var diff = 0\n    for\
    \ i in 0 ..< game.count {\n        a.append(guess[i])\n        b.append(game[i])\n\
    \        if guess[i] == game[i] {\n            diff += 0\n        } else {\n \
    \           diff += abs(guess[i] - game[i])\n        }\n    }\n    a = a.reverse()\n\
    \    b = b.reverse()\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1kw6jvvp.swift:27:11: error: cannot assign value of type '()' to\
    \ type '[Int]'\n    a = a.reverse()\n        ~~^~~~~~~~~\n/tmp/tmp1kw6jvvp.swift:28:11:\
    \ error: cannot assign value of type '()' to type '[Int]'\n    b = b.reverse()\n\
    \        ~~^~~~~~~~~\n/tmp/tmp1kw6jvvp.swift:29:12: error: cannot convert return\
    \ expression of type 'Int' to return type '[Int]'\n    return diff\n         \
    \  ^~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let count = game.count\n    var difference: [Int] = [0]\n    for\
    \ var index = 0; index < count; index++ {\n        let gameIndex = Int(game[index])\n\
    \        let guessIndex = Int(guess[index])\n        difference[index] = abs(gameIndex\
    \ - guessIndex)\n    }\n    return difference\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7ecb7g9o.swift:17:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var index = 0; index < count; index++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var diff = [Int]()\n    for i in 0..<guess.count {\n        var\
    \ sum: Int = 0\n        for j in 0..<game.count {\n            if game[j] == guess[i]\
    \ {\n                sum += 1\n            }\n        }\n        if sum == 1 {\n\
    \            diff.append(0)\n        } else {\n            let sum = sum\n   \
    \         let diff = abs(game[i] - guess[i] - sum)\n            diff.append(diff)\n\
    \        }\n    }\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpcpr4yfyp.swift:28:18: error: value of type 'Int' has no member\
    \ 'append'\n            diff.append(diff)\n            ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var index = 0\n    var difference = [Int](repeating: 0, count:\
    \ game.count)\n    while index < game.count {\n        if game[index] == guess[index]\
    \ {\n            difference[index] = 0\n        } else if game[index] > guess[index]\
    \ {\n            difference[index] = game[index] - guess[index]\n        } else\
    \ {\n            difference[index] = abs(game[index] - guess[index])\n       \
    \ }\n        index += 1\n    }\n    return difference\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let (gameMin, gameMax) = game\n    let (guessMin, guessMax) = guess\n\
    \    let diff = [Int]()\n    var gameCur = gameMin\n    var guessCur = guessMin\n\
    \    var correct = 0\n    var diffCur = diff\n    while gameCur < gameMax and\
    \ guessCur < guessMax and correct-diff < 0 {\n        if game[gameCur] == guess[guessCur]\
    \ {\n            correct += 1\n            diffCur.append(0)\n            gameCur\
    \ += 1\n            guessCur += 1\n        } else {\n            if gameCur-guessCur\
    \ <= 0 {\n                diffCur.append(gameCur - guessCur)\n               \
    \ gameCur += 1\n            } else {\n                diffCur.append(guessCur-gameCur)\n\
    \                guessCur += 1\n            }\n        }\n    }\n    if gameCur\
    \ > gameMax {\n        diff.append(0)\n    } else {\n        diff.append(guessMax\
    \ - gameMax)\n    }\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp0g2shzab.swift:22:29: error: expected '{' after 'while' condition\n\
    \    while gameCur < gameMax and guessCur < guessMax and correct-diff < 0 {\n\
    \                            ^\n/tmp/tmp0g2shzab.swift:15:30: error: cannot convert\
    \ value of type '[Int]' to specified type '(_, _)'\n    let (gameMin, gameMax)\
    \ = game\n                             ^~~~\n/tmp/tmp0g2shzab.swift:16:32: error:\
    \ cannot convert value of type '[Int]' to specified type '(_, _)'\n    let (guessMin,\
    \ guessMax) = guess\n                               ^~~~~\n/tmp/tmp0g2shzab.swift:29:23:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \            if gameCur-guessCur <= 0 {\n                      ^\n/tmp/tmp0g2shzab.swift:30:40:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \                diffCur.append(gameCur - guessCur)\n                        \
    \               ^\n/tmp/tmp0g2shzab.swift:33:40: error: cannot convert value of\
    \ type 'Duration' to expected argument type 'Int'\n                diffCur.append(guessCur-gameCur)\n\
    \                                       ^\n/tmp/tmp0g2shzab.swift:39:14: error:\
    \ cannot use mutating member on immutable value: 'diff' is a 'let' constant\n\
    \        diff.append(0)\n        ~~~~ ^\n/tmp/tmp0g2shzab.swift:17:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let diff = [Int]()\n    ^~~\n    var\n\
    /tmp/tmp0g2shzab.swift:41:30: error: cannot convert value of type 'Duration' to\
    \ expected argument type 'Int'\n        diff.append(guessMax - gameMax)\n    \
    \                         ^\n/tmp/tmp0g2shzab.swift:41:14: error: cannot use mutating\
    \ member on immutable value: 'diff' is a 'let' constant\n        diff.append(guessMax\
    \ - gameMax)\n        ~~~~ ^\n/tmp/tmp0g2shzab.swift:17:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let diff = [Int]()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var results = [Int]()\n    var i = 0\n    var gameLen = game.count\n\
    \    var guessLen = guess.count\n    while i < gameLen && i < guessLen {\n   \
    \     let gameGame = game[i]\n        let guessGame = guess[i]\n        if guessGame\
    \ != gameGame {\n            results.append(abs(guessGame - gameGame))\n     \
    \   }\n        i += 1\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpqpzylll3/tmpqpzylll3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af35d6c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af35d3b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af35d3b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af35d3b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpzylll3                        0x00005605cff976a4 <unavailable> + 5796

    5    libc.so.6                          0x00002af35d8ae460 __libc_start_main +
    245

    6    tmpqpzylll3                        0x00005605cff97219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return zip(game, guess).map { abs($0 - $1) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    guard game.count == guess.count else {\n        print(\"The arrays\
    \ must be of equal length.\")\n        return []\n    }\n    var totalScore =\
    \ 0\n    for i in 0..<game.count {\n        if game[i] != guess[i] {\n       \
    \     totalScore += abs(game[i] - guess[i])\n        }\n    }\n    return totalScore\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg5r8h3l8.swift:25:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return totalScore\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let score = game.count\n    let difference = guess\n    return\
    \ score..<(score+difference).map { guess[$0] - game[$0] }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmph_da5ynt.swift:17:17: error: cannot convert return expression of\
    \ type 'Range<Int>' to return type '[Int]'\n    return score..<(score+difference).map\
    \ { guess[$0] - game[$0] }\n           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph_da5ynt.swift:17:39: error: cannot convert value of type '[Int]' to expected\
    \ argument type 'Int'\n    return score..<(score+difference).map { guess[$0] -\
    \ game[$0] }\n                                      ^\n/tmp/tmph_da5ynt.swift:17:21:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Array<Int>'\n\
    \    return score..<(score+difference).map { guess[$0] - game[$0] }\n        \
    \            ^\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var numOfGuesses = 0\n    var numOfMisses   = 0\n\n    for i in\
    \ 0..<game.count {\n        var diff = 0\n\n        if game[i] == guess[i] { //\
    \ They got it right\n            numOfGuesses += 1\n        } else { // They got\
    \ it wrong\n            numOfMisses += 1\n            diff = abs(game[i] - guess[i])\n\
    \        }\n\n        guess[i] = diff\n    }\n\n    var answer: [Int] = [0]\n\n\
    \    if numOfGuesses == game.count { // They guessed it right\n        answer[0]\
    \ = 0\n    } else { // They guessed it wrong\n        answer[0] = abs(numOfMisses\
    \ - numOfGuesses)\n    }\n\n    return answer\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdupyw2uz.swift:28:14: error: cannot assign through subscript: 'guess'\
    \ is a 'let' constant\n        guess[i] = diff\n        ~~~~~^\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let gameMinusGuess: [Int] = game.filter{ (num) -> Bool in\n   \
    \     guess == num\n    }\n    return gameMinusGuess\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp603iw8ri.swift:16:15: error: binary operator '==' cannot be applied\
    \ to operands of type '[Int]' and 'Int'\n        guess == num\n        ~~~~~ ^\
    \  ~~~\n/tmp/tmp603iw8ri.swift:16:15: note: overloads for '==' exist with these\
    \ partially matching parameter lists: (Int, Int)\n        guess == num\n     \
    \         ^\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return game.enumerated().map { i, s -> Int in\n        let gameScore\
    \ = game[i]\n        let guessScore = guess[i]\n        return gameScore == guessScore\
    \ ? 0 : abs(guessScore - gameScore)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n  var results = [Int]()\n\n  for _ in 1...game.count {\n    if game[0]\
    \ == guess[0] {\n      let diff = (game[0] - guess[0]).abs()\n      results.append(diff)\n\
    \    }\n    if game[1] == guess[1] {\n      let diff = (game[1] - guess[1]).abs()\n\
    \      results.append(diff)\n    }\n    if game[2] == guess[2] {\n      let diff\
    \ = (game[2] - guess[2]).abs()\n      results.append(diff)\n    }\n    if game[3]\
    \ == guess[3] {\n      let diff = (game[3] - guess[3]).abs()\n      results.append(diff)\n\
    \    }\n    if game[4] == guess[4] {\n      let diff = (game[4] - guess[4]).abs()\n\
    \      results.append(diff)\n    }\n    if game[5] == guess[5] {\n      let diff\
    \ = (game[5] - guess[5]).abs()\n      results.append(diff)\n    }\n  }\n\n  return\
    \ results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpnu20gxvb.swift:19:39: error: value of type 'Int' has no member\
    \ 'abs'\n      let diff = (game[0] - guess[0]).abs()\n                 ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpnu20gxvb.swift:23:39: error: value of type 'Int' has no member\
    \ 'abs'\n      let diff = (game[1] - guess[1]).abs()\n                 ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpnu20gxvb.swift:27:39: error: value of type 'Int' has no member\
    \ 'abs'\n      let diff = (game[2] - guess[2]).abs()\n                 ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpnu20gxvb.swift:31:39: error: value of type 'Int' has no member\
    \ 'abs'\n      let diff = (game[3] - guess[3]).abs()\n                 ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpnu20gxvb.swift:35:39: error: value of type 'Int' has no member\
    \ 'abs'\n      let diff = (game[4] - guess[4]).abs()\n                 ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpnu20gxvb.swift:39:39: error: value of type 'Int' has no member\
    \ 'abs'\n      let diff = (game[5] - guess[5]).abs()\n                 ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // TODO: Complete this function\n    var gameSum = 0\n    var gameGuess\
    \ = 0\n    var gameGuessedCorrectly = false\n    var guessedCorrectly = false\n\
    \    \n    for i in 0..<game.count {\n        if game[i] == guess[i] {\n     \
    \       gameSum += game[i]\n            gameGuessedCorrectly = true\n        }\
    \ else {\n            gameGuessed += game[i] - guess[i]\n            gameSum +=\
    \ abs(game[i] - guess[i])\n        }\n    }\n    \n    if gameSum != 0 {\n   \
    \     if gameGuessedCorrectly {\n            guessedCorrectly = true\n       \
    \ }\n        return [-gameSum, -gameGuess, 0]\n    } else {\n        if guessedCorrectly\
    \ {\n            return [-gameSum, -gameGuess, 0]\n        } else {\n        \
    \    return [-gameSum, -gameGuess, abs(gameSum - gameGuess)]\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfobz1h8l.swift:26:13: error: cannot find 'gameGuessed' in scope\n\
    \            gameGuessed += game[i] - guess[i]\n            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let len = game.count\n    let win = Array(game).sort(<)\n    return\
    \ win.prefix(len).map { abs($0 - guess[$0..<len]) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpnr91zsl0.swift:16:32: error: missing argument label 'by:' in call\n\
    \    let win = Array(game).sort(<)\n                               ^\n       \
    \                        by: \n/tmp/tmpnr91zsl0.swift:17:51: error: cannot convert\
    \ value of type 'Range<Int>' to expected argument type 'Int'\n    return win.prefix(len).map\
    \ { abs($0 - guess[$0..<len]) }\n                                            \
    \      ^\n/tmp/tmpnr91zsl0.swift:17:48: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type 'Int'\n    return win.prefix(len).map { abs($0 - guess[$0..<len])\
    \ }\n                                               ^\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    if game.count != guess.count {\n        return [Int](repeating:\
    \ 0, count: guess.count)\n    }\n    var sums = [Int](repeating: 0, count: game.count)\n\
    \    for i in 0 ..< game.count {\n        let difference = abs(game[i] - guess[i])\n\
    \        sums[i] += difference\n    }\n    return sums\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var results = [Int]()\n    var wins = 0\n    var winsSoFar = 0\n\
    \    \n    for _ in 0..<games.count {\n        if games.count > wins {\n     \
    \       if games[wins] == guess[winsSoFar] {\n                wins += 1\n    \
    \        }\n            else {\n                results.append(abs(games[wins]\
    \ - guess[winsSoFar]))\n            }\n        }\n        else {\n           \
    \ if games[wins] == guess[winsSoFar] {\n                wins += 1\n          \
    \  }\n            else {\n                results.append(abs(games[wins] - guess[winsSoFar]))\n\
    \            }\n        }\n        winsSoFar += 1\n    }\n    \n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5ttbqw23.swift:19:18: error: cannot find 'games' in scope\n   \
    \ for _ in 0..<games.count {\n                 ^~~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return guess(game, guess)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp6po5ftyx.swift:15:12: error: cannot call value of non-function\
    \ type '[Int]'\n    return guess(game, guess)\n           ^\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    var score = 0\n    var guessCount = 0\n    var i = game.count\n\
    \    var j = guess.count\n    while i != 0 && j != 0 {\n        if game[i - 1]\
    \ == guess[j - 1] {\n            score += game[i - 1]\n            game.removeAtIndex(i-1)\n\
    \            guesses.removeAtIndex(i-1)\n            i -= 1\n            j -=\
    \ 1\n            guessCount += 1\n        } else {\n            i += 1\n     \
    \       j += 1\n            score += abs(game[i - 1] - guess[j - 1])\n       \
    \ }\n    }\n    if guessCount == 0 {\n        return [score]\n    } else {\n \
    \       return [score, guessCount]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpp42b2yn_.swift:23:18: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n            game.removeAtIndex(i-1)\n            ~~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmpp42b2yn_.swift:24:13: error: cannot find 'guesses' in scope\n        \
    \    guesses.removeAtIndex(i-1)\n            ^~~~~~~\n"
  stdout: ''
  timestamp: 1660008669
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for index\
    \ in 0..<game.count {\n        result[index] = abs(game[index] - guess[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return (0..<game.count).map { idx -> Int? in\n        var diff\
    \ = 0\n        for j in 0..<guess.count {\n            if idx != j {\n       \
    \         diff += abs(guess[j] - game[idx])\n            }\n        }\n      \
    \  return diff\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmb97qxbf.swift:15:42: error: declared closure result 'Int?' is\
    \ incompatible with contextual type 'Int'\n    return (0..<game.count).map { idx\
    \ -> Int? in\n                                         ^~~~\n                \
    \                         Int\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var arr:[Int] = []\n    \n    for i in 0..<game.count {\n     \
    \   if game[i] == guess[i] { // same score\n            arr[i] = 0 // same score\n\
    \        } else {\n            let a = abs(guess[i] - game[i]) // absolute difference\n\
    \            arr[i] = a // different score\n        }\n    }\n    return arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9c70c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9c6dba561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae9c6dba286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae9c6dba13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae9c6db9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae9c6bb97ec <unavailable> + 186348

    6    tmphx6nqe_x                        0x000055c7decd0ee7 <unavailable> + 7911

    7    tmphx6nqe_x                        0x000055c7decd06c3 <unavailable> + 5827

    8    libc.so.6                          0x00002ae9c72af460 __libc_start_main +
    245

    9    tmphx6nqe_x                        0x000055c7decd0339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    if game.count != guess.count {\n        guard game.count == guess.count\
    \ else { return Array(repeating: 0, count: game.count) }\n    }\n    var result\
    \ = [Int]()\n    for i in 0..<game.count {\n        result.append(abs(guess[i]\
    \ - game[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    guard game.count == guess.count else { return [Int]() }\n    var\
    \ distance: [Int] = Array(repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        let difference = Int(abs(game[i] - guess[i]))\n        distance[i]\
    \ = difference\n    }\n    return distance\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var results = [Int](repeating: 0, count: game.count)\n    for index\
    \ in 0 ..< game.count {\n        if game[index] == guess[index] {\n          \
    \  results[index] = results[index] + 1\n        }\n    }\n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpyi4mthqx/tmpyi4mthqx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49582cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4957fc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4957fc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4957fc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi4mthqx                        0x0000558ff2d88754 <unavailable> + 5972

    5    libc.so.6                          0x00002b49584ba460 __libc_start_main +
    245

    6    tmpyi4mthqx                        0x0000558ff2d882c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return guess == game ? [0, 0, 0, 0, 0, 0] : abs(guess[0] - game[0])\
    \ + abs(guess[1] - game[1]) + abs(guess[2] - game[2]) + abs(guess[3] - game[3])\
    \ + abs(guess[4] - game[4]) + abs(guess[5] - game[5])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpta5q0tbd.swift:15:26: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return guess == game ? [0, 0, 0, 0, 0,\
    \ 0] : abs(guess[0] - game[0]) + abs(guess[1] - game[1]) + abs(guess[2] - game[2])\
    \ + abs(guess[3] - game[3]) + abs(guess[4] - game[4]) + abs(guess[5] - game[5])\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008676
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let len = game.count\n    let diff = [Int](repeating: 0, count:\
    \ len)\n    for i in 0..<len {\n        let a = game[i]\n        let b = guess[i]\n\
    \        if a != b {\n            diff[i] = abs(a - b)\n        } else {\n   \
    \         diff[i] = 0\n        }\n    }\n    return diff\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmptxrr64kn.swift:21:17: error: cannot assign through subscript: 'diff'\
    \ is a 'let' constant\n            diff[i] = abs(a - b)\n            ~~~~^\n/tmp/tmptxrr64kn.swift:16:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let diff = [Int](repeating:\
    \ 0, count: len)\n    ^~~\n    var\n/tmp/tmptxrr64kn.swift:23:17: error: cannot\
    \ assign through subscript: 'diff' is a 'let' constant\n            diff[i] =\
    \ 0\n            ~~~~^\n/tmp/tmptxrr64kn.swift:16:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let diff = [Int](repeating: 0, count: len)\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return (0..<game.count).map { i in\n        let distance = abs(guess[i]\
    \ - game[i])\n        if guess[i] == game[i] {\n            return distance\n\
    \        }\n        return distance\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = Array(repeating: 0, count: game.count)\n    var total\
    \ = 0\n    for (i, a) in zip(game.indices, game) {\n        result[i] = abs(a\
    \ - guess[i])\n        total += abs(a - guess[i])\n    }\n    for j in game.indices\
    \ {\n        result[j] = abs(game[j] - guess[game.indices.index(j)])\n       \
    \ total += abs(game[j] - guess[game.indices.index(j)])\n    }\n    let maxScore\
    \ = abs(game[0] - guess[0])\n    if total > maxScore {\n        var index = 0\n\
    \        for (i, a) in zip(game.indices, game) {\n            if abs(a - guess[i])\
    \ <= maxScore {\n                let a = a < 0 ? -a : a\n                result[i]\
    \ = a\n            }\n        }\n        for (i, a) in zip(game.indices, game)\
    \ {\n            if abs(game[i] - guess[game.indices.index(j)])  >= maxScore {\n\
    \                result[j] = -abs(game[i] - guess[game.indices.index(j)])\n  \
    \          }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpu298zce0.swift:22:54: error: no exact matches in call to instance\
    \ method 'index'\n        result[j] = abs(game[j] - guess[game.indices.index(j)])\n\
    \                                                     ^\nSwift.Range:7:28: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n    @inlinable\
    \ public func index(after i: Range<Bound>.Index) -> Range<Bound>.Index\n     \
    \                      ^\nSwift.Range:8:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(before:)')\n    @inlinable public func index(before\
    \ i: Range<Bound>.Index) -> Range<Bound>.Index\n                           ^\n\
    Swift.RandomAccessCollection:3:28: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(after:)')\n    @inlinable public func index(after i: Self.Index)\
    \ -> Self.Index\n                           ^\nSwift.RandomAccessCollection:4:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(before:)')\n\
    \    @inlinable public func index(before i: Self.Index) -> Self.Index\n      \
    \                     ^\n/tmp/tmpu298zce0.swift:23:51: error: no exact matches\
    \ in call to instance method 'index'\n        total += abs(game[j] - guess[game.indices.index(j)])\n\
    \                                                  ^\nSwift.Range:7:28: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n    @inlinable\
    \ public func index(after i: Range<Bound>.Index) -> Range<Bound>.Index\n     \
    \                      ^\nSwift.Range:8:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(before:)')\n    @inlinable public func index(before\
    \ i: Range<Bound>.Index) -> Range<Bound>.Index\n                           ^\n\
    Swift.RandomAccessCollection:3:28: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(after:)')\n    @inlinable public func index(after i: Self.Index)\
    \ -> Self.Index\n                           ^\nSwift.RandomAccessCollection:4:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(before:)')\n\
    \    @inlinable public func index(before i: Self.Index) -> Self.Index\n      \
    \         "
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameArray = game\n    var guessArray = guess\n    var diffArray\
    \ = [Int]()\n    var index = 0\n\n    // if there aren't enough games to cover\
    \ the guess, return an empty list\n    while gameArray.count < guess.count {\n\
    \        gameArray.append(0)\n        guessArray.append(0)\n        diffArray.append(0)\n\
    \        index += 1\n    }\n\n    for _ in 0..<guess.count {\n        var diff\
    \ = 0\n        diff = gameArray[index] - guessArray[index]\n        diffArray.append(diff)\n\
    \        gameArray.removeAtIndex(index)\n        guessArray.removeAtIndex(index)\n\
    \        index += 1\n    }\n\n    return diffArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpurfjtt8k.swift:32:19: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n        gameArray.removeAtIndex(index)\n        ~~~~~~~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmpurfjtt8k.swift:33:20: error: value of type '[Int]' has no member 'removeAtIndex'\n\
    \        guessArray.removeAtIndex(index)\n        ~~~~~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return compare(game: game, guess: guess, i: 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpygtz3vhh.swift:15:49: error: extra argument 'i' in call\n    return\
    \ compare(game: game, guess: guess, i: 0)\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    //TODO: your code here\n    var game = game\n    var guess = guess\n\
    \    var result = [Int](repeatElement(0, count: game.count))\n    for index in\
    \ 0..<game.count {\n        if guess[index] > game[index] {\n            result[index]\
    \ = 0\n        }\n        else if guess[index] == game[index] {\n            result[index]\
    \ = 0\n        }\n        else {\n            result[index] = abs(guess[index]\
    \ - game[index])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let matches = G(zip(game, guess).map { Tuple($0.1, $0.2) }).sorted()\n\
    \    let results = zip(guess, matches).map { $0 - $1.1 }\n    return results.map\
    \ { $0.abs }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp0lzxznjf.swift:15:19: error: cannot find 'G' in scope\n    let\
    \ matches = G(zip(game, guess).map { Tuple($0.1, $0.2) }).sorted()\n         \
    \         ^\n/tmp/tmp0lzxznjf.swift:15:44: error: cannot find 'Tuple' in scope\n\
    \    let matches = G(zip(game, guess).map { Tuple($0.1, $0.2) }).sorted()\n  \
    \                                         ^~~~~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    let sum = 0\n    \n    for i in 0 ..< game.count {\n    \
    \    sum += abs(game[i] - guess[i])\n    }\n    \n    return Array(repeating:\
    \ sum, count: game.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpcu1r7r3k.swift:19:13: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n        sum += abs(game[i] - guess[i])\n\
    \        ~~~ ^\n/tmp/tmpcu1r7r3k.swift:16:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let sum = 0\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    \n    // count matching scores\n    var\
    \ count = 0\n    for _ in game {\n        if guess[count] == game {\n        \
    \    count += 1\n        }\n    }\n    \n    // subtract scores\n    for i in\
    \ 0..<count {\n        result.append(guess[i] - game[i])\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpy_ofzzf9.swift:20:25: error: binary operator '==' cannot be applied\
    \ to operands of type 'Int' and '[Int]'\n        if guess[count] == game {\n \
    \          ~~~~~~~~~~~~ ^  ~~~~\n/tmp/tmpy_ofzzf9.swift:20:25: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Int, Int)\n \
    \       if guess[count] == game {\n                        ^\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    guard game.count == guess.count else {\n        print(\"The game\
    \ and guess lists must contain the same number of elements.\")\n        return\
    \ [Int](repeating: 0, count: game.count)\n    }\n    \n    let gameScore = game.reduce(0,\
    \ combine: { $0 + $1 })\n    let guessScore = guess.reduce(0, combine: { $0 +\
    \ $1 })\n    let difference = gameScore - guessScore\n    \n    var result: [Int]\
    \ = Array(repeating: 0, count: game.count)\n    \n    let minDiff = min(difference,\
    \ guess.count)\n    for i in 0 ..< minDiff {\n        result[i] = abs(guess[i]\
    \ - game[i])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7zsluqua.swift:20:32: error: extraneous argument label 'combine:'\
    \ in call\n    let gameScore = game.reduce(0, combine: { $0 + $1 })\n        \
    \                       ^   ~~~~~~~~~\n                                   \n/tmp/tmp7zsluqua.swift:21:34:\
    \ error: extraneous argument label 'combine:' in call\n    let guessScore = guess.reduce(0,\
    \ combine: { $0 + $1 })\n                                 ^   ~~~~~~~~~\n    \
    \                                 \n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n  var result: [Int] = []\n  var gameMax = game.max()\n  var guessMax\
    \ = guess.max()\n  var gameSum = game.sum() //sum of game\n  var guessSum = guess.sum()\
    \ //sum of guess\n  for n in 0..<game.count {\n    if game[n] == guessMax {\n\
    \      let diff = gameSum - guessSum + game[n]\n      result.append(diff)\n  \
    \  }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9u92v6c5.swift:18:22: error: value of type '[Int]' has no member\
    \ 'sum'\n  var gameSum = game.sum() //sum of game\n                ~~~~ ^~~\n\
    /tmp/tmp9u92v6c5.swift:19:24: error: value of type '[Int]' has no member 'sum'\n\
    \  var guessSum = guess.sum() //sum of guess\n                 ~~~~~ ^~~\n/tmp/tmp9u92v6c5.swift:22:37:\
    \ error: binary operator '+' cannot be applied to operands of type 'Duration'\
    \ and 'Int'\n      let diff = gameSum - guessSum + game[n]\n                 ~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~\n/tmp/tmp9u92v6c5.swift:22:37: note: overloads for '+' exist with\
    \ these partially matching parameter lists: (Duration, Duration), (Int, Int)\n\
    \      let diff = gameSum - guessSum + game[n]\n                             \
    \       ^\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    var result = [Int](repeating: 0, count: game.count)\n   \
    \ var guessedCorrectly = [Bool](repeating: false, count: game.count)\n    for\
    \ i in 0..<game.count {\n        result[i] = game[i] - guess[i]\n        guessedCorrectly[i]\
    \ = result[i] == 0\n    }\n    for i in 0..<game.count {\n        if !guessedCorrectly[i]\
    \ {\n            result[i] = abs(result[i]-guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpyn0574vz/tmpyn0574vz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef6ffcfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef6fcc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef6fcc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef6fcc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyn0574vz                        0x0000560533259974 <unavailable> + 6516

    5    libc.so.6                          0x00002aef701bb460 __libc_start_main +
    245

    6    tmpyn0574vz                        0x00005605332594e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var results = [Int](repeating: 0, count: game.count)\n    for index\
    \ in 0..<game.count {\n        results[index] = abs(game[index] - guess[index])\n\
    \    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    // Your code here\n    let gameArray = Array(game)\n    let\
    \ guessArray = Array(guess)\n    var total = 0\n    var index = 0\n    while index\
    \ < gameArray.count && index < guessArray.count {\n        let a = gameArray[index]\n\
    \        let b = guessArray[index]\n        if a == b {\n            total +=\
    \ 1\n        }else {\n            if a > b {\n                total += abs(a -\
    \ b)\n            }else {\n                total += abs(b - a)\n            }\n\
    \        }\n        index += 1\n    }\n    let arrayOfDifferences: [Int] = Array(repeating:\
    \ total, count: guessArray.count)\n    return arrayOfDifferences\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpq95i3iwo/tmpq95i3iwo.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ff8bbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ff88b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ff88b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ff88b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq95i3iwo                        0x00005639073d76c4 <unavailable> + 5828

    5    libc.so.6                          0x00002b4ff8da7460 __libc_start_main +
    245

    6    tmpq95i3iwo                        0x00005639073d7239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var correct = 0\n    var wrong = 0\n    for index in 0..<guess.count\
    \ {\n        let difference = abs(game[index] - guess[index])\n        if game[index]\
    \ == guess[index] {\n            correct += 1\n        } else {\n            wrong\
    \ += 1\n        }\n    }\n    return [wrong, correct]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpc6zehsei/tmpc6zehsei.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af79293ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af792635b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af792635988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7926347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6zehsei                        0x000055fd2775c774 <unavailable> + 6004

    5    libc.so.6                          0x00002af792b2a460 __libc_start_main +
    245

    6    tmpc6zehsei                        0x000055fd2775c2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    let gameCount = game.count\n    let guessCount = guess.count\n\
    \    var result: [Int] = Array(repeating: 0, count: guessCount)\n    \n    var\
    \ index = 0\n    while index < guessCount {\n        if game[index] == guess[index]\
    \ {\n            result[index] = 0\n        } else {\n            result[index]\
    \ = abs(game[index] - guess[index])\n        }\n        index += 1\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](count: game.count, repeatedValue: 0)\n    \n\
    \    var total = 0\n    \n    for i in 0..<game.count {\n        result[i] = max(result[i],\
    \ abs(guess[i] - game[i]))\n        total += result[i]\n    }\n    \n    for i\
    \ in 0..<game.count {\n        result[i] /= total\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp0pqm9prp.swift:15:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: game.count, repeatedValue: 0)\n            \
    \     ^\n/tmp/tmp0pqm9prp.swift:15:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var result = [Int](count: game.count,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmp0pqm9prp.swift:15:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: game.count, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // write your solution here\n    let gameCount = game.count\n \
    \   let guessCount = guess.count\n    var result = [Int](repeating: 0, count:\
    \ guessCount)\n    if guessCount == 0 { return result }\n    \n    for index in\
    \ 0..<guessCount {\n        if game[index] == guess[index] {\n            result[index]\
    \ = 0\n        } else {\n            result[index] = game[index] - guess[index]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    var result: [Int] = [Int](count: guess.count, repeatedValue:\
    \ 0)\n    \n    for i in 0..<guess.count {\n        result[i] = Int(game[i]) -\
    \ Int(guess[i])\n        \n        guard result[i] >= 0 else { result[i] = abs(result[i])\
    \ }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp28i1rk4m.swift:16:66: error: extra argument 'repeatedValue' in\
    \ call\n    var result: [Int] = [Int](count: guess.count, repeatedValue: 0)\n\
    \                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmp28i1rk4m.swift:16:31:\
    \ error: missing argument for parameter 'repeating' in call\n    var result: [Int]\
    \ = [Int](count: guess.count, repeatedValue: 0)\n                            \
    \  ^\n                              repeating: <#Int#>, \nSwift.Array:4:23: note:\
    \ 'init(repeating:count:)' declared here\n    @inlinable public init(repeating\
    \ repeatedValue: Element, count: Int)\n                      ^\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var game = game\n    var guess = guess\n    guard game.count !=\
    \ guess.count else {\n        print(\"Array counts don't match\")\n        return\
    \ guess\n    }\n    var gameDiff = Int()\n    var guessDiff = Int()\n    for index\
    \ in 0..<guess.count {\n        gameDiff = abs(game[index] - guess[index])\n \
    \       guessDiff = abs(game[index] - guess[index])\n        if gameDiff == 0\
    \ {\n            gameDiff = guessDiff\n        }\n        if gameDiff != guessDiff\
    \ {\n            return guess\n        }\n    }\n    return guess\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp7h3g9h1o/tmp7h3g9h1o.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdffc6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdff961b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdff961988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdff9607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7h3g9h1o                        0x000055a6a3ac4954 <unavailable> + 6484

    5    libc.so.6                          0x00002afdffe56460 __libc_start_main +
    245

    6    tmp7h3g9h1o                        0x000055a6a3ac44c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var i = 0\n    var j = 0\n    var bestGuesses = 0\n    var bestScore\
    \ = game[0]\n    var bestGuess = guess[0]\n    var bestDifference = game[0] -\
    \ guess[0]\n    var bestIndex = -1\n    \n    while i != game.count {\n      \
    \  while j != guess.count {\n            if guess[j] >= bestScore {\n        \
    \        bestGuesses = bestGuesses + 1\n                bestScore = guess[j]\n\
    \                bestGuess = guess[j]\n                bestDifference = bestScore\
    \ - bestGuess\n                bestIndex = i\n            }\n            j = j\
    \ + 1\n        }\n        i = i + 1\n    }\n    var result: [Int] = []\n    \n\
    \    if bestGuesses == game.count {\n        // return best guesses and difference\n\
    \        for i in 0..<game.count {\n            result.append(bestGuess)\n   \
    \         result.append(bestDifference)\n        }\n    } else {\n        // return\
    \ best guesses and best score\n        for i in 0..<game.count {\n           \
    \ result.append(bestGuess)\n            result.append(bestScore)\n        }\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp6aidch3v/tmp6aidch3v.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5f7b30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5f7827b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5f7827988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5f78267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6aidch3v                        0x000055767c0796e4 <unavailable> + 5860

    5    libc.so.6                          0x00002ad5f7d1c460 __libc_start_main +
    245

    6    tmp6aidch3v                        0x000055767c079259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var guesses = [Int]()\n    var scores = [Int]()\n    var total\
    \ = 0\n    for i in 0..<game.count {\n        guesses.append(guess[i])\n     \
    \   scores.append(game[i])\n    }\n    for i in 0..<game.count {\n        total\
    \ += abs(guesses[i] - scores[i])\n    }\n    return scores\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp644hfkld/tmp644hfkld.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b8bb9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b8b891b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b8b891988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b8b8907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp644hfkld                        0x00005649905f8824 <unavailable> + 6180

    5    libc.so.6                          0x00002b7b8bd86460 __libc_start_main +
    245

    6    tmp644hfkld                        0x00005649905f8399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    // your code here\n    let gameCopy = game.copy()\n    let\
    \ guessCopy = guess.copy()\n    \n    if guessCopy.isEmpty {\n        return gameCopy\n\
    \    }\n    \n    if gameCopy.isEmpty {\n        return guessCopy\n    }\n   \
    \ \n    var diff = 0\n    var i = 0\n    var j = 0\n    \n    while i < gameCopy.count\
    \ && j < guessCopy.count {\n        if gameCopy[i] < guessCopy[j] {\n        \
    \    gameCopy[i] += abs(gameCopy[i] - guessCopy[j])\n            guessCopy.removeAtIndex(j)\n\
    \            diff--\n            i++\n        } else {\n            gameCopy[i]\
    \ -= abs(guessCopy[j] - gameCopy[i])\n            guessCopy.removeAtIndex(j)\n\
    \            diff++\n            j++\n        }\n    }\n    \n    while i < gameCopy.count\
    \ {\n        gameCopy[i] += abs(gameCopy[i] - guessCopy[j])\n        guessCopy.removeAtIndex(j)\n\
    \        diff++\n        i++\n        j++\n    }\n    \n    while j < guessCopy.count\
    \ {\n        gameCopy[i] += abs(guessCopy[j] - gameCopy[i])\n        guessCopy.removeAtIndex(j)\n\
    \        diff--\n        i++\n        j++\n    }\n    \n    return diff\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbm3g1psj.swift:17:25: error: value of type '[Int]' has no member\
    \ 'copy'\n    let gameCopy = game.copy()\n                   ~~~~ ^~~~\n/tmp/tmpbm3g1psj.swift:18:27:\
    \ error: value of type '[Int]' has no member 'copy'\n    let guessCopy = guess.copy()\n\
    \                    ~~~~~ ^~~~\n/tmp/tmpbm3g1psj.swift:36:17: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            diff--\n         \
    \       ^~\n/tmp/tmpbm3g1psj.swift:37:14: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpbm3g1psj.swift:41:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  diff++\n                ^~\n/tmp/tmpbm3g1psj.swift:42:14: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            j++\n            \
    \ ^~\n/tmp/tmpbm3g1psj.swift:49:13: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        diff++\n            ^~\n/tmp/tmpbm3g1psj.swift:50:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        i++\n\
    \         ^~\n/tmp/tmpbm3g1psj.swift:51:10: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n        j++\n         ^~\n/tmp/tmpbm3g1psj.swift:57:13:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n        diff--\n\
    \            ^~\n/tmp/tmpbm3g1psj.swift:58:10: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmpbm3g1psj.swift:59:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n/tmp/tmpbm3g1psj.swift:62:12: error: cannot convert return expression\
    \ of type 'Int' to return type '[Int]'\n    return diff\n           ^~~~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let gameCount = game.count\n    let guessCount = guess.count\n\
    \    var score = [Int](repeating: 0, count: guessCount)\n    var diff = 0\n  \
    \  for _ in 0..<guessCount {\n        guard let g = guess[_], let g = g else {\
    \ continue }\n        let score = game.reduce(0, { $0 + $1 })\n        diff +=\
    \ abs(score - g)\n        score[_] = 0\n    }\n    return score\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxus_bz_e.swift:20:29: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        guard let g = guess[_], let g = g\
    \ else { continue }\n                            ^\n/tmp/tmpxus_bz_e.swift:23:15:\
    \ error: '_' can only appear in a pattern or on the left side of an assignment\n\
    \        score[_] = 0\n              ^\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    var result: [Int] = Array(repeating: 0, count: game.count)\n\
    \    for index in 0..<game.count {\n        var tempScore = game[index]\n    \
    \    var tempGuess = guess[index]\n        if tempScore < tempGuess {\n      \
    \      result[index] = tempGuess - tempScore\n        } else {\n            result[index]\
    \ = abs(tempScore - tempGuess)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    // Your code here\n    var gameArray = game\n    var guessesArray\
    \ = guess\n    \n    var compare: [Int] = []\n    var matchCount = 0\n    for\
    \ index in 0..<guess.count {\n        if guessesArray[index] == gameArray[index]\
    \ {\n            matchCount += 1\n        }\n        \n        compare.append(matchCount)\n\
    \    }\n    \n    return compare\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpidc9e0go/tmpidc9e0go.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f96ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f969d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f969d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f969d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpidc9e0go                        0x000055cc79b7e6e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b2f96ece460 __libc_start_main +
    245

    6    tmpidc9e0go                        0x000055cc79b7e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let length = game.count\n    let diff = [Int](count: length, repeatedValue:\
    \ 0)\n    let maxGuess = guess.max()!\n    let guessesSum = guess.reduce(0){ $0\
    \ + $1 }\n    for index in 0..<length {\n        let score = game[index]\n   \
    \     diff[index] = abs(guess[index] - score)\n        if diff[index] > maxGuess\
    \ {\n            diff[index] -= maxGuess\n        }\n    }\n    return diff\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp05dre_iv.swift:16:16: error: no exact matches in call to initializer\
    \ \n    let diff = [Int](count: length, repeatedValue: 0)\n               ^\n\
    /tmp/tmp05dre_iv.swift:16:16: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n    let diff = [Int](count: length, repeatedValue:\
    \ 0)\n               ^\n/tmp/tmp05dre_iv.swift:16:16: note: candidate has partially\
    \ matching parameter list (repeating: Int, count: Int)\n    let diff = [Int](count:\
    \ length, repeatedValue: 0)\n               ^\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = [0] * guessedElements\n    for i in 0..<guessedElements\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpex8e4x2g.swift:15:31: error: cannot find 'guessedElements' in scope\n\
    \    var result: [Int] = [0] * guessedElements\n                             \
    \ ^~~~~~~~~~~~~~~\n/tmp/tmpex8e4x2g.swift:15:29: error: binary operator '*' cannot\
    \ be applied to operands of type '[Int]' and 'Double'\n    var result: [Int] =\
    \ [0] * guessedElements\n                        ~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmpex8e4x2g.swift:15:29:\
    \ note: overloads for '*' exist with these partially matching parameter lists:\
    \ (Double, Double), (Duration, Double), (Float, Float), (Float16, Float16), (Float80,\
    \ Float80), (Int, Int), (Int16, Int16), (Int32, Int32), (Int64, Int64), (Int8,\
    \ Int8), (UInt, UInt), (UInt16, UInt16), (UInt32, UInt32), (UInt64, UInt64), (UInt8,\
    \ UInt8)\n    var result: [Int] = [0] * guessedElements\n                    \
    \        ^\n/tmp/tmpex8e4x2g.swift:15:29: error: no '*' candidates produce the\
    \ expected contextual result type '[Int]'\n    var result: [Int] = [0] * guessedElements\n\
    \                            ^\nSwift.Duration:14:24: note: '*' produces 'Duration',\
    \ not the expected contextual result type '[Int]'\n    public static func * (lhs:\
    \ Duration, rhs: Double) -> Duration\n                       ^\nSwift.Float16:5:24:\
    \ note: '*' produces 'Float16', not the expected contextual result type '[Int]'\n\
    \    public static func * (lhs: Float16, rhs: Float16) -> Float16\n          \
    \             ^\nSwift.Float:4:24: note: '*' produces 'Float', not the expected\
    \ contextual result type '[Int]'\n    public static func * (lhs: Float, rhs: Float)\
    \ -> Float\n                       ^\nSwift.Double:4:24: note: '*' produces 'Double',\
    \ not the expected contextual result type '[Int]'\n    public static func * (lhs:\
    \ Double, rhs: Double) -> Double\n                       ^\nSwift.Float80:4:24:\
    \ note: '*' produces 'Float80', not the expected contextual result type '[Int]'\n\
    \    public static func * (lhs: Float80, rhs: Float80) -> Float80\n          \
    \             ^\nSwift.UInt8:9:24: note: '*' produces 'UInt8', not the expected\
    \ contextual result type '[Int]'\n    public static func * (lhs: U"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return (0...guess).compactMap { guessesAt in\n        (game...guessesAt).map\
    \ { guess, score in\n            guard score > 0 else { return 0 }\n         \
    \   return abs(score - guess)\n        }\n    }.map { $0.reduce(0) { $0 + $1 }\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5,\
    \ 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmpzhayek.swift:15:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return (0...guess).compactMap { guessesAt in\n        \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008742
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var guessedCorrectly = true //true if the difference between the\
    \ two guesses is zero.\n    var guesses = [Int]() //the array holding the guesses\
    \ (sorted)\n    var differences = [Int]() //the array holding the differences\
    \ (sorted)\n    for index in 0..<game.count {\n        //determine if the two\
    \ guesses match.\n        if game[index] == guess[index] {\n            guesses.append(game[index])\n\
    \            differences.append(0)\n        }\n        else {\n            guesses.append(guess[index])\n\
    \            differences.append(abs(game[index] - guess[index]))\n           \
    \ guessedCorrectly = false\n        }\n    }\n    if guessedCorrectly == false\
    \ {\n        //the two guesses did not match, so find the smallest difference\
    \ among the guesses.\n        var minDiff = differences[0]\n        for index\
    \ in 0..<differences.count {\n            if differences[index] < minDiff {\n\
    \                minDiff = differences[index]\n            }\n        }\n    \
    \    for index in 0..<guesses.count {\n            differences[index] -= minDiff\n\
    \        }\n    }\n    return differences\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpap76y6iz/tmpap76y6iz.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c05426c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c0511db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c0511d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c0511c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpap76y6iz                        0x0000564ded465bd4 <unavailable> + 7124

    5    libc.so.6                          0x00002b8c05612460 __libc_start_main +
    245

    6    tmpap76y6iz                        0x0000564ded4653f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var difference = guess\n    guard game.count != guess.count else\
    \ { return difference }\n    for i in 0..<game.count {\n        if game[i] < guess[i]\
    \ {\n            difference[i] = game[i] - guess[i]\n        } else {\n      \
    \      difference[i] = guess[i] - game[i]\n        }\n    }\n    return difference\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpovb1j5kr/tmpovb1j5kr.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1a1fccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1a1cc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1a1cc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1a1cc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovb1j5kr                        0x000055e9b7ea76e4 <unavailable> + 5860

    5    libc.so.6                          0x00002ac1a21b8460 __libc_start_main +
    245

    6    tmpovb1j5kr                        0x000055e9b7ea7259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n\tlet len = game.count\n\tvar g = 0\n\tvar result = [Int]()\n\tlet\
    \ differences = zip(guess, game).filter { (g, _) in g != $0 }.map { ($0 - $1)\
    \ }\n\n\tfor _ in 0 ..< guess.length {\n\t\tg += Int(differences[Int(arc4random_uniform(UInt32(len)))\
    \ - 1])\n\t\tresult.append(g)\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdm9niqk_.swift:18:61: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments; did you mean 'g'?\n  \
    \      let differences = zip(guess, game).filter { (g, _) in g != $0 }.map { ($0\
    \ - $1) }\n                                                                  \
    \ ^~\n                                                                   g\n/tmp/tmpdm9niqk_.swift:20:23:\
    \ error: value of type '[Int]' has no member 'length'\n        for _ in 0 ..<\
    \ guess.length {\n                       ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return compare(game, guess, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmphcqn3hmo.swift:15:33: error: extra argument in call\n    return\
    \ compare(game, guess, 0)\n                  ~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    var counter\
    \ = game.count\n    var resultIndex = game.count\n    var guessIndex = 0\n   \
    \ while guessIndex < counter{\n        result[resultIndex] = abs(game[resultIndex]\
    \ - guess[guessIndex])\n        resultIndex += 1\n        guessIndex += 1\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afc71f13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc71c0a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc71c0a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc71c0a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc71c09bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afc71a09e83 <unavailable> + 188035

    6    tmpv6njrmck                        0x00005570aa586cd9 <unavailable> + 7385

    7    tmpv6njrmck                        0x00005570aa5865b3 <unavailable> + 5555

    8    libc.so.6                          0x00002afc720ff460 __libc_start_main +
    245

    9    tmpv6njrmck                        0x00005570aa586229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    guard game.count == guess.count else {\n        return []\n   \
    \ }\n    \n    var distance: [Int] = Array(repeating: 0, count: game.count)\n\
    \    \n    for i in 0..<game.count {\n        distance[i] = abs(guess[i] - game[i])\n\
    \    }\n    \n    return distance\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return (0..<guess.count).map { guessedIndex in\n        let guessedValue\
    \ = game[guessedIndex]\n        return abs(guessedValue - guess[guessedIndex])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2, 3,\
    \ 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n\
    \    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    \n    \n    \n\
    \    while a < game.count && b < guess.count {\n        if game[a] == guess[b]\
    \ {\n            a++\n            b++\n        }\n        else if game[a] > guess[b]\
    \ {\n            b++\n        }\n        else {\n            a++\n        }\n\
    \    }\n    \n    \n    while a < game.count {\n        c = game[a]\n        d\
    \ = a\n        a++\n        \n        while b < guess.count {\n            if\
    \ c == guess[b] {\n                b++\n            }\n            else if c >\
    \ guess[b] {\n                b++\n            }\n            else {\n       \
    \         a++\n            }\n        }\n        \n        e = 0\n        if d\
    \ == b {\n            f = 0\n        }\n        else {\n            f = abs(c\
    \ - d)\n        }\n        \n        g = 0\n        h = 0\n        if d == b {\n\
    \            g = 0\n            h = 0\n        }\n        else {\n           \
    \ g = abs(c - d)\n            h = abs(c - d)\n        }\n        \n        \n\
    \        if f < 0 {\n            if g < 0 {\n                let n = c + abs(b\
    \ - guess.count)\n                if n < game.count {\n                    let\
    \ result = n - game.count\n                    return [result]\n             \
    \   }\n            }\n            else {\n                let n = c + abs(b -\
    \ guess.count)\n                if n < game.count {\n                    let result\
    \ = n - game.count\n                    return [result]\n                }\n \
    \           }\n        }\n        else if g < 0 {\n            let n = c + abs(b\
    \ - guess.count)\n            if n < game.count {\n                let result\
    \ = n - game.count\n                return [result]\n            }\n        }\n\
    \        else {\n            if h < 0 {\n                let n = c + abs(b - guess.count)\n\
    \                if n < game.count {\n                    let result = n - game.count\n\
    \                    return [result]\n                }\n            }\n     \
    \       else {\n                let n = c + abs(b - guess.count)\n           \
    \     if n < game.count {\n                    let result = n - game.count\n \
    \                   return [result]\n                }\n            }\n      \
    \  }\n        \n    }\n    \n    \n    \n    while a < game.count {\n        c\
    \ = game[a]\n        d = a\n        a++\n        \n        while b < guess.count\
    \ {\n            if c == guess[b] {\n                b++\n            }\n    \
    \        else if c > guess[b] {\n                b++\n            }\n        \
    \    else {\n                a++\n            }\n        }\n        \n       \
    \ \n        e = 0\n        if d == b {\n            f = 0\n        }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmprxvzg41y.swift:162:74: error: expected '}' at end of brace statement\n\
    assert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])\n  \
    \                                                                       ^\n/tmp/tmprxvzg41y.swift:14:50:\
    \ note: to match this opening '{'\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n                                                 ^\n/tmp/tmprxvzg41y.swift:29:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  a++\n             ^~\n/tmp/tmprxvzg41y.swift:30:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            b++\n             ^~\n/tmp/tmprxvzg41y.swift:33:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  b++\n             ^~\n/tmp/tmprxvzg41y.swift:36:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            a++\n             ^~\n/tmp/tmprxvzg41y.swift:44:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        a++\n\
    \         ^~\n/tmp/tmprxvzg41y.swift:48:18: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n                b++\n                 ^~\n/tmp/tmprxvzg41y.swift:51:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      b++\n                 ^~\n/tmp/tmprxvzg41y.swift:54:18: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n                a++\n        \
    \         ^~\n/tmp/tmprxvzg41y.swift:125:10: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        a++\n         ^~\n/tmp/tmprxvzg41y.swift:129:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      b++\n                 ^~\n/tmp/tmprxvzg41y.swift:132:18: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n                b++\n   \
    \              ^~\n/tmp/tmprxvzg41y.swift:135:18: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n                a++\n                 ^~\n\
    /tmp/tmprxvzg41y.swift:147:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ="
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var guessedCorrectly: [Int] = []\n    for i in 0..<game.count {\n\
    \        if game[i] == guess[i] {\n            guessedCorrectly.append(0)\n  \
    \      } else {\n            guessedCorrectly.append(abs(guess[i] - game[i]))\n\
    \        }\n    }\n    return guessedCorrectly\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    if game.count != guess.count {\n        return []\n    }\n    var\
    \ result = guess\n    for var index = 0; index < game.count; index++ {\n     \
    \   if game[index] != guess[index] {\n            result[index] = (abs(game[index]\
    \ - guess[index]))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpetbob_5u.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var index = 0; index < game.count; index++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    // Set all values to negative infinity\n    var gameCopy\
    \ = game.map { $0 - Int.min }\n    \n    var bestDiff = guess[0].map { Int.min\
    \ }\n    var bestGuess = 0\n    \n    // Keep going until you get something too\
    \ far off\n    while bestDiff != 0 {\n        \n        gameCopy = gameCopy.map\
    \ { $0 - bestGuess[0] }\n        \n        // Take all of the values from the\
    \ guess, subtract them from the game values, then find the difference\n      \
    \  bestDiff = guess[0].map { abs($0 - $1 - bestGuess[0]) - bestDiff }\n      \
    \  bestGuess = guess[0]\n    }\n    \n    // Return an array of just the best\
    \ diffs\n    return bestDiff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpvz11mcg4.swift:19:29: error: value of type 'Int' has no member\
    \ 'map'\n    var bestDiff = guess[0].map { Int.min }\n                   ~~~~~~~~\
    \ ^~~\n/tmp/tmpvz11mcg4.swift:25:49: error: value of type 'Int' has no subscripts\n\
    \        gameCopy = gameCopy.map { $0 - bestGuess[0] }\n                     \
    \                  ~~~~~~~~~^\n/tmp/tmpvz11mcg4.swift:28:29: error: value of type\
    \ 'Int' has no member 'map'\n        bestDiff = guess[0].map { abs($0 - $1 - bestGuess[0])\
    \ - bestDiff }\n                   ~~~~~~~~ ^~~\n/tmp/tmpvz11mcg4.swift:28:58:\
    \ error: value of type 'Int' has no subscripts\n        bestDiff = guess[0].map\
    \ { abs($0 - $1 - bestGuess[0]) - bestDiff }\n                               \
    \                 ~~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // TODO: fill this in.\n    return []\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpywayfkkx/tmpywayfkkx.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c1043cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c10133b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c10133988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c101327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywayfkkx                        0x00005605a108e454 <unavailable> + 5204

    5    libc.so.6                          0x00002b5c10628460 __libc_start_main +
    245

    6    tmpywayfkkx                        0x00005605a108dfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // TODO: fill this in\n    return []\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp1pi48ybk/tmp1pi48ybk.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4019f41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4019c38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4019c38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4019c377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1pi48ybk                        0x000055c612f65454 <unavailable> + 5204

    5    libc.so.6                          0x00002b401a12d460 __libc_start_main +
    245

    6    tmp1pi48ybk                        0x000055c612f64fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gs = Array<Int>()\n    var gsg = Array<Int>()\n    for el in\
    \ guess {\n        gsg.append(el)\n    }\n    for el in game {\n        gs.append(el)\n\
    \    }\n    guard gs.count >= gsg.count else {\n        return [Int](repeating:\
    \ 0, count: gs.count)\n    }\n    guard gs.count == gsg.count else {\n       \
    \ return [Int](repeating: 0, count: gs.count)\n    }\n    var gsgmin = min(gsg)\n\
    \    var gsmin = min(gs)\n    var gsmax = max(gs)\n    var gsgmax = max(gsg)\n\
    \    var result = [Int](repeating: 0, count: gs.count)\n    var resultminus =\
    \ [Int](repeating: 0, count: gs.count)\n    for i in 0..<gs.count {\n        let\
    \ min = min(gsmin, gsgmin)\n        let max = max(gsmax, gsgmax)\n        if gsmax\
    \ == gsgmax {\n            resultminus[i] = 0\n        } else {\n            resultminus[i]\
    \ = abs(gs[i] - gsg[i])\n        }\n        let r = Int(absdiv((gsmax-gsgmax)*gsmax,\
    \ abs(gsmax-gsgmin))) * Int(absdiv(gsmax-gsgmin, abs(gs[i] - gsmin)))\n      \
    \  result[i] = r\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmptnsxp7gm.swift:29:25: error: missing argument for parameter #2\
    \ in call\n    var gsgmin = min(gsg)\n                        ^\n            \
    \            , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable\
    \ public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmptnsxp7gm.swift:30:23: error: missing argument for parameter\
    \ #2 in call\n    var gsmin = min(gs)\n                      ^\n             \
    \         , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmptnsxp7gm.swift:31:23: error: missing argument for parameter #2\
    \ in call\n    var gsmax = max(gs)\n                      ^\n                \
    \      , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmptnsxp7gm.swift:32:25: error: missing argument for parameter #2\
    \ in call\n    var gsgmax = max(gsg)\n                        ^\n            \
    \            , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable\
    \ public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmptnsxp7gm.swift:43:21: error: cannot find 'absdiv' in scope\n\
    \        let r = Int(absdiv((gsmax-gsgmax)*gsmax, abs(gsmax-gsgmin))) * Int(absdiv(gsmax-gsgmin,\
    \ abs(gs[i] - gsmin)))\n                    ^~~~~~\n/tmp/tmptnsxp7gm.swift:43:76:\
    \ error: cannot find 'absdiv' in scope\n        let r = Int(absdiv((gsmax-gsgmax)*gsmax,\
    \ abs(gsmax-gsgmin))) * Int(absdiv(gsmax-gsgmin, abs(gs[i] - gsmin)))\n      \
    \                                                                     ^~~~~~\n\
    /tmp/tmptnsxp7gm.swift:43:50: error: global function 'abs' requires that 'Duration'\
    \ conform to 'SignedNumeric'\n        let r = Int(absdiv((gsmax-gsgmax)*gsmax,\
    \ abs(gsmax-gsgmin))) * Int(absdiv(gsmax-gsgmin, abs(gs[i] - gsmin)))\n      \
    \                                           ^\nSwift.abs:1:24: note: where 'T'\
    \ = 'Duration'\n@inlinable public func abs<T>(_ x: "
  stdout: ''
  timestamp: 1660008676
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // write your code in an appropriate way\n\n    var result = [Int]()\n\
    \    for i in 0 ..< game.count {\n        var gameNum = game[i]\n        var guessNum\
    \ = guess[i]\n        if gameNum == guessNum {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(gameNum-guessNum))\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n\tlet gameLength = game.count\n\tlet guessLength = guess.count\n\t\n\
    \tif gameLength != guessLength {\n\t\tfatalError(\"the two arrays should have\
    \ the same length\")\n\t}\n\t\n\tvar result = [Int](repeating: 0, count: gameLength)\n\
    \t\n\tfor index in 0..<gameLength {\n\t\tif game[index] == guess[index] {\n\t\t\
    \tresult[index] = 0\n\t\t} else {\n\t\t\tresult[index] = abs(game[index] - guess[index])\n\
    \t\t}\n\t}\n\t\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var score = 0\n    var correct = 0\n    for i in 0..<guess.count\
    \ {\n        if game[i] == guess[i] {\n            score += 1\n        } else\
    \ {\n            correct = max(correct, abs(game[i] - guess[i]))\n        }\n\
    \    }\n    return correct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpa9en7vwo.swift:24:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return correct\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var results: [Int] = Array(repeating: 0, count: guess.count)\n\
    \    for i in 0..<guess.count {\n        let gameIndex = game.index(of: guess[i])\n\
    \        results[i] = max(game[i] - guess[i], abs(guess[i] - game[i]))\n    }\n\
    \    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return game.enumerated().zip(guess).map { (index, (value1, value2))\
    \ -> (Int, Int) in\n        let difference = abs(value1 - value2)\n        if\
    \ difference == 0 {\n            return 0\n        }\n        return (difference,\
    \ index)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq7km9kgp.swift:15:55: warning: unnamed parameters must be written\
    \ with the empty name '_'\n    return game.enumerated().zip(guess).map { (index,\
    \ (value1, value2)) -> (Int, Int) in\n                                       \
    \               ^\n                                                      _: \n\
    /tmp/tmpq7km9kgp.swift:15:55: error: closure tuple parameter does not support\
    \ destructuring\n    return game.enumerated().zip(guess).map { (index, (value1,\
    \ value2)) -> (Int, Int) in\n                                                \
    \      ^~~~~~~~~~~~~~~~\n                                                    \
    \  arg1\n/tmp/tmpq7km9kgp.swift:16:30: error: cannot find 'value1' in scope\n\
    \        let difference = abs(value1 - value2)\n                             ^~~~~~\n\
    /tmp/tmpq7km9kgp.swift:16:39: error: cannot find 'value2' in scope\n        let\
    \ difference = abs(value1 - value2)\n                                      ^~~~~~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var differences = [Int]()\n    var index = 0\n    for i in 0..<game.count\
    \ {\n        differences.append(abs(game[index] - guess[index]))\n        index\
    \ += 1\n    }\n    return differences\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var match = 0\n    var totalGuessesSoFar = 0\n    var tempScore\
    \ = 0\n    var correct = 0\n    for idx in 0..<guess.count {\n        total +=\
    \ game[idx]\n        if game[idx] != guess[idx] {\n            correct += abs(game[idx]\
    \ - guess[idx])\n            match += 1\n            totalGuessesSoFar += 1\n\
    \        }\n        tempScore = game[idx]\n        game[idx] = 0\n    }\n    total\
    \ += game[guess[guess.count-1]]\n    return [total, correct, totalGuessesSoFar,\
    \ match, tempScore]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxcyqzwd2.swift:20:9: error: cannot find 'total' in scope\n    \
    \    total += game[idx]\n        ^~~~~\n/tmp/tmpxcyqzwd2.swift:27:13: error: cannot\
    \ assign through subscript: 'game' is a 'let' constant\n        game[idx] = 0\n\
    \        ~~~~^\n/tmp/tmpxcyqzwd2.swift:29:5: error: cannot find 'total' in scope\n\
    \    total += game[guess[guess.count-1]]\n    ^~~~~\n/tmp/tmpxcyqzwd2.swift:30:13:\
    \ error: cannot find 'total' in scope\n    return [total, correct, totalGuessesSoFar,\
    \ match, tempScore]\n            ^~~~~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var diff = 0\n    var maxDiff = 0\n    var maxGuessIndex = 0\n\
    \    for i in 0..<game.count {\n        if game[i] == guess[i] {\n           \
    \ diff += 0\n        } else {\n            diff += abs(game[i] - guess[i])\n \
    \       }\n        if diff > maxDiff {\n            maxDiff = diff\n         \
    \   maxGuessIndex = i\n        }\n    }\n    return maxGuessIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp85w4a9zb.swift:29:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return maxGuessIndex\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    guard game.count == guess.count else {\n        print(\"number\
    \ of elements are different\")\n        return [0]\n    }\n    var result: Int\
    \ = 0\n    var countOfGuesses = 0\n    for _ in 0 ..< game.count {\n        for\
    \ _ in 0 ..< game.count {\n            if game[_] == guess[_] {\n            \
    \    countOfGuesses += 1\n            }\n        }\n        if countOfGuesses\
    \ == game.count {\n            result = 0\n            break\n        } else {\n\
    \            result += game[game.count - countOfGuesses] - guess[game.count -\
    \ countOfGuesses]\n        }\n        countOfGuesses = 0\n    }\n    return result\
    \ < 0 ? [abs(result)] : [result]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4fsfwbdz.swift:23:21: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n            if game[_] == guess[_] {\n  \
    \                  ^\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let size = game.count\n    var result = [Int](repeating: 0, count:\
    \ size)\n    for index in 0..<size {\n        if index < size {\n            result[index]\
    \ = game[index] - guess[index]\n        }\n        else {\n            result[index]\
    \ = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    if game.count != guess.count {\n        print(\"Error: the number\
    \ of scores does not equal the number of guesses\")\n    }\n    var result = Array(repeating:\
    \ 0, count: game.count)\n    for index in 0..<game.count {\n        if game[index]\
    \ == guess[index] {\n            result[index] = 0\n        } else {\n       \
    \     result[index] = abs(game[index] - guess[index])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameTotal = Int()\n    var guessedTotal = Int()\n    var wrong\
    \ = Int()\n\n    for index in 0..<game.count {\n        gameTotal += game[index]\n\
    \    }\n    for index in 0..<guess.count {\n        guessedTotal += guess[index]\n\
    \    }\n\n    for index in 0..<guess.count {\n        if guessedTotal == gameTotal\
    \ {\n            wrong = guess - game\n            break\n        }\n    }\n\n\
    \    return wrong\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpit0h4oqw.swift:28:27: error: binary operator '-' cannot be applied\
    \ to two '[Int]' operands\n            wrong = guess - game\n                \
    \    ~~~~~ ^ ~~~~\n/tmp/tmpit0h4oqw.swift:28:27: error: no '-' candidates produce\
    \ the expected contextual result type 'Int'\n            wrong = guess - game\n\
    \                          ^\nSwift.AdditiveArithmetic:5:17: note: '-' produces\
    \ '[Int]', not the expected contextual result type 'Int'\n    static func - (lhs:\
    \ Self, rhs: Self) -> Self\n                ^\nSwift.AdditiveArithmetic:5:17:\
    \ note: '-' produces '[Int]', not the expected contextual result type 'Int'\n\
    \    static func - (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.Strideable:4:24:\
    \ note: '-' produces '[Int]', not the expected contextual result type 'Int'\n\
    \    public static func - (lhs: Self, rhs: Self.Stride) -> Self\n            \
    \           ^\nSwift.Strideable:4:24: note: '-' produces '[Int]', not the expected\
    \ contextual result type 'Int'\n    public static func - (lhs: Self, rhs: Self.Stride)\
    \ -> Self\n                       ^\nSwift.Strideable:5:24: note: '-' produces\
    \ '_', not the expected contextual result type 'Int'\n    public static func -\
    \ (lhs: Self, rhs: Self) -> Self.Stride\n                       ^\nSwift.Strideable:5:24:\
    \ note: '-' produces '_', not the expected contextual result type 'Int'\n    public\
    \ static func - (lhs: Self, rhs: Self) -> Self.Stride\n                      \
    \ ^\nSwift.FloatingPoint:25:26: note: '-' produces '[Int]', not the expected contextual\
    \ result type 'Int'\n    override static func - (lhs: Self, rhs: Self) -> Self\n\
    \                         ^\nSwift.FloatingPoint:25:26: note: '-' produces '[Int]',\
    \ not the expected contextual result type 'Int'\n    override static func - (lhs:\
    \ Self, rhs: Self) -> Self\n                         ^\nSwift.BinaryInteger:20:26:\
    \ note: '-' produces '[Int]', not the expected contextual result type 'Int'\n\
    \    override static func - (lhs: Self, rhs: Self) -> Self\n                 \
    \        ^\nSwift.BinaryInteger:20:26: note: '-' produces '[Int]', not the expected\
    \ contextual "
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var winningScores = [Int]()\n    \n \
    \   for i in 0..<guess.length {\n        var currentScore = Int(guess[i])\n  \
    \      var winningScore = Int(game[i])\n        let currentResult = (winningScore\
    \ - currentScore)\n        if currentResult > 0 {\n            result.append(abs(currentResult))\n\
    \            winningScores.append(currentScore)\n        }\n    }\n    \n    for\
    \ i in 0..<winningScores.count {\n        if winningScores[i] == 0 {\n       \
    \     continue\n        }\n        if winningScores[i] > 0 && winningScores[i\
    \ - 1] == winningScores[i] {\n            result.append(0)\n            continue\n\
    \        }\n        if winningScores[i - 1] > 0 && winningScores[i] > winningScores[i\
    \ - 1] {\n            result.append(abs(winningScores[i] - winningScores[i - 1]))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmppl_3a5ag.swift:18:24: error: value of type '[Int]' has no member\
    \ 'length'\n    for i in 0..<guess.length {\n                 ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var answer = []\n    for i in 0..<guess.count {\n        if game[i]\
    \ == guess[i] {\n            answer[i] = 0\n        } else if game[i] < guess[i]\
    \ {\n            answer[i] = abs(game[i] - guess[i])\n        } else {\n     \
    \       answer[i] = abs(guess[i] - game[i])\n        }\n    }\n    return answer\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp83vxx869.swift:15:18: error: empty collection literal requires\
    \ an explicit type\n    var answer = []\n                 ^~\n/tmp/tmp83vxx869.swift:25:12:\
    \ error: cannot convert return expression of type '[Any]' to return type '[Int]'\n\
    \    return answer\n           ^\n/tmp/tmp83vxx869.swift:25:12: note: arguments\
    \ to generic parameter 'Element' ('Any' and 'Int') are expected to be equal\n\
    \    return answer\n           ^\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var guessesTot = guess[game.count]\n    var gameTot = game[game.count]\n\
    \    for i in 0..<game.count {\n        let diff = abs(gameTot-guessesTot)\n \
    \       guessesTot = guess[game.count]\n        gameTot = game[game.count]\n \
    \   }\n    return gameTot-guessesTot\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpl5g9cgai.swift:22:19: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return gameTot-guessesTot\n         \
    \  ~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n\n    for\
    \ index in 0..<game.count {\n        if game[index] == guess[index] {\n      \
    \      result[index] = 0\n        } else if game[index] > guess[index] {\n   \
    \         result[index] = game[index] - guess[index]\n        } else {\n     \
    \       result[index] = guess[index] - game[index]\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // Write your code here\n    guard game.count == guess.count else\
    \ {\n        return game\n    }\n    var array = [Int]()\n    var i = 0\n    for\
    \ _ in 0..<guess.count {\n        array.append(guess[i])\n        i = i + 1\n\
    \    }\n    for _ in 0..<game.count {\n        array.append(game[i])\n       \
    \ i = i + 1\n    }\n    guard let firstArray = array, let secondArray = game else\
    \ {\n        return array\n    }\n    var result = [Int]()\n    var i = firstArray.startIndex\n\
    \    for _ in 0..<guess.count {\n        let difference = abs(firstArray[i] -\
    \ secondArray[i])\n        result.append(difference)\n        i = i + 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4g8e9s21.swift:29:11: error: initializer for conditional binding\
    \ must have Optional type, not '[Int]'\n    guard let firstArray = array, let\
    \ secondArray = game else {\n          ^                ~~~~~\n/tmp/tmp4g8e9s21.swift:29:35:\
    \ error: initializer for conditional binding must have Optional type, not '[Int]'\n\
    \    guard let firstArray = array, let secondArray = game else {\n           \
    \                       ^                 ~~~~\n/tmp/tmp4g8e9s21.swift:33:9: error:\
    \ invalid redeclaration of 'i'\n    var i = firstArray.startIndex\n        ^\n\
    /tmp/tmp4g8e9s21.swift:20:9: note: 'i' previously declared here\n    var i = 0\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var correct = [Int]()\n    var wrong = [Int]()\n    guard game.count\
    \ == guess.count else {\n        print(\"Error: game.count != guess.count \\(game.count)\
    \ != \\(guess.count)\")\n        return wrong\n    }\n    for _ in 0 ..< game.count\
    \ {\n        wrong.append(0)\n    }\n    for (_, v) in zip(game, guess) {\n  \
    \      if v == 0 {\n            wrong.removeLast()\n        }\n        correct.append(v)\n\
    \    }\n    return correct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpbrs2gsqy/tmpbrs2gsqy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d90278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d8ff6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d8ff6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d8ff6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrs2gsqy                        0x000055bfb9de2c14 <unavailable> + 7188

    5    libc.so.6                          0x00002b2d90464460 __libc_start_main +
    245

    6    tmpbrs2gsqy                        0x000055bfb9de2789 <unavailable> + 6025

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return guessed.map { (index, score) in\n        if score == game[index]\
    \ {\n            return 0\n        }\n        return abs(score - game[index])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2, 3,\
    \ 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc536hj2u.swift:15:12: error: cannot find 'guessed' in scope\n \
    \   return guessed.map { (index, score) in\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    guard game.count == guess.count else {\n        return []\n   \
    \ }\n    var diff = [Int]()\n    for (_, g) in zip(game, guess) {\n        let\
    \ dg = abs(g - Int(g))\n        let d = abs(g - Int(g))\n        diff.append(min(d,\
    \ dg))\n    }\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpvxwxdtwq/tmpvxwxdtwq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac541017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac540d0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac540d0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac540d0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxwxdtwq                        0x0000563dacf177d4 <unavailable> + 6100

    5    libc.so.6                          0x00002ac541203460 __libc_start_main +
    245

    6    tmpvxwxdtwq                        0x0000563dacf17349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // The code below is just to give you an idea of how this problem\
    \ could be solved.\n    // It is not meant to be efficient and may use some tricks.\n\
    \    var score = 0\n    for i in 0..<game.count {\n        score += abs(game[i]\
    \ - guess[i])\n    }\n    return score\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpuep5hqpb.swift:21:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return score\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = guess\n    for i in 0..<game.count {\n        if result[i]\
    \ == game[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(guess[i] - game[i])\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let array = [Int](game)\n    let array2 = [Int](guess)\n    let\
    \ length = array2.count\n    var result = [Int](repeating: 0, count: length)\n\
    \    for i in 0 ..< length {\n        var guess = 0\n        if array[i] == 0\
    \ {\n            guess = array2[i]\n        } else if array[i] != array2[i] {\n\
    \            guess = abs(array[i] - array2[i])\n        }\n        result[i] =\
    \ guess\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var results = [Int](repeating: 0, count: guess.count)\n    if game.count\
    \ == guess.count {\n        var i = 0\n        while i < game.count {\n      \
    \      if game[i] == guess[i] {\n                results[i] = 0\n            }\
    \ else {\n                results[i] = abs(game[i] - guess[i])\n            }\n\
    \            i += 1\n        }\n        return results\n    }\n    if game.count\
    \ < guess.count {\n        return nil\n    }\n    \n    let gameArray = game.sorted()\n\
    \    let guessArray = guess.sorted()\n    \n    for index in 0..<game.count {\n\
    \        if gameArray == guess {\n            results[index] = 0\n        } else\
    \ {\n            results[index] = abs(gameArray[index] - guessArray[index])\n\
    \        }\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgqh1jsqg.swift:29:16: error: 'nil' is incompatible with return\
    \ type '[Int]'\n        return nil\n               ^\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var results: [Int] = game\n    \n    for i in 1...min(game.count,\
    \ guess.count) {\n        var guess = guess[i]\n        if guess == 0 {\n    \
    \        results[i] = results[i-1]\n        } else {\n            results[i] =\
    \ abs(guess - results[i-1])\n        }\n    }\n    \n    return results\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b143a8abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b143a5a2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b143a5a2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b143a5a213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b143a5a1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b143a3a1e83 <unavailable> + 188035

    6    tmp2l7uv1ip                        0x000056149917ff24 <unavailable> + 7972

    7    tmp2l7uv1ip                        0x000056149917f723 <unavailable> + 5923

    8    libc.so.6                          0x00002b143aa97460 __libc_start_main +
    245

    9    tmp2l7uv1ip                        0x000056149917f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var correctGuesses = guess.count\n    var wrongGuesses = 0\n\n\
    \    for index in 0..<game.count {\n        correctGuesses = correctGuesses -\
    \ game[index] == guess[index]\n    }\n\n    for index in 0..<guess.count {\n \
    \       wrongGuesses = wrongGuesses + abs(guess[index] - game[index])\n    }\n\
    \n    var finalResult = [Int](count: guess.count, repeatedValue: 0)\n    for index\
    \ in 0..<guess.count {\n        if correctGuesses == 0 {\n            finalResult[index]\
    \ = 0\n        } else {\n            finalResult[index] = abs(guess[index] - game[index])\n\
    \        }\n    }\n    \n    return finalResult\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmplbcks6za.swift:19:55: error: cannot assign value of type 'Bool'\
    \ to type 'Int'\n        correctGuesses = correctGuesses - game[index] == guess[index]\n\
    \                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n/tmp/tmplbcks6za.swift:26:23:\
    \ error: no exact matches in call to initializer \n    var finalResult = [Int](count:\
    \ guess.count, repeatedValue: 0)\n                      ^\n/tmp/tmplbcks6za.swift:26:23:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var finalResult = [Int](count: guess.count, repeatedValue: 0)\n  \
    \                    ^\n/tmp/tmplbcks6za.swift:26:23: note: candidate has partially\
    \ matching parameter list (repeating: Int, count: Int)\n    var finalResult =\
    \ [Int](count: guess.count, repeatedValue: 0)\n                      ^\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return compare(game: game, guess: guess, numGames: guess.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8x_z6uwz.swift:15:62: error: extra argument 'numGames' in call\n\
    \    return compare(game: game, guess: guess, numGames: guess.count)\n       \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return compare(game: game, guess: guess, scores: game, guesses:\
    \ guess)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmppxu720nc.swift:15:19: error: extra arguments at positions #3, #4\
    \ in call\n    return compare(game: game, guess: guess, scores: game, guesses:\
    \ guess)\n                  ^\n/tmp/tmppxu720nc.swift:14:6: note: 'compare(game:guess:)'\
    \ declared here\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n     ^\n"
  stdout: ''
  timestamp: 1660008670
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var guessesDiff = [Int](repeating: 0, count: game.count)\n\n  \
    \  for i in 0..<game.count {\n        var diff: Int = 0\n        if game[i] ==\
    \ guess[i] {\n            guessesDiff[i] = 0\n        } else {\n            diff\
    \ = abs(game[i] - guess[i])\n            guessesDiff[i] = diff < guessesDiff[i]\
    \ ? diff : guessesDiff[i]\n        }\n    }\n    return guessesDiff\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpfio224tk/tmpfio224tk.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f89e47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f89b3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f89b3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f89b3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfio224tk                        0x000055e19d4eb834 <unavailable> + 6196

    5    libc.so.6                          0x00002b1f8a033460 __libc_start_main +
    245

    6    tmpfio224tk                        0x000055e19d4eb3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameArr: [Int] = []\n    var guessArr: [Int] = []\n    for\
    \ i in 0..<game.count {\n        gameArr.append(game[i])\n        guessArr.append(guess[i])\n\
    \    }\n    if game.count == guessArr.count {\n        return gameArr.map { abs($0\
    \ - $1) }\n    } else {\n        return guessArr.map { abs($0 - $1) }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9es_u8tw.swift:22:28: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n        return\
    \ gameArr.map { abs($0 - $1) }\n                           ^\n/tmp/tmp9es_u8tw.swift:24:29:\
    \ error: contextual closure type '(Int) throws -> Int' expects 1 argument, but\
    \ 2 were used in closure body\n        return guessArr.map { abs($0 - $1) }\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    //start here\n    var gameArray = game\n    var guessArray = guess\n\
    \    let gameLen = game.count\n    let guessLen = guess.count\n\n    var result\
    \ = [Int](count: guessLen, repeatedValue: 0)\n\n    for i in 0 ..< guessLen {\n\
    \        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n\
    \            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgtlvkr94.swift:21:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: guessLen, repeatedValue: 0)\n              \
    \   ^\n/tmp/tmpgtlvkr94.swift:21:18: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n    var result = [Int](count: guessLen, repeatedValue:\
    \ 0)\n                 ^\n/tmp/tmpgtlvkr94.swift:21:18: note: candidate has partially\
    \ matching parameter list (repeating: Int, count: Int)\n    var result = [Int](count:\
    \ guessLen, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var score = [Int]()\n    var diff = [Int]()\n    var counter: Int\
    \ = game.count\n    for i in 0 ..< game.count {\n        score[i] = abs(game[i]\
    \ - guess[i])\n        diff[i] = score[i] - abs(game[i])\n        counter = counter\
    \ - 1\n        if counter < 0 {\n            break\n        }\n    }\n    return\
    \ diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2, 3,\
    \ 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb3f81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb3c78561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2fb3c78286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2fb3c7813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2fb3c77bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2fb3a777ec <unavailable> + 186348

    6    tmp6_p73ksv                        0x000055afe584efb3 <unavailable> + 8115

    7    tmp6_p73ksv                        0x000055afe584e723 <unavailable> + 5923

    8    libc.so.6                          0x00002b2fb416d460 __libc_start_main +
    245

    9    tmp6_p73ksv                        0x000055afe584e399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var distance = [Int]()\n    var correct = 0\n    for i in 0..<game.count\
    \ {\n        distance.append(abs(game[i] - guess[i]))\n        if game[i] == guess[i]\
    \ {\n            correct += 1\n        }\n    }\n    return distance\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return game\n        .enumerated()\n        .map({ (index, element)\
    \ -> Int? in\n            if let index = index, let guess = guess[index] {\n \
    \               return abs(guess - element)\n            }\n            return\
    \ nil\n        })\n        .compactMap { $0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp63rkje2p.swift:18:16: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n            if let index = index, let guess\
    \ = guess[index] {\n               ^           ~~~~~\n/tmp/tmp63rkje2p.swift:18:35:\
    \ error: initializer for conditional binding must have Optional type, not 'Int'\n\
    \            if let index = index, let guess = guess[index] {\n              \
    \                    ^           ~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return game.count{ $0 == guess[$0] }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpb0wjn_oc.swift:15:17: error: cannot call value of non-function\
    \ type 'Int'\n    return game.count{ $0 == guess[$0] }\n                ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    guard game.isEmpty == guess.isEmpty else {\n        return [:]\n\
    \    }\n    \n    var result: [Int] = []\n    for i in 0..<game.count {\n    \
    \    if game[i] == guess[i] {\n            result.append(0)\n        } else if\
    \ game[i] > guess[i] {\n            result.append(abs(game[i] - guess[i]))\n \
    \       } else {\n            result.append(abs(guess[i] - game[i]))\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmqd1te7_.swift:16:16: error: cannot convert return expression of\
    \ type '[AnyHashable : Any]' to return type '[Int]'\n        return [:]\n    \
    \           ^~~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameCopy = game\n    var guessCopy = guess\n    var sumGuess\
    \ = Int()\n    var sumGame = Int()\n    for i in 0 ..< gameCopy.count {\n    \
    \    sumGuess = sumGuess + Int(guessCopy[i])\n        sumGame = sumGuess + Int(gameCopy[i])\n\
    \    }\n    var gameResults = [Int]()\n    if sumGuess == sumGame {\n        for\
    \ i in 0 ..< gameCopy.count {\n            if Int(guessCopy[i]) != Int(gameCopy[i])\
    \ {\n                gameResults.append(0)\n            } else {\n           \
    \     gameResults.append(0)\n            }\n        }\n    } else {\n        for\
    \ i in 0 ..< gameCopy.count {\n            if Int(guessCopy[i]) > Int(gameCopy[i])\
    \ {\n                gameResults.append(abs(guessCopy[i] - sumGame))\n       \
    \     } else {\n                gameResults.append(abs(guessCopy[i] - sumGuess))\n\
    \            }\n        }\n    }\n    return gameResults\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpp0b29fdx/tmpp0b29fdx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5039f2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5039c22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5039c22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5039c217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0b29fdx                        0x00005573766cd964 <unavailable> + 6500

    5    libc.so.6                          0x00002b503a117460 __libc_start_main +
    245

    6    tmpp0b29fdx                        0x00005573766cd4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let gameLength = game.count\n    let guessLength = guess.count\n\
    \    var gameScore = [Int]()\n    var guessScore = [Int]()\n    var diff = [Int]()\n\
    \    for var i = 0; i < guessLength; i++ {\n        diff.append(abs(game[i] -\
    \ guess[i]))\n        guessScore.append(guess[i])\n    }\n    for var i = 0; i\
    \ < gameLength; i++ {\n        gameScore.append(game[i])\n    }\n    for var i\
    \ = 0; i < guessLength; i++ {\n        if gameScore[i] == guessScore[i] {\n  \
    \          diff.append(0)\n        } else {\n            diff.append(abs(gameScore[i]\
    \ - guessScore[i]))\n        }\n    }\n    return diff\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpec0whr6z.swift:20:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < guessLength; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpec0whr6z.swift:24:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for var i = 0; i < gameLength; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpec0whr6z.swift:27:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for var i = 0; i < guessLength; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var total: [Int] = []\n    for i in 0..<guess.count {\n       \
    \ var found = false\n        var diff = abs(game[i] - guess[i])\n        for j\
    \ in 0..<game.count {\n            if game[j] == guess[i] {\n                found\
    \ = true\n                break\n            }\n        }\n        if !found {\n\
    \            diff = diff - guess[i]\n        }\n        total.append(diff)\n \
    \   }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpy8_xjxg9/tmpy8_xjxg9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ba7281c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ba6f78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ba6f78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ba6f777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8_xjxg9                        0x00005631b07727d4 <unavailable> + 6100

    5    libc.so.6                          0x00002b1ba746d460 __libc_start_main +
    245

    6    tmpy8_xjxg9                        0x00005631b0772349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let len = min(game.count, guess.count)\n    var diff = [Int](count:\
    \ len, repeatedValue: 0)\n    for i in 0..<len {\n        diff[i] = abs(guess[i]\
    \ - game[i])\n    }\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpr93zct74.swift:16:16: error: no exact matches in call to initializer\
    \ \n    var diff = [Int](count: len, repeatedValue: 0)\n               ^\n/tmp/tmpr93zct74.swift:16:16:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var diff = [Int](count: len, repeatedValue: 0)\n               ^\n\
    /tmp/tmpr93zct74.swift:16:16: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n    var diff = [Int](count: len, repeatedValue:\
    \ 0)\n               ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    guard game.count == guess.count else {\n        return [0]\n  \
    \  }\n    var guessesDiff = Array(count: game.count, repeatedValue: 0)\n    for\
    \ i in 0..<game.count {\n        let difference = abs(game[i] - guess[i])\n  \
    \      guessesDiff[i] = difference\n    }\n    return guessesDiff\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfr7ik1x0.swift:18:23: error: no exact matches in call to initializer\
    \ \n    var guessesDiff = Array(count: game.count, repeatedValue: 0)\n       \
    \               ^\n/tmp/tmpfr7ik1x0.swift:18:23: note: candidate has partially\
    \ matching parameter list (repeating: _, count: Int)\n    var guessesDiff = Array(count:\
    \ game.count, repeatedValue: 0)\n                      ^\n/tmp/tmpfr7ik1x0.swift:18:23:\
    \ note: candidate has partially matching parameter list (repeating: _, count:\
    \ Int)\n    var guessesDiff = Array(count: game.count, repeatedValue: 0)\n   \
    \                   ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: guess[0].count)\n    for\
    \ index in 0..<guess[0].count {\n        if let score = game[index], let guess\
    \ = guess[0][index] {\n            if guess != score {\n                result[index]\
    \ = abs(guess - score)\n            } else {\n                result[index] =\
    \ 0\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpr7ga0ou0.swift:15:54: error: value of type 'Int' has no member\
    \ 'count'\n    var result = [Int](repeating: 0, count: guess[0].count)\n     \
    \                                       ~~~~~~~~ ^~~~~\n/tmp/tmpr7ga0ou0.swift:16:31:\
    \ error: value of type 'Int' has no member 'count'\n    for index in 0..<guess[0].count\
    \ {\n                     ~~~~~~~~ ^~~~~\n/tmp/tmpr7ga0ou0.swift:17:57: error:\
    \ value of type 'Int' has no subscripts\n        if let score = game[index], let\
    \ guess = guess[0][index] {\n                                                ~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    let gameCount = game.count\n    let guessCount\
    \ = guess.count\n    \n    if gameCount == guessCount {\n        for i in 0 ..<\
    \ gameCount {\n            let diff = abs(game[i] - guess[i])\n            result.append(diff\
    \ > 0 ? diff : 0)\n        }\n        return result\n    }\n    \n    let totalGuesses\
    \ = guessCount\n    let totalGames = gameCount\n    var guessIndex = totalGuesses\n\
    \    var gameIndex = 0\n    \n    while guessIndex < totalGuesses {\n        let\
    \ gameDiff = abs(game[gameIndex] - guess[guessIndex])\n        \n        if gameDiff\
    \ > 0 {\n            result.append(gameDiff + totalGames - guessIndex)\n     \
    \   } else {\n            result.append(gameDiff + guessIndex - totalGames)\n\
    \        }\n        \n        guessIndex += 1\n        gameIndex += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    if game.count != guess.count {\n        print(\"Uh oh, I didn't\
    \ get that right. The game had \\(game.count) matches and the guess had \\(guess.count)\
    \ matches. I couldn't compete.\")\n        return []\n    }\n    var totalGuesses\
    \ = 0 // how many were correct?\n    var totalScores = 0 // how many were wrong?\n\
    \    var results = [Int]()\n    for index in 0..<guess.count {\n        if game[index]\
    \ == guess[index] {\n            results.append(0)\n            totalGuesses +=\
    \ 1\n            totalScores += 1\n        } else {\n            let diff = abs(game[index]\
    \ - guess[index])\n            results.append(diff)\n            totalGuesses\
    \ += 1\n            totalScores += diff\n        }\n    }\n    return [totalGuesses,\
    \ totalScores]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpz9hvqia3/tmpz9hvqia3.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b413a526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b413a21db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b413a21d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b413a21c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9hvqia3                        0x000055cfaca66c64 <unavailable> + 7268

    5    libc.so.6                          0x00002b413a712460 __libc_start_main +
    245

    6    tmpz9hvqia3                        0x000055cfaca667d9 <unavailable> + 6105

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    return (0..<game.count).map { index in\n        guard let\
    \ gameIndex = Int(game[index]), let guessIndex = Int(guess[index]), gameIndex\
    \ == guessIndex else {\n            fatalError(\"The indexes given to the function\
    \ are invalid\")\n        }\n        gameIndex == guessIndex ? 0 : abs(guessIndex\
    \ - gameIndex)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpzrzb0xxf.swift:17:15: error: initializer for conditional binding\
    \ must have Optional type, not 'Int'\n        guard let gameIndex = Int(game[index]),\
    \ let guessIndex = Int(guess[index]), gameIndex == guessIndex else {\n       \
    \       ^               ~~~~~~~~~~~~~~~~\n/tmp/tmpzrzb0xxf.swift:17:49: error:\
    \ initializer for conditional binding must have Optional type, not 'Int'\n   \
    \     guard let gameIndex = Int(game[index]), let guessIndex = Int(guess[index]),\
    \ gameIndex == guessIndex else {\n                                           \
    \     ^                ~~~~~~~~~~~~~~~~~\n/tmp/tmpzrzb0xxf.swift:20:33: warning:\
    \ expression of type 'Int' is unused\n        gameIndex == guessIndex ? 0 : abs(guessIndex\
    \ - gameIndex)\n        ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameCount = 0\n    var guessCount = 0\n    var results = [Int]()\n\
    \    for i in 0..<game.count {\n        if game[i] == guess[i] {\n           \
    \ gameCount++\n        } else if game[i] > guess[i] {\n            results.append(abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    results.append(gameCount - guessCount)\n\
    \    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_ze56t18.swift:20:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            gameCount++\n                     ^~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    var guessesCorrect = 0\n    var guessesTotal = game.count\n\
    \    var guessesDiff = 0\n    var totalDiff = 0\n    \n    for index in 0 ..<\
    \ guessesTotal {\n        let diff = abs(guess[index]-game[index])\n        totalDiff\
    \ += diff\n        guessesDiff += diff\n        \n        if abs(guess[index]-game[index])\
    \ == 0 {\n            guessesCorrect++\n        } else {\n            if diff\
    \ > 0 {\n                guessesCorrect++\n            } else {\n            \
    \    guessesCorrect--\n            }\n        }\n    }\n    \n    return [guessesDiff,\
    \ totalDiff, guessesCorrect]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp34yo13_s.swift:27:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            guessesCorrect++\n                       \
    \   ^~\n/tmp/tmp34yo13_s.swift:30:31: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                guessesCorrect++\n                   \
    \           ^~\n/tmp/tmp34yo13_s.swift:32:31: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n                guessesCorrect--\n         \
    \                     ^~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    for i in 0..<game.count {\n       \
    \ if game[i] == guess[i] {\n            result.append(0)\n        } else if abs(game[i]\
    \ - guess[i]) > result[0] {\n            result[0] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpo6ip4qxg/tmpo6ip4qxg.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affcfb97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affcf88eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affcf88e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affcf88d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6ip4qxg                        0x000055bc0ee6c824 <unavailable> + 6180

    5    libc.so.6                          0x00002affcfd83460 __libc_start_main +
    245

    6    tmpo6ip4qxg                        0x000055bc0ee6c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return game.map { $0 - guess[$0] } \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp37celzz4/tmp37celzz4.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2df080c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2ded77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2ded77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2ded767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37celzz4                        0x000055820b59d554 <unavailable> + 5460

    5    libc.so.6                          0x00002ac2df26c460 __libc_start_main +
    245

    6    tmp37celzz4                        0x000055820b59d0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n\tlet gameCount = game.count\n\tlet guessCount = guess.count\n\t\n\t\
    if gameCount == guessCount {\n\t\tlet difference = game.map { abs($0 - $1) }\n\
    \t\t\n\t\treturn difference\n\t}\n\t\n\tvar difference = [Int]()\n\t\n\tfor index\
    \ in 0 ..< gameCount {\n\t\tlet guess = guess[index]\n\t\t\n\t\tlet game = game[index]\n\
    \t\t\n\t\tif guess == game {\n\t\t\tdifference.append(0)\n\t\t} else {\n\t\t\t\
    difference.append(abs(guess - game))\n\t\t}\n\t}\n\t\n\treturn difference\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpirp7faro.swift:19:29: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n              \
    \  let difference = game.map { abs($0 - $1) }\n                              \
    \            ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var results = [Int]()\n    if game.count == guess.count {\n   \
    \     var matchCount = 0\n        for i in 0..<game.count {\n            if game[i]\
    \ == guess[i] {\n                matchCount += 1\n            }\n        }\n \
    \       results.append(matchCount)\n        return results\n    }\n    var diffs\
    \ = [Int]()\n    for j in 0..<guess.count {\n        diffs.append(abs(guess[j]\
    \ - game[j]))\n    }\n    results.append(diffs.max)\n    return results\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpy6zvtdz2.swift:30:13: error: no exact matches in call to instance\
    \ method 'append'\n    results.append(diffs.max)\n            ^\nSwift.Array:6:37:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got '((Int, Int)\
    \ throws -> Bool) throws -> Int?')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got '((Int, Int)\
    \ throws -> Bool) throws -> Int?')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Self.Element)\n                                    ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameScore = game[0]\n    var guessScore = guess[0]\n    var\
    \ gameGuesses = game\n    var guessGuesses = guess\n    var gameMatch = game\n\
    \    var guessMatch = guess\n    var gameMaxScore = game\n    var guessMaxScore\
    \ = guess\n    var gameMinScore = game\n    var guessMinScore = guess\n    \n\
    \    var scoreDifference = [Int]()\n    \n    for index1 in 0..<guessGuesses.count\
    \ {\n        gameScore = gameScore + gameGuesses[index1]\n        guessScore =\
    \ guessScore + guessGuesses[index1]\n        \n        for index2 in 0..<gameGuesses.count\
    \ {\n            if index1 == index2 {\n                continue\n           \
    \ }\n            gameMatch.append(gameGuesses[index1])\n            guessMatch.append(guessGuesses[index1])\n\
    \            \n            gameMinScore = min(gameScore, gameMaxScore)\n     \
    \       guessMinScore = min(guessScore, guessMaxScore)\n            \n       \
    \     gameMaxScore = max(gameScore, gameMinScore)\n            guessMaxScore =\
    \ max(guessScore, guessMinScore)\n            \n            let gameResult = abs(gameScore\
    \ - guessScore)\n            let guessResult = abs(guessScore - gameScore)\n \
    \           \n            if gameScore != guessScore {\n                scoreDifference.append(guessResult)\n\
    \            } else {\n                scoreDifference.append(gameResult)\n  \
    \          }\n        }\n    }\n    \n    return scoreDifference\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpd89zijc7.swift:39:28: error: cannot assign value of type 'Int'\
    \ to type '[Int]'\n            gameMinScore = min(gameScore, gameMaxScore)\n \
    \                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd89zijc7.swift:39:43:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \            gameMinScore = min(gameScore, gameMaxScore)\n                   \
    \                       ^\n/tmp/tmpd89zijc7.swift:40:29: error: cannot assign\
    \ value of type 'Int' to type '[Int]'\n            guessMinScore = min(guessScore,\
    \ guessMaxScore)\n                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpd89zijc7.swift:40:45: error: cannot convert value of type '[Int]' to expected\
    \ argument type 'Int'\n            guessMinScore = min(guessScore, guessMaxScore)\n\
    \                                            ^\n/tmp/tmpd89zijc7.swift:42:28:\
    \ error: cannot assign value of type 'Int' to type '[Int]'\n            gameMaxScore\
    \ = max(gameScore, gameMinScore)\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpd89zijc7.swift:42:43: error: cannot convert value of type '[Int]' to expected\
    \ argument type 'Int'\n            gameMaxScore = max(gameScore, gameMinScore)\n\
    \                                          ^\n/tmp/tmpd89zijc7.swift:43:29: error:\
    \ cannot assign value of type 'Int' to type '[Int]'\n            guessMaxScore\
    \ = max(guessScore, guessMinScore)\n                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpd89zijc7.swift:43:45: error: cannot convert value of type '[Int]' to expected\
    \ argument type 'Int'\n            guessMaxScore = max(guessScore, guessMinScore)\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] { result[i] = 0 }\n    \
    \    else { result[i] = abs(guess[i] - game[i]) }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameScore = 0\n    var guessScore = 0\n    for i in 0..<game.count\
    \ {\n        gameScore += game[i]\n        guessScore += guess[i]\n    }\n   \
    \ var result = [Int](repeating: gameScore, count: game.count)\n    for i in 0..<game.count\
    \ {\n        let guessDiff = guess[i] - gameScore\n        result[i] = guessDiff\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpxjn6lcx2/tmpxjn6lcx2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a1e06fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a1dd66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a1dd66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a1dd657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjn6lcx2                        0x00005574bea1d754 <unavailable> + 5972

    5    libc.so.6                          0x00002b4a1e25b460 __libc_start_main +
    245

    6    tmpxjn6lcx2                        0x00005574bea1d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var bestScore = game[0]\n    var bestDifference = game[0]\n   \
    \ for i in 0..<min(game.count, guess.count) {\n        var currentScore = game[i]\n\
    \        var currentDifference = game[i]\n        if i > 0 {\n            currentScore\
    \ += game[i-1]\n            currentDifference += game[i-1]\n        }\n      \
    \  if i < game.count - guess.count {\n            currentScore += guess[i+1]\n\
    \            currentDifference += guess[i+1]\n        }\n        if currentScore\
    \ < bestScore {\n            bestScore = currentScore\n        }\n        if currentDifference\
    \ < bestDifference {\n            bestDifference = currentDifference\n       \
    \ }\n    }\n    return bestDifference\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4dl7vuqz.swift:35:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return bestDifference\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameCounter = 0\n    var correct = 0\n    for index in 0..<guess.count\
    \ {\n        if (game[index] == guess[index]) {\n            gameCounter += 1\n\
    \        } else {\n            correct += abs(game[index] - guess[index])\n  \
    \      }\n    }\n    var result: [Int] = []\n    var maxDiff = gameCounter\n \
    \   for index in 0..<guess.count {\n        if (game[index] == guess[index]) {\n\
    \            result.append(0)\n        } else {\n            result.append(abs(game[index]\
    \ - guess[index]))\n            if result[index] > maxDiff {\n               \
    \ maxDiff = result[index]\n            }\n        }\n    }\n    return maxDiff\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqogoix67.swift:36:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return maxDiff\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    guard game.count == guess.count else {\n        return [0]\n  \
    \  }\n    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            result[index] = 0\n\
    \        } else {\n            result[index] = abs(game[index] - guess[index])\n\
    \        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b039b7e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b039b4da561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b039b4da286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b039b4da13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b039b4d9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b039b2d97ec <unavailable> + 186348

    6    tmpmp9nvlvl                        0x000055f12c3a1ce8 <unavailable> + 7400

    7    tmpmp9nvlvl                        0x000055f12c3a1593 <unavailable> + 5523

    8    libc.so.6                          0x00002b039b9cf460 __libc_start_main +
    245

    9    tmpmp9nvlvl                        0x000055f12c3a1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var maxGuesses = 0\n    \n    for index in 0..<game.count {\n \
    \       if game[index] == guess[index] {\n            maxGuesses += 1\n      \
    \  } else if game[index] > guess[index] {\n            // game is higher than\
    \ guess\n            maxGuesses += game[index] - guess[index]\n        } else\
    \ {\n            // game is lower than guess\n            maxGuesses += guess[index]\
    \ - game[index]\n        }\n    }\n    \n    var results = [Int]()\n    for index\
    \ in 0..<guess.count {\n        if game[index] > guess[index] {\n            //\
    \ game is higher than guess\n            results += [maxGuesses - guess[index]]\n\
    \        } else {\n            // game is lower than guess\n            results\
    \ += [guess[index] - maxGuesses]\n        }\n    }\n    \n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp8osywswt/tmp8osywswt.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb5a55fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb5a256b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb5a256988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb5a2557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8osywswt                        0x000055688982c744 <unavailable> + 5956

    5    libc.so.6                          0x00002aeb5a74b460 __libc_start_main +
    245

    6    tmp8osywswt                        0x000055688982c2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameScore = 0\n    var guessScore = 0\n    var gameIndex =\
    \ 0\n    var guessIndex = 0\n    var gameScoreArr = [Int]()\n    var guessScoreArr\
    \ = [Int]()\n    var gameScoreArray = [Int]()\n    var guessScoreArray = [Int]()\n\
    \    var maxGameIndex = 0\n    var maxGuessIndex = 0\n    var currentMaxIndex\
    \ = 0\n    var currentMaxScore = 0\n    var currentScore = 0\n    var currentGuessIndex\
    \ = 0\n    var currentGuessScore = 0\n    \n    \n    for _ in game:\n       \
    \ gameScore += game[gameIndex]\n        gameScoreArr.append(gameScore)\n     \
    \   gameIndex += 1\n        \n    for _ in guess:\n        guessScore += guess[guessIndex]\n\
    \        guessScoreArr.append(guessScore)\n        guessIndex += 1\n        \n\
    \    for gameScoreIndex in 0..<game.count {\n        if game[gameScoreIndex] ==\
    \ guess[guessIndex] {\n            gameScore++\n            guessIndex++\n   \
    \         gameScoreArr.append(gameScore)\n            guessScoreArr.append(guessScore)\n\
    \            if gameScoreIndex == game.count - 1 {\n                currentMaxIndex\
    \ = gameScoreIndex\n                currentMaxScore = gameScore\n            \
    \    currentScore = guessScore\n                currentGuessIndex = guessIndex\n\
    \                currentGuessScore = guessScore\n            } else {\n      \
    \          if gameScoreArr[gameScoreIndex] > currentMaxScore {\n             \
    \       currentMaxScore = gameScoreArr[gameScoreIndex]\n                    currentMaxIndex\
    \ = gameScoreIndex\n                }\n            }\n        } else {\n     \
    \       if guessScore > currentScore {\n                currentScore = guessScore\n\
    \                currentGuessScore = guessScore\n                currentGuessIndex\
    \ = guessIndex\n                currentMaxScore = guessScore\n               \
    \ currentMaxIndex = guessIndex\n                \n            }\n        }\n \
    \   }\n    var difference = [Int](count: game.count, repeatedValue: 0)\n    \n\
    \    for _ in 0..<game.count {\n        if currentGuessScore == currentScore {\n\
    \            difference[currentMaxIndex] = currentGuessIndex - currentMaxIndex\n\
    \        } else {\n            difference[currentMaxIndex] = abs(currentGuessScore\
    \ - currentScore)\n        }\n    }\n    return difference\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbvo3skny.swift:32:18: error: expected '{' to start the body of\
    \ for-each loop\n    for _ in game:\n                 ^\n/tmp/tmpbvo3skny.swift:37:19:\
    \ error: expected '{' to start the body of for-each loop\n    for _ in guess:\n\
    \                  ^\n/tmp/tmpbvo3skny.swift:44:22: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            gameScore++\n             \
    \        ^~\n/tmp/tmpbvo3skny.swift:45:23: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            guessIndex++\n                    \
    \  ^~\n/tmp/tmpbvo3skny.swift:71:22: error: no exact matches in call to initializer\
    \ \n    var difference = [Int](count: game.count, repeatedValue: 0)\n        \
    \             ^\n/tmp/tmpbvo3skny.swift:71:22: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var difference = [Int](count:\
    \ game.count, repeatedValue: 0)\n                     ^\n/tmp/tmpbvo3skny.swift:71:22:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var difference = [Int](count: game.count, repeatedValue: 0)\n    \
    \                 ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var array = [Int]()\n    var i = 0\n    var gameSum = 0\n    var\
    \ guessSum = 0\n    for _ in 0..<game.count {\n        gameSum += game[i]\n  \
    \      guessSum += guess[i]\n        array.append(abs(guessSum - gameSum))\n \
    \       i += 1\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnt4_tp4s/tmpnt4_tp4s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3099462c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3099159b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3099159988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30991587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnt4_tp4s                        0x0000558832d21824 <unavailable> + 6180

    5    libc.so.6                          0x00002b309964e460 __libc_start_main +
    245

    6    tmpnt4_tp4s                        0x0000558832d21399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    if game.count != guess.count {\n        return []\n    }\n    var\
    \ off = 0\n    for i in 0..<game.count {\n        let score = game[i]\n      \
    \  let guess = guess[i]\n        if guess < score {\n            off += abs(guess\
    \ - score)\n        } else {\n            off += abs(score - guess)\n        }\n\
    \    }\n    return off\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp59_3t59r.swift:28:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return off\n           ^~~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var scores = [Int]()\n    for index in 0..<guess.count {\n    \
    \    if game[index] == guess[index] {\n            scores.append(0)\n        }\
    \ else {\n            scores.append(abs(game[index] - guess[index]))\n       \
    \ }\n    }\n    return scores\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int]()\n    var index = 0\n    var gameScore = 0\n\
    \    var guessScore = 0\n    while index < game.count {\n        if game[index]\
    \ == guess[index] {\n            gameScore += 1\n        }\n        else {\n \
    \           let absoluteDifference = abs(game[index] - guess[index])\n       \
    \     result.append(absoluteDifference)\n            if absoluteDifference < 0\
    \ {\n                gameScore -= 1\n            }\n            guessScore +=\
    \ 1\n        }\n        index += 1\n    }\n    result.append(gameScore - guessScore)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpdr7a78of/tmpdr7a78of.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc6358cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc63283b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc63283988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc632827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdr7a78of                        0x000055a4f7b4a6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002abc63778460 __libc_start_main +
    245

    6    tmpdr7a78of                        0x000055a4f7b4a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return Array(zip(game, guess).reversed()).map { abs($0 - $1) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpr9xt1qw6/tmpr9xt1qw6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ad3289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ad2f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ad2f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ad2f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9xt1qw6                        0x0000563f78166704 <unavailable> + 5892

    5    libc.so.6                          0x00002b6ad3475460 __libc_start_main +
    245

    6    tmpr9xt1qw6                        0x0000563f78166279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    let maxCount\
    \ = game.count\n    \n    guard game.count == guess.count else { return result\
    \ }\n    \n    guard game.count > 0 else { return result }\n    \n    var gameCount\
    \ = 0\n    var guessCount = 0\n    var scoreDiff = 0\n    \n    for i in 0..<game.count\
    \ {\n        // check game vs guess\n        \n        if game[gameCount] == guess[guessCount]\
    \ {\n            scoreDiff += 0\n            gameCount += 1\n            guessCount\
    \ += 1\n        }\n        \n        guard game[gameCount] > 0 else { return result\
    \ }\n        guard game[gameCount] < maxCount else { return result }\n       \
    \ \n        // check guess vs guess\n        \n        if guess[guessCount] ==\
    \ game[gameCount] {\n            scoreDiff += 0\n            gameCount += 1\n\
    \            guessCount += 1\n        }\n        \n        guard guess[guessCount]\
    \ > 0 else { return result }\n        guard guess[guessCount] < maxCount else\
    \ { return result }\n        \n        // check game vs score\n        \n    \
    \    if game[gameCount] == guess[guessCount] {\n            scoreDiff += 0\n \
    \           gameCount += 1\n        }\n        \n        guard game[gameCount]\
    \ > 0 else { return result }\n        guard game[gameCount] < maxCount else {\
    \ return result }\n        \n        // check guess vs score\n        \n     \
    \   if guess[guessCount] == game[gameCount] {\n            scoreDiff += 0\n  \
    \          gameCount += 1\n        }\n        \n        guard guess[guessCount]\
    \ > 0 else { return result }\n        guard guess[guessCount] < maxCount else\
    \ { return result }\n    }\n    \n    let score = scoreDiff / maxCount\n    \n\
    \    for i in 0..<game.count {\n        if game[gameCount] != scoreDiff {\n  \
    \          result[i] = abs(score - game[gameCount])\n        } else {\n      \
    \      result[i] = 0\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpxms4x76z/tmpxms4x76z.swift:96: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b740e12ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b740de25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b740de25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b740de247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxms4x76z                        0x000055fbd00d0834 <unavailable> + 6196

    5    libc.so.6                          0x00002b740e31a460 __libc_start_main +
    245

    6    tmpxms4x76z                        0x000055fbd00d03a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    if game.count == guess.count {\n        return compare(game, guess,\
    \ count: game.count)\n    }\n    let gameCount = game.count\n    var scores =\
    \ [Int](count: gameCount, repeatedValue: 0)\n    var guesses = [Int](count: gameCount,\
    \ repeatedValue: 0)\n    for i in 0..<gameCount {\n        let diff = (guess[i]\
    \ - game[i])\n        guesses[i] = diff\n        if diff < 0 {\n            scores[diff]\
    \ = -diff\n        } else {\n            scores[diff] = diff\n        }\n    }\n\
    \    return scores\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpss5obxjx.swift:16:49: error: extra argument 'count' in call\n \
    \       return compare(game, guess, count: game.count)\n                     \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n/tmp/tmpss5obxjx.swift:19:18: error: no exact\
    \ matches in call to initializer \n    var scores = [Int](count: gameCount, repeatedValue:\
    \ 0)\n                 ^\n/tmp/tmpss5obxjx.swift:19:18: note: candidate has partially\
    \ matching parameter list (repeating: Int, count: Int)\n    var scores = [Int](count:\
    \ gameCount, repeatedValue: 0)\n                 ^\n/tmp/tmpss5obxjx.swift:19:18:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var scores = [Int](count: gameCount, repeatedValue: 0)\n         \
    \        ^\n/tmp/tmpss5obxjx.swift:20:19: error: no exact matches in call to initializer\
    \ \n    var guesses = [Int](count: gameCount, repeatedValue: 0)\n            \
    \      ^\n/tmp/tmpss5obxjx.swift:20:19: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var guesses = [Int](count:\
    \ gameCount, repeatedValue: 0)\n                  ^\n/tmp/tmpss5obxjx.swift:20:19:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var guesses = [Int](count: gameCount, repeatedValue: 0)\n        \
    \          ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // BEGIN Question 8\n    // The idea is to take the difference\
    \ between the scores and guesses array elements and if the absolute value of this\
    \ difference is more than the score, \n    // this guess is not correct. \n  \
    \  var result = [Int](repeating: 0, count: guess.count)\n    for index in 0..<guess.count\
    \ {\n        result[index] = abs(game[index] - guess[index])\n    }\n    guard\
    \ result.all { $0 > 0 } else { return result }\n    return result\n    // END\
    \ Question 8\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpr5eymd0z.swift:22:22: error: expected 'else' after 'guard' condition\n\
    \    guard result.all { $0 > 0 } else { return result }\n                    \
    \ ^\n                     else \n/tmp/tmpr5eymd0z.swift:22:24: error: anonymous\
    \ closure argument not contained in a closure\n    guard result.all { $0 > 0 }\
    \ else { return result }\n                       ^\n/tmp/tmpr5eymd0z.swift:22:32:\
    \ error: consecutive statements on a line must be separated by ';'\n    guard\
    \ result.all { $0 > 0 } else { return result }\n                             \
    \  ^\n                               ;\n/tmp/tmpr5eymd0z.swift:22:33: error: expected\
    \ expression\n    guard result.all { $0 > 0 } else { return result }\n       \
    \                         ^\n/tmp/tmpr5eymd0z.swift:22:18: error: value of type\
    \ '[Int]' has no member 'all'\n    guard result.all { $0 > 0 } else { return result\
    \ }\n          ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var diff = 0\n\n    // loop through guesses\n    for _ in 0..<guess.count\
    \ {\n        // loop to go through game\n        for _ in 0..<game.count {\n \
    \           // if the score is higher, the diff is higher\n            if game[gameIndex]\
    \ == guess[guessIndex] {\n                diff += 1\n            }\n         \
    \   // if score is lower, the diff is lower\n            if game[gameIndex] <\
    \ guess[guessIndex] {\n                break\n            }\n            // if\
    \ neither score is equal and neither score is higher, the diff is 0\n        \
    \    if game[gameIndex] != guess[guessIndex] {\n                diff += 0\n  \
    \              break\n            }\n            gameIndex += 1\n            guessIndex\
    \ += 1\n        }\n    }\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2spj9esb.swift:22:21: error: cannot find 'gameIndex' in scope\n\
    \            if game[gameIndex] == guess[guessIndex] {\n                    ^~~~~~~~~\n\
    /tmp/tmp2spj9esb.swift:22:41: error: cannot find 'guessIndex' in scope\n     \
    \       if game[gameIndex] == guess[guessIndex] {\n                          \
    \              ^~~~~~~~~~\n/tmp/tmp2spj9esb.swift:26:21: error: cannot find 'gameIndex'\
    \ in scope\n            if game[gameIndex] < guess[guessIndex] {\n           \
    \         ^~~~~~~~~\n/tmp/tmp2spj9esb.swift:26:40: error: cannot find 'guessIndex'\
    \ in scope\n            if game[gameIndex] < guess[guessIndex] {\n           \
    \                            ^~~~~~~~~~\n/tmp/tmp2spj9esb.swift:30:21: error:\
    \ cannot find 'gameIndex' in scope\n            if game[gameIndex] != guess[guessIndex]\
    \ {\n                    ^~~~~~~~~\n/tmp/tmp2spj9esb.swift:30:41: error: cannot\
    \ find 'guessIndex' in scope\n            if game[gameIndex] != guess[guessIndex]\
    \ {\n                                        ^~~~~~~~~~\n/tmp/tmp2spj9esb.swift:34:13:\
    \ error: cannot find 'gameIndex' in scope\n            gameIndex += 1\n      \
    \      ^~~~~~~~~\n/tmp/tmp2spj9esb.swift:35:13: error: cannot find 'guessIndex'\
    \ in scope\n            guessIndex += 1\n            ^~~~~~~~~~\n/tmp/tmp2spj9esb.swift:38:12:\
    \ error: cannot convert return expression of type 'Int' to return type '[Int]'\n\
    \    return diff\n           ^~~~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var correctGuess = 0 // How many correct guesses so far\n    var\
    \ gameScore = 0 // How many points we got from this game\n    var guessScore =\
    \ 0 // How many points we got from the guess\n    \n    // Go through the game\
    \ array, and if the guess at game[i] is in the guesses array, increase the gameScore\n\
    \    for _ in 0 ..< game.count {\n        if game[gameScore] == guess[guessScore]\
    \ {\n            gameScore += 1\n        } else {\n            guessScore += 1\n\
    \            gameScore = guessScore\n        }\n        correctGuess = gameScore\n\
    \    }\n    \n    let gamePoints = [gameScore]\n    let guessPoints = [guessScore]\n\
    \    let differencePoints = [correctGuess]\n    \n    // Go through the guesses\
    \ array and if the guess is correct, increase the difference points\n    for _\
    \ in 0 ..< guess.count {\n        if guess[guessScore] == guess[guessScore] {\n\
    \            differencePoints.append(correctGuess)\n        } else {\n       \
    \     differencePoints.append(abs(guess[guessScore] - gameScore))\n        }\n\
    \    }\n    \n    return differencePoints\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpjm9haoq6.swift:37:30: error: cannot use mutating member on immutable\
    \ value: 'differencePoints' is a 'let' constant\n            differencePoints.append(correctGuess)\n\
    \            ~~~~~~~~~~~~~~~~ ^\n/tmp/tmpjm9haoq6.swift:32:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let differencePoints = [correctGuess]\n   \
    \ ^~~\n    var\n/tmp/tmpjm9haoq6.swift:39:30: error: cannot use mutating member\
    \ on immutable value: 'differencePoints' is a 'let' constant\n            differencePoints.append(abs(guess[guessScore]\
    \ - gameScore))\n            ~~~~~~~~~~~~~~~~ ^\n/tmp/tmpjm9haoq6.swift:32:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let differencePoints = [correctGuess]\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var results = [Int]()\n    var total = 0\n    for i in 0..<game.count\
    \ {\n        total += game[i] - guess[i]\n        results.append(max(0, abs(total\
    \ - game[i])))\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpvssy6hw4/tmpvssy6hw4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6abbf53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6abbc4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6abbc4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6abbc497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvssy6hw4                        0x00005630a2ce8884 <unavailable> + 6276

    5    libc.so.6                          0x00002b6abc13f460 __libc_start_main +
    245

    6    tmpvssy6hw4                        0x00005630a2ce83f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let maxScore = game.reduce(0){ max($0, $1) }\n    let gameScore\
    \ = game.reduce(0){ $0 + $1 }\n    let guessScore = guess.reduce(0){ $0 + $1 }\n\
    \    let bestGuessIndex = guess.indices.contains(where: { $0 == maxScore }) ??\
    \ guess.count\n    let bestGuessScore = bestGuessIndex == guess.count ? bestGuessIndex\
    \ : game[bestGuessIndex] - guess[bestGuessIndex]\n    return [bestGuessScore,\
    \ gameScore - bestGuessScore]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpwhm71en6.swift:18:76: error: binary operator '??' cannot be applied\
    \ to operands of type 'Bool' and 'Int'\n    let bestGuessIndex = guess.indices.contains(where:\
    \ { $0 == maxScore }) ?? guess.count\n                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^  ~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var newGuess: [Int] = []\n    var count = 0\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            newGuess.append(0)\n      \
    \      count += 1\n        } else if game[i] > guess[i] {\n            newGuess.append(game[i]\
    \ - guess[i])\n            count += 1\n        } else {\n            newGuess.append(guess[i]\
    \ - game[i])\n            count += 1\n        }\n    }\n    return newGuess\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    let length = game.count\n    var results = [Int](repeating:\
    \ 0, count: length)\n    var errors = 0.0\n    \n    for case (_, score) in zip(game,\
    \ guess) {\n        \n        // check if we know the result\n        if let result\
    \ = findResult(index: score, guess: guess, results: results) {\n            \n\
    \            // check if we know if the player got it right\n            if let\
    \ match = findMatch(index: score, guess: guess, results: results) {\n        \
    \        \n                // check which error we have\n                switch\
    \ match {\n                case .wrong:\n                    errors += 1\n   \
    \             case .correct:\n                    errors = 0\n               \
    \ }\n            }\n        } else {\n            \n            // check which\
    \ error we have\n            switch score {\n            case .wrong:\n      \
    \          errors += 1\n            case .correct:\n                errors = 0\n\
    \            }\n        }\n        \n        results[game.index(game.firstIndex(of:\
    \ score)!)] = errors\n    }\n    \n    return results\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpm3pgdl1y.swift:20:18: error: cannot find 'score' in scope\n   \
    \ for case (_, score) in zip(game, guess) {\n                 ^~~~~\n/tmp/tmpm3pgdl1y.swift:23:25:\
    \ error: cannot find 'findResult' in scope\n        if let result = findResult(index:\
    \ score, guess: guess, results: results) {\n                        ^~~~~~~~~~\n\
    /tmp/tmpm3pgdl1y.swift:23:43: error: cannot find 'score' in scope\n        if\
    \ let result = findResult(index: score, guess: guess, results: results) {\n  \
    \                                        ^~~~~\n/tmp/tmpm3pgdl1y.swift:26:28:\
    \ error: cannot find 'findMatch' in scope\n            if let match = findMatch(index:\
    \ score, guess: guess, results: results) {\n                           ^~~~~~~~~\n\
    /tmp/tmpm3pgdl1y.swift:26:45: error: cannot find 'score' in scope\n          \
    \  if let match = findMatch(index: score, guess: guess, results: results) {\n\
    \                                            ^~~~~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = Array(repeating: 0, count: game.count)\n    \n   \
    \ var i = 0\n    for g in guess {\n        if g == game[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(g - game[i])\n        }\n\
    \        i += 1\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    \n    // Your code here\n    \n    return game\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp94yqgtem/tmp94yqgtem.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af880e40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af880b37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af880b37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af880b367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp94yqgtem                        0x000055b9eb2f9454 <unavailable> + 5204

    5    libc.so.6                          0x00002af88102c460 __libc_start_main +
    245

    6    tmp94yqgtem                        0x000055b9eb2f8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = [Int](repeating: 0, count: game.count)\n  \
    \  if game.count != guess.count {\n        return result;\n    }\n    for index\
    \ in 0..<game.count {\n        if game[index] == guess[index] {\n            result[index]\
    \ = 0;\n        } else {\n            result[index] = abs((guess[index] - game[index]));\n\
    \        }\n    }\n    return result;\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // Write your code here\n    var result = [Int](count: guess.length,\
    \ repeatedValue: 0)\n    for i in 0..<guess.length {\n        if guess[i] == game[i]\
    \ {\n            result[i] += 0\n        } else {\n            result[i] += abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpuuk2m7x7.swift:16:60: error: extra argument 'repeatedValue' in\
    \ call\n    var result = [Int](count: guess.length, repeatedValue: 0)\n      \
    \                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpuuk2m7x7.swift:16:37:\
    \ error: value of type '[Int]' has no member 'length'\n    var result = [Int](count:\
    \ guess.length, repeatedValue: 0)\n                              ~~~~~ ^~~~~~\n\
    /tmp/tmpuuk2m7x7.swift:17:24: error: value of type '[Int]' has no member 'length'\n\
    \    for i in 0..<guess.length {\n                 ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n  guard game.count == guess.count else { return [] }\n  var bestDifference\
    \ = 0\n  for i in 0..<game.count {\n    let diff = (abs(guess[i] - game[i])) ??\
    \ 0\n    if diff > bestDifference {\n      bestDifference = diff\n    }\n  }\n\
    \  return Array(bestDifference..<bestDifference + game.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpcc90qfeh/tmpcc90qfeh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae96aa21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae96a718b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae96a718988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae96a7177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcc90qfeh                        0x000055e4cd0298b4 <unavailable> + 6324

    5    libc.so.6                          0x00002ae96ac0d460 __libc_start_main +
    245

    6    tmpcc90qfeh                        0x000055e4cd029429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](count: game.count, repeatedValue: 0)\n\n   \
    \ for i in 0..<game.count {\n        if game[i] == guess[i] { result[i] = 0 }\n\
    \        else { result[i] = abs(game[i] - guess[i]) }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpouv2xhyq.swift:15:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: game.count, repeatedValue: 0)\n            \
    \     ^\n/tmp/tmpouv2xhyq.swift:15:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var result = [Int](count: game.count,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmpouv2xhyq.swift:15:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: game.count, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    guard game.count == guess.count else { return [] }\n    var result\
    \ = [Int]()\n    for i in 0..<game.count {\n        let d = abs(guess[i] - game[i])\n\
    \        result.append(d < 0 ? d : 0)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp403r5gy9/tmp403r5gy9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70a4b5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70a4856b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70a4856988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70a48557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp403r5gy9                        0x0000558ff71e6824 <unavailable> + 6180

    5    libc.so.6                          0x00002b70a4d4b460 __libc_start_main +
    245

    6    tmp403r5gy9                        0x0000558ff71e6399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result: [Int] = []\n    var total = 0\n    guard game.count\
    \ == guess.count else {\n        return result\n    }\n    for i in 0..<game.count\
    \ {\n        total += abs(game[i] - guess[i])\n    }\n    for i in 0..<guess.count\
    \ {\n        if total == 0 {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(guess[i] - total))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmp4vgvpmsc/tmp4vgvpmsc.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9dae870c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9dae567b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9dae567988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9dae5667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vgvpmsc                        0x00005602a8ba37d4 <unavailable> + 6100

    5    libc.so.6                          0x00002b9daea5c460 __libc_start_main +
    245

    6    tmp4vgvpmsc                        0x00005602a8ba3349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var results = [Int](count: guess.count, repeatedValue: 0)\n   \
    \ game.reverse()\n    guess.reverse()\n    var lastGuess = 0\n    var isGood =\
    \ true\n    for index in 0..<guess.count {\n        if isGood && game[index] ==\
    \ guess[index] {\n            results[index] = 0\n        } else {\n         \
    \   let delta = abs(lastGuess - guess[index])\n            results[index] = delta\n\
    \            isGood = false\n        }\n        lastGuess = guess[index]\n   \
    \ }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7ty9bzp2.swift:15:19: error: no exact matches in call to initializer\
    \ \n    var results = [Int](count: guess.count, repeatedValue: 0)\n          \
    \        ^\n/tmp/tmp7ty9bzp2.swift:15:19: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var results = [Int](count:\
    \ guess.count, repeatedValue: 0)\n                  ^\n/tmp/tmp7ty9bzp2.swift:15:19:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var results = [Int](count: guess.count, repeatedValue: 0)\n      \
    \            ^\n/tmp/tmp7ty9bzp2.swift:16:10: error: cannot use mutating member\
    \ on immutable value: 'game' is a 'let' constant\n    game.reverse()\n    ~~~~\
    \ ^\n/tmp/tmp7ty9bzp2.swift:17:11: error: cannot use mutating member on immutable\
    \ value: 'guess' is a 'let' constant\n    guess.reverse()\n    ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameScore = Int()\n    var guessScore = Int()\n    \n    for\
    \ i in 0..<game.count {\n        if game[i] == guess[i] { gameScore += game[i]\
    \ }\n        else { guessScore += abs(game[i] - guess[i]) }\n    }\n    \n   \
    \ return Array(gameScore - guessScore).map { abs($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmprdeps55s.swift:23:18: error: missing argument label 'arrayLiteral:'\
    \ in call\n    return Array(gameScore - guessScore).map { abs($0) }\n        \
    \         ^\n                 arrayLiteral: \n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var diff = 0\n    var gameScore: Int = game[0]\n    var guesses:\
    \ Int = guess[0]\n\n    for i in 0..<game.count {\n        diff = gameScore -\
    \ guesses - abs(game[i] - guesses)\n        if game[i] == guesses {\n        \
    \    return Array(diff)\n        }\n        gameScore = game[i]\n        guesses\
    \ = guess[i]\n    }\n    return Array(diff)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1z3nh5xf.swift:22:26: error: missing argument label 'arrayLiteral:'\
    \ in call\n            return Array(diff)\n                         ^\n      \
    \                   arrayLiteral: \n/tmp/tmp1z3nh5xf.swift:27:18: error: missing\
    \ argument label 'arrayLiteral:' in call\n    return Array(diff)\n           \
    \      ^\n                 arrayLiteral: \n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var results = [Int](repeating: 0, count: game.count)\n    for index\
    \ in 0..<game.count {\n        let difference = guess[index] - game[index]\n \
    \       results[index] = difference >= 0 ? difference : -difference\n    }\n \
    \   return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // Your code here\n    if game.count != guess.count {\n       \
    \ return Array(repeating: 0, count: guess.count)\n    }\n    var result: Int =\
    \ 0\n    var gameCounter: Int = 0\n    for _ in 0..<game.count {\n        gameCounter\
    \ = 0\n        for _ in 0..<guess.count {\n            if game[gameCounter] ==\
    \ guess[gameCounter] {\n                gameCounter++\n            } else {\n\
    \                result++\n            }\n        }\n    }\n    return Array(repeating:\
    \ result, count: guess.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmplulcnoup.swift:25:28: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                gameCounter++\n                      \
    \     ^~\n/tmp/tmplulcnoup.swift:27:23: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                result++\n                      ^~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return guess(game).map { abs($0 - $1) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpyw_wqixw.swift:15:12: error: cannot call value of non-function\
    \ type '[Int]'\n    return guess(game).map { abs($0 - $1) }\n           ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var diff = [Int]()\n    for index in 0..<guess.count {\n      \
    \  let guess = guess[index]\n        if game[index] != guess {\n            diff.append(abs(guess\
    \ - game[index]))\n        } else {\n            diff.append(0)\n        }\n \
    \   }\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return (0..<guess.count).map { i in\n        guard i < game.count\
    \ else { fatalError(\"guesses must be longer than the game\") }\n        let diff\
    \ = abs(game[i] - guess[i])\n        return diff == 0 ? 0 : diff\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameArray = game\n    var guessedArray = guess\n    var correct\
    \ = 0\n    var wrong = 0\n    var isCorrect = Bool()\n    var wrongGuess = Int()\n\
    \    if game.count != guess.count {\n        print(\"ERROR: counts must be equal!\"\
    )\n        return wrongGuess\n    }\n    for i in 0 ..< game.count {\n       \
    \ if gameArray[i] == guessedArray[i] {\n            correct = correct + 1\n  \
    \      } else {\n            wrong = wrong + 1\n        }\n    }\n    if correct\
    \ == game.count {\n        isCorrect = true\n    } else {\n        isCorrect =\
    \ false\n        wrongGuess = game.count\n    }\n    var gameCorrect = 0\n   \
    \ var gameWrong = 0\n    var guessCorrect = 0\n    var guessWrong = 0\n    for\
    \ i in 0 ..< guess.count {\n        if gameArray[i] == guessedArray[i] {\n   \
    \         guessCorrect = guessCorrect + 1\n        } else {\n            guessWrong\
    \ = guessWrong + 1\n        }\n    }\n    if isCorrect {\n        gameCorrect\
    \ = gameCorrect + guessCorrect\n    } else {\n        gameWrong = gameWrong +\
    \ guessWrong\n    }\n    return Array(gameCorrect - wrongGuess, guessCorrect -\
    \ gameWrong)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpsianqo1i.swift:23:16: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n        return wrongGuess\n             \
    \  ^~~~~~~~~~\n/tmp/tmpsianqo1i.swift:54:12: error: no exact matches in call to\
    \ initializer \n    return Array(gameCorrect - wrongGuess, guessCorrect - gameWrong)\n\
    \           ^\nSwift.Array:4:23: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(repeating:count:)')\n    @inlinable public init(repeating repeatedValue:\
    \ Element, count: Int)\n                      ^\nSwift.RangeReplaceableCollection:2:23:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(repeating:count:)')\n\
    \    @inlinable public init(repeating repeatedValue: Self.Element, count: Int)\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var result = [Int](repeating: 0, count: game.count)\n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return guesses(game).map { guesses(game).filter { $0 == $1 }.map\
    \ { $1 - $0 }.joined().map { abs($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpvgt36y_y.swift:34:74: error: expected '}' at end of brace statement\n\
    assert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])\n  \
    \                                                                       ^\n/tmp/tmpvgt36y_y.swift:14:50:\
    \ note: to match this opening '{'\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n                                                 ^\n/tmp/tmpvgt36y_y.swift:15:12:\
    \ error: cannot find 'guesses' in scope\n    return guesses(game).map { guesses(game).filter\
    \ { $0 == $1 }.map { $1 - $0 }.joined().map { abs($0) }\n           ^~~~~~~\n\
    /tmp/tmpvgt36y_y.swift:15:32: error: cannot find 'guesses' in scope\n    return\
    \ guesses(game).map { guesses(game).filter { $0 == $1 }.map { $1 - $0 }.joined().map\
    \ { abs($0) }\n                               ^~~~~~~\n/tmp/tmpvgt36y_y.swift:19:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let m = game.count\n    let n = guess.count\n\n    let mut diff\
    \ = [Int](repeating: 0, count: m)\n    var i = m\n    while i < (m - 1) {\n  \
    \      let j = guessIndex(i, guess)\n        diff[i] = abs(guess[i] - game[j])\n\
    \        i += 1\n    }\n    for case let (score, guess) in zip(game, guess) {\n\
    \        if score != guess {\n            diff[i] = abs(score - guess)\n     \
    \       i += 1\n        }\n    }\n    return diff\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpn5jyvtpl.swift:18:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut diff = [Int](repeating:\
    \ 0, count: m)\n            ^\n/tmp/tmpn5jyvtpl.swift:18:13: note: join the identifiers\
    \ together\n    let mut diff = [Int](repeating: 0, count: m)\n        ~~~~^~~~\n\
    \        mutdiff\n/tmp/tmpn5jyvtpl.swift:18:13: note: join the identifiers together\
    \ with camel-case\n    let mut diff = [Int](repeating: 0, count: m)\n        ~~~~^~~~\n\
    \        mutDiff\n/tmp/tmpn5jyvtpl.swift:21:17: error: cannot find 'guessIndex'\
    \ in scope\n        let j = guessIndex(i, guess)\n                ^~~~~~~~~~\n\
    /tmp/tmpn5jyvtpl.swift:22:9: error: cannot find 'diff' in scope\n        diff[i]\
    \ = abs(guess[i] - game[j])\n        ^~~~\n/tmp/tmpn5jyvtpl.swift:27:13: error:\
    \ cannot find 'diff' in scope\n            diff[i] = abs(score - guess)\n    \
    \        ^~~~\n/tmp/tmpn5jyvtpl.swift:31:12: error: cannot find 'diff' in scope\n\
    \    return diff\n           ^~~~\n"
  stdout: ''
  timestamp: 1660008671
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    // write your code in an appropriate way\n    var gameCopy = game.map{\
    \ $0 + $1 }\n    var guessedCorrectly = guess.count == game.count\n    var correctGuessDistance\
    \ = 0\n    var wrongGuessDistance = 0\n    for i in 0..<guess.count {\n      \
    \  if gameCopy[i] == guess[i] {\n            gameCopy[i] = 0\n        } else {\n\
    \            gameCopy[i] = gameCopy[i] - guess[i]\n        }\n        if gameCopy[i]\
    \ == 0 {\n            correctGuessDistance += 1\n        } else {\n          \
    \  wrongGuessDistance += 1\n        }\n    }\n    var gameCopyArray = Array(gameCopy)\n\
    \    \n    var guessedCorrectlyArray = Array(guessedCorrectly)\n    return guessedCorrectlyArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp330u1k58.swift:16:28: error: contextual closure type '(Int) throws\
    \ -> Int' expects 1 argument, but 2 were used in closure body\n    var gameCopy\
    \ = game.map{ $0 + $1 }\n                           ^\n/tmp/tmp330u1k58.swift:34:39:\
    \ error: missing argument label 'arrayLiteral:' in call\n    var guessedCorrectlyArray\
    \ = Array(guessedCorrectly)\n                                      ^\n       \
    \                               arrayLiteral: \n"
  stdout: ''
  timestamp: 1660008671
- exit_code: -1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return compare(game: game.map{$0}, guess: guess.map{$0})\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660008677
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    if game.count != guess.count {\n        return [Int](count: guess.count,\
    \ repeatedValue: 0)\n    }\n\n    let gameCount = game.count\n    let guesses\
    \ = guess.map { $0 }\n\n    // Sort our arrays to ensure consistent results.\n\
    \    game = game.sorted()\n    guesses = guesses.sorted()\n\n    // Go through\
    \ our arrays, comparing each value to each guess.\n    for i in 0..<gameCount\
    \ {\n        let difference = game[i] - guesses[i]\n        if difference != 0\
    \ {\n            return [difference]\n        }\n    }\n\n    return game\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdrkv966r.swift:16:16: error: no exact matches in call to initializer\
    \ \n        return [Int](count: guess.count, repeatedValue: 0)\n             \
    \  ^\n/tmp/tmpdrkv966r.swift:16:16: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n        return [Int](count: guess.count,\
    \ repeatedValue: 0)\n               ^\n/tmp/tmpdrkv966r.swift:16:16: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n       \
    \ return [Int](count: guess.count, repeatedValue: 0)\n               ^\n/tmp/tmpdrkv966r.swift:23:5:\
    \ error: cannot assign to value: 'game' is a 'let' constant\n    game = game.sorted()\n\
    \    ^~~~\n/tmp/tmpdrkv966r.swift:24:5: error: cannot assign to value: 'guesses'\
    \ is a 'let' constant\n    guesses = guesses.sorted()\n    ^~~~~~~\n/tmp/tmpdrkv966r.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let guesses = guess.map\
    \ { $0 }\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var results = [Int]()\n    for i in 0..<guess.count {\n       \
    \ if guess[i] == game[i] {\n            results.append(0)\n        } else {\n\
    \            results.append(abs(guess[i] - game[i]))\n        }\n    }\n    return\
    \ results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var arr = [Int]()\n    var gameScore = 0\n    var guessScore =\
    \ 0\n    var numMatch = 0\n\n    for index in 0 ..< game.count {\n        if guess[index]\
    \ == game[index] {\n            gameScore += guess[index]\n            guessScore\
    \ += game[index]\n            numMatch++\n        }\n    }\n\n    if gameScore\
    \ == guessScore {\n        if numMatch == game.count {\n            arr = [0,\
    \ 0, 0, 0]\n        } else {\n            arr = [0, 0, 0, 0, 0]\n        }\n \
    \   } else {\n        arr = [abs(guessScore - gameScore), abs(guessScore - gameScore),\
    \ abs(guessScore - gameScore), abs(guessScore - gameScore), abs(guessScore - gameScore),\
    \ abs(guessScore - gameScore)]\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpco5_nstf.swift:24:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            numMatch++\n                    ^~\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    return game.count != guess.count ? [] : (0..<guess.count).map {\
    \ i in\n        abs(guess[i] - game[i]) \n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    let diff = [Int](repeating: 0, count: guess.length)\n    for index\
    \ in 0..<guess.length {\n        diff[index] = abs(game[index] - guess[index])\n\
    \    }\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmputdsrp0d.swift:15:49: error: value of type '[Int]' has no member\
    \ 'length'\n    let diff = [Int](repeating: 0, count: guess.length)\n        \
    \                                  ~~~~~ ^~~~~~\n/tmp/tmputdsrp0d.swift:16:28:\
    \ error: value of type '[Int]' has no member 'length'\n    for index in 0..<guess.length\
    \ {\n                     ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameScores = [Int](count: guess.count, repeatedValue: 0)\n\
    \    for i in 0..<game.count {\n        gameScores[guess[i]]+=1\n    }\n    let\
    \ gameResult = gameScores.filter({ $0 == 0 }).count\n    let guessResult = game.filter({\
    \ $0 == 0 }).count\n    return [guessResult, abs(guessResult - gameResult)]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpnrytk8gb.swift:15:22: error: no exact matches in call to initializer\
    \ \n    var gameScores = [Int](count: guess.count, repeatedValue: 0)\n       \
    \              ^\n/tmp/tmpnrytk8gb.swift:15:22: note: candidate has partially\
    \ matching parameter list (repeating: Int, count: Int)\n    var gameScores = [Int](count:\
    \ guess.count, repeatedValue: 0)\n                     ^\n/tmp/tmpnrytk8gb.swift:15:22:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var gameScores = [Int](count: guess.count, repeatedValue: 0)\n   \
    \                  ^\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameArray = game\n    var guessArray = guess\n\n    for gameIndex\
    \ in 0..<gameArray.count {\n        for guessIndex in 0..<guessArray.count {\n\
    \            if gameArray[gameIndex] != guessArray[guessIndex] {\n           \
    \     gameArray[gameIndex] = abs(guessArray[guessIndex] - gameArray[gameIndex])\n\
    \            } else {\n                gameArray[gameIndex] = 0\n            }\n\
    \        }\n    }\n    return gameArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmptot3_h0c/tmptot3_h0c.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98e4957c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98e464eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98e464e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98e464d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptot3_h0c                        0x000055f8f05387c4 <unavailable> + 6084

    5    libc.so.6                          0x00002b98e4b43460 __libc_start_main +
    245

    6    tmptot3_h0c                        0x000055f8f0538339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660008672
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var gameLen = game.count\n    var guessLen = guess.count\n    \n\
    \    var gameScores = game\n    var guessScores = guess\n    \n    var differences\
    \ = Array<Int>(gameLen)\n    var difference = 0\n    \n    var correctGuesses\
    \ = 0\n    for i in 0..<gameLen {\n        difference = abs(gameScores[i] - guessScores[i])\n\
    \        if difference == 0 {\n            differences[i] = 0\n            \n\
    \        } else {\n            differences[i] = difference\n            \n   \
    \         if difference < 0 {\n                correctGuesses = correctGuesses\
    \ + 1\n            }\n        }\n    }\n    \n    var correctGuesses = 0\n   \
    \ for i in 0..<guessLen {\n        difference = abs(guessScores[i] - gameScores[i])\n\
    \        if difference == 0 {\n            differences[i] = 0\n            \n\
    \        } else {\n            differences[i] = difference\n            \n   \
    \         if difference < 0 {\n                correctGuesses = correctGuesses\
    \ + 1\n            }\n        }\n    }\n    \n    if correctGuesses == guessLen\
    \ {\n        return differences\n    }\n    \n    return differences\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpb2efyc9t.swift:21:34: error: missing argument label 'arrayLiteral:'\
    \ in call\n    var differences = Array<Int>(gameLen)\n                       \
    \          ^\n                                 arrayLiteral: \n/tmp/tmpb2efyc9t.swift:39:9:\
    \ error: invalid redeclaration of 'correctGuesses'\n    var correctGuesses = 0\n\
    \        ^\n/tmp/tmpb2efyc9t.swift:24:9: note: 'correctGuesses' previously declared\
    \ here\n    var correctGuesses = 0\n        ^\n"
  stdout: ''
  timestamp: 1660008672
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0,\
    \ 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) ->\
    \ [Int] {\n    var diff = game\n    for index in 0..<guess.count {\n        diff[index]\
    \ -= guess[index]\n    }\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008672
