name: HumanEval_69_search
language: swift
prompt: "\n/// You are given a non-empty array of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the array.\n/// If no such a value exist, return -1.\n\
  /// Examples:\n/// >>> search(lst: [4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(lst:\
  \ [1, 2, 2, 3, 3, 3, 4, 4, 4])\n/// 3\n/// >>> search(lst: [5, 5, 4, 4, 4])\n///\
  \ -1\nfunc search(lst: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(search(lst: [5, 5, 5, 5, 1]) == 1)\nassert(search(lst:\
  \ [4, 1, 4, 1, 4, 4]) == 4)\nassert(search(lst: [3, 3]) == -1)\nassert(search(lst:\
  \ [8, 8, 8, 8, 8, 8, 8, 8]) == 8)\nassert(search(lst: [2, 3, 3, 2, 2]) == 2)\nassert(search(lst:\
  \ [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1)\n\
  assert(search(lst: [3, 2, 8, 2]) == 2)\nassert(search(lst: [6, 7, 1, 8, 8, 10, 5,\
  \ 8, 5, 3, 10]) == 1)\nassert(search(lst: [8, 8, 3, 6, 5, 6, 4]) == -1)\nassert(search(lst:\
  \ [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])\
  \ == 1)\nassert(search(lst: [1, 9, 10, 1, 3]) == 1)\nassert(search(lst: [6, 9, 7,\
  \ 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5)\nassert(search(lst:\
  \ [1]) == 1)\nassert(search(lst: [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10,\
  \ 4, 2, 1, 10, 2, 1, 1, 5]) == 4)\nassert(search(lst: [2, 10, 4, 8, 2, 10, 5, 1,\
  \ 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2)\nassert(search(lst: [1, 6, 10, 1, 6, 9,\
  \ 10, 8, 6, 8, 7, 3]) == 1)\nassert(search(lst: [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7,\
  \ 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4)\nassert(search(lst:\
  \ [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4)\n\
  assert(search(lst: [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) ==\
  \ 2)\nassert(search(lst: [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
  \ 7, 7, 10, 8]) == -1)\nassert(search(lst: [10]) == -1)\nassert(search(lst: [9,\
  \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2)\nassert(search(lst: [5, 4, 10, 2,\
  \ 1, 1, 10, 3, 6, 1, 8]) == 1)\nassert(search(lst: [7, 9, 9, 9, 3, 4, 1, 5, 9, 1,\
  \ 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1)\nassert(search(lst: [3, 10, 10, 9,\
  \ 2]) == -1)"
completions: ["    var maxfreq = 0\n    var maxval = -1\n\n    for i in lst {\n  \
    \      if freq[i] >= maxfreq {\n            maxfreq = freq[i]\n            maxval\
    \ = i\n        }\n    }\n\n    return maxval", '  return lst.filter({ lst.filter{
    $0 >= $1 }.count > 0 }).reduce({ $0 > $1 ? $0 : -1 })', "    var frequency = 1\n\
    \    var res = -1\n    for num in lst {\n        frequency += 1\n        if frequency\
    \ > res {\n            res = num\n        }\n    }\n    return res", "    var\
    \ maxVal = lst[0]\n    for element in lst {\n        if element >= maxVal {\n\
    \            maxVal = element\n        }\n    }\n    return maxVal", "    let\
    \ n = lst.count\n    for i in 0..<n {\n        let a = lst[i]\n        if lst[i]\
    \ > 0 && a >= 0 {\n            return i\n        }\n    }\n    return -1", " \
    \   guard lst.count > 0 else {\n        return -1\n    }\n    var max = 0\n  \
    \  var freq = 0\n    \n    for value in lst {\n        freq++\n        if freq\
    \ >= value {\n            freq = 0\n            max++\n        }\n    }\n    return\
    \ max", "    for index in 0..<lst.count {\n        let element = lst[index]\n\
    \        if index > 0 && element == lst[index-1] {\n            return -1\n  \
    \      }\n        if element > 0 {\n            return element\n        }\n  \
    \  }\n    return -1", "    var max = 0\n    var maxCount = 0\n    for num in lst\
    \ {\n        if max < num {\n            max = num\n            maxCount = 1\n\
    \        } else if max == num {\n            maxCount += 1\n        }\n    }\n\
    \    return maxCount >= max ? max : -1", "    \n    let max = lst.max()\n    if\
    \ max < 0 {\n        return -1\n    }\n    let index = lst.index(of: max)!\n \
    \   return lst[index] == max ? index : -1", "    var res = -1\n    var freq =\
    \ lst.reduce(0) { ($0.times($1) + $1), ($0.times($1) + 1) }\n    for el in lst\
    \ {\n        if freq >= el {\n            freq -= el\n            res = el\n \
    \       }\n    }\n    return res", "    var maxCount = UInt32(0)\n    var maxIndex\
    \ = -1\n    for i in lst {\n        if maxCount == 0 || maxCount > i {\n     \
    \       maxCount = i\n            maxIndex = i\n        }\n    }\n    return maxIndex",
  "    var max = -1\n    var maxFreq = -1\n    for num in lst {\n        if num >\
    \ 0 {\n            freq(num)\n            if freq(num) > maxFreq {\n         \
    \       max = num\n                maxFreq = freq(num)\n            }\n      \
    \  }\n    }\n    return max", "    if lst.count < 1 {\n        return -1\n   \
    \ }\n    var freq = [0]\n    for element in lst {\n        freq[element] = freq[element]\
    \ + 1\n        if freq[element] > 0 {\n            return element\n        }\n\
    \    }\n    return -1", "    if lst.count <= 0 {\n        return -1\n    }\n \
    \   var result: Int = -1\n    var maxFrequency = 0\n    for i in lst.reverse()\
    \ {\n        if maxFrequency < i+1 {\n            maxFrequency = i + 1\n     \
    \       result = i\n        }\n    }\n    return result", "    var max = -1000000\n\
    \    for index in lst.indices {\n        if max < lst[index] {\n            max\
    \ = lst[index]\n        }\n    }\n    return max", "\t\n\tif lst.isEmpty {\n\t\
    \treturn -1\n\t}\n\t\n\tlet maxCount = 0\n\tlet maxVal = lst[0]\n\tfor val in\
    \ lst {\n\t\tif val > maxVal {\n\t\t\tmaxCount = 1\n\t\t\tmaxVal = val\n\t\t}\
    \ else if val == maxVal {\n\t\t\tmaxCount += 1\n\t\t}\n\t}\n\t\n\tif maxCount\
    \ == 1 {\n\t\treturn maxVal\n\t} else if maxCount > 1 {\n\t\treturn -1\n\t}\n\t\
    \n\treturn -1", "    if lst.contains(-1) {\n        return -1\n    }\n    let\
    \ freq = lst.filter{($0 == 0) || ($0 >= $1)}.count\n    if freq == 0 {\n     \
    \   return -1\n    }\n    let maxFreq: Int? = lst.filter{$0 > 0}\n        .max{$0\
    \ > $1}\n    if maxFreq == nil {\n        return -1\n    }\n    if maxFreq! >=\
    \ freq {\n        return maxFreq!\n    }\n    return -1", "    guard lst.count\
    \ > 0 else { return -1 }\n    \n    // count of unique elements\n    let uniqueCount\
    \ = lst.map({ $0.hashValue }).reduce(0, +)\n    \n    // sum of frequency\n  \
    \  var freqSum: Int = 0\n    for value in lst {\n        freqSum += (value.hashValue\
    \ + uniqueCount) % Int32(lst.count)\n    }\n    \n    // get max value\n    var\
    \ maxVal: Int = 0\n    var maxKey: Int = 0\n    \n    for (key, value) in lst\
    \ {\n        if (freqSum - value) % Int32(lst.count) == 0 {\n            maxVal\
    \ = key\n            maxKey = key\n        }\n        freqSum -= value\n    }\n\
    \    \n    return maxKey", "  var maxVal = -1\n  var maxIdx = 0\n  for idx in\
    \ stride(from: 0, to: lst.count, by: 1) {\n    if maxVal < 0 || lst[idx] > maxVal\
    \ {\n      maxIdx = idx\n      maxVal = lst[idx]\n    }\n  }\n  return maxIdx",
  "    if lst.count < 1 {\n        return -1\n    }\n    var freq = [1]\n    for n\
    \ in lst {\n        if freq[n] == 0 {\n            freq[n] = 1\n        } else\
    \ if freq[n] >= n {\n            freq[n] += 1\n        } else {\n            freq[n]\
    \ = 0\n        }\n    }\n    if freq.contains(0) {\n        return -1\n    }\n\
    \    var max = 0\n    var pos = 0\n    for n in freq.indices {\n        if freq[n]\
    \ > max {\n            max = freq[n]\n            pos = n\n        }\n    }\n\
    \    return lst.indexOf(lst[pos])", "    guard lst.isEmpty else { return -1 }\n\
    \    return lst.maxElement(of: min)", "    var max = 0\n    var maxIdx = 0\n \
    \   var num = 0\n    for idx: Int in 0..<lst.count {\n        num += 1\n     \
    \   if lst[idx] > max {\n            max = lst[idx]\n            maxIdx = idx\n\
    \        }\n    }\n    if maxIdx == 0 { return -1 }\n    return max", "    if\
    \ lst.count == 0 { return -1 }\n    var maxCount = 0\n    var maxIndex = -1\n\
    \    for i in lst {\n        if maxCount < i { maxCount = i; maxIndex = lst.index(i)\
    \ }\n    }\n    return maxIndex", "    guard lst.reduce(0, +) == 0 else {\n  \
    \      return -1\n    }\n    guard lst.reduce(0) >= 0 else {\n        return -1\n\
    \    }\n    return lst.reduce(0) {\n        return $1 & (1 << $0)\n    }", '  return
    lst.maxElement()', "    let sorted = lst.sorted()\n    if sorted.count == 0 {\n\
    \        return -1\n    }\n    return sorted.first { (a, b) -> Bool in\n     \
    \   return b > a\n    }.map { $0 }.max() ?? -1", "    var freq = 0\n    for e\
    \ in lst {\n        if freq < e {\n            freq = e\n        } else if freq\
    \ == e {\n            freq++\n        }\n    }\n    return -1 if freq == 0 else\
    \ freq - 1", "    let freq = lst.map{freq in\n        return freq.reduce(0, +)\
    \ / lst.count\n    }\n    return freq.reduce(-Int.max) { $0.1 < $1.1 }.map{$0.1}.last\
    \ ?? -1", "    let mut s = Set<Int>()\n    for x in lst {\n        if s.contains(&x)\
    \ {\n            return x\n        } else {\n            s.insert(x)\n       \
    \ }\n    }\n    return -1", "    var max: Int = 0\n    var freq: Int = 0\n   \
    \ for el in lst {\n        if el > max {\n            max = el\n        }\n  \
    \      freq = freq + el\n    }\n    if freq > max {\n        return -1\n    }\n\
    \    return max", '    return -1', "    var max = 0\n    var freq = 0\n    for\
    \ value in lst {\n        max = max == 0 || value > max ? value : max\n      \
    \  freq += value\n    }\n    if freq >= max {\n        return -1\n    }\n    return\
    \ max", "    guard lst.count > 0 else { return -1 }\n\n    let maxIndex: Int =\
    \ lst.count - 1\n    var maxFreq: Int = 0\n    var index: Int = 0\n    \n    while\
    \ index < maxIndex {\n        var freq = 0\n        \n        for i in 0..<lst.count\
    \ {\n            if lst[i] == i {\n                freq += 1\n               \
    \ \n                if freq > maxFreq {\n                    maxFreq = freq\n\
    \                    maxIndex = index\n                }\n            }\n    \
    \    }\n        index += 1\n    }\n    return maxIndex", "    guard lst.count\
    \ > 0 else { return -1 }\n    var max = 1\n    var index: Int?\n    for (index,\
    \ element) in lst.enumerated() {\n        if element == 0 {\n            return\
    \ -1\n        }\n        if element > max {\n            max = element\n     \
    \   }\n    }\n    return max", "    var freq = [Int: Int]()\n\n    for i in lst\
    \ {\n        freq[i] = freq[i] ?? 0\n        freq[i]!++\n    }\n\n    for i in\
    \ lst {\n        if freq[i] > 0 {\n            return i\n        }\n    }\n\n\
    \    return -1", "    // write your code here\n    var max = 0\n    var min =\
    \ 1\n    for _ in lst {\n        if min > _ {\n            min = _\n        }\n\
    \        if max < _ {\n            max = _\n        }\n    }\n    if max > min\
    \ {\n        return max\n    } else {\n        return -1\n    }", '    return
    searchHelper(lst, 0, 0, 0)', "    let freq = Dictionary(grouping: lst, by: { $0\
    \ }).count\n    return lst.max(by: { $0.freq >= $1.freq }).freq > 0 ? lst.max(by:\
    \ { $0.freq >= $1.freq }).freq : -1", "    var maxVal = -1\n    var freq = 0\n\
    \    for v in lst {\n        freq = freq * 10 + v\n        if freq > maxVal {\n\
    \            maxVal = freq\n        }\n    }\n    if freq == 0 {\n        return\
    \ -1\n    }\n    return maxVal", "    var max = 0\n    var maxFreq = lst[0]\n\
    \    for freq in lst {\n        if freq > maxFreq {\n            max = freq\n\
    \            maxFreq = freq\n        }\n    }\n    return max", "    // O(n) solution,\
    \ O(1) space and O(n) time.\n    var freq = [0]\n    for el in lst {\n       \
    \ freq[el]++\n    }\n    for el in freq {\n        if el > 1 {\n            return\
    \ el\n        }\n    }\n    return -1", "    var maxVal = -1\n    var maxCount\
    \ = 0\n    for i in lst {\n        if i > maxVal {\n            maxVal = i\n \
    \           maxCount = 1\n        }\n        if i == maxVal {\n            maxCount\
    \ += 1\n        }\n    }\n    return maxVal", "    if lst.count < 1 {\n      \
    \  return -1\n    }\n    var max = 0\n    for n in lst {\n        max += n\n \
    \       if max >= lst.first {\n            return max\n        }\n    }\n    return\
    \ -1", "    guard lst.count > 0 else { return -1 }\n    var max = 0\n    var maxCount\
    \ = 0\n    for i in lst {\n        if i > 0 {\n            let count = lst.filter({\
    \ $0 == i }).count\n            if count > maxCount {\n                max = i\n\
    \                maxCount = count\n            }\n        }\n    }\n    return\
    \ max", "    \n    let max = 0\n    \n    guard lst.count > 0 else { return -1\
    \ }\n    \n    for i in 0..<lst.count {\n        \n        if lst[i] == max {\n\
    \            \n            max += 1\n            \n            if max > i {\n\
    \                \n                max = i\n            }\n            \n    \
    \    }\n        else {\n            \n            max = -1\n        }\n      \
    \  \n    }\n    \n    return max", "    guard lst.count > 0 else { return -1 }\n\
    \    let maxFreq = lst.map { lst.filter { $0 % $0 == 0 }.max() }.reduce(0)\n \
    \   if maxFreq == 0 {\n        return -1\n    }\n    return maxFreq * lst.filter{\
    \ $0 % maxFreq == 0 }.max()", "    if lst.count > 1 {\n        return max(lst.filter({\
    \ (num) -> Bool in\n            let i = findIndexIn(list, num)\n            return\
    \ i > -1 && list[i] > num\n        }))\n    }\n    return -1", "    if lst.contains(0)\
    \ {\n        return 0\n    }\n\n    if lst.contains(-1) {\n        return -1\n\
    \    }\n\n    var max = 0\n    var frequency = 1\n    for element in lst {\n \
    \       if element > 0 {\n            max = max(element, max)\n            frequency\
    \ *= element\n        }\n    }\n\n    if frequency > lst.last {\n        return\
    \ -1\n    }\n    return max", "    var maxVal = -1\n    var curVal = -1\n    for\
    \ i in lst {\n        if curVal == -1 || (curVal == 0 && i > maxVal) {\n     \
    \       curVal = i\n            maxVal = i\n        } else if (i > curVal && maxVal\
    \ != -1) {\n            return -1\n        }\n    }\n    return maxVal", "   \
    \ if lst.count == 0 || lst.first! < 0 {\n        return -1\n    }\n    \n    var\
    \ min = lst.first!\n    var max = lst.last!\n    var sum = 0\n    \n    for i\
    \ in 1 ..< lst.count {\n        sum += lst[i]\n        if sum >= max {\n     \
    \       max = sum\n        }\n        if sum < min {\n            min = sum\n\
    \        }\n    }\n    return max - 1", "    var maxFrequency = -1\n    var maxValue\
    \ = -1\n    for value in lst {\n        if maxFrequency == -1 || value >= maxFrequency\
    \ {\n            maxFrequency = value\n            maxValue = value\n        }\
    \ else {\n            maxFrequency = maxFrequency * value + 1\n            if\
    \ maxFrequency >= value {\n                maxValue = maxFrequency - value\n \
    \           }\n        }\n    }\n    return maxValue", "    var max = -1\n   \
    \ var curr = Int()\n    for val in lst {\n        if val > curr {\n          \
    \  curr = val\n        }\n    }\n    return max", "    // Your code here\n   \
    \ if lst.count <= 0 {\n        return -1\n    }\n    var max = 0\n    var maxCount\
    \ = 0\n    for i in 0..<lst.count {\n        if lst[i] == 0 {\n            continue\n\
    \        }\n        if maxCount < lst[i] {\n            max = i\n            maxCount\
    \ = lst[i]\n        }\n    }\n    return max", "    for element in lst {\n   \
    \     var counter = dictionary.count\n        if counter == 0 {\n            return\
    \ -1\n        }\n        if counter == 1 {\n            return element\n     \
    \   }\n        if element == counter {\n            return element\n        }\n\
    \        dictionary[element] = counter\n    }\n    return -1", '    return lst.max()',
  "    var max: Int = 0\n    var counter: Int = 0\n    for elem in lst {\n       \
    \ counter += elem == max ? 1 : 0\n        if counter == elem {\n            max\
    \ = elem\n        }\n    }\n    return max - 1", "    let max = lst[0]\n    for\
    \ i in 1..<lst.count {\n        if lst[i] == max {\n            continue\n   \
    \     }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\
    \    return max", "    guard lst.count != 0 else { return -1 }\n    var freq =\
    \ [Int:Int]()\n    for e in lst {\n        freq[e] = freq[e] ?? 0\n        freq[e]\
    \ += 1\n    }\n    var max = 0\n    for (i, e) in freq.enumerated() {\n      \
    \  if freq[e] > freq[max] {\n            max = e\n        }\n    }\n    return\
    \ max", "    var maxVal = -1\n    var maxCount = -1\n    for elem in lst {\n \
    \       if elem == 0 {\n            continue\n        }\n        if maxCount <\
    \ elem {\n            maxVal = elem\n            maxCount = elem\n        } else\
    \ if elem > maxCount {\n            maxVal = elem\n            maxCount = elem\n\
    \        }\n    }\n    return maxVal", "  if lst.count==0 {\n    return -1\n \
    \ }\n  \n  if lst.count==1 {\n    return lst[0]\n  }\n  \n  for i in 0..<lst.count-1\
    \ {\n    if lst[i] > lst[i+1] {\n      break\n    }\n  }\n  \n  if lst[i] > lst[i+1]\
    \ {\n    return -1\n  }\n  \n  return lst[i+1]", "    if lst.count == 0 || lst.count\
    \ == 1 {\n        return -1\n    }\n    let freq = lst.filter{$0 != 0}\n    if\
    \ freq.count == 0 {\n        return -1\n    }\n    if freq.count == 1 {\n    \
    \    if freq[0] == 1 {\n            return lst[0]\n        } else {\n        \
    \    return -1\n        }\n    }\n    let result = freq.max()!\n    if freq.contains(result)\
    \ {\n        return -1\n    }\n    return result", "    if lst.count < 1 {\n \
    \       return -1\n    }\n    \n    var freq = Dictionary<Int, Int>()\n    var\
    \ max = 0\n    for val in lst {\n        if freq.keys.contains(val) && freq[val]\
    \ >= freq[freq[val]] {\n            freq[val] += 1\n        } else {\n       \
    \     freq[val] = 1\n        }\n        max = max(val, max)\n    }\n    return\
    \ max", "    var max = 0\n    for el in lst {\n        if max < el {\n       \
    \     max = el\n        }\n    }\n    return max", "    var freq = [Int]()\n \
    \   for val in lst {\n        if freq.contains(val) {\n            freq[val] =\
    \ freq[val] + 1\n        } else {\n            freq.append(0)\n            freq[val]\
    \ = 1\n        }\n    }\n\n    var greatest = 0\n    for val in freq {\n     \
    \   if val > greatest {\n            greatest = val\n        }\n    }\n\n    return\
    \ greatest", "    var maxFrequency = Int()\n    var maxValue = Int()\n    for\
    \ value in lst {\n        if maxFrequency < value {\n            maxFrequency\
    \ = value\n            maxValue = value\n        }\n        if maxFrequency ==\
    \ value {\n            maxFrequency++\n        }\n    }\n    return maxValue",
  "    if lst.isEmpty {\n        return -1\n    }\n    \n    var i = 0\n    var maxIndex\
    \ = 0\n    var maxValue = 0\n    while i < lst.count {\n        let element =\
    \ lst[i]\n        if element > maxValue {\n            maxValue = element\n  \
    \          maxIndex = i\n        }\n        i += 1\n    }\n    return maxIndex",
  "    var i = 0\n    var freq = 0\n    while i < lst.count {\n        if freq < lst[i]\
    \ {\n            freq = lst[i]\n        } else {\n            break\n        }\n\
    \        i += 1\n    }\n    return -1 if i < lst.count && freq > lst[i] else freq",
  "    if lst.count == 0 || lst.last == 0 {\n        return -1\n    }\n    var max\
    \ = Int(lst.last)\n    var maxCount = 0\n    for n in lst.reverse() {\n      \
    \  if n == max {\n            maxCount++\n        } else {\n            break\n\
    \        }\n    }\n    if maxCount >= lst.last {\n        return max\n    } else\
    \ {\n        return -1\n    }", "    if lst.count < 1 {\n        return -1\n \
    \   }\n    var maxCount = 0\n    var maxValue = -1\n    for i in lst {\n     \
    \   let count = lst.filter{$0 ==  i}.count\n        if maxCount == 0 || count\
    \ >= maxCount {\n            maxCount = count\n            maxValue = i\n    \
    \    }\n    }\n    return maxValue", "    let freq = Dictionary(grouping: lst,\
    \ by: { $0 })\n    \n    for (_, val) in freq {\n        if freq[val] != 0 {\n\
    \            return val\n        }\n    }\n    return -1", "    if lst.isEmpty()\
    \ {\n        return -1\n    }\n    var res = -1\n    var maxVal = lst[0]\n   \
    \ for val in lst {\n        if val > maxVal {\n            res, maxVal = val,\
    \ val\n        } else {\n            if val != maxVal {\n                return\
    \ -1\n            }\n        }\n    }\n    return res", "    var freqs: [Int]\
    \ = [0]\n    \n    for elt in lst {\n        if freqs[elt] == 0 {\n          \
    \  freqs[elt] = 1\n        } else if freqs[elt] > 0 {\n            freqs[elt]\
    \ += 1\n        } else {\n            return -1\n        }\n    }\n    \n    for\
    \ elt in freqs {\n        if freqs[elt] > 0 {\n            return elt\n      \
    \  }\n    }\n    \n    return -1", "    if lst.count == 0 {\n        return -1\n\
    \    }\n\n    var largest, count = 0\n    for idx in 0..<lst.count {\n       \
    \ if lst.contains(idx) {\n            count += 1\n            if count == largest\
    \ {\n                largest = idx\n            } else {\n                largest\
    \ = count\n            }\n        }\n    }\n    return largest", "    var ans\
    \ = -1\n    for ii in lst {\n        if ii >= 0 {\n            if freq[ii] >=\
    \ ans {\n                ans = freq[ii]\n            }\n        }\n    }\n   \
    \ return ans", "    guard lst.count > 0 else {\n        return -1\n    }\n   \
    \ var max = 0\n    var i = 0\n    var freq = 0\n    for element in lst {\n   \
    \     if freq > 0 {\n            freq -= 1\n            if freq > max {\n    \
    \            max = element\n            }\n        } else {\n            freq\
    \ = element\n        }\n    }\n    return max", "    guard lst.count > 0 else\
    \ {\n        return -1\n    }\n    if lst.filter({ return lst.contains($0) }).count\
    \ >= lst.count {\n        return -1\n    }\n    return lst.max()!", "    var max\
    \ = 0\n    for value in lst {\n        if max < value && value > list[value] {\n\
    \            max = value\n        }\n    }\n    return max", "    var result =\
    \ -1\n    for num in lst {\n        if num > 0 {\n            if result < 0 ||\
    \ num > result {\n                result = num\n            }\n        }\n   \
    \ }\n    return result", "    var maxFrequency = Int()\n    var maxValue = Int()\n\
    \    \n    for i in lst {\n        if maxFrequency < i {\n            maxFrequency\
    \ = i\n            maxValue = i\n        } else {\n            if maxFrequency\
    \ == i {\n                if maxValue < i {\n                    maxValue = i\n\
    \                }\n            }\n        }\n    }\n    return maxValue", " \
    \   let maxIndex = lst.map({ (value) -> Int in\n        if value > 0 {\n     \
    \       return value\n        } else {\n            return -1\n        }\n   \
    \ }).max() ?? -1\n\n    let maxValue = lst.filter({ (value) -> Bool in\n     \
    \   return value == maxIndex\n    }).count\n\n    if maxValue >= lst.count() {\n\
    \        return -1\n    } else {\n        return maxIndex\n    }", "    guard\
    \ lst.count > 0 else { return -1 }\n    var maxValue = lst[0]\n    var maxCount\
    \ = 0\n    for idx in lst {\n        if maxCount < idx {\n            maxCount\
    \ = idx\n            maxValue = idx\n        }\n    }\n    return maxValue", " \
    \   if lst.isEmpty() {\n        return -1\n    }\n    var maxFreq = 0\n    var\
    \ maxVal = Int()\n    for v in lst {\n        if maxFreq == 0 || maxFreq < v {\n\
    \            maxFreq = v\n            maxVal = v\n        } else if v > maxVal\
    \ {\n            maxFreq = v\n            maxVal = v\n        }\n    }\n    return\
    \ maxVal", "    var max = 0\n    var max = Int()\n    for num in lst {\n     \
    \   if num > 0 {\n            var frequency = count(lst)\n            if frequency\
    \ == 0 {\n                return -1\n            }\n            if frequency >\
    \ max {\n                max = frequency\n                max = num\n        \
    \    }\n        }\n    }\n    return max", "  if lst.contains(-1){\n    return\
    \ -1\n  }\n  return lst.max()", "    var max = 0\n    var freq = -1\n    for x\
    \ in lst {\n        if freq == -1 || x > freq {\n            freq = x\n      \
    \      max = x\n        }\n        if freq > 0 && x == max {\n            freq--\n\
    \        }\n    }\n    return max", '    return find(lst, 0)', "    // Write your\
    \ code here.\n    var freq = [1]\n    for i in lst {\n        freq[freq.maxElement()!]\
    \ += 1 // to count all element to 1\n    }\n    return freq.first!", "    guard\
    \ lst.count != 0 else { return -1 }\n    var result = -1\n    var max = Int64(lst[0])\n\
    \    var cur = Int64(lst[0])\n    for i in 1..<lst.count {\n        if cur > max\
    \ {\n            result = max\n            break\n        }\n        cur = Int64(lst[i])\n\
    \        if cur > max {\n            max = cur\n        } else {\n           \
    \ max = max\n        }\n    }\n    return result", "    if lst.isEmpty { return\
    \ -1 }\n\n    var max : Int = 0\n    var count : Int = 0\n    var prev : Int =\
    \ 0\n\n    for val in lst {\n        if val > 0 {\n            prev = count\n\
    \            count += 1\n        }\n\n        if count == max {\n            max\
    \ = val\n        } else if count > 0 {\n            if val == prev {\n       \
    \         count += 1\n            } else {\n                count = 0\n      \
    \          prev = val\n                max = val\n            }\n        }\n \
    \   }\n    return max", "    var max: Int?\n    var index: Int?\n    var freq:\
    \ Int = 0\n    for (_, val) in lst.enumerated() {\n        if let index = index,\
    \ val != 0 {\n            freq = index\n            max = val\n        }\n   \
    \ }\n    return max != nil ? max! : -1", "    guard lst.isEmpty == false else\
    \ { return -1 }\n    var maxFreq = -1\n    var maxVal = -1\n    for val in lst\
    \ {\n        if maxFreq == -1 {\n            if val > maxVal {\n             \
    \   maxFreq = val\n                maxVal = val\n            } else {\n      \
    \          return -1\n            }\n        } else if val > maxVal {\n      \
    \      if val <= maxFreq {\n                return -1\n            }\n       \
    \     \n            maxFreq = val\n            maxVal = val\n        } else {\n\
    \            maxFreq++\n        }\n    }\n    return maxVal", "    if lst.isEmpty\
    \ {\n        return -1\n    }\n\n    var max = 0\n    for index in 0..<lst.count\
    \ {\n        max = max(max, max(lst[index], index))\n    }\n    return max", " \
    \   let maxFrequency = Dictionary(grouping: lst, by: { $0 })\n        .max(by:\
    \ { max($0.value, $1.value) })?.value\n        \n    if maxFrequency > 0 {\n \
    \       return lst.firstIndex(of: maxFrequency)\n    }\n    \n    return -1",
  "    guard lst.count > 0 else {\n        return -1\n    }\n    guard lst.count >\
    \ 1 else {\n        return 0\n    }\n    var maxNum: Int = 0\n    var maxCount:\
    \ Int = 0\n    for i in 0..<lst.count {\n        let curCount = lst.filter{$0\
    \ == i}.count\n        if curCount > maxCount {\n            maxNum = i\n    \
    \        maxCount = curCount\n        }\n    }\n    return maxNum", "    var max\
    \ = 0\n    var maxFreq = Int()\n    for el in lst {\n        if el != 0 {\n  \
    \          if maxFreq < el {\n                max = el\n                maxFreq\
    \ = el\n            } else {\n                max += el\n                maxFreq\
    \ += el\n            }\n        } else {\n            return -1\n        }\n \
    \   }\n    return max", '    return lst.maxIndex({ lst.contains($0) })', "   \
    \ guard lst.count > 0 else {\n        return -1\n    }\n    let result = IntMax\n\
    \    for i in 0..<lst.count {\n        if lst[i] > result {\n            result\
    \ = lst[i]\n        }\n    }\n    return result", "    let maxIndex = lst.count\n\
    \    let maxValue = max(lst)\n    return maxValue + 1", "  var max = -1\n  var\
    \ freq = -1\n  for s in lst {\n    if s > 0 {\n      if freq == 0 || freq < s\
    \ {\n        max = s\n        freq = s\n      }\n    } else {\n      freq = freq\
    \ + 1\n    }\n  }\n  return max", "  var freq: [Int: Int] = [:]\n  for element\
    \ in lst {\n    if freq.contains(element) {\n      freq[element] = freq[element]\
    \ + 1\n    } else {\n      freq[element] = 1\n    }\n  }\n\n  for element in freq.keys\
    \ {\n    if freq[element] >= element {\n      return element\n    }\n  }\n\n \
    \ return -1", "    var freq = [1]\n    for _ in lst {\n        freq = freq.filter{\
    \ it > 0 }\n        freq[0]++\n    }\n    return freq.filter{ it >= lst[0] }[0]",
  "    if lst.count <= 1 {\n        return -1\n    }\n    var max = -1\n    var freq\
    \ = 0\n    for i in lst {\n        if freq > i {\n            freq = 0\n     \
    \   }\n        freq += 1\n        if i == max {\n            continue\n      \
    \  }\n        if freq > max {\n            max = i\n        }\n    }\n    return\
    \ max", "    if lst.isEmpty() {\n        return -1\n    }\n    var max = lst[0]\n\
    \    var index = lst.index {\n        i, _ in\n        i > max\n    }\n    if\
    \ index == -1 && max > 0 {\n        return -1\n    }\n    \n    return index",
  "    // The last element has frequency equals to the number of elements in the list.\n\
    \    if lst.last > 0 { return lst.last }\n\n    if lst.first == 0 {\n        return\
    \ -1\n    }\n\n    // Sort the array from smaller to higher numbers.\n    lst.sort\
    \ { $0 < $1 }\n\n    // The value equals to the index (first occurrence) of the\
    \ first element that is greater than zero.\n    let value = lst.first\n\n    //\
    \ If there is no such value.\n    if value == -1 {\n        return -1\n    }\n\
    \n    // The frequency of the value is equal to the number of occurrences.\n \
    \   if let index = lst.index(of: value) {\n        return index\n    }\n\n   \
    \ // The value equals to the index (first occurrence) of the first element that\
    \ is greater than zero.\n    let value = lst.first\n\n    // If there is no such\
    \ value.\n    if value == -1 {\n        return -1\n    }\n\n    // The frequency\
    \ of the value is equal to the number of occurrences.\n    if let index = lst.index(of:\
    \ value) {\n        return index\n    }\n\n    // If all occurrences have frequency\
    \ equals to the number of elements in the list, the value is -1.\n    return -1",
  "    if lst.contains(where: { $0 > 0 }) {\n        if let index = lst.index(where:\
    \ { $0 >= $1 }) {\n            return index\n        } else {\n            return\
    \ -1\n        }\n    }\n    return -1", "    if lst.isEmpty {\n        return\
    \ -1\n    }\n    \n    func search(lst: [Int], idx: Int, c: Int) -> Int {\n  \
    \      if idx == lst.count {\n            return c\n        }\n        if lst[idx]\
    \ >= c {\n            return search(lst, idx+1, c)\n        }\n        return\
    \ search(lst+1, idx+1, c)\n    }\n    return search(lst, 0, lst[0])", "    var\
    \ max = -1\n    var maxIndex: Int = 0\n    for i in lst {\n        if max == -1\
    \ || max < i {\n            max = i\n            maxIndex = i\n        }\n   \
    \ }\n    return maxIndex", "    // find the largest number greater than zero,\
    \ its frequency is the length of the array\n    var maxFreq = -1\n    for i in\
    \ 0..<lst.count {\n        if lst[i] > 0 {\n            if maxFreq == -1 {\n \
    \               maxFreq = 0\n            } else {\n                maxFreq +=\
    \ lst[i]\n            }\n        }\n    }\n\n    if maxFreq > 0 {\n        //\
    \ return the greatest number with same frequency as the input\n        return\
    \ -1\n    }\n    return maxFreq", '    return searchR(&lst)', "    guard lst.count\
    \ > 0 else { return -1 }\n    let freq = lst.frequency(of: lst[0])\n    if freq\
    \ >= lst.first {\n        return lst[0]\n    }\n    return -1", "    if lst.count<1\
    \ {\n        return -1\n    }\n    var max = Int()\n    var maxCount = 0\n   \
    \ for x in lst{\n        if x==max{\n            count++\n        }\n        if\
    \ count >= maxCount{\n            max = x\n            maxCount = count\n    \
    \    }\n    }\n    return max", "    var max = 0\n    for elem in lst {\n    \
    \    if max < elem {\n            max = elem\n        } else if max > elem &&\
    \ elem > 1 {\n            max = -1\n        }\n    }\n    return max", "    let\
    \ min = lst[0]\n    var freq = Int()\n\n    for idx in lst {\n        if idx >\
    \ min {\n            if freq < idx {\n                min = idx\n            \
    \    freq = idx\n            }\n        }\n    }\n    return min", "    if lst.isEmpty\
    \ {\n        return -1\n    }\n    \n    // Binary search to find the greatest\
    \ integer that is greater than or equal to the value of the integer.\n    var\
    \ idx: Int = 0\n    \n    while idx < lst.count {\n        let m = (idx * 2) /\
    \ lst.count\n        let r = (idx * 2) % lst.count\n        \n        if lst[m]\
    \ > lst[r] {\n            idx = m\n        } else {\n            idx = r\n   \
    \     }\n    }\n    \n    return idx", "    if lst.isEmpty {\n        return -1\n\
    \    }\n    if lst.count == 0 {\n        return 0\n    }\n    var max = Int64(-1)\n\
    \    var minValue = Int64(0)\n    var minFreq = Int64(0)\n    var max = Int64(0)\n\
    \    for element in lst {\n        var freq = frequency(lst, element)\n      \
    \  if freq > maxFreq {\n            max = element\n            maxFreq = freq\n\
    \        }\n        if freq < minFreq {\n            minValue = element\n    \
    \        minFreq = freq\n        }\n    }\n    if max == 0 {\n        return 0\n\
    \    }\n    if min == max {\n        return minValue\n    }\n    if maxFreq ==\
    \ minFreq {\n        return max\n    }\n    return -1", '    return max(lst).flatMap
    { i in lst where lst.index(i) >= lst.index(i) - lst.index(i) + 1 }.max() ?? -1',
  "    let freq = lst.frequency(&lst)\n    if freq == nil {\n        return -1\n \
    \   }\n    if freq > 0 {\n        return freq\n    }\n    \n    var maxVal = -1\n\
    \    var maxIdx = 0\n    for idx in lst.indices {\n        if lst[idx] > maxVal\
    \ {\n            maxVal = lst[idx]\n            maxIdx = idx\n        }\n    }\n\
    \    return maxIdx", "    var max: Int = 0\n    var freq = 1\n    for i in lst\
    \ {\n        if freq > 0 && i > 0 {\n            if freq > max {\n           \
    \     max = freq\n            }\n            freq++\n        }\n    }\n    return\
    \ max - 1", "    guard lst.count >= 1 else {\n        return -1\n    }\n    \n\
    \    var freq = lst.count\n    var ans = Int()\n    for v in lst {\n        if\
    \ v != 0 { // 0 is a valid value\n            freq--\n            if freq >= v\
    \ {\n                ans = v\n                break\n            }\n        }\n\
    \    }\n    return ans", "    var maxNum = -1\n    for num in lst {\n        if\
    \ num > 0 {\n            if maxNum == -1 || (maxNum > 0 && maxNum >= num) {\n\
    \                maxNum = num\n            }\n        }\n    }\n    return maxNum",
  "    var maxV = 0\n    for element in lst {\n        maxV = element > maxV ? element\
    \ : maxV\n    }\n    return maxV > 0 ? maxV : -1", "    for i in lst {\n     \
    \   var freq = 1\n        for j in lst {\n            if i == j {\n          \
    \      freq++\n            }\n        }\n        if freq >= i {\n            return\
    \ i\n        }\n    }\n    return -1", "    // TODO: Write your code here\n  \
    \  var maxIndex = 0\n    var maxFrequency = 0\n\n    for index in 0..<lst.count\
    \ {\n        var frequency = 0\n        for value in lst[index..<lst.count] {\n\
    \            frequency += 1 \n        }\n        if frequency >= maxFrequency\
    \ {\n            maxFrequency = frequency\n            maxIndex = index\n    \
    \    }\n    }\n    return maxIndex", "\tvar result = -1\n\tfor (index, int) in\
    \ lst.enumerated() {\n\t\tif index == 0 || int >= lst[index-1] {\n\t\t\tresult\
    \ = index\n\t\t\tbreak\n\t\t}\n\t}\n\treturn result", "  guard lst.isEmpty ==\
    \ false else { return -1 }\n  let max = lst.max()!\n  return lst.filter { $0 >\
    \ max }.firstIndex(of: max)!", "    let freq = lst.filter { $0 > 0 }.count\n \
    \   if freq == 0 {\n        return -1\n    }\n    var ans = -1\n    var curr =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            if curr == num {\n\
    \                curr++\n            } else {\n                if freq == curr\
    \ {\n                    ans = num\n                } else {\n               \
    \     if ans == -1 {\n                        ans = num\n                    }\n\
    \                }\n                curr = num\n            }\n        }\n   \
    \ }\n    return ans", "    var freq = [1]\n    for x in lst {\n        freq[x]\
    \ = freq[x] + 1\n    }\n    var maxFreq = freq[0]\n    for i in 1 ..< lst.count\
    \ {\n        if freq[i] > maxFreq {\n            maxFreq = freq[i]\n        }\n\
    \    }\n    return maxFreq == 1 ? -1 : 0", "    var max = 0\n    var i = 0\n \
    \   for val in lst {\n        if val > max {\n            max = val\n        }\n\
    \        if val >= max {\n            i += 1\n        }\n    }\n    return i ==\
    \ 0 ? -1 : max", '    return search(lst, 0)', "    var freq: [Int] = [0]\n   \
    \ var max = 0\n    for val in lst {\n        freq[val] += 1\n        if freq[val]\
    \ > max {\n            max = freq[val]\n        }\n    }\n    return max == 0\
    \ ? -1 : max", "    var maxFrequency = 0 \n    for value in lst {\n        if\
    \ maxFrequency == 0 || maxFrequency >= value {\n            maxFrequency = value\n\
    \        }\n    }\n    if maxFrequency > 0 {\n        for value in lst {\n   \
    \         if value >= maxFrequency {\n                return value\n         \
    \   }\n        }\n    }\n    return -1", "    // Write your code here.\n    var\
    \ freq = [0]\n    for i in lst {\n        freq[i] = freq[i] + 1\n    }\n\n   \
    \ for i in freq {\n        if freq[i] > 0 {\n            return i\n        }\n\
    \    }\n    return -1", '    return quickSelect(lst, 0, len(lst)-1)', "    if\
    \ lst.count > 0 {\n        return IntMax\n    } else {\n        return -1\n  \
    \  }", "    var result = -1\n    \n    for v in lst {\n        if v > 0 {\n  \
    \          result = v\n            break\n        }\n    }\n    \n    return result",
  "    if lst.count < 1 {\n        return -1\n    }\n    var freq = 0\n    var max\
    \ = -10000\n    for i in lst {\n        if freq > freq {\n            freq = freq\
    \ + i\n        } else {\n            if freq == i {\n                freq = freq\
    \ + i\n            } else {\n                if freq > freq {\n              \
    \      freq = freq + i\n                    max = i\n                }\n     \
    \       }\n        }\n    }\n    return max", "  guard lst.count != 0 else { return\
    \ -1 }\n  let freqs = lst.enumerated().map { $0.element }.sorted()\n  let i =\
    \ freqs.firstIndex(of: 0)\n  if i == -1 { return -1 }\n  let freq = freqs[i]\n\
    \  for _ in 1...i {\n    if freqs[_] >= freq {\n      return freqs[_]\n    }\n\
    \  }\n  return -1", "    var maxVal = 0\n    var maxFrequency = -1\n    \n   \
    \ for i in lst {\n        if maxFrequency < i {\n            maxVal = i\n    \
    \        maxFrequency = 1\n        } else if maxFrequency > i {\n            maxFrequency\
    \ = maxFrequency + 1\n        }\n    }\n    return maxVal", "    var max: Int\
    \ = 0\n    for val in lst {\n        if max < val {\n            max = val\n \
    \       }\n    }\n    return max", '    return search(lst, 0, lst.count - 1)',
  "    guard lst.count >= 1 else { return -1 }\n    return lst.max()! + 1", "    if\
    \ lst.count == 0 {\n        return -1\n    }\n    var maxCount = 0\n    var maxIndex\
    \ = 0\n    for i in lst {\n        if i >= 0 {\n            if maxCount == 0 {\n\
    \                maxCount = 1\n                maxIndex = i\n            }\n \
    \           \n            if maxCount >= i {\n                maxCount = 1\n \
    \               maxIndex = i\n            }\n            \n            if maxCount\
    \ > maxCount {\n                maxCount = maxCount\n                maxIndex\
    \ = i\n            }\n        }\n    }\n    return maxIndex", '    return lst.filter{
    $0 > 0 }.max{ $0.times(Int64($1)) }', "    \n    var max = 0\n    \n    for i\
    \ in 0..<lst.count {\n        if lst[i] > max {\n            max = lst[i]\n  \
    \      }\n        \n        if lst[i] == max {\n            if lst[i] > max &&\
    \ lst[i]%max == 0 {\n                max = lst[i]\n            }\n        }\n\
    \    }\n    \n    return max", "    // TODO: Write your code here\n    var max\
    \ = -1\n    var min = lst[0]\n    for i in lst {\n        if i.value > max {\n\
    \            max = i.value\n        }\n        if i.value < min {\n          \
    \  min = i.value\n        }\n        if i.value == max && i.value > 1 {\n    \
    \        return i\n        }\n    }\n    return -1", "    for i in 0..<lst.count\
    \ {\n        if lst[i] > 0 {\n            lst[i]--\n            return i\n   \
    \     }\n    }\n    return -1", "    var max: Int = -1000000\n    for i in lst\
    \ {\n        if i > max {\n            max = i\n        }\n    }\n    return max",
  "    var freq = [1]\n    var ans = -1\n    for v in lst {\n        if freq[v] >=\
    \ freq[ans] {\n            freq[v] += 1\n        } else {\n            freq[v]\
    \ = 1\n            ans = v\n        }\n    }\n    return ans", '    return lst.reduce(0,
    combine: max) ?? -1', "    var res = -1\n    var freq = 0\n    for n in lst {\n\
    \        if freq == 0 || n > freq {\n            res = n\n            freq = n\n\
    \        } else {\n            freq = freq * n + n\n        }\n    }\n    return\
    \ res", "    if lst.count == 0 || lst.last <= 0 {\n        return -1\n    }\n\
    \    var freq = [0]\n    for x in lst {\n        freq[x-1]++\n    }\n    for idx\
    \ in 0..<lst.count {\n        if freq[idx] > freq[lst.last] {\n            return\
    \ idx\n        }\n    }\n    return -1", "    if lst.isEmpty {\n        return\
    \ -1\n    }\n    var max = lst[0]\n    var maxCount = 0\n    for _i in 0..<lst.count\
    \ {\n        let item = lst[_i]\n        let count = lst[_i] == item ? 1 : 0\n\
    \        if count > maxCount {\n            max = item\n            maxCount =\
    \ count\n        }\n    }\n    return max", "    return lst.sort()\n        .filter{$0\
    \ > 0}\n        .last!", '    return searchHelper(lst).search', "    var max =\
    \ 0\n    var freq = 0\n    for el in lst {\n        if freq >= el {\n        \
    \    freq = freq - el\n        } else {\n            max = el\n            freq\
    \ = el\n        }\n    }\n    if freq > 0 {\n        return -1\n    }\n    return\
    \ max", "    guard lst.count != 0 else { return -1 }\n    var freq = [Int:Int]()\n\
    \    for x in lst {\n        guard let count = freq[x] else { freq[x] = 1; }\n\
    \        freq[x] = (freq[x] ?? 0) + 1;\n    }\n    \n    if freq.keys.contains\
    \ {\n        return freq.keys.sorted(by: { $0 < $1}).first!\n    } else {\n  \
    \      return -1\n    }", "    // write your code in JavaScript (Node.js 8.9.4)\n\
    \    var max = 0\n    var ans = 0\n    for num in lst {\n        if num <= 0 {\n\
    \            return -1\n        }\n        if max < num {\n            max = num\n\
    \            ans = 1\n        } else {\n            ans = num\n        }\n   \
    \ }\n    return ans", "    if lst.isEmpty {\n        return -1\n    }\n    var\
    \ result = 0\n    var freq = lst[0]\n    for val in lst {\n        if val != freq\
    \ && val > freq {\n            result = val\n            freq = val\n        }\n\
    \    }\n    return result", "    for i in lst {\n        if freq[i] >= 0 {\n \
    \           if freq[i] == freq.last {\n                return i\n            }\n\
    \        }\n    }\n    return -1", "    var counter = [0]\n    var maxFrequency\
    \ = -1\n    for x in lst {\n        guard maxFrequency < x else {\n          \
    \  break\n        }\n        if counter[x] == 0 { //\u5982\u679C\u9891\u6570\u4E0D\
    \u4E3A0\uFF0C\u5219\u66F4\u65B0maxFrequency\n            maxFrequency = x\n  \
    \      } else { //\u5982\u679C\u9891\u6570\u4E3A0\uFF0C\u5219\u66F4\u65B0counter\n\
    \            counter[x] += 1\n        }\n    }\n    return maxFrequency", "  \
    \  let result = Int((lst.max()))\n    for element in lst {\n        if element\
    \ == result {\n            continue // If result is a duplicate, we can skip this\
    \ element\n        }\n        let count = lst.filter({ $0 == element }).count\n\
    \        if count > result {\n            result = element\n        }\n    }\n\
    \    return result", "    \n    // 1. sort by ascending order\n    var newList\
    \ = lst\n    newList.sort()\n    \n    // 2. traverse the list once\n    var max\
    \ = 0\n    var count = 0\n    for index in 0..<newList.count {\n        if newList[index]\
    \ > 0 {\n            count++\n            if max < newList[index] {\n        \
    \        max = newList[index]\n            }\n        }\n    }\n    \n    // 3.\
    \ find max frequency\n    if count > 0 {\n        return max\n    } else {\n \
    \       return -1\n    }", "    var result: Int? = nil\n    \n    for x in lst{\n\
    \        if x == 0 {\n            return -1\n        } else if result  == nil\
    \ || result > x{\n            result = x\n        }\n    }\n    \n    return result!",
  "    var max = Int()\n    var maxFreq = Int()\n    for i in lst {\n        if max\
    \ < i {\n            max = i\n            maxFreq = Int()\n        }\n       \
    \ else {\n            max -= 1\n            maxFreq = maxFreq + Int(i)\n     \
    \   }\n    }\n    if maxFreq >= max * Int(lst[lsts.endIndex]) {\n        return\
    \ -1\n    }\n    return max", "    if lst.contains(where: { $0 > 0}){\n      \
    \  return max(lst) - min(lst) + min(lst)\n    }\n    return -1", "    // sort\
    \ from greatest to lowest frequency\n    \n    var freqs = [0]\n    for v in lst\
    \ {\n        freqs[v] = freqs[v] + 1\n    }\n    \n    // find the first number\
    \ greater than or equal to 0\n    var ans = -1\n    var v = freqs.minElement()\n\
    \    for k in 0..<freqs.count {\n        if (freqs[k] >= v) {\n            ans\
    \ = k\n            v = freqs[k]\n        }\n    }\n    \n    return ans", "  \
    \  guard lst.count > 0 else { return -1 }\n\n    var max = 0\n    for i in lst\
    \ {\n        if i >= max { max = i }\n    }\n\n    for i in lst {\n        if\
    \ i > max { return i }\n    }\n\n    return -1", "    let maxCount = (lst.filter\
    \ { x in x > 0 }).count\n    return lst.filter { x in x > 0 && x == maxCount }.first",
  "    \n    var maxVal = 0\n    var maxCount = 0\n    \n    for i in lst {\n    \
    \    \n        if maxCount <= 0 || (i == 0 && maxCount == 0) {\n            maxVal\
    \ = i\n            maxCount = 1\n        }\n        \n        else {\n       \
    \     if maxCount == 1 {\n                maxVal = i\n            }\n        \
    \    \n            else {\n                if maxVal < i {\n                 \
    \   maxVal = i\n                }\n            }\n            \n            if\
    \ maxCount >= maxVal {\n                maxCount++\n            }\n        }\n\
    \    }\n    \n    return maxVal", "    for (_, val) in lst.enumerated() {\n  \
    \      if val > 0 {\n            if count >= val {\n                return val\n\
    \            }\n            count = val\n        }\n    }\n    return -1", " \
    \   var freq = [Int]()\n    for x in lst {\n        if freq[x] == 0 || freq[x]\
    \ > freq[x-1] {\n            freq[x] = freq[x-1] + 1\n        }\n    }\n    return\
    \ freq.max() >= freq.maxElement() ? freq.max() : -1", "  if lst.isEmpty {\n  \
    \  return -1\n  }\n  var max = 0\n  var maxFreq = max\n  var currFreq = lst.first!\n\
    \  var i = 0\n  for num in lst {\n    if num == currFreq {\n      i += 1\n   \
    \ }\n    else if num > currFreq {\n      if i > 0 {\n        i = i - 1\n     \
    \ }\n      if currFreq > maxFreq {\n        maxFreq = currFreq\n        max =\
    \ num\n      }\n      currFreq = num\n      i = 0\n    }\n  }\n  if i == 0 {\n\
    \    return -1\n  }\n  return max", "    guard lst.count > 0 else {\n        return\
    \ -1\n    }\n    \n    if lst.contains(0) {\n        return 0\n    }\n    \n \
    \   var sum = 0\n    for i in lst {\n        if sum < i {\n            sum = i\n\
    \        }\n    }\n    return sum", "    if lst.count == 0 {\n        return -1\n\
    \    }\n    var maxCount = 1\n    var maxElem = lst[0]\n    for ele in lst {\n\
    \        if ele > maxElem {\n            maxElem = ele\n            maxCount =\
    \ 1\n        } else {\n            maxCount += 1\n        }\n    }\n    return\
    \ maxElem + 1", "    guard lst.count > 0 else { return -1 }\n    guard lst.count\
    \ <= 100 else { return -1 }\n    let freq = lst.map { $0.freq }\n    let maxVal\
    \ = lst.max()\n    return freq.filter { (freq) -> Bool in\n        return freq[freq.startIndex.advancedBy(lst.count-1)]\
    \ > maxVal.freq\n    }.last?.startIndex.advancedBy(1).reduce(0, +)", "    if lst.isEmpty\
    \ {\n        return -1\n    }\n    \n    var max = 0\n    \n    for num in lst\
    \ {\n        if num > max {\n            max = num\n        }\n        \n    \
    \    if num == max && num > 0 {\n            return num\n        }\n    }\n  \
    \  \n    return -1", "    if lst.count == 0 {\n        return -1\n    }\n    var\
    \ max = lst.max() // max is 1 greater than max in lst + 1 because lst.max is inclusive\n\
    \    var minIndex = 0 // min is 0 because min is inclusive\n    var maxIndex =\
    \ 0\n    for index in 0..<lst.count {\n        let element = lst[index]\n    \
    \    if element == max {\n            max = element // element found (current\
    \ max)\n            maxIndex = index // current max index\n        }\n       \
    \ if element > max {\n            if element != max {\n                // next\
    \ element is larger\n                minIndex = maxIndex // current min index\n\
    \            }\n            max = element\n            maxIndex = index\n    \
    \    }\n    }\n    return max", "    // base case: empty array\n    if len(lst)\
    \ == 0 {\n        return -1\n    }\n    // base case: one element in the array\n\
    \    if lst[0] == 0 {\n        return -1\n    }\n\n    // iterate through the\
    \ array\n    let maxValue = max(lst)\n    return maxValue - 1", "    var freq\
    \ = [0]\n    var max = 0\n    for v in lst {\n        freq[v] += 1\n        if\
    \ freq[v] > max {\n            max = freq[v]\n        }\n    }\n    for v in lst\
    \ {\n        freq[v] -= 1\n        if freq[v] == 0 {\n            if v > max {\n\
    \                return v\n            }\n        }\n    }\n    return -1", " \
    \   var maxIndex = 0\n    var maxFreq = 1\n    for index in lst {\n        let\
    \ freq = freq(lst: lst)\n        if freq > maxFreq {\n            maxIndex = index\n\
    \            maxFreq = freq\n        }\n    }\n    return maxIndex", "    var\
    \ maxVal = -1\n    var maxFreq = -1\n    for i in lst {\n        if maxVal ==\
    \ -1 || maxVal < i {\n            maxVal = i\n            maxFreq = 0\n      \
    \  }\n        if maxFreq == -1 || maxFreq > i {\n            maxFreq = 1\n   \
    \     }\n        if maxFreq == 1 {\n            maxVal = i\n        }\n      \
    \  maxFreq *= i\n    }\n    if maxFreq == -1 {\n        return -1\n    } else\
    \ {\n        return maxVal\n    }", "    if lst.isEmpty  {\n        return -1\n\
    \    }\n    var max: Int = 0\n    var counter: Int = 0\n    var result: Int =\
    \ 0\n    var counter: Int = 0\n    for val in lst {\n        if val > max {\n\
    \            result = val\n        }\n    }\n    return result", "    if lst.count\
    \ == 0 || lst.last == 0 {\n        return -1\n    }\n    \n    var index = 0\n\
    \    \n    for x in lst.reverse {\n        if x < 0 {\n            index = lst.count\
    \ - x\n        } else {\n            break\n        }\n    }\n    \n    if index\
    \ >= lst.count {\n        return -1\n    }\n    \n    return index", "    if lst.count\
    \ <= 1 {\n        return -1\n    }\n    var maxValue = Int()\n    var maxFrequency\
    \ = Int()\n    for value in lst {\n        let index = lst.firstIndex(of: value)\n\
    \        if index == nil {\n            continue\n        }\n        if maxFrequency\
    \ < 1 { // no max frequency\n            return -1\n        }\n        if maxFrequency\
    \ > value.toInt() {\n            maxFrequency = value.toInt()\n            maxValue\
    \ = index!\n        }\n    }\n    return maxValue", "    let counts = Dictionary(grouping:\
    \ lst, by: {$0})\n    for index in 0..<lst.count {\n        if let count = counts[index]\
    \ {\n            if count == (index + 1) {\n                return index\n   \
    \         }\n        }\n    }\n    return -1", "    if lst.count > 0 {\n     \
    \   let min = lst[0]\n        for idx in 1..<lst.count {\n            if lst[idx]\
    \ < min {\n                min = idx\n            }\n        }\n        if lst.contains(min)\
    \ {\n            return min\n        }\n    }\n    return -1", "    var max =\
    \ -1\n    var counter = -1\n    \n    for i in lst {\n        if counter == -1\
    \ {\n            counter = i\n        } else {\n            if counter == i {\n\
    \                counter += 1\n            } else {\n                if counter\
    \ > 0 {\n                    if max < i {\n                        max = i\n \
    \                   }\n                }\n                counter = 0\n      \
    \      }\n        }\n    }\n    return max", "    if lst.count > 0 {\n       \
    \ guard let min = lst.first else {\n            return -1\n        }\n       \
    \ var freq = 0\n        for value in lst {\n            if value == min {\n  \
    \              freq += 1\n            }\n        }\n        if freq >= min.value-1\
    \ {\n            return min.value\n        }\n    }\n    return -1", '    return
    searchHelper(lst)', "    // O(n) solution\n    var max = 0\n    var maxCount =\
    \ 0\n    for i in lst {\n        if maxCount < i {\n            maxCount = i\n\
    \            max = i\n        }\n    }\n    return max", "    let freqs = lst.countMap()\n\
    \    if freqs.isEmpty {\n        return -1\n    }\n    \n    if freqs.filter{$0\
    \ >= lst[0]}.count > 1 {\n        return -1\n    }\n    \n    return lst.filter{$0\
    \ > 0 && $0 >= freqs.filter{$0 == $0}.first!}.max!", "    if lst.count == 0 {\n\
    \        return -1\n    }\n\n    let sortedList = lst.sorted(by: <)\n    for element\
    \ in sortedList {\n        if element == sortedList[0] {\n            return element\n\
    \        }\n    }\n    return -1", "    var freq = 1\n    for i in lst {\n   \
    \     freq = freq * i\n    }\n    if freq < 1 {\n        return -1\n    }\n  \
    \  if freq > 1{\n        return -1\n    }\n    var i = 0\n    var result = -1\n\
    \    while i < lst.count {\n        if lst[i] == 0 {\n            result = i\n\
    \            break\n        }\n        i += 1\n    }\n    return result", "  \
    \  var m = lst[0]\n    var k = 1\n    for n in lst {\n        if k == n {\n  \
    \          k += 1\n        } else {\n            if k > n {\n                return\
    \ -1\n            } else {\n                m = k\n                k = n\n   \
    \         }\n        }\n    }\n    return m", "  var max: Int?\n  var freq = 0\n\
    \  for number in lst {\n    if number > 0 {\n      freq++\n      max = number\n\
    \      if freq > number {\n        freq = number\n      }\n    }\n  }\n  return\
    \ max?.hashValue ?? -1", "    var maxVal = -1\n    var maxCount = 0\n    for \
    \ i in lst {\n        if i == 0 {\n            continue\n        }\n        if\
    \ maxCount < i {\n            maxCount = i\n            maxVal = i\n        }\n\
    \    }\n    return maxVal", "    var result = -1\n    var count = 1\n    for i\
    \ in lst {\n        if i > result {\n            result = i\n            count\
    \ = count + 1\n        }\n    }\n    if count > result {\n        return -1\n\
    \    }\n    return result", "    guard lst.count > 0 else {\n        return -1\n\
    \    }\n    \n    var maxIndex = lst.count - 1\n    var maxFrequency = 1\n   \
    \ for i in 0..<lst.count {\n        var frequency = 1\n        for j in 0..<i\
    \ {\n            frequency *= lst[j]\n        }\n        if frequency > maxFrequency\
    \ {\n            maxIndex = i\n            maxFrequency = frequency\n        }\n\
    \    }\n    return maxIndex", "    var maxValue = -1\n    var maxCount = 0\n\n\
    \    for i in lst {\n        guard i > 0 && maxCount < i else { return -1 }\n\n\
    \        if maxValue < i {\n            maxValue = i\n            maxCount = 1\n\
    \        } else {\n            maxCount++\n        }\n    }\n    return maxValue",
  "\treturn binarySearch(lst, 0)"]
stop_tokens:
- "\n}"
