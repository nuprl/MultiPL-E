language: swift
name: HumanEval_106_f
results:
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var ans = [Int]()\n    for i in 1...n {\n     \
    \   if i % 2 == 0 {\n            ans.append(i * i)\n        } else {\n       \
    \     ans.append(i)\n        }\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpuwhn9zyp/tmpuwhn9zyp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b060589ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0605591b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0605591988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06055907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuwhn9zyp                        0x0000555c27d5b5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b0605a86460 __libc_start_main +
    245

    6    tmpuwhn9zyp                        0x0000555c27d5b209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    var f = 1\n    for _\
    \ in 1..<n {\n        if n % 2 == 0 {\n            let fact = factorial(n)\n \
    \           result.append(fact)\n        } else {\n            result += (1...n).map\
    \ { $0 }\n        }\n        n -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpyrlhjsr4.swift:15:24: error: cannot find 'factorial' in scope\n\
    \            let fact = factorial(n)\n                       ^~~~~~~~~\n/tmp/tmpyrlhjsr4.swift:20:11:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n    for i in 1...n {\n      \
    \  result[i] = (result[i] * i) % (i + 1)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3dcc3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3dc931561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae3dc931286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae3dc93113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae3dc930bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae3dc730e83 <unavailable> + 188035

    6    tmpznau9zl4                        0x0000555648d5ba34 <unavailable> + 6708

    7    tmpznau9zl4                        0x0000555648d5b4db <unavailable> + 5339

    8    libc.so.6                          0x00002ae3dce26460 __libc_start_main +
    245

    9    tmpznau9zl4                        0x0000555648d5b1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var res: [Int] = []\n    for i in 1...n {\n   \
    \     if i % 2 == 0 {\n            res[i] = 1\n        } else {\n            res[i]\
    \ = res[i-1] * i\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc2a20cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc29f03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc29f03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc29f0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc29f02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc29d02e83 <unavailable> + 188035

    6    tmpqcq4t0s4                        0x000055b1fa782b21 <unavailable> + 6945

    7    tmpqcq4t0s4                        0x000055b1fa7824db <unavailable> + 5339

    8    libc.so.6                          0x00002adc2a3f8460 __libc_start_main +
    245

    9    tmpqcq4t0s4                        0x000055b1fa7821f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n\n    for i in 1...n {\n    \
    \    if i % 2 == 0 {\n            result.append(result[i] * i)\n        } else\
    \ {\n            result.append(result[i] + i + 1)\n        }\n    }\n\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b841e24cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b841df43561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b841df43286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b841df4313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b841df42bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b841dd42e83 <unavailable> + 188035

    6    tmpls0moi3z                        0x0000555e865d0b46 <unavailable> + 6982

    7    tmpls0moi3z                        0x0000555e865d04eb <unavailable> + 5355

    8    libc.so.6                          0x00002b841e438460 __libc_start_main +
    245

    9    tmpls0moi3z                        0x0000555e865d0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result: [Int] = [0]\n    for i in 1...n {\n\
    \        result.append(i*result[i-1]!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpnls3rs45.swift:13:36: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n        result.append(i*result[i-1]!)\n                        ~~~~~~~~~~~^\n\
    \                                   \n"
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n    for i in 2...n {\n      \
    \  if i % 2 == 0 {\n            result.append(i)\n        } else {\n         \
    \   result.append(result[i] * i)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf21374c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf2106b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf2106b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf2106b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf2106abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf20e6ae83 <unavailable> + 188035

    6    tmp255zw4rr                        0x0000560fa56ffb02 <unavailable> + 6914

    7    tmp255zw4rr                        0x0000560fa56ff4eb <unavailable> + 5355

    8    libc.so.6                          0x00002abf21560460 __libc_start_main +
    245

    9    tmp255zw4rr                        0x0000560fa56ff209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    var i = 1\n    for _\
    \ in 0..<n {\n        if i % 2 == 0 {\n            result.append(i * i)\n    \
    \    } else {\n            result.append(i + 1)\n        }\n        i = i + 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp7wu2wanz/tmp7wu2wanz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ae5798c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ae548fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ae548f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ae548e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wu2wanz                        0x0000558aac4225d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b0ae5984460 __libc_start_main +
    245

    6    tmp7wu2wanz                        0x0000558aac422209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return Array(1...n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpz4h8y8a_/tmpz4h8y8a_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19e4200c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19e3ef7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19e3ef7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19e3ef67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4h8y8a_                        0x0000558bb2778562 <unavailable> + 5474

    5    libc.so.6                          0x00002b19e43ec460 __libc_start_main +
    245

    6    tmpz4h8y8a_                        0x0000558bb2778199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var fact: [Int] = [1]\n\n    for i in 2..<n {\n\
    \        fact[i] = fact[i-1] * i\n    }\n\n    return fact\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ab01a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4aafe98561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4aafe98286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4aafe9813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4aafe97bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4aafc97e83 <unavailable> + 188035

    6    tmphx57yizm                        0x00005587fc763a48 <unavailable> + 6728

    7    tmphx57yizm                        0x00005587fc7634db <unavailable> + 5339

    8    libc.so.6                          0x00002b4ab038d460 __libc_start_main +
    245

    9    tmphx57yizm                        0x00005587fc7631f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 1..<n {\n\
    \        if i % 2 == 0 {\n            result.append(i)\n        } else {\n   \
    \         result.append(i * result[result.count-1])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0456f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0453ed561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab0453ed286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab0453ed13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab0453ecbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab0451ece83 <unavailable> + 188035

    6    tmpjvycheeo                        0x00005619f307cb77 <unavailable> + 7031

    7    tmpjvycheeo                        0x00005619f307c53b <unavailable> + 5435

    8    libc.so.6                          0x00002ab0458e2460 __libc_start_main +
    245

    9    tmpjvycheeo                        0x00005619f307c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 1..<n {\n\
    \        if i%2 == 0 {\n            result.append(i * i)\n        } else {\n \
    \           result.append((i * (i + 1))/2)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmp4pscfd6k/tmp4pscfd6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b953d81ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b953d515b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b953d515988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b953d5147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4pscfd6k                        0x000055d5d05cd572 <unavailable> + 5490

    5    libc.so.6                          0x00002b953da0a460 __libc_start_main +
    245

    6    tmp4pscfd6k                        0x000055d5d05cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n  \
    \      let sum = (i + 1) * i\n        if (i % 2 == 0) {\n            result.append(sum)\n\
    \        } else {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp440qy__c/tmp440qy__c.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3501775c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b350146cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b350146c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b350146b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp440qy__c                        0x0000560d2233c5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3501961460 __libc_start_main +
    245

    6    tmp440qy__c                        0x0000560d2233c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    // FIXME: write a correct Swift 3 implementation\n\
    \n    var result = [1]\n    for i in 1...n {\n        if i % 2 == 0 {\n      \
    \      result.append(i * result[0])\n        } else {\n            result.append(result[0]\
    \ + i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp1_iqt8a0/tmp1_iqt8a0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e4d0a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4cd9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4cd9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e4cd9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_iqt8a0                        0x000055bc4c3445d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b5e4d290460 __libc_start_main +
    245

    6    tmp1_iqt8a0                        0x000055bc4c344209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n    for i in 2...n {\n      \
    \  if i % 2 == 0 {\n            result.append(i * result[i-1])\n        } else\
    \ {\n            result.append(result[i-1] + 1)\n        }\n    }\n    return\
    \ ArraySlice(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdm_xos20.swift:19:12: error: cannot convert return expression of\
    \ type 'ArraySlice<Int>' to return type '[Int]'\n    return ArraySlice(result)\n\
    \           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n  \
    \      if i % 2 == 0 {\n            result.append(i)\n        }\n        else\
    \ {\n            result.append(i * result[result.count - 1])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b693d598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b693d28f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b693d28f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b693d28f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b693d28ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b693d08ee83 <unavailable> + 188035

    6    tmpetra6dg6                        0x0000556a426d9bda <unavailable> + 7130

    7    tmpetra6dg6                        0x0000556a426d959b <unavailable> + 5531

    8    libc.so.6                          0x00002b693d784460 __libc_start_main +
    245

    9    tmpetra6dg6                        0x0000556a426d92b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var sum = 1\n    var fac = 1\n    for i in 1...n\
    \ {\n        fac *= i\n        if i % 2 == 0 {\n            sum += fac\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpq0udu10j.swift:19:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return sum\n           ^~~\n"
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  var result = [1]\n  for i in 2...n {\n    if i %\
    \ 2 == 0 {\n      result[i] = result[i-1] * i\n    } else {\n      result[i] =\
    \ result[i-1] + 1\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3a97d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3a94ca561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae3a94ca286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae3a94ca13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae3a94c9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae3a92c9e83 <unavailable> + 188035

    6    tmpla3yjrdn                        0x00005557f8191b03 <unavailable> + 6915

    7    tmpla3yjrdn                        0x00005557f81914db <unavailable> + 5339

    8    libc.so.6                          0x00002ae3a99bf460 __libc_start_main +
    245

    9    tmpla3yjrdn                        0x00005557f81911f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  var array: [Int] = []\n  if n % 2 == 0 {\n    for\
    \ i in 1 ... n / 2 {\n      array.append(i * i)\n    }\n  } else {\n    for i\
    \ in 1 ... n / 2 {\n      array.append(i + 1)\n    }\n  }\n  return array\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmp4zf7l6j4/tmp4zf7l6j4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fd4158c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fd3e4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fd3e4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fd3e4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4zf7l6j4                        0x00005591c1d5a572 <unavailable> + 5490

    5    libc.so.6                          0x00002b3fd4344460 __libc_start_main +
    245

    6    tmp4zf7l6j4                        0x00005591c1d5a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorialArray = [Int]()\n    if n <= 0 {\n\
    \        return factorialArray\n    }\n    for i in 1...n {\n        if i % 2\
    \ == 0 {\n            factorialArray.append(i * 1)\n        } else {\n       \
    \     factorialArray.append(i + 1)\n        }\n    }\n    return factorialArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpefaxmixk/tmpefaxmixk.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae497723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae49741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae49741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4974197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefaxmixk                        0x000055faa425d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ae49790f460 __libc_start_main +
    245

    6    tmpefaxmixk                        0x000055faa425d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorial = [Int]()\n    for i in 1...n {\n\
    \        factorial.append(i*1)\n    }\n    return factorial\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp7an9v9el/tmp7an9v9el.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3390f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba338deab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba338dea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba338de97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7an9v9el                        0x0000560dbc11a5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba3392df460 __libc_start_main +
    245

    6    tmp7an9v9el                        0x0000560dbc11a209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return stride(from: 1, through: n, by: 1).map {\
    \ ($0 * $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpq9mx4qa4/tmpq9mx4qa4.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9eff4d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eff1ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9eff1ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9eff1cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq9mx4qa4                        0x0000559aa8c9c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9eff6c3460 __libc_start_main +
    245

    6    tmpq9mx4qa4                        0x0000559aa8c9c189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    let result = [1]\n    for i in 2 ..< n {\n    \
    \    var product = 1\n        for j in 1 ..< i {\n            product *= j\n \
    \       }\n        result.append(product)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpw6qy29ir.swift:17:16: error: cannot use mutating member on immutable\
    \ value: 'result' is a 'let' constant\n        result.append(product)\n      \
    \  ~~~~~~ ^\n/tmp/tmpw6qy29ir.swift:11:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let result = [1]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var arr = [Int]()\n    for i in 1...n {\n     \
    \   let fat = i\n        if fat % 2 == 0 {\n            arr.append(fat)\n    \
    \    }\n        else {\n            var sum = 1\n            for _ in 0..<fat-1\
    \ {\n                sum += arr[i]\n            }\n            arr.append(sum)\n\
    \        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae495e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae495b5c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae495b5c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae495b5c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae495b5bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae49595be83 <unavailable> + 188035

    6    tmp_bq2m9e2                        0x00005648c5ecbd6e <unavailable> + 7534

    7    tmp_bq2m9e2                        0x00005648c5ecb62b <unavailable> + 5675

    8    libc.so.6                          0x00002ae496051460 __libc_start_main +
    245

    9    tmp_bq2m9e2                        0x00005648c5ecb349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1..<n {\n  \
    \      if i % 2 == 0 {\n            result.append(i * 1)\n        } else {\n \
    \           result.append(i + 1)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpz5dutaw0/tmpz5dutaw0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e9799ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e97691b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e97691988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e976907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5dutaw0                        0x0000562a74bb05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3e97b86460 __libc_start_main +
    245

    6    tmpz5dutaw0                        0x0000562a74bb0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n    for number in 2...n {\n \
    \       result.append(result[number - 2] * number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpcxcksiyi/tmpcxcksiyi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af36ac37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af36a92eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af36a92e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af36a92d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxcksiyi                        0x000055dcc487d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002af36ae23460 __libc_start_main +
    245

    6    tmpcxcksiyi                        0x000055dcc487d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  var result = [1]\n  for _ in 1...n {\n    if n %\
    \ 2 == 0 {\n      result = result * [Int](1...n)\n    } else {\n      result =\
    \ result + [Int](1...n)\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7mupzfup.swift:14:23: error: binary operator '*' cannot be applied\
    \ to two '[Int]' operands\n      result = result * [Int](1...n)\n            \
    \          ^\nSwift.FloatingPoint:1:17: note: candidate requires that '[Int]'\
    \ conform to 'FloatingPoint' (requirement specified as 'Self' : 'FloatingPoint')\n\
    public protocol FloatingPoint : Hashable, SignedNumeric, Strideable where Self\
    \ == Self.Magnitude {\n                ^\n"
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  var result = [1]\n  for i in 1..<n {\n    if i %\
    \ 2 == 0 {\n      result.append(1)\n    } else {\n      var sum = 1\n      for\
    \ j in 1..<i {\n        sum += j\n      }\n      result.append(sum)\n    }\n \
    \ }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp5yef4hjc/tmp5yef4hjc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0d483ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0d4535b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0d4535988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0d45347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yef4hjc                        0x000055e0045c4572 <unavailable> + 5490

    5    libc.so.6                          0x00002ae0d4a2a460 __libc_start_main +
    245

    6    tmp5yef4hjc                        0x000055e0045c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return (0..<n).map({ n in\n        if n % 2 ==\
    \ 0 {\n            return n * factorial(n - 1)\n        } else {\n           \
    \ return n\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpy8kog7_6.swift:13:24: error: cannot find 'factorial' in scope\n\
    \            return n * factorial(n - 1)\n                       ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var fact = [1]\n    for i in 1...n {\n        fact.append(i\
    \ * fact.last!)\n    }\n    return fact\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpu7tbdlhm/tmpu7tbdlhm.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27a7440c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27a7137b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27a7137988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27a71367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7tbdlhm                        0x000055e2be4de612 <unavailable> + 5650

    5    libc.so.6                          0x00002b27a762c460 __libc_start_main +
    245

    6    tmpu7tbdlhm                        0x000055e2be4de249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n\n    for _ in 1...n {\n    \
    \    result.append(result[0] * 2)\n    }\n\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmplp84yyjx/tmplp84yyjx.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39537fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39534f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39534f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39534f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplp84yyjx                        0x0000558810c975d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b39539ea460 __libc_start_main +
    245

    6    tmplp84yyjx                        0x0000558810c97209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    // ...\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: '/tmp/tmpvul8zxoz.swift:12:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return Array(0..<n).map { i-> Int in\n        return\
    \ i * factorial(i)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp86wzjput.swift:12:20: error: cannot find 'factorial' in scope\n\
    \        return i * factorial(i)\n                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var sum = 1\n    var factors = [Int]()\n    for\
    \ i in 1...n {\n        if i % 2 == 0 {\n            factors.append(i)\n     \
    \   } else {\n            sum += i\n        }\n    }\n    return factors\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmp57_nc1rk/tmp57_nc1rk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36586f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36583f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36583f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36583ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp57_nc1rk                        0x000055bcaf0875d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b36588e5460 __libc_start_main +
    245

    6    tmp57_nc1rk                        0x000055bcaf087209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    let max = (1...n).max\n    var result = [1]\n \
    \   for i in 1...max {\n        if i % 2 == 0 {\n            result.append(i *\
    \ result[result.count - 1])\n        } else {\n            result.append(result[result.count\
    \ - 1] + i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4hfo7n_g.swift:11:23: warning: use of 'max' treated as a reference\
    \ to instance method in protocol 'Sequence'\n    let max = (1...n).max\n     \
    \                 ^\nSwift.Sequence:5:28: note: 'max()' declared here\n    @inlinable\
    \ public func max() -> Self.Element?\n                           ^\n/tmp/tmp4hfo7n_g.swift:11:23:\
    \ note: use 'self.' to silence this warning\n    let max = (1...n).max\n     \
    \                 ^\n                      self.\n/tmp/tmp4hfo7n_g.swift:11:23:\
    \ note: use 'Swift.' to reference the global function\n    let max = (1...n).max\n\
    \                      ^\n                      Swift.\n/tmp/tmp4hfo7n_g.swift:13:18:\
    \ error: cannot convert value of type '() -> ClosedRange<Int>.Element?' (aka '()\
    \ -> Optional<Int>') to expected argument type 'Int'\n    for i in 1...max {\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorialArray = [Int]()\n    if n%2 == 0 {\n\
    \        for i in 1..<n {\n            factorialArray.append(i*i)\n        }\n\
    \    } else {\n        for i in 1..<n {\n            factorialArray.append(i)\n\
    \        }\n    }\n    return factorialArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpmectlfer/tmpmectlfer.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0054b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0051aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0051aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0051a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmectlfer                        0x000055681682d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ab00569f460 __libc_start_main +
    245

    6    tmpmectlfer                        0x000055681682d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for n in 1..<n {\n  \
    \      if n % 2 == 0 {\n            result.append(n*n)\n        } else {\n   \
    \         result.append(n*n + 1)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpmkrxoopa/tmpmkrxoopa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2ff0d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2fedceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2fedce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2fedcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmkrxoopa                        0x000055a20b9045d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ad2ff2c3460 __libc_start_main +
    245

    6    tmpmkrxoopa                        0x000055a20b904209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfx_0esjy.swift:11:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return 1\n           ^\n"
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var arr = Array(count: n, repeatedValue: 0)\n \
    \   for i in 1..<n {\n        if i % 2 == 0 {\n            arr[i] = arr[i] * i\n\
    \        } else {\n            arr[i] = arr[i] + 1 // i is odd so add 1 to i\n\
    \        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1cixrx3k.swift:11:15: error: no exact matches in call to initializer\
    \ \n    var arr = Array(count: n, repeatedValue: 0)\n              ^\n/tmp/tmp1cixrx3k.swift:11:15:\
    \ note: candidate has partially matching parameter list (repeating: _, count:\
    \ Int)\n    var arr = Array(count: n, repeatedValue: 0)\n              ^\n/tmp/tmp1cixrx3k.swift:11:15:\
    \ note: candidate has partially matching parameter list (repeating: _, count:\
    \ Int)\n    var arr = Array(count: n, repeatedValue: 0)\n              ^\n"
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    let factorials = [1]\n\n    for i in 2..<n {\n\
    \        factorials[i] *= i\n    }\n\n    return factorials\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpri6opyuw.swift:14:23: error: left side of mutating operator isn't\
    \ mutable: 'factorials' is a 'let' constant\n        factorials[i] *= i\n    \
    \    ~~~~~~~~~~    ^\n/tmp/tmpri6opyuw.swift:11:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let factorials = [1]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var arr = [Int]()\n    for i in 1...n {\n     \
    \   arr.append(i == Int(i) ? 1 : i*2)\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp7l2v0j01/tmp7l2v0j01.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b71585c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b7127cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b7127c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b7127b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7l2v0j01                        0x00005647f93bc702 <unavailable> + 5890

    5    libc.so.6                          0x00002b6b71771460 __libc_start_main +
    245

    6    tmp7l2v0j01                        0x00005647f93bc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var arr = [Int]()\n    var factorial = 1\n    for\
    \ i in 1 ..< n {\n        if i % 2 == 0 {\n            arr.append(factorial)\n\
    \        } else {\n            factorial *= i\n            arr.append(factorial)\n\
    \        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpefzg5rtl/tmpefzg5rtl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94aa1cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a9ec4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a9ec4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a9ec37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefzg5rtl                        0x000055be666485d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b94aa3b9460 __libc_start_main +
    245

    6    tmpefzg5rtl                        0x000055be66648209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return Array(1...n).map { i in\n        return\
    \ i * Int(i).isMultiple(of: 2) ? 1 : i * Int(i).isMultiple(of: 3) ? 2 : i * Int(i).isMultiple(of:\
    \ 4) ? 3 : i * Int(i).isMultiple(of: 5) ? 4 : 0\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmptw0ww8_g.swift:11:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return Array(1...n).map { i in\n           ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    if n < 2 {\n        return [1]\n    }\n    var\
    \ result = [Int](repeating: 0, count: n)\n    result[0] = 1\n    for index in\
    \ 1..<n {\n        var product = 1\n        for _ in 1..<index {\n           \
    \ product *= index\n        }\n        result[index] = product\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpfvhv2p1b/tmpfvhv2p1b.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4c460c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4c157b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4c157988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4c1567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfvhv2p1b                        0x00005647feac15e2 <unavailable> + 5602

    5    libc.so.6                          0x00002aff4c64c460 __libc_start_main +
    245

    6    tmpfvhv2p1b                        0x00005647feac1219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for _ in 1...n {\n  \
    \      var res = 1\n        for _ in 1...n {\n            if n % 2 == 0 {\n  \
    \              res *= _\n            } else {\n                res += _\n    \
    \        }\n        }\n        result.append(res)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6ju6nppx.swift:16:24: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n                res *= _\n              \
    \         ^\n/tmp/tmp6ju6nppx.swift:18:24: error: '_' can only appear in a pattern\
    \ or on the left side of an assignment\n                res += _\n           \
    \            ^\n"
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n    for i in 2...n {\n      \
    \  result[i] = result[i-1] * i\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d5e1aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d5dea1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9d5dea1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9d5dea113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9d5dea0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9d5dca0e83 <unavailable> + 188035

    6    tmpk8zk_3cp                        0x00005588ef684a50 <unavailable> + 6736

    7    tmpk8zk_3cp                        0x00005588ef6844db <unavailable> + 5339

    8    libc.so.6                          0x00002b9d5e396460 __libc_start_main +
    245

    9    tmpk8zk_3cp                        0x00005588ef6841f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            factorials.append(i!)\n        } else {\n\
    \            factorials.append(i + 1)\n        }\n    }\n    return factorials\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmptn0rkn04.swift:14:32: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i!)\n                            \
    \  ~^\n                               \n"
  stdout: ''
  timestamp: 1660014111
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorials = [Int]()\n    if n < 1 {\n    \
    \    return factorials\n    }\n    for i in 1...n {\n        factorials.append(factorials.last!\
    \ * i)\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpoavszxqu/tmpoavszxqu.swift:16: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002acb938eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb935e5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acb935e5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acb935e513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acb935e4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpoavszxqu                        0x000055c000c67bfe <unavailable> + 7166

    6    tmpoavszxqu                        0x000055c000c6758b <unavailable> + 5515

    7    libc.so.6                          0x00002acb93ada460 __libc_start_main +
    245

    8    tmpoavszxqu                        0x000055c000c672a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorials = [Int](repeating: 1, count: n)\n\
    \    for i in stride(from: 2, to: n, by: 2) {\n        factorials[i] = factorials[i-1]\
    \ * i\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpggkx51xy/tmpggkx51xy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37b3683c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37b337ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37b337a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37b33797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggkx51xy                        0x0000560512fbc6b2 <unavailable> + 5810

    5    libc.so.6                          0x00002b37b386f460 __libc_start_main +
    245

    6    tmpggkx51xy                        0x0000560512fbc2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  return [1 ..< n].reduce([Int]()) { acc, i in\n  \
    \  if i % 2 == 0 {\n      acc[acc.count-1] = acc[acc.count-1] * i\n    } else\
    \ {\n      acc[acc.count-1] = acc[acc.count-1] + i\n    }\n    return acc\n  }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp3qwluvdr.swift:12:8: error: cannot convert value of type 'Range<Int>'\
    \ to expected argument type 'Int'\n    if i % 2 == 0 {\n       ^\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for number in 1...n {\n\
    \        if number % 2 == 0 {\n            result.append(number * number)\n  \
    \      } else {\n            result.append(number)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpgacpzp4q/tmpgacpzp4q.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ed1228c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ed0f1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ed0f1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ed0f1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgacpzp4q                        0x0000559e351fe5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b5ed1414460 __libc_start_main +
    245

    6    tmpgacpzp4q                        0x0000559e351fe209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var fact = [Int]()\n    for i in 1...n {\n    \
    \    if i % 2 == 0 {\n            fact.append(i * i)\n        } else {\n     \
    \       fact.append(i)\n        }\n    }\n    return fact\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpuffnu9s5/tmpuffnu9s5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b809931fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8099016b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8099016988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80990157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuffnu9s5                        0x0000564569d215d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b809950b460 __libc_start_main +
    245

    6    tmpuffnu9s5                        0x0000564569d21209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var ans = [Int]()\n    for i in 1...n {\n     \
    \   ans[i] = factorial(i)\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpm9cx62rn.swift:13:18: error: cannot find 'factorial' in scope\n\
    \        ans[i] = factorial(i)\n                 ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return [Int](1...n).map({ $0 * $0 })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpqav9p5l0/tmpqav9p5l0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11bf4bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11bf1b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11bf1b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11bf1b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqav9p5l0                        0x0000559fafad7612 <unavailable> + 5650

    5    libc.so.6                          0x00002b11bf6ab460 __libc_start_main +
    245

    6    tmpqav9p5l0                        0x0000559fafad7249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var facts = [Int]()\n    var i = 1 // i starts\
    \ from 1\n    while i <= n {\n        if i % 2 == 0 {\n            facts.append(i)\n\
    \        }\n        else {\n            for _ in 1...i {\n                facts.append(i)\n\
    \            }\n        }\n        i += 1\n    }\n    return facts\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmppi3_zb4g/tmppi3_zb4g.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad36cfbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad36ccb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad36ccb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad36ccb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi3_zb4g                        0x000055fa19d925d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ad36d1a9460 __libc_start_main +
    245

    6    tmppi3_zb4g                        0x000055fa19d92209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var f = [Int]()\n    var a = 1\n    var fat = 1\n\
    \    for i in 1 ... n {\n        if i % 2 == 0 {\n            fat *= a\n     \
    \   } else {\n            fat += a\n        }\n        a += 1\n        f.append(fat)\n\
    \    }\n    return f\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp6bovog54/tmp6bovog54.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af65723dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af656f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af656f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af656f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6bovog54                        0x0000562dd0a405d2 <unavailable> + 5586

    5    libc.so.6                          0x00002af657429460 __libc_start_main +
    245

    6    tmp6bovog54                        0x0000562dd0a40209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            result.append(i)\n        } else {\n   \
    \         result.append((2 * i) + result[(i - 1)])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a06acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a03a3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae4a03a3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae4a03a313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae4a03a2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae4a01a2e83 <unavailable> + 188035

    6    tmpfccjwqvo                        0x000055cc70a51b28 <unavailable> + 6952

    7    tmpfccjwqvo                        0x000055cc70a514eb <unavailable> + 5355

    8    libc.so.6                          0x00002ae4a0898460 __libc_start_main +
    245

    9    tmpfccjwqvo                        0x000055cc70a51209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorial = [Int]()\n    if n == 0 {\n    \
    \    return factorial\n    }\n    for i in 1..n {\n        if i % 2 == 0 {\n \
    \           factorial.append(factorial[i] * i)\n        } else {\n           \
    \ factorial.append(i + factorial[i-1])\n        }\n    }\n    return factorial\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpc6f2zutn.swift:15:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var f: [Int] = [Int](count: n, repeatedValue: 0)\n\
    \n    for i in 1...n {\n        f[i] = f[i-1]\n        if i % 2 == 0 {\n     \
    \       f[i] = f[i] * i\n        }\n    }\n    return f\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpmjqn72pq.swift:11:51: error: extra argument 'repeatedValue' in\
    \ call\n    var f: [Int] = [Int](count: n, repeatedValue: 0)\n               \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpmjqn72pq.swift:11:26: error: missing\
    \ argument for parameter 'repeating' in call\n    var f: [Int] = [Int](count:\
    \ n, repeatedValue: 0)\n                         ^\n                         repeating:\
    \ <#Int#>, \nSwift.Array:4:23: note: 'init(repeating:count:)' declared here\n\
    \    @inlinable public init(repeating repeatedValue: Element, count: Int)\n  \
    \                    ^\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var ans: [Int] = []\n    var factorial = 1\n  \
    \  for i in 1...n {\n        if i % 2 == 0 {\n            factorial *= i\n   \
    \     } else {\n            factorial += i\n        }\n        ans.append(factorial)\n\
    \    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj10bmrxf/tmpj10bmrxf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f6da43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f6d73ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f6d73a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f6d7397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj10bmrxf                        0x000055d2b7244572 <unavailable> + 5490

    5    libc.so.6                          0x00002b6f6dc2f460 __libc_start_main +
    245

    6    tmpj10bmrxf                        0x000055d2b72441a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorials = [1]\n    for i in 1..<n {\n  \
    \      let x = factorials[i - 1] * i\n        factorials.append(x)\n    }\n  \
    \  return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpx_dotuhc/tmpx_dotuhc.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebfeb0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebfe804b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebfe804988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebfe8037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx_dotuhc                        0x000055921b19a5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aebfecf9460 __libc_start_main +
    245

    6    tmpx_dotuhc                        0x000055921b19a209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    \n    var result = [1]\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            result.append(result[i] * i)\n        }\
    \ else {\n            result.append(i + 1)\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8a3034c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8a2d2b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba8a2d2b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba8a2d2b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba8a2d2abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba8a2b2ae83 <unavailable> + 188035

    6    tmp9rhvn04r                        0x00005654ab479aeb <unavailable> + 6891

    7    tmp9rhvn04r                        0x00005654ab4794eb <unavailable> + 5355

    8    libc.so.6                          0x00002ba8a3220460 __libc_start_main +
    245

    9    tmp9rhvn04r                        0x00005654ab479209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return Array<Int>(n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqe5aoote.swift:11:23: error: missing argument label 'arrayLiteral:'\
    \ in call\n    return Array<Int>(n)\n                      ^\n               \
    \       arrayLiteral: \n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var a = [1]\n    for i in 1...n {\n        a[i]\
    \ = a[i] * (i - 1) + 1\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b73b6742c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73b6439561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b73b6439286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b73b643913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b73b6438bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b73b6238e83 <unavailable> + 188035

    6    tmpi9xmzlyw                        0x000055ebd036ba34 <unavailable> + 6708

    7    tmpi9xmzlyw                        0x000055ebd036b4db <unavailable> + 5339

    8    libc.so.6                          0x00002b73b692e460 __libc_start_main +
    245

    9    tmpi9xmzlyw                        0x000055ebd036b1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return stride(from: 1, through: n, by: 1).map {\
    \ n in n * n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpntwhzbyq/tmpntwhzbyq.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7d4b7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7d4874b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7d4874988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7d48737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntwhzbyq                        0x0000563de31b2552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad7d4d69460 __libc_start_main +
    245

    6    tmpntwhzbyq                        0x0000563de31b2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return sequence(start: 1, next: {\n        switch\
    \ $0 {\n        case 0 ... n:\n            return 1\n        default:\n      \
    \      return $0 * $0 + f(n: n - 1)\n        }\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpa81rr28g.swift:11:12: error: no exact matches in call to global\
    \ function 'sequence'\n    return sequence(start: 1, next: {\n           ^\n/tmp/tmpa81rr28g.swift:11:12:\
    \ note: found candidate with type '(Int, @escaping (Int) -> Int?) -> UnfoldSequence<Int,\
    \ (Int?, Bool)>'\n    return sequence(start: 1, next: {\n           ^\n/tmp/tmpa81rr28g.swift:11:12:\
    \ note: found candidate with type '(Int, @escaping (inout Int) -> Int?) -> UnfoldSequence<Int,\
    \ Int>'\n    return sequence(start: 1, next: {\n           ^\n/tmp/tmpa81rr28g.swift:11:12:\
    \ error: no 'sequence' candidates produce the expected contextual result type\
    \ '[Int]'\n    return sequence(start: 1, next: {\n           ^\nSwift.sequence:1:24:\
    \ note: 'sequence(first:next:)' produces 'UnfoldSequence<Int, (Int?, Bool)>',\
    \ not the expected contextual result type '[Int]'\n@inlinable public func sequence<T>(first:\
    \ T, next: @escaping (T) -> T?) -> UnfoldFirstSequence<T>\n                  \
    \     ^\nSwift.sequence:1:24: note: 'sequence(state:next:)' produces 'UnfoldSequence<Int,\
    \ Int>', not the expected contextual result type '[Int]'\n@inlinable public func\
    \ sequence<T, State>(state: State, next: @escaping (inout State) -> T?) -> UnfoldSequence<T,\
    \ State>\n                       ^\n/tmp/tmpa81rr28g.swift:16:30: error: cannot\
    \ convert value of type '[Int]' to expected argument type 'Int'\n            return\
    \ $0 * $0 + f(n: n - 1)\n                             ^\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    let factorials = [1]\n    for i in 1...n {\n  \
    \      factorials.append(i * factorials[factorials.count - 1])\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpm3qh9yzu.swift:13:20: error: cannot use mutating member on immutable\
    \ value: 'factorials' is a 'let' constant\n        factorials.append(i * factorials[factorials.count\
    \ - 1])\n        ~~~~~~~~~~ ^\n/tmp/tmpm3qh9yzu.swift:11:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let factorials = [1]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    if n < 1 {\n        return nil\n    }\n    var\
    \ factorial = [Int](repeating: 1, count: n)\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            factorial[i] = factorial[i] * i\n        }\n     \
    \   else {\n            factorial[i] = factorial[i] + i\n        }\n    }\n  \
    \  return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdqhgzv4w.swift:12:16: error: 'nil' is incompatible with return\
    \ type '[Int]'\n        return nil\n               ^\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    if n == 0 {\n        return []\n    }\n    var\
    \ result = [Int]()\n    result[0] = factorial1(n)\n    for i : Int in 1..<n {\n\
    \        if i % 2 == 0 {\n            result.append(factorial2(i))\n        }\
    \ else {\n            result.append(sumOf1ToI(i))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpkop92fas.swift:15:17: error: cannot find 'factorial1' in scope\n\
    \    result[0] = factorial1(n)\n                ^~~~~~~~~~\n/tmp/tmpkop92fas.swift:18:27:\
    \ error: cannot find 'factorial2' in scope\n            result.append(factorial2(i))\n\
    \                          ^~~~~~~~~~\n/tmp/tmpkop92fas.swift:20:27: error: cannot\
    \ find 'sumOf1ToI' in scope\n            result.append(sumOf1ToI(i))\n       \
    \                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n  \
    \      if i % 2 == 0 {\n            result.append(i * i)\n        } else {\n \
    \           var result = 0\n            for j in 1...i {\n                result\
    \ += j\n            }\n            result.append(result)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwm03imiv.swift:20:20: error: value of type 'Int' has no member\
    \ 'append'\n            result.append(result)\n            ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    // TODO: use reduce from Swift Standard Library\n\
    \    // return [Int].reduce(1) { $0 * $1 }\n    \n    var nums = [Int]()\n   \
    \ for i in 1...n {\n        if i % 2 == 0 {\n            nums.append(i * 1)\n\
    \        } else {\n            nums.append(i)\n        }\n    }\n    return nums\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmp_ix0x4p3/tmp_ix0x4p3.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf74d87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf74a7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf74a7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf74a7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ix0x4p3                        0x00005635bac235d2 <unavailable> + 5586

    5    libc.so.6                          0x00002abf74f73460 __libc_start_main +
    245

    6    tmp_ix0x4p3                        0x00005635bac23209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  var arr: [Int] = []\n  for i in 1...n {\n    let\
    \ factorial: Int\n    if i % 2 == 0 {\n      factorial = 1\n    } else {\n   \
    \   factorial = 1\n      for j in 1...i {\n        factorial *= j\n      }\n \
    \   }\n    arr.append(factorial)\n  }\n  return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpnopq4is6.swift:19:19: error: mutating operator '*=' may not be\
    \ used on immutable value 'factorial'\n        factorial *= j\n              \
    \    ^\n/tmp/tmpnopq4is6.swift:13:5: note: change 'let' to 'var' to make it mutable\n\
    \    let factorial: Int\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorialArray = [Int]()\n    var sum = 0\n\
    \    for i in 1...n {\n        factorialArray.append(1)\n        for j in 1...i\
    \ {\n            if i % 2 == 0 {\n                factorialArray.append(j * factorialArray[j])\n\
    \            } else {\n                sum += j\n            }\n        }\n  \
    \  }\n    return factorialArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2d_4girb/tmp2d_4girb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c417c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c414bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c414bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c414ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2d_4girb                        0x0000559043848622 <unavailable> + 5666

    5    libc.so.6                          0x00002b0c419b0460 __libc_start_main +
    245

    6    tmp2d_4girb                        0x0000559043848259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    let result = [1]\n    for i in 1..n {\n       \
    \ if i % 2 == 0 {\n            result.append(result[i] * i)\n        } else {\n\
    \            result.append(result[i] + i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpafrmzu8t.swift:12:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            result.append(i * 1)\n        } else {\n\
    \            result.append(i * i + 1)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpvliw9hi5/tmpvliw9hi5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a0322c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a0019b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a0019988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a00187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvliw9hi5                        0x000055ea390a5572 <unavailable> + 5490

    5    libc.so.6                          0x00002b05a050e460 __libc_start_main +
    245

    6    tmpvliw9hi5                        0x000055ea390a51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            result.append(i * 1)\n        } else {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpx8dcm9go/tmpx8dcm9go.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae00ad5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae00aa51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae00aa51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae00aa507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8dcm9go                        0x00005588652bf572 <unavailable> + 5490

    5    libc.so.6                          0x00002ae00af46460 __libc_start_main +
    245

    6    tmpx8dcm9go                        0x00005588652bf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  var factArr = [Int]()\n  for var i = 1; i<=n; i++\
    \ {\n    if (i % 2 == 0) {\n      factArr.append(i)\n    } else {\n      factArr.append(i\
    \ * factArr[i - 1])\n    }\n  }\n  return factArr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7fa1p8j7.swift:12:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 1; i<=n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n\n    if n <= 0 {\n     \
    \   return result\n    }\n    \n    let i = n - 1\n    let f = n - 1\n\n    for\
    \ _ in 0..<n {\n        if i % 2 == 0 {\n            let mul = 1\n           \
    \ for i in 1...f {\n                mul *= i\n            }\n            result.append(mul)\n\
    \        } else {\n            for j in 1...f {\n                result.append(i\
    \ + j)\n            }\n        }\n        i -= 1\n        f -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp44irqwny.swift:24:21: error: left side of mutating operator isn't\
    \ mutable: 'mul' is a 'let' constant\n                mul *= i\n             \
    \   ~~~ ^\n/tmp/tmp44irqwny.swift:22:13: note: change 'let' to 'var' to make it\
    \ mutable\n            let mul = 1\n            ^~~\n            var\n/tmp/tmp44irqwny.swift:32:11:\
    \ error: left side of mutating operator isn't mutable: 'i' is a 'let' constant\n\
    \        i -= 1\n        ~ ^\n/tmp/tmp44irqwny.swift:17:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let i = n - 1\n    ^~~\n    var\n/tmp/tmp44irqwny.swift:33:11:\
    \ error: left side of mutating operator isn't mutable: 'f' is a 'let' constant\n\
    \        f -= 1\n        ~ ^\n/tmp/tmp44irqwny.swift:18:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let f = n - 1\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfx_0esjy.swift:11:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return 1\n           ^\n"
  stdout: ''
  timestamp: 1660014111
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    if n == 1 {\n        return [1]\n    }\n    var\
    \ result = [1]\n    for i = 1; i <= n; i++ {\n        if i % 2 == 0 {\n      \
    \      result.append(i * result[-1])\n        }\n        else {\n            result.append((i\
    \ - 1) * result[-1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpeeproaye.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 1; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var output = [Int]()\n    var factorial = 1\n \
    \   for i in 1...n {\n        if i % 2 == 0 {\n            factorial *= i\n  \
    \          output.append(factorial)\n        } else {\n            factorial +=\
    \ i\n            output.append(factorial)\n        }\n    }\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpixtrksi2/tmpixtrksi2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d706e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d703dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d703da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d703d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpixtrksi2                        0x0000558f29bec5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3d708cf460 __libc_start_main +
    245

    6    tmpixtrksi2                        0x0000558f29bec209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n  \
    \      if i % 2 == 0 {\n            result.append(i * i)\n        } else {\n \
    \           result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpr4bo4h_j/tmpr4bo4h_j.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b604d755c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b604d44cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b604d44c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b604d44b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4bo4h_j                        0x000055a04f87d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b604d941460 __libc_start_main +
    245

    6    tmpr4bo4h_j                        0x000055a04f87d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013964
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorial = [Int]()\n    for var i = 1; i <=\
    \ n; i++ {\n        if i % 2 == 0 {\n            factorial.append(i * 1)\n   \
    \     } else {\n            factorial.append(i + 1)\n        }\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp64fj1801.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n  \
    \      if i % 2 == 0 {\n            result.append(i)\n        } else {\n     \
    \       result.append(i + 1)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmppados_f5/tmppados_f5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad35bcb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad35b9acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad35b9ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad35b9ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppados_f5                        0x0000557554abb5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ad35bea1460 __libc_start_main +
    245

    6    tmppados_f5                        0x0000557554abb209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  var result = [1]\n  for i in 1...n {\n    if i %\
    \ 2 == 0 {\n      result.append(i * result[0])\n    } else {\n      result.append(i\
    \ + result[0])\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpcsurefbs/tmpcsurefbs.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9c0495c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9c018cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9c018c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9c018b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcsurefbs                        0x000055c7c24275d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ab9c0681460 __libc_start_main +
    245

    6    tmpcsurefbs                        0x000055c7c2427209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorials = [0]\n    for i in 1...n {\n  \
    \      if i % 2 == 0 {\n            factorials.append(factorials[i] * i)\n   \
    \     } else {\n            factorials.append(1 + factorials[i])\n        }\n\
    \    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1b5ba6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1b589d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad1b589d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad1b589d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad1b589cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad1b569ce83 <unavailable> + 188035

    6    tmpdh0i_11o                        0x000055771c623b46 <unavailable> + 6982

    7    tmpdh0i_11o                        0x000055771c6234eb <unavailable> + 5355

    8    libc.so.6                          0x00002ad1b5d92460 __libc_start_main +
    245

    9    tmpdh0i_11o                        0x000055771c623209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return (0...n).reduce([]) { acc, i in\n       \
    \ guard i % 2 == 0 else {\n            acc.append(i * acc[acc.count - 1])\n  \
    \          return acc\n        }\n        acc.append(acc[acc.count - 1] + 1)\n\
    \        return acc\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpr47kz8x6.swift:13:17: error: cannot use mutating member on immutable\
    \ value: 'acc' is a 'let' constant\n            acc.append(i * acc[acc.count -\
    \ 1])\n            ~~~ ^\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var output: [Int] = [0]\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            output.append(output[i] * i)\n        }\
    \ else {\n            output.append(output[i] + i)\n        }\n    }\n    return\
    \ output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b773138bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7731082561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7731082286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b773108213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7731081bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7730e81e83 <unavailable> + 188035

    6    tmpl_ib3tsi                        0x00005636353f3b46 <unavailable> + 6982

    7    tmpl_ib3tsi                        0x00005636353f34eb <unavailable> + 5355

    8    libc.so.6                          0x00002b7731577460 __libc_start_main +
    245

    9    tmpl_ib3tsi                        0x00005636353f3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  var factorials = [Int]()\n  for var i = 0; i < n;\
    \ i++ {\n    if i % 2 == 0 {\n      factorials.append(1)\n    } else {\n     \
    \ factorials.append(factorials[i] * i)\n    }\n  }\n  return factorials\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmprvwww1vo.swift:12:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 0; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  var arr = [Int]()\n  for i = 1; i <= n; i++ {\n \
    \   if i % 2 == 0 {\n      arr.append(i)\n    } else {\n      arr.append((i -\
    \ 1) * i)\n    }\n  }\n  return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpc_ma0yz6.swift:12:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for i = 1; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    let result = Array(0..<n)\n    \n    for i in result\
    \ {\n        result[i] = isEven(i) ? i * f(i-1) : i+1\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp2btl1c6q.swift:14:21: error: cannot find 'isEven' in scope\n  \
    \      result[i] = isEven(i) ? i * f(i-1) : i+1\n                    ^~~~~~\n\
    /tmp/tmp2btl1c6q.swift:14:15: error: cannot assign through subscript: 'result'\
    \ is a 'let' constant\n        result[i] = isEven(i) ? i * f(i-1) : i+1\n    \
    \    ~~~~~~^\n/tmp/tmp2btl1c6q.swift:11:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let result = Array(0..<n)\n    ^~~\n    var\n/tmp/tmp2btl1c6q.swift:14:37:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \        result[i] = isEven(i) ? i * f(i-1) : i+1\n                          \
    \          ^\n/tmp/tmp2btl1c6q.swift:14:39: error: missing argument label 'n:'\
    \ in call\n        result[i] = isEven(i) ? i * f(i-1) : i+1\n                \
    \                      ^\n                                      n: \n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var arr = [1]\n    for i in 1...n {\n        arr[i]\
    \ = arr[i-1] * i\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc77f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc74e7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adfc74e7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adfc74e713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adfc74e6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adfc72e67ec <unavailable> + 186348

    6    tmpwcpbg9oq                        0x000055f498148a8f <unavailable> + 6799

    7    tmpwcpbg9oq                        0x000055f4981484db <unavailable> + 5339

    8    libc.so.6                          0x00002adfc79dc460 __libc_start_main +
    245

    9    tmpwcpbg9oq                        0x000055f4981481f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return [Int](stride(from: 1, to: n, by: 1).map\
    \ { (n) in\n        let fact = n * factorial(n)\n        return Int(fmod(fact,\
    \ Double(n)))\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4ylvx2as.swift:12:24: error: cannot find 'factorial' in scope\n\
    \        let fact = n * factorial(n)\n                       ^~~~~~~~~\n/tmp/tmp4ylvx2as.swift:13:20:\
    \ error: cannot find 'fmod' in scope\n        return Int(fmod(fact, Double(n)))\n\
    \                   ^~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n  \
    \      if i % 2 == 0 {\n            result.append((i) * i)\n        } else {\n\
    \            result.append((i) * (i + 1))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmp7byms53q/tmp7byms53q.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f128a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f12598b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f12598988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f125977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7byms53q                        0x0000563c40cc85d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b8f12a8d460 __libc_start_main +
    245

    6    tmp7byms53q                        0x0000563c40cc8209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var sum = 0\n    for i in 1...n {\n        if i\
    \ % 2 == 0 {\n            sum += i\n        }\n        else {\n            sum\
    \ += i - 1\n        }\n    }\n    return Array(1...n).map { sum * $0 }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpbyxeq3hh/tmpbyxeq3hh.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b374dac3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b374d7bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b374d7ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b374d7b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyxeq3hh                        0x000055c2fd7dd702 <unavailable> + 5890

    5    libc.so.6                          0x00002b374dcaf460 __libc_start_main +
    245

    6    tmpbyxeq3hh                        0x000055c2fd7dd339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorials: [Int] = [Int]()\n\n    if n ==\
    \ 1 {\n        factorials.append(1)\n    } else {\n        for var i = 1; i <=\
    \ n; i += 1  {\n            if i % 2 == 0 {\n                factorials.append(i\
    \ * 1)\n            } else {\n                factorials.append(i + factorials[i\
    \ - 1])\n            }\n        }\n    }\n\n    return factorials\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpr0y0ur2e.swift:16:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 1; i <= n; i += 1  {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    // Write your code here\n    var factArr = [Int](count:\
    \ n, repeatedValue: 1)\n    for i in 1...n {\n        if i % 2 == 0 {\n      \
    \      factArr[i] = factArr[i] * i\n        } else {\n            factArr[i] =\
    \ factArr[i] + i\n        }\n    }\n    return factArr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpbtwe7dmb.swift:12:19: error: no exact matches in call to initializer\
    \ \n    var factArr = [Int](count: n, repeatedValue: 1)\n                  ^\n\
    /tmp/tmpbtwe7dmb.swift:12:19: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n    var factArr = [Int](count: n, repeatedValue:\
    \ 1)\n                  ^\n/tmp/tmpbtwe7dmb.swift:12:19: note: candidate has partially\
    \ matching parameter list (repeating: Int, count: Int)\n    var factArr = [Int](count:\
    \ n, repeatedValue: 1)\n                  ^\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorial = 1\n    \n    for _ in 1 ..< n {\n\
    \        if n % 2 == 0 {\n            factorial = factorial * n\n        } else\
    \ {\n            factorial = factorial + n\n        }\n    }\n    return Array(1...factorial)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpoiwbx98j/tmpoiwbx98j.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac957715c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac95740cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac95740c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac95740b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoiwbx98j                        0x000055a5e3135652 <unavailable> + 5714

    5    libc.so.6                          0x00002ac957901460 __libc_start_main +
    245

    6    tmpoiwbx98j                        0x000055a5e3135289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return (0..<n).reduce(Array(0..<n)) { result, number\
    \ in\n        if (number % 2 == 0) {\n            return result + number\n   \
    \     } else {\n            return (result * (number - 1)) + number\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24,\
    \ 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpavbvijuc.swift:13:29: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Array<Int>'\n            return result + number\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var r = [Int]()\n    for _ in 1...n {\n       \
    \ if n % 2 == 0 {\n            r.append(1)\n        }\n        else {\n      \
    \      r.append(r[r.count-1]!*(n-1))\n        }\n    }\n    return r\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp94t6fe11.swift:17:34: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            r.append(r[r.count-1]!*(n-1))\n                    \
    \ ~~~~~~~~~~~~^\n                                 \n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    let factorials = Array(0...n).map { x in factorial(x)\
    \ }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpp1mj3lqb.swift:11:46: error: cannot find 'factorial' in scope\n\
    \    let factorials = Array(0...n).map { x in factorial(x) }\n               \
    \                              ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var res = 1\n    var sum = 0\n    for i in 1 ..<\
    \ n {\n        sum += (i * (i + 1))/2\n        if i % 2 == 0 {\n            res\
    \ *= i\n        } else {\n            res += sum\n        }\n    }\n    return\
    \ Array(res)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpczi_9usv.swift:21:18: error: missing argument label 'arrayLiteral:'\
    \ in call\n    return Array(res)\n                 ^\n                 arrayLiteral:\
    \ \n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorials = [Int](repeating: 1, count: n)\n\
    \    for i in 1...n {\n        if i % 2 == 0 {\n            factorials[i] = factorials[i-1]\
    \ * i\n        } else {\n            factorials[i] = factorials[i-1] + 1\n   \
    \     }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af6c456ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6c4265561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af6c4265286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af6c426513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af6c4264bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af6c40647ec <unavailable> + 186348

    6    tmphi9ew8y9                        0x000056204f877c20 <unavailable> + 7200

    7    tmphi9ew8y9                        0x000056204f87754b <unavailable> + 5451

    8    libc.so.6                          0x00002af6c475a460 __libc_start_main +
    245

    9    tmphi9ew8y9                        0x000056204f877269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var res = [1]\n    for i in 1...n {\n        res[i]\
    \ = (i * res[i-1].rawValue) + 1\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1ousg0w7.swift:13:32: error: value of type 'Int' has no member\
    \ 'rawValue'\n        res[i] = (i * res[i-1].rawValue) + 1\n                 \
    \     ~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    if n == 0 || n == 1 {\n        return [1]\n   \
    \ }\n    var arr = [Int]()\n    for n in 1...n {\n        if n % 2 == 0 {\n  \
    \          arr.append(1)\n        } else {\n            arr.append(n * arr[arr.count\
    \ - 1])\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dbde33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dbdb2a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8dbdb2a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8dbdb2a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8dbdb29bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8dbd929e83 <unavailable> + 188035

    6    tmptb6_tc1l                        0x00005629ad83fc3b <unavailable> + 7227

    7    tmptb6_tc1l                        0x00005629ad83f59b <unavailable> + 5531

    8    libc.so.6                          0x00002b8dbe01f460 __libc_start_main +
    245

    9    tmptb6_tc1l                        0x00005629ad83f2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  var a = [Int]()\n  for _ in 0..<n {\n    a.append(1)\n\
    \  }\n  for i in  1...n {\n    if i % 2 == 0 {\n      a[i] = a[i] * i\n    } else\
    \ {\n      a[i] = a[i] + i\n    }\n  }\n  return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6293cbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62939b5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b62939b5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b62939b513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b62939b4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b62937b4e83 <unavailable> + 188035

    6    tmpid9ls3rt                        0x000056047b46edd2 <unavailable> + 7634

    7    tmpid9ls3rt                        0x000056047b46e67b <unavailable> + 5755

    8    libc.so.6                          0x00002b6293eaa460 __libc_start_main +
    245

    9    tmpid9ls3rt                        0x000056047b46e399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return Array(0..<n).map{ _ in factorial($0) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmplq8e9nh1.swift:11:45: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments\n    return Array(0..<n).map{\
    \ _ in factorial($0) }\n                                            ^\n/tmp/tmplq8e9nh1.swift:11:35:\
    \ error: cannot find 'factorial' in scope\n    return Array(0..<n).map{ _ in factorial($0)\
    \ }\n                                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var arr: [Int] = [0]\n    for var i = 1 to n {\n\
    \        if i % 2 == 0 {\n            arr.append(arr[i] * i)\n        } else {\n\
    \            arr.append(arr[i] + i)\n        }\n    }\n    return arr\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpesqv4235.swift:12:15: error: expected 'in' after for-each pattern\n\
    \    for var i = 1 to n {\n              ^\n/tmp/tmpesqv4235.swift:12:15: error:\
    \ expected Sequence expression for for-each loop\n    for var i = 1 to n {\n \
    \             ^\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i = 1; i <= n; i++\
    \ {\n        if i % 2 == 0 {\n            result.append(i * i)\n        } else\
    \ {\n            result.append(1)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4kpzx96f.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 1; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int](repeating: 0, count: n)\n  \
    \  for i in 1...n {\n        if i % 2 == 0 {\n            result[i] = i * result[i]\n\
    \        } else {\n            result[i] = result[i] + 1\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8669ef9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8669bf0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8669bf0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8669bf013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8669befbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b86699efe83 <unavailable> + 188035

    6    tmpkzhmrip4                        0x0000560cc8d01bb1 <unavailable> + 7089

    7    tmpkzhmrip4                        0x0000560cc8d0154b <unavailable> + 5451

    8    libc.so.6                          0x00002b866a0e5460 __libc_start_main +
    245

    9    tmpkzhmrip4                        0x0000560cc8d01269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n    for i in 1...n {\n      \
    \  result[i] = factorial(i)\n        if i % 2 == 0 {\n            result[i] *=\
    \ i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpx3_7qnre.swift:13:21: error: cannot find 'factorial' in scope\n\
    \        result[i] = factorial(i)\n                    ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1..<n {\n\
    \        if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1])\n\
    \        } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab917897c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab91758e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab91758e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab91758e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab91758dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab91738de83 <unavailable> + 188035

    6    tmpvqyt6g52                        0x0000556e0c44db27 <unavailable> + 6951

    7    tmpvqyt6g52                        0x0000556e0c44d53b <unavailable> + 5435

    8    libc.so.6                          0x00002ab917a83460 __libc_start_main +
    245

    9    tmpvqyt6g52                        0x0000556e0c44d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var a = [Int]()\n    for i in 1...n {\n       \
    \ if i % 2 == 0 {\n            a.append(1)\n        } else {\n            var\
    \ sum = 0\n            for j in 1...i {\n                sum += j\n          \
    \  }\n            a.append(sum)\n        }\n    }\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmph_2a6j4_/tmph_2a6j4_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ec347bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ec3172b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ec3172988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ec31717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_2a6j4_                        0x000055ed587c15d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b8ec3667460 __libc_start_main +
    245

    6    tmph_2a6j4_                        0x000055ed587c1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var ans = [Int]()\n\n    if n % 2 == 0 {\n    \
    \    for i in 1...n {\n            ans.append(i)\n        }\n    } else {\n  \
    \      for i in 1...n / 2 {\n            ans.append(i + 1)\n        }\n    }\n\
    \    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmps3blupn1/tmps3blupn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2451743c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b245143ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b245143a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24514397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3blupn1                        0x000055bee5e0d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b245192f460 __libc_start_main +
    245

    6    tmps3blupn1                        0x000055bee5e0d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factArray = [Int]()\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            factArray.append(i * i)\n        } else\
    \ {\n            factArray.append(i)\n        }\n    }\n    return factArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpijmrxlrl/tmpijmrxlrl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ae4b29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ae4820b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ae4820988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ae481f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijmrxlrl                        0x00005593bb8d35d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3ae4d15460 __libc_start_main +
    245

    6    tmpijmrxlrl                        0x00005593bb8d3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1..<n {\n  \
    \      let factorial: Int = Int(i) * Int(i) + Int(i) + 1\n        result.append(factorial)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp6drn3faq/tmp6drn3faq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab42d281c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab42cf78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab42cf78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab42cf777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6drn3faq                        0x000056391ca7e702 <unavailable> + 5890

    5    libc.so.6                          0x00002ab42d46d460 __libc_start_main +
    245

    6    tmp6drn3faq                        0x000056391ca7e339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            result.append(i)\n        } else {\n   \
    \         result.append(i * result[-1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a4f244c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a4ef3b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6a4ef3b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6a4ef3b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6a4ef3abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6a4ed3ae83 <unavailable> + 188035

    6    tmphi1_gc8v                        0x000055f4dcc8eaeb <unavailable> + 6891

    7    tmphi1_gc8v                        0x000055f4dcc8e4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b6a4f430460 __libc_start_main +
    245

    9    tmphi1_gc8v                        0x000055f4dcc8e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var res = [1]\n\n    for i in 1..<n {\n       \
    \ if i % 2 == 0 {\n            res[i] = res[i] * i\n        } else {\n       \
    \     res[i] = res[i] + 1\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cb67a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cb649f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9cb649f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9cb649f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9cb649ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9cb629ee83 <unavailable> + 188035

    6    tmp2pchrbi6                        0x0000559ade616b4f <unavailable> + 6991

    7    tmp2pchrbi6                        0x0000559ade6164db <unavailable> + 5339

    8    libc.so.6                          0x00002b9cb6994460 __libc_start_main +
    245

    9    tmp2pchrbi6                        0x0000559ade6161f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorial = [Int]()\n    if n % 2 == 0 {\n\
    \        for var i = 1; i < n; i++ {\n            factorial.append(i * factorial[i\
    \ - 1]!)\n        }\n    } else {\n        for var i = 1; i <= n; i++ {\n    \
    \        factorial.append(i)\n        }\n    }\n    return factorial\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmphz87cxv3.swift:13:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 1; i < n; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphz87cxv3.swift:17:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var i = 1; i <= n; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  var array = Array(0..<n)\n  for var i in array {\n\
    \    if i % 2 == 0 {\n      array[i] = array[i] * i\n    } else {\n      array[i]\
    \ = array[i] + 1 // array starts from 1\n    }\n  }\n  return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsc8c05a1/tmpsc8c05a1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5be075c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5bdd6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5bdd6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5bdd6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsc8c05a1                        0x000055c811287772 <unavailable> + 6002

    5    libc.so.6                          0x00002ac5be261460 __libc_start_main +
    245

    6    tmpsc8c05a1                        0x000055c8112873a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return (0..<n).map { i in factorial(i) }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfh20zksj.swift:11:31: error: cannot find 'factorial' in scope\n\
    \    return (0..<n).map { i in factorial(i) }\n                              ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    if n == 1 {\n        return [1]\n    }\n    var\
    \ factorial = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n       \
    \     factorial.append(i*factorial[factorial.count-1])\n        }\n        else\
    \ {\n            factorial.append(i)\n        }\n    }\n    return factorial\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmp994v0mgb/tmp994v0mgb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3f8307c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3f7ffeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3f7ffe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3f7ffd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp994v0mgb                        0x00005582cec99682 <unavailable> + 5762

    5    libc.so.6                          0x00002ab3f84f3460 __libc_start_main +
    245

    6    tmp994v0mgb                        0x00005582cec992b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n    for i in 1...n {\n      \
    \  result[i] = result[i - 1] * i\n    }\n    return Array((result + [Int]()).reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e906cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e903c5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0e903c5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0e903c513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0e903c4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0e901c47ec <unavailable> + 186348

    6    tmpn1j7isy9                        0x000055be85c55cd3 <unavailable> + 7379

    7    tmpn1j7isy9                        0x000055be85c5571b <unavailable> + 5915

    8    libc.so.6                          0x00002b0e908ba460 __libc_start_main +
    245

    9    tmpn1j7isy9                        0x000055be85c55439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorial: Int = 0\n    for _ in 0..<n {\n\
    \        factorial = factorial * _\n    }\n    var sum = 0\n    for _ in 0..<n\
    \ {\n        sum = sum + _\n    }\n    return Array(1...n).map { factorial / $0\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\n\
    assert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n:\
    \ 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp__09uqg2.swift:13:33: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        factorial = factorial * _\n     \
    \                           ^\n/tmp/tmp__09uqg2.swift:17:21: error: '_' can only\
    \ appear in a pattern or on the left side of an assignment\n        sum = sum\
    \ + _\n                    ^\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n  \
    \      let isEven = i % 2 == 0\n        result.append(isEven ? i : factorial(i))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpupzzfiyl.swift:14:36: error: cannot find 'factorial' in scope\n\
    \        result.append(isEven ? i : factorial(i))\n                          \
    \         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorial = 1\n    var result: [Int] = []\n\
    \    for i in 1...n {\n        if i % 2 == 0 {\n            factorial *= i\n \
    \       }\n        result += [i]\n    }\n    return factorial\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpyn22ojjt.swift:19:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return factorial\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result : [Int] = []\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            result.append(1)\n        } else {\n   \
    \         var mul = 1\n            for j in 1...i {\n                mul = mul\
    \ * j\n            }\n            result.append(mul)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpm4_cvlku/tmpm4_cvlku.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acffe265c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acffdf5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acffdf5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acffdf5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm4_cvlku                        0x0000564b513ef572 <unavailable> + 5490

    5    libc.so.6                          0x00002acffe451460 __libc_start_main +
    245

    6    tmpm4_cvlku                        0x0000564b513ef1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorials = Array(0..<n)\n    for i in 0..<factorials.count\
    \ {\n        factorials[i] = factorials[i] * i\n    }\n    factorials[factorials.count\
    \ - 1] = factorials[factorials.count - 1]\n    return factorials\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmp40yfibgp/tmp40yfibgp.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44b78cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44b75c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44b75c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44b75c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp40yfibgp                        0x00005637985da752 <unavailable> + 5970

    5    libc.so.6                          0x00002b44b7abb460 __libc_start_main +
    245

    6    tmp40yfibgp                        0x00005637985da389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n  \
    \      if i % 2 == 0 {\n            result.append(\"\\(i)\")\n        } else {\n\
    \            result.append(i * \"\\(i)\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpbrf1g9ho.swift:14:20: error: no exact matches in call to instance\
    \ method 'append'\n            result.append(\"\\(i)\")\n                   ^\n\
    Swift.Array:6:37: note: candidate expects value of type 'Int' for parameter #1\
    \ (got 'String')\n    @inlinable public mutating func append(_ newElement: __owned\
    \ Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'Int' for parameter #1 (got 'String')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpbrf1g9ho.swift:14:20: note: found\
    \ candidate with type '(__owned String) -> ()'\n            result.append(\"\\\
    (i)\")\n                   ^\n/tmp/tmpbrf1g9ho.swift:16:31: error: cannot convert\
    \ value of type 'String' to expected argument type 'Int'\n            result.append(i\
    \ * \"\\(i)\")\n                              ^\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var arr = [Int](repeating: 0, count: n)\n    for\
    \ i in 1...n {\n        if i % 2 == 0 {\n            arr[i] = arr[i] * i\n   \
    \     } else {\n            arr[i] = arr[i] + i\n        }\n    }\n    return\
    \ arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24,\
    \ 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b972e71bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b972e412561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b972e412286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b972e41213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b972e411bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b972e211e83 <unavailable> + 188035

    6    tmpm381zc7e                        0x00005602cf382bb1 <unavailable> + 7089

    7    tmpm381zc7e                        0x00005602cf38254b <unavailable> + 5451

    8    libc.so.6                          0x00002b972e907460 __libc_start_main +
    245

    9    tmpm381zc7e                        0x00005602cf382269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    switch n {\n    case 0:\n        return [1]\n \
    \   case 1:\n        return [2]\n    case 2:\n        return [1, 3]\n    default:\n\
    \        var factorial = 1\n        for i in 1..<n {\n            factorial *=\
    \ i\n        }\n        return factorial\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpptosifbr.swift:23:16: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n        return factorial\n              \
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014112
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var numbers = [Int]()\n    for var i = 1; i < n;\
    \ i++ {\n        var sum = 0\n        for var j = 1; j <= i; j++ {\n         \
    \   sum += j\n        }\n        if i % 2 == 0 {\n            numbers.append(sum)\n\
    \        } else {\n            numbers.append(sum + 1)\n        }\n    }\n   \
    \ return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpiukx4gb3.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpiukx4gb3.swift:14:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var j = 1; j <= i; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    if n == 1 {\n        return [1]\n    }\n    var\
    \ result = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n          \
    \  result.append(result[i] * i)\n        } else {\n            result.append((i\
    \ + 1) * result[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b490d586c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b490d27d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b490d27d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b490d27d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b490d27cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b490d07ce83 <unavailable> + 188035

    6    tmpe57fbhgm                        0x000055555a233bc9 <unavailable> + 7113

    7    tmpe57fbhgm                        0x000055555a23353b <unavailable> + 5435

    8    libc.so.6                          0x00002b490d772460 __libc_start_main +
    245

    9    tmpe57fbhgm                        0x000055555a233259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var fact: [Int] = [0]\n    for i in 1...n {\n \
    \       if i % 2 == 0 {\n            fact.append(i * fact[i - 1])\n        } else\
    \ {\n            fact.append(fact[i - 1])\n        }\n    }\n    return fact\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpu3w6b1_f/tmpu3w6b1_f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcedc17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abced90eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abced90e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abced90d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu3w6b1_f                        0x000056304e35b5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002abcede03460 __libc_start_main +
    245

    6    tmpu3w6b1_f                        0x000056304e35b209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return (0..<n).map({ (n) in\n        return (n&1)\
    \ == 0 ? n*n : n+1\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpfg3hqltr/tmpfg3hqltr.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49cc90ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49cc601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49cc601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49cc6007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfg3hqltr                        0x0000563125e06562 <unavailable> + 5474

    5    libc.so.6                          0x00002b49ccaf6460 __libc_start_main +
    245

    6    tmpfg3hqltr                        0x0000563125e06199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorial = [Int](repeating: 1, count: n)\n\
    \n    for i in 1...n {\n        factorial[i] = factorial[i - 1] * i\n    }\n\n\
    \    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b10e20c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10e1dbb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b10e1dbb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b10e1dbb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b10e1dbabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b10e1bba7ec <unavailable> + 186348

    6    tmp4g7_qmde                        0x00005626883a3ae9 <unavailable> + 6889

    7    tmp4g7_qmde                        0x00005626883a354b <unavailable> + 5451

    8    libc.so.6                          0x00002b10e22b0460 __libc_start_main +
    245

    9    tmp4g7_qmde                        0x00005626883a3269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1..n {\n   \
    \     if i % 2 == 0 {\n            result.append(i)\n            continue\n  \
    \      }\n\n        var temp = 1\n        for j in 1..i {\n            temp *=\
    \ j\n        }\n        result.append(temp)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpoya0nn29.swift:12:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n {\n              ^~\n              ...\n\
    /tmp/tmpoya0nn29.swift:19:19: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n        for j in 1..i {\n                  ^~\n               \
    \   ...\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n   \
    \     for i in 1...n {\n            result.append(i)\n        }\n    } else {\n\
    \        var results = [Int]()\n        for i in 1...n {\n            results.append(i)\n\
    \        }\n        for i in 1...n {\n            results.append(i)\n        }\n\
    \        for i in 1...n {\n            results.append(i)\n        }\n        results\
    \ = results.reverse()\n        for i in 1...n {\n            result.append(results[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmphnyv0q0e.swift:27:27: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        results = results.reverse()\n                  ~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n    for i in 1..<n {\n      \
    \  if i % 2 == 0 {\n            result.append(result[i - 1] * i)\n        } else\
    \ {\n            result.append(result[i - 1] + i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp67d8rc3t/tmp67d8rc3t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaf5b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3eaf2aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3eaf2ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3eaf2ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp67d8rc3t                        0x000055d8670825d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3eaf7a3460 __libc_start_main +
    245

    6    tmp67d8rc3t                        0x000055d867082209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n  \
    \      if i % 2 == 0 {\n            result.append(i)\n        } else {\n     \
    \       let value = Int(i)\n            result.append(i * value!)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpoaacz940.swift:17:36: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            result.append(i * value!)\n                        \
    \      ~~~~~^\n                                   \n"
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorial = [Int]()\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            factorial.append(i * 1)\n        } else\
    \ {\n            factorial.append(i + 1)\n        }\n    }\n    return factorial\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpmnw9hbsa/tmpmnw9hbsa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c71f00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c71bf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c71bf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c71bf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnw9hbsa                        0x000055f0a94335d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b4c720ec460 __libc_start_main +
    245

    6    tmpmnw9hbsa                        0x000055f0a9433209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013964
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var array = [Int]()\n\n    for i in 1...n {\n \
    \       if i % 2 == 0 {\n            array.append(i)\n        }\n        else\
    \ {\n            array.append(i * i)\n        }\n    }\n    return array\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpxet5tvfz/tmpxet5tvfz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac8e09bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac8dd92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac8dd92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac8dd917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxet5tvfz                        0x000055a0446f85d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aac8e287460 __libc_start_main +
    245

    6    tmpxet5tvfz                        0x000055a0446f8209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    let factorials = Array(0...n)\n    factorials.forEach\
    \ {\n        guard !($0 % 2) else { return }\n        var sum = 0\n        var\
    \ j = 0\n        j = i + 1\n        while j <= factorials.count {\n          \
    \  sum += j\n            j += i\n        }\n        factorials[$0] = sum\n   \
    \ }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmps3h1xynt.swift:16:13: error: cannot find 'i' in scope\n       \
    \ j = i + 1\n            ^\n/tmp/tmps3h1xynt.swift:19:18: error: cannot find 'i'\
    \ in scope\n            j += i\n                 ^\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var falt = 1\n    var result = [Int]()\n    for\
    \ var i = 1; i <= n; i++ {\n        if i % 2 == 0 {\n            falt = falt *\
    \ i\n        } else {\n            result.append(falt)\n            falt = 0\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp8kwxwwin.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            result.append(i)\n        } else {\n   \
    \         var sum: Int = 0\n            for j in 1...i {\n                sum\
    \ += j\n            }\n            result.append(sum)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp0eaavc0t/tmp0eaavc0t.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af90303cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af902d33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af902d33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af902d327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0eaavc0t                        0x00005602c310d572 <unavailable> + 5490

    5    libc.so.6                          0x00002af903228460 __libc_start_main +
    245

    6    tmp0eaavc0t                        0x00005602c310d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            result.append(result[i] * i)\n        } else {\n\
    \            result.append(result[i] + 1)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1a8c5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1a8951561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac1a8951286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac1a895113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac1a8950bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac1a8750e83 <unavailable> + 188035

    6    tmpplx07fsm                        0x0000561ebdf96b46 <unavailable> + 6982

    7    tmpplx07fsm                        0x0000561ebdf964eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac1a8e46460 __libc_start_main +
    245

    9    tmpplx07fsm                        0x0000561ebdf96209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorialArray = [Int]()\n    var fact = 1\n\
    \    for i in 1...n {\n        if i % 2 == 0 {\n            factorialArray.append(fact\
    \ * i)\n            fact = 1\n        } else {\n            fact = fact * i\n\
    \        }\n    }\n    return factorialArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjyi5poub/tmpjyi5poub.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d92fa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d92c9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d92c9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d92c997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjyi5poub                        0x000055f0aa79d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b8d9318f460 __libc_start_main +
    245

    6    tmpjyi5poub                        0x000055f0aa79d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  var factorials: [Int] = []\n\n  for i in 1...n {\n\
    \    factorials.append(1)\n    for _ in 1...i {\n      factorials.append(factorials[i]\
    \ * i)\n    }\n  }\n\n  return factorials\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b35e5e7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35e5b71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b35e5b71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b35e5b7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b35e5b70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b35e5970e83 <unavailable> + 188035

    6    tmp_apk_fdh                        0x000055c06d566b40 <unavailable> + 6976

    7    tmp_apk_fdh                        0x000055c06d5664eb <unavailable> + 5355

    8    libc.so.6                          0x00002b35e6066460 __libc_start_main +
    245

    9    tmp_apk_fdh                        0x000055c06d566209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var res: [Int] = []\n    if n <= 0 {\n        return\
    \ res\n    }\n\n    for i in 1...n {\n        if i % 2 == 0 {\n            let\
    \ fact = i\n            for j in 1...n {\n                fact *= j\n        \
    \    }\n            res.append(fact)\n        } else {\n            var sum =\
    \ 0\n            for j in 1...i {\n                sum += j\n            }\n \
    \           res.append(sum)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpxzdgt0k0.swift:20:22: error: left side of mutating operator isn't\
    \ mutable: 'fact' is a 'let' constant\n                fact *= j\n           \
    \     ~~~~ ^\n/tmp/tmpxzdgt0k0.swift:18:13: note: change 'let' to 'var' to make\
    \ it mutable\n            let fact = i\n            ^~~\n            var\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var ret = [Int]()\n    var i = 1;\n    while i\
    \ <= n {\n        if i % 2 == 0 {\n            ret.append(1)\n        } else {\n\
    \            ret.append(i * 2)\n        }\n        i += 1\n    }\n    return ret\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpypyeoh0q/tmpypyeoh0q.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8de17d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8de14ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8de14cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8de14cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypyeoh0q                        0x0000560988fcc4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b8de19c1460 __libc_start_main +
    245

    6    tmpypyeoh0q                        0x0000560988fcc119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return (0...n).map {\n        switch $0 {\n   \
    \     case 0: return 1\n        case _: fallthrough\n        case 2: return $0\
    \ * $0\n        case _: fallthrough\n        case 3: return $0 + $0 * $0 * $0\n\
    \        case _: fallthrough\n        case 4: return $0 + $0 * $0 * $0 + $0 *\
    \ $0 * $0 * $0\n        case _: fallthrough\n        case 5: return $0 + $0 *\
    \ $0 * $0 + $0 * $0 * $0 * $0 + $0 * $0 * $0 * $0 * $0\n        case _: fallthrough\n\
    \        case 6: return $0 + $0 * $0 * $0 + $0 * $0 * $0 * $0 + $0 * $0 * $0 *\
    \ $0 + $0 * $0 * $0 * $0 * $0\n        case _: fallthrough\n        case 7: return\
    \ $0 + $0 * $0 * $0 + $0 * $0 * $0 * $0 + $0 * $0 * $0 * $0 + $0 * $0 * $0 * $0\
    \ + $0 * $0 * $0 * $0 * $0\n        case _: fallthrough\n        case 8: return\
    \ $0 + $0 * $0 * $0 + $0 * $0 * $0 * $0 + $0 * $0 * $0 * $0 + $0 * $0 * $0 * $0\
    \ + $0 * $0 * $0 * $0 + $0 * $0 * $0 * $0 * $0\n        case _: fallthrough\n\
    \        case 9: return $0 + $0 * $0 * $0 + $0 * $0 * $0 * $0 + $0 * $0 * $0 *\
    \ $0 + $0 * $0 * $0 * $0 + $0 * $0 * $0 * $0 + $0 * $0 * $0 * $0 * $0 + $0 * $0\
    \ * $0 * $0 * $0 * $0\n        default:\n            return $0 * $0 * $0 * $0\
    \ * $0 * $0 * $0 * $0 * $0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpfvcismkh/tmpfvcismkh.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72a2fd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72a2cceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72a2cce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72a2ccd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfvcismkh                        0x0000556b0817d562 <unavailable> + 5474

    5    libc.so.6                          0x00002b72a31c3460 __libc_start_main +
    245

    6    tmpfvcismkh                        0x0000556b0817d199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int](count: n, repeatedValue: 1)\n\
    \    for i in 1...n {\n        if i % 2 == 0 {\n            result[i] = i * result[i]\n\
    \        }\n        else {\n            result[i] = result[i] * i\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpofng9piy.swift:11:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: n, repeatedValue: 1)\n                 ^\n/tmp/tmpofng9piy.swift:11:18:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var result = [Int](count: n, repeatedValue: 1)\n                 ^\n\
    /tmp/tmpofng9piy.swift:11:18: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n    var result = [Int](count: n, repeatedValue:\
    \ 1)\n                 ^\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for var i = 2; i <= n;\
    \ i++ {\n        if i % 2 == 0 {\n            result.append(i)\n        } else\
    \ {\n            result.append(i * result[i-1])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpselz7psw.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  return (0..<n).map { _ in\n    if $0%2 == 0 {\n \
    \     return $1*$1*$1*$1*$1\n    } else {\n      return $1*$1 + 1\n    }\n  }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpky4om0nw.swift:12:8: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments\n    if $0%2 == 0 {\n \
    \      ^\n/tmp/tmpky4om0nw.swift:13:14: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments\n      return $1*$1*$1*$1*$1\n\
    \             ^\n/tmp/tmpky4om0nw.swift:13:17: error: anonymous closure arguments\
    \ cannot be used inside a closure that has explicit arguments\n      return $1*$1*$1*$1*$1\n\
    \                ^\n/tmp/tmpky4om0nw.swift:13:20: error: anonymous closure arguments\
    \ cannot be used inside a closure that has explicit arguments\n      return $1*$1*$1*$1*$1\n\
    \                   ^\n/tmp/tmpky4om0nw.swift:13:23: error: anonymous closure\
    \ arguments cannot be used inside a closure that has explicit arguments\n    \
    \  return $1*$1*$1*$1*$1\n                      ^\n/tmp/tmpky4om0nw.swift:13:26:\
    \ error: anonymous closure arguments cannot be used inside a closure that has\
    \ explicit arguments\n      return $1*$1*$1*$1*$1\n                         ^\n\
    /tmp/tmpky4om0nw.swift:15:14: error: anonymous closure arguments cannot be used\
    \ inside a closure that has explicit arguments\n      return $1*$1 + 1\n     \
    \        ^\n/tmp/tmpky4om0nw.swift:15:17: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments\n      return $1*$1 + 1\n\
    \                ^\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n    for i in 2...n {\n      \
    \  if i % 2 == 0 {\n            result.append(i * result[0])\n        } else {\n\
    \            result.append(result[i-1] + i-1)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab47aabbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab47a7b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab47a7b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab47a7b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab47a7b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab47a5b1e83 <unavailable> + 188035

    6    tmpflu89yyo                        0x0000556085879b5f <unavailable> + 7007

    7    tmpflu89yyo                        0x00005560858794eb <unavailable> + 5355

    8    libc.so.6                          0x00002ab47aca7460 __libc_start_main +
    245

    9    tmpflu89yyo                        0x0000556085879209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var a = [Int]()\n    var f = 1\n    for _ in 0..<n\
    \ {\n        a.append(f)\n        f *= 2\n    }\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpub424hik/tmpub424hik.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfd8f63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfd8c5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfd8c5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfd8c597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpub424hik                        0x000055f6844a35d2 <unavailable> + 5586

    5    libc.so.6                          0x00002abfd914f460 __libc_start_main +
    245

    6    tmpub424hik                        0x000055f6844a3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var fact = [Int]()\n    for num in 1...n {\n  \
    \      fact.append(num * num)\n    }\n    fact.sort()\n    fact.append(1)\n  \
    \  return fact\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpbjwluuex/tmpbjwluuex.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5094be4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50948dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50948db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50948da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjwluuex                        0x00005557efbbf6f2 <unavailable> + 5874

    5    libc.so.6                          0x00002b5094dd0460 __libc_start_main +
    245

    6    tmpbjwluuex                        0x00005557efbbf329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return [0...n].map { i in 0...i }.filter { $0 %\
    \ 2 == 0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmporuqrrrf.swift:11:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return [0...n].map { i in 0...i }.filter { $0 % 2 == 0\
    \ }.reduce(0, +)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014173
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    if n % 2 == 0 {\n        return [1..n].reduce(0)\n\
    \    } else {\n        return 0..<n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp_n5h31hw.swift:12:18: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        return [1..n].reduce(0)\n                 ^~\n\
    \                 ...\n/tmp/tmp_n5h31hw.swift:12:31: error: missing argument for\
    \ parameter #2 in call\n        return [1..n].reduce(0)\n                    \
    \          ^\n                              , <#(Int, Any) throws -> Int#>\nSwift.Sequence:2:28:\
    \ note: 'reduce' declared here\n    @inlinable public func reduce<Result>(_ initialResult:\
    \ Result, _ nextPartialResult: (_ partialResult: Result, Self.Element) throws\
    \ -> Result) rethrows -> Result\n                           ^\n/tmp/tmp_n5h31hw.swift:12:23:\
    \ error: cannot convert return expression of type 'Int' to return type '[Int]'\n\
    \        return [1..n].reduce(0)\n               ~~~~~~~^~~~~~~~~\n/tmp/tmp_n5h31hw.swift:14:17:\
    \ error: cannot convert return expression of type 'Range<Int>' to return type\
    \ '[Int]'\n        return 0..<n\n               ~^~~~\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var ans = [1]\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            ans.append(ans[i] * i)\n        } else {\n       \
    \     ans.append(ans[i] + 1)\n        }\n    }\n    return ans\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b85e2348c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85e203f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b85e203f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b85e203f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b85e203ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b85e1e3ee83 <unavailable> + 188035

    6    tmprzwktf8b                        0x000055ef6a8e6b46 <unavailable> + 6982

    7    tmprzwktf8b                        0x000055ef6a8e64eb <unavailable> + 5355

    8    libc.so.6                          0x00002b85e2534460 __libc_start_main +
    245

    9    tmprzwktf8b                        0x000055ef6a8e6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1..<n {\n  \
    \      var sum = 0\n        if i % 2 == 0 {\n            for j in 1..<i {\n  \
    \              sum += j\n            }\n        } else {\n            for j in\
    \ 1..<i {\n                sum += j + 1\n            }\n        }\n        result.append(sum)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2ca_79_5/tmp2ca_79_5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1d0c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1cdbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1cdbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1cdbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ca_79_5                        0x00005578398765d2 <unavailable> + 5586

    5    libc.so.6                          0x00002adf1d2b1460 __libc_start_main +
    245

    6    tmp2ca_79_5                        0x0000557839876209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var a = [1]\n    for i in 1...n {\n        if i\
    \ % 2 == 0 {\n            a[i] = a[i] * i\n        } else {\n            a[i]\
    \ = a[i] + a[i-1]\n        }\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b94424c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b9411b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3b9411b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3b9411b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3b9411abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3b93f1ae83 <unavailable> + 188035

    6    tmp0gcs2157                        0x0000557d6b76eb5a <unavailable> + 7002

    7    tmp0gcs2157                        0x0000557d6b76e4db <unavailable> + 5339

    8    libc.so.6                          0x00002b3b94610460 __libc_start_main +
    245

    9    tmp0gcs2157                        0x0000557d6b76e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorialArray: [Int] = []\n    var sum = 1\n\
    \    for i in 1...n {\n        if i % 2 == 0 {\n            factorialArray.append(i)\n\
    \        } else {\n            factorialArray.append(sum)\n            sum +=\
    \ i\n        }\n    }\n    return factorialArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmptenwynt_/tmptenwynt_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bbfa7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bbf774b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bbf774988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bbf7737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptenwynt_                        0x000055c2f5c90572 <unavailable> + 5490

    5    libc.so.6                          0x00002b5bbfc69460 __libc_start_main +
    245

    6    tmptenwynt_                        0x000055c2f5c901a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    if n <= 1 {\n        return [1]\n    }\n    var\
    \ result = [Int](repeating: 0, count: n)\n    for i in 1...n {\n        let fact\
    \ = 1\n        for j in 1...i {\n            fact *= j\n        }\n        result[i]\
    \ = fact\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpi59vduvb.swift:18:18: error: left side of mutating operator isn't\
    \ mutable: 'fact' is a 'let' constant\n            fact *= j\n            ~~~~\
    \ ^\n/tmp/tmpi59vduvb.swift:16:9: note: change 'let' to 'var' to make it mutable\n\
    \        let fact = 1\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return [Int]() // YOUR CODE HERE\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpsreor3tv/tmpsreor3tv.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00e9428c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00e911fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00e911f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00e911e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsreor3tv                        0x0000558e6de0d3f2 <unavailable> + 5106

    5    libc.so.6                          0x00002b00e9614460 __libc_start_main +
    245

    6    tmpsreor3tv                        0x0000558e6de0d029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result: [Int] = [0]\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            result.append(result[i] * i)\n        }\
    \ else {\n            result.append(i + result[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ace3e29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace3df95561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ace3df95286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ace3df9513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ace3df94bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ace3dd94e83 <unavailable> + 188035

    6    tmpcgckh1u3                        0x000056549c72bb46 <unavailable> + 6982

    7    tmpcgckh1u3                        0x000056549c72b4eb <unavailable> + 5355

    8    libc.so.6                          0x00002ace3e48a460 __libc_start_main +
    245

    9    tmpcgckh1u3                        0x000056549c72b209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n\
    \        if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n\
    \        } else {\n            factorials.append(i + factorials[i - 1]!)\n   \
    \     }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqpg479mw.swift:14:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n/tmp/tmpqpg479mw.swift:16:52: error: cannot force unwrap\
    \ value of non-optional type 'Int'\n            factorials.append(i + factorials[i\
    \ - 1]!)\n                                  ~~~~~~~~~~~~~~~~~^\n             \
    \                                      \n"
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int](count: n, repeatedValue: 1)\n\
    \    for index in 1 ..< n {\n        if index % 2 == 0 {\n            result[index]\
    \ = result[index -1] * index\n        } else {\n            result[index] = result[index\
    \ -1] + index\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpq74chs27.swift:14:42: error: expected ',' separator\n         \
    \   result[index] = result[index -1] * index\n                               \
    \          ^\n                                        ,\n/tmp/tmpq74chs27.swift:16:42:\
    \ error: expected ',' separator\n            result[index] = result[index -1]\
    \ + index\n                                         ^\n                      \
    \                  ,\n/tmp/tmpq74chs27.swift:11:18: error: no exact matches in\
    \ call to initializer \n    var result = [Int](count: n, repeatedValue: 1)\n \
    \                ^\n/tmp/tmpq74chs27.swift:11:18: note: candidate has partially\
    \ matching parameter list (repeating: Int, count: Int)\n    var result = [Int](count:\
    \ n, repeatedValue: 1)\n                 ^\n/tmp/tmpq74chs27.swift:11:18: note:\
    \ candidate has partially matching parameter list (repeating: Int, count: Int)\n\
    \    var result = [Int](count: n, repeatedValue: 1)\n                 ^\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var sum = 0\n    for i in 1 ..< n {\n        sum\
    \ += factorial(i)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpweom_nzy.swift:13:16: error: cannot find 'factorial' in scope\n\
    \        sum += factorial(i)\n               ^~~~~~~~~\n/tmp/tmpweom_nzy.swift:15:12:\
    \ error: cannot convert return expression of type 'Int' to return type '[Int]'\n\
    \    return sum\n           ^~~\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var arr: [Int] = [1]\n    for i in 1..n {\n   \
    \     if i % 2 == 0 {\n            arr.append(arr[i] * i)\n        } else {\n\
    \            arr.append(arr[i] + 1)\n        }\n    }\n    return arr\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpje4zb156.swift:12:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n\n    for i in 2..<n {\n    \
    \    result[i] = result[i-1] * i\n    }\n\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1ffc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1fcbe561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3d1fcbe286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3d1fcbe13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3d1fcbdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3d1fabde83 <unavailable> + 188035

    6    tmpswfluvj1                        0x0000556502fb3a48 <unavailable> + 6728

    7    tmpswfluvj1                        0x0000556502fb34db <unavailable> + 5339

    8    libc.so.6                          0x00002b3d201b3460 __libc_start_main +
    245

    9    tmpswfluvj1                        0x0000556502fb31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    var factorial = 1\n \
    \   for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(factorial)\n\
    \        } else {\n            result.append(factorial * (n - 1))\n        }\n\
    \        factorial = factorial * n\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpg8spuz0w/tmpg8spuz0w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d70b72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d70869b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d70869988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d708687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8spuz0w                        0x000056153dd765d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b9d70d5e460 __libc_start_main +
    245

    6    tmpg8spuz0w                        0x000056153dd76209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    var factorial = 1\n \
    \   for i in 1...n {\n        factorial *= i\n        if i % 2 == 0 {\n      \
    \      result.append(factorial)\n        } else {\n            result.append(i\
    \ + 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpu5nszjl9/tmpu5nszjl9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3de8872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3de8569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3de8569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3de85687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5nszjl9                        0x000055e92f4d75d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3de8a5e460 __libc_start_main +
    245

    6    tmpu5nszjl9                        0x000055e92f4d7209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n  return [Int](count: n, repeatedValue: Int(factorial(factorial(n))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp73uwop4s.swift:11:45: error: cannot find 'factorial' in scope\n\
    \  return [Int](count: n, repeatedValue: Int(factorial(factorial(n))))\n     \
    \                                       ^~~~~~~~~\n/tmp/tmp73uwop4s.swift:11:55:\
    \ error: cannot find 'factorial' in scope\n  return [Int](count: n, repeatedValue:\
    \ Int(factorial(factorial(n))))\n                                            \
    \          ^~~~~~~~~\n/tmp/tmp73uwop4s.swift:11:10: error: no exact matches in\
    \ call to initializer \n  return [Int](count: n, repeatedValue: Int(factorial(factorial(n))))\n\
    \         ^\n/tmp/tmp73uwop4s.swift:11:10: note: found candidate with type '(Int,\
    \ Int) -> [Int]'\n  return [Int](count: n, repeatedValue: Int(factorial(factorial(n))))\n\
    \         ^\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return Array(0..<n).map { i in\n        return\
    \ if i % 2 == 0 {\n            factorial(i)\n        } else {\n            factorial(i)\
    \ + 1\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp8yuxyr4_.swift:12:15: error: consecutive statements on a line must\
    \ be separated by ';'\n        return if i % 2 == 0 {\n              ^\n     \
    \         ;\n/tmp/tmp8yuxyr4_.swift:13:13: error: cannot find 'factorial' in scope\n\
    \            factorial(i)\n            ^~~~~~~~~\n/tmp/tmp8yuxyr4_.swift:15:13:\
    \ error: cannot find 'factorial' in scope\n            factorial(i) + 1\n    \
    \        ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return 1...n\n        .map {\n            if $0\
    \ % 2 == 0 {\n                $0\n            } else {\n                $0 + $1\n\
    \            }\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp_hmmu43x.swift:11:13: error: cannot convert return expression of\
    \ type 'ClosedRange<Int>' to return type '[Int]'\n    return 1...n\n         \
    \  ~^~~~\n/tmp/tmp_hmmu43x.swift:12:10: error: value of type 'Int' has no member\
    \ 'map'\n        .map {\n         ^~~\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    // write your code in JavaScript (Node.js)\n  \
    \  let fact = [1]\n    for _ in 1..<n {\n        fact.append(fact[-1] * fact[-2]\
    \ + 1)\n    }\n    return fact\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfyl5xbb4.swift:14:14: error: cannot use mutating member on immutable\
    \ value: 'fact' is a 'let' constant\n        fact.append(fact[-1] * fact[-2] +\
    \ 1)\n        ~~~~ ^\n/tmp/tmpfyl5xbb4.swift:12:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let fact = [1]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for num in 1...n {\n\
    \        if num % 2 == 0 {\n            result.append(num * num)\n        }\n\
    \        else {\n            result.append(num + 1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp5gs73k1l/tmp5gs73k1l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1aba1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1ab712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1ab712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1ab7117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5gs73k1l                        0x000055ca3a4435d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ae1abc07460 __libc_start_main +
    245

    6    tmp5gs73k1l                        0x000055ca3a443209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    if n == 1 {\n        return [1]\n    }\n    var\
    \ fact: Int = 0\n    for i in 1..<n {\n        fact *= i\n        if i % 2 ==\
    \ 0 {\n            fact += 1\n        }\n    }\n    return Array(1...n).map {\
    \ fact }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpewxhyblu.swift:21:29: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n    return Array(1...n).map\
    \ { fact }\n                            ^\n                              _ in\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            result.append(Int(result[i]) * i)\n        } else\
    \ {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c6b443c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c6b13a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7c6b13a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7c6b13a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7c6b139bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7c6af39e83 <unavailable> + 188035

    6    tmpdp5cfrrt                        0x0000563d829c1c27 <unavailable> + 7207

    7    tmpdp5cfrrt                        0x0000563d829c161b <unavailable> + 5659

    8    libc.so.6                          0x00002b7c6b62f460 __libc_start_main +
    245

    9    tmpdp5cfrrt                        0x0000563d829c1339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var ans: [Int] = [1]\n    for _ in 1...n {\n  \
    \      if n % 2 == 0 {\n            ans.append(ans.last! * 2)\n        }\n   \
    \     else {\n            ans.append(ans.last! + 1)\n        }\n    }\n    return\
    \ ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24,\
    \ 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpg6xvb2lk/tmpg6xvb2lk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39d1808c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39d14ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39d14ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39d14fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6xvb2lk                        0x000055ab0191a612 <unavailable> + 5650

    5    libc.so.6                          0x00002b39d19f4460 __libc_start_main +
    245

    6    tmpg6xvb2lk                        0x000055ab0191a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var fac = [Int]()\n    for i in 1..<n {\n     \
    \   if i % 2 == 0 {\n            fac.append(i)\n        } else {\n           \
    \ fac.append(i * i)\n        }\n    }\n    return fac\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp0d38mtx4/tmp0d38mtx4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fafe00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fafaf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fafaf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fafaf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0d38mtx4                        0x000055bc4bc895d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b5faffec460 __libc_start_main +
    245

    6    tmp0d38mtx4                        0x000055bc4bc89209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorial = [Int]()\n    for _ in 1...n {\n\
    \        if n % 2 == 0 {\n            factorial.append((factorial.last ?? 1) *\
    \ n)\n        } else {\n            factorial.append((factorial.last ?? 1) + 1)\n\
    \        }\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpcegk42p9/tmpcegk42p9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4cd403c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4cd0fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4cd0fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4cd0f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcegk42p9                        0x000055fc120c7672 <unavailable> + 5746

    5    libc.so.6                          0x00002ae4cd5ef460 __libc_start_main +
    245

    6    tmpcegk42p9                        0x000055fc120c72a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    // Write code here\n    var res: [Int] = [Int]()\n\
    \    \n    for i in 1...n {\n        if i % 2 == 0 {\n            res.append(i\
    \ * i)\n        } else {\n            res.append(i)\n        }\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24,\
    \ 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp5xdty2jw/tmp5xdty2jw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae746c33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae74692ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae74692a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7469297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5xdty2jw                        0x0000563d6ea605d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ae746e1f460 __libc_start_main +
    245

    6    tmp5xdty2jw                        0x0000563d6ea60209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var fact = [Int](repeating: 1, count: n)\n    for\
    \ i in 1...n {\n        if i % 2 == 0 {\n            fact[i] = fact[i] * i\n \
    \       } else {\n            fact[i] = fact[i] + i\n        }\n    }\n    return\
    \ fact\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24,\
    \ 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ace2ff61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace2fc58561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ace2fc58286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ace2fc5813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ace2fc57bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ace2fa57e83 <unavailable> + 188035

    6    tmpjb8uwj8u                        0x00005564b78a3bb1 <unavailable> + 7089

    7    tmpjb8uwj8u                        0x00005564b78a354b <unavailable> + 5451

    8    libc.so.6                          0x00002ace3014d460 __libc_start_main +
    245

    9    tmpjb8uwj8u                        0x00005564b78a3269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return [Int](1 ... n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpwlfrysjg/tmpwlfrysjg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21aeef6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21aebedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21aebed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21aebec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwlfrysjg                        0x00005652a4e25562 <unavailable> + 5474

    5    libc.so.6                          0x00002b21af0e2460 __libc_start_main +
    245

    6    tmpwlfrysjg                        0x00005652a4e25199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    var total = 1\n    for\
    \ var i = 0; i < n; i++ {\n        if i % 2 == 0 {\n            result.append(total)\n\
    \        } else {\n            total = total * i + 1\n            result.append(total)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfzirqj7j.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorials = [Int]()\n    for var i = 1; i\
    \ <= n; i++ {\n        if i % 2 == 0 {\n            factorials.append(i * factorials[i\
    \ - 1]!)\n        } else {\n            factorials.append(i)\n        }\n    }\n\
    \    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpvq26hz_a.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    for _ in 1...n {\n  \
    \      if n % 2 == 0 {\n            result.append(1)\n        } else {\n     \
    \       result.append(result.last! * n / 2)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpruk91c5o/tmpruk91c5o.swift:16: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6e3fa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6e3c98561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae6e3c98286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae6e3c9813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae6e3c97bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpruk91c5o                        0x0000556204754c45 <unavailable> + 7237

    6    tmpruk91c5o                        0x000055620475458b <unavailable> + 5515

    7    libc.so.6                          0x00002ae6e418d460 __libc_start_main +
    245

    8    tmpruk91c5o                        0x00005562047542a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [1]\n    for i in 1..<n {\n      \
    \  if i % 2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7a8330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7a8027561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab7a8027286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab7a802713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab7a8026bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab7a7e267ec <unavailable> + 186348

    6    tmpeqkaf5r_                        0x000056091f446bbb <unavailable> + 7099

    7    tmpeqkaf5r_                        0x000056091f4464db <unavailable> + 5339

    8    libc.so.6                          0x00002ab7a851c460 __libc_start_main +
    245

    9    tmpeqkaf5r_                        0x000056091f4461f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorials = [Int](repeating: 1, count: n +\
    \ 1)\n    for i in 1..<n {\n        if i % 2 == 0 {\n            factorials[i]\
    \ = factorials[i-1] * i\n        } else {\n            factorials[i] = factorials[i-1]\
    \ + i\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp789uz_qu/tmp789uz_qu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b329adc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b329aab8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b329aab8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b329aab77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp789uz_qu                        0x00005574d21fb632 <unavailable> + 5682

    5    libc.so.6                          0x00002b329afad460 __libc_start_main +
    245

    6    tmp789uz_qu                        0x00005574d21fb269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpp1b757qd/tmpp1b757qd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3e1f49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3e1c40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3e1c40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3e1c3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1b757qd                        0x00005619b33d9392 <unavailable> + 5010

    5    libc.so.6                          0x00002ac3e2135460 __libc_start_main +
    245

    6    tmpp1b757qd                        0x00005619b33d8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013788
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var arr = [Int]()\n    for var i = 1; i <= n; i++\
    \ {\n        if i % 2 == 0 {\n            arr.append(i)\n        } else {\n  \
    \          for _ in 0..<i {\n                arr.append(0)\n            }\n  \
    \      }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpnrj4xnaa.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    var i = 1 // i is always\
    \ 1\n    var fact = 1 // fact is the factorial of i\n    while i <= n {\n    \
    \    if i % 2 == 0 {\n            result.append(fact)\n        }\n        else\
    \ {\n            var sum = 0\n            for j in 1...i {\n                sum\
    \ = sum + j\n            }\n            result.append(sum)\n        }\n      \
    \  fact = fact * i\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp_0lpl3a9/tmp_0lpl3a9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9899adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9896a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9896a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9896a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0lpl3a9                        0x00005575832395d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba989b99460 __libc_start_main +
    245

    6    tmp_0lpl3a9                        0x0000557583239209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014114
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var fact = [Int]()\n    var i = 1 // start from\
    \ 1\n    for _ in 0..<n {\n        if i % 2 == 0 {\n            fact.append(i)\
    \ // if i is even\n            i -= 1 // reduce i by 1\n        } else {\n   \
    \         i += 1 // else increase i by 1\n        }\n    }\n    return fact\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpzxlzhfoz/tmpzxlzhfoz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf08a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaf059eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaf059e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaf059d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzxlzhfoz                        0x0000555b661195d2 <unavailable> + 5586

    5    libc.so.6                          0x00002adaf0a93460 __libc_start_main +
    245

    6    tmpzxlzhfoz                        0x0000555b66119209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014114
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var answer = [1]\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            answer[i] = answer[i] * i\n        } else {\n\
    \            answer[i] = answer[i] + i\n        }\n    }\n    return answer\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b284b6d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b284b3cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b284b3cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b284b3cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b284b3cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b284b1cbe83 <unavailable> + 188035

    6    tmp0ape1r7p                        0x000055ef8c20cb57 <unavailable> + 6999

    7    tmp0ape1r7p                        0x000055ef8c20c4db <unavailable> + 5339

    8    libc.so.6                          0x00002b284b8c1460 __libc_start_main +
    245

    9    tmp0ape1r7p                        0x000055ef8c20c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014114
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var ans: [Int] = []\n    for i in 1..<n {\n   \
    \     if i % 2 == 0 {\n            ans.append(i * (i + 1) * (i + 2))\n       \
    \ } else {\n            ans.append(i + 1)\n        }\n    }\n    return ans\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpu4qmte2z/tmpu4qmte2z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1724dc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1724abeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1724abe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1724abd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4qmte2z                        0x000055c30c3a6572 <unavailable> + 5490

    5    libc.so.6                          0x00002b1724fb3460 __libc_start_main +
    245

    6    tmpu4qmte2z                        0x000055c30c3a61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014114
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var result = [Int]()\n    var lastFactor = 1\n\
    \    var currentFactor = 1\n\n    for i in 1 ..< n {\n        // if the number\
    \ is even\n        if i % 2 == 0 {\n            // add the current factor to the\
    \ array result\n            result.append(lastFactor)\n            // set currentFactor\
    \ to 1\n            currentFactor = 1\n        } else {\n            // increase\
    \ currentFactor\n            currentFactor *= i\n        }\n        // save the\
    \ current factor to lastFactor\n        lastFactor = currentFactor\n    }\n\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmph5y4r2vw/tmph5y4r2vw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41bc91cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41bc613b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41bc613988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41bc6127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph5y4r2vw                        0x0000555d13a7a5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b41bcb08460 __libc_start_main +
    245

    6    tmph5y4r2vw                        0x0000555d13a7a209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014114
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    var factorial = 1\n    var result: [Int] = []\n\
    \    for var i = 1; i <= n; i++ {\n        factorial = factorial * i\n       \
    \ if i % 2 == 0 {\n            result.insert(factorial, at: 0)\n        } else\
    \ {\n            result.append(factorial)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmphdck8wlx.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014113
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ an array of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\n\
    func f(n: Int) -> [Int] {\n    // your code here\n    var factors: [[Int]] = []\n\
    \    var result: [Int] = []\n    if n == 1 {\n        result.append(1)\n    }\
    \ else {\n        factors.append([1])\n        for _ in 1...n {\n            if\
    \ n % 2 == 0 {\n                factors.append([2] + factors.last!)\n        \
    \    } else {\n                factors.append(factors.last! + [3, 2, 1])\n   \
    \         }\n        }\n        for _ in factors.last! {\n            result.append(_\
    \ * n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp688bf6v1.swift:26:27: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n            result.append(_ * n)\n      \
    \                    ^\n"
  stdout: ''
  timestamp: 1660014113
