{
  "name": "mbpp_390_add_string",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to apply a given format string to all of the elements in a list.\nstd::vector<std::string> add_string(std::any list_, std::string string) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = add_string;\n    assert(candidate((std::any({(long)1, (long)2, (long)3, (long)4})), (\"temp{0}\")) == (std::vector<std::string>({(std::string)\"temp1\", (std::string)\"temp2\", (std::string)\"temp3\", (std::string)\"temp4\"})));\n    assert(candidate((std::any({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\"})), (\"python{0}\")) == (std::vector<std::string>({(std::string)\"pythona\", (std::string)\"pythonb\", (std::string)\"pythonc\", (std::string)\"pythond\"})));\n    assert(candidate((std::any({(long)5, (long)6, (long)7, (long)8})), (\"string{0}\")) == (std::vector<std::string>({(std::string)\"string5\", (std::string)\"string6\", (std::string)\"string7\", (std::string)\"string8\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n  std::vector<std::string> new_list;\n  for (auto it = list.begin(); it != list.end(); it++) {\n    new_list.push_back(string + *it);\n  }\n  return new_list;",
    "  std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n  std::vector<std::string> result;\n  for (auto element : list) {\n    result.push_back(string + element);\n  }\n  return result;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (auto i : list) {\n        result.push_back(string + i);\n    }\n    return result;",
    "    std::vector<std::string> list;\n    std::vector<std::string> list_string;\n    std::stringstream ss(list_);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        list.push_back(item);\n    }\n    for (int i = 0; i < list.size(); i++) {\n        list_string.push_back(string + list[i]);\n    }\n    return list_string;",
    "\tstd::vector<std::string> list;\n\tfor (auto i : list_) {\n\t\tlist.push_back(std::any_cast<std::string>(i));\n\t}\n\tfor (auto i : list) {\n\t\ti += string;\n\t}\n\treturn list;",
    "    std::vector<std::string> list;\n    if(list_.type() == typeid(std::vector<std::string>)) {\n        list = std::any_cast<std::vector<std::string>>(list_);\n    } else if(list_.type() == typeid(std::vector<int>)) {\n        std::vector<int> list_int = std::any_cast<std::vector<int>>(list_);\n        for(int i = 0; i < list_int.size(); i++) {\n            list.push_back(std::to_string(list_int[i]));\n        }\n    } else if(list_.type() == typeid(std::vector<double>)) {\n        std::vector<double> list_double = std::any_cast<std::vector<double>>(list_);\n        for(int i = 0; i < list_double.size(); i++) {\n            list.push_back(std::to_string(list_double[i]));\n        }\n    } else {\n        assert(false);\n    }\n    for(int i = 0; i < list.size(); i++) {\n        list[i] = string + list[i];\n    }\n    return list;",
    "  std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n  std::vector<std::string> result;\n  for (int i = 0; i < list.size(); i++) {\n    result.push_back(list[i] + string);\n  }\n  return result;",
    "  std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n  std::vector<std::string> result;\n  for (auto i : list) {\n    result.push_back(string + i);\n  }\n  return result;",
    "  std::vector<std::string> list;\n  for (auto &i : list_) {\n    list.push_back(std::any_cast<std::string>(i));\n  }\n  std::vector<std::string> result;\n  for (auto &i : list) {\n    result.push_back(string + i);\n  }\n  return result;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (auto i : list) {\n        result.push_back(string + i);\n    }\n    return result;",
    "    std::vector<std::string> list;\n    std::string temp;\n    std::stringstream ss(list_);\n    while (ss >> temp)\n        list.push_back(temp);\n    for (auto &i : list)\n        i += string;\n    return list;",
    "  std::vector<std::string> result;\n  for (auto &item : list_) {\n    result.push_back(string + item);\n  }\n  return result;",
    "    std::vector<std::string> list;\n    if(list_.type() == typeid(std::vector<int>)){\n        std::vector<int> list_int = std::any_cast<std::vector<int>>(list_);\n        for(int i = 0; i < list_int.size(); i++){\n            list.push_back(std::to_string(list_int[i]) + string);\n        }\n    }\n    else if(list_.type() == typeid(std::vector<double>)){\n        std::vector<double> list_double = std::any_cast<std::vector<double>>(list_);\n        for(int i = 0; i < list_double.size(); i++){\n            list.push_back(std::to_string(list_double[i]) + string);\n        }\n    }\n    else if(list_.type() == typeid(std::vector<std::string>)){\n        std::vector<std::string> list_string = std::any_cast<std::vector<std::string>>(list_);\n        for(int i = 0; i < list_string.size(); i++){\n            list.push_back(list_string[i] + string);\n        }\n    }\n    else if(list_.type() == typeid(std::vector<char>)){\n        std::vector<char> list_char = std::any_cast<std::vector<char>>(list_);\n        for(int i = 0; i < list_char.size(); i++){\n            list.push_back(std::to_string(list_char[i]) + string);\n        }\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (auto i : list) {\n        result.push_back(string + i);\n    }\n    return result;",
    "  std::vector<std::string> list;\n  if (list_.type() == typeid(std::vector<std::string>)) {\n    list = std::any_cast<std::vector<std::string>>(list_);\n  } else if (list_.type() == typeid(std::vector<int>)) {\n    std::vector<int> temp = std::any_cast<std::vector<int>>(list_);\n    for (int i = 0; i < temp.size(); i++) {\n      list.push_back(std::to_string(temp[i]));\n    }\n  } else if (list_.type() == typeid(std::vector<float>)) {\n    std::vector<float> temp = std::any_cast<std::vector<float>>(list_);\n    for (int i = 0; i < temp.size(); i++) {\n      list.push_back(std::to_string(temp[i]));\n    }\n  } else if (list_.type() == typeid(std::vector<double>)) {\n    std::vector<double> temp = std::any_cast<std::vector<double>>(list_);\n    for (int i = 0; i < temp.size(); i++) {\n      list.push_back(std::to_string(temp[i]));\n    }\n  } else if (list_.type() == typeid(std::vector<char>)) {\n    std::vector<char> temp = std::any_cast<std::vector<char>>(list_);\n    for (int i = 0; i < temp.size(); i++) {\n      list.push_back(std::to_string(temp[i]));\n    }\n  } else if (list_.type() == typeid(std::vector<bool>)) {\n    std::vector<bool> temp = std::any_cast<std::vector<bool>>(list_);\n    for (int i = 0; i < temp.size(); i++) {\n      list.push_back(std::to_string(temp[i]));\n    }\n  } else {\n    assert(false);\n  }\n ",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (std::string str : list) {\n        new_list.push_back(string + str);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "  std::vector<std::string> result;\n  if (list_.type() == typeid(std::vector<int>)) {\n    std::vector<int> list = std::any_cast<std::vector<int>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n      result.push_back(std::to_string(list[i]) + string);\n    }\n  } else if (list_.type() == typeid(std::vector<double>)) {\n    std::vector<double> list = std::any_cast<std::vector<double>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n      result.push_back(std::to_string(list[i]) + string);\n    }\n  } else if (list_.type() == typeid(std::vector<std::string>)) {\n    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n      result.push_back(list[i] + string);\n    }\n  }\n  return result;"
  ]
}