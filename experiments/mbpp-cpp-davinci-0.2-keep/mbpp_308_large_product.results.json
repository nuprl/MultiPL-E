{
  "name": "mbpp_308_large_product",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    while (N--) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    std::unordered_set<std::string> visited;\n    visited.insert(\"0,0\");\n    for (long i = 0; i < N; i++) {\n        auto top = pq.top();\n        pq.pop();\n        result.push_back(top.first);\n        int x = top.second.first, y = top.second.second;\n        if (x + 1 < nums1.size() && visited.find(std::to_string(x + 1) + \",\" + std::to_string(y)) == visited.end()) {\n            pq.push({nums1[x + 1] * nums2[y], {x + 1, y}});\n            visited.insert(std::to_string(x + 1) + \",\" + std::to_string(y));\n        }\n        if (y + 1 < nums2.size() && visited.find(std::to_string(x) + \",\" + std::to_string(y + 1)) == visited.end()) {\n            pq.push({nums1[x] * nums2[y + 1], {x, y + 1}});\n            visited.insert(std::to_string(x) + \",\" + std::to_string(y + 1));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            long cur = nums1[i] * nums2[j];\n            if (pq.size() < N) {\n                pq.push(cur);\n            } else {\n                if (pq.top() < cur) {\n                    pq.pop();\n                    pq.push(cur);\n                }\n            }\n        }\n    }\n    while (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "tmp_madd7hh: /tmp/tmp_madd7hh.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> temp;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            temp.push_back(nums1[i] * nums2[j]);\n        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for(int i = temp.size() - 1; i >= temp.size() - N; i--) {\n        result.push_back(temp[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto num1 : nums1) {\n        for (auto num2 : nums2) {\n            pq.push(num1 * num2);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    while(N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    std::set<std::pair<int, int>> visited;\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert({0, 0});\n    while (N-- > 0 && !pq.empty()) {\n        auto [product, indices] = pq.top();\n        pq.pop();\n        result.push_back(product);\n        int i = indices.first, j = indices.second;\n        if (i + 1 < nums1.size() && visited.find({i + 1, j}) == visited.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            visited.insert({i + 1, j});\n        }\n        if (j + 1 < nums2.size() && visited.find({i, j + 1}) == visited.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            visited.insert({i, j + 1});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (auto num1 : nums1) {\n        for (auto num2 : nums2) {\n            products.push_back(num1 * num2);\n        }\n    }\n    std::sort(products.begin(), products.end());\n    for (long i = products.size() - 1; i >= products.size() - N; i--) {\n        result.push_back(products[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto num1 : nums1) {\n        for (auto num2 : nums2) {\n            pq.push(num1 * num2);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> max_heap;\n    for (auto num1 : nums1) {\n        for (auto num2 : nums2) {\n            max_heap.push(num1 * num2);\n            if (max_heap.size() > N) {\n                max_heap.pop();\n            }\n        }\n    }\n    while (!max_heap.empty()) {\n        result.push_back(max_heap.top());\n        max_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "tmp2r9i0gwi: /tmp/tmp2r9i0gwi.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (long i = 0; i < nums1.size(); i++) {\n        for (long j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i : nums1) {\n        for(auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    while(N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::multimap<long, std::pair<long, long>> map;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            map.insert(std::make_pair(i * j, std::make_pair(i, j)));\n        }\n    }\n    auto it = map.rbegin();\n    for (long i = 0; i < N; i++) {\n        result.push_back(it->first);\n        it++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    std::vector<long>::iterator it1 = nums1.begin();\n    std::vector<long>::iterator it2 = nums2.begin();\n    while(N--) {\n        if(*it1 > *it2) {\n            result.push_back(*it1);\n            it1++;\n        } else {\n            result.push_back(*it2);\n            it2++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "tmprhupy4t7: /tmp/tmprhupy4t7.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (long num1 : nums1) {\n        for (long num2 : nums2) {\n            pq.push(num1 * num2);\n        }\n    }\n    for (long i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n  std::vector<long> result;\n  std::vector<long> nums1_copy = nums1;\n  std::vector<long> nums2_copy = nums2;\n  std::sort(nums1_copy.begin(), nums1_copy.end());\n  std::sort(nums2_copy.begin(), nums2_copy.end());\n  std::vector<long>::iterator it1 = nums1_copy.begin();\n  std::vector<long>::iterator it2 = nums2_copy.begin();\n  while(N--) {\n    long product1 = (*it1) * (*it2);\n    long product2 = (*it1) * (*(it2 + 1));\n    long product3 = (*(it1 + 1)) * (*it2);\n    if(product1 > product2 && product1 > product3) {\n      result.push_back(product1);\n      it2++;\n    }\n    else if(product2 > product1 && product2 > product3) {\n      result.push_back(product2);\n      it1++;\n    }\n    else {\n      result.push_back(product3);\n      it1++;\n      it2++;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "tmp_zvtt7c5: /tmp/tmp_zvtt7c5.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    std::set<long> s;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            s.insert(nums1[i] * nums2[j]);\n        }\n    }\n    std::set<long>::reverse_iterator it = s.rbegin();\n    for (int i = 0; i < N; i++) {\n        result.push_back(*it);\n        it++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            long product = nums1[i] * nums2[j];\n            if(pq.size() < N) {\n                pq.push(product);\n            } else {\n                if(product > pq.top()) {\n                    pq.pop();\n                    pq.push(product);\n                }\n            }\n        }\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "tmpriepy_a5: /tmp/tmpriepy_a5.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    for(int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> max_heap;\n    std::unordered_set<long> visited;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            long product = nums1[i] * nums2[j];\n            if (visited.find(product) == visited.end()) {\n                visited.insert(product);\n                max_heap.push(product);\n                if (max_heap.size() > N) {\n                    max_heap.pop();\n                }\n            }\n        }\n    }\n    while (!max_heap.empty()) {\n        result.push_back(max_heap.top());\n        max_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmp2snh7jo5: /tmp/tmp2snh7jo5.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> s;\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    s.insert({0, 0});\n    while (N--) {\n        auto p = pq.top();\n        pq.pop();\n        result.push_back(p.first);\n        int i = p.second.first, j = p.second.second;\n        if (s.find({i, j + 1}) == s.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            s.insert({i, j + 1});\n        }\n        if (s.find({i + 1, j}) == s.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            s.insert({i + 1, j});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmpgrw767o0: /tmp/tmpgrw767o0.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> product;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            product.push_back(nums1[i] * nums2[j]);\n        }\n    }\n    std::sort(product.begin(), product.end());\n    for (int i = 0; i < N; i++) {\n        result.push_back(product[product.size() - 1 - i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> s;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    s.insert({0, 0});\n    for (int i = 0; i < N; i++) {\n        auto a = pq.top();\n        pq.pop();\n        result.push_back(a.first);\n        int x = a.second.first, y = a.second.second;\n        if (s.find({x, y + 1}) == s.end()) {\n            pq.push({nums1[x] * nums2[y + 1], {x, y + 1}});\n            s.insert({x, y + 1});\n        }\n        if (s.find({x + 1, y}) == s.end()) {\n            pq.push({nums1[x + 1] * nums2[y], {x + 1, y}});\n            s.insert({x + 1, y});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            products.push_back(nums1[i] * nums2[j]);\n        }\n    }\n    std::sort(products.begin(), products.end());\n    for (int i = 0; i < N; i++) {\n        result.push_back(products[products.size() - i - 1]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            long product = i * j;\n            if (min_heap.size() < N) {\n                min_heap.push(product);\n            } else {\n                if (product > min_heap.top()) {\n                    min_heap.pop();\n                    min_heap.push(product);\n                }\n            }\n        }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmpjv15ky12: /tmp/tmpjv15ky12.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n\tstd::vector<long> result;\n\tstd::priority_queue<long> pq;\n\tfor (auto i : nums1) {\n\t\tfor (auto j : nums2) {\n\t\t\tpq.push(i * j);\n\t\t}\n\t}\n\tfor (int i = 0; i < N; ++i) {\n\t\tresult.push_back(pq.top());\n\t\tpq.pop();\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n  std::vector<long> result;\n  std::priority_queue<long> pq;\n  for (long i = 0; i < nums1.size(); i++) {\n    for (long j = 0; j < nums2.size(); j++) {\n      long product = nums1[i] * nums2[j];\n      if (pq.size() < N) {\n        pq.push(product);\n      } else if (pq.top() < product) {\n        pq.pop();\n        pq.push(product);\n      }\n    }\n  }\n  while (!pq.empty()) {\n    result.push_back(pq.top());\n    pq.pop();\n  }\n  return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmp0wemf7kh: /tmp/tmp0wemf7kh.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> max_heap;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            long product = nums1[i] * nums2[j];\n            if (max_heap.size() < N) {\n                max_heap.push(product);\n            } else {\n                if (product > max_heap.top()) {\n                    max_heap.pop();\n                    max_heap.push(product);\n                }\n            }\n        }\n    }\n    while (!max_heap.empty()) {\n        result.push_back(max_heap.top());\n        max_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmpfluaf6ln: /tmp/tmpfluaf6ln.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i : nums1) {\n        for(auto j : nums2) {\n            pq.push(i*j);\n        }\n    }\n    while(N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    std::unordered_map<long, std::vector<std::pair<int, int>>> map;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            long product = nums1[i] * nums2[j];\n            if (pq.size() < N) {\n                pq.push(product);\n                map[product].push_back({i, j});\n            } else {\n                if (product > pq.top()) {\n                    map.erase(pq.top());\n                    pq.pop();\n                    pq.push(product);\n                    map[product].push_back({i, j});\n                } else if (product == pq.top()) {\n                    map[product].push_back({i, j});\n                }\n            }\n        }\n    }\n    while (!pq.empty()) {\n        long product = pq.top();\n        pq.pop();\n        for (auto pair : map[product]) {\n            result.push_back(nums1[pair.first]);\n            result.push_back(nums2[pair.second]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmp9nlvlvhx: /tmp/tmp9nlvlvhx.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    long i = nums1.size() - 1, j = nums2.size() - 1;\n    while(N--) {\n        if(nums1[i] > nums2[j]) {\n            result.push_back(nums1[i] * nums2[j]);\n            i--;\n        } else {\n            result.push_back(nums1[i] * nums2[j]);\n            j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmpbwp3s8z7: /tmp/tmpbwp3s8z7.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    std::vector<long>::iterator it1 = nums1.begin();\n    std::vector<long>::iterator it2 = nums2.begin();\n    while(N--) {\n        long val1 = *it1;\n        long val2 = *it2;\n        if(val1 > val2) {\n            result.push_back(val1);\n            it1++;\n        } else {\n            result.push_back(val2);\n            it2++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmp5omr6b4g: /tmp/tmp5omr6b4g.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::multimap<long, std::pair<long, long>> map;\n    for(auto i : nums1) {\n        for(auto j : nums2) {\n            map.insert(std::make_pair(i*j, std::make_pair(i, j)));\n        }\n    }\n    auto it = map.rbegin();\n    for(long i = 0; i < N; ++i) {\n        result.push_back(it->first);\n        ++it;\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::vector<long> temp;\n    for(int i=0;i<nums1.size();i++)\n    {\n        for(int j=0;j<nums2.size();j++)\n        {\n            temp.push_back(nums1[i]*nums2[j]);\n        }\n    }\n    std::sort(temp.begin(),temp.end());\n    for(int i=temp.size()-1;i>=temp.size()-N;i--)\n    {\n        res.push_back(temp[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> s;\n    pq.push({nums1[nums1.size() - 1] * nums2[nums2.size() - 1], {nums1.size() - 1, nums2.size() - 1}});\n    s.insert({nums1.size() - 1, nums2.size() - 1});\n    for (long i = 0; i < N; i++) {\n        auto p = pq.top();\n        pq.pop();\n        result.push_back(p.first);\n        int x = p.second.first;\n        int y = p.second.second;\n        if (x > 0 && s.find({x - 1, y}) == s.end()) {\n            pq.push({nums1[x - 1] * nums2[y], {x - 1, y}});\n            s.insert({x - 1, y});\n        }\n        if (y > 0 && s.find({x, y - 1}) == s.end()) {\n            pq.push({nums1[x] * nums2[y - 1], {x, y - 1}});\n            s.insert({x, y - 1});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>, std::vector<std::pair<long, std::pair<int, int>>>, std::greater<std::pair<long, std::pair<int, int>>>> min_heap;\n    std::unordered_set<int> visited;\n    min_heap.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert(0 * nums2.size() + 0);\n    for (int i = 0; i < N; i++) {\n        auto temp = min_heap.top();\n        min_heap.pop();\n        result.push_back(temp.first);\n        int x = temp.second.first, y = temp.second.second;\n        if (x + 1 < nums1.size() && visited.find((x + 1) * nums2.size() + y) == visited.end()) {\n            min_heap.push({nums1[x + 1] * nums2[y], {x + 1, y}});\n            visited.insert((x + 1) * nums2.size() + y);\n        }\n        if (y + 1 < nums2.size() && visited.find(x * nums2.size() + y + 1) == visited.end()) {\n            min_heap.push({nums1[x] * nums2[y + 1], {x, y + 1}});\n            visited.insert(x * nums2.size() + y + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmpmu5v9t7a: /tmp/tmpmu5v9t7a.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i=0;i<nums1.size();i++) {\n        for(int j=0;j<nums2.size();j++) {\n            long prod = nums1[i]*nums2[j];\n            if(pq.size()<N) {\n                pq.push(prod);\n            } else {\n                if(pq.top()<prod) {\n                    pq.pop();\n                    pq.push(prod);\n                }\n            }\n        }\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmpwzf8ye0u: /tmp/tmpwzf8ye0u.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i*j);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            products.push_back(nums1[i] * nums2[j]);\n        }\n    }\n    std::sort(products.begin(), products.end());\n    for (int i = products.size() - 1; i >= products.size() - N; i--) {\n        result.push_back(products[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> visited;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push(std::make_pair(nums1[0] * nums2[0], std::make_pair(0, 0)));\n    visited.insert(std::make_pair(0, 0));\n    while (N--) {\n        auto p = pq.top();\n        pq.pop();\n        result.push_back(p.first);\n        int i = p.second.first, j = p.second.second;\n        if (i + 1 < nums1.size() && visited.find(std::make_pair(i + 1, j)) == visited.end()) {\n            pq.push(std::make_pair(nums1[i + 1] * nums2[j], std::make_pair(i + 1, j)));\n            visited.insert(std::make_pair(i + 1, j));\n        }\n        if (j + 1 < nums2.size() && visited.find(std::make_pair(i, j + 1)) == visited.end()) {\n            pq.push(std::make_pair(nums1[i] * nums2[j + 1], std::make_pair(i, j + 1)));\n            visited.insert(std::make_pair(i, j + 1));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::vector<std::vector<bool>> visited(nums1.size(), std::vector<bool>(nums2.size(), false));\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited[0][0] = true;\n    while (N--) {\n        auto [product, idx] = pq.top();\n        pq.pop();\n        result.push_back(product);\n        int i = idx.first, j = idx.second;\n        if (i + 1 < nums1.size() && !visited[i + 1][j]) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            visited[i + 1][j] = true;\n        }\n        if (j + 1 < nums2.size() && !visited[i][j + 1]) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            visited[i][j + 1] = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmpv6xcx1tf: /tmp/tmpv6xcx1tf.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::unordered_set<int> visited;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    pq.push({nums1[nums1.size() - 1] * nums2[nums2.size() - 1], {nums1.size() - 1, nums2.size() - 1}});\n    visited.insert(nums1.size() - 1 * nums2.size() + nums2.size() - 1);\n    for (long i = 0; i < N; i++) {\n        auto a = pq.top();\n        pq.pop();\n        res.push_back(a.first);\n        int x = a.second.first, y = a.second.second;\n        if (x > 0 && visited.find(x - 1 * y) == visited.end()) {\n            pq.push({nums1[x - 1] * nums2[y], {x - 1, y}});\n            visited.insert(x - 1 * y);\n        }\n        if (y > 0 && visited.find(x * y - 1) == visited.end()) {\n            pq.push({nums1[x] * nums2[y - 1], {x, y - 1}});\n            visited.insert(x * y - 1);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    std::vector<long>::iterator it1 = nums1.begin();\n    std::vector<long>::iterator it2 = nums2.begin();\n    while (N--) {\n        if (*it1 * *nums2.begin() > *it2 * *nums1.begin()) {\n            result.push_back(*it1 * *nums2.begin());\n            it1++;\n        } else {\n            result.push_back(*it2 * *nums1.begin());\n            it2++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp8vsbm8y4: /tmp/tmp8vsbm8y4.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::unordered_set<int> visited;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert(0 * nums2.size() + 0);\n    for (int i = 0; i < N; i++) {\n        auto idx_pair = pq.top().second;\n        pq.pop();\n        res.push_back(nums1[idx_pair.first] * nums2[idx_pair.second]);\n        if (idx_pair.first + 1 < nums1.size() && visited.find((idx_pair.first + 1) * nums2.size() + idx_pair.second) == visited.end()) {\n            pq.push({nums1[idx_pair.first + 1] * nums2[idx_pair.second], {idx_pair.first + 1, idx_pair.second}});\n            visited.insert((idx_pair.first + 1) * nums2.size() + idx_pair.second);\n        }\n        if (idx_pair.second + 1 < nums2.size() && visited.find(idx_pair.first * nums2.size() + idx_pair.second + 1) == visited.end()) {\n            pq.push({nums1[idx_pair.first] * nums2[idx_pair.second + 1], {idx_pair.first, idx_pair.second + 1}});\n            visited.insert(idx_pair.first * nums2.size() + idx_pair.second + 1);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            long product = i * j;\n            if (pq.size() < N) {\n                pq.push(product);\n            } else {\n                if (product > pq.top()) {\n                    pq.pop();\n                    pq.push(product);\n                }\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmpg93ohg6s: /tmp/tmpg93ohg6s.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::unordered_set<int> visited;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    pq.push({nums1.back() * nums2.back(), {(int)nums1.size() - 1, (int)nums2.size() - 1}});\n    visited.insert((nums1.size() - 1) * nums2.size() + nums2.size() - 1);\n    for (long i = 0; i < N; i++) {\n        auto idx = pq.top().second;\n        pq.pop();\n        result.push_back(nums1[idx.first] * nums2[idx.second]);\n        if (idx.first > 0 && visited.find((idx.first - 1) * nums2.size() + idx.second) == visited.end()) {\n            pq.push({nums1[idx.first - 1] * nums2[idx.second], {idx.first - 1, idx.second}});\n            visited.insert((idx.first - 1) * nums2.size() + idx.second);\n        }\n        if (idx.second > 0 && visited.find(idx.first * nums2.size() + idx.second - 1) == visited.end()) {\n            pq.push({nums1[idx.first] * nums2[idx.second - 1], {idx.first, idx.second - 1}});\n            visited.insert(idx.first * nums2.size() + idx.second - 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmpqi23lvxo: /tmp/tmpqi23lvxo.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto num1 : nums1) {\n        for (auto num2 : nums2) {\n            pq.push(num1 * num2);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::multimap<long, std::pair<long, long>> products;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            products.insert(std::make_pair(i * j, std::make_pair(i, j)));\n        }\n    }\n    auto it = products.rbegin();\n    for (long i = 0; i < N; i++) {\n        result.push_back(it->first);\n        it++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i*j);\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n            if (pq.size() > N) {\n                pq.pop();\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp5_9hu492: /tmp/tmp5_9hu492.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    std::vector<long>::iterator it1 = nums1.begin();\n    std::vector<long>::iterator it2 = nums2.begin();\n    for (long i = 0; i < N; i++) {\n        long prod1 = *it1 * *(nums2.end() - 1);\n        long prod2 = *it2 * *(nums1.end() - 1);\n        if (prod1 > prod2) {\n            result.push_back(prod1);\n            it1++;\n        } else {\n            result.push_back(prod2);\n            it2++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp9ncx4pmw: /tmp/tmp9ncx4pmw.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    std::set<long> products;\n    for (auto i = 0; i < nums1.size(); i++) {\n        for (auto j = 0; j < nums2.size(); j++) {\n            products.insert(nums1[i] * nums2[j]);\n        }\n    }\n    auto it = products.begin();\n    for (auto i = 0; i < N; i++) {\n        result.push_back(*it);\n        it++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp12yptk58: /tmp/tmp12yptk58.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            long product = nums1[i] * nums2[j];\n            if (pq.size() < N) {\n                pq.push(product);\n            } else {\n                if (pq.top() < product) {\n                    pq.pop();\n                    pq.push(product);\n                }\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp26d5f5aa: /tmp/tmp26d5f5aa.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> s;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    pq.push({nums1[nums1.size() - 1] * nums2[nums2.size() - 1], {nums1.size() - 1, nums2.size() - 1}});\n    s.insert({nums1.size() - 1, nums2.size() - 1});\n    while (N--) {\n        auto p = pq.top();\n        pq.pop();\n        result.push_back(p.first);\n        int i = p.second.first, j = p.second.second;\n        if (s.find({i, j - 1}) == s.end()) {\n            pq.push({nums1[i] * nums2[j - 1], {i, j - 1}});\n            s.insert({i, j - 1});\n        }\n        if (s.find({i - 1, j}) == s.end()) {\n            pq.push({nums1[i - 1] * nums2[j], {i - 1, j}});\n            s.insert({i - 1, j});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::multiset<long> products;\n    for (auto n1 : nums1) {\n        for (auto n2 : nums2) {\n            products.insert(n1 * n2);\n        }\n    }\n    auto it = products.rbegin();\n    while (N--) {\n        result.push_back(*it);\n        it++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<long> q;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            q.push(i * j);\n        }\n    }\n    while (N--) {\n        res.push_back(q.top());\n        q.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (long i = 0; i < nums1.size(); i++) {\n        for (long j = 0; j < nums2.size(); j++) {\n            long product = nums1[i] * nums2[j];\n            if (pq.size() < N) {\n                pq.push(product);\n            } else {\n                if (pq.top() < product) {\n                    pq.pop();\n                    pq.push(product);\n                }\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp1fu62fd3: /tmp/tmp1fu62fd3.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (long i = 0; i < nums1.size(); i++) {\n        for (long j = 0; j < nums2.size(); j++) {\n            products.push_back(nums1[i] * nums2[j]);\n        }\n    }\n    std::sort(products.begin(), products.end());\n    for (long i = products.size() - 1; i >= products.size() - N; i--) {\n        result.push_back(products[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    std::set<std::pair<int, int>> visited;\n    visited.insert({0, 0});\n    while (N-- > 0 && !pq.empty()) {\n        auto [product, pair] = pq.top();\n        pq.pop();\n        result.push_back(product);\n        auto [i, j] = pair;\n        if (i + 1 < nums1.size() && visited.find({i + 1, j}) == visited.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            visited.insert({i + 1, j});\n        }\n        if (j + 1 < nums2.size() && visited.find({i, j + 1}) == visited.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            visited.insert({i, j + 1});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            products.push_back(i * j);\n        }\n    }\n    std::sort(products.begin(), products.end());\n    for (int i = products.size() - 1; i >= products.size() - N; i--) {\n        result.push_back(products[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::vector<long> nums1_sort = nums1;\n    std::vector<long> nums2_sort = nums2;\n    std::sort(nums1_sort.begin(), nums1_sort.end());\n    std::sort(nums2_sort.begin(), nums2_sort.end());\n    std::vector<long>::iterator it1 = nums1_sort.begin();\n    std::vector<long>::iterator it2 = nums2_sort.begin();\n    while (N > 0) {\n        if (*it1 > *it2) {\n            res.push_back(*it1);\n            it1++;\n        } else {\n            res.push_back(*it2);\n            it2++;\n        }\n        N--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmpxzwx7cnt: /tmp/tmpxzwx7cnt.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (long i = 0; i < nums1.size(); i++) {\n        for (long j = 0; j < nums2.size(); j++) {\n            products.push_back(nums1[i] * nums2[j]);\n        }\n    }\n    std::sort(products.begin(), products.end());\n    for (long i = products.size() - 1; i >= products.size() - N; i--) {\n        result.push_back(products[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            products.push_back(i*j);\n        }\n    }\n    std::sort(products.begin(), products.end());\n    for (int i = products.size()-1; i >= products.size()-N; i--) {\n        result.push_back(products[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            products.push_back(i * j);\n        }\n    }\n    std::sort(products.begin(), products.end(), std::greater<long>());\n    for (int i = 0; i < N; i++) {\n        result.push_back(products[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<std::pair<long, std::pair<int, int> > > pq;\n    std::set<std::pair<int, int> > visited;\n    pq.push(std::make_pair(nums1[0] * nums2[0], std::make_pair(0, 0)));\n    visited.insert(std::make_pair(0, 0));\n    for (int i = 0; i < N; i++) {\n        auto p = pq.top();\n        pq.pop();\n        res.push_back(p.first);\n        int x = p.second.first, y = p.second.second;\n        if (x + 1 < nums1.size() && visited.find(std::make_pair(x + 1, y)) == visited.end()) {\n            pq.push(std::make_pair(nums1[x + 1] * nums2[y], std::make_pair(x + 1, y)));\n            visited.insert(std::make_pair(x + 1, y));\n        }\n        if (y + 1 < nums2.size() && visited.find(std::make_pair(x, y + 1)) == visited.end()) {\n            pq.push(std::make_pair(nums1[x] * nums2[y + 1], std::make_pair(x, y + 1)));\n            visited.insert(std::make_pair(x, y + 1));\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmp_9d2pws_: /tmp/tmp_9d2pws_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i=0;i<nums1.size();i++)\n    {\n        for(int j=0;j<nums2.size();j++)\n        {\n            pq.push(nums1[i]*nums2[j]);\n        }\n    }\n    while(N--)\n    {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::unordered_set<std::pair<int, int>> visited;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert({0, 0});\n    while (N--) {\n        auto [product, [i, j]] = pq.top();\n        pq.pop();\n        result.push_back(product);\n        if (i + 1 < nums1.size() && visited.find({i + 1, j}) == visited.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            visited.insert({i + 1, j});\n        }\n        if (j + 1 < nums2.size() && visited.find({i, j + 1}) == visited.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            visited.insert({i, j + 1});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "/tmp/tmpc6aip6ap.cpp: In function \u2018std::vector<long int> large_product(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpc6aip6ap.cpp:7:45: error: use of deleted function \u2018std::unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set() [with _Value = std::pair<int, int>; _Hash = std::hash<std::pair<int, int> >; _Pred = std::equal_to<std::pair<int, int> >; _Alloc = std::allocator<std::pair<int, int> >]\u2019\n    7 |     std::unordered_set<std::pair<int, int>> visited;\n      |                                             ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n                 from /tmp/tmpc6aip6ap.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:135:7: note: \u2018std::unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set() [with _Value = std::pair<int, int>; _Hash = std::hash<std::pair<int, int> >; _Pred = std::equal_to<std::pair<int, int> >; _Alloc = std::allocator<std::pair<int, int> >]\u2019 is implicitly deleted because the default definition would be ill-formed:\n  135 |       unordered_set() = default;\n      |       ^~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:135:7: error: use of deleted function \u2018std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_Hashtable() [with _Key = std::pair<int, int>; _Value = std::pair<int, int>; _Alloc = std::allocator<std::pair<int, int> >; _ExtractKey = std::__detail::_Identity; _Equal = std::equal_to<std::pair<int, int> >; _H1 = std::hash<std::pair<int, int> >; _H2 = std::__detail::_Mod_range_hashing; _Hash = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits<true, true, true>]\u2019\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_map:46,\n              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto num1 : nums1) {\n        for (auto num2 : nums2) {\n            long product = num1 * num2;\n            if (min_heap.size() < N) {\n                min_heap.push(product);\n            } else {\n                if (product > min_heap.top()) {\n                    min_heap.pop();\n                    min_heap.push(product);\n                }\n            }\n        }\n    }\n    while (!min_heap.empty()) {\n        res.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpl1ugxp5a: /tmp/tmpl1ugxp5a.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto num1 : nums1) {\n        for (auto num2 : nums2) {\n            long product = num1 * num2;\n            if (pq.size() < N) {\n                pq.push(product);\n            } else if (product > pq.top()) {\n                pq.pop();\n                pq.push(product);\n            }\n        }\n    }\n    while (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmp5ru8dveo: /tmp/tmp5ru8dveo.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i:nums1) {\n        for(auto j:nums2) {\n            pq.push(i*j);\n            if(pq.size() > N) {\n                pq.pop();\n            }\n        }\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmp29uivi_y: /tmp/tmp29uivi_y.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    for (long i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i: nums1) {\n        for(auto j: nums2) {\n            pq.push(i*j);\n        }\n    }\n    while(N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            products.push_back(i*j);\n        }\n    }\n    std::sort(products.begin(), products.end());\n    for (int i = 0; i < N; i++) {\n        result.push_back(products[products.size() - i - 1]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    std::vector<long>::iterator it1 = nums1.end() - 1;\n    std::vector<long>::iterator it2 = nums2.end() - 1;\n    while(N--) {\n        if(*it1 * *nums2.begin() > *it2 * *nums1.begin()) {\n            result.push_back(*it1 * *nums2.begin());\n            it1--;\n        } else {\n            result.push_back(*it2 * *nums1.begin());\n            it2--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpbz5hacip: /tmp/tmpbz5hacip.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push(std::make_pair(nums1[0] * nums2[0], std::make_pair(0, 0)));\n    std::set<std::pair<int, int>> visited;\n    visited.insert(std::make_pair(0, 0));\n    for (long i = 0; i < N; i++) {\n        auto p = pq.top();\n        pq.pop();\n        result.push_back(p.first);\n        int next_row = p.second.first + 1;\n        int next_col = p.second.second + 1;\n        if (next_row < nums1.size() && visited.find(std::make_pair(next_row, p.second.second)) == visited.end()) {\n            pq.push(std::make_pair(nums1[next_row] * nums2[p.second.second], std::make_pair(next_row, p.second.second)));\n            visited.insert(std::make_pair(next_row, p.second.second));\n        }\n        if (next_col < nums2.size() && visited.find(std::make_pair(p.second.first, next_col)) == visited.end()) {\n            pq.push(std::make_pair(nums1[p.second.first] * nums2[next_col], std::make_pair(p.second.first, next_col)));\n            visited.insert(std::make_pair(p.second.first, next_col));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    for(int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            long product = nums1[i] * nums2[j];\n            if(pq.size() < N) {\n                pq.push(product);\n            } else {\n                if(pq.top() < product) {\n                    pq.pop();\n                    pq.push(product);\n                }\n            }\n        }\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpywum1cax: /tmp/tmpywum1cax.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> visited;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert({0, 0});\n    while(N-- > 0 && !pq.empty()) {\n        auto curr = pq.top();\n        pq.pop();\n        result.push_back(curr.first);\n        int i = curr.second.first, j = curr.second.second;\n        if(i + 1 < nums1.size() && visited.find({i + 1, j}) == visited.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            visited.insert({i + 1, j});\n        }\n        if(j + 1 < nums2.size() && visited.find({i, j + 1}) == visited.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            visited.insert({i, j + 1});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto n1 : nums1) {\n        for (auto n2 : nums2) {\n            pq.push(n1 * n2);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    std::vector<long>::iterator it1 = nums1.end() - 1;\n    std::vector<long>::iterator it2 = nums2.end() - 1;\n    while(N > 0) {\n        if(*it1 > *it2) {\n            result.push_back(*it1 * *it2);\n            it2--;\n        } else {\n            result.push_back(*it1 * *it2);\n            it1--;\n        }\n        N--;\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpkban0w8g: /tmp/tmpkban0w8g.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            long prod = nums1[i] * nums2[j];\n            if (pq.size() < N) {\n                pq.push(prod);\n            } else {\n                if (prod > pq.top()) {\n                    pq.pop();\n                    pq.push(prod);\n                }\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpgctz6q7e: /tmp/tmpgctz6q7e.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::unordered_set<int> visited;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert(0 * nums2.size() + 0);\n    for (int i = 0; i < N; i++) {\n        auto idx_pair = pq.top().second;\n        pq.pop();\n        result.push_back(nums1[idx_pair.first] * nums2[idx_pair.second]);\n        if (idx_pair.first + 1 < nums1.size() && visited.find((idx_pair.first + 1) * nums2.size() + idx_pair.second) == visited.end()) {\n            pq.push({nums1[idx_pair.first + 1] * nums2[idx_pair.second], {idx_pair.first + 1, idx_pair.second}});\n            visited.insert((idx_pair.first + 1) * nums2.size() + idx_pair.second);\n        }\n        if (idx_pair.second + 1 < nums2.size() && visited.find(idx_pair.first * nums2.size() + idx_pair.second + 1) == visited.end()) {\n            pq.push({nums1[idx_pair.first] * nums2[idx_pair.second + 1], {idx_pair.first, idx_pair.second + 1}});\n            visited.insert(idx_pair.first * nums2.size() + idx_pair.second + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n            if (pq.size() > N) {\n                pq.pop();\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpvwqfgwng: /tmp/tmpvwqfgwng.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i=0;i<nums1.size();i++){\n        for(int j=0;j<nums2.size();j++){\n            pq.push(nums1[i]*nums2[j]);\n        }\n    }\n    while(N--){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto num1 : nums1) {\n        for (auto num2 : nums2) {\n            long product = num1 * num2;\n            if (min_heap.size() < N) {\n                min_heap.push(product);\n            } else if (min_heap.top() < product) {\n                min_heap.pop();\n                min_heap.push(product);\n            }\n        }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpat1lkn3m: /tmp/tmpat1lkn3m.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto n1 : nums1) {\n        for (auto n2 : nums2) {\n            pq.push(n1 * n2);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> product;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            product.push_back(nums1[i] * nums2[j]);\n        }\n    }\n    std::sort(product.begin(), product.end());\n    for (int i = 0; i < N; i++) {\n        result.push_back(product[product.size() - i - 1]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::unordered_set<int> s;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push({nums1[i] * nums2[j], {i, j}});\n        }\n    }\n    while (N--) {\n        auto cur = pq.top();\n        pq.pop();\n        res.push_back(cur.first);\n        if (s.find(cur.second.first) == s.end()) {\n            for (int i = 0; i < nums2.size(); i++) {\n                pq.push({nums1[cur.second.first] * nums2[i], {cur.second.first, i}});\n            }\n            s.insert(cur.second.first);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmp9i25au4d: /tmp/tmp9i25au4d.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> visited;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert({0, 0});\n    while(N-- > 0 && !pq.empty()) {\n        auto [product, indices] = pq.top();\n        pq.pop();\n        result.push_back(product);\n        int i = indices.first, j = indices.second;\n        if(i + 1 < nums1.size() && visited.find({i + 1, j}) == visited.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            visited.insert({i + 1, j});\n        }\n        if(j + 1 < nums2.size() && visited.find({i, j + 1}) == visited.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            visited.insert({i, j + 1});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    while (N > 0) {\n        result.push_back(pq.top());\n        pq.pop();\n        N--;\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i*j);\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n            if (pq.size() > N) {\n                pq.pop();\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp5_9hu492: /tmp/tmp5_9hu492.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    std::vector<long>::iterator it1 = nums1.begin();\n    std::vector<long>::iterator it2 = nums2.begin();\n    while(N--) {\n        if(*it1 * *nums2.begin() > *it2 * *nums1.begin()) {\n            result.push_back(*it1 * *nums2.begin());\n            it1++;\n        } else {\n            result.push_back(*it2 * *nums1.begin());\n            it2++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpegjbouxa: /tmp/tmpegjbouxa.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    std::vector<long>::iterator it1 = nums1.begin();\n    std::vector<long>::iterator it2 = nums2.begin();\n    while(N--) {\n        if(*it1 * *nums2.begin() > *it2 * *nums1.begin()) {\n            result.push_back(*it1 * *nums2.begin());\n            it1++;\n        } else {\n            result.push_back(*it2 * *nums1.begin());\n            it2++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpegjbouxa: /tmp/tmpegjbouxa.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> visited;\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert({0, 0});\n    while (N-- > 0 && !pq.empty()) {\n        auto top = pq.top();\n        pq.pop();\n        result.push_back(top.first);\n        int i = top.second.first, j = top.second.second;\n        if (i + 1 < nums1.size() && visited.find({i + 1, j}) == visited.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            visited.insert({i + 1, j});\n        }\n        if (j + 1 < nums2.size() && visited.find({i, j + 1}) == visited.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            visited.insert({i, j + 1});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpfjv08pl4: /tmp/tmpfjv08pl4.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto num1 : nums1) {\n        for (auto num2 : nums2) {\n            long product = num1 * num2;\n            if (pq.size() < N) {\n                pq.push(product);\n            } else {\n                if (product > pq.top()) {\n                    pq.pop();\n                    pq.push(product);\n                }\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpvuqozmc4: /tmp/tmpvuqozmc4.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    for(int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i:nums1) {\n        for(auto j:nums2) {\n            pq.push(i*j);\n        }\n    }\n    while(N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> s;\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    s.insert({0, 0});\n    while(N--) {\n        auto p = pq.top();\n        pq.pop();\n        result.push_back(p.first);\n        int i = p.second.first, j = p.second.second;\n        if(s.find({i, j + 1}) == s.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            s.insert({i, j + 1});\n        }\n        if(s.find({i + 1, j}) == s.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            s.insert({i + 1, j});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpdd9nmq1b: /tmp/tmpdd9nmq1b.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<std::pair<long, long>> products;\n    for (auto num1 : nums1) {\n        for (auto num2 : nums2) {\n            products.push_back(std::make_pair(num1, num2));\n        }\n    }\n    std::sort(products.begin(), products.end(), [](std::pair<long, long> a, std::pair<long, long> b) {\n        return a.first * a.second > b.first * b.second;\n    });\n    for (int i = 0; i < N; i++) {\n        result.push_back(products[i].first * products[i].second);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> visited;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push(std::make_pair(nums1[0] * nums2[0], std::make_pair(0, 0)));\n    visited.insert(std::make_pair(0, 0));\n    while (N--) {\n        auto p = pq.top();\n        pq.pop();\n        result.push_back(p.first);\n        int i = p.second.first, j = p.second.second;\n        if (i + 1 < nums1.size() && visited.find(std::make_pair(i + 1, j)) == visited.end()) {\n            pq.push(std::make_pair(nums1[i + 1] * nums2[j], std::make_pair(i + 1, j)));\n            visited.insert(std::make_pair(i + 1, j));\n        }\n        if (j + 1 < nums2.size() && visited.find(std::make_pair(i, j + 1)) == visited.end()) {\n            pq.push(std::make_pair(nums1[i] * nums2[j + 1], std::make_pair(i, j + 1)));\n            visited.insert(std::make_pair(i, j + 1));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (auto num1 : nums1) {\n        for (auto num2 : nums2) {\n            products.push_back(num1 * num2);\n        }\n    }\n    std::sort(products.begin(), products.end());\n    for (int i = 0; i < N; i++) {\n        result.push_back(products[products.size() - i - 1]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    std::set<std::pair<int, int>> visited;\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert({0, 0});\n    while (N-- > 0 && !pq.empty()) {\n        auto curr = pq.top();\n        pq.pop();\n        result.push_back(curr.first);\n        int i = curr.second.first, j = curr.second.second;\n        if (i + 1 < nums1.size() && visited.find({i + 1, j}) == visited.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            visited.insert({i + 1, j});\n        }\n        if (j + 1 < nums2.size() && visited.find({i, j + 1}) == visited.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            visited.insert({i, j + 1});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto num1 : nums1) {\n        for (auto num2 : nums2) {\n            pq.push(num1 * num2);\n            if (pq.size() > N) {\n                pq.pop();\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpofcf0ptq: /tmp/tmpofcf0ptq.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long>::iterator it1, it2;\n    std::multimap<long, std::pair<long, long>> m;\n    for(it1 = nums1.begin(); it1 != nums1.end(); it1++) {\n        for(it2 = nums2.begin(); it2 != nums2.end(); it2++) {\n            m.insert(std::pair<long, std::pair<long, long>>(*it1 * *it2, std::make_pair(*it1, *it2)));\n        }\n    }\n    std::multimap<long, std::pair<long, long>>::reverse_iterator rit;\n    for(rit = m.rbegin(); rit != m.rend() && N > 0; rit++, N--) {\n        result.push_back(rit->first);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    while(N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push(std::make_pair(nums1[0] * nums2[0], std::make_pair(0, 0)));\n    std::set<std::pair<int, int>> visited;\n    visited.insert(std::make_pair(0, 0));\n    for (int i = 0; i < N; i++) {\n        auto a = pq.top();\n        pq.pop();\n        result.push_back(a.first);\n        int x = a.second.first, y = a.second.second;\n        if (visited.find(std::make_pair(x + 1, y)) == visited.end()) {\n            pq.push(std::make_pair(nums1[x + 1] * nums2[y], std::make_pair(x + 1, y)));\n            visited.insert(std::make_pair(x + 1, y));\n        }\n        if (visited.find(std::make_pair(x, y + 1)) == visited.end()) {\n            pq.push(std::make_pair(nums1[x] * nums2[y + 1], std::make_pair(x, y + 1)));\n            visited.insert(std::make_pair(x, y + 1));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> visited;\n    pq.push({nums1[nums1.size() - 1] * nums2[nums2.size() - 1], {nums1.size() - 1, nums2.size() - 1}});\n    visited.insert({nums1.size() - 1, nums2.size() - 1});\n    for (int i = 0; i < N; i++) {\n        auto top = pq.top();\n        pq.pop();\n        result.push_back(top.first);\n        int r = top.second.first, c = top.second.second;\n        if (r > 0 && visited.find({r - 1, c}) == visited.end()) {\n            pq.push({nums1[r - 1] * nums2[c], {r - 1, c}});\n            visited.insert({r - 1, c});\n        }\n        if (c > 0 && visited.find({r, c - 1}) == visited.end()) {\n            pq.push({nums1[r] * nums2[c - 1], {r, c - 1}});\n            visited.insert({r, c - 1});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n            if (pq.size() > N) {\n                pq.pop();\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpyz7s9m_n: /tmp/tmpyz7s9m_n.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            products.push_back(nums1[i] * nums2[j]);\n        }\n    }\n    std::sort(products.begin(), products.end(), std::greater<long>());\n    for (int i = 0; i < N; i++) {\n        result.push_back(products[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n  std::vector<long> result;\n  std::priority_queue<std::pair<long, std::pair<int, int>>> max_heap;\n  std::set<std::pair<int, int>> visited;\n  std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n  std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n  max_heap.emplace(nums1[0] * nums2[0], std::make_pair(0, 0));\n  visited.emplace(0, 0);\n  while (N-- > 0 && !max_heap.empty()) {\n    long product = max_heap.top().first;\n    int i = max_heap.top().second.first, j = max_heap.top().second.second;\n    max_heap.pop();\n    result.emplace_back(product);\n    if (visited.find(std::make_pair(i + 1, j)) == visited.end()) {\n      max_heap.emplace(nums1[i + 1] * nums2[j], std::make_pair(i + 1, j));\n      visited.emplace(i + 1, j);\n    }\n    if (visited.find(std::make_pair(i, j + 1)) == visited.end()) {\n      max_heap.emplace(nums1[i] * nums2[j + 1], std::make_pair(i, j + 1));\n      visited.emplace(i, j + 1);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    std::vector<long>::iterator it1 = nums1.begin();\n    std::vector<long>::iterator it2 = nums2.begin();\n    while (N-- > 0) {\n        if (*it1 > *it2) {\n            result.push_back(*it1);\n            it1++;\n        } else {\n            result.push_back(*it2);\n            it2++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpmfl04sqw: /tmp/tmpmfl04sqw.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    std::vector<long>::iterator it1 = nums1.begin();\n    std::vector<long>::iterator it2 = nums2.begin();\n    for(long i = 0; i < N; i++) {\n        result.push_back(*it1 * *it2);\n        it1++;\n        it2++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpb6xe378j: /tmp/tmpb6xe378j.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<long, long>>> pq;\n    std::unordered_set<long> visited;\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert(0);\n    while (N > 0) {\n        auto p = pq.top();\n        pq.pop();\n        result.push_back(p.first);\n        long i = p.second.first;\n        long j = p.second.second;\n        if (i + 1 < nums1.size() && visited.find(i + 1) == visited.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            visited.insert(i + 1);\n        }\n        if (j + 1 < nums2.size() && visited.find(j + 1) == visited.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            visited.insert(j + 1);\n        }\n        N--;\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpl273ix7e: /tmp/tmpl273ix7e.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> max_heap;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            long product = nums1[i] * nums2[j];\n            if(max_heap.size() < N) {\n                max_heap.push(product);\n            } else {\n                if(product > max_heap.top()) {\n                    max_heap.pop();\n                    max_heap.push(product);\n                }\n            }\n        }\n    }\n    while(!max_heap.empty()) {\n        result.push_back(max_heap.top());\n        max_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpeioejhn1: /tmp/tmpeioejhn1.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto n1 : nums1) {\n        for (auto n2 : nums2) {\n            pq.push(n1 * n2);\n            if (pq.size() > N) {\n                pq.pop();\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpxe3n91ta: /tmp/tmpxe3n91ta.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push(std::make_pair(nums1[0] * nums2[0], std::make_pair(0, 0)));\n    std::set<std::pair<int, int>> visited;\n    visited.insert(std::make_pair(0, 0));\n    while (N-- > 0) {\n        auto a = pq.top();\n        pq.pop();\n        result.push_back(a.first);\n        int i = a.second.first, j = a.second.second;\n        if (i + 1 < nums1.size() && visited.find(std::make_pair(i + 1, j)) == visited.end()) {\n            pq.push(std::make_pair(nums1[i + 1] * nums2[j], std::make_pair(i + 1, j)));\n            visited.insert(std::make_pair(i + 1, j));\n        }\n        if (j + 1 < nums2.size() && visited.find(std::make_pair(i, j + 1)) == visited.end()) {\n            pq.push(std::make_pair(nums1[i] * nums2[j + 1], std::make_pair(i, j + 1)));\n            visited.insert(std::make_pair(i, j + 1));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> nums1_sorted = nums1;\n    std::vector<long> nums2_sorted = nums2;\n    std::sort(nums1_sorted.begin(), nums1_sorted.end());\n    std::sort(nums2_sorted.begin(), nums2_sorted.end());\n    std::vector<long>::iterator it1 = nums1_sorted.end() - 1;\n    std::vector<long>::iterator it2 = nums2_sorted.end() - 1;\n    for (long i = 0; i < N; i++) {\n        long product = (*it1) * (*it2);\n        result.push_back(product);\n        if (it1 != nums1_sorted.begin() && it2 != nums2_sorted.begin()) {\n            if (*(it1 - 1) * (*it2) > *it1 * (*(it2 - 1))) {\n                it1--;\n            } else {\n                it2--;\n            }\n        } else if (it1 == nums1_sorted.begin()) {\n            it2--;\n        } else if (it2 == nums2_sorted.begin()) {\n            it1--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "tmp2rvsvmid: /tmp/tmp2rvsvmid.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    while(N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            products.push_back(nums1[i] * nums2[j]);\n        }\n    }\n    std::sort(products.begin(), products.end(), std::greater<long>());\n    for(int i = 0; i < N; i++) {\n        result.push_back(products[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long>::iterator it1, it2;\n    std::vector<long>::iterator it1_end = nums1.end();\n    std::vector<long>::iterator it2_end = nums2.end();\n    std::vector<long>::iterator it1_begin = nums1.begin();\n    std::vector<long>::iterator it2_begin = nums2.begin();\n    std::vector<long>::iterator it1_max = nums1.begin();\n    std::vector<long>::iterator it2_max = nums2.begin();\n    long max_product = 0;\n    for (long i = 0; i < N; i++) {\n        max_product = 0;\n        for (it1 = it1_begin; it1 != it1_end; it1++) {\n            for (it2 = it2_begin; it2 != it2_end; it2++) {\n                if (*it1 * *it2 > max_product) {\n                    max_product = *it1 * *it2;\n                    it1_max = it1;\n                    it2_max = it2;\n                }\n            }\n        }\n        result.push_back(max_product);\n        it1_begin = it1_max + 1;\n        it2_begin = it2_max + 1;\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "tmp1mqirtsl: /tmp/tmp1mqirtsl.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i: nums1) {\n        for(auto j: nums2) {\n            pq.push(i*j);\n        }\n    }\n    for(long i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            products.push_back(nums1[i] * nums2[j]);\n        }\n    }\n    std::sort(products.begin(), products.end());\n    for (int i = 0; i < N; i++) {\n        result.push_back(products[products.size() - 1 - i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    std::vector<long>::iterator it1 = nums1.end() - 1;\n    std::vector<long>::iterator it2 = nums2.end() - 1;\n    while (N--) {\n        if (*it1 > *it2) {\n            result.push_back(*it1 * *it2);\n            it2--;\n        } else {\n            result.push_back(*it1 * *it2);\n            it1--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "tmp6bf79nzt: /tmp/tmp6bf79nzt.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> visited;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert({0, 0});\n    while (N--) {\n        auto [product, pair] = pq.top();\n        pq.pop();\n        result.push_back(product);\n        int i = pair.first, j = pair.second;\n        if (i + 1 < nums1.size() && visited.find({i + 1, j}) == visited.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            visited.insert({i + 1, j});\n        }\n        if (j + 1 < nums2.size() && visited.find({i, j + 1}) == visited.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            visited.insert({i, j + 1});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    std::set<std::pair<int, int>> visited;\n    visited.insert({0, 0});\n    while (N--) {\n        auto [product, indices] = pq.top();\n        pq.pop();\n        result.push_back(product);\n        int i = indices.first, j = indices.second;\n        if (i + 1 < nums1.size() && visited.find({i + 1, j}) == visited.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            visited.insert({i + 1, j});\n        }\n        if (j + 1 < nums2.size() && visited.find({i, j + 1}) == visited.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            visited.insert({i, j + 1});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for(int i=0;i<nums1.size();i++) {\n        for(int j=0;j<nums2.size();j++) {\n            long prod = nums1[i]*nums2[j];\n            if(pq.size()<N) {\n                pq.push(prod);\n            } else {\n                if(pq.top()<prod) {\n                    pq.pop();\n                    pq.push(prod);\n                }\n            }\n        }\n    }\n    while(!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "tmpa3f1q7u6: /tmp/tmpa3f1q7u6.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            long product = i * j;\n            if (min_heap.size() < N) {\n                min_heap.push(product);\n            } else if (product > min_heap.top()) {\n                min_heap.pop();\n                min_heap.push(product);\n            }\n        }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "tmpybxivsya: /tmp/tmpybxivsya.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    while(N--) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> ans;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n            if (pq.size() > N) {\n                pq.pop();\n            }\n        }\n    }\n    while (!pq.empty()) {\n        ans.push_back(pq.top());\n        pq.pop();\n    }\n    return ans;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "tmp4uck40df: /tmp/tmp4uck40df.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    std::vector<long>::iterator it1 = nums1.begin();\n    std::vector<long>::iterator it2 = nums2.begin();\n    while(N--) {\n        if(*it1 > *it2) {\n            result.push_back(*it1);\n            it1++;\n        } else {\n            result.push_back(*it2);\n            it2++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "tmprhupy4t7: /tmp/tmprhupy4t7.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    for (long i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            products.push_back(nums1[i] * nums2[j]);\n        }\n    }\n    std::sort(products.begin(), products.end());\n    for (int i = products.size() - 1; i >= products.size() - N; i--) {\n        result.push_back(products[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    for (long i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n            if (pq.size() > N) {\n                pq.pop();\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp5_9hu492: /tmp/tmp5_9hu492.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::unordered_set<int> visited;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push(std::make_pair(nums1[0] * nums2[0], std::make_pair(0, 0)));\n    visited.insert(0 * nums2.size() + 0);\n    for (int i = 0; i < N; i++) {\n        auto p = pq.top();\n        pq.pop();\n        result.push_back(p.first);\n        int x = p.second.first, y = p.second.second;\n        if (x + 1 < nums1.size() && visited.find((x + 1) * nums2.size() + y) == visited.end()) {\n            pq.push(std::make_pair(nums1[x + 1] * nums2[y], std::make_pair(x + 1, y)));\n            visited.insert((x + 1) * nums2.size() + y);\n        }\n        if (y + 1 < nums2.size() && visited.find(x * nums2.size() + y + 1) == visited.end()) {\n            pq.push(std::make_pair(nums1[x] * nums2[y + 1], std::make_pair(x, y + 1)));\n            visited.insert(x * nums2.size() + y + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> s;\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    s.insert({0, 0});\n    while (N--) {\n        auto p = pq.top();\n        pq.pop();\n        res.push_back(p.first);\n        int i = p.second.first, j = p.second.second;\n        if (s.find({i, j + 1}) == s.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            s.insert({i, j + 1});\n        }\n        if (s.find({i + 1, j}) == s.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            s.insert({i + 1, j});\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "tmpaxdtbm5q: /tmp/tmpaxdtbm5q.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    std::unordered_set<long> s;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            long product = nums1[i] * nums2[j];\n            if (pq.size() < N) {\n                pq.push(product);\n                s.insert(product);\n            } else {\n                if (product > pq.top()) {\n                    if (s.find(product) == s.end()) {\n                        pq.pop();\n                        pq.push(product);\n                        s.insert(product);\n                    }\n                }\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "tmpx6kfmeqe: /tmp/tmpx6kfmeqe.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<long, long>>> pq;\n    std::unordered_set<long> visited;\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert(0);\n    while (N--) {\n        auto p = pq.top();\n        pq.pop();\n        result.push_back(p.first);\n        long i = p.second.first, j = p.second.second;\n        if (i + 1 < nums1.size() && visited.find(i + 1) == visited.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            visited.insert(i + 1);\n        }\n        if (j + 1 < nums2.size() && visited.find(j + 1) == visited.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            visited.insert(j + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "tmpegd6yjxd: /tmp/tmpegd6yjxd.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> s;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    pq.push({nums1[nums1.size() - 1] * nums2[nums2.size() - 1], {nums1.size() - 1, nums2.size() - 1}});\n    s.insert({nums1.size() - 1, nums2.size() - 1});\n    while (N--) {\n        auto p = pq.top();\n        pq.pop();\n        result.push_back(p.first);\n        int i = p.second.first;\n        int j = p.second.second;\n        if (i > 0 && s.find({i - 1, j}) == s.end()) {\n            pq.push({nums1[i - 1] * nums2[j], {i - 1, j}});\n            s.insert({i - 1, j});\n        }\n        if (j > 0 && s.find({i, j - 1}) == s.end()) {\n            pq.push({nums1[i] * nums2[j - 1], {i, j - 1}});\n            s.insert({i, j - 1});\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n  std::vector<long> result;\n  std::multiset<long> products;\n  for (auto num1 : nums1) {\n    for (auto num2 : nums2) {\n      products.insert(num1 * num2);\n    }\n  }\n  for (long i = 0; i < N; i++) {\n    result.push_back(*products.rbegin());\n    products.erase(--products.end());\n  }\n  return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::unordered_set<int> visited;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    pq.push({nums1[nums1.size() - 1] * nums2[nums2.size() - 1], {nums1.size() - 1, nums2.size() - 1}});\n    visited.insert(nums1.size() - 1 * nums2.size() + nums2.size() - 1);\n    for (int i = 0; i < N; i++) {\n        auto p = pq.top();\n        pq.pop();\n        result.push_back(p.first);\n        int x = p.second.first, y = p.second.second;\n        if (x > 0 && visited.find(x - 1 * y) == visited.end()) {\n            pq.push({nums1[x - 1] * nums2[y], {x - 1, y}});\n            visited.insert(x - 1 * y);\n        }\n        if (y > 0 && visited.find(x * y - 1) == visited.end()) {\n            pq.push({nums1[x] * nums2[y - 1], {x, y - 1}});\n            visited.insert(x * y - 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i : nums1) {\n        for(auto j : nums2) {\n            pq.push(i*j);\n        }\n    }\n    while(N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            long product = nums1[i] * nums2[j];\n            if(pq.size() < N) {\n                pq.push(product);\n            } else {\n                if(product > pq.top()) {\n                    pq.pop();\n                    pq.push(product);\n                }\n            }\n        }\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "tmpriepy_a5: /tmp/tmpriepy_a5.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::unordered_set<int> visited;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert(0 * nums2.size() + 0);\n    for (int i = 0; i < N; i++) {\n        auto idx_pair = pq.top().second; pq.pop();\n        res.push_back(nums1[idx_pair.first] * nums2[idx_pair.second]);\n        if (idx_pair.first + 1 < nums1.size() && visited.find((idx_pair.first + 1) * nums2.size() + idx_pair.second) == visited.end()) {\n            pq.push({nums1[idx_pair.first + 1] * nums2[idx_pair.second], {idx_pair.first + 1, idx_pair.second}});\n            visited.insert((idx_pair.first + 1) * nums2.size() + idx_pair.second);\n        }\n        if (idx_pair.second + 1 < nums2.size() && visited.find(idx_pair.first * nums2.size() + idx_pair.second + 1) == visited.end()) {\n            pq.push({nums1[idx_pair.first] * nums2[idx_pair.second + 1], {idx_pair.first, idx_pair.second + 1}});\n            visited.insert(idx_pair.first * nums2.size() + idx_pair.second + 1);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    std::set<long> s;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            s.insert(nums1[i] * nums2[j]);\n        }\n    }\n    std::set<long>::iterator it = s.end();\n    for (int i = 0; i < N; i++) {\n        it--;\n        res.push_back(*it);\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::set<std::pair<int, int>> visited;\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert({0, 0});\n    while (N-- > 0 && !pq.empty()) {\n        auto curr = pq.top();\n        pq.pop();\n        res.push_back(curr.first);\n        int i = curr.second.first, j = curr.second.second;\n        if (i + 1 < nums1.size() && visited.find({i + 1, j}) == visited.end()) {\n            pq.push({nums1[i + 1] * nums2[j], {i + 1, j}});\n            visited.insert({i + 1, j});\n        }\n        if (j + 1 < nums2.size() && visited.find({i, j + 1}) == visited.end()) {\n            pq.push({nums1[i] * nums2[j + 1], {i, j + 1}});\n            visited.insert({i, j + 1});\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "tmpadrtpf2p: /tmp/tmpadrtpf2p.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i : nums1) {\n        for(auto j : nums2) {\n            pq.push(i*j);\n        }\n    }\n    while(N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i : nums1) {\n        for(auto j : nums2) {\n            pq.push(i*j);\n        }\n    }\n    while(N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    std::vector<long>::iterator it1 = nums1.begin();\n    std::vector<long>::iterator it2 = nums2.begin();\n    std::vector<long>::iterator it1_end = nums1.end();\n    std::vector<long>::iterator it2_end = nums2.end();\n    std::vector<long>::iterator it1_start = nums1.begin();\n    std::vector<long>::iterator it2_start = nums2.begin();\n    std::vector<long>::iterator it1_max = nums1.begin();\n    std::vector<long>::iterator it2_max = nums2.begin();\n    long max_product = 0;\n    long product = 0;\n    while (N > 0) {\n        max_product = 0;\n        it1 = it1_start;\n        it2 = it2_start;\n        while (it1 != it1_end && it2 != it2_end) {\n            product = (*it1) * (*it2);\n            if (product > max_product) {\n                max_product = product;\n                it1_max = it1;\n                it2_max = it2;\n            }\n            if (*it1 < *it2) {\n                it1++;\n            } else {\n                it2++;\n            }\n        }\n        result.push_back(max_product);\n        if (*it1_max < *it2_max) {\n            it1_start = it1_max + 1;\n        } else {\n            it2_start = it2_max + 1;\n        }\n        N--;\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "tmpvo667l1a: /tmp/tmpvo667l1a.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n  std::vector<long> result;\n  std::vector<long> products;\n  for (int i = 0; i < nums1.size(); i++) {\n    for (int j = 0; j < nums2.size(); j++) {\n      products.push_back(nums1[i] * nums2[j]);\n    }\n  }\n  std::sort(products.begin(), products.end());\n  for (int i = 0; i < N; i++) {\n    result.push_back(products[products.size() - 1 - i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            products.push_back(nums1[i] * nums2[j]);\n        }\n    }\n    std::sort(products.begin(), products.end());\n    for (int i = products.size() - 1; i >= products.size() - N; i--) {\n        result.push_back(products[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n\tstd::vector<long> result;\n\tstd::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n\tstd::set<std::pair<int, int>> s;\n\tpq.push(std::make_pair(nums1[0] * nums2[0], std::make_pair(0, 0)));\n\ts.insert(std::make_pair(0, 0));\n\tfor (long i = 0; i < N; i++) {\n\t\tauto p = pq.top();\n\t\tpq.pop();\n\t\tresult.push_back(p.first);\n\t\tint x = p.second.first, y = p.second.second;\n\t\tif (s.find(std::make_pair(x + 1, y)) == s.end()) {\n\t\t\tpq.push(std::make_pair(nums1[x + 1] * nums2[y], std::make_pair(x + 1, y)));\n\t\t\ts.insert(std::make_pair(x + 1, y));\n\t\t}\n\t\tif (s.find(std::make_pair(x, y + 1)) == s.end()) {\n\t\t\tpq.push(std::make_pair(nums1[x] * nums2[y + 1], std::make_pair(x, y + 1)));\n\t\t\ts.insert(std::make_pair(x, y + 1));\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "tmputcrjw5h: /tmp/tmputcrjw5h.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::sort(nums1.begin(), nums1.end());\n    std::sort(nums2.begin(), nums2.end());\n    std::set<std::pair<long, long>> set;\n    long i = 0, j = 0;\n    while (i < nums1.size() && j < nums2.size()) {\n        if (nums1[i] < nums2[j]) {\n            set.insert(std::make_pair(nums1[i], nums2[j]));\n            i++;\n        } else {\n            set.insert(std::make_pair(nums1[i], nums2[j]));\n            j++;\n        }\n    }\n    while (i < nums1.size()) {\n        set.insert(std::make_pair(nums1[i], nums2[nums2.size() - 1]));\n        i++;\n    }\n    while (j < nums2.size()) {\n        set.insert(std::make_pair(nums1[nums1.size() - 1], nums2[j]));\n        j++;\n    }\n    std::set<std::pair<long, long>>::iterator it = set.end();\n    for (long i = 0; i < N; i++) {\n        it--;\n        result.push_back((*it).first * (*it).second);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "tmpgmoz7c9y: /tmp/tmpgmoz7c9y.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for(long i = 0; i < nums1.size(); i++) {\n        for(long j = 0; j < nums2.size(); j++) {\n            products.push_back(nums1[i] * nums2[j]);\n        }\n    }\n    std::sort(products.begin(), products.end(), std::greater<long>());\n    for(long i = 0; i < N; i++) {\n        result.push_back(products[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (long i = 0; i < nums1.size(); i++) {\n        for (long j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    for (long i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for(auto i : nums1) {\n        for(auto j : nums2) {\n            pq.push(i*j);\n        }\n    }\n    while(N--) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::multimap<long, std::pair<long, long>> products;\n    for(auto num1 : nums1) {\n        for(auto num2 : nums2) {\n            products.insert(std::make_pair(num1 * num2, std::make_pair(num1, num2)));\n        }\n    }\n    auto it = products.rbegin();\n    while(N--) {\n        result.push_back(it->first);\n        it++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::multiset<long> products;\n    for (auto n1 : nums1) {\n        for (auto n2 : nums2) {\n            products.insert(n1 * n2);\n        }\n    }\n    for (auto it = products.rbegin(); it != products.rend(); it++) {\n        result.push_back(*it);\n        if (result.size() == N) {\n            break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::multimap<long, std::pair<long, long> > mm;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            mm.insert(std::make_pair(nums1[i] * nums2[j], std::make_pair(nums1[i], nums2[j])));\n        }\n    }\n    std::multimap<long, std::pair<long, long> >::reverse_iterator it = mm.rbegin();\n    for (int i = 0; i < N; i++) {\n        res.push_back(it->first);\n        it++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n  std::vector<long> result;\n  std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n  std::sort(nums1.begin(), nums1.end());\n  std::sort(nums2.begin(), nums2.end());\n  pq.push(std::make_pair(nums1[nums1.size() - 1] * nums2[nums2.size() - 1], std::make_pair(nums1.size() - 1, nums2.size() - 1)));\n  std::set<std::pair<int, int>> visited;\n  visited.insert(std::make_pair(nums1.size() - 1, nums2.size() - 1));\n  while(N--) {\n    auto top = pq.top();\n    pq.pop();\n    result.push_back(top.first);\n    int i = top.second.first;\n    int j = top.second.second;\n    if(i > 0 && visited.find(std::make_pair(i - 1, j)) == visited.end()) {\n      pq.push(std::make_pair(nums1[i - 1] * nums2[j], std::make_pair(i - 1, j)));\n      visited.insert(std::make_pair(i - 1, j));\n    }\n    if(j > 0 && visited.find(std::make_pair(i, j - 1)) == visited.end()) {\n      pq.push(std::make_pair(nums1[i] * nums2[j - 1], std::make_pair(i, j - 1)));\n      visited.insert(std::make_pair(i, j - 1));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            long product = nums1[i] * nums2[j];\n            if (pq.size() < N) {\n                pq.push(product);\n            } else {\n                if (pq.top() < product) {\n                    pq.pop();\n                    pq.push(product);\n                }\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp26d5f5aa: /tmp/tmp26d5f5aa.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto num1 : nums1) {\n        for (auto num2 : nums2) {\n            pq.push(num1 * num2);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    while(N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::unordered_set<int> s;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push({nums1[i] * nums2[j], {i, j}});\n        }\n    }\n    while (N--) {\n        auto p = pq.top();\n        pq.pop();\n        result.push_back(p.first);\n        if (s.find(p.second.first) == s.end()) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.push({nums1[p.second.first] * nums2[j], {p.second.first, j}});\n            }\n            s.insert(p.second.first);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "tmpzidvajwl: /tmp/tmpzidvajwl.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    for(int i=0;i<nums1.size();i++)\n    {\n        for(int j=0;j<nums2.size();j++)\n        {\n            temp.push_back(nums1[i]*nums2[j]);\n        }\n    }\n    std::sort(temp.begin(),temp.end());\n    for(int i=0;i<N;i++)\n    {\n        result.push_back(temp[temp.size()-1-i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i : nums1) {\n        for(auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    for(long i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (long i = 0; i < nums1.size(); i++) {\n        for (long j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    for (long i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : nums1) {\n        for (auto j : nums2) {\n            pq.push(i * j);\n        }\n    }\n    while (N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n  std::vector<long> result;\n  std::sort(nums1.begin(), nums1.end());\n  std::sort(nums2.begin(), nums2.end());\n  std::vector<long>::iterator it1 = nums1.begin();\n  std::vector<long>::iterator it2 = nums2.begin();\n  while(N--) {\n    if(*it1 > *it2) {\n      result.push_back(*it1);\n      it1++;\n    }\n    else {\n      result.push_back(*it2);\n      it2++;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "tmp14bhmabw: /tmp/tmp14bhmabw.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::unordered_set<int> visited;\n    std::sort(nums1.begin(), nums1.end(), std::greater<long>());\n    std::sort(nums2.begin(), nums2.end(), std::greater<long>());\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    visited.insert(0 * nums2.size() + 0);\n    for (int i = 0; i < N; i++) {\n        auto idx_pair = pq.top().second;\n        pq.pop();\n        res.push_back(nums1[idx_pair.first] * nums2[idx_pair.second]);\n        if (idx_pair.first + 1 < nums1.size() && visited.find((idx_pair.first + 1) * nums2.size() + idx_pair.second) == visited.end()) {\n            pq.push({nums1[idx_pair.first + 1] * nums2[idx_pair.second], {idx_pair.first + 1, idx_pair.second}});\n            visited.insert((idx_pair.first + 1) * nums2.size() + idx_pair.second);\n        }\n        if (idx_pair.second + 1 < nums2.size() && visited.find(idx_pair.first * nums2.size() + idx_pair.second + 1) == visited.end()) {\n            pq.push({nums1[idx_pair.first] * nums2[idx_pair.second + 1], {idx_pair.first, idx_pair.second + 1}});\n            visited.insert(idx_pair.first * nums2.size() + idx_pair.second + 1);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> ans;\n    std::priority_queue<std::pair<long, std::pair<int, int>>> pq;\n    std::unordered_set<int> s;\n    pq.push({nums1[0] * nums2[0], {0, 0}});\n    s.insert(0 * nums2.size() + 0);\n    for (int i = 0; i < N; i++) {\n        auto a = pq.top();\n        pq.pop();\n        ans.push_back(a.first);\n        int x = a.second.first, y = a.second.second;\n        if (s.find((x + 1) * nums2.size() + y) == s.end()) {\n            pq.push({nums1[x + 1] * nums2[y], {x + 1, y}});\n            s.insert((x + 1) * nums2.size() + y);\n        }\n        if (s.find(x * nums2.size() + y + 1) == s.end()) {\n            pq.push({nums1[x] * nums2[y + 1], {x, y + 1}});\n            s.insert(x * nums2.size() + y + 1);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "tmpl3y8mf2g: /tmp/tmpl3y8mf2g.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i=0;i<nums1.size();i++) {\n        for(int j=0;j<nums2.size();j++) {\n            pq.push(nums1[i]*nums2[j]);\n        }\n    }\n    while(N--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for(int i = 0; i < nums1.size(); i++) {\n        for(int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    for(int i = 0; i < N; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::vector<long> products;\n    for (auto num1 : nums1) {\n        for (auto num2 : nums2) {\n            products.push_back(num1 * num2);\n        }\n    }\n    std::sort(products.begin(), products.end());\n    for (int i = products.size() - 1; i >= products.size() - N; i--) {\n        result.push_back(products[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1665509974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i=0;i<nums1.size();i++)\n    {\n        for(int j=0;j<nums2.size();j++)\n        {\n            pq.push(nums1[i]*nums2[j]);\n            if(pq.size()>N)\n            {\n                pq.pop();\n            }\n        }\n    }\n    while(!pq.empty())\n    {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "tmpc6qgp068: /tmp/tmpc6qgp068.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            pq.push(nums1[i] * nums2[j]);\n            if (pq.size() > N) {\n                pq.pop();\n            }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp5_9hu492: /tmp/tmp5_9hu492.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> result;\n    std::multimap<long, std::pair<long, long>> products;\n    for(auto i : nums1) {\n        for(auto j : nums2) {\n            products.insert(std::make_pair(i * j, std::make_pair(i, j)));\n        }\n    }\n    for(auto it = products.rbegin(); it != products.rend(); it++) {\n        result.push_back(it->first);\n        if(result.size() == N) {\n            break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}