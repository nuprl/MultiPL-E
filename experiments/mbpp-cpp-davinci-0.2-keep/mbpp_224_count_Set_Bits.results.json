{
  "name": "mbpp_224_count_Set_Bits",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Your code here\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n\tlong count = 0;\n\twhile (n) {\n\t\tcount += n & 1;\n\t\tn >>= 1;\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count=0;\n    while(n>0){\n        count+=n&1;\n        n=n>>1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count++;\n        n = n & (n-1);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count=0;\n    while(n!=0){\n        n=n&(n-1);\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Your Code Here\n    int count = 0;\n    while(n) {\n        n = n & (n-1);\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    long count=0;\n    while(n>0)\n    {\n        count+=n&1;\n        n=n>>1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n != 0) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    long count = 0;\n    while(n!=0){\n        count += n&1;\n        n = n>>1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        n = n & (n-1);\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count=0;\n    while(n>0){\n        count++;\n        n=n&(n-1);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count=0;\n    while(n>0){\n        count+=n&1;\n        n=n>>1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n!=0)\n    {\n        n = n&(n-1);\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n>0)\n    {\n        count += n&1;\n        n = n>>1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n!=0)\n    {\n        n = n & (n-1);\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count=0;\n    while(n>0)\n    {\n        if(n&1)\n        count++;\n        n=n>>1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n>0)\n    {\n        if(n&1)\n            count++;\n        n = n>>1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count++;\n        n = n & (n-1);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        n &= (n - 1);\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while (n > 0) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count=0;\n    while(n>0){\n        if(n%2==1){\n            count++;\n        }\n        n=n/2;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count=0;\n    while(n>0){\n        n=n&(n-1);\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        n = n & (n-1);\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count=0;\n    while(n>0)\n    {\n        count+=n&1;\n        n=n>>1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    long count=0;\n    while(n>0){\n        n=n&(n-1);\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Your code here\n    long count=0;\n    while(n>0){\n        count+=n&1;\n        n>>=1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    //write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Your code here\n    long count = 0;\n    while(n) {\n        n = n & (n-1);\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        n = n & (n - 1);\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        n = n & (n-1);\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    // Write your code here\n    int count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n    while(n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}