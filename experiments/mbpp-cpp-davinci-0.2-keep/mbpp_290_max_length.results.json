{
  "name": "mbpp_290_max_length",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list = list1[0];\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_list.size()) {\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmph2twzh8g.cpp:2:\n/tmp/tmph2twzh8g.cpp: In function \u2018int main()\u2019:\n/tmp/tmph2twzh8g.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpy49jd2mv.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpy49jd2mv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpy49jd2mv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpy49jd2mv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpy49jd2mv.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmpy49jd2mv.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpy49jd2mv.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp1qzns76c.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1qzns76c.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmp1qzns76c.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1qzns76c.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpe0f81u_q.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpe0f81u_q.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpe0f81u_q.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max) {\n            max = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpwjxpmpng.cpp:2:\n/tmp/tmpwjxpmpng.cpp: In function \u2018int main()\u2019:\n/tmp/tmpwjxpmpng.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (auto list : list1) {\n        if (list.size() > max_len) {\n            max_len = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk11my_b_.cpp:2:\n/tmp/tmpk11my_b_.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk11my_b_.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    if ((list1.size()) == (0)) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = list1[0];\n    for (auto list : list1) {\n        if ((list.size()) > (max_list.size())) {\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpj0_w5xy6.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpj0_w5xy6.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpj0_w5xy6.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj0_w5xy6.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpj0_w5xy6.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj0_w5xy6.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpj0_w5xy6.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpj0_w5xy6.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj0_w5xy6.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpj0_w5xy6.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ max_length_list;\n    if ((list1.size() == 0)) {\n        max_length_list.f0 = 0;\n        return max_length_list;\n    }\n    std::vector<long> max_length_list_1;\n    max_length_list_1 = list1[0];\n    for (auto i = 0; (i < list1.size()); i++) {\n        if ((list1[i].size() > max_length_list_1.size())) {\n            max_length_list_1 = list1[i];\n        }\n    }\n    max_length_list.f1 = max_length_list_1;\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpmlbuujtv.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpmlbuujtv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ max_length_list;\n      |                                 ^~~~~~~~~~~~~~~\n/tmp/tmpmlbuujtv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmlbuujtv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmlbuujtv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmlbuujtv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmlbuujtv.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return max_length_list;\n      |                ^~~~~~~~~~~~~~~\n/tmp/tmpmlbuujtv.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmlbuujtv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmlbuujtv.cpp:29:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp1qzns76c.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1qzns76c.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmp1qzns76c.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1qzns76c.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max = 0;\n    std::vector<long> max_list;\n    for(auto i : list1) {\n        if(i.size() > max) {\n            max = i.size();\n            max_list = i;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpwev1gibb.cpp:2:\n/tmp/tmpwev1gibb.cpp: In function \u2018int main()\u2019:\n/tmp/tmpwev1gibb.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpwyezygbr.cpp:2:\n/tmp/tmpwyezygbr.cpp: In function \u2018int main()\u2019:\n/tmp/tmpwyezygbr.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ max_length_ret_var;\n    std::vector<long> max_length_ret_var_1;\n    long max_length_ret_var_0;\n    std::vector<long> max_length_ret_var_1_1;\n    long max_length_ret_var_0_0;\n    max_length_ret_var_0_0 = 0;\n    max_length_ret_var_0 = max_length_ret_var_0_0;\n    max_length_ret_var = max_length_ret_var_0;\n    for (auto i : list1) {\n        std::vector<long> max_length_ret_var_1_2;\n        long max_length_ret_var_0_1;\n        max_length_ret_var_0_1 = 0;\n        max_length_ret_var_0 = max_length_ret_var_0_1;\n        max_length_ret_var = max_length_ret_var_0;\n        for (auto j : i) {\n            std::vector<long> max_length_ret_var_1_3;\n            long max_length_ret_var_0_2;\n            max_length_ret_var_0_2 = max_length_ret_var_0 + 1;\n            max_length_ret_var_0 = max_length_ret_var_0_2;\n            max_length_ret_var = max_length_ret_var_0;\n        }\n        if (max_length_ret_var == max_length_ret_var_0) {\n            max_length_ret_var_1_3 = max_length_ret_var_1;\n            max_length_ret_var_1_3.push_back(i);\n            max_length_ret_var_1 = max_length_ret_var_1_3;\n            max_length_ret_var = max_length_ret_var_1;\n        }\n    }\n    return max_length_ret_var;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpq69ii2dy.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpq69ii2dy.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ max_length_ret_var;\n      |                                 ^~~~~~~~~~~~~~~~~~\n/tmp/tmpq69ii2dy.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq69ii2dy.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpq69ii2dy.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq69ii2dy.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpq69ii2dy.cpp:23:26: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   23 |     max_length_ret_var = max_length_ret_var_0;\n      |                          ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq69ii2dy.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq69ii2dy.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpq69ii2dy.cpp:29:30: error: use of deleted fun",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp69es4eay.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp69es4eay.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp69es4eay.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max = list1[0];\n    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i].size() > max.size()) {\n            max = list1[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpkby8b0b6.cpp:2:\n/tmp/tmpkby8b0b6.cpp: In function \u2018int main()\u2019:\n/tmp/tmpkby8b0b6.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_len = 0;\n    for (auto list : list1) {\n        if (list.size() > max_len) {\n            max_list = list;\n            max_len = list.size();\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpacllhfok.cpp:2:\n/tmp/tmpacllhfok.cpp: In function \u2018int main()\u2019:\n/tmp/tmpacllhfok.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpy49jd2mv.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpy49jd2mv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpy49jd2mv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpy49jd2mv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpy49jd2mv.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmpy49jd2mv.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpy49jd2mv.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ ret;\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list2 : list1) {\n        if (list2.size() > max_length) {\n            max_length = list2.size();\n            max_length_list = list2;\n        }\n    }\n    ret = max_length_list;\n    return ret;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmplkfpyaq9.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmplkfpyaq9.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ ret;\n      |                                 ^~~\n/tmp/tmplkfpyaq9.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplkfpyaq9.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmplkfpyaq9.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplkfpyaq9.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmplkfpyaq9.cpp:25:11: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     ret = max_length_list;\n      |           ^~~~~~~~~~~~~~~\n/tmp/tmplkfpyaq9.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplkfpyaq9.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplkfpyaq9.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(cons",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max = 0;\n    std::vector<long> max_list;\n    for (auto i : list1) {\n        if (i.size() > max) {\n            max = i.size();\n            max_list = i;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpph22n856.cpp:2:\n/tmp/tmpph22n856.cpp: In function \u2018int main()\u2019:\n/tmp/tmpph22n856.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ ret;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_list.size() == 0) {\n        ret.f0 = max_length;\n    } else {\n        ret.f1 = max_list;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmphtfbuitw.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmphtfbuitw.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ ret;\n      |                                 ^~~\n/tmp/tmphtfbuitw.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphtfbuitw.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmphtfbuitw.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphtfbuitw.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmphtfbuitw.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return ret;\n      |            ^~~\n/tmp/tmphtfbuitw.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphtfbuitw.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ max_length_ret_var;\n    std::vector<long> max_length_ret_var_1;\n    long max_length_ret_var_0;\n    long max_length_ret_var_0_0;\n    std::vector<long> max_length_ret_var_1_0;\n    long max_length_ret_var_0_1;\n    std::vector<long> max_length_ret_var_1_1;\n    long max_length_ret_var_0_2;\n    std::vector<long> max_length_ret_var_1_2;\n    long max_length_ret_var_0_3;\n    std::vector<long> max_length_ret_var_1_3;\n    long max_length_ret_var_0_4;\n    std::vector<long> max_length_ret_var_1_4;\n    long max_length_ret_var_0_5;\n    std::vector<long> max_length_ret_var_1_5;\n    long max_length_ret_var_0_6;\n    std::vector<long> max_length_ret_var_1_6;\n    long max_length_ret_var_0_7;\n    std::vector<long> max_length_ret_var_1_7;\n    long max_length_ret_var_0_8;\n    std::vector<long> max_length_ret_var_1_8;\n    long max_length_ret_var_0_9;\n    std::vector<long> max_length_ret_var_1_9;\n    long max_length_ret_var_0_10;\n    std::vector<long> max_length_ret_var_1_10;\n    long max_length_ret_var_0_11;\n    std::vector<long> max_length_ret_var_1_11;\n    long max_length_ret_var_0_12;\n    std::vector<long> max_length_ret_var_1_12;\n    long max_length\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmp7g4vbix_.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7g4vbix_.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ max_length_ret_var;\n      |                                 ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7g4vbix_.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7g4vbix_.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7g4vbix_.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7g4vbix_.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7g4vbix_.cpp:46:1: error: expected initializer before \u2018}\u2019 token\n   46 | }\n      | ^\n/tmp/tmp7g4vbix_.cpp:46:1: warning: no return statement in function returning non-void [-Wreturn-type]\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7g4vbix_.cpp:2:\n/tmp/tmp7g4vbix_.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7g4vbix_.cpp:49:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   49 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp69es4eay.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp69es4eay.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp69es4eay.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpe0f81u_q.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpe0f81u_q.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpe0f81u_q.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpfz1tp4pt.cpp:2:\n/tmp/tmpfz1tp4pt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpfz1tp4pt.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    if (list1.size() == 0) {\n        return Union_long_std_vector_long_(0);\n    }\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_list = list;\n            max_length = list.size();\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp35jzv4ua.cpp:2:\n/tmp/tmp35jzv4ua.cpp: In function \u2018int main()\u2019:\n/tmp/tmp35jzv4ua.cpp:31:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   31 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpwyezygbr.cpp:2:\n/tmp/tmpwyezygbr.cpp: In function \u2018int main()\u2019:\n/tmp/tmpwyezygbr.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp69es4eay.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp69es4eay.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp69es4eay.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpwyezygbr.cpp:2:\n/tmp/tmpwyezygbr.cpp: In function \u2018int main()\u2019:\n/tmp/tmpwyezygbr.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp69es4eay.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp69es4eay.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp69es4eay.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max = 0;\n    std::vector<long> max_list;\n    for (auto list : list1) {\n        if (list.size() > max) {\n            max = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsmv_kd39.cpp:2:\n/tmp/tmpsmv_kd39.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsmv_kd39.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ max_length_return_value;\n    std::vector<long> max_length_return_value_f1;\n    long max_length_return_value_f0;\n    max_length_return_value_f0 = 0;\n    for (auto i : list1) {\n        if (i.size() > max_length_return_value_f0) {\n            max_length_return_value_f0 = i.size();\n            max_length_return_value_f1 = i;\n        }\n    }\n    max_length_return_value = max_length_return_value_f1;\n    return max_length_return_value;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmp9z3z3r8j.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp9z3z3r8j.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ max_length_return_value;\n      |                                 ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9z3z3r8j.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9z3z3r8j.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp9z3z3r8j.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9z3z3r8j.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp9z3z3r8j.cpp:26:31: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |     max_length_return_value = max_length_return_value_f1;\n      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9z3z3r8j.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9z3z3r8j.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9z3z3r8j.cpp:",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list2 : list1) {\n        if (list2.size() > max_length) {\n            max_length = list2.size();\n            max_length_list = list2;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp3thx92f1.cpp:2:\n/tmp/tmp3thx92f1.cpp: In function \u2018int main()\u2019:\n/tmp/tmp3thx92f1.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpxbqdmmym.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpxbqdmmym.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpxbqdmmym.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxbqdmmym.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpxbqdmmym.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxbqdmmym.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpxbqdmmym.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmpxbqdmmym.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxbqdmmym.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpxbqdmmym.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ max_length_list;\n    long max_length = 0;\n    std::vector<long> max_length_list_;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list_ = list;\n        }\n    }\n    max_length_list = max_length_list_;\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpig2a2qne.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpig2a2qne.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ max_length_list;\n      |                                 ^~~~~~~~~~~~~~~\n/tmp/tmpig2a2qne.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpig2a2qne.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpig2a2qne.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpig2a2qne.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpig2a2qne.cpp:25:23: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     max_length_list = max_length_list_;\n      |                       ^~~~~~~~~~~~~~~~\n/tmp/tmpig2a2qne.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpig2a2qne.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpig2a2qne.cpp:26:12: error: use of deleted function \u2018Union_long_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    if ((list1.size()) == (0)) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = list1[0];\n    for (int i = 1; i < list1.size(); i++) {\n        if ((list1[i].size()) > (max_list.size())) {\n            max_list = list1[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpytjeiypi.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpytjeiypi.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpytjeiypi.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpytjeiypi.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpytjeiypi.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpytjeiypi.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpytjeiypi.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpytjeiypi.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpytjeiypi.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpytjeiypi.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> list2;\n    long max = 0;\n    for (auto i : list1) {\n        if (i.size() > max) {\n            max = i.size();\n            list2 = i;\n        }\n    }\n    result = list2;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmps0vxvx5d.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmps0vxvx5d.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmps0vxvx5d.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmps0vxvx5d.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmps0vxvx5d.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmps0vxvx5d.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmps0vxvx5d.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = list2;\n      |              ^~~~~\n/tmp/tmps0vxvx5d.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmps0vxvx5d.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmps0vxvx5d.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list: list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpqwgh7pey.cpp:2:\n/tmp/tmpqwgh7pey.cpp: In function \u2018int main()\u2019:\n/tmp/tmpqwgh7pey.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ max = -1;\n    for (auto list : list1) {\n        if (list.size() > max.f0) {\n            max = list;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpa1oz58ho.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpa1oz58ho.cpp:19:19: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   19 |             max = list;\n      |                   ^~~~\n/tmp/tmpa1oz58ho.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa1oz58ho.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpa1oz58ho.cpp:22:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   22 |     return max;\n      |            ^~~\n/tmp/tmpa1oz58ho.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa1oz58ho.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp2j2f9456.cpp:2:\n/tmp/tmp2j2f9456.cpp: In function \u2018int main()\u2019:\n/tmp/tmp2j2f9456.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    if ((list1.size() == 0)) {\n        result = 0;\n        return result;\n    } else {\n        std::vector<long> max_list;\n        long max_length = 0;\n        for (auto list : list1) {\n            if ((list.size() > max_length)) {\n                max_list = list;\n                max_length = list.size();\n            }\n        }\n        result = max_list;\n        return result;\n    }\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmp1mvlfi85.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1mvlfi85.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1mvlfi85.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1mvlfi85.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1mvlfi85.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1mvlfi85.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1mvlfi85.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp1mvlfi85.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1mvlfi85.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1mvlfi85.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp1qzns76c.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1qzns76c.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmp1qzns76c.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1qzns76c.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for(auto list : list1) {\n        if(list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if(max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpfkslz8bb.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpfkslz8bb.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpfkslz8bb.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfkslz8bb.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpfkslz8bb.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfkslz8bb.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpfkslz8bb.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpfkslz8bb.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfkslz8bb.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> list2;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            list2 = list;\n        }\n    }\n    return Union_long_std_vector_long_(list2);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp8kf4u1p7.cpp:2:\n/tmp/tmp8kf4u1p7.cpp: In function \u2018int main()\u2019:\n/tmp/tmp8kf4u1p7.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max = 0;\n    std::vector<long> max_list;\n    for(auto i : list1){\n        if(i.size() > max){\n            max = i.size();\n            max_list = i;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5x4gms24.cpp:2:\n/tmp/tmp5x4gms24.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5x4gms24.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ max_length_ret_var;\n    std::vector<long> max_length_ret_var_1;\n    long max_length_ret_var_0;\n    long max_length_ret_var_0_0;\n    std::vector<long> max_length_ret_var_1_0;\n    long max_length_ret_var_0_1;\n    std::vector<long> max_length_ret_var_1_1;\n    long max_length_ret_var_0_2;\n    std::vector<long> max_length_ret_var_1_2;\n    long max_length_ret_var_0_3;\n    std::vector<long> max_length_ret_var_1_3;\n    long max_length_ret_var_0_4;\n    std::vector<long> max_length_ret_var_1_4;\n    long max_length_ret_var_0_5;\n    std::vector<long> max_length_ret_var_1_5;\n    long max_length_ret_var_0_6;\n    std::vector<long> max_length_ret_var_1_6;\n    long max_length_ret_var_0_7;\n    std::vector<long> max_length_ret_var_1_7;\n    long max_length_ret_var_0_8;\n    std::vector<long> max_length_ret_var_1_8;\n    long max_length_ret_var_0_9;\n    std::vector<long> max_length_ret_var_1_9;\n    long max_length_ret_var_0_10;\n    std::vector<long> max_length_ret_var_1_10;\n    long max_length_ret_var_0_11;\n    std::vector<long> max_length_ret_var_1_11;\n    long max_length_ret_var_0_12;\n    std::vector<long> max_length_ret_var_1_12;\n    long max_length\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmp7g4vbix_.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7g4vbix_.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ max_length_ret_var;\n      |                                 ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7g4vbix_.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7g4vbix_.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7g4vbix_.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7g4vbix_.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7g4vbix_.cpp:46:1: error: expected initializer before \u2018}\u2019 token\n   46 | }\n      | ^\n/tmp/tmp7g4vbix_.cpp:46:1: warning: no return statement in function returning non-void [-Wreturn-type]\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7g4vbix_.cpp:2:\n/tmp/tmp7g4vbix_.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7g4vbix_.cpp:49:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   49 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpjw56lzmk.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjw56lzmk.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjw56lzmk.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjw56lzmk.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjw56lzmk.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjw56lzmk.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjw56lzmk.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpjw56lzmk.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjw56lzmk.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 f",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max = 0;\n    std::vector<long> max_list;\n    for (auto list : list1) {\n        if (list.size() > max) {\n            max = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsmv_kd39.cpp:2:\n/tmp/tmpsmv_kd39.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsmv_kd39.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp2j2f9456.cpp:2:\n/tmp/tmp2j2f9456.cpp: In function \u2018int main()\u2019:\n/tmp/tmp2j2f9456.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> list2;\n    long max = 0;\n    for (auto i : list1) {\n        if (i.size() > max) {\n            max = i.size();\n            list2 = i;\n        }\n    }\n    return list2;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpeyuodnht.cpp:2:\n/tmp/tmpeyuodnht.cpp: In function \u2018int main()\u2019:\n/tmp/tmpeyuodnht.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list = list1[0];\n    for (auto list : list1) {\n        if (list.size() > max_list.size()) {\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpv8fhp412.cpp:2:\n/tmp/tmpv8fhp412.cpp: In function \u2018int main()\u2019:\n/tmp/tmpv8fhp412.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp8rgosorx.cpp:2:\n/tmp/tmp8rgosorx.cpp: In function \u2018int main()\u2019:\n/tmp/tmp8rgosorx.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    if ((list1.size() == 0)) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if ((list.size() > max_length)) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpnu55e_n9.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpnu55e_n9.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpnu55e_n9.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnu55e_n9.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnu55e_n9.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnu55e_n9.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnu55e_n9.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpnu55e_n9.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnu55e_n9.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnu55e_n9.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpwyezygbr.cpp:2:\n/tmp/tmpwyezygbr.cpp: In function \u2018int main()\u2019:\n/tmp/tmpwyezygbr.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    if ((list1.size()) == (0)) {\n        result = (0);\n        return result;\n    }\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if ((list.size()) > (max_length)) {\n            max_list = list;\n            max_length = list.size();\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmp11p3z36v.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp11p3z36v.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp11p3z36v.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp11p3z36v.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp11p3z36v.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp11p3z36v.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp11p3z36v.cpp:18:20: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = (0);\n      |                    ^\n/tmp/tmp11p3z36v.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp11p3z36v.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp11p3z36v.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Un",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    if (list1.empty()) {\n        return Union_long_std_vector_long_(std::vector<long>());\n    }\n    std::vector<long> max_list = list1[0];\n    for (auto list : list1) {\n        if (list.size() > max_list.size()) {\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp8iwwfxl2.cpp:2:\n/tmp/tmp8iwwfxl2.cpp: In function \u2018int main()\u2019:\n/tmp/tmp8iwwfxl2.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> list2;\n    long max = 0;\n    for (auto list : list1) {\n        if (list.size() > max) {\n            max = list.size();\n            list2 = list;\n        }\n    }\n    result = list2;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "/tmp/tmpptdks03m.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpptdks03m.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpptdks03m.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpptdks03m.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpptdks03m.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpptdks03m.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpptdks03m.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = list2;\n      |              ^~~~~\n/tmp/tmpptdks03m.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpptdks03m.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpptdks03m.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> list2;\n    long max = 0;\n    for (long i = 0; i < list1.size(); i++) {\n        if (list1[i].size() > max) {\n            max = list1[i].size();\n            list2 = list1[i];\n        }\n    }\n    return list2;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp08v1a3hl.cpp:2:\n/tmp/tmp08v1a3hl.cpp: In function \u2018int main()\u2019:\n/tmp/tmp08v1a3hl.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    if ((list1.size()) == (0)) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = list1[0];\n    for (auto list : list1) {\n        if ((list.size()) > (max_list.size())) {\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpj0_w5xy6.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpj0_w5xy6.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpj0_w5xy6.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj0_w5xy6.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpj0_w5xy6.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj0_w5xy6.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpj0_w5xy6.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpj0_w5xy6.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj0_w5xy6.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpj0_w5xy6.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpe0f81u_q.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpe0f81u_q.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpe0f81u_q.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpjw56lzmk.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjw56lzmk.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjw56lzmk.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjw56lzmk.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjw56lzmk.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjw56lzmk.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjw56lzmk.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpjw56lzmk.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjw56lzmk.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 f",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "/tmp/tmpzt89knos.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpzt89knos.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpzt89knos.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzt89knos.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzt89knos.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzt89knos.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzt89knos.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpzt89knos.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzt89knos.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list = list1[0];\n    for (auto list : list1) {\n        if (list.size() > max_list.size()) {\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpv8fhp412.cpp:2:\n/tmp/tmpv8fhp412.cpp: In function \u2018int main()\u2019:\n/tmp/tmpv8fhp412.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ ret;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        ret.f0 = max_length;\n    } else {\n        ret.f1 = max_list;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "/tmp/tmpgb4ncgcs.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpgb4ncgcs.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ ret;\n      |                                 ^~~\n/tmp/tmpgb4ncgcs.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgb4ncgcs.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpgb4ncgcs.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgb4ncgcs.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpgb4ncgcs.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return ret;\n      |            ^~~\n/tmp/tmpgb4ncgcs.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgb4ncgcs.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max = 0;\n    std::vector<long> max_list;\n    for (auto list : list1) {\n        if (list.size() > max) {\n            max = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsmv_kd39.cpp:2:\n/tmp/tmpsmv_kd39.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsmv_kd39.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ ret(0);\n    std::vector<long> max_list;\n    long max_length = 0;\n    for(auto list : list1) {\n        if(list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    ret = max_list;\n    return ret;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "/tmp/tmp5wr6gozr.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp5wr6gozr.cpp:25:11: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     ret = max_list;\n      |           ^~~~~~~~\n/tmp/tmp5wr6gozr.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5wr6gozr.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp5wr6gozr.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   26 |     return ret;\n      |            ^~~\n/tmp/tmp5wr6gozr.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5wr6gozr.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gn",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_len = 0;\n    for (auto list : list1) {\n        if (list.size() > max_len) {\n            max_len = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_17233wn.cpp:2:\n/tmp/tmp_17233wn.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_17233wn.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ max_length_list;\n    std::vector<long> max_length_list_vector;\n    long max_length = 0;\n    for (auto i : list1) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_list_vector = i;\n        }\n    }\n    max_length_list = max_length_list_vector;\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "/tmp/tmplo5v6xcs.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmplo5v6xcs.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ max_length_list;\n      |                                 ^~~~~~~~~~~~~~~\n/tmp/tmplo5v6xcs.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplo5v6xcs.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmplo5v6xcs.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplo5v6xcs.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmplo5v6xcs.cpp:25:23: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     max_length_list = max_length_list_vector;\n      |                       ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplo5v6xcs.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplo5v6xcs.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplo5v6xcs.cpp:26:12: error: use of deleted function ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i].size() > max_length) {\n            max_length = list1[i].size();\n            max_list = list1[i];\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpi5o1pzcp.cpp:2:\n/tmp/tmpi5o1pzcp.cpp: In function \u2018int main()\u2019:\n/tmp/tmpi5o1pzcp.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp69es4eay.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp69es4eay.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp69es4eay.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ ret;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        ret = 0;\n    } else {\n        ret = max_list;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "/tmp/tmpbj3qczmf.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpbj3qczmf.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ ret;\n      |                                 ^~~\n/tmp/tmpbj3qczmf.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbj3qczmf.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpbj3qczmf.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbj3qczmf.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpbj3qczmf.cpp:26:15: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         ret = 0;\n      |               ^\n/tmp/tmpbj3qczmf.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbj3qczmf.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpbj3qczmf.cpp:28:15: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_l",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (auto list : list1) {\n        if (list.size() > max_len) {\n            max_len = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk11my_b_.cpp:2:\n/tmp/tmpk11my_b_.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk11my_b_.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "/tmp/tmpcs27jfcy.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpcs27jfcy.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpcs27jfcy.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcs27jfcy.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpcs27jfcy.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcs27jfcy.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpcs27jfcy.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmpcs27jfcy.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcs27jfcy.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpcs27jfcy.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ max_length_list = std::vector<long>();\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "/tmp/tmp9kswdcod.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp9kswdcod.cpp:21:31: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   21 |             max_length_list = list;\n      |                               ^~~~\n/tmp/tmp9kswdcod.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9kswdcod.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9kswdcod.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return max_length_list;\n      |            ^~~~~~~~~~~~~~~\n/tmp/tmp9kswdcod.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9kswdcod.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp1qzns76c.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1qzns76c.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmp1qzns76c.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1qzns76c.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ max_length_result;\n    std::vector<long> max_length_result_vector;\n    long max_length_result_long = 0;\n    for (std::vector<long> list2 : list1) {\n        if (list2.size() > max_length_result_long) {\n            max_length_result_long = list2.size();\n            max_length_result_vector = list2;\n        }\n    }\n    max_length_result = max_length_result_vector;\n    return max_length_result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "/tmp/tmpwxrubd66.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpwxrubd66.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ max_length_result;\n      |                                 ^~~~~~~~~~~~~~~~~\n/tmp/tmpwxrubd66.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwxrubd66.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpwxrubd66.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwxrubd66.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpwxrubd66.cpp:25:25: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     max_length_result = max_length_result_vector;\n      |                         ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwxrubd66.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwxrubd66.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpwxrubd66.cpp:26:12: error: use of deleted",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max = 0;\n    for (auto list: list1) {\n        if (list.size() > max) {\n            max = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpaaitf3gs.cpp:2:\n/tmp/tmpaaitf3gs.cpp: In function \u2018int main()\u2019:\n/tmp/tmpaaitf3gs.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_len_list;\n    long max_len = 0;\n    for (auto list : list1) {\n        if (list.size() > max_len) {\n            max_len = list.size();\n            max_len_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_len_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsbwmpqsx.cpp:2:\n/tmp/tmpsbwmpqsx.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsbwmpqsx.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list2 : list1) {\n        if (list2.size() > max_length) {\n            max_length = list2.size();\n            max_length_list = list2;\n        }\n    }\n    if (max_length == 0) {\n        return 0;\n    } else {\n        return max_length_list;\n    }\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpfgp_59w1.cpp:2:\n/tmp/tmpfgp_59w1.cpp: In function \u2018int main()\u2019:\n/tmp/tmpfgp_59w1.cpp:32:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   32 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list = list1[0];\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_list.size()) {\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmph2twzh8g.cpp:2:\n/tmp/tmph2twzh8g.cpp: In function \u2018int main()\u2019:\n/tmp/tmph2twzh8g.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp69es4eay.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp69es4eay.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp69es4eay.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpy49jd2mv.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpy49jd2mv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpy49jd2mv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpy49jd2mv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpy49jd2mv.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmpy49jd2mv.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpy49jd2mv.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpjw56lzmk.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjw56lzmk.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjw56lzmk.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjw56lzmk.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjw56lzmk.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjw56lzmk.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjw56lzmk.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpjw56lzmk.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjw56lzmk.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 f",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpwyezygbr.cpp:2:\n/tmp/tmpwyezygbr.cpp: In function \u2018int main()\u2019:\n/tmp/tmpwyezygbr.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_list.size() == 0) {\n        return Union_long_std_vector_long_(max_length);\n    } else {\n        return Union_long_std_vector_long_(max_list);\n    }\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpi_3zomps.cpp:2:\n/tmp/tmpi_3zomps.cpp: In function \u2018int main()\u2019:\n/tmp/tmpi_3zomps.cpp:32:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   32 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp1qzns76c.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1qzns76c.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmp1qzns76c.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1qzns76c.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto &list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmprahsv848.cpp:2:\n/tmp/tmprahsv848.cpp: In function \u2018int main()\u2019:\n/tmp/tmprahsv848.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max_len = 0;\n    std::vector<long> max_list;\n    for (auto list : list1) {\n        if (list.size() > max_len) {\n            max_len = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp3tlnl359.cpp:2:\n/tmp/tmp3tlnl359.cpp: In function \u2018int main()\u2019:\n/tmp/tmp3tlnl359.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpe0f81u_q.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpe0f81u_q.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpe0f81u_q.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list = list1[0];\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i].size() > max_list.size()) {\n            max_list = list1[i];\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpe0p65qia.cpp:2:\n/tmp/tmpe0p65qia.cpp: In function \u2018int main()\u2019:\n/tmp/tmpe0p65qia.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp69es4eay.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp69es4eay.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp69es4eay.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_list = list;\n            max_length = list.size();\n        }\n    }\n    result.f1 = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "/tmp/tmpc6g7sew8.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpc6g7sew8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpc6g7sew8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc6g7sew8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpc6g7sew8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc6g7sew8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpc6g7sew8.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   26 |     return result;\n      |            ^~~~~~\n/tmp/tmpc6g7sew8.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc6g7sew8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "/tmp/tmp321wzt36.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp321wzt36.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp321wzt36.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp321wzt36.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp321wzt36.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp321wzt36.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp321wzt36.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp321wzt36.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp321wzt36.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpfz1tp4pt.cpp:2:\n/tmp/tmpfz1tp4pt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpfz1tp4pt.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ max_length_return_value;\n    std::vector<long> max_length_return_value_f1;\n    long max_length_return_value_f0;\n    max_length_return_value_f0 = 0;\n    max_length_return_value_f1 = std::vector<long>();\n    for (auto i : list1) {\n        if (i.size() > max_length_return_value_f0) {\n            max_length_return_value_f0 = i.size();\n            max_length_return_value_f1 = i;\n        }\n    }\n    max_length_return_value = max_length_return_value_f1;\n    return max_length_return_value;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "/tmp/tmp9eeul8as.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp9eeul8as.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ max_length_return_value;\n      |                                 ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9eeul8as.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9eeul8as.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp9eeul8as.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9eeul8as.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp9eeul8as.cpp:27:31: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   27 |     max_length_return_value = max_length_return_value_f1;\n      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9eeul8as.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9eeul8as.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9eeul8as.cpp:",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp69es4eay.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp69es4eay.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp69es4eay.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_list.size() == 0) {\n        return Union_long_std_vector_long_(0);\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpuz6k9dcn.cpp:2:\n/tmp/tmpuz6k9dcn.cpp: In function \u2018int main()\u2019:\n/tmp/tmpuz6k9dcn.cpp:31:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   31 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpefhfx3fq.cpp:2:\n/tmp/tmpefhfx3fq.cpp: In function \u2018int main()\u2019:\n/tmp/tmpefhfx3fq.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp69es4eay.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp69es4eay.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp69es4eay.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpe0f81u_q.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpe0f81u_q.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpe0f81u_q.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpfz1tp4pt.cpp:2:\n/tmp/tmpfz1tp4pt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpfz1tp4pt.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpy49jd2mv.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpy49jd2mv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpy49jd2mv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpy49jd2mv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpy49jd2mv.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmpy49jd2mv.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpy49jd2mv.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp69es4eay.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp69es4eay.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp69es4eay.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    if (list1.empty()) {\n        return Union_long_std_vector_long_(0);\n    }\n    std::vector<long> max_list = list1[0];\n    for (auto list : list1) {\n        if (list.size() > max_list.size()) {\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpe8ng26vj.cpp:2:\n/tmp/tmpe8ng26vj.cpp: In function \u2018int main()\u2019:\n/tmp/tmpe8ng26vj.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp2j2f9456.cpp:2:\n/tmp/tmp2j2f9456.cpp: In function \u2018int main()\u2019:\n/tmp/tmp2j2f9456.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpe0f81u_q.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpe0f81u_q.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpe0f81u_q.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpfz1tp4pt.cpp:2:\n/tmp/tmpfz1tp4pt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpfz1tp4pt.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ ret;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        ret.f0 = 0;\n    } else {\n        ret.f1 = max_list;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "/tmp/tmpdi7dutej.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpdi7dutej.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ ret;\n      |                                 ^~~\n/tmp/tmpdi7dutej.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdi7dutej.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpdi7dutej.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdi7dutej.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpdi7dutej.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return ret;\n      |            ^~~\n/tmp/tmpdi7dutej.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdi7dutej.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp69es4eay.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp69es4eay.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp69es4eay.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp2j2f9456.cpp:2:\n/tmp/tmp2j2f9456.cpp: In function \u2018int main()\u2019:\n/tmp/tmp2j2f9456.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpfz1tp4pt.cpp:2:\n/tmp/tmpfz1tp4pt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpfz1tp4pt.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpfz1tp4pt.cpp:2:\n/tmp/tmpfz1tp4pt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpfz1tp4pt.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    if (list1.size() == 0) {\n        return Union_long_std_vector_long_(0);\n    } else {\n        std::vector<long> max_list = list1[0];\n        long max_length = list1[0].size();\n        for (long i = 1; i < list1.size(); i++) {\n            if (list1[i].size() > max_length) {\n                max_list = list1[i];\n                max_length = list1[i].size();\n            }\n        }\n        return Union_long_std_vector_long_(max_list);\n    }\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpy7iiz6pz.cpp:2:\n/tmp/tmpy7iiz6pz.cpp: In function \u2018int main()\u2019:\n/tmp/tmpy7iiz6pz.cpp:32:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   32 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_list.size() == 0) {\n        return Union_long_std_vector_long_(0);\n    } else {\n        return Union_long_std_vector_long_(max_list);\n    }\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpx29pqw_g.cpp:2:\n/tmp/tmpx29pqw_g.cpp: In function \u2018int main()\u2019:\n/tmp/tmpx29pqw_g.cpp:32:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   32 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        return Union_long_std_vector_long_(0);\n    } else {\n        return Union_long_std_vector_long_(max_list);\n    }\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpffzf4pf6.cpp:2:\n/tmp/tmpffzf4pf6.cpp: In function \u2018int main()\u2019:\n/tmp/tmpffzf4pf6.cpp:32:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   32 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpfz1tp4pt.cpp:2:\n/tmp/tmpfz1tp4pt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpfz1tp4pt.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpvsd_aypg.cpp:2:\n/tmp/tmpvsd_aypg.cpp: In function \u2018int main()\u2019:\n/tmp/tmpvsd_aypg.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpefhfx3fq.cpp:2:\n/tmp/tmpefhfx3fq.cpp: In function \u2018int main()\u2019:\n/tmp/tmpefhfx3fq.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for(auto list : list1) {\n        if(list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7dv024qd.cpp:2:\n/tmp/tmp7dv024qd.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7dv024qd.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpy49jd2mv.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpy49jd2mv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpy49jd2mv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpy49jd2mv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpy49jd2mv.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmpy49jd2mv.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpy49jd2mv.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpe0f81u_q.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpe0f81u_q.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpe0f81u_q.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpi88duh0e.cpp:2:\n/tmp/tmpi88duh0e.cpp: In function \u2018int main()\u2019:\n/tmp/tmpi88duh0e.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ max_length_return_value;\n    std::vector<long> max_length_return_value_f1;\n    long max_length_return_value_f0;\n    max_length_return_value_f0 = 0;\n    max_length_return_value_f1 = {};\n    for (auto i : list1) {\n        if (i.size() > max_length_return_value_f0) {\n            max_length_return_value_f0 = i.size();\n            max_length_return_value_f1 = i;\n        }\n    }\n    max_length_return_value = max_length_return_value_f1;\n    return max_length_return_value;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "/tmp/tmp_zkdxgru.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp_zkdxgru.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ max_length_return_value;\n      |                                 ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zkdxgru.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zkdxgru.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_zkdxgru.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zkdxgru.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_zkdxgru.cpp:27:31: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   27 |     max_length_return_value = max_length_return_value_f1;\n      |                               ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zkdxgru.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_zkdxgru.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_zkdxgru.cpp:",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpe0f81u_q.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpe0f81u_q.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpe0f81u_q.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        return Union_long_std_vector_long_(0);\n    } else {\n        return Union_long_std_vector_long_(max_list);\n    }\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpffzf4pf6.cpp:2:\n/tmp/tmpffzf4pf6.cpp: In function \u2018int main()\u2019:\n/tmp/tmpffzf4pf6.cpp:32:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   32 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp2j2f9456.cpp:2:\n/tmp/tmp2j2f9456.cpp: In function \u2018int main()\u2019:\n/tmp/tmp2j2f9456.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ ret(0);\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    ret = max_list;\n    return ret;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "/tmp/tmp4adorn7t.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp4adorn7t.cpp:25:11: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     ret = max_list;\n      |           ^~~~~~~~\n/tmp/tmp4adorn7t.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4adorn7t.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4adorn7t.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   26 |     return ret;\n      |            ^~~\n/tmp/tmp4adorn7t.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4adorn7t.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gn",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ ret;\n    long max = 0;\n    std::vector<long> max_list;\n    for (auto list : list1) {\n        if (list.size() > max) {\n            max = list.size();\n            max_list = list;\n        }\n    }\n    ret = max_list;\n    return ret;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "/tmp/tmprrfbivvg.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmprrfbivvg.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ ret;\n      |                                 ^~~\n/tmp/tmprrfbivvg.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprrfbivvg.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprrfbivvg.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprrfbivvg.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprrfbivvg.cpp:25:11: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     ret = max_list;\n      |           ^~~~~~~~\n/tmp/tmprrfbivvg.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprrfbivvg.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmprrfbivvg.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_s",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp2j2f9456.cpp:2:\n/tmp/tmp2j2f9456.cpp: In function \u2018int main()\u2019:\n/tmp/tmp2j2f9456.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpfz1tp4pt.cpp:2:\n/tmp/tmpfz1tp4pt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpfz1tp4pt.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpxbqdmmym.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpxbqdmmym.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpxbqdmmym.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxbqdmmym.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpxbqdmmym.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxbqdmmym.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpxbqdmmym.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmpxbqdmmym.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxbqdmmym.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpxbqdmmym.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp1qzns76c.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1qzns76c.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmp1qzns76c.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1qzns76c.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpe0f81u_q.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpe0f81u_q.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpe0f81u_q.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp1qzns76c.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1qzns76c.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmp1qzns76c.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1qzns76c.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpefhfx3fq.cpp:2:\n/tmp/tmpefhfx3fq.cpp: In function \u2018int main()\u2019:\n/tmp/tmpefhfx3fq.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpy49jd2mv.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpy49jd2mv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpy49jd2mv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpy49jd2mv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpy49jd2mv.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmpy49jd2mv.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpy49jd2mv.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp1qzns76c.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1qzns76c.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmp1qzns76c.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1qzns76c.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list2 : list1) {\n        if (list2.size() > max_length) {\n            max_length = list2.size();\n            max_length_list = list2;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp3thx92f1.cpp:2:\n/tmp/tmp3thx92f1.cpp: In function \u2018int main()\u2019:\n/tmp/tmp3thx92f1.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpfz1tp4pt.cpp:2:\n/tmp/tmpfz1tp4pt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpfz1tp4pt.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    if ((list1.size() == 0)) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if ((list.size() > max_length)) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpnu55e_n9.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpnu55e_n9.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpnu55e_n9.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnu55e_n9.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnu55e_n9.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnu55e_n9.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnu55e_n9.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpnu55e_n9.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnu55e_n9.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnu55e_n9.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_len = 0;\n    for (auto list : list1) {\n        if (list.size() > max_len) {\n            max_len = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_17233wn.cpp:2:\n/tmp/tmp_17233wn.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_17233wn.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ max_length_ret_var;\n    long max_length_ret_var_0_0;\n    std::vector<long> max_length_ret_var_1_1;\n    max_length_ret_var_0_0 = 0;\n    max_length_ret_var_1_1 = std::vector<long>();\n    max_length_ret_var = max_length_ret_var_0_0;\n    for (auto i : list1) {\n        if (max_length_ret_var == i.size()) {\n            max_length_ret_var_1_1.push_back(i.size());\n            max_length_ret_var = max_length_ret_var_1_1;\n        } else if (max_length_ret_var < i.size()) {\n            max_length_ret_var_1_1 = std::vector<long>();\n            max_length_ret_var_1_1.push_back(i.size());\n            max_length_ret_var = max_length_ret_var_1_1;\n        }\n    }\n    return max_length_ret_var;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "/tmp/tmp6tpkcsf5.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp6tpkcsf5.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ max_length_ret_var;\n      |                                 ^~~~~~~~~~~~~~~~~~\n/tmp/tmp6tpkcsf5.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6tpkcsf5.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6tpkcsf5.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6tpkcsf5.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6tpkcsf5.cpp:21:26: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   21 |     max_length_ret_var = max_length_ret_var_0_0;\n      |                          ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6tpkcsf5.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6tpkcsf5.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp6tpkcsf5.cpp:25:34: error: use of deleted",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ max_length_list;\n    if (list1.size() == 0) {\n        max_length_list = 0;\n        return max_length_list;\n    }\n    std::vector<long> max_length_list1;\n    long max_length_list2 = list1[0].size();\n    for (long i = 0; i < list1.size(); i++) {\n        if (list1[i].size() > max_length_list2) {\n            max_length_list2 = list1[i].size();\n        }\n    }\n    for (long i = 0; i < list1.size(); i++) {\n        if (list1[i].size() == max_length_list2) {\n            max_length_list1.push_back(i);\n        }\n    }\n    if (max_length_list1.size() == 1) {\n        max_length_list = max_length_list2;\n        return max_length_list;\n    }\n    max_length_list = max_length_list1;\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "/tmp/tmpjmti52n8.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjmti52n8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ max_length_list;\n      |                                 ^~~~~~~~~~~~~~~\n/tmp/tmpjmti52n8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjmti52n8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjmti52n8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjmti52n8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjmti52n8.cpp:18:27: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         max_length_list = 0;\n      |                           ^\n/tmp/tmpjmti52n8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjmti52n8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpjmti52n8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Unio",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> list2;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            list2 = list;\n        }\n    }\n    result = list2;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "/tmp/tmp37xsbw7v.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp37xsbw7v.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp37xsbw7v.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp37xsbw7v.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp37xsbw7v.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp37xsbw7v.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp37xsbw7v.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = list2;\n      |              ^~~~~\n/tmp/tmp37xsbw7v.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp37xsbw7v.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp37xsbw7v.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp69es4eay.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp69es4eay.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp69es4eay.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for(auto i : list1) {\n        if(i.size() > max_length) {\n            max_length = i.size();\n            max_length_list = i;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpdap4g1fy.cpp:2:\n/tmp/tmpdap4g1fy.cpp: In function \u2018int main()\u2019:\n/tmp/tmpdap4g1fy.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp1qzns76c.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1qzns76c.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmp1qzns76c.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1qzns76c.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list = list1[0];\n    for (auto list : list1) {\n        if (list.size() > max_list.size()) {\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "/tmp/tmp3c97c0ny.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp3c97c0ny.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp3c97c0ny.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3c97c0ny.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp3c97c0ny.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3c97c0ny.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp3c97c0ny.cpp:23:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   23 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmp3c97c0ny.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3c97c0ny.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp3c97c0ny.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpxbqdmmym.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpxbqdmmym.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpxbqdmmym.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxbqdmmym.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpxbqdmmym.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxbqdmmym.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpxbqdmmym.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmpxbqdmmym.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxbqdmmym.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpxbqdmmym.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = max_length;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp69es4eay.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp69es4eay.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp69es4eay.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp69es4eay.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp69es4eay.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmprve0a2yx.cpp:2:\n/tmp/tmprve0a2yx.cpp: In function \u2018int main()\u2019:\n/tmp/tmprve0a2yx.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list = list1[0];\n    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i].size() > max_list.size()) {\n            max_list = list1[i];\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpi_7p0w2i.cpp:2:\n/tmp/tmpi_7p0w2i.cpp: In function \u2018int main()\u2019:\n/tmp/tmpi_7p0w2i.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_length_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp2j2f9456.cpp:2:\n/tmp/tmp2j2f9456.cpp: In function \u2018int main()\u2019:\n/tmp/tmp2j2f9456.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpjw56lzmk.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjw56lzmk.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjw56lzmk.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjw56lzmk.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjw56lzmk.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjw56lzmk.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjw56lzmk.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpjw56lzmk.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjw56lzmk.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 f",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ ret;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        ret.f0 = 0;\n    } else {\n        ret.f1 = max_list;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "/tmp/tmpdi7dutej.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpdi7dutej.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ ret;\n      |                                 ^~~\n/tmp/tmpdi7dutej.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdi7dutej.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpdi7dutej.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdi7dutej.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpdi7dutej.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return ret;\n      |            ^~~\n/tmp/tmpdi7dutej.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdi7dutej.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list = list1[0];\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_list.size()) {\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmph2twzh8g.cpp:2:\n/tmp/tmph2twzh8g.cpp: In function \u2018int main()\u2019:\n/tmp/tmph2twzh8g.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpe0f81u_q.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpe0f81u_q.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpe0f81u_q.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    if ((list1.size() == 0)) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if ((list.size() > max_length)) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmpnu55e_n9.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpnu55e_n9.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpnu55e_n9.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnu55e_n9.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnu55e_n9.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnu55e_n9.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnu55e_n9.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpnu55e_n9.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnu55e_n9.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnu55e_n9.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmp1qzns76c.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1qzns76c.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1qzns76c.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_list;\n      |              ^~~~~~~~\n/tmp/tmp1qzns76c.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1qzns76c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1qzns76c.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpe0f81u_q.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpe0f81u_q.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe0f81u_q.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmpe0f81u_q.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe0f81u_q.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ ret;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    ret = max_list;\n    return ret;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "/tmp/tmp1gmw_9pd.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1gmw_9pd.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ ret;\n      |                                 ^~~\n/tmp/tmp1gmw_9pd.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gmw_9pd.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1gmw_9pd.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gmw_9pd.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1gmw_9pd.cpp:25:11: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     ret = max_list;\n      |           ^~~~~~~~\n/tmp/tmp1gmw_9pd.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gmw_9pd.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1gmw_9pd.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_s",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmprve0a2yx.cpp:2:\n/tmp/tmprve0a2yx.cpp: In function \u2018int main()\u2019:\n/tmp/tmprve0a2yx.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ ret;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    ret = max_list;\n    return ret;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "/tmp/tmp1gmw_9pd.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1gmw_9pd.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ ret;\n      |                                 ^~~\n/tmp/tmp1gmw_9pd.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gmw_9pd.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1gmw_9pd.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gmw_9pd.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1gmw_9pd.cpp:25:11: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     ret = max_list;\n      |           ^~~~~~~~\n/tmp/tmp1gmw_9pd.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gmw_9pd.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1gmw_9pd.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_s",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpfz1tp4pt.cpp:2:\n/tmp/tmpfz1tp4pt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpfz1tp4pt.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    if (list1.empty()) {\n        return 0;\n    }\n    std::vector<long> max_list = list1[0];\n    for (auto list : list1) {\n        if (list.size() > max_list.size()) {\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpqufmzh8v.cpp:2:\n/tmp/tmpqufmzh8v.cpp: In function \u2018int main()\u2019:\n/tmp/tmpqufmzh8v.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    if ((list1.size()) == (0)) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if ((list.size()) > (max_length)) {\n            max_list = list;\n            max_length = list.size();\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "/tmp/tmph4grbrln.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmph4grbrln.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmph4grbrln.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph4grbrln.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmph4grbrln.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph4grbrln.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmph4grbrln.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmph4grbrln.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph4grbrln.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmph4grbrln.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6ym11284.cpp:2:\n/tmp/tmp6ym11284.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6ym11284.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    if (max_length == 0) {\n        result = 0;\n    } else {\n        result = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "/tmp/tmpy49jd2mv.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpy49jd2mv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpy49jd2mv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpy49jd2mv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpy49jd2mv.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   26 |         result = 0;\n      |                  ^\n/tmp/tmpy49jd2mv.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy49jd2mv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpy49jd2mv.cpp:28:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(c",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    if ((list1.size()) == (0)) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if ((list.size()) > (max_length)) {\n            max_list = list;\n            max_length = list.size();\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "/tmp/tmph4grbrln.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmph4grbrln.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmph4grbrln.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph4grbrln.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmph4grbrln.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph4grbrln.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmph4grbrln.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmph4grbrln.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph4grbrln.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmph4grbrln.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (std::vector<long> list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpefhfx3fq.cpp:2:\n/tmp/tmpefhfx3fq.cpp: In function \u2018int main()\u2019:\n/tmp/tmpefhfx3fq.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    if ((list1.size() == 0)) {\n        return Union_long_std_vector_long_(0);\n    } else {\n        std::vector<long> max_list = list1[0];\n        long max_length = list1[0].size();\n        for (long i = 1; (i < list1.size()); i++) {\n            if ((list1[i].size() > max_length)) {\n                max_list = list1[i];\n                max_length = list1[i].size();\n            }\n        }\n        return Union_long_std_vector_long_(max_list);\n    }\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123263,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpnxo3mzf5.cpp:2:\n/tmp/tmpnxo3mzf5.cpp: In function \u2018int main()\u2019:\n/tmp/tmpnxo3mzf5.cpp:32:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   32 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    if (list1.size() == 0) {\n        return 0;\n    }\n    std::vector<long> max_list = list1[0];\n    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i].size() > max_list.size()) {\n            max_list = list1[i];\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123263,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp9nheghkn.cpp:2:\n/tmp/tmp9nheghkn.cpp: In function \u2018int main()\u2019:\n/tmp/tmp9nheghkn.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_length_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpvsd_aypg.cpp:2:\n/tmp/tmpvsd_aypg.cpp: In function \u2018int main()\u2019:\n/tmp/tmpvsd_aypg.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    Union_long_std_vector_long_ result;\n    if ((list1.size()) == (0)) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if ((list.size()) > (max_length)) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123263,
      "stdout": "",
      "stderr": "/tmp/tmpczdxl9wt.cpp: In function \u2018Union_long_std_vector_long_ max_length(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpczdxl9wt.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpczdxl9wt.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpczdxl9wt.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpczdxl9wt.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpczdxl9wt.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpczdxl9wt.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpczdxl9wt.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpczdxl9wt.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpczdxl9wt.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the list of maximum length in a list of lists.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n    if (list1.empty()) {\n        return Union_long_std_vector_long_(0L);\n    }\n    std::vector<long> max_list = list1[0];\n    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i].size() > max_list.size()) {\n            max_list = list1[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
      "timestamp": 1666123263,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp2flfe2wz.cpp:2:\n/tmp/tmp2flfe2wz.cpp: In function \u2018int main()\u2019:\n/tmp/tmp2flfe2wz.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    }
  ]
}