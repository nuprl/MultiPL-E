{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    for(long i = k + 1; i < n; i++) {\n        if(a[i] > a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, k, i));\n        }\n    }\n    return sum + max;",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (index < k) {\n        long sum = a[k] + max_sum_increasing_subseq(a, n, k + 1, k);\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    long sum2 = 0;\n    if(a[index] < a[k]) {\n        sum2 = max_sum_increasing_subseq(a, n, index + 1, index) + a[index];\n    }\n    return std::max(sum1, sum2);",
    "\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong max_sum = 0;\n\tfor(long i = index; i < n; i++) {\n\t\tif(a[i] < a[k]) {\n\t\t\tmax_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t\t}\n\t}\n\treturn max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(k > index) {\n        long sum = a[k] + max_sum_increasing_subseq(a, n, k + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    if (index == n - 1) {\n        return a[index];\n    }\n    long max_sum = a[index];\n    for (long i = index + 1; i < n; i++) {\n        if (i == k) {\n            continue;\n        }\n        long sum = max_sum_increasing_subseq(a, n, i, k);\n        if (a[i] > a[index] && sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum + a[index];",
    "    if (index == n) {\n        return 0;\n    }\n    long ans = 0;\n    if (a[index] < a[k]) {\n        ans = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    ans = std::max(ans, max_sum_increasing_subseq(a, n, index + 1, k));\n    return ans;",
    "    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return std::max(sum, max);",
    "    if (index == n) {\n        return 0;\n    }\n    long sum_including = 0;\n    if (a[index] < a[k]) {\n        sum_including = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including, sum_excluding);",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k);\n            if(i == k) {\n                sum += a[i];\n            }\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    if(index == n) return 0;\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            if(i == k) {\n                ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i+1, k));\n            } else {\n                ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i+1, k));\n            }\n        }\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if(k > index) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, k, k));\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "\t// Write your code here\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tfor (long i = index; i < k; i++) {\n\t\tsum += a[i];\n\t\tif (sum > max_sum) {\n\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\treturn max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long ans = max_sum_increasing_subseq(a, n, index + 1, k);\n    if (a[index] < a[k]) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, index));\n    }\n    return ans;",
    "    if (index == n - 1) {\n        return a[index];\n    }\n    long max_sum = 0;\n    for (long i = index + 1; i <= k; i++) {\n        if (a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return max_sum;"
  ]
}