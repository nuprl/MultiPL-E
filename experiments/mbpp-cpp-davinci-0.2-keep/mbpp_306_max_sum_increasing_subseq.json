{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    for(long i = k + 1; i < n; i++) {\n        if(a[i] > a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, k, i));\n        }\n    }\n    return sum + max;",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (index < k) {\n        long sum = a[k] + max_sum_increasing_subseq(a, n, k + 1, k);\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    long sum2 = 0;\n    if(a[index] < a[k]) {\n        sum2 = max_sum_increasing_subseq(a, n, index + 1, index) + a[index];\n    }\n    return std::max(sum1, sum2);",
    "\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong max_sum = 0;\n\tfor(long i = index; i < n; i++) {\n\t\tif(a[i] < a[k]) {\n\t\t\tmax_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t\t}\n\t}\n\treturn max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(k > index) {\n        long sum = a[k] + max_sum_increasing_subseq(a, n, k + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    if (index == n - 1) {\n        return a[index];\n    }\n    long max_sum = a[index];\n    for (long i = index + 1; i < n; i++) {\n        if (i == k) {\n            continue;\n        }\n        long sum = max_sum_increasing_subseq(a, n, i, k);\n        if (a[i] > a[index] && sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum + a[index];",
    "    if (index == n) {\n        return 0;\n    }\n    long ans = 0;\n    if (a[index] < a[k]) {\n        ans = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    ans = std::max(ans, max_sum_increasing_subseq(a, n, index + 1, k));\n    return ans;",
    "    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return std::max(sum, max);",
    "    if (index == n) {\n        return 0;\n    }\n    long sum_including = 0;\n    if (a[index] < a[k]) {\n        sum_including = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including, sum_excluding);",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k);\n            if(i == k) {\n                sum += a[i];\n            }\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    if(index == n) return 0;\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            if(i == k) {\n                ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i+1, k));\n            } else {\n                ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i+1, k));\n            }\n        }\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if(k > index) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, k, k));\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "\t// Write your code here\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tfor (long i = index; i < k; i++) {\n\t\tsum += a[i];\n\t\tif (sum > max_sum) {\n\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\treturn max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long ans = max_sum_increasing_subseq(a, n, index + 1, k);\n    if (a[index] < a[k]) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, index));\n    }\n    return ans;",
    "    if (index == n - 1) {\n        return a[index];\n    }\n    long max_sum = 0;\n    for (long i = index + 1; i <= k; i++) {\n        if (a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return max_sum;",
    "    long sum = 0;\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "\tif(index == n) {\n\t\treturn 0;\n\t}\n\tif(index == k) {\n\t\treturn a[index];\n\t}\n\tlong sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n\tlong sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n\treturn std::max(sum_including_k, sum_excluding_k);",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return max_sum + a[k];",
    "\tif (index == n - 1)\n\t\treturn a[index];\n\tlong max_sum = 0;\n\tfor (long i = index + 1; i < n; i++) {\n\t\tif (a[i] > a[index]) {\n\t\t\tif (i == k)\n\t\t\t\tmax_sum = std::max(max_sum, a[index] + a[i] + max_sum_increasing_subseq(a, n, i, k));\n\t\t\telse\n\t\t\t\tmax_sum = std::max(max_sum, a[index] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max_sum;",
    "\t// Write your code here\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong max_sum_k = 0;\n\tlong sum_k = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[index]) {\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, index) + a[index];\n\t\t\tif (sum > max_sum) {\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\tfor (long i = index + 1; i < n; i++) {\n\t\tif (a[i] > a[index]) {\n\t\t\tsum_k = max_sum_increasing_subseq(a, n, i, k) + a[k];\n\t\t\tif (sum_k > max_sum_k) {\n\t\t\t\tmax_sum_k = sum_k;\n\t\t\t}\n\t\t}\n\t}\n\tif (max_sum_k > max_sum) {\n\t\treturn max_sum_k;\n\t}\n\telse {\n\t\treturn max_sum;\n\t}",
    "    // Write your code here\n    long dp[n+1];\n    for(long i=0;i<=n;i++)\n        dp[i]=a[i];\n    for(long i=1;i<=n;i++)\n    {\n        for(long j=0;j<i;j++)\n        {\n            if(a[j]<a[i])\n            {\n                dp[i]=std::max(dp[i],dp[j]+a[i]);\n            }\n        }\n    }\n    long max=dp[0];\n    for(long i=0;i<=n;i++)\n    {\n        if(dp[i]>max)\n            max=dp[i];\n    }\n    return max;",
    "    if(index == n) {\n        return 0;\n    }\n    long include = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    long exclude = max_sum_increasing_subseq(a, n, index + 1, k);\n    if(k > index) {\n        return std::max(include, exclude);\n    }\n    return exclude;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long include = 0;\n    if(a[index] < a[k]) {\n        include = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long exclude = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(include, exclude);",
    "    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(a[index] > a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong max_sum = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (a[i] > a[index]) {\n\t\t\tlong sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n\t\t\tif (sum > max_sum) {\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\tif (index == k) {\n\t\tmax_sum = max_sum + a[index];\n\t}\n\treturn max_sum;",
    "    if(index == n-1) {\n        return a[index];\n    }\n    long sum = 0;\n    for(long i = index+1; i < n; i++) {\n        if(i == k) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k) + a[index]);\n        }\n        else if(a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n            if(sum > max) {\n                max = sum;\n            }\n        }\n    }\n    return max;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum + a[index];",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if(index == n - 1) {\n        return a[index];\n    }\n    long max_sum = 0;\n    for(long i = index + 1; i <= k; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k) + a[i]);\n        }\n    }\n    if (index < k) {\n        sum = std::max(sum, max_sum_increasing_subseq(a, n, k, k) + a[index]);\n    }\n    return sum;",
    "\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong ans = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (a[i] > a[index]) {\n\t\t\tif (i == k) {\n\t\t\t\tans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tans = std::max(ans, max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    long max_sum_k = 0;\n    for(long i = 0; i < n; i++){\n        if(i < index){\n            sum += a[i];\n            if(sum > max_sum){\n                max_sum = sum;\n            }\n        }\n        else if(i == index){\n            sum += a[i];\n            if(sum > max_sum){\n                max_sum = sum;\n            }\n            max_sum_k = sum;\n        }\n        else if(i > index && i < k){\n            sum += a[i];\n            if(sum > max_sum){\n                max_sum = sum;\n            }\n            if(sum > max_sum_k){\n                max_sum_k = sum;\n            }\n        }\n        else if(i == k){\n            sum += a[i];\n            if(sum > max_sum_k){\n                max_sum_k = sum;\n            }\n            if(sum > max_sum){\n                max_sum = sum;\n            }\n        }\n        else{\n            sum += a[i];\n            if(sum > max_sum){\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum_k;",
    "    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "    if (index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n        if (i == k) {\n            ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return ans;",
    "    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "    // Write your code here\n    if(index == n-1)\n        return a[index];\n    long max_sum = a[index];\n    for(long i = index+1; i < n; i++) {\n        if(a[i] > a[index]) {\n            max_sum = std::max(max_sum, a[index] + max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    if(index < k) {\n        max_sum = std::max(max_sum, a[index] + max_sum_increasing_subseq(a, n, k, k));\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n        if(i == k) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong ans = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (a[i] > a[index]) {\n\t\t\tlong temp = max_sum_increasing_subseq(a, n, i + 1, k);\n\t\t\tif (i == k) {\n\t\t\t\ttemp += a[i];\n\t\t\t}\n\t\t\tans = std::max(ans, temp);\n\t\t}\n\t}\n\treturn ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    long sum2 = 0;\n    if(a[index] < a[k]) {\n        sum2 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    return std::max(sum1, sum2);",
    "\t// Write your code here\n\tlong dp[n+1][n+1];\n\tfor(long i=0;i<=n;i++){\n\t\tfor(long j=0;j<=n;j++){\n\t\t\tdp[i][j]=0;\n\t\t}\n\t}\n\tfor(long i=1;i<=n;i++){\n\t\tfor(long j=1;j<=n;j++){\n\t\t\tif(i==1){\n\t\t\t\tdp[i][j]=a[j-1];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(j<i){\n\t\t\t\t\tdp[i][j]=dp[i-1][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j]=std::max(dp[i-1][j],dp[i-1][i-1]+a[j-1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[index][k];",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    max_sum = sum;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    for(long i = k+1; i < n; i++) {\n        if(a[i] > a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, k, i));\n        }\n    }\n    return sum + max;",
    "    // Write your code here\n    long sum = 0;\n    if(index == 0)\n    {\n        sum = a[k];\n    }\n    else\n    {\n        long max = 0;\n        for(long i = 0; i < index; i++)\n        {\n            if(a[i] < a[k])\n            {\n                long temp = max_sum_increasing_subseq(a, n, i, k);\n                if(temp > max)\n                {\n                    max = temp;\n                }\n            }\n        }\n        sum = max + a[k];\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (i == k) {\n            max_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        } else {\n            max_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return max_sum;",
    "    if(index >= n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            sum = std::max(sum, a[index] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if (index < k) {\n        sum = std::max(sum, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return sum;",
    "\t// Write your code here\n\tlong sum = 0;\n\tlong max = 0;\n\tfor (long i = index; i < k; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tsum += a[k];\n\tif (k < n - 1) {\n\t\tmax = max_sum_increasing_subseq(a, n, k + 1, k + 1);\n\t}\n\tif (sum > max) {\n\t\tmax = sum;\n\t}\n\treturn max;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum1 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    long sum2 = 0;\n    if(k > index) {\n        sum2 = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    return std::max(sum1, sum2);",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(a[index] > a[k]) {\n        long sum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    long max_sum = 0;\n    for (long i = 0; i < index; i++) {\n        if (a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if(index < k) {\n        sum = std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (a[index] < a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, k + 1, k);\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (k > index) {\n        long sum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if(index >= n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    for(long i = k+1; i < n; i++){\n        if(a[i] > a[k]){\n            max = max_sum_increasing_subseq(a, n, k, i);\n            if(max > sum){\n                sum = max;\n            }\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            long sum = a[i] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    // Write your code here\n    long sum=0;\n    long max=0;\n    for(long i=index;i<n;i++)\n    {\n        if(a[i]<a[k])\n        {\n            sum+=a[i];\n            if(sum>max)\n            {\n                max=sum;\n            }\n        }\n    }\n    return max;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(k > index) {\n        sum_including_k = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;",
    "\tif (index == n) {\n\t\treturn 0;\n\t}\n\tif (index == k) {\n\t\treturn a[index];\n\t}\n\tlong include_index = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n\tlong exclude_index = max_sum_increasing_subseq(a, n, index + 1, k);\n\treturn std::max(include_index, exclude_index);",
    "\t// Write your code here\n\tlong sum = 0;\n\tlong max = 0;\n\tfor (long i = index; i <= k; i++) {\n\t\tif (a[i] > a[i - 1]) {\n\t\t\tsum += a[i];\n\t\t}\n\t\telse {\n\t\t\tsum = a[i];\n\t\t}\n\t\tif (sum > max) {\n\t\t\tmax = sum;\n\t\t}\n\t}\n\treturn max;",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (index == k) {\n        max_sum += a[index];\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    if(index == n) {\n        return 0;\n    }\n    long including_current = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    long excluding_current = max_sum_increasing_subseq(a, n, index + 1, k);\n    if(k == index) {\n        return std::max(including_current, excluding_current);\n    }\n    else {\n        return excluding_current;\n    }",
    "    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    for(long i = k+1; i < n; i++) {\n        if(a[i] > a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, k, i));\n        }\n    }\n    return sum + max;",
    "    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++){\n        sum += a[i];\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if(index < k) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return ans;",
    "\t// Write your code here\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max_sum) {\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum + a[k];",
    "    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    for(long i = k + 1; i < n; i++) {\n        if(a[i] > a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, k, i));\n        }\n    }\n    return sum + max_sum;",
    "    long sum = 0;\n    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    max_sum = sum + a[k];\n    return max_sum;",
    "    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;",
    "\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (i == k) {\n\t\t\tsum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t\telse if (a[i] < a[k]) {\n\t\t\tsum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn sum;",
    "\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong max_sum = 0;\n\tfor(long i = index; i < n; i++) {\n\t\tif(a[i] < a[k]) {\n\t\t\tmax_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn max_sum;",
    "\tif (index >= n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (i == k) {\n\t\t\tsum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t\telse {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn sum;",
    "    if(index == n - 1) {\n        if(k == n - 1) {\n            return a[index];\n        }\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index + 1; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i, k);\n            if(i == k) {\n                sum += a[index];\n            }\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if (index == n - 1) {\n        return a[index];\n    }\n    long sum = a[index];\n    for (long i = index + 1; i < n; i++) {\n        if (i == k) {\n            sum += a[i];\n            break;\n        }\n        if (a[i] > a[index]) {\n            sum += max_sum_increasing_subseq(a, n, i, k);\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long max_sum = 0;\n    for (long i = 0; i < index; i++) {\n        if (a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "    // Write your code here\n    long max = 0;\n    for(long i = index; i < k; i++){\n        if(a[i] < a[k]){\n            long temp = max_sum_increasing_subseq(a, n, i, k);\n            if(temp > max){\n                max = temp;\n            }\n        }\n    }\n    return max + a[k];",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    for(long i = k + 1; i < n; i++) {\n        if(a[i] > a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, k, i));\n        }\n    }\n    return sum + max;",
    "\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong including = 0;\n\tif (a[index] < a[k]) {\n\t\tincluding = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\tlong excluding = max_sum_increasing_subseq(a, n, index + 1, k);\n\treturn std::max(including, excluding);",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    long max_index = 0;\n    for(long i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum = max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max){\n                max = sum;\n                max_index = i;\n            }\n        }\n    }\n    return max + a[k];",
    "    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    if(k == n - 1) {\n        return sum;\n    }\n    for(long i = k + 1; i < n; i++) {\n        max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, k, i));\n    }\n    return sum + max_sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, i, i));\n        }\n    }\n    return sum + max;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    if(index > k) {\n        return INT_MIN;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return ans;",
    "    // Write your code here\n    long sum=0;\n    long max=0;\n    for(int i=index;i<k;i++)\n    {\n        sum=sum+a[i];\n        if(sum>max)\n        {\n            max=sum;\n        }\n    }\n    return max;",
    "    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if(index == k) {\n        sum = std::max(sum, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            sum = std::max(sum, a[index] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if (index < k) {\n        sum = std::max(sum, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if(index < k) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(a[index] > a[k]) {\n        long sum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "    if (index == n) {\n        return 0;\n    }\n    long including_k = 0;\n    if (k > index) {\n        including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(including_k, excluding_k);",
    "    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n        if (i == k) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[index]);\n        }\n    }\n    return sum;",
    "    if(index == n) return 0;\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long temp = max_sum_increasing_subseq(a, n, i + 1, k);\n            if(i == k) {\n                temp += a[i];\n            }\n            ans = std::max(ans, temp);\n        }\n    }\n    return ans;",
    "    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "    if (index == n) {\n        return 0;\n    }\n    if (index == k) {\n        return a[index];\n    }\n    long sum = 0;\n    for (long i = index; i < k; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return sum + a[k];",
    "    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "\t// Write your code here\n\tlong sum = 0;\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum = sum + a[i];\n\t\t}\n\t}\n\tsum = sum + a[k];\n\treturn sum;",
    "    // Write your code here\n    if(index == n)\n        return 0;\n    if(k == n)\n        return 0;\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return max_sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n            if(sum > max) {\n                max = sum;\n            }\n        }\n    }\n    return max + a[k];",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, a[k] + max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum;",
    "    long max_sum = 0;\n    long sum = 0;\n    long i = index;\n    while(i < k) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n        i++;\n    }\n    max_sum = sum + a[k];\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long with_k = 0;\n    if(k < n) {\n        with_k = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    long without_k = max_sum_increasing_subseq(a, n, index + 1, index + 1);\n    return std::max(with_k, without_k);",
    "    if (index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if (a[index] < a[k]) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong ans = 0;\n\tfor(long i = index; i < n; i++) {\n\t\tif(a[i] > a[index]) {\n\t\t\tans = std::max(ans, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t\t}\n\t}\n\tif(index < k) {\n\t\tans = std::max(ans, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n\t}\n\treturn ans;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    if (k > index) {\n        sum = std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    }\n    return sum;",
    "    if(index == n-1) {\n        return a[index];\n    }\n    long max_sum = 0;\n    for(long i = index+1; i <= k; i++) {\n        if(a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return a[index] + max_sum;",
    "\tif(index == n) {\n\t\treturn 0;\n\t}\n\tif(index == k) {\n\t\treturn a[index];\n\t}\n\tlong max_sum = 0;\n\tfor(long i = index + 1; i <= n; i++) {\n\t\tif(a[i] > a[index]) {\n\t\t\tmax_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[index]);\n\t\t}\n\t}\n\treturn max_sum;",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    if (a[index] < a[k]) {\n        sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum, sum2);",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    if(a[index] < a[k]) {\n        sum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    else {\n        sum = max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    return sum;",
    "    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, a[k] + max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (a[index] > a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    if(a[index] < a[k]) {\n        max_sum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, index + 1, k));\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    if(index == n) {\n        return 0;\n    }\n    long ans = max_sum_increasing_subseq(a, n, index + 1, k);\n    if(a[index] < a[k]) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return ans;",
    "    if (index == n) {\n        return 0;\n    }\n    long including_current = a[index];\n    long excluding_current = 0;\n    for (long i = index + 1; i < n; i++) {\n        if (a[i] > a[index] && i <= k) {\n            including_current += a[i];\n        }\n    }\n    excluding_current = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(including_current, excluding_current);",
    "    if (index == n - 1) {\n        return a[index];\n    }\n    long sum = 0;\n    for (long i = index + 1; i < n; i++) {\n        if (a[i] > a[index]) {\n            long temp = max_sum_increasing_subseq(a, n, i, k);\n            if (temp > sum) {\n                sum = temp;\n            }\n        }\n    }\n    if (a[k] > a[index]) {\n        sum += a[k];\n    }\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum1 = 0;\n    long sum2 = 0;\n    if (a[index] < a[k]) {\n        sum1 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum1, sum2);",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            long sum = a[i] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < index; i++) {\n        if (a[i] < a[index]) {\n            sum = max_sum_increasing_subseq(a, n, i, index);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum + a[index];",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(a[index] > a[k]) {\n        long sum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = index; i < k; i++){\n        sum += a[i];\n    }\n    max_sum = sum;\n    for(long i = k; i < n; i++){\n        sum = sum - a[i - k] + a[i];\n        if(sum > max_sum){\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[k]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[index]) {\n            sum = max_sum_increasing_subseq(a, n, i, index);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum + a[index];",
    "\t// Write your code here\n\tif (index == n) {\n\t\treturn 0;\n\t}\n\tif (index == k) {\n\t\treturn a[index];\n\t}\n\tlong sum = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (i == k) {\n\t\t\tsum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t\telse if (a[i] > a[index]) {\n\t\t\tsum = std::max(sum, a[index] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn sum;",
    "\t// Write your code here\n\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong ans = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (i == k) {\n\t\t\tans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t\telse {\n\t\t\tans = std::max(ans, max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn ans;",
    "    assert(index < n);\n    assert(k < n);\n    assert(k > index);\n    std::vector<long> dp(n, 0);\n    dp[0] = a[0];\n    for(long i = 1; i < n; i++) {\n        dp[i] = a[i];\n        for(long j = 0; j < i; j++) {\n            if(a[j] < a[i]) {\n                dp[i] = std::max(dp[i], dp[j] + a[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i <= index; i++) {\n        if(a[i] < a[k]) {\n            ans = std::max(ans, dp[i]);\n        }\n    }\n    return ans + a[k];",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    if(index < k) {\n        sum = std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tlong max_sum = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n\t\t\tif (sum > max_sum) {\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum;",
    "    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "\tlong sum = 0;\n\tlong max_sum = 0;\n\tfor(long i = 0; i < index; i++) {\n\t\tif(a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t\tif(sum > max_sum) {\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    if (a[index] < a[k]) {\n        sum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    else {\n        sum = max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    return sum;",
    "    // Write your code here\n    // Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    max = sum;\n    for(long i = k; i < n; i++) {\n        sum = sum - a[i-1] + a[i];\n        if(sum > max) {\n            max = sum;\n        }\n    }\n    return max;",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return max_sum;",
    "    // Write your code here\n    long sum=0;\n    long max=0;\n    for(long i=index;i<k;i++)\n    {\n        if(a[i]<a[k])\n        {\n            sum+=a[i];\n        }\n    }\n    sum+=a[k];\n    if(k+1<n)\n    {\n        max=max_sum_increasing_subseq(a,n,k+1,k+1);\n    }\n    if(sum>max)\n    {\n        max=sum;\n    }\n    return max;",
    "    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    max_sum = sum;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum1 = 0, sum2 = 0;\n    if(a[index] < a[k]) {\n        sum1 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum1, sum2);",
    "    // Write your code here\n    long dp[n+1][n+1];\n    for(long i=0;i<=n;i++)\n    {\n        for(long j=0;j<=n;j++)\n        {\n            dp[i][j]=0;\n        }\n    }\n    for(long i=0;i<=n;i++)\n    {\n        dp[i][i]=a[i];\n    }\n    for(long i=0;i<=n;i++)\n    {\n        for(long j=i+1;j<=n;j++)\n        {\n            if(a[j]>a[i])\n            {\n                dp[i][j]=dp[i][j-1]+a[j];\n            }\n            else\n            {\n                dp[i][j]=dp[i][j-1];\n            }\n        }\n    }\n    long max=0;\n    for(long i=0;i<=index;i++)\n    {\n        if(dp[i][k]>max)\n        {\n            max=dp[i][k];\n        }\n    }\n    return max;",
    "    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max) {\n                max = sum;\n            }\n        }\n    }\n    return max + a[k];",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, i, i));\n        }\n    }\n    return sum + max;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if (k > index) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            if(i == k) {\n                max_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n            }\n            else {\n                max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k));\n            }\n        }\n    }\n    return max_sum;",
    "    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < index; i++){\n        if(a[i] < a[k]){\n            sum += a[i];\n        }\n    }\n    max_sum = sum + a[k];\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_kth_element = 0;\n    if(a[index] < a[k]) {\n        sum_including_kth_element = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_kth_element = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_kth_element, sum_excluding_kth_element);",
    "    if(index == n) {\n        return 0;\n    }\n    if(index == k) {\n        return a[index];\n    }\n    long sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < index; i++){\n        if(a[i] < a[k]){\n            sum += a[i];\n        }\n    }\n    max_sum = sum + a[k];\n    return max_sum;",
    "    // Write your code here\n    long sum=0;\n    for(long i=index;i<k;i++)\n    {\n        sum+=a[i];\n    }\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;",
    "\tlong max_sum = 0;\n\tfor(long i = 0; i < index; i++) {\n\t\tif(a[i] < a[k]) {\n\t\t\tmax_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max_sum + a[k];",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            if(i == k) {\n                max_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n            } else {\n                max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k));\n            }\n        }\n    }\n    return max_sum;",
    "\tlong max_sum = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tmax_sum = sum + a[k];\n\treturn max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    // Write your code here\n    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, a[k] + max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum;",
    "\t// Write your code here\n\t// Return the maximum sum of increasing subsequence\n\tlong max = 0;\n\tfor (long i = index; i < k; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tlong temp = max_sum_increasing_subseq(a, n, i, k - 1);\n\t\t\tif (temp > max) {\n\t\t\t\tmax = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn max + a[k];",
    "\tlong max_sum = 0;\n\tfor(long i = 0; i < index; i++) {\n\t\tif(a[i] < a[k]) {\n\t\t\tmax_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max_sum + a[k];",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    if (a[index] < a[k]) {\n        sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum, sum1);",
    "    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long temp = max_sum_increasing_subseq(a, n, i + 1, k);\n            if(i == k) {\n                temp += a[i];\n            }\n            ans = std::max(ans, temp);\n        }\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long include = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    long exclude = max_sum_increasing_subseq(a, n, index + 1, k);\n    if(index < k) {\n        return std::max(include, exclude);\n    }\n    return exclude;",
    "    if(index == n) return 0;\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            long sum = a[i] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long include = a[index];\n    if (k != -1) {\n        include += a[k];\n    }\n    long exclude = max_sum_increasing_subseq(a, n, index + 1, k);\n    long include_next = max_sum_increasing_subseq(a, n, index + 1, index);\n    return std::max(include, std::max(exclude, include_next));",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    long max_sum_till_index = 0;\n    for(long i = 0; i < n; i++){\n        if(i == index){\n            sum = a[i];\n            max_sum_till_index = a[i];\n        }\n        else if(i < index){\n            if(a[i] < a[index]){\n                sum += a[i];\n                max_sum_till_index = sum;\n            }\n        }\n        else if(i > index && i < k){\n            if(a[i] < a[k]){\n                sum += a[i];\n                max_sum_till_index = sum;\n            }\n        }\n        else if(i == k){\n            sum += a[i];\n            max_sum_till_index = sum;\n        }\n        else if(i > k){\n            if(a[i] < a[k]){\n                sum += a[i];\n                max_sum_till_index = sum;\n            }\n        }\n        if(max_sum_till_index > max_sum){\n            max_sum = max_sum_till_index;\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            max_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if(k > index) {\n        max_sum = std::max(max_sum, a[k] + max_sum_increasing_subseq(a, n, k + 1, k));\n    }\n    return max_sum;"
  ]
}