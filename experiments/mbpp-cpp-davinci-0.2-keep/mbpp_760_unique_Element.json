{
  "name": "mbpp_760_unique_Element",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::unordered_map<long, int> m;\n    for(auto i : arr) {\n        m[i]++;\n    }\n    for(auto i : m) {\n        if(i.second > 1) {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1])\n            return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    if(arr.size() == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;",
    "    // Write your code here\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    if(s.size() == 1) {\n        return true;\n    }\n    return false;",
    "    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++)\n    {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;",
    "    // Write your code here\n    std::unordered_set<long> s;\n    for(auto i:arr)\n    {\n        s.insert(i);\n    }\n    if(s.size()==1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    std::set<long> s;\n    for (auto i : arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;",
    "    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    // Write your code here\n    if(arr.size()==1)\n        return true;\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size()-1;i++){\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;",
    "    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = arr.size();\n    if(n == 0) {\n        return false;\n    }\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    else\n    {\n        sort(arr.begin(), arr.end());\n        for(int i = 0; i < n-1; i++)\n        {\n            if(arr[i] == arr[i+1])\n                return false;\n        }\n        return true;\n    }",
    "    // Write your code here\n    std::unordered_set<long> s;\n    for(auto i:arr){\n        s.insert(i);\n    }\n    if(s.size()==1){\n        return true;\n    }\n    return false;",
    "    int n = arr.size();\n    if(n == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }",
    "    // Write your code here\n    std::unordered_set<long> s;\n    for(auto i:arr){\n        s.insert(i);\n    }\n    if(s.size()==1){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    // Write your code here\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size()-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n        {\n            return false;\n        }\n    }\n    return true;"
  ]
}