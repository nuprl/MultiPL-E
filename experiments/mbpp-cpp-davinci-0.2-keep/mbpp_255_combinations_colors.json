{
  "name": "mbpp_255_combinations_colors",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nstd::vector<std::string> combinations_colors(std::vector<std::string> l, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = combinations_colors;\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (1)) == (std::vector<std::string>({(std::tuple<std::string>)std::make_tuple(\"Red\"), (std::tuple<std::string>)std::make_tuple(\"Green\"), (std::tuple<std::string>)std::make_tuple(\"Blue\")})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (2)) == (std::vector<std::string>({(std::tuple<std::string, std::string>)std::make_tuple(\"Red\", \"Red\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Red\", \"Green\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Red\", \"Blue\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Green\", \"Green\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Green\", \"Blue\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Blue\", \"Blue\")})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (3)) == (std::vector<std::string>({(std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Red\", \"Red\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Red\", \"Green\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Red\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Green\", \"Green\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Green\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Blue\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Green\", \"Green\", \"Green\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Green\", \"Green\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Green\", \"Blue\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Blue\", \"Blue\", \"Blue\")})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < l.size(); i++) {\n        for(long j = 0; j < l.size(); j++) {\n            for(long k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                s = l[i] + l[j] + l[k];\n                result.push_back(s);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    while(std::next_permutation(temp.begin(), temp.end())) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for(int j = 0; j < result.size(); j++) {\n            for(int k = 0; k < n; k++) {\n                std::string s = result[j];\n                s[k] = l[i];\n                temp.push_back(s);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string temp62;\n    std::string",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0; i<l.size(); i++) {\n        for(int j=0; j<l.size(); j++) {\n            for(int k=0; k<l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::vector<std::string> temp;\n    std::string s;\n    for(int i=0;i<n;i++){\n        s = \"\";\n        for(int j=0;j<n;j++){\n            s = s + l[i];\n        }\n        temp.push_back(s);\n    }\n    for(int i=0;i<n;i++){\n        s = \"\";\n        for(int j=0;j<n;j++){\n            s = s + temp[j][i];\n        }\n        result.push_back(s);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::string temp = \"\";\n    for (int i = 0; i < n; i++) {\n        s += \"0\";\n    }\n    for (int i = 0; i < l.size(); i++) {\n        temp += l[i];\n    }\n    std::string temp2 = temp;\n    for (int i = 0; i < n; i++) {\n        temp += temp2;\n    }\n    for (int i = 0; i < pow(l.size(), n); i++) {\n        result.push_back(temp.substr(i*n, n));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string temp62;\n    std::string",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    while (std::next_permutation(temp.begin(), temp.end())) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += \"0\";\n    }\n    int i = 0;\n    while (i < pow(l.size(), n)) {\n        int j = n - 1;\n        while (j >= 0) {\n            s[j] = l[s[j] - '0'];\n            j--;\n        }\n        result.push_back(s);\n        i++;\n        int k = n - 1;\n        while (k >= 0) {\n            if (s[k] != l[l.size() - 1]) {\n                s[k] = l[s[k] - '0' + 1];\n                break;\n            } else {\n                s[k] = l[0];\n            }\n            k--;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::vector<int> v(n,0);\n    int i = 0;\n    while(i < n) {\n        if(v[i] < l.size()) {\n            s += l[v[i]];\n            if(i == n - 1) {\n                result.push_back(s);\n                s = \"\";\n                v[i]++;\n                i = 0;\n            } else {\n                i++;\n            }\n        } else {\n            v[i] = 0;\n            i--;\n            if(i >= 0) {\n                s = s.substr(0,s.size() - 1);\n                v[i]++;\n            }\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string temp;\n  std::string s = \"\";\n  for(int i = 0; i < n; i++) {\n    s += \"0\";\n  }\n  int i = 0;\n  while(i < pow(l.size(), n)) {\n    temp = s;\n    for(int j = 0; j < n; j++) {\n      result.push_back(l[temp[j] - '0']);\n    }\n    i++;\n    s = std::to_string(i);\n    while(s.size() < n) {\n      s = \"0\" + s;\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (int j = 0; j < result.size(); j++) {\n            for (int k = 0; k < n; k++) {\n                std::string temp = result[j];\n                temp.insert(k, l[i]);\n                temp_result.push_back(temp);\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tstd::string temp;\n\tlong i, j, k;\n\tfor (i = 0; i < n; i++) {\n\t\ttemp.push_back(l[i]);\n\t\tresult.push_back(temp);\n\t\ttemp.clear();\n\t}\n\tfor (i = 1; i < n; i++) {\n\t\tfor (j = 0; j < n; j++) {\n\t\t\ttemp.push_back(l[j]);\n\t\t\tfor (k = 0; k < result.size(); k++) {\n\t\t\t\tif (result[k].length() == i) {\n\t\t\t\t\tresult.push_back(result[k] + temp);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttemp.clear();\n\t\t}\n\t}\n\treturn result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::vector<int> v(n, 0);\n    while (true) {\n        s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        int i = n - 1;\n        while (i >= 0 && v[i] == l.size() - 1) {\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        v[i]++;\n        for (int j = i + 1; j < n; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<l.size();i++) {\n        for(int j=0;j<l.size();j++) {\n            for(int k=0;k<l.size();k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i=0; i<n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    while(std::next_permutation(temp.begin(), temp.end())) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<n;i++){\n        temp.append(l[i]);\n    }\n    result.push_back(temp);\n    for(int i=1;i<n;i++){\n        for(int j=0;j<n-i;j++){\n            temp.erase(temp.begin()+j);\n            temp.insert(temp.begin()+j,l[j+i]);\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i = n - 1;\n        while (i >= 0 && v[i] == l.size() - 1) {\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        v[i]++;\n        for (int j = i + 1; j < n; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0; i<l.size(); i++) {\n        temp = l[i];\n        for(int j=0; j<n; j++) {\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string s;\n  for (long i = 0; i < n; i++) {\n    s += \"0\";\n  }\n  for (long i = 0; i < std::pow(l.size(), n); i++) {\n    std::string temp = s;\n    for (long j = 0; j < n; j++) {\n      temp[j] = l[s[j] - '0'];\n    }\n    result.push_back(temp);\n    s[n - 1]++;\n    for (long j = n - 1; j > 0; j--) {\n      if (s[j] == l.size() + '0') {\n        s[j] = '0';\n        s[j - 1]++;\n      }\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s.clear();\n        int i = n - 1;\n        while (i >= 0 && v[i] == l.size() - 1) {\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        v[i]++;\n        for (int j = i + 1; j < n; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < l.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                temp = l[i] + \" \" + l[j] + \" \" + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (int j = 0; j < result.size(); j++) {\n            for (int k = 0; k < n; k++) {\n                std::string temp_string = result[j];\n                temp_string[k] = l[i];\n                temp_result.push_back(temp_string);\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i=0;i<n;i++)\n        s.push_back('0');\n    int i=0;\n    while(i<n){\n        if(s[i]=='0'){\n            s[i]='1';\n            i++;\n        }\n        else{\n            s[i]='0';\n            i--;\n        }\n        if(i==n){\n            std::string temp;\n            for(int j=0;j<n;j++){\n                if(s[j]=='1')\n                    temp.push_back(l[j]);\n            }\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            for (long k = 0; k < n; k++) {\n                ss << l[i] << \" \" << l[j] << \" \" << l[k];\n                ss >> s;\n                result.push_back(s);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i = n - 1;\n        while (i >= 0 && v[i] == l.size() - 1) {\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        v[i]++;\n        for (int j = i + 1; j < n; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for(long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for(long j = 0; j < result.size(); j++) {\n            for(long k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k, n));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            temp += l[i];\n        }\n        result.push_back(temp);\n        temp.clear();\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i = n - 1;\n        while (i >= 0 && v[i] == l.size() - 1) {\n            v[i] = 0;\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        v[i]++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string str;\n    std::string temp;\n    for(int i=0; i<n; i++) {\n        str += l[0];\n    }\n    result.push_back(str);\n    for(int i=1; i<l.size(); i++) {\n        temp = str;\n        for(int j=0; j<n; j++) {\n            temp[j] = l[i];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            s += l[i];\n        }\n        result.push_back(s);\n        s = \"\";\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k + 1, n - k - 1));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < l.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                ss << l[i] << l[j] << l[k];\n                s = ss.str();\n                result.push_back(s);\n                ss.str(std::string());\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i = n - 1;\n        while (i >= 0 && v[i] == l.size() - 1) {\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        v[i]++;\n        for (int j = i + 1; j < n; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            temp = temp.substr(0, i) + l[j] + temp.substr(i + 1, n - i);\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            std::string s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    while (std::next_permutation(temp.begin(), temp.end())) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for (long i = 0; i < l.size(); i++) {\n        for (long j = 0; j < l.size(); j++) {\n            for (long k = 0; k < l.size(); k++) {\n                ss << l[i] << l[j] << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string temp;\n  std::vector<int> v(n, 0);\n  int i = 0;\n  while (i < n) {\n    if (v[i] < l.size()) {\n      temp += l[v[i]];\n      i++;\n    } else {\n      i--;\n      if (i >= 0) {\n        v[i]++;\n        temp.pop_back();\n      }\n    }\n    if (i == n) {\n      result.push_back(temp);\n      temp.pop_back();\n      v[i - 1]++;\n      i--;\n    }\n  }\n  return result;",
    "  std::vector<std::string> result;\n  std::string temp;\n  for(int i=0;i<l.size();i++) {\n    for(int j=0;j<l.size();j++) {\n      for(int k=0;k<l.size();k++) {\n        temp = \"(\" + l[i] + \",\" + l[j] + \",\" + l[k] + \")\";\n        result.push_back(temp);\n      }\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k, n - k));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    std::string temp;\n    for(int i=0; i<l.size(); i++) {\n        s = l[i];\n        for(int j=0; j<n; j++) {\n            ss << s;\n        }\n        ss >> temp;\n        result.push_back(temp);\n        ss.clear();\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::string temp = \"\";\n    for(int i = 0; i < n; i++) {\n        s += \" \";\n    }\n    for(int i = 0; i < l.size(); i++) {\n        temp = s;\n        temp[0] = l[i][0];\n        result.push_back(temp);\n    }\n    for(int i = 1; i < n; i++) {\n        std::vector<std::string> temp_result;\n        for(int j = 0; j < result.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                temp = result[j];\n                temp[i] = l[k][0];\n                temp_result.push_back(temp);\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp2;\n    for(int i = 0; i < l.size(); i++) {\n        temp = l[i];\n        result.push_back(temp);\n        for(int j = i+1; j < l.size(); j++) {\n            temp2 = temp + l[j];\n            result.push_back(temp2);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for(int i = 0; i < n; i++) {\n        s += l[i];\n    }\n    result.push_back(s);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> res;\n    std::string temp;\n    for(long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    res.push_back(temp);\n    for(long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_res = res;\n        for(long j = 0; j < temp_res.size(); j++) {\n            for(long k = 0; k < n; k++) {\n                temp = temp_res[j];\n                temp[k] = l[i];\n                res.push_back(temp);\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            s += l[i];\n        }\n        result.push_back(s);\n        s = \"\";\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                std::string temp = result[j];\n                temp[k] = l[i][0];\n                temp_result.push_back(temp);\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i = n - 1;\n        while (i >= 0 && v[i] == l.size() - 1) {\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        v[i]++;\n        for (int j = i + 1; j < n; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            temp = temp + l[j];\n        }\n        result.push_back(temp);\n        temp = \"\";\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<n;i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for(int i=1;i<l.size();i++) {\n        std::vector<std::string> temp_result;\n        for(int j=0;j<result.size();j++) {\n            for(int k=0;k<n;k++) {\n                std::string temp = result[j];\n                temp[k] = l[i][0];\n                temp_result.push_back(temp);\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for (int j = 0; j < result.size(); j++) {\n            for (int k = 0; k < n; k++) {\n                temp.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k));\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> res;\n    std::string s;\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    res.push_back(s);\n    for (long i = 1; i < l.size(); i++) {\n        std::string s;\n        for (long j = 0; j < n; j++) {\n            s += l[i];\n        }\n        res.push_back(s);\n    }\n    return res;",
    "    std::vector<std::string> res;\n    std::string temp;\n    std::stringstream ss;\n    for(int i=0;i<l.size();i++){\n        for(int j=0;j<l.size();j++){\n            for(int k=0;k<l.size();k++){\n                ss<<l[i]<<\" \"<<l[j]<<\" \"<<l[k];\n                ss>>temp;\n                res.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    for(long i = n - 1; i >= 0; i--) {\n        if(l[i] != l[n - 1]) {\n            temp = temp.substr(0, i);\n            temp += l[n - 1];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < l.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                temp = l[i] + \" \" + l[j] + \" \" + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += \" \";\n    }\n    combinations_colors_helper(l, n, 0, s, result);\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (long i = 0; i < n; i++) {\n        s += \" \";\n    }\n    for (long i = 0; i < l.size(); i++) {\n        for (long j = 0; j < l.size(); j++) {\n            for (long k = 0; k < l.size(); k++) {\n                for (long m = 0; m < l.size(); m++) {\n                    s[0] = l[i][0];\n                    s[1] = l[j][0];\n                    s[2] = l[k][0];\n                    s[3] = l[m][0];\n                    result.push_back(s);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(long i = 0; i < n; i++) {\n        s += l[i];\n    }\n    result.push_back(s);\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            if(i != j) {\n                s = l[i] + l[j];\n                result.push_back(s);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<std::string>::iterator it;\n    for (it = l.begin(); it != l.end(); it++) {\n        s = *it;\n        result.push_back(s);\n    }\n    for (int i = 1; i < n; i++) {\n        std::vector<std::string> temp;\n        for (it = l.begin(); it != l.end(); it++) {\n            for (int j = 0; j < result.size(); j++) {\n                s = result[j] + *it;\n                temp.push_back(s);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                std::string s = result[j];\n                s[k] = l[i][0];\n                temp.push_back(s);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += \"0\";\n    }\n    int i = 0;\n    while (i < pow(l.size(), n)) {\n        std::string t = s;\n        std::string temp = \"\";\n        for (int j = 0; j < n; j++) {\n            temp += l[t[j] - '0'];\n        }\n        result.push_back(temp);\n        i++;\n        int k = n - 1;\n        while (k >= 0) {\n            if (t[k] == '0') {\n                t[k] = '1';\n                break;\n            }\n            else {\n                t[k] = '0';\n                k--;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for(long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for(long j = 0; j < result.size(); j++) {\n            std::string temp_str = result[j];\n            for(long k = 0; k < n; k++) {\n                std::string temp_str_2 = temp_str;\n                temp_str_2[k] = l[i][0];\n                temp_result.push_back(temp_str_2);\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<n;i++){\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for(int i=1;i<l.size();i++){\n        std::vector<std::string> temp_result;\n        for(int j=0;j<result.size();j++){\n            for(int k=0;k<n;k++){\n                temp_result.push_back(result[j].substr(0,k)+l[i]+result[j].substr(k+1,n-k-1));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp_result;\n    std::string temp_result_final;\n    std::string temp_result_final_final;\n    std::string temp_result_final_final_final;\n    std::string temp_result_final_final_final_final;\n    std::string temp_result_final_final_final_final_final;\n    std::string temp_result_final_final_final_final_final_final;\n    std::string temp_result_final_final_final_final_final_final_final;\n    std::string temp_result_final_final_final_final_final_final_final_final;\n    std::string temp_result_final_final_final_final_final_final_final_final_final;\n    std::string temp_result_final_final_final_final_final_final_final_final_final_final;\n    std::string temp_result_final_final_final_final_final_final_final_final_final_final_final;\n    std::string temp_result_final_final_final_final_final_final_final_final_final_final_final_final;\n    std::string temp_result_final_final_final_final_final_final_final_final_final_final_final_final_final;\n    std::string temp_result_final_final_final_final_final_final_final_final_final_final_final_final_final_final;\n    std::string temp_result_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final;\n    std::string temp_result_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final;\n    std::string temp_result_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final;\n    std::string temp_result_final_final_final_final_final_final_final_final_",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<n;i++){\n        temp.append(l[i]);\n    }\n    result.push_back(temp);\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            temp.clear();\n            for(int k=0;k<n;k++){\n                if(k==i){\n                    temp.append(l[j]);\n                }\n                else{\n                    temp.append(l[k]);\n                }\n            }\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<n;i++){\n        temp+=l[0];\n    }\n    result.push_back(temp);\n    for(int i=1;i<l.size();i++){\n        std::vector<std::string> temp_result;\n        for(int j=0;j<result.size();j++){\n            for(int k=0;k<n;k++){\n                temp_result.push_back(result[j].substr(0,k)+l[i]+result[j].substr(k+1,n-k-1));\n            }\n        }\n        result=temp_result;\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tstd::string temp;\n\tfor (long i = 0; i < l.size(); i++) {\n\t\ttemp = l[i];\n\t\tfor (long j = 0; j < n; j++) {\n\t\t\tresult.push_back(temp);\n\t\t}\n\t}\n\treturn result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n);\n    std::iota(v.begin(), v.end(), 0);\n    do {\n        for (auto i : v) {\n            s += l[i];\n        }\n        result.push_back(s);\n        s.clear();\n    } while (std::next_permutation(v.begin(), v.end()));\n    return result;",
    "    std::vector<std::string> combinations;\n    std::string combination;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        combination += l[i];\n    }\n    combinations.push_back(combination);\n    for (long i = 0; i < n; i++) {\n        temp = combination;\n        for (long j = 0; j < n; j++) {\n            if (j == i) {\n                temp[j] = l[1];\n            }\n            else {\n                temp[j] = l[0];\n            }\n        }\n        combinations.push_back(temp);\n    }\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            temp = temp.substr(0, i) + l[j] + temp.substr(i + 1);\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            temp = l[j];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp_result;\n    for(int i=0; i<l.size(); i++) {\n        temp = l[i];\n        for(int j=0; j<n; j++) {\n            temp_result += temp;\n        }\n        result.push_back(temp_result);\n        temp_result.clear();\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::vector<std::string>::iterator it;\n    for (int i = 0; i < n; i++) {\n        for (it = l.begin(); it != l.end(); it++) {\n            temp = *it;\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string s = \"\";\n  std::function<void(long)> combinations_colors_helper = [&](long idx) {\n    if (idx == n) {\n      result.push_back(s);\n      return;\n    }\n    for (long i = 0; i < l.size(); ++i) {\n      s += l[i];\n      combinations_colors_helper(idx + 1);\n      s.pop_back();\n    }\n  };\n  combinations_colors_helper(0);\n  return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (long i = 1; i < l.size(); i++) {\n        std::string s;\n        for (long j = 0; j < n; j++) {\n            s += l[i];\n        }\n        result.push_back(s);\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string s = \"\";\n  std::vector<std::string> temp;\n  for(int i = 0; i < l.size(); i++) {\n    temp.push_back(l[i]);\n  }\n  for(int i = 0; i < n; i++) {\n    s = s + l[i];\n  }\n  result.push_back(s);\n  while(std::next_permutation(temp.begin(), temp.end())) {\n    s = \"\";\n    for(int i = 0; i < n; i++) {\n      s = s + temp[i];\n    }\n    result.push_back(s);\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (long i = 0; i < n; i++) {\n        for (auto j : l) {\n            s += j;\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string temp;\n  for (long i = 0; i < n; i++) {\n    temp += l[0];\n  }\n  result.push_back(temp);\n  for (long i = 1; i < l.size(); i++) {\n    std::vector<std::string> temp_result;\n    for (long j = 0; j < result.size(); j++) {\n      for (long k = 0; k < n; k++) {\n        temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k, n - k));\n      }\n    }\n    result = temp_result;\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i=0;i<n;i++){\n        s+=l[0];\n    }\n    result.push_back(s);\n    for(int i=0;i<n;i++){\n        for(int j=0;j<l.size();j++){\n            s[i]=l[j];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < l.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string temp;\n  for (int i = 0; i < n; i++) {\n    temp += l[0];\n  }\n  result.push_back(temp);\n  for (int i = 1; i < l.size(); i++) {\n    int j = 0;\n    while (j < result.size()) {\n      result.push_back(result[j]);\n      result[j] += l[i];\n      j++;\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                ss << l[i] << \" \" << l[j] << \" \" << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::vector<int> indices(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            temp += l[indices[i]];\n        }\n        result.push_back(temp);\n        temp.clear();\n        int i = n - 1;\n        while (i >= 0 && indices[i] == l.size() - 1) {\n            indices[i] = 0;\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        indices[i]++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; ++i) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for(int j = 0; j < result.size(); j++) {\n            for(int k = 0; k < n; k++) {\n                std::string s = result[j];\n                s[k] = l[i][0];\n                temp.push_back(s);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0; i<n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    for(int i=0; i<n; i++) {\n        for(int j=0; j<l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < l.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                ss << l[i] << \" \" << l[j] << \" \" << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                ss << l[i] << l[j] << l[k];\n                result.push_back(ss.str());\n                ss.str(\"\");\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    while (std::next_permutation(temp.begin(), temp.end())) {\n        result.push_back(temp);\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string temp;\n  std::vector<std::string>::iterator it;\n  for(int i=0;i<l.size();i++){\n    for(int j=0;j<l.size();j++){\n      for(int k=0;k<l.size();k++){\n        temp = l[i] + \" \" + l[j] + \" \" + l[k];\n        result.push_back(temp);\n      }\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for (int j = 0; j < result.size(); j++) {\n            for (int k = 0; k < n; k++) {\n                std::string s = result[j];\n                s[k] = l[i];\n                temp.push_back(s);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for(int j = 0; j < result.size(); j++) {\n            for(int k = 0; k < n; k++) {\n                std::string s = result[j];\n                s[k] = l[i][0];\n                temp.push_back(s);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::string temp = \"\";\n    for (long i = 0; i < n; i++) {\n        s += \"0\";\n    }\n    long count = 0;\n    while (count < pow(l.size(), n)) {\n        for (long i = 0; i < n; i++) {\n            temp += l[s[i] - '0'];\n        }\n        result.push_back(temp);\n        temp = \"\";\n        s = increment(s, l.size());\n        count++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < l.size(); j++) {\n            std::string s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v;\n    for(int i=0;i<n;i++)\n        v.push_back(0);\n    while(1){\n        for(int i=0;i<n;i++)\n            s+=l[v[i]];\n        result.push_back(s);\n        s.clear();\n        int i;\n        for(i=n-1;i>=0;i--){\n            if(v[i]!=l.size()-1){\n                v[i]++;\n                break;\n            }\n            else\n                v[i]=0;\n        }\n        if(i==-1)\n            break;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<std::string>::iterator it;\n    for(int i=0;i<n;i++){\n        s.append(\" \");\n    }\n    for(int i=0;i<l.size();i++){\n        s.replace(0,1,l[i]);\n        result.push_back(s);\n    }\n    for(int i=1;i<n;i++){\n        for(int j=0;j<l.size();j++){\n            for(it=result.begin();it!=result.end();it++){\n                s=(*it);\n                s.replace(i,1,l[j]);\n                result.push_back(s);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 1; i < l.size(); i++) {\n        int j = 0;\n        while(j < result.size()) {\n            s = result[j];\n            for(int k = 0; k < n; k++) {\n                s[k] = l[i];\n                result.push_back(s);\n            }\n            j++;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < l.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                ss << l[i] << \" \" << l[j] << \" \" << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string s;\n  std::sort(l.begin(), l.end());\n  do {\n    for (int i = 0; i < n; i++) {\n      s += l[i];\n    }\n    result.push_back(s);\n    s = \"\";\n  } while (std::next_permutation(l.begin(), l.end()));\n  return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (long i = 0; i < n; i++) {\n        s += \" \";\n    }\n    std::string temp = \"\";\n    for (long i = 0; i < l.size(); i++) {\n        temp += l[i];\n        temp += \" \";\n    }\n    for (long i = 0; i < n; i++) {\n        s += temp;\n    }\n    std::stringstream ss(s);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; ++i) {\n            s += l[i];\n        }\n        result.push_back(s);\n        s = \"\";\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            temp += l[j];\n        }\n        result.push_back(temp);\n        temp = \"\";\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for (int j = 0; j < result.size(); j++) {\n            for (int k = 0; k < n; k++) {\n                std::string t = result[j];\n                t[k] = l[i][0];\n                temp.push_back(t);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 1; i < l.size(); i++) {\n        for (int j = 0; j < result.size(); j++) {\n            std::string temp = result[j];\n            for (int k = 0; k < n; k++) {\n                if (temp[k] == l[i-1]) {\n                    temp[k] = l[i];\n                    result.push_back(temp);\n                    temp[k] = l[i-1];\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < l.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for(long i = 0; i < l.size(); i++) {\n        for(long j = 0; j < l.size(); j++) {\n            for(long k = 0; k < l.size(); k++) {\n                ss << l[i] << \" \" << l[j] << \" \" << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string s;\n    for(int i=0; i<l.size(); i++){\n        s = l[i];\n        for(int j=0; j<n; j++){\n            temp += s;\n        }\n        result.push_back(temp);\n        temp.clear();\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::vector<int> v;\n    for(int i = 0; i < n; i++) {\n        v.push_back(0);\n    }\n    while(true) {\n        for(int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for(i = n - 1; i >= 0; i--) {\n            if(v[i] < l.size() - 1) {\n                v[i]++;\n                break;\n            }\n            else {\n                v[i] = 0;\n            }\n        }\n        if(i < 0) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for(long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for(long j = 0; j < result.size(); j++) {\n            std::string s = result[j];\n            for(long k = 0; k < n; k++) {\n                std::string t = s;\n                t[k] = l[i][0];\n                temp.push_back(t);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < l.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                ss << l[i] << \" \" << l[j] << \" \" << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0; i<n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for(int i=1; i<l.size(); i++) {\n        int len = result.size();\n        for(int j=0; j<len; j++) {\n            std::string temp = result[j];\n            for(int k=0; k<n; k++) {\n                result.push_back(temp);\n            }\n        }\n        for(int j=0; j<result.size(); j++) {\n            for(int k=0; k<n; k++) {\n                result[j][k] = l[i];\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::vector<int> v(n);\n    for(int i = 0; i < n; i++) {\n        v[i] = 0;\n    }\n    while(true) {\n        for(int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for(i = 0; i < n; i++) {\n            if(v[i] < l.size() - 1) {\n                v[i]++;\n                break;\n            } else {\n                v[i] = 0;\n            }\n        }\n        if(i == n) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for(int i = 1; i < l.size(); i++) {\n        int j = 0;\n        while(j < result.size()) {\n            temp = result[j];\n            for(int k = 0; k < n; k++) {\n                temp[k] = l[i];\n                result.push_back(temp);\n            }\n            j++;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < l.size(); i++) {\n        temp = l[i];\n        result.push_back(temp);\n        for (int j = i+1; j < l.size(); j++) {\n            temp = temp + l[j];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i = n - 1;\n        while (i >= 0 && v[i] == l.size() - 1) {\n            v[i] = 0;\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        v[i]++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for(int j = 0; j < result.size(); j++) {\n            std::string s = result[j];\n            for(int k = 0; k < n; k++) {\n                s[k] = l[i];\n                temp.push_back(s);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for(int j = 0; j < result.size(); j++) {\n            for(int k = 0; k < n; k++) {\n                std::string s = result[j];\n                s[k] = l[i][0];\n                temp.push_back(s);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    std::string s1 = \"\";\n    for (long i = 0; i < n; i++) {\n        s1 += l[1];\n    }\n    result.push_back(s1);\n    std::string s2 = \"\";\n    for (long i = 0; i < n; i++) {\n        s2 += l[2];\n    }\n    result.push_back(s2);\n    std::string s3 = \"\";\n    for (long i = 0; i < n; i++) {\n        s3 += l[3];\n    }\n    result.push_back(s3);\n    std::string s4 = \"\";\n    for (long i = 0; i < n; i++) {\n        s4 += l[4];\n    }\n    result.push_back(s4);\n    std::string s5 = \"\";\n    for (long i = 0; i < n; i++) {\n        s5 += l[5];\n    }\n    result.push_back(s5);\n    std::string s6 = \"\";\n    for (long i = 0; i < n; i++) {\n        s6 += l[6];\n    }\n    result.push_back(s6);\n    std::string s7 = \"\";\n    for (long i = 0; i < n; i++) {\n        s7 += l[7];\n    }\n    result.push_back(s7);\n    std::string s8 = \"\";\n    for (long i = 0; i < n; i++) {\n        s8 += l[8];\n    }\n    result.push_back(s8);\n    std::string s9 = \"\";\n    for (long i = 0; i < n; i++) {\n        s9 += l[9];\n    }\n    result.push_back(s9);\n    std::string s10 = \"\";\n    for",
    "    std::vector<std::string> combinations;\n    std::string combination;\n    for (long i = 0; i < n; i++) {\n        combination += l[i];\n    }\n    combinations.push_back(combination);\n    for (long i = n - 1; i >= 0; i--) {\n        if (l[i] != l[n - 1]) {\n            combination = combination.substr(0, i) + l[n - 1] + combination.substr(i + 1, n - i - 1);\n            combinations.push_back(combination);\n        }\n    }\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<l.size();i++) {\n        for(int j=0;j<l.size();j++) {\n            for(int k=0;k<l.size();k++) {\n                temp = l[i]+l[j]+l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<l.size();i++){\n        temp+=l[i];\n    }\n    for(int i=0;i<temp.size();i++){\n        for(int j=i+1;j<temp.size();j++){\n            std::string temp1;\n            temp1+=temp[i];\n            temp1+=temp[j];\n            result.push_back(temp1);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i = n - 1;\n        while (i >= 0 && v[i] == l.size() - 1) {\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        v[i]++;\n        for (int j = i + 1; j < n; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i = n - 1;\n        while (i >= 0 && v[i] == l.size() - 1) {\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        v[i]++;\n        for (int j = i + 1; j < n; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k, n - k));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = 0; i < n; i++) {\n            if (v[i] != l.size() - 1) {\n                v[i]++;\n                break;\n            }\n            else {\n                v[i] = 0;\n            }\n        }\n        if (i == n) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i = n - 1;\n        while (i >= 0 && v[i] == l.size() - 1) {\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        v[i]++;\n        for (int j = i + 1; j < n; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i=0; i<n; i++)\n    {\n        s.append(l[i]);\n    }\n    result.push_back(s);\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for (int j = 0; j < result.size(); j++) {\n            for (int k = 0; k < n; k++) {\n                std::string s = result[j];\n                s[k] = l[i][0];\n                temp.push_back(s);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    std::string temp;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                ss << l[i] << \" \" << l[j] << \" \" << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    long i, j;\n    for (i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (i = 1; i < l.size(); i++) {\n        for (j = 0; j < result.size(); j++) {\n            result.push_back(result[j] + l[i]);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k, n - k));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<l.size();i++)\n    {\n        temp = l[i];\n        for(int j=0;j<l.size();j++)\n        {\n            temp += l[j];\n            for(int k=0;k<l.size();k++)\n            {\n                temp += l[k];\n                result.push_back(temp);\n                temp.pop_back();\n            }\n            temp.pop_back();\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tstd::string temp;\n\tfor (long i = 0; i < n; i++) {\n\t\ttemp += l[i];\n\t}\n\tresult.push_back(temp);\n\twhile (std::next_permutation(temp.begin(), temp.end())) {\n\t\tresult.push_back(temp);\n\t}\n\treturn result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 1; i < l.size(); i++) {\n        int len = result.size();\n        for (int j = 0; j < len; j++) {\n            std::string temp = result[j];\n            for (int k = 0; k < n; k++) {\n                result.push_back(temp);\n                result[result.size() - 1][k] = l[i][0];\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp_result;\n    for (int i = 0; i < l.size(); i++) {\n        temp = l[i];\n        for (int j = 0; j < n; j++) {\n            temp_result += temp;\n        }\n        result.push_back(temp_result);\n        temp_result.clear();\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < result.size(); k++) {\n                std::string s = result[k];\n                s[i] = l[j][0];\n                result.push_back(s);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for(int j = 0; j < result.size(); j++) {\n            for(int k = 0; k < n; k++) {\n                temp.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k, n-k));\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            for(int k = 0; k < n; k++) {\n                ss << l[i] << l[j] << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (int j = 0; j < result.size(); j++) {\n            for (int k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k, n - k));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    std::stringstream ss1;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54",
    "    std::vector<std::string> result;\n    std::string str;\n    for (long i = 0; i < n; i++) {\n        str += l[i];\n    }\n    result.push_back(str);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            if (i != j) {\n                str = \"\";\n                for (long k = 0; k < n; k++) {\n                    if (k == i) {\n                        str += l[j];\n                    } else if (k == j) {\n                        str += l[i];\n                    } else {\n                        str += l[k];\n                    }\n                }\n                result.push_back(str);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for(int j = 0; j < result.size(); j++) {\n            for(int k = 0; k < n; k++) {\n                std::string temp_str = result[j];\n                temp_str[k] = l[i];\n                temp.push_back(temp_str);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    while (std::next_permutation(temp.begin(), temp.end())) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < l.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i = n - 1;\n        while (i >= 0 && v[i] == l.size() - 1) {\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        v[i]++;\n        for (int j = i + 1; j < n; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            s += l[j];\n        }\n    }\n    result.push_back(s);\n    return result;",
    "\tstd::vector<std::string> result;\n\tstd::string temp;\n\tfor (long i = 0; i < n; i++) {\n\t\ttemp += l[i];\n\t}\n\tresult.push_back(temp);\n\tfor (long i = n; i < l.size(); i++) {\n\t\tfor (long j = 0; j < n; j++) {\n\t\t\ttemp[j] = l[i];\n\t\t\tresult.push_back(temp);\n\t\t}\n\t}\n\treturn result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            std::string s = result[i];\n            s[n - i - 1] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string str;\n    for(int i = 0; i < n; i++) {\n        temp.append(\" \");\n    }\n    for(int i = 0; i < l.size(); i++) {\n        str = temp;\n        str.replace(0, 1, l[i]);\n        result.push_back(str);\n    }\n    for(int i = 1; i < n; i++) {\n        std::vector<std::string> temp_result;\n        for(int j = 0; j < result.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                str = result[j];\n                str.replace(i, 1, l[k]);\n                temp_result.push_back(str);\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            temp[i] = l[j];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> combinations;\n    std::string combination;\n    std::string colors = \"\";\n    for (int i = 0; i < l.size(); i++) {\n        colors += l[i];\n    }\n    for (int i = 0; i < pow(colors.length(), n); i++) {\n        combination = \"\";\n        for (int j = 0; j < n; j++) {\n            combination += colors[(i / (int) pow(colors.length(), j)) % colors.length()];\n        }\n        combinations.push_back(combination);\n    }\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < l.size(); j++) {\n            temp += l[j];\n        }\n        result.push_back(temp);\n        temp = \"\";\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp1;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string",
    "  std::vector<std::string> result;\n  std::string s = \"\";\n  for (long i = 0; i < n; i++) {\n    s += l[i];\n  }\n  result.push_back(s);\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0; i<n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for(int i=1; i<l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for(int j=0; j<result.size(); j++) {\n            std::string temp = result[j];\n            for(int k=0; k<n; k++) {\n                temp[k] = l[i];\n                temp_result.push_back(temp);\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::vector<std::string>::iterator it;\n    for(int i=0;i<n;i++)\n    {\n        for(it=l.begin();it!=l.end();it++)\n        {\n            temp.append(*it);\n        }\n        result.push_back(temp);\n        temp.clear();\n    }\n    return result;",
    "    std::vector<std::string> combinations;\n    std::string combination;\n    std::vector<std::string>::iterator it;\n    for (int i = 0; i < n; i++) {\n        for (it = l.begin(); it != l.end(); it++) {\n            combination += *it;\n        }\n        combinations.push_back(combination);\n        combination = \"\";\n    }\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (int j = 0; j < result.size(); j++) {\n            for (int k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k, n - k));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s.clear();\n        int i;\n        for (i = n - 1; i >= 0; i--) {\n            if (v[i] < l.size() - 1) {\n                v[i]++;\n                break;\n            }\n            else {\n                v[i] = 0;\n            }\n        }\n        if (i < 0) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string str;\n    for(int i = 0; i < l.size(); i++) {\n        str = l[i];\n        for(int j = 0; j < n; j++) {\n            temp += str;\n        }\n        result.push_back(temp);\n        temp = \"\";\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::sort(l.begin(), l.end());\n    combinations_colors_helper(l, n, 0, s, result);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string s;\n    for(int i=0;i<l.size();i++){\n        s=l[i];\n        for(int j=0;j<l.size();j++){\n            temp=s+l[j];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string str = \"\";\n    for (int i = 0; i < n; i++) {\n        str += l[0];\n    }\n    result.push_back(str);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for (int j = 0; j < result.size(); j++) {\n            for (int k = 0; k < n; k++) {\n                std::string str = result[j];\n                str[k] = l[i][0];\n                temp.push_back(str);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[i];\n    }\n    result.push_back(s);\n    for (int i = 1; i < l.size(); i++) {\n        for (int j = 0; j < n; j++) {\n            s = s.substr(0, j) + l[i] + s.substr(j + 1);\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < n; j++) {\n            temp += l[i];\n        }\n        result.push_back(temp);\n        temp = \"\";\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            temp += l[i];\n        }\n        result.push_back(temp);\n        temp = \"\";\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += l[i];\n    }\n    result.push_back(s);\n    return result;",
    "    std::vector<std::string> res;\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    res.push_back(s);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            std::string s = res[i];\n            s[i] = l[j][0];\n            res.push_back(s);\n        }\n    }\n    return res;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n,0);\n    int i = 0;\n    while (i < n) {\n        if (v[i] < l.size()) {\n            s.append(l[v[i]]);\n            i++;\n        } else {\n            v[i] = 0;\n            i--;\n            if (i >= 0) {\n                s.erase(s.size() - l[v[i]].size(), l[v[i]].size());\n                v[i]++;\n            }\n        }\n        if (i == n) {\n            result.push_back(s);\n            s.erase(s.size() - l[v[i-1]].size(), l[v[i-1]].size());\n            v[i-1]++;\n            i--;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0; i<l.size(); i++) {\n        for(int j=0; j<l.size(); j++) {\n            for(int k=0; k<l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                temp = l[i] + \" \" + l[j] + \" \" + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for(long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for(long j = 0; j < result.size(); j++) {\n            for(long k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k + 1, n - k - 1));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string str = \"\";\n    std::vector<int> v(n, 0);\n    int i = 0;\n    while (i < n) {\n        if (v[i] < l.size()) {\n            str += l[v[i]];\n            if (i == n - 1) {\n                result.push_back(str);\n                str = \"\";\n            }\n            i++;\n        } else {\n            v[i] = 0;\n            i--;\n            if (i >= 0) {\n                str.pop_back();\n                v[i]++;\n            }\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string temp;\n  for (long i = 0; i < l.size(); i++) {\n    for (long j = 0; j < n; j++) {\n      temp = temp + l[i];\n    }\n    result.push_back(temp);\n    temp = \"\";\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k + 1, n - k - 1));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "\tstd::vector<std::string> combinations;\n\tstd::string s;\n\tstd::vector<std::string>::iterator it;\n\tfor(int i=0;i<n;i++) {\n\t\tfor(it=l.begin();it!=l.end();it++) {\n\t\t\ts.append(*it);\n\t\t}\n\t\tcombinations.push_back(s);\n\t\ts.clear();\n\t}\n\treturn combinations;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<std::string>::iterator it;\n    for (it = l.begin(); it != l.end(); it++) {\n        s = *it;\n        result.push_back(s);\n    }\n    for (int i = 1; i < n; i++) {\n        std::vector<std::string> temp;\n        for (it = l.begin(); it != l.end(); it++) {\n            s = *it;\n            for (int j = 0; j < result.size(); j++) {\n                temp.push_back(result[j] + s);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<n;i++)\n    {\n        temp+=l[0];\n    }\n    result.push_back(temp);\n    for(int i=1;i<l.size();i++)\n    {\n        int j=0;\n        while(j<result.size())\n        {\n            std::string temp=result[j];\n            for(int k=0;k<n;k++)\n            {\n                result.push_back(temp);\n            }\n            j++;\n        }\n        for(int k=0;k<result.size();k++)\n        {\n            result[k][k/l.size()]=l[i];\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::function<void(long)> helper = [&](long i) {\n        if (i == n) {\n            result.push_back(s);\n            return;\n        }\n        for (auto c : l) {\n            s.push_back(c);\n            helper(i + 1);\n            s.pop_back();\n        }\n    };\n    helper(0);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k, n - k));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    int i = 0;\n    while (i < n) {\n        if (v[i] < l.size()) {\n            s += l[v[i]];\n            i++;\n        } else {\n            v[i] = 0;\n            i--;\n            if (i >= 0) {\n                s.erase(s.size() - l[v[i]].size(), l[v[i]].size());\n                v[i]++;\n            }\n        }\n        if (i == n) {\n            result.push_back(s);\n            s.erase(s.size() - l[v[i - 1]].size(), l[v[i - 1]].size());\n            v[i - 1]++;\n            i--;\n        }\n    }\n    return result;"
  ]
}