{
  "name": "mbpp_255_combinations_colors",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nstd::vector<std::string> combinations_colors(std::vector<std::string> l, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = combinations_colors;\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (1)) == (std::vector<std::string>({(std::tuple<std::string>)std::make_tuple(\"Red\"), (std::tuple<std::string>)std::make_tuple(\"Green\"), (std::tuple<std::string>)std::make_tuple(\"Blue\")})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (2)) == (std::vector<std::string>({(std::tuple<std::string, std::string>)std::make_tuple(\"Red\", \"Red\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Red\", \"Green\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Red\", \"Blue\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Green\", \"Green\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Green\", \"Blue\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Blue\", \"Blue\")})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (3)) == (std::vector<std::string>({(std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Red\", \"Red\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Red\", \"Green\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Red\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Green\", \"Green\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Green\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Blue\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Green\", \"Green\", \"Green\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Green\", \"Green\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Green\", \"Blue\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Blue\", \"Blue\", \"Blue\")})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < l.size(); i++) {\n        for(long j = 0; j < l.size(); j++) {\n            for(long k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                s = l[i] + l[j] + l[k];\n                result.push_back(s);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    while(std::next_permutation(temp.begin(), temp.end())) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for(int j = 0; j < result.size(); j++) {\n            for(int k = 0; k < n; k++) {\n                std::string s = result[j];\n                s[k] = l[i];\n                temp.push_back(s);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string temp62;\n    std::string",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0; i<l.size(); i++) {\n        for(int j=0; j<l.size(); j++) {\n            for(int k=0; k<l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::vector<std::string> temp;\n    std::string s;\n    for(int i=0;i<n;i++){\n        s = \"\";\n        for(int j=0;j<n;j++){\n            s = s + l[i];\n        }\n        temp.push_back(s);\n    }\n    for(int i=0;i<n;i++){\n        s = \"\";\n        for(int j=0;j<n;j++){\n            s = s + temp[j][i];\n        }\n        result.push_back(s);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::string temp = \"\";\n    for (int i = 0; i < n; i++) {\n        s += \"0\";\n    }\n    for (int i = 0; i < l.size(); i++) {\n        temp += l[i];\n    }\n    std::string temp2 = temp;\n    for (int i = 0; i < n; i++) {\n        temp += temp2;\n    }\n    for (int i = 0; i < pow(l.size(), n); i++) {\n        result.push_back(temp.substr(i*n, n));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string temp62;\n    std::string",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    while (std::next_permutation(temp.begin(), temp.end())) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += \"0\";\n    }\n    int i = 0;\n    while (i < pow(l.size(), n)) {\n        int j = n - 1;\n        while (j >= 0) {\n            s[j] = l[s[j] - '0'];\n            j--;\n        }\n        result.push_back(s);\n        i++;\n        int k = n - 1;\n        while (k >= 0) {\n            if (s[k] != l[l.size() - 1]) {\n                s[k] = l[s[k] - '0' + 1];\n                break;\n            } else {\n                s[k] = l[0];\n            }\n            k--;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::vector<int> v(n,0);\n    int i = 0;\n    while(i < n) {\n        if(v[i] < l.size()) {\n            s += l[v[i]];\n            if(i == n - 1) {\n                result.push_back(s);\n                s = \"\";\n                v[i]++;\n                i = 0;\n            } else {\n                i++;\n            }\n        } else {\n            v[i] = 0;\n            i--;\n            if(i >= 0) {\n                s = s.substr(0,s.size() - 1);\n                v[i]++;\n            }\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string temp;\n  std::string s = \"\";\n  for(int i = 0; i < n; i++) {\n    s += \"0\";\n  }\n  int i = 0;\n  while(i < pow(l.size(), n)) {\n    temp = s;\n    for(int j = 0; j < n; j++) {\n      result.push_back(l[temp[j] - '0']);\n    }\n    i++;\n    s = std::to_string(i);\n    while(s.size() < n) {\n      s = \"0\" + s;\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (int j = 0; j < result.size(); j++) {\n            for (int k = 0; k < n; k++) {\n                std::string temp = result[j];\n                temp.insert(k, l[i]);\n                temp_result.push_back(temp);\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tstd::string temp;\n\tlong i, j, k;\n\tfor (i = 0; i < n; i++) {\n\t\ttemp.push_back(l[i]);\n\t\tresult.push_back(temp);\n\t\ttemp.clear();\n\t}\n\tfor (i = 1; i < n; i++) {\n\t\tfor (j = 0; j < n; j++) {\n\t\t\ttemp.push_back(l[j]);\n\t\t\tfor (k = 0; k < result.size(); k++) {\n\t\t\t\tif (result[k].length() == i) {\n\t\t\t\t\tresult.push_back(result[k] + temp);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttemp.clear();\n\t\t}\n\t}\n\treturn result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::vector<int> v(n, 0);\n    while (true) {\n        s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        int i = n - 1;\n        while (i >= 0 && v[i] == l.size() - 1) {\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        v[i]++;\n        for (int j = i + 1; j < n; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<l.size();i++) {\n        for(int j=0;j<l.size();j++) {\n            for(int k=0;k<l.size();k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i=0; i<n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    while(std::next_permutation(temp.begin(), temp.end())) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<n;i++){\n        temp.append(l[i]);\n    }\n    result.push_back(temp);\n    for(int i=1;i<n;i++){\n        for(int j=0;j<n-i;j++){\n            temp.erase(temp.begin()+j);\n            temp.insert(temp.begin()+j,l[j+i]);\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i = n - 1;\n        while (i >= 0 && v[i] == l.size() - 1) {\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        v[i]++;\n        for (int j = i + 1; j < n; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;"
  ]
}