{
  "name": "mbpp_167_next_power_of_2",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n\t// Write your code here\n\tint i = 1;\n\twhile (i < n) {\n\t\ti *= 2;\n\t}\n\treturn i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    return pow(2, ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpsuy6fj7y: /tmp/tmpsuy6fj7y.cpp:10: int main(): Assertion `candidate((0)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while (i < n) {\n        i = i << 1;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n){\n        i*=2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpkc2poyti: /tmp/tmpkc2poyti.cpp:18: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    int count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1) == 0) {\n        return n;\n    }\n    while (n & (n - 1) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i = 1;\n    while(i < n){\n        i = i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    long p=1;\n    while(p<n)\n    {\n        p=p*2;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n &= (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    int count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n-1);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "tmp94t9akcu: /tmp/tmp94t9akcu.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while(i < n) {\n        i = i * 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n &= (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=0;\n    while(1)\n    {\n        if(pow(2,i)>=n)\n        {\n            return pow(2,i);\n        }\n        i++;\n    }\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpkc2poyti: /tmp/tmpkc2poyti.cpp:18: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n+1);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "tmpvmdrgdzo: /tmp/tmpvmdrgdzo.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return 64;\n    if(n\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpt2_nb4tt.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt2_nb4tt.cpp:83:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if(n\n      |       ~ ^\n      |         )\n   84 | }\n      | ~        \n/tmp/tmpt2_nb4tt.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt2_nb4tt.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n<=1)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1))\n        n=n&(n-1);\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    assert(n>=0);\n    return pow(2,ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "tmpmhkwqgyo: /tmp/tmpmhkwqgyo.cpp:10: int main(): Assertion `candidate((0)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 4;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 8;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 16;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 32;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 64;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpkvwzu0vr.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpkvwzu0vr.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpkvwzu0vr.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n < 0) {\n        return -1;\n    }\n    if (n == 0) {\n        return 1;\n    }\n    if (n == 1) {\n        return 2;\n    }\n    long i = 2;\n    while (i < n) {\n        i = i * 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    long p = 1;\n    while (p < n)\n        p <<= 1;\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    while (p < n) {\n        p = p << 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1) == 0) {\n        return n;\n    }\n    while (n & (n - 1) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)+1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "tmphxkr6d7y: /tmp/tmphxkr6d7y.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)+1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "tmphxkr6d7y: /tmp/tmphxkr6d7y.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    assert(n>=0);\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while (n & (n - 1) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return 64;\n    if(n\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpt2_nb4tt.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt2_nb4tt.cpp:83:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if(n\n      |       ~ ^\n      |         )\n   84 | }\n      | ~        \n/tmp/tmpt2_nb4tt.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt2_nb4tt.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    int count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while(i < n) {\n        i = i * 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    assert(n>=0);\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    long p=1;\n    while(p<n)\n        p=p<<1;\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n    {\n        return 1;\n    }\n    if(n==1)\n    {\n        return 2;\n    }\n    if(n==2)\n    {\n        return 2;\n    }\n    if(n==3)\n    {\n        return 4;\n    }\n    if(n==4)\n    {\n        return 4;\n    }\n    if(n==5)\n    {\n        return 8;\n    }\n    if(n==6)\n    {\n        return 8;\n    }\n    if(n==7)\n    {\n        return 8;\n    }\n    if(n==8)\n    {\n        return 8;\n    }\n    if(n==9)\n    {\n        return 16;\n    }\n    if(n==10)\n    {\n        return 16;\n    }\n    if(n==11)\n    {\n        return 16;\n    }\n    if(n==12)\n    {\n        return 16;\n    }\n    if(n==13)\n    {\n        return 16;\n    }\n    if(n==14)\n    {\n        return 16;\n    }\n    if(n==15)\n    {\n        return 16;\n    }\n    if(n==16)\n    {\n        return 16;\n    }\n    if(n==17)\n    {\n        return 32;\n    }\n    if(n==18)\n    {\n        return 32;\n    }\n    if(n==19)\n    {\n        return 32;\n    }\n    if(n==20)\n    {\n        return 32;\n    }\n    if(n==21)\n    {\n        return 32;\n    }\n    if(n==22)\n    {\n        return 32;\n    }\n    if(n==23)\n    {\n        return 32;\n    }\n    if(n==24)\n    {\n        return 32;\n    }\n    if(n==25)\n    {\n        return 32;\n    }\n    if(n==26)\n    {\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpv6gpf8_j.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpv6gpf8_j.cpp:113:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n  113 | int main() {\n      |            ^\n/tmp/tmpv6gpf8_j.cpp:118:1: error: expected \u2018}\u2019 at end of input\n  118 | }\n      | ^\n/tmp/tmpv6gpf8_j.cpp:4:30: note: to match this \u2018{\u2019\n    4 | long next_power_of_2(long n) {\n      |                              ^\n/tmp/tmpv6gpf8_j.cpp:118:1: warning: control reaches end of non-void function [-Wreturn-type]\n  118 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)+1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "tmphxkr6d7y: /tmp/tmphxkr6d7y.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=0;\n    while(pow(2,i)<n)\n    {\n        i++;\n    }\n    return pow(2,i);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return (2*next_power_of_2(n/2));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "tmp8neqk16b: /tmp/tmp8neqk16b.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    return pow(2, ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "tmputvmfb9x: /tmp/tmputvmfb9x.cpp:9: int main(): Assertion `candidate((0)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1) == 0) {\n        return n;\n    }\n    while (n & (n - 1) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i*=2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "tmpp44rk47l: /tmp/tmpp44rk47l.cpp:16: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n == 0)\n        return 1;\n    if(n == 1)\n        return 2;\n    if(n == 2)\n        return 2;\n    if(n == 3)\n        return 4;\n    if(n == 4)\n        return 4;\n    if(n == 5)\n        return 8;\n    if(n == 6)\n        return 8;\n    if(n == 7)\n        return 8;\n    if(n == 8)\n        return 8;\n    if(n == 9)\n        return 16;\n    if(n == 10)\n        return 16;\n    if(n == 11)\n        return 16;\n    if(n == 12)\n        return 16;\n    if(n == 13)\n        return 16;\n    if(n == 14)\n        return 16;\n    if(n == 15)\n        return 16;\n    if(n == 16)\n        return 16;\n    if(n == 17)\n        return 32;\n    if(n == 18)\n        return 32;\n    if(n == 19)\n        return 32;\n    if(n == 20)\n        return 32;\n    if(n == 21)\n        return 32;\n    if(n == 22)\n        return 32;\n    if(n == 23)\n        return 32;\n    if(n == 24)\n        return 32;\n    if(n == 25)\n        return 32;\n    if(n == 26)\n        return 32;\n    if(n == 27)\n        return 32;\n    if(n == 28)\n        return 32;\n    if(n == 29)\n        return 32;\n    if(n == 30)\n        return 32;\n    if(n == 31)\n        return 32;\n    if(n == 32)\n        return 32;\n    if(n == 33)\n        return 64;\n    if(n == 34)\n        return 64;\n    if(n == 35)\n        return 64;\n    if(n == 36)\n        return 64;\n    if(n == 37)\n        return 64;\n    if(n == 38)\n        return 64;\n    if(n\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpm7exogqc.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpm7exogqc.cpp:83:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if(n\n      |       ~ ^\n      |         )\n   84 | }\n      | ~        \n/tmp/tmpm7exogqc.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpm7exogqc.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long x = 1;\n    while(x<n)\n    {\n        x = x*2;\n    }\n    return x;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2!=0)\n        n=n+1;\n    while(n!=2)\n    {\n        n=n/2;\n        if(n%2!=0)\n            return (long)pow(2,(int)log2(n)+2);\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long p=1;\n    while(p<n)\n    {\n        p=p*2;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while (n & (n - 1) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n){\n        i*=2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    long power=2;\n    while(power<n)\n        power=power*2;\n    return power;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1) == 0) {\n        return n;\n    }\n    while (n & (n - 1) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=0;\n    while(pow(2,i)<n)\n    {\n        i++;\n    }\n    return pow(2,i);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return 64;\n    if(n\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpt2_nb4tt.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt2_nb4tt.cpp:83:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if(n\n      |       ~ ^\n      |         )\n   84 | }\n      | ~        \n/tmp/tmpt2_nb4tt.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt2_nb4tt.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    long i=1;\n    while(i<n)\n        i=i*2;\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 4;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 8;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 16;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 32;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 64;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpkvwzu0vr.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpkvwzu0vr.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpkvwzu0vr.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return 64;\n    if(n\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpt2_nb4tt.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt2_nb4tt.cpp:83:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if(n\n      |       ~ ^\n      |         )\n   84 | }\n      | ~        \n/tmp/tmpt2_nb4tt.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt2_nb4tt.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1) == 0) {\n        return n;\n    }\n    while (n & (n - 1) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n == 0)\n        return 1;\n    if(n == 1)\n        return 2;\n    if(n == 2)\n        return 2;\n    if(n == 3)\n        return 4;\n    if(n == 4)\n        return 4;\n    if(n == 5)\n        return 8;\n    if(n == 6)\n        return 8;\n    if(n == 7)\n        return 8;\n    if(n == 8)\n        return 8;\n    if(n == 9)\n        return 16;\n    if(n == 10)\n        return 16;\n    if(n == 11)\n        return 16;\n    if(n == 12)\n        return 16;\n    if(n == 13)\n        return 16;\n    if(n == 14)\n        return 16;\n    if(n == 15)\n        return 16;\n    if(n == 16)\n        return 16;\n    if(n == 17)\n        return 32;\n    if(n == 18)\n        return 32;\n    if(n == 19)\n        return 32;\n    if(n == 20)\n        return 32;\n    if(n == 21)\n        return 32;\n    if(n == 22)\n        return 32;\n    if(n == 23)\n        return 32;\n    if(n == 24)\n        return 32;\n    if(n == 25)\n        return 32;\n    if(n == 26)\n        return 32;\n    if(n == 27)\n        return 32;\n    if(n == 28)\n        return 32;\n    if(n == 29)\n        return 32;\n    if(n == 30)\n        return 32;\n    if(n == 31)\n        return 32;\n    if(n == 32)\n        return 32;\n    if(n == 33)\n        return 64;\n    if(n == 34)\n        return 64;\n    if(n == 35)\n        return 64;\n    if(n == 36)\n        return 64;\n    if(n == 37)\n        return 64;\n    if(n == 38)\n        return 64;\n    if(n\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "/tmp/tmpm7exogqc.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpm7exogqc.cpp:83:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if(n\n      |       ~ ^\n      |         )\n   84 | }\n      | ~        \n/tmp/tmpm7exogqc.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpm7exogqc.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpkc2poyti: /tmp/tmpkc2poyti.cpp:18: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while (n & (n - 1) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    // return (long)pow(2,ceil(log2(n)));\n    return (long)pow(2,ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "tmpv2_b8upa: /tmp/tmpv2_b8upa.cpp:11: int main(): Assertion `candidate((0)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while(i < n) {\n        i = i * 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpkc2poyti: /tmp/tmpkc2poyti.cpp:18: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=0;\n    while(pow(2,i)<n)\n    {\n        i++;\n    }\n    return pow(2,i);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return 64;\n    if(n\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpt2_nb4tt.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt2_nb4tt.cpp:83:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if(n\n      |       ~ ^\n      |         )\n   84 | }\n      | ~        \n/tmp/tmpt2_nb4tt.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt2_nb4tt.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    long p = 1;\n    while (p < n)\n        p <<= 1;\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i = 1;\n    while(i < n) {\n        i *= 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i=1;\n    while(i<n)\n        i=i*2;\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 4;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 8;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 16;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 32;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 64;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return 64;\n    if(n\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "/tmp/tmpyh_8aw99.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpyh_8aw99.cpp:83:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if(n\n      |       ~ ^\n      |         )\n   84 | }\n      | ~        \n/tmp/tmpyh_8aw99.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpyh_8aw99.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return 64;\n    if(n\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpt2_nb4tt.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt2_nb4tt.cpp:83:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if(n\n      |       ~ ^\n      |         )\n   84 | }\n      | ~        \n/tmp/tmpt2_nb4tt.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt2_nb4tt.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1) == 0) {\n        return n;\n    }\n    while (n & (n - 1) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    long i=1;\n    while(i<n)\n        i=i*2;\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1))\n        n=n&(n-1);\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // write your code here\n    long p=1;\n    while(p<n)\n    {\n        p=p*2;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    long i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=0;\n    while(pow(2,i)<n){\n        i++;\n    }\n    return pow(2,i);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return 64;\n    if(n\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpt2_nb4tt.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt2_nb4tt.cpp:83:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if(n\n      |       ~ ^\n      |         )\n   84 | }\n      | ~        \n/tmp/tmpt2_nb4tt.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt2_nb4tt.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return 64;\n    if(n\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpt2_nb4tt.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt2_nb4tt.cpp:83:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if(n\n      |       ~ ^\n      |         )\n   84 | }\n      | ~        \n/tmp/tmpt2_nb4tt.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt2_nb4tt.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpkc2poyti: /tmp/tmpkc2poyti.cpp:18: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return 64;\n    if(n\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpt2_nb4tt.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt2_nb4tt.cpp:83:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if(n\n      |       ~ ^\n      |         )\n   84 | }\n      | ~        \n/tmp/tmpt2_nb4tt.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt2_nb4tt.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else{\n        return next_power_of_2(n/2)*2;\n    }\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "tmpfi54mlag: /tmp/tmpfi54mlag.cpp:18: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1) == 0) {\n        return n;\n    }\n    while (n & (n - 1) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    return pow(2, ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpsuy6fj7y: /tmp/tmpsuy6fj7y.cpp:10: int main(): Assertion `candidate((0)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while(i < n) {\n        i = i * 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    while (p < n) {\n        p = p << 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while(i < n) {\n        i = i * 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    assert(n>=0);\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    long x=1;\n    while(x<n)\n        x*=2;\n    return x;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1)) {\n        while (n & (n - 1)) {\n            n = n & (n - 1);\n        }\n        return n << 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=0;\n    while(pow(2,i)<n){\n        i++;\n    }\n    return pow(2,i);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long a = 1;\n    while(a < n){\n        a = a * 2;\n    }\n    return a;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return 64;\n    if(n\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpt2_nb4tt.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt2_nb4tt.cpp:83:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if(n\n      |       ~ ^\n      |         )\n   84 | }\n      | ~        \n/tmp/tmpt2_nb4tt.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt2_nb4tt.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "/tmp/tmpt1gt9r8r.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt1gt9r8r.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt1gt9r8r.cpp:83:15: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n      |               ^\n      |               ;\n   84 | }\n      | ~              \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    return pow(2, ceil(log(n)/log(2)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "tmp6_t_zt3v: /tmp/tmp6_t_zt3v.cpp:9: int main(): Assertion `candidate((0)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    int count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1) == 0) {\n        return n;\n    }\n    while (n & (n - 1) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 4;\n    if(n==4)\n        return 4;\n    if(n==5)\n        return 8;\n    if(n==6)\n        return 8;\n    if(n==7)\n        return 8;\n    if(n==8)\n        return 8;\n    if(n==9)\n        return 16;\n    if(n==10)\n        return 16;\n    if(n==11)\n        return 16;\n    if(n==12)\n        return 16;\n    if(n==13)\n        return 16;\n    if(n==14)\n        return 16;\n    if(n==15)\n        return 16;\n    if(n==16)\n        return 16;\n    if(n==17)\n        return 32;\n    if(n==18)\n        return 32;\n    if(n==19)\n        return 32;\n    if(n==20)\n        return 32;\n    if(n==21)\n        return 32;\n    if(n==22)\n        return 32;\n    if(n==23)\n        return 32;\n    if(n==24)\n        return 32;\n    if(n==25)\n        return 32;\n    if(n==26)\n        return 32;\n    if(n==27)\n        return 32;\n    if(n==28)\n        return 32;\n    if(n==29)\n        return 32;\n    if(n==30)\n        return 32;\n    if(n==31)\n        return 32;\n    if(n==32)\n        return 32;\n    if(n==33)\n        return 64;\n    if(n==34)\n        return 64;\n    if(n==35)\n        return 64;\n    if(n==36)\n        return 64;\n    if(n==37)\n        return 64;\n    if(n==38)\n        return 64;\n    if(n\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123621,
      "stdout": "",
      "stderr": "/tmp/tmpt2_nb4tt.cpp: In function \u2018long int next_power_of_2(long int)\u2019:\n/tmp/tmpt2_nb4tt.cpp:83:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if(n\n      |       ~ ^\n      |         )\n   84 | }\n      | ~        \n/tmp/tmpt2_nb4tt.cpp:84:1: error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpt2_nb4tt.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long p=1;\n    while(p<n)\n    {\n        p=p*2;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return 2*next_power_of_2(n/2);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "tmp7nfryefd: /tmp/tmp7nfryefd.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=0;\n    while(pow(2,i)<n){\n        i++;\n    }\n    return pow(2,i);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long count = 0;\n    while(n!=0){\n        n = n/2;\n        count++;\n    }\n    return pow(2,count);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpkc2poyti: /tmp/tmpkc2poyti.cpp:18: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    while(p < n) {\n        p = p << 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while (i < n) {\n        i *= 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510331,
      "stdout": "",
      "stderr": "tmpo_z_zai2: /tmp/tmpo_z_zai2.cpp:17: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}