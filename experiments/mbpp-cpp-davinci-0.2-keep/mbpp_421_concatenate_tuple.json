{
  "name": "mbpp_421_concatenate_tuple",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to concatenate each element of tuple by the delimiter.\nstd::string concatenate_tuple(Union_std_string_long test_tup) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = concatenate_tuple;\n    assert(candidate(std::make_tuple(\"ID\", \"is\", 4, \"UTS\")) == (\"ID-is-4-UTS\"));\n    assert(candidate(std::make_tuple(\"QWE\", \"is\", 4, \"RTY\")) == (\"QWE-is-4-RTY\"));\n    assert(candidate(std::make_tuple(\"ZEN\", \"is\", 4, \"OP\")) == (\"ZEN-is-4-OP\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::stringstream ss;\n    ss << test_tup.f0;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0 << \" \" << test_tup.f1;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0 << test_tup.f1;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0 << \" \" << test_tup.f1;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0;\n    return ss.str();",
    "    std::string result;\n    if (test_tup.f0 != \"\") {\n        result += test_tup.f0;\n    }\n    if (test_tup.f1 != 0) {\n        result += std::to_string(test_tup.f1);\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_tup.f0 << \" \" << test_tup.f1;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0;\n    return ss.str();",
    "    std::stringstream ss;\n    ss << test_tup.f0 << test_tup.f1;\n    return ss.str();"
  ]
}