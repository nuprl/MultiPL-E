{
  "name": "mbpp_141_pancake_sort",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = 0;\n        for(int j = 0; j < n - i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        sorted_nums.push_back(max_index + 1);\n        sorted_nums.push_back(n - i);\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp86trrwgy: /tmp/tmp86trrwgy.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_idx = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpdlh2jaqy: /tmp/tmpdlh2jaqy.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpqccygaq1: /tmp/tmpqccygaq1.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != n - i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpfodj21k4: /tmp/tmpfodj21k4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmprt0bmqrq: /tmp/tmprt0bmqrq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    std::vector<long>::iterator it;\n    for(int i=0;i<nums.size();i++){\n        long max_num = *std::max_element(nums.begin(),nums.end());\n        it = std::find(nums.begin(),nums.end(),max_num);\n        int index = std::distance(nums.begin(),it);\n        std::reverse(nums.begin(),it+1);\n        std::reverse(nums.begin(),nums.end());\n        sorted_nums.push_back(index+1);\n        sorted_nums.push_back(nums.size()-i);\n        nums.pop_back();\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpwby4bn34: /tmp/tmpwby4bn34.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmppa_gfq6w: /tmp/tmppa_gfq6w.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpl2skzgx6: /tmp/tmpl2skzgx6.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index=0;\n        for(int j=0;j<=i;j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index!=i){\n            if(max_index!=0){\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpz0wza9ro: /tmp/tmpz0wza9ro.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end() - i));\n        if (max_index != n - 1 - i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp6mxw4lnm: /tmp/tmp6mxw4lnm.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpqccygaq1: /tmp/tmpqccygaq1.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - i - 1) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpjgxs7b_k: /tmp/tmpjgxs7b_k.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            result.push_back(max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpfp5c_laf: /tmp/tmpfp5c_laf.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != nums.size() - 1) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(nums.size() - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp4v438qcs: /tmp/tmp4v438qcs.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  int n = nums.size();\n  for (int i = 0; i < n; i++) {\n    int max_idx = std::max_element(nums.begin(), nums.end()) - nums.begin();\n    std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n    std::reverse(nums.begin(), nums.begin() + n - i);\n  }\n  return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpbtik63vo: /tmp/tmpbtik63vo.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpqvyj97y4: /tmp/tmpqvyj97y4.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n - 1; i > 0; i--) {\n        int max_index = 0;\n        for (int j = 1; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpmtri52ub: /tmp/tmpmtri52ub.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--)\n    {\n        int max_index=i;\n        for(int j=0;j<=i;j++)\n        {\n            if(nums[j]>nums[max_index])\n            {\n                max_index=j;\n            }\n        }\n        if(max_index!=i)\n        {\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n            result.push_back(i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpiismdf9e: /tmp/tmpiismdf9e.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int size = nums.size();\n    for (int i = 0; i < size; ++i) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        result.push_back(size - i);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpdypylg_i: /tmp/tmpdypylg_i.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i=n;i>1;i--){\n        int max_index = std::distance(nums.begin(),std::max_element(nums.begin(),nums.begin()+i));\n        if(max_index != i-1){\n            if(max_index != 0){\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(),nums.begin()+i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpgian0u3f: /tmp/tmpgian0u3f.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end() - i));\n        if (max_index == nums.size() - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(nums.size() - i);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpbfblxmc1: /tmp/tmpbfblxmc1.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpajm40y9y: /tmp/tmpajm40y9y.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted.push_back(max_index + 1);\n        sorted.push_back(n - i);\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp_859_pco: /tmp/tmp_859_pco.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    if(nums.size() == 0) return result;\n    int max_index = 0;\n    int max_value = nums[0];\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > max_value) {\n            max_value = nums[i];\n            max_index = i;\n        }\n    }\n    result.push_back(max_index + 1);\n    result.push_back(nums.size());\n    std::reverse(nums.begin(), nums.begin() + max_index + 1);\n    std::reverse(nums.begin(), nums.end());\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] != i + 1) {\n            int index = 0;\n            for(int j = 0; j < nums.size(); j++) {\n                if(nums[j] == i + 1) {\n                    index = j;\n                    break;\n                }\n            }\n            result.push_back(index + 1);\n            result.push_back(nums.size() - i);\n            std::reverse(nums.begin(), nums.begin() + index + 1);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpylyh973n: /tmp/tmpylyh973n.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - 1 - i) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp1b1n4r6n: /tmp/tmp1b1n4r6n.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size()-1; i >= 0; i--) {\n        int max_index = i;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            if(max_index != 0) {\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(), nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(), nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpr15rqy7w: /tmp/tmpr15rqy7w.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  std::vector<long> result;\n  for (int i = nums.size() - 1; i > 0; i--) {\n    int max_index = 0;\n    for (int j = 0; j <= i; j++) {\n      if (nums[j] > nums[max_index]) {\n        max_index = j;\n      }\n    }\n    if (max_index != i) {\n      if (max_index != 0) {\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n      }\n      result.push_back(i + 1);\n      std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpgeta3dbw: /tmp/tmpgeta3dbw.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp2fouv87w: /tmp/tmp2fouv87w.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int size = nums.size();\n    for (int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        result.push_back(size - i);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpu1gayh9d: /tmp/tmpu1gayh9d.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for(int i = 0; i < nums.size(); i++) {\n        sorted_nums.push_back(nums[i]);\n    }\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> sorted_nums_copy;\n    for(int i = 0; i < sorted_nums.size(); i++) {\n        sorted_nums_copy.push_back(sorted_nums[i]);\n    }\n    std::vector<long> flips;\n    while(sorted_nums != nums) {\n        for(int i = 0; i < nums.size(); i++) {\n            if(nums[i] == sorted_nums[0]) {\n                if(i == 0) {\n                    flips.push_back(i + 1);\n                    std::reverse(nums.begin(), nums.begin() + i + 1);\n                }\n                else {\n                    flips.push_back(i + 1);\n                    std::reverse(nums.begin(), nums.begin() + i + 1);\n                    flips.push_back(nums.size());\n                    std::reverse(nums.begin(), nums.end());\n                }\n                break;\n            }\n        }\n        sorted_nums.erase(sorted_nums.begin());\n    }\n    return flips;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  std::vector<long> result;\n  for (int i = nums.size() - 1; i >= 0; i--) {\n    int max_index = i;\n    for (int j = 0; j <= i; j++) {\n      if (nums[j] > nums[max_index]) {\n        max_index = j;\n      }\n    }\n    if (max_index != i) {\n      result.push_back(max_index + 1);\n      std::reverse(nums.begin(), nums.begin() + max_index + 1);\n      result.push_back(i + 1);\n      std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpmfsx5nbm: /tmp/tmpmfsx5nbm.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // TODO: Implement pancake sort\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp77vasl4r: /tmp/tmp77vasl4r.cpp:10: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp2fouv87w: /tmp/tmp2fouv87w.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpr81fhya5: /tmp/tmpr81fhya5.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end() - i));\n        if (max_index != n - i - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpflgh3g_3: /tmp/tmpflgh3g_3.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int size = nums.size();\n    for (int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + size - i);\n        result.push_back(size - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpr767de3l: /tmp/tmpr767de3l.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size(); i > 0; i--) {\n        int index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i));\n        if (index != i - 1) {\n            if (index != 0) {\n                result.push_back(index + 1);\n                std::reverse(nums.begin(), nums.begin() + index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpauoas2n_: /tmp/tmpauoas2n_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    std::vector<long> ans;\n    for(int i = n; i > 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index == i - 1) continue;\n        if(max_index != 0) {\n            ans.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        ans.push_back(i);\n        std::reverse(nums.begin(), nums.begin() + i);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpv3co2ioa: /tmp/tmpv3co2ioa.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n            result.push_back(n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp66dpfhbz: /tmp/tmp66dpfhbz.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpnbok2nn2: /tmp/tmpnbok2nn2.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int index = std::find(nums.begin(), nums.end(), sorted_nums[i]) - nums.begin();\n        if (index == 0) {\n            continue;\n        }\n        if (index == nums.size() - 1) {\n            result.push_back(index + 1);\n            std::reverse(nums.begin(), nums.end());\n            continue;\n        }\n        result.push_back(index + 1);\n        std::reverse(nums.begin(), nums.begin() + index + 1);\n        result.push_back(nums.size() - i);\n        std::reverse(nums.begin(), nums.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpm8_xl0em: /tmp/tmpm8_xl0em.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpnbok2nn2: /tmp/tmpnbok2nn2.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(nums.size() - i);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpqbf_8nan: /tmp/tmpqbf_8nan.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for(int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index == i) {\n            continue;\n        }\n        if(max_index != 0) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; ++i) {\n        int max_index = std::max_element(nums.begin(), nums.end() - i) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if (max_index == i - 1) continue;\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i);\n        std::reverse(nums.begin(), nums.begin() + i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpykyc_tyg: /tmp/tmpykyc_tyg.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if (max_index != i - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpl5h98acf: /tmp/tmpl5h98acf.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (long i = nums.size() - 1; i >= 0; i--) {\n        long max_index = i;\n        for (long j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpey5khk09: /tmp/tmpey5khk09.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpy98ua0ao: /tmp/tmpy98ua0ao.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        auto it = std::max_element(nums.begin(), nums.end());\n        int max_index = it - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        sorted.push_back(max_index + 1);\n        sorted.push_back(n - i);\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpbr_a21ju: /tmp/tmpbr_a21ju.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n            result.push_back(n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp66dpfhbz: /tmp/tmp66dpfhbz.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index != i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpepwk__pq: /tmp/tmpepwk__pq.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp2fouv87w: /tmp/tmp2fouv87w.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size()-1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin()+i+1) - nums.begin();\n        if(max_index != i) {\n            if(max_index != 0) {\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(), nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(), nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpnwu1uoml: /tmp/tmpnwu1uoml.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_idx = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_idx != i) {\n            result.push_back(max_idx + 1);\n            std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpcvlmz_do: /tmp/tmpcvlmz_do.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index = std::max_element(nums.begin(),nums.begin()+i+1)-nums.begin();\n        if(max_index!=i){\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            result.push_back(i+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmp79mf94jx: /tmp/tmp79mf94jx.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    for(int i=0;i<nums.size();i++){\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        std::reverse(nums.begin(), nums.begin()+max_index+1);\n        std::reverse(nums.begin(), nums.end());\n        sorted.push_back(nums.back());\n        nums.pop_back();\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmp1cx1j6kw: /tmp/tmp1cx1j6kw.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index=0;\n        for(int j=0;j<=i;j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index==i)\n            continue;\n        if(max_index!=0){\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n        }\n        result.push_back(i+1);\n        std::reverse(nums.begin(),nums.begin()+i+1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpjhxaj8q9: /tmp/tmpjhxaj8q9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1 - i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpczh02azl: /tmp/tmpczh02azl.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmp3liqqhu4: /tmp/tmp3liqqhu4.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpvuqpobw3: /tmp/tmpvuqpobw3.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = 0;\n        for(int j = 0; j < n - i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != n - i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpr6fdyu_r: /tmp/tmpr6fdyu_r.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpy98ua0ao: /tmp/tmpy98ua0ao.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    std::vector<long>::iterator it;\n    for(int i=0;i<nums.size();i++){\n        it = std::max_element(nums.begin(),nums.end());\n        sorted_nums.push_back(*it);\n        nums.erase(it);\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpet51512u: /tmp/tmpet51512u.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpqccygaq1: /tmp/tmpqccygaq1.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size(); i > 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i));\n        if(max_index != i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpkrnn906_: /tmp/tmpkrnn906_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_idx = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpdlh2jaqy: /tmp/tmpdlh2jaqy.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    for(int i=0;i<nums.size();i++){\n        int max_index = std::max_element(nums.begin(),nums.end())-nums.begin();\n        std::reverse(nums.begin(),nums.begin()+max_index+1);\n        std::reverse(nums.begin(),nums.begin()+nums.size()-i);\n        sorted.push_back(max_index+1);\n        sorted.push_back(nums.size()-i);\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpvccg9srh: /tmp/tmpvccg9srh.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmplr8a7x4w: /tmp/tmplr8a7x4w.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpqccygaq1: /tmp/tmpqccygaq1.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpnbok2nn2: /tmp/tmpnbok2nn2.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = 0;\n        for (int j = 0; j < n - i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpy98ua0ao: /tmp/tmpy98ua0ao.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here\n    for(int i=0;i<nums.size();i++){\n        int max_index=i;\n        for(int j=i;j<nums.size();j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index!=i){\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpdsfrqwq9: /tmp/tmpdsfrqwq9.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != n - 1 - i) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpa151ptdb: /tmp/tmpa151ptdb.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpqccygaq1: /tmp/tmpqccygaq1.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if(max_index != i) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmp50q35z0p: /tmp/tmp50q35z0p.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i=0; i<n; i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        if(max_index != n-1) {\n            if(max_index != 0) {\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(), nums.begin()+max_index+1);\n            }\n            result.push_back(n-i);\n            std::reverse(nums.begin(), nums.end()-i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmparoyyhgu: /tmp/tmparoyyhgu.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpajm40y9y: /tmp/tmpajm40y9y.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - i - 1) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpjgxs7b_k: /tmp/tmpjgxs7b_k.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for(int i=0;i<nums.size();i++){\n        int max_index = std::max_element(nums.begin(),nums.end())-nums.begin();\n        std::reverse(nums.begin(),nums.begin()+max_index+1);\n        std::reverse(nums.begin(),nums.end());\n        sorted_nums.push_back(nums.back());\n        nums.pop_back();\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmpddn8ihyf: /tmp/tmpddn8ihyf.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1 - i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - 1 - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmp0axy70bd: /tmp/tmp0axy70bd.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = 0;\n        for(int j = 0; j < n - i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != n - i - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp2fouv87w: /tmp/tmp2fouv87w.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmpftdsm1fw: /tmp/tmpftdsm1fw.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    std::vector<long> result;\n    for(long i = nums.size() - 1; i >= 0; i--){\n        long max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if(max_index != i){\n            if(max_index != 0){\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmprx_inm08: /tmp/tmprx_inm08.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != n - i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpfodj21k4: /tmp/tmpfodj21k4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int index = std::find(nums.begin(), nums.end(), sorted_nums[i]) - nums.begin();\n        if (index == 0) {\n            continue;\n        }\n        if (index != nums.size() - 1) {\n            result.push_back(index + 1);\n            std::reverse(nums.begin(), nums.begin() + index + 1);\n        }\n        result.push_back(nums.size() - i);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmpag_882q8: /tmp/tmpag_882q8.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here\n    for(int i=0;i<nums.size();i++){\n        int max_index=i;\n        for(int j=i+1;j<nums.size();j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index!=i){\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmpo9hg5uxs: /tmp/tmpo9hg5uxs.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            sorted_nums.push_back(max_index + 1);\n        }\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n        sorted_nums.push_back(i + 1);\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmp6bksvuzi: /tmp/tmp6bksvuzi.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    long n = nums.size();\n    for(long i = n; i > 0; i--) {\n        long max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index != i - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    while(nums.size() > 0) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted_nums.push_back(nums.back());\n        nums.pop_back();\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmpcl2abi4s: /tmp/tmpcl2abi4s.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> res;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            res.push_back(max_index + 1);\n            res.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmpje36y57j: /tmp/tmpje36y57j.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp2fouv87w: /tmp/tmp2fouv87w.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpl2skzgx6: /tmp/tmpl2skzgx6.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != n - i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpfodj21k4: /tmp/tmpfodj21k4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmpnrwy6w4z: /tmp/tmpnrwy6w4z.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    for(int i=0;i<nums.size();i++){\n        int max_index = std::max_element(nums.begin(),nums.end())-nums.begin();\n        std::reverse(nums.begin(),nums.begin()+max_index+1);\n        std::reverse(nums.begin(),nums.begin()+nums.size()-i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmp_enf8s0v: /tmp/tmp_enf8s0v.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmpnrwy6w4z: /tmp/tmpnrwy6w4z.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmprt0bmqrq: /tmp/tmprt0bmqrq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = 0;\n        for(int j = 0; j < n - i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != n - i - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmp05792yv4: /tmp/tmp05792yv4.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - i - 1) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpjgxs7b_k: /tmp/tmpjgxs7b_k.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> ans;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - i - 1) {\n            continue;\n        }\n        if(max_index != 0) {\n            ans.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        ans.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmp7wg71_6a: /tmp/tmp7wg71_6a.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    // Write your code here\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        result.push_back(n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmp2f2r87qq: /tmp/tmp2f2r87qq.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmpftdsm1fw: /tmp/tmpftdsm1fw.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp2fouv87w: /tmp/tmp2fouv87w.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i=n;i>0;i--)\n    {\n        int max_index = std::max_element(nums.begin(),nums.begin()+i)-nums.begin();\n        if(max_index!=i-1)\n        {\n            if(max_index!=0)\n            {\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(),nums.begin()+i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmpxso0v_d3: /tmp/tmpxso0v_d3.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpl2skzgx6: /tmp/tmpl2skzgx6.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int index = std::find(nums.begin(), nums.end(), sorted_nums[i]) - nums.begin();\n        if (index != 0) {\n            result.push_back(index + 1);\n            std::reverse(nums.begin(), nums.begin() + index + 1);\n        }\n        result.push_back(nums.size() - i);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmpa3_n77bq: /tmp/tmpa3_n77bq.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n            result.push_back(n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp66dpfhbz: /tmp/tmp66dpfhbz.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    long max_num = *std::max_element(nums.begin(), nums.end());\n    long max_num_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n    std::reverse(nums.begin(), nums.begin() + max_num_index + 1);\n    sorted_nums.push_back(max_num_index + 1);\n    std::reverse(nums.begin(), nums.begin() + max_num);\n    sorted_nums.push_back(max_num);\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "*** Error in `/tmp/tmpesd5a8j6': free(): invalid pointer: 0x00000000022a6c80 ***\n======= Backtrace: =========\n/lib64/libc.so.6(+0x81329)[0x2aeabfbf5329]\n/tmp/tmpesd5a8j6[0x402432]\n/tmp/tmpesd5a8j6[0x401d5e]\n/tmp/tmpesd5a8j6[0x401694]\n/tmp/tmpesd5a8j6[0x401a99]\n/tmp/tmpesd5a8j6[0x4014fc]\n/tmp/tmpesd5a8j6[0x400ab1]\n/tmp/tmpesd5a8j6[0x400c32]\n/lib64/libc.so.6(__libc_start_main+0xf5)[0x2aeabfb96555]\n/tmp/tmpesd5a8j6[0x4008a9]\n======= Memory map: ========\n00400000-00404000 r-xp 00000000 08:02 28794                              /tmp/tmpesd5a8j6\n00604000-00605000 r--p 00004000 08:02 28794                              /tmp/tmpesd5a8j6\n00605000-00606000 rw-p 00005000 08:02 28794                              /tmp/tmpesd5a8j6\n02295000-022e8000 rw-p 00000000 00:00 0                                  [heap]\n2aeabf05d000-2aeabf07f000 r-xp 00000000 08:01 50332393                   /usr/lib64/ld-2.17.so\n2aeabf07f000-2aeabf082000 rw-p 00000000 00:00 0 \n2aeabf09a000-2aeabf09f000 rw-p 00000000 00:00 0 \n2aeabf27e000-2aeabf27f000 ",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmpzzdbbs_c: /tmp/tmpzzdbbs_c.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size(); i > 0; i--) {\n        auto it = std::find(nums.begin(), nums.end(), i);\n        if (it == nums.end()) {\n            return {};\n        }\n        int index = std::distance(nums.begin(), it);\n        if (index == i - 1) {\n            continue;\n        }\n        if (index != 0) {\n            result.push_back(index + 1);\n            std::reverse(nums.begin(), nums.begin() + index + 1);\n        }\n        result.push_back(i);\n        std::reverse(nums.begin(), nums.begin() + i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmp77m3av1_: /tmp/tmp77m3av1_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpqccygaq1: /tmp/tmpqccygaq1.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for (int i = 0; i < nums.size(); i++) {\n        long max_num = *std::max_element(nums.begin(), nums.end());\n        long max_num_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        std::reverse(nums.begin(), nums.begin() + max_num_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted_nums.push_back(max_num);\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmpjey0d2p1: /tmp/tmpjey0d2p1.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpqccygaq1: /tmp/tmpqccygaq1.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    int size = nums.size();\n    for(int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted_nums.push_back(max_index + 1);\n        sorted_nums.push_back(size - i);\n        nums.pop_back();\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmpdvzo8csz: /tmp/tmpdvzo8csz.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmprt0bmqrq: /tmp/tmprt0bmqrq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max = std::max_element(nums.begin(), nums.end() - i) - nums.begin();\n        if (max != n - i - 1) {\n            if (max != 0) {\n                result.push_back(max + 1);\n                std::reverse(nums.begin(), nums.begin() + max + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmp7ax3q21n: /tmp/tmp7ax3q21n.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  std::vector<long> result;\n  int n = nums.size();\n  for (int i = 0; i < n; i++) {\n    int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n    if (max_index != n - 1) {\n      std::reverse(nums.begin(), nums.begin() + max_index + 1);\n      result.push_back(max_index + 1);\n      std::reverse(nums.begin(), nums.begin() + n - i);\n      result.push_back(n - i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmp5smgyyqy: /tmp/tmp5smgyyqy.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpl2skzgx6: /tmp/tmpl2skzgx6.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size()-1; i >= 0; i--) {\n        auto it = std::max_element(nums.begin(), nums.begin()+i+1);\n        if(it != nums.begin()+i) {\n            result.push_back(it-nums.begin()+1);\n            std::reverse(nums.begin(), it+1);\n            result.push_back(i+1);\n            std::reverse(nums.begin(), nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmpz91j9j9h: /tmp/tmpz91j9j9h.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for(int j = i - 1; j >= 0; j--) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmphg8dgvmo: /tmp/tmphg8dgvmo.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    int size = nums.size();\n    for (int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted_nums.push_back(max_index + 1);\n        sorted_nums.push_back(size - i);\n        nums.pop_back();\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmp_m3zbem5: /tmp/tmp_m3zbem5.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = n; i > 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index != i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmppkm34cxf: /tmp/tmppkm34cxf.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = 0;\n        for (int j = 0; j < n - i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index == n - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmp7sn8_gc5: /tmp/tmp7sn8_gc5.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        auto max_it = std::max_element(nums.begin(), nums.end() - i);\n        if (max_it != nums.end() - i - 1) {\n            result.push_back(max_it - nums.begin() + 1);\n            std::reverse(nums.begin(), max_it + 1);\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmpew0th62m: /tmp/tmpew0th62m.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmprt0bmqrq: /tmp/tmprt0bmqrq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i > 0; i--) {\n        int max_index = i;\n        for (int j = i - 1; j >= 0; j--) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmpwuzfozls: /tmp/tmpwuzfozls.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpqccygaq1: /tmp/tmpqccygaq1.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    // TODO: Write your code here\n    int n = nums.size();\n    for(int i = 0; i < n; i++){\n      int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n      result.push_back(max_index + 1);\n      result.push_back(n - i);\n      std::reverse(nums.begin(), nums.begin() + max_index + 1);\n      std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n  }\n\nint main(){\n  std::vector<long> v1{1, 5, 4, 3, 2};\n  std::vector<long> v2 = pancake_sort(v1);\n  for(auto i : v2){\n    std::cout << i << \" \";\n  }\n  std::cout << std::endl;\n  return 0;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "/tmp/tmpfh59bxsg.cpp:27:5: error: redefinition of \u2018int main()\u2019\n   27 | int main() {\n      |     ^~~~\n/tmp/tmpfh59bxsg.cpp:18:5: note: \u2018int main()\u2019 previously defined here\n   18 | int main(){\n      |     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        auto it = std::max_element(nums.begin(), nums.begin() + i + 1);\n        if (it != nums.begin() + i) {\n            result.push_back(std::distance(nums.begin(), it) + 1);\n            std::reverse(nums.begin(), it + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmpb0og2cpm: /tmp/tmpb0og2cpm.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size()-1; i >= 0; i--) {\n        int max_index = i;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            result.push_back(max_index+1);\n            result.push_back(i+1);\n            std::reverse(nums.begin(), nums.begin()+max_index+1);\n            std::reverse(nums.begin(), nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmptjgivfro: /tmp/tmptjgivfro.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        result.push_back(n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmptjyz_my1: /tmp/tmptjyz_my1.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmpckmjt_cv: /tmp/tmpckmjt_cv.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> ans;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_idx = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_idx == i) continue;\n        if (max_idx != 0) {\n            std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n            ans.push_back(max_idx + 1);\n        }\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n        ans.push_back(i + 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmp2f82fixv: /tmp/tmp2f82fixv.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int size = nums.size();\n    for(int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != size - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(size - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmp38ly4hip: /tmp/tmp38ly4hip.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index != i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpepwk__pq: /tmp/tmpepwk__pq.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n-i-1) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(), nums.begin()+max_index+1);\n        }\n        result.push_back(n-i);\n        std::reverse(nums.begin(), nums.begin()+n-i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmpn2uktywo: /tmp/tmpn2uktywo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_idx = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_idx + 1);\n        std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmpnj24t8i2: /tmp/tmpnj24t8i2.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp2fouv87w: /tmp/tmp2fouv87w.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j < i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124287,
      "stdout": "",
      "stderr": "tmp5enhjyeh: /tmp/tmp5enhjyeh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmpe1bjtzfi: /tmp/tmpe1bjtzfi.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmpp5flclra: /tmp/tmpp5flclra.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - 1 - i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmpjgs6zjr4: /tmp/tmpjgs6zjr4.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmpajm40y9y: /tmp/tmpajm40y9y.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max = i;\n        for (int j = i + 1; j < n; j++) {\n            if (nums[j] > nums[max]) {\n                max = j;\n            }\n        }\n        if (max != i) {\n            std::reverse(nums.begin(), nums.begin() + max + 1);\n            result.push_back(max + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmppop2g3yu: /tmp/tmppop2g3yu.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1 - i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpczh02azl: /tmp/tmpczh02azl.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  std::vector<long> sorted;\n  int n = nums.size();\n  for (int i = n; i > 0; i--) {\n    auto it = std::find(nums.begin(), nums.end(), i);\n    std::reverse(nums.begin(), it + 1);\n    std::reverse(nums.begin(), nums.begin() + i);\n  }\n  return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmp7dya_aiv: /tmp/tmp7dya_aiv.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    for(int i = 0; i < nums.size(); i++){\n        int max_index = 0;\n        for(int j = 0; j < nums.size() - i; j++){\n            if(nums[j] > nums[max_index]){\n                max_index = j;\n            }\n        }\n        if(max_index == nums.size() - i - 1){\n            continue;\n        }\n        if(max_index != 0){\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        std::reverse(nums.begin(), nums.begin() + nums.size() - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmpp5flclra: /tmp/tmpp5flclra.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for (int i = 0; i < nums.size(); i++) {\n        int max_index = i;\n        for (int j = i + 1; j < nums.size(); j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmpfkfp1rmo: /tmp/tmpfkfp1rmo.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int size = nums.size();\n    for (int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        result.push_back(size - i);\n        nums.pop_back();\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmprfdro107: /tmp/tmprfdro107.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        auto max_element = std::max_element(nums.begin(), nums.end() - i);\n        if (max_element != nums.end() - i - 1) {\n            result.push_back(max_element - nums.begin() + 1);\n            std::reverse(nums.begin(), max_element + 1);\n            result.push_back(nums.size() - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmps6xe05v5: /tmp/tmps6xe05v5.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        result.push_back(max_index + 1);\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmpjt_8ccxg: /tmp/tmpjt_8ccxg.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index=0;\n        for(int j=0;j<=i;j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index==i)\n            continue;\n        if(max_index!=0){\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n        }\n        result.push_back(i+1);\n        std::reverse(nums.begin(),nums.begin()+i+1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmpjhxaj8q9: /tmp/tmpjhxaj8q9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; ++i) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - 1 - i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmp5n6nv_s8: /tmp/tmp5n6nv_s8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmprt0bmqrq: /tmp/tmprt0bmqrq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    int n = nums.size();\n    while (n > 0) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + n));\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n);\n        sorted.push_back(max_index + 1);\n        sorted.push_back(n);\n        n--;\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmpks09s21c: /tmp/tmpks09s21c.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for (int j = 1; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmpxna8q7t6: /tmp/tmpxna8q7t6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmppj0vxlyz: /tmp/tmppj0vxlyz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmpzzdbbs_c: /tmp/tmpzzdbbs_c.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index = std::max_element(nums.begin(),nums.begin()+i+1)-nums.begin();\n        if(max_index!=i){\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            result.push_back(i+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124282,
      "stdout": "",
      "stderr": "tmp79mf94jx: /tmp/tmp79mf94jx.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmpftdsm1fw: /tmp/tmpftdsm1fw.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp2fouv87w: /tmp/tmp2fouv87w.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp2fouv87w: /tmp/tmp2fouv87w.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    int n = nums.size();\n    std::vector<long> sorted_nums(nums);\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> flips;\n    for (int i = n - 1; i >= 0; i--) {\n        if (nums[i] == sorted_nums[i]) {\n            continue;\n        }\n        int j = 0;\n        while (nums[j] != sorted_nums[i]) {\n            j++;\n        }\n        std::reverse(nums.begin(), nums.begin() + j + 1);\n        flips.push_back(j + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n        flips.push_back(i + 1);\n    }\n    return flips;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmp1ia0q5k3: /tmp/tmp1ia0q5k3.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = 0;\n        for (int j = 0; j < n - i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != n - i - 1) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmpcnnv87ye: /tmp/tmpcnnv87ye.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int index = std::find(nums.begin(), nums.end(), sorted_nums[i]) - nums.begin();\n        result.push_back(index + 1);\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + index + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmp3ndamyue: /tmp/tmp3ndamyue.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> res;\n    int n = nums.size();\n    for (int i = n - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                res.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            res.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmpcj2k2e7n: /tmp/tmpcj2k2e7n.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmpzzdbbs_c: /tmp/tmpzzdbbs_c.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    int size = nums.size();\n    while(size > 0) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        if(max_index != size - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + size);\n        }\n        sorted_nums.push_back(nums[size - 1]);\n        nums.pop_back();\n        size--;\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmp9_5vn450: /tmp/tmp9_5vn450.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n    std::vector<long>::iterator it4;\n    std::vector<long>::iterator it5;\n    std::vector<long>::iterator it6;\n    std::vector<long>::iterator it7;\n    std::vector<long>::iterator it8;\n    std::vector<long>::iterator it9;\n    std::vector<long>::iterator it10;\n    std::vector<long>::iterator it11;\n    std::vector<long>::iterator it12;\n    std::vector<long>::iterator it13;\n    std::vector<long>::iterator it14;\n    std::vector<long>::iterator it15;\n    std::vector<long>::iterator it16;\n    std::vector<long>::iterator it17;\n    std::vector<long>::iterator it18;\n    std::vector<long>::iterator it19;\n    std::vector<long>::iterator it20;\n    std::vector<long>::iterator it21;\n    std::vector<long>::iterator it22;\n    std::vector<long>::iterator it23;\n    std::vector<long>::iterator it24;\n    std::vector<long>::iterator it25;\n    std::vector<long>::iterator it26;\n    std::vector<long>::iterator it27;\n    std::vector<long>::iterator it28;\n    std::vector<long>::iterator it29;\n    std::vector<long>::iterator it30;\n    std::vector<long>::iterator it31;\n    std::vector<long>::iterator it32;\n    std::vector<long>::iterator it33;\n    std::vector<long>::iterator it34;\n    std::vector<long>::iterator it35;\n    std::vector<long>::iterator it36;\n    std::vector<long>::iterator it37;\n    std::vector<long>::iterator it38;\n    std::vector<\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "/tmp/tmp2h0_14x_.cpp: In function \u2018std::vector<long int> pancake_sort(std::vector<long int>)\u2019:\n/tmp/tmp2h0_14x_.cpp:44:16: error: template argument 1 is invalid\n   44 |     std::vector<\n      |                ^\n/tmp/tmp2h0_14x_.cpp:44:16: error: template argument 2 is invalid\n/tmp/tmp2h0_14x_.cpp:45:1: error: expected unqualified-id before \u2018}\u2019 token\n   45 | }\n      | ^\n/tmp/tmp2h0_14x_.cpp:45:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if(max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmp73l500p_: /tmp/tmp73l500p_.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "tmpzzdbbs_c: /tmp/tmpzzdbbs_c.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp2fouv87w: /tmp/tmp2fouv87w.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    for(int i=0;i<nums.size();i++){\n        int max_index = std::distance(nums.begin(),std::max_element(nums.begin(),nums.end()));\n        std::reverse(nums.begin(),nums.begin()+max_index+1);\n        std::reverse(nums.begin(),nums.begin()+nums.size()-i);\n        sorted.push_back(max_index+1);\n        sorted.push_back(nums.size()-i);\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124288,
      "stdout": "",
      "stderr": "tmpg621eczk: /tmp/tmpg621eczk.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end() - i);\n        std::reverse(nums.begin(), nums.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124289,
      "stdout": "",
      "stderr": "tmp8yqk6xhp: /tmp/tmp8yqk6xhp.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != n-1) {\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(n-i);\n            std::reverse(nums.begin(), nums.begin() + n-i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124290,
      "stdout": "",
      "stderr": "tmpanrp8ml2: /tmp/tmpanrp8ml2.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here\n    int n = nums.size();\n    for(int i = 0; i < n; i++){\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124290,
      "stdout": "",
      "stderr": "tmpfmpm7f01: /tmp/tmpfmpm7f01.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if(max_index != i) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmp50q35z0p: /tmp/tmp50q35z0p.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmprt0bmqrq: /tmp/tmprt0bmqrq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        result.push_back(n);\n        nums.pop_back();\n        n--;\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124290,
      "stdout": "",
      "stderr": "tmpgo8v6uli: /tmp/tmpgo8v6uli.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp2fouv87w: /tmp/tmp2fouv87w.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    int size = nums.size();\n    while(size > 0){\n        int max_index = 0;\n        for(int i = 0; i < size; i++){\n            if(nums[i] > nums[max_index]){\n                max_index = i;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + size);\n        sorted_nums.push_back(nums[size - 1]);\n        nums.pop_back();\n        size--;\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124290,
      "stdout": "",
      "stderr": "tmp_24jt9p9: /tmp/tmp_24jt9p9.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpqccygaq1: /tmp/tmpqccygaq1.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index != i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124290,
      "stdout": "",
      "stderr": "tmp_kidkh3m: /tmp/tmp_kidkh3m.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = n-1; i >= 0; i--) {\n        int max_index = 0;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            if(max_index != 0) {\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(), nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(), nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124290,
      "stdout": "",
      "stderr": "tmpiwvrtzns: /tmp/tmpiwvrtzns.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index != i - 1) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124290,
      "stdout": "",
      "stderr": "tmpu32bji30: /tmp/tmpu32bji30.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for (int i = 0; i < nums.size(); i++) {\n        sorted_nums.push_back(i + 1);\n    }\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int index = std::find(sorted_nums.begin(), sorted_nums.end(), nums[i]) - sorted_nums.begin();\n        if (index == 0) {\n            continue;\n        }\n        if (index != sorted_nums.size() - 1) {\n            result.push_back(index + 1);\n            std::reverse(sorted_nums.begin(), sorted_nums.begin() + index + 1);\n        }\n        result.push_back(sorted_nums.size() - i);\n        std::reverse(sorted_nums.begin(), sorted_nums.end() - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124290,
      "stdout": "",
      "stderr": "tmpfca8mlrq: /tmp/tmpfca8mlrq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i > 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124290,
      "stdout": "",
      "stderr": "tmp11oc_6fe: /tmp/tmp11oc_6fe.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        auto it = std::max_element(nums.begin(), nums.begin() + i + 1);\n        if (it != nums.begin() + i) {\n            result.push_back(it - nums.begin() + 1);\n            std::reverse(nums.begin(), it + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124290,
      "stdout": "",
      "stderr": "tmp97ebcy1m: /tmp/tmp97ebcy1m.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n            result.push_back(n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp66dpfhbz: /tmp/tmp66dpfhbz.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            sorted_nums.push_back(max_index + 1);\n        }\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n        sorted_nums.push_back(i + 1);\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "tmp6bksvuzi: /tmp/tmp6bksvuzi.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124280,
      "stdout": "",
      "stderr": "tmp2fouv87w: /tmp/tmp2fouv87w.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}