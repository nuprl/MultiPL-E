{
  "name": "mbpp_567_issort_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a specified list is sorted or not.\nbool issort_list(std::vector<long> list1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = issort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)6, (long)8, (long)10, (long)12, (long)14, (long)16, (long)17}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)6, (long)8, (long)10, (long)12, (long)14, (long)20, (long)17}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)6, (long)8, (long)10, (long)15, (long)14, (long)20}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    for(int i=0;i<list1.size()-1;i++) {\n        if(list1[i]>list1[i+1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<list1.size()-1;i++) {\n        if(list1[i]>list1[i+1]) {\n            return false;\n        }\n    }\n    return true;",
    "    bool sorted = true;\n    for (int i = 0; i < list1.size() - 1; i++) {\n        if (list1[i] > list1[i + 1]) {\n            sorted = false;\n            break;\n        }\n    }\n    return sorted;",
    "    int i = 0;\n    while(i < list1.size()-1) {\n        if(list1[i] > list1[i+1]) {\n            return false;\n        }\n        i++;\n    }\n    return true;",
    "    for (int i = 0; i < list1.size() - 1; i++) {\n        if (list1[i] > list1[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<list1.size()-1;i++) {\n        if(list1[i]>list1[i+1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for (int i = 0; i < list1.size() - 1; i++) {\n        if (list1[i] > list1[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<list1.size()-1;i++) {\n        if(list1[i]>list1[i+1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for (int i = 0; i < list1.size() - 1; i++) {\n        if (list1[i] > list1[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for (int i = 0; i < list1.size() - 1; i++) {\n        if (list1[i] > list1[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i = 0; i < list1.size() - 1; i++) {\n        if(list1[i] > list1[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<list1.size()-1;i++) {\n        if(list1[i]>list1[i+1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<list1.size()-1;i++) {\n        if(list1[i]>list1[i+1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i = 0; i < list1.size() - 1; i++) {\n        if(list1[i] > list1[i+1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<list1.size()-1;i++) {\n        if(list1[i]>list1[i+1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for (int i = 0; i < list1.size()-1; i++) {\n        if (list1[i] > list1[i+1]) {\n            return false;\n        }\n    }\n    return true;",
    "    bool is_sorted = true;\n    for (int i = 0; i < list1.size() - 1; i++) {\n        if (list1[i] > list1[i + 1]) {\n            is_sorted = false;\n            break;\n        }\n    }\n    return is_sorted;",
    "    for (int i = 0; i < list1.size() - 1; i++) {\n        if (list1[i] > list1[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<list1.size()-1;i++) {\n        if(list1[i]>list1[i+1]) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = list1.size();\n    for (int i = 0; i < n - 1; i++) {\n        if (list1[i] > list1[i + 1]) {\n            return false;\n        }\n    }\n    return true;"
  ]
}