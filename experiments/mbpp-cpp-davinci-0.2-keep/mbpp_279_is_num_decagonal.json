{
  "name": "mbpp_279_is_num_decagonal",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth decagonal number.\nlong is_num_decagonal(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = is_num_decagonal;\n    assert(candidate((3)) == (27));\n    assert(candidate((7)) == (175));\n    assert(candidate((10)) == (370));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= i;\n        i += 4;\n    }\n    if(num == 0)\n        return 1;\n    return 0;",
    "    long i = 1;\n    while(i*(3*i-2) < n) {\n        i++;\n    }\n    if(i*(3*i-2) == n) {\n        return 1;\n    }\n    return 0;",
    "    double x = (sqrt(40*n + 9) + 3)/10;\n    if (x == (long)x) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return x;\n    }\n    return 0;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= i;\n        i += 4;\n    }\n    if(num == 0) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 4*2*n) - 1)/2;\n    if(x*(3*x - 1)/2 == n)\n        return 1;\n    return 0;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= i * 3;\n        i++;\n    }\n    if(num == 0) {\n        return 1;\n    }\n    return 0;",
    "    long a = (3*n*n-n)/2;\n    long b = (3*n*n+n)/2;\n    long c = (3*n*n+n)/2;\n    long d = (3*n*n-n)/2;\n    long e = (3*n*n+n)/2;\n    long f = (3*n*n-n)/2;\n    long g = (3*n*n+n)/2;\n    long h = (3*n*n-n)/2;\n    long i = (3*n*n+n)/2;\n    long j = (3*n*n-n)/2;\n    long k = (3*n*n+n)/2;\n    long l = (3*n*n-n)/2;\n    long m = (3*n*n+n)/2;\n    long o = (3*n*n-n)/2;\n    long p = (3*n*n+n)/2;\n    long q = (3*n*n-n)/2;\n    long r = (3*n*n+n)/2;\n    long s = (3*n*n-n)/2;\n    long t = (3*n*n+n)/2;\n    long u = (3*n*n-n)/2;\n    long v = (3*n*n+n)/2;\n    long w = (3*n*n-n)/2;\n    long x = (3*n*n+n)/2;\n    long y = (3*n*n-n)/2;\n    long z = (3*n*n+n)/2;\n    long aa = (3*n*n-n)/2;\n    long bb = (3*n*n+n)/2;\n    long cc = (3*n*n-n)/2;\n    long dd = (3*n*n+n)/2;\n    long ee = (3*n*n-n)/2;\n    long ff = (3*n*n+n)/2;\n    long gg = (3*n*n-",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (long) x;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long x = (sqrt(1 + 4*2*n) - 1) / 2;\n    if (x * (3*x - 1) / 2 == n)\n        return 1;\n    return 0;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n)\n        return 1;\n    return 0;",
    "    long a = (3*n*n - n)/2;\n    return a;",
    "  long num = n;\n  long i = 1;\n  while(num > 0) {\n    num -= i;\n    i += 4;\n  }\n  if(num == 0) return 1;\n  return 0;",
    "    float x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (int) x;",
    "    long a = (3*n*n - n)/2;\n    return a;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= i;\n        i += 4;\n    }\n    if(num == 0)\n        return 1;\n    return 0;",
    "    long x = (3*n*n - n)/2;\n    return x;",
    "    long x = (3 * n * n - n) / 2;\n    return x;"
  ]
}