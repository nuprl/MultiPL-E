{
  "name": "mbpp_129_magic_square_test",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate whether the matrix is a magic square.\nbool magic_square_test(std::vector<std::vector<long>> my_matrix) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = magic_square_test;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)12, (long)1, (long)14}), (std::vector<long>)std::vector<long>({(long)2, (long)13, (long)8, (long)11}), (std::vector<long>)std::vector<long>({(long)16, (long)3, (long)10, (long)5}), (std::vector<long>)std::vector<long>({(long)9, (long)6, (long)15, (long)4})}))) == (true));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)3, (long)8})}))) == (true));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)3, (long)7})}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 1; i < n; i++) {\n        int sum_row = 0;\n        for(int j = 0; j < n; j++)\n            sum_row += my_matrix[i][j];\n        if(sum_row != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++) {\n        int sum_col = 0;\n        for(int j = 0; j < n; j++)\n            sum_col += my_matrix[j][i];\n        if(sum_col != sum)\n            return false;\n    }\n    int sum_diag1 = 0;\n    for(int i = 0; i < n; i++)\n        sum_diag1 += my_matrix[i][i];\n    if(sum_diag1 != sum)\n        return false;\n    int sum_diag2 = 0;\n    for(int i = 0; i < n; i++)\n        sum_diag2 += my_matrix[i][n - i - 1];\n    if(sum_diag2 != sum)\n        return false;\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 1; i < n; i++)\n    {\n        int sum_row = 0;\n        for(int j = 0; j < n; j++)\n            sum_row += my_matrix[i][j];\n        if(sum_row != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++)\n    {\n        int sum_col = 0;\n        for(int j = 0; j < n; j++)\n            sum_col += my_matrix[j][i];\n        if(sum_col != sum)\n            return false;\n    }\n    int sum_diag1 = 0;\n    for(int i = 0; i < n; i++)\n        sum_diag1 += my_matrix[i][i];\n    if(sum_diag1 != sum)\n        return false;\n    int sum_diag2 = 0;\n    for(int i = 0; i < n; i++)\n        sum_diag2 += my_matrix[i][n-i-1];\n    if(sum_diag2 != sum)\n        return false;\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    return true;",
    "    // Check if the matrix is a square matrix\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // Check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum1 = 0;\n    long diag_sum2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum1 += my_matrix[i][i];\n        diag_sum2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (diag_sum1 != sum || diag_sum2 != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++)\n            row_sum += my_matrix[i][j];\n        if(row_sum != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++)\n            col_sum += my_matrix[j][i];\n        if(col_sum != sum)\n            return false;\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][i];\n    if(diag_sum != sum)\n        return false;\n    diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][n-i-1];\n    if(diag_sum != sum)\n        return false;\n    return true;",
    "    // check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is a magic square\n    std::vector<long> row_sum(n, 0);\n    std::vector<long> col_sum(n, 0);\n    long diag_sum1 = 0;\n    long diag_sum2 = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            row_sum[i] += my_matrix[i][j];\n            col_sum[j] += my_matrix[i][j];\n            if (i == j) {\n                diag_sum1 += my_matrix[i][j];\n            }\n            if (i + j == n - 1) {\n                diag_sum2 += my_matrix[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < n - 1; i++) {\n        if (row_sum[i] != row_sum[i + 1]) {\n            return false;\n        }\n        if (col_sum[i] != col_sum[i + 1]) {\n            return false;\n        }\n    }\n    if (diag_sum1 != diag_sum2) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is a magic square\n    // check if the sum of each row is equal\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][0];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    // check if the sum of each column is equal\n    for (int j = 0; j < n; j++) {\n        long col_sum = 0;\n        for (int i = 0; i < n; i++) {\n            col_sum += my_matrix[i][j];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    // check if the sum of the diagonal is equal\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    // check if the sum of the other diagonal is equal\n    long other_diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        other_diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (other_diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    assert(my_matrix.size() == my_matrix[0].size());\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_row = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_col = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag_1 = 0;\n    long sum_diag_2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag_1 += my_matrix[i][i];\n        sum_diag_2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (sum_diag_1 != sum || sum_diag_2 != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    int sum1 = 0;\n    int sum2 = 0;\n    int sum3 = 0;\n    int sum4 = 0;\n    int sum5 = 0;\n    int sum6 = 0;\n    int sum7 = 0;\n    int sum8 = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < n; i++) {\n        sum1 += my_matrix[i][0];\n    }\n    for(int i = 0; i < n; i++) {\n        sum2 += my_matrix[i][1];\n    }\n    for(int i = 0; i < n; i++) {\n        sum3 += my_matrix[i][2];\n    }\n    for(int i = 0; i < n; i++) {\n        sum4 += my_matrix[i][3];\n    }\n    for(int i = 0; i < n; i++) {\n        sum5 += my_matrix[i][4];\n    }\n    for(int i = 0; i < n; i++) {\n        sum6 += my_matrix[i][5];\n    }\n    for(int i = 0; i < n; i++) {\n        sum7 += my_matrix[i][6];\n    }\n    for(int i = 0; i < n; i++) {\n        sum8 += my_matrix[i][7];\n    }\n    if(sum == sum1 && sum1 == sum2 && sum2 == sum3 && sum3 == sum4 && sum4 == sum5 && sum5 == sum6 && sum6 == sum7 && sum7 == sum8) {\n        return true;\n    }\n    return false;",
    "    // check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the sum of each row is the same\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 1; i < n; i++) {\n        long sum_row = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    // check if the sum of each column is the same\n    for (int i = 0; i < n; i++) {\n        long sum_col = 0;\n        for (int j = 0; j < n; j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    // check if the sum of the diagonal is the same\n    long sum_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag += my_matrix[i][i];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    // check if the sum of the other diagonal is the same\n    long sum_diag_other = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag_other += my_matrix[i][n - 1 - i];\n    }\n    if (sum_diag_other != sum) {\n        return false;\n    }\n    // check if all the elements are unique\n    std::vector<long> elements;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++)",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if(row_sum != sum) {\n            return false;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if(col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][0];\n    }\n    for (int i = 0; i < n; i++) {\n        long sum_row = 0;\n        long sum_col = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag1 = 0;\n    long sum_diag2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag1 != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;",
    "    assert(my_matrix.size() == my_matrix[0].size());\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_row = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_col = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag += my_matrix[i][i];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    sum_diag = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    return true;",
    "    long sum = 0;\n    long sum_diag = 0;\n    long sum_diag2 = 0;\n    long sum_row = 0;\n    long sum_col = 0;\n    for(int i = 0; i < my_matrix.size(); i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for(int j = 0; j < my_matrix[i].size(); j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if(i == 0) {\n            sum = sum_row;\n        }\n        if(sum_row != sum || sum_col != sum) {\n            return false;\n        }\n        sum_diag += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if(sum_diag != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the matrix is a magic square\n    // Check the sum of each row\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][0];\n    }\n    for (int i = 0; i < n; i++) {\n        long sum_row = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    // Check the sum of each column\n    for (int j = 0; j < n; j++) {\n        long sum_col = 0;\n        for (int i = 0; i < n; i++) {\n            sum_col += my_matrix[i][j];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    // Check the sum of the diagonal\n    long sum_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag += my_matrix[i][i];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    // Check the sum of the anti-diagonal\n    long sum_anti_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum_anti_diag += my_matrix[i][n - 1 - i];\n    }\n    if (sum_anti_diag != sum) {\n        return false;\n    }\n    // Check if the matrix contains all numbers from 1 to n^2\n    std::vector<long> my_vector;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j",
    "    // Check if the matrix is square\n    assert(my_matrix.size() == my_matrix[0].size());\n    // Check if the matrix is odd\n    assert(my_matrix.size() % 2 != 0);\n    // Check if the matrix is greater than 1\n    assert(my_matrix.size() > 1);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    int sum2 = 0;\n    for(int i = 0; i < n; i++) {\n        sum2 = 0;\n        for(int j = 0; j < n; j++) {\n            sum2 += my_matrix[i][j];\n        }\n        if(sum2 != sum) {\n            return false;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        sum2 = 0;\n        for(int j = 0; j < n; j++) {\n            sum2 += my_matrix[j][i];\n        }\n        if(sum2 != sum) {\n            return false;\n        }\n    }\n    sum2 = 0;\n    for(int i = 0; i < n; i++) {\n        sum2 += my_matrix[i][i];\n    }\n    if(sum2 != sum) {\n        return false;\n    }\n    sum2 = 0;\n    for(int i = 0; i < n; i++) {\n        sum2 += my_matrix[i][n-i-1];\n    }\n    if(sum2 != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 1; i < n; i++) {\n        int sum_row = 0;\n        for(int j = 0; j < n; j++)\n            sum_row += my_matrix[i][j];\n        if(sum_row != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++) {\n        int sum_col = 0;\n        for(int j = 0; j < n; j++)\n            sum_col += my_matrix[j][i];\n        if(sum_col != sum)\n            return false;\n    }\n    int sum_diag = 0;\n    for(int i = 0; i < n; i++)\n        sum_diag += my_matrix[i][i];\n    if(sum_diag != sum)\n        return false;\n    sum_diag = 0;\n    for(int i = 0; i < n; i++)\n        sum_diag += my_matrix[i][n - i - 1];\n    if(sum_diag != sum)\n        return false;\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for(int i = 0; i < n; i++) {\n        if(my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        long tmp = 0;\n        for(int j = 0; j < n; j++) {\n            tmp += my_matrix[i][j];\n        }\n        if(tmp != sum) {\n            return false;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        long tmp = 0;\n        for(int j = 0; j < n; j++) {\n            tmp += my_matrix[j][i];\n        }\n        if(tmp != sum) {\n            return false;\n        }\n    }\n    long tmp = 0;\n    for(int i = 0; i < n; i++) {\n        tmp += my_matrix[i][i];\n    }\n    if(tmp != sum) {\n        return false;\n    }\n    tmp = 0;\n    for(int i = 0; i < n; i++) {\n        tmp += my_matrix[i][n - i - 1];\n    }\n    if(tmp != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is a square matrix.\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the sum of each row is equal.\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 1; i < n; i++) {\n        long sum_row = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    // Check if the sum of each column is equal.\n    for (int i = 0; i < n; i++) {\n        long sum_column = 0;\n        for (int j = 0; j < n; j++) {\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_column != sum) {\n            return false;\n        }\n    }\n    // Check if the sum of each diagonal is equal.\n    long sum_diagonal1 = 0;\n    long sum_diagonal2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diagonal1 += my_matrix[i][i];\n        sum_diagonal2 += my_matrix[i][n - i - 1];\n    }\n    if (sum_diagonal1 != sum || sum_diagonal2 != sum) {\n        return false;\n    }\n    // Check if the numbers in the matrix are unique.\n    std::vector<long> my_vector;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            my_vector.push_back(my_matrix[i][j]);\n        }\n    }\n    std::sort(my_vector.begin(), my_",
    "    // Check if the matrix is a square matrix.\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // Check if the matrix is a magic square.\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_row = 0;\n        long sum_col = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag += my_matrix[i][i];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    sum_diag = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    return true;",
    "    long n = my_matrix.size();\n    long sum = 0;\n    long sum_diag = 0;\n    long sum_rev_diag = 0;\n    for (long i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n        sum_diag += my_matrix[i][i];\n        sum_rev_diag += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag != sum || sum_rev_diag != sum) {\n        return false;\n    }\n    for (long i = 1; i < n; i++) {\n        long row_sum = 0;\n        long col_sum = 0;\n        for (long j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    int sum2 = 0;\n    for(int i = 0; i < n; i++){\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < n; i++){\n        sum2 = 0;\n        for(int j = 0; j < n; j++){\n            sum2 += my_matrix[i][j];\n        }\n        if(sum2 != sum){\n            return false;\n        }\n    }\n    for(int i = 0; i < n; i++){\n        sum2 = 0;\n        for(int j = 0; j < n; j++){\n            sum2 += my_matrix[j][i];\n        }\n        if(sum2 != sum){\n            return false;\n        }\n    }\n    sum2 = 0;\n    for(int i = 0; i < n; i++){\n        sum2 += my_matrix[i][i];\n    }\n    if(sum2 != sum){\n        return false;\n    }\n    sum2 = 0;\n    for(int i = 0; i < n; i++){\n        sum2 += my_matrix[i][n-i-1];\n    }\n    if(sum2 != sum){\n        return false;\n    }\n    return true;",
    "    // TODO: Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i=0; i<n; i++)\n        sum += my_matrix[0][i];\n    for(int i=1; i<n; i++){\n        int sum_row = 0;\n        for(int j=0; j<n; j++)\n            sum_row += my_matrix[i][j];\n        if(sum_row != sum)\n            return false;\n    }\n    for(int i=0; i<n; i++){\n        int sum_col = 0;\n        for(int j=0; j<n; j++)\n            sum_col += my_matrix[j][i];\n        if(sum_col != sum)\n            return false;\n    }\n    int sum_diag = 0;\n    for(int i=0; i<n; i++)\n        sum_diag += my_matrix[i][i];\n    if(sum_diag != sum)\n        return false;\n    sum_diag = 0;\n    for(int i=0; i<n; i++)\n        sum_diag += my_matrix[i][n-i-1];\n    if(sum_diag != sum)\n        return false;\n    return true;",
    "    // Check if the matrix is a square matrix.\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // Check if the matrix is a magic square.\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_row = 0;\n        long sum_col = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag = 0;\n    long sum_diag_2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag += my_matrix[i][i];\n        sum_diag_2 += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (sum_diag != sum || sum_diag_2 != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    return true;",
    "    // Check if the matrix is a square matrix.\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // Check if the matrix is a magic square.\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    int sum2 = 0;\n    for(int i = 0; i < n; i++){\n        sum += my_matrix[i][i];\n        sum2 += my_matrix[i][n-i-1];\n    }\n    if(sum != sum2) return false;\n    for(int i = 0; i < n; i++){\n        int sum_row = 0;\n        int sum_col = 0;\n        for(int j = 0; j < n; j++){\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if(sum_row != sum || sum_col != sum) return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int magic_constant = n*(n*n+1)/2;\n    int row_sum = 0;\n    int col_sum = 0;\n    int diag_sum = 0;\n    int diag_sum2 = 0;\n    for(int i=0; i<n; i++) {\n        row_sum = 0;\n        col_sum = 0;\n        for(int j=0; j<n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        diag_sum += my_matrix[i][i];\n        diag_sum2 += my_matrix[i][n-i-1];\n        if(row_sum != magic_constant || col_sum != magic_constant)\n            return false;\n    }\n    if(diag_sum != magic_constant || diag_sum2 != magic_constant)\n        return false;\n    return true;",
    "    // check if the matrix is square\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is magic square\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum1 = 0;\n    long diag_sum2 = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum1 += my_matrix[i][i];\n        diag_sum2 += my_matrix[i][n-i-1];\n    }\n    if (diag_sum1 != sum || diag_sum2 != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the sum of each row is equal\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 1; i < n; i++) {\n        long temp_sum = 0;\n        for (int j = 0; j < n; j++) {\n            temp_sum += my_matrix[i][j];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    // check if the sum of each column is equal\n    for (int i = 0; i < n; i++) {\n        long temp_sum = 0;\n        for (int j = 0; j < n; j++) {\n            temp_sum += my_matrix[j][i];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    // check if the sum of each diagonal is equal\n    long temp_sum = 0;\n    for (int i = 0; i < n; i++) {\n        temp_sum += my_matrix[i][i];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    temp_sum = 0;\n    for (int i = 0; i < n; i++) {\n        temp_sum += my_matrix[i][n - i - 1];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++)\n            row_sum += my_matrix[i][j];\n        if(row_sum != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++)\n            col_sum += my_matrix[j][i];\n        if(col_sum != sum)\n            return false;\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][i];\n    if(diag_sum != sum)\n        return false;\n    diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][n-i-1];\n    if(diag_sum != sum)\n        return false;\n    return true;",
    "    // Check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the matrix is a magic square\n    // Check if the sum of each row is equal to the sum of each column\n    long sum_row = 0;\n    long sum_col = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum_col) {\n            return false;\n        }\n        sum_row = 0;\n        sum_col = 0;\n    }\n    // Check if the sum of each diagonal is equal to the sum of each row\n    long sum_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag += my_matrix[i][i];\n    }\n    if (sum_diag != sum_row) {\n        return false;\n    }\n    sum_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag != sum_row) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][0];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    int sum2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum = sum + my_matrix[i][i];\n    }\n    for (int i = 0; i < n; i++) {\n        sum2 = sum2 + my_matrix[i][n - i - 1];\n    }\n    if (sum != sum2) {\n        return false;\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum = row_sum + my_matrix[i][j];\n            col_sum = col_sum + my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long sum_row = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long sum_col = 0;\n        for (int j = 0; j < n; j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag1 = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag1 += my_matrix[i][i];\n    }\n    if (sum_diag1 != sum) {\n        return false;\n    }\n    long sum_diag2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag2 += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag2 != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is square\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // check if the matrix is odd\n    if (my_matrix.size() % 2 == 0) {\n        return false;\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long temp = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            temp += my_matrix[i][j];\n        }\n        if (temp != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long temp = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            temp += my_matrix[j][i];\n        }\n        if (temp != sum) {\n            return false;\n        }\n    }\n    long temp = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        temp += my_matrix[i][i];\n    }\n    if (temp != sum) {\n        return false;\n    }\n    temp = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        temp += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (temp != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n=my_matrix.size();\n    int sum=0;\n    for(int i=0;i<n;i++)\n    {\n        sum+=my_matrix[0][i];\n    }\n    int sum1=0;\n    for(int i=0;i<n;i++)\n    {\n        sum1=0;\n        for(int j=0;j<n;j++)\n        {\n            sum1+=my_matrix[i][j];\n        }\n        if(sum1!=sum)\n        {\n            return false;\n        }\n    }\n    int sum2=0;\n    for(int i=0;i<n;i++)\n    {\n        sum2=0;\n        for(int j=0;j<n;j++)\n        {\n            sum2+=my_matrix[j][i];\n        }\n        if(sum2!=sum)\n        {\n            return false;\n        }\n    }\n    int sum3=0;\n    for(int i=0;i<n;i++)\n    {\n        sum3+=my_matrix[i][i];\n    }\n    if(sum3!=sum)\n    {\n        return false;\n    }\n    int sum4=0;\n    for(int i=0;i<n;i++)\n    {\n        sum4+=my_matrix[i][n-i-1];\n    }\n    if(sum4!=sum)\n    {\n        return false;\n    }\n    return true;",
    "    assert(my_matrix.size() == my_matrix[0].size());\n    long n = my_matrix.size();\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (long i = 1; i < n; i++) {\n        long sum_row = 0;\n        for (long j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (long i = 0; i < n; i++) {\n        long sum_col = 0;\n        for (long j = 0; j < n; j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag1 = 0;\n    long sum_diag2 = 0;\n    for (long i = 0; i < n; i++) {\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag1 != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    std::vector<long> row_sum(n, 0);\n    std::vector<long> col_sum(n, 0);\n    long diag_sum = 0;\n    long anti_diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            row_sum[i] += my_matrix[i][j];\n            col_sum[j] += my_matrix[i][j];\n            if (i == j) {\n                diag_sum += my_matrix[i][j];\n            }\n            if (i + j == n - 1) {\n                anti_diag_sum += my_matrix[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < n - 1; i++) {\n        if (row_sum[i] != row_sum[i + 1]) {\n            return false;\n        }\n        if (col_sum[i] != col_sum[i + 1]) {\n            return false;\n        }\n    }\n    if (diag_sum != row_sum[0]) {\n        return false;\n    }\n    if (anti_diag_sum != row_sum[0]) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is a square\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if(row_sum != sum) {\n            return false;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if(col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is square\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 1; i < n; i++) {\n        long sum_row = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long sum_col = 0;\n        for (int j = 0; j < n; j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag += my_matrix[i][i];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    sum_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the matrix is a magic square\n    // Check if the sum of each row is the same\n    long row_sum = 0;\n    for (int i = 0; i < n; i++) {\n        row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != n * (n * n + 1) / 2) {\n            return false;\n        }\n    }\n    // Check if the sum of each column is the same\n    long col_sum = 0;\n    for (int i = 0; i < n; i++) {\n        col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != n * (n * n + 1) / 2) {\n            return false;\n        }\n    }\n    // Check if the sum of the diagonal is the same\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != n * (n * n + 1) / 2) {\n        return false;\n    }\n    // Check if the sum of the anti-diagonal is the same\n    long anti_diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        anti_diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (anti_diag_sum != n * (n * n + 1) / 2) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is square\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the matrix is a magic square\n    // Check the sum of each row\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum = 0;\n        for (int j = 0; j < n; j++) {\n            sum += my_matrix[i][j];\n        }\n        if (sum != n * (n * n + 1) / 2) {\n            return false;\n        }\n    }\n    // Check the sum of each column\n    for (int i = 0; i < n; i++) {\n        sum = 0;\n        for (int j = 0; j < n; j++) {\n            sum += my_matrix[j][i];\n        }\n        if (sum != n * (n * n + 1) / 2) {\n            return false;\n        }\n    }\n    // Check the sum of the main diagonal\n    sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][i];\n    }\n    if (sum != n * (n * n + 1) / 2) {\n        return false;\n    }\n    // Check the sum of the secondary diagonal\n    sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][n - i - 1];\n    }\n    if (sum != n * (n * n + 1) / 2) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 0; i < n; i++){\n        int row_sum = 0;\n        for(int j = 0; j < n; j++)\n            row_sum += my_matrix[i][j];\n        if(row_sum != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++){\n        int col_sum = 0;\n        for(int j = 0; j < n; j++)\n            col_sum += my_matrix[j][i];\n        if(col_sum != sum)\n            return false;\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][i];\n    if(diag_sum != sum)\n        return false;\n    diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][n - i - 1];\n    if(diag_sum != sum)\n        return false;\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if(row_sum != sum) {\n            return false;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if(col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < n; i++) {\n        long sum_row = 0;\n        long sum_col = 0;\n        for(int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if(sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag1 = 0;\n    long sum_diag2 = 0;\n    for(int i = 0; i < n; i++) {\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][n-i-1];\n    }\n    if(sum_diag1 != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "  // Write your code here.\n  int n = my_matrix.size();\n  int sum = 0;\n  for(int i = 0; i < n; i++)\n    sum += my_matrix[0][i];\n  for(int i = 1; i < n; i++) {\n    int temp = 0;\n    for(int j = 0; j < n; j++)\n      temp += my_matrix[i][j];\n    if(temp != sum)\n      return false;\n  }\n  for(int i = 0; i < n; i++) {\n    int temp = 0;\n    for(int j = 0; j < n; j++)\n      temp += my_matrix[j][i];\n    if(temp != sum)\n      return false;\n  }\n  int temp = 0;\n  for(int i = 0; i < n; i++)\n    temp += my_matrix[i][i];\n  if(temp != sum)\n    return false;\n  temp = 0;\n  for(int i = 0; i < n; i++)\n    temp += my_matrix[i][n-i-1];\n  if(temp != sum)\n    return false;\n  return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 1; i < n; i++) {\n        int sum_row = 0;\n        for(int j = 0; j < n; j++)\n            sum_row += my_matrix[i][j];\n        if(sum_row != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++) {\n        int sum_col = 0;\n        for(int j = 0; j < n; j++)\n            sum_col += my_matrix[j][i];\n        if(sum_col != sum)\n            return false;\n    }\n    int sum_diag1 = 0;\n    for(int i = 0; i < n; i++)\n        sum_diag1 += my_matrix[i][i];\n    if(sum_diag1 != sum)\n        return false;\n    int sum_diag2 = 0;\n    for(int i = 0; i < n; i++)\n        sum_diag2 += my_matrix[i][n-i-1];\n    if(sum_diag2 != sum)\n        return false;\n    return true;",
    "    // Check if the matrix is square\n    assert(my_matrix.size() == my_matrix[0].size());\n    // Check if the matrix is odd\n    assert(my_matrix.size() % 2 == 1);\n    // Check if the matrix is filled with integers\n    for (int i = 0; i < my_matrix.size(); i++) {\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            assert(my_matrix[i][j] == (int)my_matrix[i][j]);\n        }\n    }\n    // Check if the matrix is filled with unique integers\n    std::vector<long> my_vector;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            my_vector.push_back(my_matrix[i][j]);\n        }\n    }\n    std::sort(my_vector.begin(), my_vector.end());\n    for (int i = 0; i < my_vector.size() - 1; i++) {\n        if (my_vector[i] == my_vector[i + 1]) {\n            return false;\n        }\n    }\n    // Check if the sum of each row is the same\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            sum += my_matrix[i][j];\n        }\n    }\n    long sum_row = sum / my_matrix.size();\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_row_temp = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            sum_row_temp += my_matrix[i][j];\n        }\n        if (sum_row_temp != sum_row) {\n            return false;\n        }\n    }\n    // Check if",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < my_matrix.size(); i++)\n        sum += my_matrix[0][i];\n    for(int i = 0; i < my_matrix.size(); i++)\n    {\n        long sum_row = 0;\n        long sum_col = 0;\n        for(int j = 0; j < my_matrix.size(); j++)\n        {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if(sum_row != sum || sum_col != sum)\n            return false;\n    }\n    long sum_diag1 = 0;\n    long sum_diag2 = 0;\n    for(int i = 0; i < my_matrix.size(); i++)\n    {\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if(sum_diag1 != sum || sum_diag2 != sum)\n        return false;\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    return true;",
    "    // Your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i=0;i<n;i++)\n    {\n        sum += my_matrix[0][i];\n    }\n    int row_sum = 0;\n    int col_sum = 0;\n    for(int i=0;i<n;i++)\n    {\n        row_sum = 0;\n        col_sum = 0;\n        for(int j=0;j<n;j++)\n        {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if(row_sum != sum || col_sum != sum)\n        {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    int diag_sum2 = 0;\n    for(int i=0;i<n;i++)\n    {\n        diag_sum += my_matrix[i][i];\n        diag_sum2 += my_matrix[i][n-i-1];\n    }\n    if(diag_sum != sum || diag_sum2 != sum)\n    {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    int sum_diag1 = 0;\n    int sum_diag2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag1 != sum || sum_diag2 != sum) {\n        return false;\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    int row_sum = 0;\n    int col_sum = 0;\n    for (int i = 0; i < n; i++) {\n        row_sum = 0;\n        col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    int diag_sum2 = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n        diag_sum2 += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum || diag_sum2 != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    int sum2 = 0;\n    int sum3 = 0;\n    int sum4 = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n        sum2 += my_matrix[i][0];\n        sum3 += my_matrix[i][i];\n        sum4 += my_matrix[i][n-i-1];\n    }\n    if(sum != sum2 || sum != sum3 || sum != sum4) {\n        return false;\n    }\n    for(int i = 0; i < n; i++) {\n        int sum_row = 0;\n        int sum_col = 0;\n        for(int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if(sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    return true;",
    "    // check if the matrix is a square matrix\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long temp = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            temp += my_matrix[i][j];\n        }\n        if (temp != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long temp = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            temp += my_matrix[j][i];\n        }\n        if (temp != sum) {\n            return false;\n        }\n    }\n    long temp = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        temp += my_matrix[i][i];\n    }\n    if (temp != sum) {\n        return false;\n    }\n    temp = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        temp += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (temp != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < my_matrix.size(); i++) {\n        long sum_row = 0;\n        long sum_col = 0;\n        for(int j = 0; j < my_matrix.size(); j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if(sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag1 = 0;\n    long sum_diag2 = 0;\n    for(int i = 0; i < my_matrix.size(); i++) {\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if(sum_diag1 != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;",
    "    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    long n = my_matrix.size();\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (long i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (long j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (long i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (long j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (long i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (long i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is square\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // check if the matrix is odd\n    if (my_matrix.size() % 2 == 0) {\n        return false;\n    }\n    // check if the sum of the rows is equal\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[i][0];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_row = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    // check if the sum of the columns is equal\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_col = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    // check if the sum of the diagonals is equal\n    long sum_diag1 = 0;\n    long sum_diag2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (sum_diag1 != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is square\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // check if the matrix is odd\n    if (my_matrix.size() % 2 == 0) {\n        return false;\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diagonal_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diagonal_sum += my_matrix[i][i];\n    }\n    if (diagonal_sum != sum) {\n        return false;\n    }\n    diagonal_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diagonal_sum += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (diagonal_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is square\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // check if the matrix is odd\n    if (my_matrix.size() % 2 == 0) {\n        return false;\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is square\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the matrix is magic square\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the sum of each row is equal to the sum of each column\n    long sum_row = 0;\n    long sum_col = 0;\n    for (int i = 0; i < n; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum_col) {\n            return false;\n        }\n    }\n    // check if the sum of each diagonal is equal to the sum of each row\n    long sum_diag1 = 0;\n    long sum_diag2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][n - 1 - i];\n    }\n    if (sum_diag1 != sum_diag2) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < my_matrix.size(); i++){\n        sum += my_matrix[0][i];\n    }\n    long sum2 = 0;\n    for(int i = 0; i < my_matrix.size(); i++){\n        sum2 += my_matrix[i][0];\n    }\n    if(sum != sum2){\n        return false;\n    }\n    for(int i = 0; i < my_matrix.size(); i++){\n        long sum3 = 0;\n        for(int j = 0; j < my_matrix.size(); j++){\n            sum3 += my_matrix[i][j];\n        }\n        if(sum3 != sum){\n            return false;\n        }\n    }\n    for(int i = 0; i < my_matrix.size(); i++){\n        long sum4 = 0;\n        for(int j = 0; j < my_matrix.size(); j++){\n            sum4 += my_matrix[j][i];\n        }\n        if(sum4 != sum){\n            return false;\n        }\n    }\n    long sum5 = 0;\n    for(int i = 0; i < my_matrix.size(); i++){\n        sum5 += my_matrix[i][i];\n    }\n    if(sum5 != sum){\n        return false;\n    }\n    long sum6 = 0;\n    for(int i = 0; i < my_matrix.size(); i++){\n        sum6 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if(sum6 != sum){\n        return false;\n    }\n    return true;",
    "  // Write your code here\n  int n = my_matrix.size();\n  int sum = 0;\n  for(int i = 0; i < n; i++) {\n    sum += my_matrix[0][i];\n  }\n  for(int i = 1; i < n; i++) {\n    int sum_row = 0;\n    for(int j = 0; j < n; j++) {\n      sum_row += my_matrix[i][j];\n    }\n    if(sum_row != sum) {\n      return false;\n    }\n  }\n  for(int i = 0; i < n; i++) {\n    int sum_col = 0;\n    for(int j = 0; j < n; j++) {\n      sum_col += my_matrix[j][i];\n    }\n    if(sum_col != sum) {\n      return false;\n    }\n  }\n  int sum_diag1 = 0;\n  int sum_diag2 = 0;\n  for(int i = 0; i < n; i++) {\n    sum_diag1 += my_matrix[i][i];\n    sum_diag2 += my_matrix[i][n-i-1];\n  }\n  if(sum_diag1 != sum || sum_diag2 != sum) {\n    return false;\n  }\n  return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is a square matrix.\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // Check if the matrix is a magic square.\n    long sum = 0;\n    for (long i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (long i = 0; i < my_matrix.size(); i++) {\n        long temp_sum = 0;\n        for (long j = 0; j < my_matrix.size(); j++) {\n            temp_sum += my_matrix[i][j];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    for (long i = 0; i < my_matrix.size(); i++) {\n        long temp_sum = 0;\n        for (long j = 0; j < my_matrix.size(); j++) {\n            temp_sum += my_matrix[j][i];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    long temp_sum = 0;\n    for (long i = 0; i < my_matrix.size(); i++) {\n        temp_sum += my_matrix[i][i];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    temp_sum = 0;\n    for (long i = 0; i < my_matrix.size(); i++) {\n        temp_sum += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    return true;",
    "    long sum = 0;\n    long sum_row = 0;\n    long sum_col = 0;\n    long sum_diag = 0;\n    long sum_rev_diag = 0;\n    long n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        sum_diag += my_matrix[i][i];\n        sum_rev_diag += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag != sum || sum_rev_diag != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is square\n    assert(my_matrix.size() == my_matrix[0].size());\n    // check if the matrix is odd\n    assert(my_matrix.size() % 2 == 1);\n    // check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long temp_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            temp_sum += my_matrix[i][j];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long temp_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            temp_sum += my_matrix[j][i];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    long temp_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        temp_sum += my_matrix[i][i];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    temp_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        temp_sum += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    int sum2 = 0;\n    for(int i = 0; i < n; i++)\n    {\n        sum = 0;\n        sum2 = 0;\n        for(int j = 0; j < n; j++)\n        {\n            sum += my_matrix[i][j];\n            sum2 += my_matrix[j][i];\n        }\n        if(sum != sum2)\n        {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++)\n            row_sum += my_matrix[i][j];\n        if(row_sum != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++)\n            col_sum += my_matrix[j][i];\n        if(col_sum != sum)\n            return false;\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][i];\n    if(diag_sum != sum)\n        return false;\n    diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][n-i-1];\n    if(diag_sum != sum)\n        return false;\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    int sum2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum = 0;\n        sum2 = 0;\n        for (int j = 0; j < n; j++) {\n            sum += my_matrix[i][j];\n            sum2 += my_matrix[j][i];\n        }\n        if (sum != sum2) {\n            return false;\n        }\n    }\n    sum = 0;\n    sum2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][i];\n        sum2 += my_matrix[i][n - i - 1];\n    }\n    if (sum != sum2) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // check if matrix is square\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // check if matrix is odd\n    if (my_matrix.size() % 2 == 0) {\n        return false;\n    }\n    // check if matrix is magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is a square matrix.\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the sum of each row is the same.\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 1; i < n; i++) {\n        long temp_sum = 0;\n        for (int j = 0; j < n; j++) {\n            temp_sum += my_matrix[i][j];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    // Check if the sum of each column is the same.\n    for (int i = 0; i < n; i++) {\n        long temp_sum = 0;\n        for (int j = 0; j < n; j++) {\n            temp_sum += my_matrix[j][i];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    // Check if the sum of the diagonal is the same.\n    long temp_sum = 0;\n    for (int i = 0; i < n; i++) {\n        temp_sum += my_matrix[i][i];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    temp_sum = 0;\n    for (int i = 0; i < n; i++) {\n        temp_sum += my_matrix[i][n - i - 1];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    // Check if each number is unique.\n    std::vector<long> nums;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            nums.push_back(my_matrix[i][j]);\n        }",
    "  // Write your code here\n  int n = my_matrix.size();\n  int sum = 0;\n  for(int i = 0; i < n; i++)\n    sum += my_matrix[0][i];\n  for(int i = 0; i < n; i++){\n    int row_sum = 0;\n    for(int j = 0; j < n; j++)\n      row_sum += my_matrix[i][j];\n    if(row_sum != sum)\n      return false;\n  }\n  for(int i = 0; i < n; i++){\n    int col_sum = 0;\n    for(int j = 0; j < n; j++)\n      col_sum += my_matrix[j][i];\n    if(col_sum != sum)\n      return false;\n  }\n  int diag_sum = 0;\n  for(int i = 0; i < n; i++)\n    diag_sum += my_matrix[i][i];\n  if(diag_sum != sum)\n    return false;\n  diag_sum = 0;\n  for(int i = 0; i < n; i++)\n    diag_sum += my_matrix[i][n-i-1];\n  if(diag_sum != sum)\n    return false;\n  return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    int sum2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum = 0;\n        sum2 = 0;\n        for (int j = 0; j < n; j++) {\n            sum += my_matrix[i][j];\n            sum2 += my_matrix[j][i];\n        }\n        if (sum != sum2) {\n            return false;\n        }\n    }\n    return true;",
    "    // Check if the matrix is a square matrix\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // Check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_row = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_col = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag1 = 0;\n    long sum_diag2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (sum_diag1 != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is square\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is magic square\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is square\n    assert(my_matrix.size() == my_matrix[0].size());\n    // Check if the matrix is odd\n    assert(my_matrix.size() % 2 == 1);\n    // Check if the matrix is a magic square\n    long sum = 0;\n    for (long i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (long i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        long col_sum = 0;\n        for (long j = 0; j < my_matrix[i].size(); j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    long diag_sum_2 = 0;\n    for (long i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n        diag_sum_2 += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (diag_sum != sum || diag_sum_2 != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < my_matrix.size(); i++){\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < my_matrix.size(); i++){\n        long sum_row = 0;\n        for(int j = 0; j < my_matrix.size(); j++){\n            sum_row += my_matrix[i][j];\n        }\n        if(sum_row != sum){\n            return false;\n        }\n    }\n    for(int i = 0; i < my_matrix.size(); i++){\n        long sum_col = 0;\n        for(int j = 0; j < my_matrix.size(); j++){\n            sum_col += my_matrix[j][i];\n        }\n        if(sum_col != sum){\n            return false;\n        }\n    }\n    long sum_diag = 0;\n    for(int i = 0; i < my_matrix.size(); i++){\n        sum_diag += my_matrix[i][i];\n    }\n    if(sum_diag != sum){\n        return false;\n    }\n    sum_diag = 0;\n    for(int i = 0; i < my_matrix.size(); i++){\n        sum_diag += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if(sum_diag != sum){\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is square\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // Check if the matrix is odd\n    if (my_matrix.size() % 2 == 0) {\n        return false;\n    }\n    // Check if the matrix is a magic square\n    long magic_constant = my_matrix.size() * (my_matrix.size() * my_matrix.size() + 1) / 2;\n    long row_sum = 0;\n    long col_sum = 0;\n    long diag_sum = 0;\n    long diag_sum_2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n            if (i == j) {\n                diag_sum += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.size() - 1) {\n                diag_sum_2 += my_matrix[i][j];\n            }\n        }\n        if (row_sum != magic_constant || col_sum != magic_constant) {\n            return false;\n        }\n        row_sum = 0;\n        col_sum = 0;\n    }\n    if (diag_sum != magic_constant || diag_sum_2 != magic_constant) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long sum_row = 0;\n        long sum_col = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if(row_sum != sum) {\n            return false;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if(col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n-1-i];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    int sum2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum = sum + my_matrix[i][i];\n    }\n    for (int i = 0; i < n; i++) {\n        sum2 = sum2 + my_matrix[i][n - i - 1];\n    }\n    if (sum != sum2) {\n        return false;\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum = row_sum + my_matrix[i][j];\n            col_sum = col_sum + my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    return true;",
    "    // check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is a magic square\n    // check if the sum of each row is the same\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 1; i < n; i++) {\n        long temp_sum = 0;\n        for (int j = 0; j < n; j++) {\n            temp_sum += my_matrix[i][j];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    // check if the sum of each column is the same\n    for (int i = 0; i < n; i++) {\n        long temp_sum = 0;\n        for (int j = 0; j < n; j++) {\n            temp_sum += my_matrix[j][i];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    // check if the sum of the diagonal is the same\n    long temp_sum = 0;\n    for (int i = 0; i < n; i++) {\n        temp_sum += my_matrix[i][i];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    temp_sum = 0;\n    for (int i = 0; i < n; i++) {\n        temp_sum += my_matrix[i][n - 1 - i];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    return true;",
    "  // Write your code here\n  int n = my_matrix.size();\n  int sum = 0;\n  for(int i=0;i<n;i++)\n  {\n    sum += my_matrix[0][i];\n  }\n  int row_sum = 0;\n  int col_sum = 0;\n  for(int i=0;i<n;i++)\n  {\n    row_sum = 0;\n    col_sum = 0;\n    for(int j=0;j<n;j++)\n    {\n      row_sum += my_matrix[i][j];\n      col_sum += my_matrix[j][i];\n    }\n    if(row_sum != sum || col_sum != sum)\n    {\n      return false;\n    }\n  }\n  int diag_sum = 0;\n  for(int i=0;i<n;i++)\n  {\n    diag_sum += my_matrix[i][i];\n  }\n  if(diag_sum != sum)\n  {\n    return false;\n  }\n  diag_sum = 0;\n  for(int i=0;i<n;i++)\n  {\n    diag_sum += my_matrix[i][n-i-1];\n  }\n  if(diag_sum != sum)\n  {\n    return false;\n  }\n  return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i=0;i<n;i++)\n    {\n        sum += my_matrix[0][i];\n    }\n    int row_sum = 0;\n    int col_sum = 0;\n    for(int i=0;i<n;i++)\n    {\n        row_sum = 0;\n        col_sum = 0;\n        for(int j=0;j<n;j++)\n        {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if(row_sum != sum || col_sum != sum)\n        {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    int diag_sum_2 = 0;\n    for(int i=0;i<n;i++)\n    {\n        diag_sum += my_matrix[i][i];\n        diag_sum_2 += my_matrix[i][n-i-1];\n    }\n    if(diag_sum != sum || diag_sum_2 != sum)\n    {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    int row_sum = 0;\n    int col_sum = 0;\n    for (int i = 0; i < n; i++) {\n        row_sum = 0;\n        col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    int diagonal_sum = 0;\n    int diagonal_sum_2 = 0;\n    for (int i = 0; i < n; i++) {\n        diagonal_sum += my_matrix[i][i];\n        diagonal_sum_2 += my_matrix[i][n - i - 1];\n    }\n    if (diagonal_sum != sum || diagonal_sum_2 != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is a square\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is a magic square\n    std::vector<long> row_sums(n, 0);\n    std::vector<long> col_sums(n, 0);\n    long diag_sum = 0;\n    long anti_diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            row_sums[i] += my_matrix[i][j];\n            col_sums[j] += my_matrix[i][j];\n            if (i == j) {\n                diag_sum += my_matrix[i][j];\n            }\n            if (i + j == n - 1) {\n                anti_diag_sum += my_matrix[i][j];\n            }\n        }\n    }\n    for (int i = 1; i < n; i++) {\n        if (row_sums[i] != row_sums[i - 1] || col_sums[i] != col_sums[i - 1]) {\n            return false;\n        }\n    }\n    if (diag_sum != row_sums[0] || anti_diag_sum != row_sums[0]) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is square\n    int n = my_matrix.size();\n    for(int i=0;i<n;i++) {\n        if(my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for(int i=0;i<n;i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i=0;i<n;i++) {\n        long row_sum = 0;\n        for(int j=0;j<n;j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if(row_sum != sum) {\n            return false;\n        }\n    }\n    for(int i=0;i<n;i++) {\n        long col_sum = 0;\n        for(int j=0;j<n;j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if(col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for(int i=0;i<n;i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for(int i=0;i<n;i++) {\n        diag_sum += my_matrix[i][n-1-i];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n    {\n        sum += my_matrix[0][i];\n    }\n    int row_sum = 0;\n    int col_sum = 0;\n    for(int i = 0; i < n; i++)\n    {\n        row_sum = 0;\n        col_sum = 0;\n        for(int j = 0; j < n; j++)\n        {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if(row_sum != sum || col_sum != sum)\n            return false;\n    }\n    int diag_sum = 0;\n    int diag_sum_2 = 0;\n    for(int i = 0; i < n; i++)\n    {\n        diag_sum += my_matrix[i][i];\n        diag_sum_2 += my_matrix[i][n-i-1];\n    }\n    if(diag_sum != sum || diag_sum_2 != sum)\n        return false;\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i=0;i<n;i++){\n        sum += my_matrix[0][i];\n    }\n    int sum1 = 0;\n    for(int i=0;i<n;i++){\n        sum1 = 0;\n        for(int j=0;j<n;j++){\n            sum1 += my_matrix[i][j];\n        }\n        if(sum1 != sum){\n            return false;\n        }\n    }\n    int sum2 = 0;\n    for(int i=0;i<n;i++){\n        sum2 = 0;\n        for(int j=0;j<n;j++){\n            sum2 += my_matrix[j][i];\n        }\n        if(sum2 != sum){\n            return false;\n        }\n    }\n    int sum3 = 0;\n    for(int i=0;i<n;i++){\n        sum3 += my_matrix[i][i];\n    }\n    if(sum3 != sum){\n        return false;\n    }\n    int sum4 = 0;\n    for(int i=0;i<n;i++){\n        sum4 += my_matrix[i][n-1-i];\n    }\n    if(sum4 != sum){\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is square\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the matrix is magic square\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long sum_row = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long sum_col = 0;\n        for (int j = 0; j < n; j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag1 = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag1 += my_matrix[i][i];\n    }\n    if (sum_diag1 != sum) {\n        return false;\n    }\n    long sum_diag2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag2 += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag2 != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is a square matrix\n    if(my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for(int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        long col_sum = 0;\n        for(int j = 0; j < my_matrix.size(); j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if(row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for(int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for(int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is square\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // Check if the matrix is magic square\n    long sum = 0;\n    for (long i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (long i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        for (long j = 0; j < my_matrix[0].size(); j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (long i = 0; i < my_matrix.size(); i++) {\n        long col_sum = 0;\n        for (long j = 0; j < my_matrix[0].size(); j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (long i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (long i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check the size of the matrix\n    int n = my_matrix.size();\n    if (n == 0) {\n        return false;\n    }\n    // Check the size of the rows\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check the sum of the rows\n    long row_sum = 0;\n    for (int i = 0; i < n; i++) {\n        row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != n*(n*n + 1)/2) {\n            return false;\n        }\n    }\n    // Check the sum of the columns\n    long col_sum = 0;\n    for (int j = 0; j < n; j++) {\n        col_sum = 0;\n        for (int i = 0; i < n; i++) {\n            col_sum += my_matrix[i][j];\n        }\n        if (col_sum != n*(n*n + 1)/2) {\n            return false;\n        }\n    }\n    // Check the sum of the diagonals\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != n*(n*n + 1)/2) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n-1-i];\n    }\n    if (diag_sum != n*(n*n + 1)/2) {\n        return false;\n    }\n    // Check the elements of the matrix\n    std::vector<long> my_vector;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 0; i < n; i++)\n    {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++)\n            row_sum += my_matrix[i][j];\n        if(row_sum != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++)\n    {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++)\n            col_sum += my_matrix[j][i];\n        if(col_sum != sum)\n            return false;\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][i];\n    if(diag_sum != sum)\n        return false;\n    diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][n-i-1];\n    if(diag_sum != sum)\n        return false;\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 0; i < n; i++)\n    {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++)\n            row_sum += my_matrix[i][j];\n        if(row_sum != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++)\n    {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++)\n            col_sum += my_matrix[j][i];\n        if(col_sum != sum)\n            return false;\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][i];\n    if(diag_sum != sum)\n        return false;\n    diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][n-i-1];\n    if(diag_sum != sum)\n        return false;\n    return true;",
    "    // check if the matrix is square\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // check if the matrix is odd\n    if (my_matrix.size() % 2 == 0) {\n        return false;\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    long diag_sum2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n        diag_sum2 += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (diag_sum != sum || diag_sum2 != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is square.\n    assert(my_matrix.size() == my_matrix[0].size());\n    // Check if the matrix is a magic square.\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    long diag_sum_2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n        diag_sum_2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (diag_sum != sum || diag_sum_2 != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is square\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // Check if the matrix is odd\n    if (my_matrix.size() % 2 == 0) {\n        return false;\n    }\n    // Check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 0; i < n; i++){\n        int sum_row = 0;\n        for(int j = 0; j < n; j++)\n            sum_row += my_matrix[i][j];\n        if(sum_row != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++){\n        int sum_col = 0;\n        for(int j = 0; j < n; j++)\n            sum_col += my_matrix[j][i];\n        if(sum_col != sum)\n            return false;\n    }\n    int sum_diag = 0;\n    for(int i = 0; i < n; i++)\n        sum_diag += my_matrix[i][i];\n    if(sum_diag != sum)\n        return false;\n    sum_diag = 0;\n    for(int i = 0; i < n; i++)\n        sum_diag += my_matrix[i][n-i-1];\n    if(sum_diag != sum)\n        return false;\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i=0;i<n;i++){\n        sum += my_matrix[0][i];\n    }\n    int sum1 = 0;\n    for(int i=0;i<n;i++){\n        sum1 = 0;\n        for(int j=0;j<n;j++){\n            sum1 += my_matrix[i][j];\n        }\n        if(sum1 != sum){\n            return false;\n        }\n    }\n    int sum2 = 0;\n    for(int i=0;i<n;i++){\n        sum2 = 0;\n        for(int j=0;j<n;j++){\n            sum2 += my_matrix[j][i];\n        }\n        if(sum2 != sum){\n            return false;\n        }\n    }\n    int sum3 = 0;\n    for(int i=0;i<n;i++){\n        sum3 += my_matrix[i][i];\n    }\n    if(sum3 != sum){\n        return false;\n    }\n    int sum4 = 0;\n    for(int i=0;i<n;i++){\n        sum4 += my_matrix[i][n-i-1];\n    }\n    if(sum4 != sum){\n        return false;\n    }\n    return true;",
    "    // check if the matrix is square\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is square\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    assert(my_matrix.size() == my_matrix[0].size());\n    long n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check that the matrix is square\n    assert(my_matrix.size() == my_matrix[0].size());\n    // Check that the matrix is odd\n    assert(my_matrix.size() % 2 == 1);\n    // Check that the matrix is symmetric\n    for (int i = 0; i < my_matrix.size(); i++) {\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            if (my_matrix[i][j] != my_matrix[j][i]) {\n                return false;\n            }\n        }\n    }\n    // Check that the matrix is magic\n    long magic_constant = (my_matrix.size() * (my_matrix.size() * my_matrix.size() + 1)) / 2;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            sum += my_matrix[i][j];\n        }\n        if (sum != magic_constant) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            sum += my_matrix[j][i];\n        }\n        if (sum != magic_constant) {\n            return false;\n        }\n    }\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[i][i];\n    }\n    if (sum != magic_constant) {\n        return false;\n    }\n    sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (sum != magic_constant) {\n        return false;\n    }",
    "    // Check if the matrix is square.\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // Check if the matrix is empty.\n    if (my_matrix.size() == 0) {\n        return false;\n    }\n    // Check if the matrix is a magic square.\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long temp_sum = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            temp_sum += my_matrix[i][j];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long temp_sum = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            temp_sum += my_matrix[j][i];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    long temp_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        temp_sum += my_matrix[i][i];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    temp_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        temp_sum += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "  // Check if the matrix is a square matrix.\n  int n = my_matrix.size();\n  for (int i = 0; i < n; i++) {\n    if (my_matrix[i].size() != n) {\n      return false;\n    }\n  }\n  // Check if the matrix is a magic square.\n  long sum = 0;\n  for (int i = 0; i < n; i++) {\n    sum += my_matrix[0][i];\n  }\n  for (int i = 0; i < n; i++) {\n    long row_sum = 0;\n    for (int j = 0; j < n; j++) {\n      row_sum += my_matrix[i][j];\n    }\n    if (row_sum != sum) {\n      return false;\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    long col_sum = 0;\n    for (int j = 0; j < n; j++) {\n      col_sum += my_matrix[j][i];\n    }\n    if (col_sum != sum) {\n      return false;\n    }\n  }\n  long diag_sum1 = 0;\n  long diag_sum2 = 0;\n  for (int i = 0; i < n; i++) {\n    diag_sum1 += my_matrix[i][i];\n    diag_sum2 += my_matrix[i][n - i - 1];\n  }\n  if (diag_sum1 != sum || diag_sum2 != sum) {\n    return false;\n  }\n  return true;",
    "    // Check that the matrix is square\n    assert(my_matrix.size() == my_matrix[0].size());\n    // Check that the matrix is odd\n    assert(my_matrix.size() % 2 == 1);\n    // Check that the matrix is filled with unique numbers\n    std::vector<long> my_vector;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            my_vector.push_back(my_matrix[i][j]);\n        }\n    }\n    std::sort(my_vector.begin(), my_vector.end());\n    for (int i = 0; i < my_vector.size() - 1; i++) {\n        if (my_vector[i] == my_vector[i + 1]) {\n            return false;\n        }\n    }\n    // Check that the sum of the rows is equal\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            sum += my_matrix[i][j];\n        }\n        if (i == 0) {\n            long sum_row = sum;\n            sum = 0;\n            continue;\n        }\n        if (sum != sum_row) {\n            return false;\n        }\n        sum = 0;\n    }\n    // Check that the sum of the columns is equal\n    for (int i = 0; i < my_matrix.size(); i++) {\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            sum += my_matrix[j][i];\n        }\n        if (i == 0) {\n            long sum_col = sum;\n            sum = 0;\n            continue;\n        }\n        if (sum != sum_col) {\n            return false;\n        }\n        sum = 0;\n    }\n    // Check that the sum of the diagonals is equal\n    for (int i = 0;",
    "    // Check if the matrix is square\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 1; i < n; i++) {\n        long sum_row = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long sum_col = 0;\n        for (int j = 0; j < n; j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag += my_matrix[i][i];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    sum_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    int row_sum = 0;\n    int col_sum = 0;\n    for (int i = 0; i < n; i++) {\n        row_sum = 0;\n        col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    int diag_sum_2 = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n        diag_sum_2 += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum || diag_sum_2 != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int sum_row = 0;\n        int sum_col = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    return true;",
    "    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long temp_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            temp_sum += my_matrix[i][j];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long temp_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            temp_sum += my_matrix[j][i];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    long temp_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        temp_sum += my_matrix[i][i];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    temp_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        temp_sum += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is a square matrix.\n    assert(my_matrix.size() == my_matrix[0].size());\n    // Check if the matrix is a magic square.\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_row = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_column = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_column != sum) {\n            return false;\n        }\n    }\n    long sum_diagonal = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diagonal += my_matrix[i][i];\n    }\n    if (sum_diagonal != sum) {\n        return false;\n    }\n    sum_diagonal = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diagonal += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (sum_diagonal != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    int sum_diag = 0;\n    int sum_rev_diag = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < n; i++) {\n        int row_sum = 0;\n        int col_sum = 0;\n        for(int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if(row_sum != sum || col_sum != sum) {\n            return false;\n        }\n        sum_diag += my_matrix[i][i];\n        sum_rev_diag += my_matrix[i][n-i-1];\n    }\n    if(sum_diag != sum || sum_rev_diag != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    long sum = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n",
    "    // check if the matrix is square\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is magic square\n    // check the sum of each row\n    std::vector<long> row_sum(n, 0);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            row_sum[i] += my_matrix[i][j];\n        }\n    }\n    // check the sum of each column\n    std::vector<long> col_sum(n, 0);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            col_sum[i] += my_matrix[j][i];\n        }\n    }\n    // check the sum of diagonal\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    // check the sum of anti-diagonal\n    long anti_diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        anti_diag_sum += my_matrix[i][n - i - 1];\n    }\n    // check if all the sums are equal\n    long sum = row_sum[0];\n    for (int i = 0; i < n; i++) {\n        if (row_sum[i] != sum || col_sum[i] != sum) {\n            return false;\n        }\n    }\n    if (diag_sum != sum || anti_diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    int sum_diag = 0;\n    int sum_rev_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n        sum_diag += my_matrix[i][i];\n        sum_rev_diag += my_matrix[i][n - i - 1];\n    }\n    if (sum != sum_diag || sum != sum_rev_diag) {\n        return false;\n    }\n    for (int i = 1; i < n; i++) {\n        int row_sum = 0;\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    int sum2 = 0;\n    for(int i = 0; i < n; i++) {\n        sum2 = 0;\n        for(int j = 0; j < n; j++) {\n            sum2 += my_matrix[i][j];\n        }\n        if(sum2 != sum) {\n            return false;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        sum2 = 0;\n        for(int j = 0; j < n; j++) {\n            sum2 += my_matrix[j][i];\n        }\n        if(sum2 != sum) {\n            return false;\n        }\n    }\n    sum2 = 0;\n    for(int i = 0; i < n; i++) {\n        sum2 += my_matrix[i][i];\n    }\n    if(sum2 != sum) {\n        return false;\n    }\n    sum2 = 0;\n    for(int i = 0; i < n; i++) {\n        sum2 += my_matrix[i][n-i-1];\n    }\n    if(sum2 != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    int sum2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum = sum + my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        sum2 = 0;\n        for (int j = 0; j < n; j++) {\n            sum2 = sum2 + my_matrix[i][j];\n        }\n        if (sum2 != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        sum2 = 0;\n        for (int j = 0; j < n; j++) {\n            sum2 = sum2 + my_matrix[j][i];\n        }\n        if (sum2 != sum) {\n            return false;\n        }\n    }\n    sum2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum2 = sum2 + my_matrix[i][i];\n    }\n    if (sum2 != sum) {\n        return false;\n    }\n    sum2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum2 = sum2 + my_matrix[i][n - i - 1];\n    }\n    if (sum2 != sum) {\n        return false;\n    }\n    return true;",
    "  int n = my_matrix.size();\n  long sum = 0;\n  for (int i = 0; i < n; i++) {\n    sum += my_matrix[0][i];\n  }\n  for (int i = 0; i < n; i++) {\n    long row_sum = 0;\n    for (int j = 0; j < n; j++) {\n      row_sum += my_matrix[i][j];\n    }\n    if (row_sum != sum) {\n      return false;\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    long col_sum = 0;\n    for (int j = 0; j < n; j++) {\n      col_sum += my_matrix[j][i];\n    }\n    if (col_sum != sum) {\n      return false;\n    }\n  }\n  long diag_sum = 0;\n  for (int i = 0; i < n; i++) {\n    diag_sum += my_matrix[i][i];\n  }\n  if (diag_sum != sum) {\n    return false;\n  }\n  diag_sum = 0;\n  for (int i = 0; i < n; i++) {\n    diag_sum += my_matrix[i][n - i - 1];\n  }\n  if (diag_sum != sum) {\n    return false;\n  }\n  return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 1; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    return true;",
    "  // Write your code here\n  int n = my_matrix.size();\n  int sum = 0;\n  int sum2 = 0;\n  for(int i = 0; i < n; i++)\n  {\n    sum += my_matrix[i][i];\n    sum2 += my_matrix[i][n-i-1];\n  }\n  if(sum != sum2)\n    return false;\n  for(int i = 0; i < n; i++)\n  {\n    int sum_row = 0;\n    int sum_col = 0;\n    for(int j = 0; j < n; j++)\n    {\n      sum_row += my_matrix[i][j];\n      sum_col += my_matrix[j][i];\n    }\n    if(sum_row != sum || sum_col != sum)\n      return false;\n  }\n  return true;",
    "    // Check if the matrix is square\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    long anti_diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n        anti_diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum || anti_diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "  // Check if the matrix is square.\n  int n = my_matrix.size();\n  for (int i = 0; i < n; i++) {\n    if (my_matrix[i].size() != n) {\n      return false;\n    }\n  }\n  // Check if the matrix is a magic square.\n  long sum = 0;\n  for (int i = 0; i < n; i++) {\n    sum += my_matrix[0][i];\n  }\n  for (int i = 0; i < n; i++) {\n    long row_sum = 0;\n    for (int j = 0; j < n; j++) {\n      row_sum += my_matrix[i][j];\n    }\n    if (row_sum != sum) {\n      return false;\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    long col_sum = 0;\n    for (int j = 0; j < n; j++) {\n      col_sum += my_matrix[j][i];\n    }\n    if (col_sum != sum) {\n      return false;\n    }\n  }\n  long diag_sum = 0;\n  for (int i = 0; i < n; i++) {\n    diag_sum += my_matrix[i][i];\n  }\n  if (diag_sum != sum) {\n    return false;\n  }\n  diag_sum = 0;\n  for (int i = 0; i < n; i++) {\n    diag_sum += my_matrix[i][n - i - 1];\n  }\n  if (diag_sum != sum) {\n    return false;\n  }\n  return true;",
    "    // TODO: Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if(row_sum != sum) {\n            return false;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if(col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n-i-1];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is a square matrix.\n    assert(my_matrix.size() == my_matrix[0].size());\n    long n = my_matrix.size();\n    // Check if the matrix is a magic square.\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (long i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (long j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (long i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (long j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (long i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (long i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is square\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the sum of each row is equal\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 1; i < n; i++) {\n        long temp = 0;\n        for (int j = 0; j < n; j++) {\n            temp += my_matrix[i][j];\n        }\n        if (temp != sum) {\n            return false;\n        }\n    }\n    // check if the sum of each column is equal\n    for (int i = 0; i < n; i++) {\n        long temp = 0;\n        for (int j = 0; j < n; j++) {\n            temp += my_matrix[j][i];\n        }\n        if (temp != sum) {\n            return false;\n        }\n    }\n    // check if the sum of the diagonals is equal\n    long temp1 = 0;\n    long temp2 = 0;\n    for (int i = 0; i < n; i++) {\n        temp1 += my_matrix[i][i];\n        temp2 += my_matrix[i][n - 1 - i];\n    }\n    if (temp1 != sum || temp2 != sum) {\n        return false;\n    }\n    // check if each number is unique\n    std::vector<long> temp;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            temp.push_back(my_matrix[i][j]);\n        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i = 0; i < n * n - 1; i++) {\n        if (temp[i] == temp[i + 1]) {\n            return false;\n",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is a square\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[i][0];\n    }\n    long sum_row = 0;\n    long sum_col = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag = 0;\n    long sum_diag2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (sum_diag != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is square.\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the sum of each row is equal.\n    long row_sum = 0;\n    for (int i = 0; i < n; i++) {\n        row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != (n * (n * n + 1) / 2)) {\n            return false;\n        }\n    }\n    // Check if the sum of each column is equal.\n    long col_sum = 0;\n    for (int i = 0; i < n; i++) {\n        col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != (n * (n * n + 1) / 2)) {\n            return false;\n        }\n    }\n    // Check if the sum of the diagonal is equal.\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != (n * (n * n + 1) / 2)) {\n        return false;\n    }\n    // Check if the sum of the other diagonal is equal.\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != (n * (n * n + 1) / 2)) {\n        return false;\n    }\n    return true;",
    "    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    long sum_row = 0;\n    long sum_col = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag1 = 0;\n    long sum_diag2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (sum_diag1 != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;",
    "    long sum = 0;\n    long sum1 = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n",
    "    // Check if the matrix is a square matrix.\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the matrix is a magic square.\n    long sum_row = 0;\n    long sum_col = 0;\n    long sum_diag = 0;\n    long sum_anti_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_diag = my_matrix[i][i];\n            sum_anti_diag = my_matrix[i][n - i - 1];\n        } else {\n            sum_diag += my_matrix[i][i];\n            sum_anti_diag += my_matrix[i][n - i - 1];\n        }\n        if (sum_row != sum_col || sum_row != sum_diag || sum_row != sum_anti_diag) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is square\n    assert(my_matrix.size() == my_matrix[0].size());\n    // Check if the matrix is odd\n    assert(my_matrix.size() % 2 != 0);\n    // Check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    long diag_sum_2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n        diag_sum_2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (diag_sum != sum || diag_sum_2 != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++)\n            row_sum += my_matrix[i][j];\n        if(row_sum != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++)\n            col_sum += my_matrix[j][i];\n        if(col_sum != sum)\n            return false;\n    }\n    int diag1_sum = 0;\n    int diag2_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag1_sum += my_matrix[i][i];\n        diag2_sum += my_matrix[i][n-i-1];\n    }\n    if(diag1_sum != sum || diag2_sum != sum)\n        return false;\n    return true;",
    "    // Check if the matrix is a square matrix.\n    for (int i = 0; i < my_matrix.size(); i++) {\n        if (my_matrix[i].size() != my_matrix.size()) {\n            return false;\n        }\n    }\n    // Check if the matrix is a magic square.\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long temp_sum = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            temp_sum += my_matrix[i][j];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long temp_sum = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            temp_sum += my_matrix[j][i];\n        }\n        if (temp_sum != sum) {\n            return false;\n        }\n    }\n    long temp_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        temp_sum += my_matrix[i][i];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    temp_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        temp_sum += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (temp_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is square\n    assert(my_matrix.size() == my_matrix[0].size());\n    // Check if the matrix is odd\n    assert(my_matrix.size() % 2 == 1);\n    // Check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    long anti_diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n        anti_diag_sum += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (diag_sum != sum || anti_diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    int sum2 = 0;\n    for(int i = 0; i < n; i++)\n    {\n        sum = sum + my_matrix[0][i];\n    }\n    for(int i = 0; i < n; i++)\n    {\n        sum2 = 0;\n        for(int j = 0; j < n; j++)\n        {\n            sum2 = sum2 + my_matrix[i][j];\n        }\n        if(sum2 != sum)\n        {\n            return false;\n        }\n    }\n    for(int i = 0; i < n; i++)\n    {\n        sum2 = 0;\n        for(int j = 0; j < n; j++)\n        {\n            sum2 = sum2 + my_matrix[j][i];\n        }\n        if(sum2 != sum)\n        {\n            return false;\n        }\n    }\n    sum2 = 0;\n    for(int i = 0; i < n; i++)\n    {\n        sum2 = sum2 + my_matrix[i][i];\n    }\n    if(sum2 != sum)\n    {\n        return false;\n    }\n    sum2 = 0;\n    for(int i = 0; i < n; i++)\n    {\n        sum2 = sum2 + my_matrix[i][n-i-1];\n    }\n    if(sum2 != sum)\n    {\n        return false;\n    }\n    return true;",
    "  // TODO: Write your code here\n  int n = my_matrix.size();\n  int sum = 0;\n  for(int i = 0; i < n; i++) {\n    sum += my_matrix[0][i];\n  }\n  for(int i = 0; i < n; i++) {\n    int rowSum = 0;\n    for(int j = 0; j < n; j++) {\n      rowSum += my_matrix[i][j];\n    }\n    if(rowSum != sum) {\n      return false;\n    }\n  }\n  for(int i = 0; i < n; i++) {\n    int colSum = 0;\n    for(int j = 0; j < n; j++) {\n      colSum += my_matrix[j][i];\n    }\n    if(colSum != sum) {\n      return false;\n    }\n  }\n  int diagonalSum = 0;\n  for(int i = 0; i < n; i++) {\n    diagonalSum += my_matrix[i][i];\n  }\n  if(diagonalSum != sum) {\n    return false;\n  }\n  diagonalSum = 0;\n  for(int i = 0; i < n; i++) {\n    diagonalSum += my_matrix[i][n-i-1];\n  }\n  if(diagonalSum != sum) {\n    return false;\n  }\n  return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diagonal_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diagonal_sum += my_matrix[i][i];\n    }\n    if (diagonal_sum != sum) {\n        return false;\n    }\n    diagonal_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diagonal_sum += my_matrix[i][n - i - 1];\n    }\n    if (diagonal_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++)\n            row_sum += my_matrix[i][j];\n        if(row_sum != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++)\n            col_sum += my_matrix[j][i];\n        if(col_sum != sum)\n            return false;\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][i];\n    if(diag_sum != sum)\n        return false;\n    diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][n-i-1];\n    if(diag_sum != sum)\n        return false;\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i=0;i<n;i++)\n        sum += my_matrix[0][i];\n    for(int i=1;i<n;i++)\n    {\n        int sum_row = 0;\n        for(int j=0;j<n;j++)\n            sum_row += my_matrix[i][j];\n        if(sum_row != sum)\n            return false;\n    }\n    for(int i=0;i<n;i++)\n    {\n        int sum_col = 0;\n        for(int j=0;j<n;j++)\n            sum_col += my_matrix[j][i];\n        if(sum_col != sum)\n            return false;\n    }\n    int sum_diag = 0;\n    for(int i=0;i<n;i++)\n        sum_diag += my_matrix[i][i];\n    if(sum_diag != sum)\n        return false;\n    sum_diag = 0;\n    for(int i=0;i<n;i++)\n        sum_diag += my_matrix[i][n-i-1];\n    if(sum_diag != sum)\n        return false;\n    return true;",
    "    long sum = 0;\n    long sum_row = 0;\n    long sum_col = 0;\n    long sum_diag = 0;\n    long sum_diag2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum_col) {\n            return false;\n        }\n        sum_diag += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (sum_diag != sum_diag2) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for(int i = 0; i < n; i++) {\n        if(my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the sum of each row is equal\n    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        long sum_row = 0;\n        for(int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if(sum_row != sum) {\n            return false;\n        }\n    }\n    // check if the sum of each column is equal\n    for(int i = 0; i < n; i++) {\n        long sum_column = 0;\n        for(int j = 0; j < n; j++) {\n            sum_column += my_matrix[j][i];\n        }\n        if(sum_column != sum) {\n            return false;\n        }\n    }\n    // check if the sum of each diagonal is equal\n    long sum_diagonal1 = 0;\n    long sum_diagonal2 = 0;\n    for(int i = 0; i < n; i++) {\n        sum_diagonal1 += my_matrix[i][i];\n        sum_diagonal2 += my_matrix[i][n-i-1];\n    }\n    if(sum_diagonal1 != sum || sum_diagonal2 != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i=0; i<n; i++)\n        sum += my_matrix[0][i];\n    for(int i=0; i<n; i++)\n    {\n        int row_sum = 0;\n        for(int j=0; j<n; j++)\n            row_sum += my_matrix[i][j];\n        if(row_sum != sum)\n            return false;\n    }\n    for(int i=0; i<n; i++)\n    {\n        int col_sum = 0;\n        for(int j=0; j<n; j++)\n            col_sum += my_matrix[j][i];\n        if(col_sum != sum)\n            return false;\n    }\n    int diag_sum = 0;\n    for(int i=0; i<n; i++)\n        diag_sum += my_matrix[i][i];\n    if(diag_sum != sum)\n        return false;\n    diag_sum = 0;\n    for(int i=0; i<n; i++)\n        diag_sum += my_matrix[i][n-i-1];\n    if(diag_sum != sum)\n        return false;\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i=0;i<n;i++)\n    {\n        sum += my_matrix[0][i];\n    }\n    int sum1 = 0;\n    for(int i=0;i<n;i++)\n    {\n        sum1 = 0;\n        for(int j=0;j<n;j++)\n        {\n            sum1 += my_matrix[i][j];\n        }\n        if(sum1 != sum)\n        {\n            return false;\n        }\n    }\n    int sum2 = 0;\n    for(int i=0;i<n;i++)\n    {\n        sum2 = 0;\n        for(int j=0;j<n;j++)\n        {\n            sum2 += my_matrix[j][i];\n        }\n        if(sum2 != sum)\n        {\n            return false;\n        }\n    }\n    int sum3 = 0;\n    for(int i=0;i<n;i++)\n    {\n        sum3 += my_matrix[i][i];\n    }\n    if(sum3 != sum)\n    {\n        return false;\n    }\n    int sum4 = 0;\n    for(int i=0;i<n;i++)\n    {\n        sum4 += my_matrix[i][n-i-1];\n    }\n    if(sum4 != sum)\n    {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is square.\n    assert(my_matrix.size() == my_matrix[0].size());\n    // Check if the matrix is odd.\n    assert(my_matrix.size() % 2 == 1);\n    // Check if the matrix is a magic square.\n    long sum = 0;\n    for (long i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (long i = 0; i < my_matrix.size(); i++) {\n        long sum_row = 0;\n        long sum_column = 0;\n        for (long j = 0; j < my_matrix[0].size(); j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_column != sum) {\n            return false;\n        }\n    }\n    long sum_diagonal_1 = 0;\n    long sum_diagonal_2 = 0;\n    for (long i = 0; i < my_matrix.size(); i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (sum_diagonal_1 != sum || sum_diagonal_2 != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++)\n            row_sum += my_matrix[i][j];\n        if(row_sum != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++)\n            col_sum += my_matrix[j][i];\n        if(col_sum != sum)\n            return false;\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][i];\n    if(diag_sum != sum)\n        return false;\n    diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][n-i-1];\n    if(diag_sum != sum)\n        return false;\n    return true;"
  ]
}