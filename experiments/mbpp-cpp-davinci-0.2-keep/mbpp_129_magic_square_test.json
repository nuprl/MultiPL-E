{
  "name": "mbpp_129_magic_square_test",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate whether the matrix is a magic square.\nbool magic_square_test(std::vector<std::vector<long>> my_matrix) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = magic_square_test;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)12, (long)1, (long)14}), (std::vector<long>)std::vector<long>({(long)2, (long)13, (long)8, (long)11}), (std::vector<long>)std::vector<long>({(long)16, (long)3, (long)10, (long)5}), (std::vector<long>)std::vector<long>({(long)9, (long)6, (long)15, (long)4})}))) == (true));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)3, (long)8})}))) == (true));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)3, (long)7})}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 1; i < n; i++) {\n        int sum_row = 0;\n        for(int j = 0; j < n; j++)\n            sum_row += my_matrix[i][j];\n        if(sum_row != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++) {\n        int sum_col = 0;\n        for(int j = 0; j < n; j++)\n            sum_col += my_matrix[j][i];\n        if(sum_col != sum)\n            return false;\n    }\n    int sum_diag1 = 0;\n    for(int i = 0; i < n; i++)\n        sum_diag1 += my_matrix[i][i];\n    if(sum_diag1 != sum)\n        return false;\n    int sum_diag2 = 0;\n    for(int i = 0; i < n; i++)\n        sum_diag2 += my_matrix[i][n - i - 1];\n    if(sum_diag2 != sum)\n        return false;\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 1; i < n; i++)\n    {\n        int sum_row = 0;\n        for(int j = 0; j < n; j++)\n            sum_row += my_matrix[i][j];\n        if(sum_row != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++)\n    {\n        int sum_col = 0;\n        for(int j = 0; j < n; j++)\n            sum_col += my_matrix[j][i];\n        if(sum_col != sum)\n            return false;\n    }\n    int sum_diag1 = 0;\n    for(int i = 0; i < n; i++)\n        sum_diag1 += my_matrix[i][i];\n    if(sum_diag1 != sum)\n        return false;\n    int sum_diag2 = 0;\n    for(int i = 0; i < n; i++)\n        sum_diag2 += my_matrix[i][n-i-1];\n    if(sum_diag2 != sum)\n        return false;\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    return true;",
    "    // Check if the matrix is a square matrix\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // Check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum1 = 0;\n    long diag_sum2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum1 += my_matrix[i][i];\n        diag_sum2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (diag_sum1 != sum || diag_sum2 != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++)\n        sum += my_matrix[0][i];\n    for(int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++)\n            row_sum += my_matrix[i][j];\n        if(row_sum != sum)\n            return false;\n    }\n    for(int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++)\n            col_sum += my_matrix[j][i];\n        if(col_sum != sum)\n            return false;\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][i];\n    if(diag_sum != sum)\n        return false;\n    diag_sum = 0;\n    for(int i = 0; i < n; i++)\n        diag_sum += my_matrix[i][n-i-1];\n    if(diag_sum != sum)\n        return false;\n    return true;",
    "    // check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is a magic square\n    std::vector<long> row_sum(n, 0);\n    std::vector<long> col_sum(n, 0);\n    long diag_sum1 = 0;\n    long diag_sum2 = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            row_sum[i] += my_matrix[i][j];\n            col_sum[j] += my_matrix[i][j];\n            if (i == j) {\n                diag_sum1 += my_matrix[i][j];\n            }\n            if (i + j == n - 1) {\n                diag_sum2 += my_matrix[i][j];\n            }\n        }\n    }\n    for (int i = 0; i < n - 1; i++) {\n        if (row_sum[i] != row_sum[i + 1]) {\n            return false;\n        }\n        if (col_sum[i] != col_sum[i + 1]) {\n            return false;\n        }\n    }\n    if (diag_sum1 != diag_sum2) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is a magic square\n    // check if the sum of each row is equal\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][0];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    // check if the sum of each column is equal\n    for (int j = 0; j < n; j++) {\n        long col_sum = 0;\n        for (int i = 0; i < n; i++) {\n            col_sum += my_matrix[i][j];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    // check if the sum of the diagonal is equal\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    // check if the sum of the other diagonal is equal\n    long other_diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        other_diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (other_diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    assert(my_matrix.size() == my_matrix[0].size());\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_row = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_col = 0;\n        for (int j = 0; j < my_matrix[0].size(); j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag_1 = 0;\n    long sum_diag_2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag_1 += my_matrix[i][i];\n        sum_diag_2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (sum_diag_1 != sum || sum_diag_2 != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    int sum1 = 0;\n    int sum2 = 0;\n    int sum3 = 0;\n    int sum4 = 0;\n    int sum5 = 0;\n    int sum6 = 0;\n    int sum7 = 0;\n    int sum8 = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < n; i++) {\n        sum1 += my_matrix[i][0];\n    }\n    for(int i = 0; i < n; i++) {\n        sum2 += my_matrix[i][1];\n    }\n    for(int i = 0; i < n; i++) {\n        sum3 += my_matrix[i][2];\n    }\n    for(int i = 0; i < n; i++) {\n        sum4 += my_matrix[i][3];\n    }\n    for(int i = 0; i < n; i++) {\n        sum5 += my_matrix[i][4];\n    }\n    for(int i = 0; i < n; i++) {\n        sum6 += my_matrix[i][5];\n    }\n    for(int i = 0; i < n; i++) {\n        sum7 += my_matrix[i][6];\n    }\n    for(int i = 0; i < n; i++) {\n        sum8 += my_matrix[i][7];\n    }\n    if(sum == sum1 && sum1 == sum2 && sum2 == sum3 && sum3 == sum4 && sum4 == sum5 && sum5 == sum6 && sum6 == sum7 && sum7 == sum8) {\n        return true;\n    }\n    return false;",
    "    // check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the sum of each row is the same\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 1; i < n; i++) {\n        long sum_row = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    // check if the sum of each column is the same\n    for (int i = 0; i < n; i++) {\n        long sum_col = 0;\n        for (int j = 0; j < n; j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    // check if the sum of the diagonal is the same\n    long sum_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag += my_matrix[i][i];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    // check if the sum of the other diagonal is the same\n    long sum_diag_other = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag_other += my_matrix[i][n - 1 - i];\n    }\n    if (sum_diag_other != sum) {\n        return false;\n    }\n    // check if all the elements are unique\n    std::vector<long> elements;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++)",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for(int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if(row_sum != sum) {\n            return false;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for(int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if(col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][0];\n    }\n    for (int i = 0; i < n; i++) {\n        long sum_row = 0;\n        long sum_col = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag1 = 0;\n    long sum_diag2 = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag1 != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;",
    "    assert(my_matrix.size() == my_matrix[0].size());\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_row = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_col = 0;\n        for (int j = 0; j < my_matrix.size(); j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag += my_matrix[i][i];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    sum_diag = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    return true;",
    "    long sum = 0;\n    long sum_diag = 0;\n    long sum_diag2 = 0;\n    long sum_row = 0;\n    long sum_col = 0;\n    for(int i = 0; i < my_matrix.size(); i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for(int j = 0; j < my_matrix[i].size(); j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if(i == 0) {\n            sum = sum_row;\n        }\n        if(sum_row != sum || sum_col != sum) {\n            return false;\n        }\n        sum_diag += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if(sum_diag != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // Check if the matrix is a magic square\n    // Check the sum of each row\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][0];\n    }\n    for (int i = 0; i < n; i++) {\n        long sum_row = 0;\n        for (int j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    // Check the sum of each column\n    for (int j = 0; j < n; j++) {\n        long sum_col = 0;\n        for (int i = 0; i < n; i++) {\n            sum_col += my_matrix[i][j];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    // Check the sum of the diagonal\n    long sum_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum_diag += my_matrix[i][i];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    // Check the sum of the anti-diagonal\n    long sum_anti_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum_anti_diag += my_matrix[i][n - 1 - i];\n    }\n    if (sum_anti_diag != sum) {\n        return false;\n    }\n    // Check if the matrix contains all numbers from 1 to n^2\n    std::vector<long> my_vector;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j",
    "    // Check if the matrix is square\n    assert(my_matrix.size() == my_matrix[0].size());\n    // Check if the matrix is odd\n    assert(my_matrix.size() % 2 != 0);\n    // Check if the matrix is greater than 1\n    assert(my_matrix.size() > 1);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix is less than 15\n    assert(my_matrix.size() < 15);\n    // Check if the matrix",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    int sum2 = 0;\n    for(int i = 0; i < n; i++) {\n        sum2 = 0;\n        for(int j = 0; j < n; j++) {\n            sum2 += my_matrix[i][j];\n        }\n        if(sum2 != sum) {\n            return false;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        sum2 = 0;\n        for(int j = 0; j < n; j++) {\n            sum2 += my_matrix[j][i];\n        }\n        if(sum2 != sum) {\n            return false;\n        }\n    }\n    sum2 = 0;\n    for(int i = 0; i < n; i++) {\n        sum2 += my_matrix[i][i];\n    }\n    if(sum2 != sum) {\n        return false;\n    }\n    sum2 = 0;\n    for(int i = 0; i < n; i++) {\n        sum2 += my_matrix[i][n-i-1];\n    }\n    if(sum2 != sum) {\n        return false;\n    }\n    return true;"
  ]
}