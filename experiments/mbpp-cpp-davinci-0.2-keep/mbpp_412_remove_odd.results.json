{
  "name": "mbpp_412_remove_odd",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0)\n            res.push_back(l[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it=l.begin();it!=l.end();it++)\n    {\n        if(*it%2!=0)\n        {\n            l.erase(it);\n            it--;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(long i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(long i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l2;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l2.push_back(l[i]);\n        }\n    }\n    return l2;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l2;\n    for(long i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            l2.push_back(l[i]);\n        }\n    }\n    return l2;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i:l){\n        if(i%2==0){\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i:l){\n        if(i%2==0){\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i : l) {\n        if(i % 2 == 0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i:l) {\n        if(i%2==0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for (it = l.begin(); it != l.end(); it++) {\n        if (*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i: l) {\n        if(i%2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i: l) {\n        if(i%2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> ans;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            ans.push_back(l[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++) {\n        if(l[i]%2==0) {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n\tstd::vector<long> v;\n\tfor(int i=0;i<l.size();i++) {\n\t\tif(l[i]%2==0) {\n\t\t\tv.push_back(l[i]);\n\t\t}\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n            it--;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i : l) {\n        if(i%2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i:l) {\n        if(i%2==0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto x:l){\n        if(x%2==0){\n            v.push_back(x);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it=l.begin();it!=l.end();it++)\n    {\n        if(*it%2!=0)\n        {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i:l) {\n        if(i%2==0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i:l){\n        if(i%2==0){\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for(auto i: l) {\n        if(i%2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i:l) {\n        if(i%2==0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i:l) {\n        if(i%2==0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i : l) {\n        if(i % 2 == 0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i: l) {\n        if(i%2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it=l.begin();it!=l.end();it++){\n        if(*it%2!=0){\n            l.erase(it);\n            it--;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i:l){\n        if(i%2==0){\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> ans;\n    for(auto i:l) {\n        if(i%2==0) {\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> even;\n    for(auto i:l){\n        if(i%2==0){\n            even.push_back(i);\n        }\n    }\n    return even;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> ans;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            ans.push_back(l[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for (it = l.begin(); it != l.end(); it++) {\n        if (*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i:l) {\n        if(i%2==0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for(auto i: l){\n        if(i%2==0){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i:l) {\n        if(i%2==0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> ans;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            ans.push_back(l[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n            res.push_back(l[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it=l.begin();it!=l.end();it++)\n    {\n        if(*it%2!=0)\n        {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(auto i:l)\n    {\n        if(i%2==0)\n        {\n            l1.push_back(i);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i : l) {\n        if(i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(long i=0;i<l.size();i++) {\n        if(l[i]%2==0) {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it=l.begin();it!=l.end();it++)\n    {\n        if(*it%2!=0)\n        {\n            l.erase(it);\n            it--;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> even_list;\n    for(int i=0;i<l.size();i++) {\n        if(l[i]%2==0) {\n            even_list.push_back(l[i]);\n        }\n    }\n    return even_list;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i:l) {\n        if(i%2==0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto x: l) {\n        if(x % 2 == 0) {\n            res.push_back(x);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(long i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i : l) {\n        if(i%2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it=l.begin();it!=l.end();it++)\n    {\n        if(*it%2!=0)\n        {\n            l.erase(it);\n            it--;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n            it--;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(long i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for (it = l.begin(); it != l.end();) {\n        if (*it % 2 != 0) {\n            it = l.erase(it);\n        } else {\n            it++;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i : l) {\n        if(i % 2 == 0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator itr;\n    for(itr = l.begin(); itr != l.end(); itr++) {\n        if(*itr % 2 != 0) {\n            l.erase(itr);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i: l) {\n        if(i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i : l) {\n        if(i%2 == 0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(long i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i : l) {\n        if(i % 2 == 0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for (it = l.begin(); it != l.end(); it++) {\n        if (*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i : l) {\n        if(i%2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for (it = l.begin(); it != l.end(); it++) {\n        if (*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> new_list;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            new_list.push_back(l[i]);\n        }\n    }\n    return new_list;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it=l.begin();it!=l.end();it++){\n        if(*it%2!=0){\n            l.erase(it);\n            it--;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i : l) {\n        if(i % 2 == 0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(long i=0;i<l.size();i++) {\n        if(l[i]%2==0) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(long i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i: l) {\n        if(i%2 == 0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n\tstd::vector<long> l1;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] % 2 == 0) {\n\t\t\tl1.push_back(l[i]);\n\t\t}\n\t}\n\treturn l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> ans;\n    for(auto i:l){\n        if(i%2==0){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i: l) {\n        if(i%2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i:l) {\n        if(i%2==0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it=l.begin();it!=l.end();it++)\n    {\n        if(*it%2!=0)\n        {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l2;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l2.push_back(l[i]);\n        }\n    }\n    return l2;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++) {\n        if(l[i]%2==0) {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i:l) {\n        if(i%2==0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(auto i:l){\n        if(i%2==0){\n            l1.push_back(i);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i:l) {\n        if(i%2==0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n\tstd::vector<long>::iterator it;\n\tfor (it = l.begin(); it != l.end(); it++) {\n\t\tif (*it % 2 != 0) {\n\t\t\tl.erase(it);\n\t\t\tit--;\n\t\t}\n\t}\n\treturn l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i:l) {\n        if(i%2==0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i : l) {\n        if(i % 2 == 0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto i: l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(auto i=l.begin();i!=l.end();i++){\n        if(*i%2==0){\n            l1.push_back(*i);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> new_list;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            new_list.push_back(l[i]);\n        }\n    }\n    return new_list;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(int i=0;i<l.size();i++) {\n        if(l[i]%2==0) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i: l) {\n        if(i%2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i: l) {\n        if(i % 2 == 0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0)\n            v.push_back(l[i]);\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i: l) {\n        if(i%2==0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for(int i=0;i<l.size();i++) {\n        if(l[i]%2==0) {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> new_list;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            new_list.push_back(i);\n        }\n    }\n    return new_list;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it=l.begin();it!=l.end();it++)\n    {\n        if(*it%2==1)\n        {\n            l.erase(it);\n            it--;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(auto i:l){\n        if(i%2==0)\n            l1.push_back(i);\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for (it = l.begin(); it != l.end();) {\n        if (*it % 2 != 0) {\n            it = l.erase(it);\n        } else {\n            it++;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for (it = l.begin(); it != l.end(); it++) {\n        if (*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++) {\n        if(l[i]%2 == 0) {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(long i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i:l){\n        if(i%2==0){\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i : l) {\n        if(i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i : l) {\n        if(i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(auto i:l) {\n        if(i%2==0) {\n            l1.push_back(i);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(long i=0;i<l.size();i++) {\n        if(l[i]%2==0) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> ans;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            ans.push_back(l[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> ans;\n    for(auto i : l) {\n        if(i % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i:l) {\n        if(i%2==0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i : l) {\n        if(i%2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> result;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it = l.begin();\n    while(it != l.end()) {\n        if(*it % 2 != 0) {\n            it = l.erase(it);\n        } else {\n            it++;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> even;\n    for(int i=0; i<l.size(); i++) {\n        if(l[i]%2==0) {\n            even.push_back(l[i]);\n        }\n    }\n    return even;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n            it--;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto i : l) {\n        if(i % 2 == 0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(auto i:l){\n        if(i%2==0){\n            l1.push_back(i);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it=l.begin();it!=l.end();it++)\n    {\n        if(*it%2!=0)\n        {\n            l.erase(it);\n            it--;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 != 0) {\n            l.erase(it);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> res;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%2==0){\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> ans;\n    for (auto i : l) {\n        if (i % 2 == 0) {\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1666123070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long>::iterator it;\n    for(it=l.begin();it!=l.end();it++)\n    {\n        if(*it%2!=0)\n        {\n            l.erase(it);\n            it--;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove odd numbers from a given list.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> l1;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]%2==0)\n        {\n            l1.push_back(l[i]);\n        }\n    }\n    return l1;\n}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}