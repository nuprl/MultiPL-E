{
  "name": "mbpp_615_average_tuple",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nstd::vector<float> average_tuple(long nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = average_tuple;\n    assert(candidate(std::make_tuple(std::make_tuple(10, 10, 10, 12), std::make_tuple(30, 45, 56, 45), std::make_tuple(81, 80, 39, 32), std::make_tuple(1, 2, 3, 4))) == (std::vector<float>({(float)30.5, (float)34.25, (float)27.0, (float)23.25})));\n    assert(candidate(std::make_tuple(std::make_tuple(1, 1, -5), std::make_tuple(30, -15, 56), std::make_tuple(81, -60, -39), std::make_tuple(-10, 2, 3))) == (std::vector<float>({(float)25.5, (float)-18.0, (float)3.75})));\n    assert(candidate(std::make_tuple(std::make_tuple(100, 100, 100, 120), std::make_tuple(300, 450, 560, 450), std::make_tuple(810, 800, 390, 320), std::make_tuple(10, 20, 30, 40))) == (std::vector<float>({(float)305.0, (float)342.5, (float)270.0, (float)232.5})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<float> result;\n    for (int i = 0; i < nums; i++) {\n        float sum = 0;\n        int count = 0;\n        for (int j = 0; j < nums; j++) {\n            sum += j;\n            count++;\n        }\n        result.push_back(sum/count);\n    }\n    return result;",
    "    std::vector<float> result;\n    for (int i = 0; i < nums; i++) {\n        std::vector<float> temp;\n        for (int j = 0; j < nums; j++) {\n            temp.push_back(j);\n        }\n        result.push_back(std::accumulate(temp.begin(), temp.end(), 0.0) / temp.size());\n    }\n    return result;",
    "  std::vector<float> result;\n  for (int i = 0; i < nums; i++) {\n    float sum = 0;\n    for (int j = 0; j < nums; j++) {\n      sum += i * j;\n    }\n    result.push_back(sum / nums);\n  }\n  return result;",
    "    std::vector<float> result;\n    for (int i = 0; i < nums; i++) {\n        float sum = 0;\n        for (int j = 0; j < nums; j++) {\n            sum += i * j;\n        }\n        result.push_back(sum / nums);\n    }\n    return result;",
    "    std::vector<float> result;\n    for (int i = 0; i < nums; i++) {\n        float sum = 0;\n        int count = 0;\n        for (int j = 0; j < nums; j++) {\n            sum += j;\n            count++;\n        }\n        result.push_back(sum / count);\n    }\n    return result;",
    "    std::vector<float> result;\n    for(int i = 0; i < nums; i++) {\n        std::vector<int> nums;\n        int num;\n        while(std::cin >> num) {\n            nums.push_back(num);\n        }\n        float sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n        }\n        result.push_back(sum / nums.size());\n    }\n    return result;",
    "  std::vector<float> avg;\n  for (int i = 0; i < nums; i++) {\n    std::vector<int> temp;\n    int n;\n    std::cin >> n;\n    for (int j = 0; j < n; j++) {\n      int num;\n      std::cin >> num;\n      temp.push_back(num);\n    }\n    float sum = 0;\n    for (int k = 0; k < temp.size(); k++) {\n      sum += temp[k];\n    }\n    avg.push_back(sum / temp.size());\n  }\n  return avg;",
    "    std::vector<float> v;\n    std::vector<std::vector<float>> vv;\n    for (int i = 0; i < nums; i++) {\n        std::vector<float> v_temp;\n        for (int j = 0; j < nums; j++) {\n            v_temp.push_back(j);\n        }\n        vv.push_back(v_temp);\n    }\n    for (int i = 0; i < nums; i++) {\n        float sum = 0;\n        for (int j = 0; j < nums; j++) {\n            sum += vv[i][j];\n        }\n        v.push_back(sum/nums);\n    }\n    return v;",
    "  std::vector<float> result;\n  for (int i = 0; i < nums; i++) {\n    std::vector<int> temp;\n    int n;\n    std::cin >> n;\n    for (int j = 0; j < n; j++) {\n      int x;\n      std::cin >> x;\n      temp.push_back(x);\n    }\n    float sum = 0;\n    for (int k = 0; k < temp.size(); k++) {\n      sum += temp[k];\n    }\n    result.push_back(sum / temp.size());\n  }\n  return result;",
    "    std::vector<float> result;\n    for (int i = 0; i < nums; i++) {\n        int num;\n        std::cin >> num;\n        result.push_back(num);\n    }\n    return result;",
    "    std::vector<float> result;\n    for(int i = 0; i < nums; i++) {\n        float sum = 0;\n        for(int j = 0; j < nums; j++) {\n            sum += i * j;\n        }\n        result.push_back(sum/nums);\n    }\n    return result;",
    "    std::vector<float> result;\n    for (int i = 0; i < nums; i++) {\n        std::vector<float> temp;\n        for (int j = 0; j < nums; j++) {\n            temp.push_back(rand() % 100);\n        }\n        float sum = 0;\n        for (int j = 0; j < nums; j++) {\n            sum += temp[j];\n        }\n        result.push_back(sum / nums);\n    }\n    return result;",
    "    std::vector<float> result;\n    for (int i = 0; i < nums; i++) {\n        float sum = 0;\n        for (int j = 0; j < nums; j++) {\n            sum += i * j;\n        }\n        result.push_back(sum / nums);\n    }\n    return result;",
    "    std::vector<float> result;\n    std::vector<int> temp;\n    int sum = 0;\n    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = 0; j < nums[i].size(); j++) {\n            sum += nums[i][j];\n            count++;\n        }\n        result.push_back(sum / count);\n    }\n    return result;",
    "    std::vector<float> result;\n    for (auto i = 0; i < nums; i++) {\n        std::vector<float> temp;\n        for (auto j = 0; j < nums; j++) {\n            temp.push_back(j);\n        }\n        result.push_back(std::accumulate(temp.begin(), temp.end(), 0.0) / temp.size());\n    }\n    return result;",
    "    std::vector<float> result;\n    for (int i = 0; i < nums; i++) {\n        int sum = 0;\n        int count = 0;\n        for (int j = 0; j < nums; j++) {\n            sum += nums[i][j];\n            count++;\n        }\n        result.push_back(sum/count);\n    }\n    return result;",
    "    std::vector<float> result;\n    std::vector<std::vector<float>> input;\n    for (int i = 0; i < nums; i++) {\n        std::vector<float> temp;\n        for (int j = 0; j < nums; j++) {\n            temp.push_back(j);\n        }\n        input.push_back(temp);\n    }\n    for (int i = 0; i < input.size(); i++) {\n        float sum = 0;\n        for (int j = 0; j < input[i].size(); j++) {\n            sum += input[i][j];\n        }\n        result.push_back(sum / input[i].size());\n    }\n    return result;",
    "    std::vector<float> result;\n    std::vector<std::vector<int>> input;\n    for (int i = 0; i < nums; i++) {\n        std::vector<int> temp;\n        for (int j = 0; j < nums; j++) {\n            temp.push_back(rand() % 100);\n        }\n        input.push_back(temp);\n    }\n    for (int i = 0; i < nums; i++) {\n        float sum = 0;\n        for (int j = 0; j < nums; j++) {\n            sum += input[i][j];\n        }\n        result.push_back(sum / nums);\n    }\n    return result;",
    "    std::vector<float> result;\n    for (int i = 0; i < nums; i++) {\n        float sum = 0;\n        for (int j = 0; j < nums; j++) {\n            sum += j;\n        }\n        result.push_back(sum / nums);\n    }\n    return result;",
    "    std::vector<float> result;\n    for (int i = 0; i < nums; i++) {\n        int n;\n        std::cin >> n;\n        std::vector<int> v;\n        for (int j = 0; j < n; j++) {\n            int x;\n            std::cin >> x;\n            v.push_back(x);\n        }\n        float sum = 0;\n        for (int j = 0; j < n; j++) {\n            sum += v[j];\n        }\n        result.push_back(sum / n);\n    }\n    return result;"
  ]
}