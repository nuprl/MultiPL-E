{
  "name": "mbpp_77_is_Diff",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find whether a number is divisible by 11.\nbool is_Diff(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = is_Diff;\n    assert(candidate((12345)) == (false));\n    assert(candidate((1212112)) == (true));\n    assert(candidate((1212)) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (n < 0) {\n        n = -n;\n    }\n    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    int even_digits = 0;\n    int odd_digits = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even_digits += n % 10;\n        } else {\n            odd_digits += n % 10;\n        }\n        n /= 10;\n    }\n    return is_Diff(abs(even_digits - odd_digits));",
    "    int odd_sum = 0;\n    int even_sum = 0;\n    while (n > 0) {\n        odd_sum += n % 10;\n        n /= 10;\n        even_sum += n % 10;\n        n /= 10;\n    }\n    return abs(odd_sum - even_sum) % 11 == 0;",
    "    if (n < 0) {\n        n = -n;\n    }\n    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    long even_sum = 0;\n    long odd_sum = 0;\n    while (n) {\n        odd_sum += n % 10;\n        n /= 10;\n        even_sum += n % 10;\n        n /= 10;\n    }\n    return is_Diff(abs(odd_sum - even_sum));",
    "    if (n < 0) {\n        n = -n;\n    }\n    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    long odd_digits_sum = 0;\n    long even_digits_sum = 0;\n    while (n) {\n        odd_digits_sum += n % 10;\n        n /= 10;\n        if (n == 0) {\n            break;\n        }\n        even_digits_sum += n % 10;\n        n /= 10;\n    }\n    return is_Diff(abs(odd_digits_sum - even_digits_sum));",
    "    int even = 0;\n    int odd = 0;\n    while(n) {\n        if(n%2 == 0) {\n            even += n%10;\n        } else {\n            odd += n%10;\n        }\n        n /= 10;\n    }\n    return abs(even-odd)%11 == 0;",
    "    int even_sum = 0;\n    int odd_sum = 0;\n    int i = 0;\n    while (n != 0) {\n        if (i % 2 == 0) {\n            even_sum += n % 10;\n        } else {\n            odd_sum += n % 10;\n        }\n        n /= 10;\n        i++;\n    }\n    return abs(even_sum - odd_sum) % 11 == 0;",
    "    int sum_odd = 0;\n    int sum_even = 0;\n    while (n > 0) {\n        sum_odd += n % 10;\n        n /= 10;\n        if (n > 0) {\n            sum_even += n % 10;\n            n /= 10;\n        }\n    }\n    return sum_odd - sum_even == 0;",
    "    int odd_sum = 0;\n    int even_sum = 0;\n    while(n) {\n        odd_sum += n%10;\n        n /= 10;\n        even_sum += n%10;\n        n /= 10;\n    }\n    return abs(odd_sum - even_sum)%11 == 0;",
    "    int even = 0;\n    int odd = 0;\n    while(n) {\n        if(n%2 == 0) {\n            even += n%10;\n        } else {\n            odd += n%10;\n        }\n        n /= 10;\n    }\n    return (even-odd)%11 == 0;",
    "    int odd = 0, even = 0;\n    while (n) {\n        if (n & 1)\n            odd++;\n        else\n            even++;\n        n >>= 1;\n    }\n    return (odd - even) % 11 == 0;",
    "    int odd_sum = 0;\n    int even_sum = 0;\n    while (n > 0) {\n        odd_sum += n % 10;\n        n /= 10;\n        even_sum += n % 10;\n        n /= 10;\n    }\n    return (odd_sum - even_sum) % 11 == 0;",
    "    int odd_sum = 0;\n    int even_sum = 0;\n    while(n) {\n        odd_sum += n%10;\n        n /= 10;\n        even_sum += n%10;\n        n /= 10;\n    }\n    return abs(odd_sum - even_sum) % 11 == 0;",
    "    int even_sum = 0, odd_sum = 0;\n    while (n) {\n        even_sum += n % 10;\n        n /= 10;\n        odd_sum += n % 10;\n        n /= 10;\n    }\n    return (abs(even_sum - odd_sum) % 11 == 0);",
    "    int odd_sum = 0;\n    int even_sum = 0;\n    while(n) {\n        int r = n%10;\n        if(n%2 == 0) {\n            even_sum += r;\n        } else {\n            odd_sum += r;\n        }\n        n /= 10;\n    }\n    return abs(odd_sum - even_sum)%11 == 0;",
    "    int sum_odd = 0;\n    int sum_even = 0;\n    int i = 0;\n    while (n > 0) {\n        if (i % 2 == 0) {\n            sum_even += n % 10;\n        } else {\n            sum_odd += n % 10;\n        }\n        i++;\n        n /= 10;\n    }\n    return (sum_odd - sum_even) % 11 == 0;",
    "    if (n < 0) {\n        n = -n;\n    }\n    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    long even_sum = 0;\n    long odd_sum = 0;\n    while (n) {\n        long last_digit = n % 10;\n        if (n % 2 == 0) {\n            even_sum += last_digit;\n        } else {\n            odd_sum += last_digit;\n        }\n        n /= 10;\n    }\n    return is_Diff(abs(even_sum - odd_sum));",
    "    int odd = 0;\n    int even = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even += n % 10;\n        } else {\n            odd += n % 10;\n        }\n        n /= 10;\n    }\n    return (odd - even) % 11 == 0;",
    "    int odd_digits = 0;\n    int even_digits = 0;\n    while(n > 0) {\n        if(n % 2 == 0) {\n            even_digits += n % 10;\n        } else {\n            odd_digits += n % 10;\n        }\n        n /= 10;\n    }\n    return abs(odd_digits - even_digits) % 11 == 0;",
    "    if(n<11)\n        return false;\n    if(n==11)\n        return true;\n    long odd_sum=0,even_sum=0;\n    while(n!=0) {\n        odd_sum+=n%10;\n        n/=10;\n        even_sum+=n%10;\n        n/=10;\n    }\n    return is_Diff(abs(odd_sum-even_sum));",
    "    int odd_sum = 0;\n    int even_sum = 0;\n    int i = 0;\n    while(n != 0) {\n        int digit = n % 10;\n        if(i % 2 == 0) {\n            even_sum += digit;\n        } else {\n            odd_sum += digit;\n        }\n        i++;\n        n /= 10;\n    }\n    return abs(odd_sum - even_sum) % 11 == 0;"
  ]
}