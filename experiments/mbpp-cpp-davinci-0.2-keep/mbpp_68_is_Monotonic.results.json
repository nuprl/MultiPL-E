{
  "name": "mbpp_68_is_Monotonic",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    while(i < n-1) {\n        if(A[i] == A[i+1])\n            i++;\n        else\n            break;\n    }\n    if(i == n-1)\n        return true;\n    if(A[i] < A[i+1]) {\n        while(i < n-1) {\n            if(A[i] <= A[i+1])\n                i++;\n            else\n                return false;\n        }\n    } else {\n        while(i < n-1) {\n            if(A[i] >= A[i+1])\n                i++;\n            else\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool inc = false;\n    bool dec = false;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] < A[i+1]) {\n            inc = true;\n        }\n        if(A[i] > A[i+1]) {\n            dec = true;\n        }\n    }\n    return (inc && !dec) || (!inc && dec);\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1]) increasing = false;\n        if(A[i] > A[i-1]) decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    int i = 0;\n    int j = n - 1;\n    while (i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while (j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if (i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "tmpm6j64y9f: /tmp/tmpm6j64y9f.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    while(i < n-1 && A[i] == A[i+1])\n        i++;\n    if(i == n-1)\n        return true;\n    bool increasing = A[i] < A[i+1];\n    while(i < n-1) {\n        if(increasing && A[i] > A[i+1])\n            return false;\n        if(!increasing && A[i] < A[i+1])\n            return false;\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    while(i < n-1 && A[i] <= A[i+1]) {\n        i++;\n    }\n    if(i == n-1) {\n        return true;\n    }\n    i = 0;\n    while(i < n-1 && A[i] >= A[i+1]) {\n        i++;\n    }\n    if(i == n-1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    int flag = 0;\n    for(int i=0;i<n-1;i++)\n    {\n        if(A[i]<A[i+1])\n        {\n            flag = 1;\n            break;\n        }\n        else if(A[i]>A[i+1])\n        {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    else if(flag == 1)\n    {\n        for(int i=0;i<n-1;i++)\n        {\n            if(A[i]>A[i+1])\n                return false;\n        }\n        return true;\n    }\n    else\n    {\n        for(int i=0;i<n-1;i++)\n        {\n            if(A[i]<A[i+1])\n                return false;\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1]) {\n            is_increasing = false;\n        }\n        if(A[i] > A[i-1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    int j = n-1;\n    while(i < n-1 && A[i] <= A[i+1])\n        i++;\n    while(j > 0 && A[j] >= A[j-1])\n        j--;\n    if(i == n-1 || j == 0)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "tmpathjcwky: /tmp/tmpathjcwky.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int flag=0;\n    for(int i=0;i<A.size()-1;i++){\n        if(A[i]<A[i+1]){\n            flag=1;\n            break;\n        }\n    }\n    if(flag==1){\n        for(int i=0;i<A.size()-1;i++){\n            if(A[i]>A[i+1]){\n                return false;\n            }\n        }\n        return true;\n    }\n    else{\n        for(int i=0;i<A.size()-1;i++){\n            if(A[i]<A[i+1]){\n                return false;\n            }\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            is_increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    while(i < n-1) {\n        if(A[i] <= A[i+1]) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    if(i == n-1) {\n        return true;\n    }\n    i = 0;\n    while(i < n-1) {\n        if(A[i] >= A[i+1]) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    if(i == n-1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1)\n        return true;\n    int i = 0;\n    while (i < n - 1) {\n        if (A[i] > A[i + 1])\n            break;\n        i++;\n    }\n    if (i == n - 1)\n        return true;\n    i = 0;\n    while (i < n - 1) {\n        if (A[i] < A[i + 1])\n            break;\n        i++;\n    }\n    if (i == n - 1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    while(i < n-1) {\n        if(A[i] <= A[i+1]) {\n            i++;\n        }\n        else {\n            break;\n        }\n    }\n    if(i == n-1) {\n        return true;\n    }\n    i = 0;\n    while(i < n-1) {\n        if(A[i] >= A[i+1]) {\n            i++;\n        }\n        else {\n            break;\n        }\n    }\n    if(i == n-1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    int i = 0;\n    int j = n - 1;\n    while (i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while (j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if (i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "tmpm6j64y9f: /tmp/tmpm6j64y9f.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i;\n    for(i=0;i<n-1;i++){\n        if(A[i]>A[i+1]){\n            break;\n        }\n    }\n    if(i==n-1){\n        return true;\n    }\n    for(i=0;i<n-1;i++){\n        if(A[i]<A[i+1]){\n            break;\n        }\n    }\n    if(i==n-1){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    int flag = 0;\n    for(int i = 0; i < n-1; i++){\n        if(A[i] > A[i+1]){\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    flag = 0;\n    for(int i = 0; i < n-1; i++){\n        if(A[i] < A[i+1]){\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1])\n            increasing = false;\n        if (A[i] < A[i + 1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    int i = 0;\n    int j = A.size() - 1;\n    while(i < j) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n        i++;\n    }\n    if(flag == 1) {\n        while(j > i) {\n            if(A[j] < A[j-1]) {\n                return false;\n            }\n            j--;\n        }\n    }\n    else {\n        while(j > i) {\n            if(A[j] > A[j-1]) {\n                return false;\n            }\n            j--;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "tmp4hj1w87p: /tmp/tmp4hj1w87p.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            is_increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int flag = 0;\n    for(int i=0;i<A.size()-1;i++){\n        if(A[i]<A[i+1]){\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1){\n        for(int i=0;i<A.size()-1;i++){\n            if(A[i]>A[i+1]){\n                return false;\n            }\n        }\n    }\n    else{\n        for(int i=0;i<A.size()-1;i++){\n            if(A[i]<A[i+1]){\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n=A.size();\n    if(n==1)\n        return true;\n    int i=0;\n    while(i<n-1 && A[i]==A[i+1])\n        i++;\n    if(i==n-1)\n        return true;\n    bool increasing=A[i]<A[i+1];\n    for(int j=i+1;j<n;j++)\n    {\n        if(increasing)\n        {\n            if(A[j-1]>A[j])\n                return false;\n        }\n        else\n        {\n            if(A[j-1]<A[j])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i=0;i<A.size()-1;i++) {\n        if(A[i]>A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        flag = 0;\n        for(int i=0;i<A.size()-1;i++) {\n            if(A[i]<A[i+1]) {\n                flag = 1;\n                break;\n            }\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool inc = true;\n    bool dec = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            inc = false;\n        }\n        if (A[i] < A[i + 1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    int flag = 0;\n    while(i<j) {\n        if(A[i]<A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i]>A[i+1]) {\n            flag = 2;\n            break;\n        }\n        i++;\n    }\n    if(flag==1) {\n        while(i<j) {\n            if(A[i]>A[i+1]) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n    else if(flag==2) {\n        while(i<j) {\n            if(A[i]<A[i+1]) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 0)\n        return true;\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    while(i < n - 1) {\n        if(A[i] <= A[i + 1]) {\n            i++;\n        }\n        else {\n            break;\n        }\n    }\n    if(i == n - 1) {\n        return true;\n    }\n    i = 0;\n    while(i < n - 1) {\n        if(A[i] >= A[i + 1]) {\n            i++;\n        }\n        else {\n            break;\n        }\n    }\n    if(i == n - 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool inc = true;\n    bool dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i - 1]) {\n            inc = false;\n        }\n        if(A[i] > A[i - 1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i=0;i<A.size()-1;i++){\n        if(A[i]>A[i+1]){\n            is_increasing = false;\n        }\n        if(A[i]<A[i+1]){\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size() == 1)\n        return true;\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i = 1; i < A.size(); i++) {\n        if(A[i] < A[i - 1])\n            is_increasing = false;\n        if(A[i] > A[i - 1])\n            is_decreasing = false;\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    bool inc = true;\n    bool dec = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            inc = false;\n        }\n        if (A[i] < A[i + 1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1])\n            is_increasing = false;\n        if(A[i] < A[i+1])\n            is_decreasing = false;\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    if(A[0] < A[n-1]) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] > A[i+1])\n                return false;\n        }\n    }\n    else if(A[0] > A[n-1]) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] < A[i+1])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1]) {\n            increasing = false;\n        }\n        if(A[i] < A[i+1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "tmpkie5gyxh: /tmp/tmpkie5gyxh.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "tmp1ua49glj: /tmp/tmp1ua49glj.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "tmpkie5gyxh: /tmp/tmpkie5gyxh.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1]) {\n            increasing = false;\n        }\n        if(A[i] > A[i-1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i = 0; i < n-1; i++){\n        if(A[i] > A[i+1])\n            is_increasing = false;\n        if(A[i] < A[i+1])\n            is_decreasing = false;\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    int flag1 = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n        }\n        if(A[i] > A[i+1]) {\n            flag1 = 1;\n        }\n    }\n    if(flag == 1 && flag1 == 0) {\n        return true;\n    }\n    if(flag == 0 && flag1 == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool inc = false;\n    bool dec = false;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] < A[i + 1])\n            inc = true;\n        if(A[i] > A[i + 1])\n            dec = true;\n    }\n    if(inc && dec)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    while(i < n-1 && A[i] <= A[i+1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j-1]) {\n        j--;\n    }\n    return i >= j;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "tmpe9avz55t: /tmp/tmpe9avz55t.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() <= 2)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < A.size(); i++) {\n        if (A[i] < A[i - 1])\n            increasing = false;\n        if (A[i] > A[i - 1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122918,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1]) increasing = false;\n        if(A[i] > A[i-1]) decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "tmpkie5gyxh: /tmp/tmpkie5gyxh.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    int i = 0;\n    int j = 1;\n    while(j < n) {\n        if(A[i] <= A[j]) {\n            i++;\n            j++;\n        } else {\n            break;\n        }\n    }\n    if(j == n) {\n        return true;\n    }\n    i = 0;\n    j = 1;\n    while(j < n) {\n        if(A[i] >= A[j]) {\n            i++;\n            j++;\n        } else {\n            break;\n        }\n    }\n    if(j == n) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122918,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < n; i++) {\n        if (A[i] < A[i-1]) {\n            increasing = false;\n        }\n        if (A[i] > A[i-1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122918,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] <= A[i+1]) {\n            flag = 1;\n        }\n        else {\n            flag = 0;\n            break;\n        }\n    }\n    if(flag == 1) {\n        return true;\n    }\n    else {\n        flag = 0;\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] >= A[i+1]) {\n                flag = 1;\n            }\n            else {\n                flag = 0;\n                break;\n            }\n        }\n        if(flag == 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122918,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size() == 1)\n        return true;\n    int flag = 0;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(flag == 1) {\n            if(A[i] > A[i+1])\n                return false;\n        }\n        else if(flag == 2) {\n            if(A[i] < A[i+1])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    while (i < n - 1) {\n        if (A[i] <= A[i + 1]) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    if (i == n - 1) {\n        return true;\n    }\n    i = 0;\n    while (i < n - 1) {\n        if (A[i] >= A[i + 1]) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    if (i == n - 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122918,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool inc = true, dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            inc = false;\n        if(A[i] > A[i-1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n==1)\n        return true;\n    int flag = 0;\n    for(int i=0;i<n-1;i++)\n    {\n        if(A[i]<A[i+1])\n            flag = 1;\n        else if(A[i]>A[i+1])\n            flag = 2;\n        else\n            flag = 0;\n        if(flag==0)\n            continue;\n        else\n            break;\n    }\n    if(flag==1)\n    {\n        for(int i=0;i<n-1;i++)\n        {\n            if(A[i]>A[i+1])\n                return false;\n        }\n    }\n    else if(flag==2)\n    {\n        for(int i=0;i<n-1;i++)\n        {\n            if(A[i]<A[i+1])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "tmpkie5gyxh: /tmp/tmpkie5gyxh.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    bool inc = true, dec = true;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1]) {\n            inc = false;\n        }\n        if(A[i] < A[i+1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    int flag = 0;\n    for(i = 0; i < n-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    for(i = i+1; i < n-1; i++) {\n        if(flag == 1) {\n            if(A[i] > A[i+1])\n                return false;\n        }\n        else {\n            if(A[i] < A[i+1])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    if (A[0] <= A[1]) {\n        for (int i = 1; i < n; i++) {\n            if (A[i] < A[i - 1]) {\n                return false;\n            }\n        }\n    } else {\n        for (int i = 1; i < n; i++) {\n            if (A[i] > A[i - 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool inc = true;\n    bool dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1]) {\n            inc = false;\n        }\n        if(A[i] > A[i-1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122918,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    bool inc = true;\n    bool dec = true;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] > A[i + 1]) {\n            inc = false;\n        }\n        if(A[i] < A[i + 1]) {\n            dec = false;\n        }\n    }\n    if(inc || dec) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    while(i < n-1 && A[i] == A[i+1])\n        i++;\n    if(i == n-1)\n        return true;\n    bool is_increasing = A[i] < A[i+1];\n    for(int i = 0; i < n-1; i++) {\n        if(is_increasing && A[i] > A[i+1])\n            return false;\n        if(!is_increasing && A[i] < A[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122918,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool inc = true, dec = true;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1])\n            inc = false;\n        if(A[i] < A[i+1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122918,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1])\n            increasing = false;\n        if (A[i] < A[i + 1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    else if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    while(i<j){\n        if(A[i]<=A[i+1]){\n            i++;\n        }\n        else{\n            break;\n        }\n    }\n    while(j>i){\n        if(A[j]>=A[j-1]){\n            j--;\n        }\n        else{\n            break;\n        }\n    }\n    if(i==j){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "tmpkakqjd8m: /tmp/tmpkakqjd8m.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    int flag = 0;\n    for(int i=0;i<n-1;i++){\n        if(A[i]<A[i+1]){\n            flag = 1;\n            break;\n        }\n        else if(A[i]>A[i+1]){\n            flag = 2;\n            break;\n        }\n    }\n    if(flag==0){\n        return true;\n    }\n    else if(flag==1){\n        for(int i=0;i<n-1;i++){\n            if(A[i]>A[i+1]){\n                return false;\n            }\n        }\n    }\n    else if(flag==2){\n        for(int i=0;i<n-1;i++){\n            if(A[i]<A[i+1]){\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() == 1) {\n        return true;\n    }\n    int flag = 0;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 1) {\n        for (int i = 0; i < A.size() - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n\tint n = A.size();\n\tif (n == 1) {\n\t\treturn true;\n\t}\n\tbool is_increasing = true;\n\tbool is_decreasing = true;\n\tfor (int i = 0; i < n - 1; i++) {\n\t\tif (A[i] > A[i + 1]) {\n\t\t\tis_increasing = false;\n\t\t}\n\t\tif (A[i] < A[i + 1]) {\n\t\t\tis_decreasing = false;\n\t\t}\n\t}\n\treturn is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1)\n        return true;\n    int i = 0;\n    bool increasing = false;\n    bool decreasing = false;\n    while (i < n - 1) {\n        if (A[i] < A[i + 1]) {\n            increasing = true;\n            break;\n        }\n        else if (A[i] > A[i + 1]) {\n            decreasing = true;\n            break;\n        }\n        i++;\n    }\n    if (increasing) {\n        for (int i = 0; i < n - 1; i++) {\n            if (A[i] > A[i + 1])\n                return false;\n        }\n    }\n    else if (decreasing) {\n        for (int i = 0; i < n - 1; i++) {\n            if (A[i] < A[i + 1])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    bool inc = false;\n    bool dec = false;\n    while(i < n-1) {\n        if(A[i] < A[i+1]) {\n            inc = true;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            dec = true;\n            break;\n        }\n        i++;\n    }\n    if(inc) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] > A[i+1])\n                return false;\n        }\n    }\n    else if(dec) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] < A[i+1])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    while(i < n-1 && A[i] <= A[i+1]){\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j-1]){\n        j--;\n    }\n    if(i == n-1 || j == 0){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "tmp2j2n8mhe: /tmp/tmp2j2n8mhe.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    while(i<j) {\n        if(A[i]<=A[i+1]) {\n            i++;\n        }\n        else if(A[j]>=A[j-1]) {\n            j--;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "tmpowflruah: /tmp/tmpowflruah.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < n; i++) {\n        if (A[i] > A[i - 1]) {\n            decreasing = false;\n        }\n        if (A[i] < A[i - 1]) {\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            is_increasing = false;\n        if(A[i] > A[i-1])\n            is_decreasing = false;\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n    }\n    else if(flag == 2) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool flag = true;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] > A[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    if(flag)\n        return true;\n    flag = true;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] < A[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    while(i < n - 1) {\n        if(A[i] > A[i + 1]) {\n            is_increasing = false;\n        }\n        if(A[i] < A[i + 1]) {\n            is_decreasing = false;\n        }\n        i++;\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n==1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i=0;i<n-1;i++){\n        if(A[i]>A[i+1])\n            inc = false;\n        if(A[i]<A[i+1])\n            dec = false;\n    }\n    if(inc || dec)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size()==1)\n        return true;\n    bool increasing=true;\n    bool decreasing=true;\n    for(int i=0;i<A.size()-1;i++){\n        if(A[i]>A[i+1])\n            increasing=false;\n        if(A[i]<A[i+1])\n            decreasing=false;\n    }\n    if(increasing || decreasing)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            is_increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    bool inc = true, dec = true;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] > A[i + 1])\n            inc = false;\n        if(A[i] < A[i + 1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    while(i < n-1 && A[i] <= A[i+1]) {\n        i++;\n    }\n    if(i == n-1) {\n        return true;\n    }\n    i = 0;\n    while(i < n-1 && A[i] >= A[i+1]) {\n        i++;\n    }\n    if(i == n-1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] > A[i-1])\n            decreasing = false;\n        if(A[i] < A[i-1])\n            increasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    int i = 0;\n    while (i < n - 1) {\n        if (A[i] != A[i + 1]) {\n            break;\n        }\n        i++;\n    }\n    if (i == n - 1) {\n        return true;\n    }\n    bool is_increasing = A[i] < A[i + 1];\n    for (int j = i + 1; j < n - 1; j++) {\n        if (is_increasing) {\n            if (A[j] > A[j + 1]) {\n                return false;\n            }\n        } else {\n            if (A[j] < A[j + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    while(i < n-1 && A[i] == A[i+1])\n        i++;\n    if(i == n-1)\n        return true;\n    bool is_increasing = A[i] < A[i+1];\n    for(int j = i+1; j < n-1; j++) {\n        if(is_increasing && A[j] > A[j+1])\n            return false;\n        if(!is_increasing && A[j] < A[j+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < n; i++) {\n        if (A[i] < A[i - 1]) {\n            increasing = false;\n        }\n        if (A[i] > A[i - 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1])\n            decreasing = false;\n        if (A[i] > A[i + 1])\n            increasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) return true;\n    bool inc = true, dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1]) inc = false;\n        if(A[i] > A[i-1]) dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    int flag = 0;\n    while(i < n - 1 && j > 0) {\n        if(A[i] <= A[i + 1]) {\n            i++;\n            flag = 1;\n        }\n        if(A[j] >= A[j - 1]) {\n            j--;\n            flag = 1;\n        }\n    }\n    if(flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122935,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < n; i++) {\n        if (A[i] < A[i - 1]) {\n            increasing = false;\n        }\n        if (A[i] > A[i - 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    int i = 0;\n    while (i < n - 1) {\n        if (A[i] <= A[i + 1]) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    if (i == n - 1) {\n        return true;\n    }\n    i = 0;\n    while (i < n - 1) {\n        if (A[i] >= A[i + 1]) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    if (i == n - 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    if(n==1)\n        return true;\n    int flag = 0;\n    for(int i=0;i<n-1;i++){\n        if(A[i]<A[i+1])\n            flag = 1;\n        else if(A[i]>A[i+1])\n            flag = 2;\n        else\n            flag = 0;\n        if(flag==0)\n            continue;\n        for(int j=i+1;j<n-1;j++){\n            if(flag==1){\n                if(A[j]>A[j+1])\n                    return false;\n            }\n            else{\n                if(A[j]<A[j+1])\n                    return false;\n            }\n        }\n        return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1)\n        return true;\n    bool flag = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    if (flag)\n        return true;\n    flag = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            flag = false;\n            break;\n        }\n    }\n    if (flag)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] < A[i+1])\n            flag = 1;\n        else if(A[i] > A[i+1])\n            flag = -1;\n        else\n            flag = 0;\n    }\n    if(flag == 0)\n        return true;\n    else {\n        for(int i = 0; i < n-1; i++) {\n            if(flag == 1 && A[i] > A[i+1])\n                return false;\n            else if(flag == -1 && A[i] < A[i+1])\n                return false;\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1])\n            inc = false;\n        if(A[i] < A[i+1])\n            dec = false;\n    }\n    if(inc || dec)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    while(i < n-1 && A[i] <= A[i+1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j-1]) {\n        j--;\n    }\n    if(i == n-1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "tmpsq92k7l5: /tmp/tmpsq92k7l5.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < A.size()-1; i++) {\n        if (A[i] > A[i+1]) {\n            is_increasing = false;\n        }\n        if (A[i] < A[i+1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "tmpkie5gyxh: /tmp/tmpkie5gyxh.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1)\n        return true;\n    bool inc = true, dec = true;\n    for (int i = 1; i < n; i++) {\n        if (A[i] < A[i - 1])\n            inc = false;\n        if (A[i] > A[i - 1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int flag = 0;\n    for(int i = 1; i < n; i++) {\n        if(A[i] > A[i-1]) {\n            if(flag == -1)\n                return false;\n            flag = 1;\n        }\n        else if(A[i] < A[i-1]) {\n            if(flag == 1)\n                return false;\n            flag = -1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    return i == n - 1 || j == 0;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "tmpf7p2_peo: /tmp/tmpf7p2_peo.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < n; i++) {\n        if (A[i] > A[i - 1]) {\n            decreasing = false;\n        }\n        if (A[i] < A[i - 1]) {\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    int inc = 0;\n    int dec = 0;\n    for(int i=0;i<n-1;i++){\n        if(A[i]<A[i+1]){\n            inc++;\n        }\n        else if(A[i]>A[i+1]){\n            dec++;\n        }\n    }\n    if(inc==n-1 || dec==n-1){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "tmpdoje2gov: /tmp/tmpdoje2gov.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1)\n        return true;\n    int flag = 0;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 1) {\n        for (int i = 0; i < n - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool inc = true;\n    bool dec = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            inc = false;\n        }\n        if (A[i] < A[i + 1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    else if(flag == 1) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n==1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i=0;i<n-1;i++){\n        if(A[i]>A[i+1])\n            inc = false;\n        if(A[i]<A[i+1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    while(i < n-1 && A[i] == A[i+1])\n        i++;\n    if(i == n-1)\n        return true;\n    bool increasing = A[i] < A[i+1];\n    for(int j = i+1; j < n-1; j++) {\n        if(increasing && A[j] > A[j+1])\n            return false;\n        if(!increasing && A[j] < A[j+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    int i;\n    int flag = 0;\n    for (i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 1) {\n        for (i = 0; i < n - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1]) {\n            is_increasing = false;\n        }\n        if(A[i] > A[i-1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            is_increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) increasing = false;\n        if (A[i] < A[i + 1]) decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 0) {\n        return true;\n    }\n    flag = 0;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size() <= 2) {\n        return true;\n    }\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            inc = false;\n        if(A[i] > A[i-1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] < A[i + 1]) {\n            flag = 1;\n        }\n        else if(A[i] > A[i + 1]) {\n            flag = 2;\n        }\n        if(flag == 1 && A[i] > A[i + 1]) {\n            return false;\n        }\n        if(flag == 2 && A[i] < A[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122923,
      "stdout": "",
      "stderr": "tmpx9sofj4u: /tmp/tmpx9sofj4u.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] > A[i + 1])\n            increasing = false;\n        if(A[i] < A[i + 1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size() == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if(A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            increasing = false;\n        if(A[i] > A[i-1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    int flag = 0;\n    while(i<n-1 && j>0){\n        if(A[i]<=A[i+1]){\n            i++;\n        }\n        else{\n            flag = 1;\n            break;\n        }\n        if(A[j]>=A[j-1]){\n            j--;\n        }\n        else{\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1){\n        return false;\n    }\n    else{\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "tmpb3nqxph5: /tmp/tmpb3nqxph5.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    while(i < n-1) {\n        if(A[i] <= A[i+1]) {\n            i++;\n        }\n        else {\n            break;\n        }\n    }\n    if(i == n-1) {\n        return true;\n    }\n    i = 0;\n    while(i < n-1) {\n        if(A[i] >= A[i+1]) {\n            i++;\n        }\n        else {\n            break;\n        }\n    }\n    if(i == n-1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510085,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    int flag = 0;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 1) {\n        for (int i = 0; i < n - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    bool inc = true;\n    bool dec = true;\n    for(int i=1;i<A.size();i++)\n    {\n        if(A[i]<A[i-1])\n        {\n            inc = false;\n        }\n        if(A[i]>A[i-1])\n        {\n            dec = false;\n        }\n    }\n    if(inc || dec)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    while(i < n-1 && A[i] <= A[i+1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j-1]) {\n        j--;\n    }\n    if(i == n-1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "tmpsq92k7l5: /tmp/tmpsq92k7l5.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n==1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i=1;i<n;i++){\n        if(A[i]<A[i-1])\n            inc = false;\n        if(A[i]>A[i-1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] > A[i + 1])\n            increasing = false;\n        if (A[i] < A[i + 1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n==1)\n        return true;\n    int i=0;\n    while(i<n-1 && A[i]==A[i+1])\n        i++;\n    if(i==n-1)\n        return true;\n    bool flag = A[i]<A[i+1]?true:false;\n    for(int i=0;i<n-1;i++){\n        if(flag){\n            if(A[i]>A[i+1])\n                return false;\n        }\n        else{\n            if(A[i]<A[i+1])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    while(i < n-1 && A[i] <= A[i+1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j-1]) {\n        j--;\n    }\n    if(i == n-1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "tmpsq92k7l5: /tmp/tmpsq92k7l5.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size()==0)\n        return true;\n    if(A.size()==1)\n        return true;\n    if(A.size()==2)\n        return true;\n    int flag=0;\n    for(int i=0;i<A.size()-1;i++)\n    {\n        if(A[i]>A[i+1])\n        {\n            flag=1;\n            break;\n        }\n    }\n    if(flag==0)\n        return true;\n    flag=0;\n    for(int i=0;i<A.size()-1;i++)\n    {\n        if(A[i]<A[i+1])\n        {\n            flag=1;\n            break;\n        }\n    }\n    if(flag==0)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n\tint n = A.size();\n\tif(n == 1)\n\t\treturn true;\n\tint flag = 0;\n\tfor(int i = 0; i < n-1; i++) {\n\t\tif(A[i] < A[i+1])\n\t\t\tflag = 1;\n\t\telse if(A[i] > A[i+1])\n\t\t\tflag = -1;\n\t\telse\n\t\t\tflag = 0;\n\t}\n\tif(flag == 0)\n\t\treturn true;\n\telse {\n\t\tfor(int i = 0; i < n-1; i++) {\n\t\t\tif(flag == 1) {\n\t\t\t\tif(A[i] > A[i+1])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(flag == -1) {\n\t\t\t\tif(A[i] < A[i+1])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    while(i < n-1) {\n        if(A[i] <= A[i+1])\n            i++;\n        else\n            break;\n    }\n    if(i == n-1)\n        return true;\n    i = 0;\n    while(i < n-1) {\n        if(A[i] >= A[i+1])\n            i++;\n        else\n            break;\n    }\n    if(i == n-1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    while(i < n-1 && A[i] <= A[i+1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j-1]) {\n        j--;\n    }\n    if(i == n-1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "tmpsq92k7l5: /tmp/tmpsq92k7l5.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1])\n            increasing = false;\n        if(A[i] < A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    int i = 0;\n    bool increasing = true;\n    bool decreasing = true;\n    while (i < n - 1) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n        i++;\n    }\n    if (increasing || decreasing) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    while(i < j) {\n        if(A[i] <= A[i+1]) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    while(j > i) {\n        if(A[j] >= A[j-1]) {\n            j--;\n        } else {\n            break;\n        }\n    }\n    if(i == j) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "tmpbprg5ore: /tmp/tmpbprg5ore.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    int flag1 = 0;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            flag = 1;\n        }\n        if (A[i] > A[i + 1]) {\n            flag1 = 1;\n        }\n    }\n    if (flag == 1 && flag1 == 0) {\n        return true;\n    }\n    if (flag == 0 && flag1 == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    int flag = 0;\n    while(i < n-1 && j > 0) {\n        if(A[i] <= A[i+1]) {\n            i++;\n        }\n        else {\n            flag = 1;\n            break;\n        }\n        if(A[j] >= A[j-1]) {\n            j--;\n        }\n        else {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "tmpl61js0u7: /tmp/tmpl61js0u7.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i=0;i<n-1;i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i=0;i<n-1;i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int i,j,k;\n    for(i=0;i<A.size()-1;i++){\n        if(A[i]<A[i+1]){\n            break;\n        }\n    }\n    for(j=i+1;j<A.size()-1;j++){\n        if(A[j]>A[j+1]){\n            break;\n        }\n    }\n    for(k=j+1;k<A.size()-1;k++){\n        if(A[k]<A[k+1]){\n            break;\n        }\n    }\n    if(k==A.size()-1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "tmpw55u0ve5: /tmp/tmpw55u0ve5.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    while(i < n-1 && A[i] <= A[i+1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j-1]) {\n        j--;\n    }\n    if(i == n-1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "tmpsq92k7l5: /tmp/tmpsq92k7l5.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122918,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() <= 2) {\n        return true;\n    }\n    int flag = 0;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            if (flag == -1) {\n                return false;\n            }\n            flag = 1;\n        }\n        else if (A[i] > A[i + 1]) {\n            if (flag == 1) {\n                return false;\n            }\n            flag = -1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    while(i < n-1 && A[i] <= A[i+1])\n        i++;\n    if(i == n-1)\n        return true;\n    i = 0;\n    while(i < n-1 && A[i] >= A[i+1])\n        i++;\n    if(i == n-1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            inc = false;\n        if(A[i] > A[i-1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n==1)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i=1;i<n;i++){\n        if(A[i]<A[i-1])\n            increasing = false;\n        if(A[i]>A[i-1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int flag=0;\n    for(int i=0;i<A.size()-1;i++)\n    {\n        if(A[i]<A[i+1])\n        {\n            flag=1;\n            break;\n        }\n        else if(A[i]>A[i+1])\n        {\n            flag=2;\n            break;\n        }\n    }\n    if(flag==1)\n    {\n        for(int i=0;i<A.size()-1;i++)\n        {\n            if(A[i]>A[i+1])\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    else if(flag==2)\n    {\n        for(int i=0;i<A.size()-1;i++)\n        {\n            if(A[i]<A[i+1])\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    else\n    {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 1;\n    while(i < n && A[i] >= A[i-1]) {\n        i++;\n    }\n    if(i == n) {\n        return true;\n    }\n    i = 1;\n    while(i < n && A[i] <= A[i-1]) {\n        i++;\n    }\n    if(i == n) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    if(n==1)\n        return true;\n    int i = 0;\n    int j = n-1;\n    while(i<j){\n        if(A[i]<A[i+1])\n            i++;\n        else if(A[i]>A[i+1])\n            i++;\n        else\n            return false;\n        if(A[j]<A[j-1])\n            j--;\n        else if(A[j]>A[j-1])\n            j--;\n        else\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "tmpavrrl2bf: /tmp/tmpavrrl2bf.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < n; i++) {\n        if (A[i] > A[i - 1]) {\n            decreasing = false;\n        }\n        if (A[i] < A[i - 1]) {\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n <= 2) return true;\n    int i = 1;\n    while(i < n && A[i] == A[i-1]) i++;\n    if(i == n) return true;\n    bool inc = A[i] > A[i-1];\n    for(; i < n; i++) {\n        if(A[i] == A[i-1]) continue;\n        if(inc && A[i] < A[i-1]) return false;\n        if(!inc && A[i] > A[i-1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            increasing = false;\n        if(A[i] > A[i-1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    if(n==1)\n        return true;\n    int flag = 0;\n    for(int i=0;i<n-1;i++){\n        if(A[i]<A[i+1]){\n            flag = 1;\n            break;\n        }\n        else if(A[i]>A[i+1]){\n            flag = 2;\n            break;\n        }\n    }\n    if(flag==0)\n        return true;\n    else if(flag==1){\n        for(int i=0;i<n-1;i++){\n            if(A[i]>A[i+1])\n                return false;\n        }\n        return true;\n    }\n    else{\n        for(int i=0;i<n-1;i++){\n            if(A[i]<A[i+1])\n                return false;\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    bool flag = true;\n    for(int i=0;i<n-1;i++) {\n        if(A[i]>A[i+1]) {\n            flag = false;\n            break;\n        }\n    }\n    if(flag) {\n        return true;\n    }\n    flag = true;\n    for(int i=0;i<n-1;i++) {\n        if(A[i]<A[i+1]) {\n            flag = false;\n            break;\n        }\n    }\n    if(flag) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i=0;i<n-1;i++) {\n        if(A[i]<A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i]>A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    else if(flag == 1) {\n        for(int i=0;i<n-1;i++) {\n            if(A[i]>A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else if(flag == 2) {\n        for(int i=0;i<n-1;i++) {\n            if(A[i]<A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < n; i++) {\n        if (A[i] > A[i - 1]) {\n            decreasing = false;\n        }\n        if (A[i] < A[i - 1]) {\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool inc = true;\n    bool dec = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            inc = false;\n        }\n        if (A[i] < A[i + 1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            is_decreasing = false;\n        }\n        if (A[i] > A[i + 1]) {\n            is_increasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) return true;\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1]) is_increasing = false;\n        if(A[i] > A[i-1]) is_decreasing = false;\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    int i = 0;\n    while (i < n - 1) {\n        if (A[i] == A[i + 1]) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    if (i == n - 1) {\n        return true;\n    }\n    if (A[i] > A[i + 1]) {\n        for (int j = i; j < n - 1; j++) {\n            if (A[j] < A[j + 1]) {\n                return false;\n            }\n        }\n    } else {\n        for (int j = i; j < n - 1; j++) {\n            if (A[j] > A[j + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    if(A.size() == 1)\n        return true;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size() - 1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            inc = false;\n        if(A[i] > A[i-1])\n            dec = false;\n    }\n    return (inc || dec);\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    int i = 0;\n    while (i < n - 1) {\n        if (A[i] == A[i + 1]) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    if (i == n - 1) {\n        return true;\n    }\n    if (A[i] > A[i + 1]) {\n        for (int j = i; j < n - 1; j++) {\n            if (A[j] < A[j + 1]) {\n                return false;\n            }\n        }\n    } else {\n        for (int j = i; j < n - 1; j++) {\n            if (A[j] > A[j + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool inc = true;\n    bool dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1]) {\n            inc = false;\n        }\n        if(A[i] > A[i-1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122918,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    for(int i = 0; i < n-1; i++) {\n        if(flag == 1) {\n            if(A[i] > A[i+1])\n                return false;\n        }\n        else if(flag == 2) {\n            if(A[i] < A[i+1])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    int flag = 0;\n    while (i < n - 1 && j > 0) {\n        if (A[i] < A[i + 1]) {\n            flag = 1;\n            break;\n        }\n        if (A[j] > A[j - 1]) {\n            flag = 2;\n            break;\n        }\n        i++;\n        j--;\n    }\n    if (flag == 1) {\n        for (int i = 0; i < n - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else if (flag == 2) {\n        for (int i = 0; i < n - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "tmpo9war9gi: /tmp/tmpo9war9gi.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    int flag = 0;\n    while(i < j) {\n        if(A[i] < A[i + 1]) {\n            flag = 1;\n            break;\n        }\n        if(A[i] > A[i + 1]) {\n            flag = 2;\n            break;\n        }\n        i++;\n    }\n    if(flag == 1) {\n        while(i < j) {\n            if(A[i] > A[i + 1]) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n    else if(flag == 2) {\n        while(i < j) {\n            if(A[i] < A[i + 1]) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n    }\n    else if(flag == 2) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1]) inc = false;\n        if(A[i] > A[i-1]) dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) return true;\n    int i = 0;\n    while(i < n-1 && A[i] == A[i+1]) i++;\n    if(i == n-1) return true;\n    bool increasing = A[i] < A[i+1];\n    for(int j = i+1; j < n-1; j++) {\n        if(increasing && A[j] > A[j+1]) return false;\n        if(!increasing && A[j] < A[j+1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            is_increasing = false;\n        if(A[i] > A[i-1])\n            is_decreasing = false;\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int flag = 0;\n    for(int i = 0; i < n-1; i++){\n        if(A[i] < A[i+1]){\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]){\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    for(int i = 0; i < n-1; i++){\n        if(flag == 1){\n            if(A[i] > A[i+1])\n                return false;\n        }\n        else if(flag == 2){\n            if(A[i] < A[i+1])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i=0;i<n-1;i++){\n        if(A[i]>A[i+1]){\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1){\n        for(int i=0;i<n-1;i++){\n            if(A[i]<A[i+1]){\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 1) {\n        for (int i = 0; i < n - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    int flag = 0;\n    while(i < j) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n        i++;\n    }\n    if(flag == 0) {\n        return true;\n    }\n    else if(flag == 1) {\n        while(i < j) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n    else {\n        while(i < j) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n    }\n    else if(flag == 2) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] > A[i-1]) {\n            decreasing = false;\n        }\n        if(A[i] < A[i-1]) {\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size() == 1) {\n        return true;\n    }\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i = 1; i < A.size(); i++) {\n        if(A[i] < A[i-1]) {\n            is_increasing = false;\n        }\n        if(A[i] > A[i-1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            inc = false;\n        if(A[i] > A[i-1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 0) {\n        return false;\n    }\n    int i = 0;\n    int j = n - 1;\n    while (i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while (j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if (i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122928,
      "stdout": "",
      "stderr": "tmp29a4u64f: /tmp/tmp29a4u64f.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() == 1) {\n        return true;\n    }\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            is_decreasing = false;\n        }\n        if (A[i] > A[i + 1]) {\n            is_increasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int flag = 0;\n    for(int i = 0; i < n-1; i++){\n        if(A[i] < A[i+1])\n            flag = 1;\n        else if(A[i] > A[i+1])\n            flag = 2;\n        else\n            flag = 0;\n    }\n    if(flag == 1 || flag == 2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122928,
      "stdout": "",
      "stderr": "tmpbu7kw7uf: /tmp/tmpbu7kw7uf.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for (int i = 1; i < n; i++) {\n        if (A[i] < A[i - 1]) {\n            is_increasing = false;\n        }\n        if (A[i] > A[i - 1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i+1])\n            decreasing = false;\n        if (A[i] > A[i+1])\n            increasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    while(i < n-1 && A[i] == A[i+1])\n        i++;\n    if(i == n-1)\n        return true;\n    bool flag = A[i] < A[i+1];\n    for(int j = i+1; j < n; j++) {\n        if(flag) {\n            if(A[j] < A[j-1])\n                return false;\n        }\n        else {\n            if(A[j] > A[j-1])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    int flag = 0;\n    while(i<n-1 && j>0) {\n        if(A[i]<=A[i+1]) {\n            i++;\n        } else {\n            flag = 1;\n            break;\n        }\n        if(A[j]>=A[j-1]) {\n            j--;\n        } else {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122928,
      "stdout": "",
      "stderr": "tmp7y6y2pdc: /tmp/tmp7y6y2pdc.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the given array is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n\tint n = A.size();\n\tint i = 0;\n\tint j = n - 1;\n\twhile (i < n - 1 && A[i] <= A[i + 1]) {\n\t\ti++;\n\t}\n\twhile (j > 0 && A[j] >= A[j - 1]) {\n\t\tj--;\n\t}\n\tif (i == n - 1 || j == 0) {\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122928,
      "stdout": "",
      "stderr": "tmpo77140hv: /tmp/tmpo77140hv.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}