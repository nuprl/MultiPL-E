{
  "name": "mbpp_12_sort_matrix",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nstd::vector<std::vector<long>> sort_matrix(std::vector<std::vector<long>> M) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = sort_matrix;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)5})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)-2, (long)4, (long)-5}), (std::vector<long>)std::vector<long>({(long)1, (long)-1, (long)1})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)-2, (long)4, (long)-5}), (std::vector<long>)std::vector<long>({(long)1, (long)-1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)1, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)8, (long)9})})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (auto sum : sorted_sums) {\n        for (int i = 0; i < sums.size(); i++) {\n            if (sums[i] == sum) {\n                res.push_back(M[i]);\n                sums[i] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "  std::vector<std::vector<long>> res;\n  std::vector<long> sums;\n  for (int i = 0; i < M.size(); i++) {\n    long sum = 0;\n    for (int j = 0; j < M[i].size(); j++) {\n      sum += M[i][j];\n    }\n    sums.push_back(sum);\n  }\n  for (int i = 0; i < M.size(); i++) {\n    int min = i;\n    for (int j = i + 1; j < M.size(); j++) {\n      if (sums[j] < sums[min]) {\n        min = j;\n      }\n    }\n    if (min != i) {\n      long temp = sums[i];\n      sums[i] = sums[min];\n      sums[min] = temp;\n      std::vector<long> temp_vec = M[i];\n      M[i] = M[min];\n      M[min] = temp_vec;\n    }\n  }\n  return M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> sorted_matrix;\n    std::vector<long> row_sums;\n    std::vector<long> row_index;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        row_sums.push_back(sum);\n        row_index.push_back(i);\n    }\n    for(int i=0;i<row_sums.size();i++){\n        for(int j=0;j<row_sums.size()-1;j++){\n            if(row_sums[j]>row_sums[j+1]){\n                long temp=row_sums[j];\n                row_sums[j]=row_sums[j+1];\n                row_sums[j+1]=temp;\n                temp=row_index[j];\n                row_index[j]=row_index[j+1];\n                row_index[j+1]=temp;\n            }\n        }\n    }\n    for(int i=0;i<row_index.size();i++){\n        sorted_matrix.push_back(M[row_index[i]]);\n    }\n    return sorted_matrix;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> row_sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        row_sums.push_back(sum);\n    }\n    std::vector<long> sorted_row_sums = row_sums;\n    std::sort(sorted_row_sums.begin(), sorted_row_sums.end());\n    for(int i = 0; i < sorted_row_sums.size(); i++) {\n        int index = std::find(row_sums.begin(), row_sums.end(), sorted_row_sums[i]) - row_sums.begin();\n        result.push_back(M[index]);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::pair<long, std::vector<long>>> v;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        v.push_back(std::make_pair(sum,M[i]));\n    }\n    std::sort(v.begin(),v.end());\n    std::vector<std::vector<long>> ans;\n    for(int i=0;i<v.size();i++){\n        ans.push_back(v[i].second);\n    }\n    return ans;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (int i = 0; i < sums.size(); i++) {\n        result.push_back(sums[i].second);\n    }\n    return result;",
    "    int n = M.size();\n    int m = M[0].size();\n    std::vector<std::pair<long, int>> sums(n);\n    for (int i = 0; i < n; i++) {\n        long sum = 0;\n        for (int j = 0; j < m; j++) {\n            sum += M[i][j];\n        }\n        sums[i] = std::make_pair(sum, i);\n    }\n    std::sort(sums.begin(), sums.end());\n    std::vector<std::vector<long>> result(n, std::vector<long>(m));\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            result[i][j] = M[sums[i].second][j];\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> sorted_matrix;\n    std::vector<long> sums;\n    for(auto row : M) {\n        long sum = 0;\n        for(auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(auto sum : sorted_sums) {\n        for(int i = 0; i < sums.size(); i++) {\n            if(sums[i] == sum) {\n                sorted_matrix.push_back(M[i]);\n                sums[i] = -1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    std::vector<long> indices;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n        indices.push_back(i);\n    }\n    for (int i = 0; i < M.size(); i++) {\n        for (int j = i + 1; j < M.size(); j++) {\n            if (sums[j] < sums[i]) {\n                long temp = sums[i];\n                sums[i] = sums[j];\n                sums[j] = temp;\n                temp = indices[i];\n                indices[i] = indices[j];\n                indices[j] = temp;\n            }\n        }\n    }\n    for (int i = 0; i < M.size(); i++) {\n        result.push_back(M[indices[i]]);\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (auto sum : sums) {\n        res.push_back(sum.second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::sort(sums.begin(),sums.end());\n    for(int i=0;i<sums.size();i++){\n        for(int j=0;j<M.size();j++){\n            long sum=0;\n            for(int k=0;k<M[j].size();k++){\n                sum+=M[j][k];\n            }\n            if(sum==sums[i]){\n                result.push_back(M[j]);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> copy_sums=sums;\n    std::sort(sums.begin(),sums.end());\n    for(int i=0;i<sums.size();i++){\n        for(int j=0;j<copy_sums.size();j++){\n            if(sums[i]==copy_sums[j]){\n                res.push_back(M[j]);\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (auto sum : sorted_sums) {\n        for (int i = 0; i < sums.size(); i++) {\n            if (sums[i] == sum) {\n                res.push_back(M[i]);\n                sums[i] = -1;\n                break;\n            }\n        }\n    }\n    return res;"
  ]
}